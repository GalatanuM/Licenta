/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : usbd_custom_hid_if.c
  * @version        : v1.0_Cube
  * @brief          : USB Device Custom HID interface file.
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2025 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
/* USER CODE END Header */

/* Includes ------------------------------------------------------------------*/
#include "usbd_custom_hid_if.h"

/* USER CODE BEGIN INCLUDE */

/* USER CODE END INCLUDE */

/* Private typedef -----------------------------------------------------------*/
/* Private define ------------------------------------------------------------*/
/* Private macro -------------------------------------------------------------*/

/* USER CODE BEGIN PV */
/* Private variables ---------------------------------------------------------*/

/* USER CODE END PV */

/** @addtogroup STM32_USB_OTG_DEVICE_LIBRARY
  * @brief Usb device.
  * @{
  */

/** @addtogroup USBD_CUSTOM_HID
  * @{
  */

/** @defgroup USBD_CUSTOM_HID_Private_TypesDefinitions USBD_CUSTOM_HID_Private_TypesDefinitions
  * @brief Private types.
  * @{
  */

/* USER CODE BEGIN PRIVATE_TYPES */

/* USER CODE END PRIVATE_TYPES */

/**
  * @}
  */

/** @defgroup USBD_CUSTOM_HID_Private_Defines USBD_CUSTOM_HID_Private_Defines
  * @brief Private defines.
  * @{
  */

/* USER CODE BEGIN PRIVATE_DEFINES */

/* USER CODE END PRIVATE_DEFINES */

/**
  * @}
  */

/** @defgroup USBD_CUSTOM_HID_Private_Macros USBD_CUSTOM_HID_Private_Macros
  * @brief Private macros.
  * @{
  */

/* USER CODE BEGIN PRIVATE_MACRO */

/* USER CODE END PRIVATE_MACRO */

/**
  * @}
  */

/** @defgroup USBD_CUSTOM_HID_Private_Variables USBD_CUSTOM_HID_Private_Variables
  * @brief Private variables.
  * @{
  */

/** Usb HID report descriptor. */
__ALIGN_BEGIN static uint8_t CUSTOM_HID_ReportDesc_FS[USBD_CUSTOM_HID_REPORT_DESC_SIZE] __ALIGN_END =
{
	/* USER CODE BEGIN 0 */
	0x05, 0x02,        // Usage Page (Simulation Controls)
	0x09, 0xBB,        // Usage (Steering)
	0xA1, 0x01,        // Collection (Application)

		0x85, 0x10,        // Report ID (0x10)

		// --- Padding (align to next byte) ---
		0x75, 0x08,
		0x95, 0x01,
		0x81, 0x03,       // Input (Constant) — padding byte

		// --- Buttons (8 buttons, packed into 1 byte) ---
		0x05, 0x09,       // Usage Page (Button)
		0x19, 0x01,       // Usage Minimum (Button 1)
		0x29, 0x08,       // Usage Maximum (Button 8)
		0x15, 0x00,       // Logical Minimum (0)
		0x25, 0x01,       // Logical Maximum (1)
		0x95, 0x08,       // Report Count (8 buttons)
		0x75, 0x01,       // Report Size (1 bit per button)
		0x81, 0x02,       // Input (Data, Variable, Absolute)

		// --- Padding (align to next byte) ---
		0x75, 0x08,
		0x95, 0x01,
		0x81, 0x03,       // Input (Constant) — padding byte

		// --- Steering (signed 16-bit) ---
		0x05, 0x02,       // Usage Page (Simulation Controls)
		0x09, 0xBB,       // Usage (Steering)
		0x16, 0x01, 0x80, // Logical Minimum (-32767)
		0x26, 0xFF, 0x7F, // Logical Maximum (32767)
		0x75, 0x10,
		0x95, 0x01,
		0x81, 0x02,

		// --- Throttle ---
		0x09, 0xC4,       // Usage (Accelerator)
		0x15, 0x00,
		0x26, 0xFF, 0xFF,
		0x75, 0x10,
		0x95, 0x01,
		0x81, 0x02,

		// --- Brake ---
		0x09, 0xC5,       // Usage (Brake)
		0x15, 0x00,
		0x26, 0xFF, 0xFF,
		0x75, 0x10,
		0x95, 0x01,
		0x81, 0x02,

		// --- Clutch ---
		0x09, 0xC6,       // Usage (Clutch)
		0x15, 0x00,
		0x26, 0xFF, 0xFF,
		0x75, 0x10,
		0x95, 0x01,
		0x81, 0x02,

	0xC0
	// === PID: Create New Effect Report (Report ID 0x01) ===
	0x05, 0x0F,            // Usage Page (Physical Interface Device)
	0x09, 0x89,            // Usage (Create New Effect Report)
	0xA1, 0x02,            // Collection (Logical)
	  0x85, 0x01,          // Report ID (0x01)
	  0x09, 0x25,          // Usage (Effect Type)
	  0xA1, 0x02,
	    0x09, 0x26,        // Usage (Constant Force)
	    0x15, 0x01,
	    0x25, 0x01,
	    0x75, 0x08,
	    0x95, 0x01,
	    0xB1, 0x00,        // Feature (Data, Array)
	  0xC0,
	0xC0,

	// === PID: Set Constant Force Report (Report ID 0x05) ===
	0x05, 0x0F,
	0x09, 0x73,            // Usage (Set Constant Force Report)
	0xA1, 0x02,
	  0x85, 0x05,          // Report ID (0x05)
	  0x09, 0x22,          // Usage (Effect Block Index)
	  0x15, 0x01, 0x25, 0x28,
	  0x75, 0x08, 0x95, 0x01,
	  0x91, 0x02,          // Output (Data, Variable)

	  0x09, 0x50,          // Usage (Magnitude)
	  0x16, 0x01, 0x80,    // Logical Min (-32767)
	  0x26, 0xFF, 0x7F,    // Logical Max (32767)
	  0x75, 0x10, 0x95, 0x01,
	  0x91, 0x02,          // Output (Data, Variable)
	/* USER CODE END 0 */
	0xC0 // END COLLECTION
};

/* USER CODE BEGIN PRIVATE_VARIABLES */

/* USER CODE END PRIVATE_VARIABLES */

/**
  * @}
  */

/** @defgroup USBD_CUSTOM_HID_Exported_Variables USBD_CUSTOM_HID_Exported_Variables
  * @brief Public variables.
  * @{
  */
extern USBD_HandleTypeDef hUsbDeviceFS;

/* USER CODE BEGIN EXPORTED_VARIABLES */

/* USER CODE END EXPORTED_VARIABLES */
/**
  * @}
  */

/** @defgroup USBD_CUSTOM_HID_Private_FunctionPrototypes USBD_CUSTOM_HID_Private_FunctionPrototypes
  * @brief Private functions declaration.
  * @{
  */

static int8_t CUSTOM_HID_Init_FS(void);
static int8_t CUSTOM_HID_DeInit_FS(void);
static int8_t CUSTOM_HID_OutEvent_FS(uint8_t event_idx, uint8_t state);

/**
  * @}
  */

USBD_CUSTOM_HID_ItfTypeDef USBD_CustomHID_fops_FS =
{
  CUSTOM_HID_ReportDesc_FS,
  CUSTOM_HID_Init_FS,
  CUSTOM_HID_DeInit_FS,
  CUSTOM_HID_OutEvent_FS
};

/** @defgroup USBD_CUSTOM_HID_Private_Functions USBD_CUSTOM_HID_Private_Functions
  * @brief Private functions.
  * @{
  */

/* Private functions ---------------------------------------------------------*/

/**
  * @brief  Initializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_Init_FS(void)
{
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
  /* USER CODE END 4 */
}

/**
  * @brief  DeInitializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_DeInit_FS(void)
{
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
  /* USER CODE END 5 */
}

/**
  * @brief  Manage the CUSTOM HID class events
  * @param  event_idx: Event index
  * @param  state: Event state
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_OutEvent_FS(uint8_t event_idx, uint8_t state)
{
  /* USER CODE BEGIN 6 */
  UNUSED(event_idx);
  UNUSED(state);
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)hUsbDeviceFS.pClassData;
  uint8_t *buffer = hhid->Report_buf;

  if (buffer[0] == 0x05)  // Set Constant Force
  {
      uint8_t effect_block = buffer[1]; // usually 1
      int16_t magnitude = (int16_t)(buffer[2] | (buffer[3] << 8));
  }

  /* Start next USB packet transfer once data processing is completed */
  if (USBD_CUSTOM_HID_ReceivePacket(&hUsbDeviceFS) != (uint8_t)USBD_OK)
  {
    return -1;
  }

  return (USBD_OK);
  /* USER CODE END 6 */
}

/* USER CODE BEGIN 7 */
/**
  * @brief  Send the report to the Host
  * @param  report: The report to be sent
  * @param  len: The report length
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
/*
static int8_t USBD_CUSTOM_HID_SendReport_FS(uint8_t *report, uint16_t len)
{
  return USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, report, len);
}
*/
/* USER CODE END 7 */

/* USER CODE BEGIN PRIVATE_FUNCTIONS_IMPLEMENTATION */

/* USER CODE END PRIVATE_FUNCTIONS_IMPLEMENTATION */
/**
  * @}
  */

/**
  * @}
  */

/**
  * @}
  */

