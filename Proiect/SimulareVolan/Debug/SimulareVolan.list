
SimulareVolan.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000070c4  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  0800724c  0800724c  0000824c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080072bc  080072bc  00009120  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080072bc  080072bc  000082bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080072c4  080072c4  00009120  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080072c4  080072c4  000082c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080072c8  080072c8  000082c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000120  20000000  080072cc  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00009120  2**0
                  CONTENTS
 10 .bss          00000a54  20000120  20000120  00009120  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000b74  20000b74  00009120  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00009120  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001248e  00000000  00000000  00009150  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002f9b  00000000  00000000  0001b5de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001088  00000000  00000000  0001e580  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000c91  00000000  00000000  0001f608  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000217b9  00000000  00000000  00020299  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000148a9  00000000  00000000  00041a52  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c1c0b  00000000  00000000  000562fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00117f06  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000044c0  00000000  00000000  00117f4c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006c  00000000  00000000  0011c40c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000120 	.word	0x20000120
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08007234 	.word	0x08007234

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000124 	.word	0x20000124
 80001c4:	08007234 	.word	0x08007234

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b988 	b.w	80004f0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	468e      	mov	lr, r1
 8000200:	4604      	mov	r4, r0
 8000202:	4688      	mov	r8, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d962      	bls.n	80002d4 <__udivmoddi4+0xdc>
 800020e:	fab2 f682 	clz	r6, r2
 8000212:	b14e      	cbz	r6, 8000228 <__udivmoddi4+0x30>
 8000214:	f1c6 0320 	rsb	r3, r6, #32
 8000218:	fa01 f806 	lsl.w	r8, r1, r6
 800021c:	fa20 f303 	lsr.w	r3, r0, r3
 8000220:	40b7      	lsls	r7, r6
 8000222:	ea43 0808 	orr.w	r8, r3, r8
 8000226:	40b4      	lsls	r4, r6
 8000228:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800022c:	fa1f fc87 	uxth.w	ip, r7
 8000230:	fbb8 f1fe 	udiv	r1, r8, lr
 8000234:	0c23      	lsrs	r3, r4, #16
 8000236:	fb0e 8811 	mls	r8, lr, r1, r8
 800023a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023e:	fb01 f20c 	mul.w	r2, r1, ip
 8000242:	429a      	cmp	r2, r3
 8000244:	d909      	bls.n	800025a <__udivmoddi4+0x62>
 8000246:	18fb      	adds	r3, r7, r3
 8000248:	f101 30ff 	add.w	r0, r1, #4294967295
 800024c:	f080 80ea 	bcs.w	8000424 <__udivmoddi4+0x22c>
 8000250:	429a      	cmp	r2, r3
 8000252:	f240 80e7 	bls.w	8000424 <__udivmoddi4+0x22c>
 8000256:	3902      	subs	r1, #2
 8000258:	443b      	add	r3, r7
 800025a:	1a9a      	subs	r2, r3, r2
 800025c:	b2a3      	uxth	r3, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800026a:	fb00 fc0c 	mul.w	ip, r0, ip
 800026e:	459c      	cmp	ip, r3
 8000270:	d909      	bls.n	8000286 <__udivmoddi4+0x8e>
 8000272:	18fb      	adds	r3, r7, r3
 8000274:	f100 32ff 	add.w	r2, r0, #4294967295
 8000278:	f080 80d6 	bcs.w	8000428 <__udivmoddi4+0x230>
 800027c:	459c      	cmp	ip, r3
 800027e:	f240 80d3 	bls.w	8000428 <__udivmoddi4+0x230>
 8000282:	443b      	add	r3, r7
 8000284:	3802      	subs	r0, #2
 8000286:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028a:	eba3 030c 	sub.w	r3, r3, ip
 800028e:	2100      	movs	r1, #0
 8000290:	b11d      	cbz	r5, 800029a <__udivmoddi4+0xa2>
 8000292:	40f3      	lsrs	r3, r6
 8000294:	2200      	movs	r2, #0
 8000296:	e9c5 3200 	strd	r3, r2, [r5]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d905      	bls.n	80002ae <__udivmoddi4+0xb6>
 80002a2:	b10d      	cbz	r5, 80002a8 <__udivmoddi4+0xb0>
 80002a4:	e9c5 0100 	strd	r0, r1, [r5]
 80002a8:	2100      	movs	r1, #0
 80002aa:	4608      	mov	r0, r1
 80002ac:	e7f5      	b.n	800029a <__udivmoddi4+0xa2>
 80002ae:	fab3 f183 	clz	r1, r3
 80002b2:	2900      	cmp	r1, #0
 80002b4:	d146      	bne.n	8000344 <__udivmoddi4+0x14c>
 80002b6:	4573      	cmp	r3, lr
 80002b8:	d302      	bcc.n	80002c0 <__udivmoddi4+0xc8>
 80002ba:	4282      	cmp	r2, r0
 80002bc:	f200 8105 	bhi.w	80004ca <__udivmoddi4+0x2d2>
 80002c0:	1a84      	subs	r4, r0, r2
 80002c2:	eb6e 0203 	sbc.w	r2, lr, r3
 80002c6:	2001      	movs	r0, #1
 80002c8:	4690      	mov	r8, r2
 80002ca:	2d00      	cmp	r5, #0
 80002cc:	d0e5      	beq.n	800029a <__udivmoddi4+0xa2>
 80002ce:	e9c5 4800 	strd	r4, r8, [r5]
 80002d2:	e7e2      	b.n	800029a <__udivmoddi4+0xa2>
 80002d4:	2a00      	cmp	r2, #0
 80002d6:	f000 8090 	beq.w	80003fa <__udivmoddi4+0x202>
 80002da:	fab2 f682 	clz	r6, r2
 80002de:	2e00      	cmp	r6, #0
 80002e0:	f040 80a4 	bne.w	800042c <__udivmoddi4+0x234>
 80002e4:	1a8a      	subs	r2, r1, r2
 80002e6:	0c03      	lsrs	r3, r0, #16
 80002e8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002ec:	b280      	uxth	r0, r0
 80002ee:	b2bc      	uxth	r4, r7
 80002f0:	2101      	movs	r1, #1
 80002f2:	fbb2 fcfe 	udiv	ip, r2, lr
 80002f6:	fb0e 221c 	mls	r2, lr, ip, r2
 80002fa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002fe:	fb04 f20c 	mul.w	r2, r4, ip
 8000302:	429a      	cmp	r2, r3
 8000304:	d907      	bls.n	8000316 <__udivmoddi4+0x11e>
 8000306:	18fb      	adds	r3, r7, r3
 8000308:	f10c 38ff 	add.w	r8, ip, #4294967295
 800030c:	d202      	bcs.n	8000314 <__udivmoddi4+0x11c>
 800030e:	429a      	cmp	r2, r3
 8000310:	f200 80e0 	bhi.w	80004d4 <__udivmoddi4+0x2dc>
 8000314:	46c4      	mov	ip, r8
 8000316:	1a9b      	subs	r3, r3, r2
 8000318:	fbb3 f2fe 	udiv	r2, r3, lr
 800031c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000320:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000324:	fb02 f404 	mul.w	r4, r2, r4
 8000328:	429c      	cmp	r4, r3
 800032a:	d907      	bls.n	800033c <__udivmoddi4+0x144>
 800032c:	18fb      	adds	r3, r7, r3
 800032e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x142>
 8000334:	429c      	cmp	r4, r3
 8000336:	f200 80ca 	bhi.w	80004ce <__udivmoddi4+0x2d6>
 800033a:	4602      	mov	r2, r0
 800033c:	1b1b      	subs	r3, r3, r4
 800033e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000342:	e7a5      	b.n	8000290 <__udivmoddi4+0x98>
 8000344:	f1c1 0620 	rsb	r6, r1, #32
 8000348:	408b      	lsls	r3, r1
 800034a:	fa22 f706 	lsr.w	r7, r2, r6
 800034e:	431f      	orrs	r7, r3
 8000350:	fa0e f401 	lsl.w	r4, lr, r1
 8000354:	fa20 f306 	lsr.w	r3, r0, r6
 8000358:	fa2e fe06 	lsr.w	lr, lr, r6
 800035c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000360:	4323      	orrs	r3, r4
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	fa1f fc87 	uxth.w	ip, r7
 800036a:	fbbe f0f9 	udiv	r0, lr, r9
 800036e:	0c1c      	lsrs	r4, r3, #16
 8000370:	fb09 ee10 	mls	lr, r9, r0, lr
 8000374:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000378:	fb00 fe0c 	mul.w	lr, r0, ip
 800037c:	45a6      	cmp	lr, r4
 800037e:	fa02 f201 	lsl.w	r2, r2, r1
 8000382:	d909      	bls.n	8000398 <__udivmoddi4+0x1a0>
 8000384:	193c      	adds	r4, r7, r4
 8000386:	f100 3aff 	add.w	sl, r0, #4294967295
 800038a:	f080 809c 	bcs.w	80004c6 <__udivmoddi4+0x2ce>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f240 8099 	bls.w	80004c6 <__udivmoddi4+0x2ce>
 8000394:	3802      	subs	r0, #2
 8000396:	443c      	add	r4, r7
 8000398:	eba4 040e 	sub.w	r4, r4, lr
 800039c:	fa1f fe83 	uxth.w	lr, r3
 80003a0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003a4:	fb09 4413 	mls	r4, r9, r3, r4
 80003a8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003ac:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b0:	45a4      	cmp	ip, r4
 80003b2:	d908      	bls.n	80003c6 <__udivmoddi4+0x1ce>
 80003b4:	193c      	adds	r4, r7, r4
 80003b6:	f103 3eff 	add.w	lr, r3, #4294967295
 80003ba:	f080 8082 	bcs.w	80004c2 <__udivmoddi4+0x2ca>
 80003be:	45a4      	cmp	ip, r4
 80003c0:	d97f      	bls.n	80004c2 <__udivmoddi4+0x2ca>
 80003c2:	3b02      	subs	r3, #2
 80003c4:	443c      	add	r4, r7
 80003c6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003ca:	eba4 040c 	sub.w	r4, r4, ip
 80003ce:	fba0 ec02 	umull	lr, ip, r0, r2
 80003d2:	4564      	cmp	r4, ip
 80003d4:	4673      	mov	r3, lr
 80003d6:	46e1      	mov	r9, ip
 80003d8:	d362      	bcc.n	80004a0 <__udivmoddi4+0x2a8>
 80003da:	d05f      	beq.n	800049c <__udivmoddi4+0x2a4>
 80003dc:	b15d      	cbz	r5, 80003f6 <__udivmoddi4+0x1fe>
 80003de:	ebb8 0203 	subs.w	r2, r8, r3
 80003e2:	eb64 0409 	sbc.w	r4, r4, r9
 80003e6:	fa04 f606 	lsl.w	r6, r4, r6
 80003ea:	fa22 f301 	lsr.w	r3, r2, r1
 80003ee:	431e      	orrs	r6, r3
 80003f0:	40cc      	lsrs	r4, r1
 80003f2:	e9c5 6400 	strd	r6, r4, [r5]
 80003f6:	2100      	movs	r1, #0
 80003f8:	e74f      	b.n	800029a <__udivmoddi4+0xa2>
 80003fa:	fbb1 fcf2 	udiv	ip, r1, r2
 80003fe:	0c01      	lsrs	r1, r0, #16
 8000400:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000404:	b280      	uxth	r0, r0
 8000406:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800040a:	463b      	mov	r3, r7
 800040c:	4638      	mov	r0, r7
 800040e:	463c      	mov	r4, r7
 8000410:	46b8      	mov	r8, r7
 8000412:	46be      	mov	lr, r7
 8000414:	2620      	movs	r6, #32
 8000416:	fbb1 f1f7 	udiv	r1, r1, r7
 800041a:	eba2 0208 	sub.w	r2, r2, r8
 800041e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000422:	e766      	b.n	80002f2 <__udivmoddi4+0xfa>
 8000424:	4601      	mov	r1, r0
 8000426:	e718      	b.n	800025a <__udivmoddi4+0x62>
 8000428:	4610      	mov	r0, r2
 800042a:	e72c      	b.n	8000286 <__udivmoddi4+0x8e>
 800042c:	f1c6 0220 	rsb	r2, r6, #32
 8000430:	fa2e f302 	lsr.w	r3, lr, r2
 8000434:	40b7      	lsls	r7, r6
 8000436:	40b1      	lsls	r1, r6
 8000438:	fa20 f202 	lsr.w	r2, r0, r2
 800043c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000440:	430a      	orrs	r2, r1
 8000442:	fbb3 f8fe 	udiv	r8, r3, lr
 8000446:	b2bc      	uxth	r4, r7
 8000448:	fb0e 3318 	mls	r3, lr, r8, r3
 800044c:	0c11      	lsrs	r1, r2, #16
 800044e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000452:	fb08 f904 	mul.w	r9, r8, r4
 8000456:	40b0      	lsls	r0, r6
 8000458:	4589      	cmp	r9, r1
 800045a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800045e:	b280      	uxth	r0, r0
 8000460:	d93e      	bls.n	80004e0 <__udivmoddi4+0x2e8>
 8000462:	1879      	adds	r1, r7, r1
 8000464:	f108 3cff 	add.w	ip, r8, #4294967295
 8000468:	d201      	bcs.n	800046e <__udivmoddi4+0x276>
 800046a:	4589      	cmp	r9, r1
 800046c:	d81f      	bhi.n	80004ae <__udivmoddi4+0x2b6>
 800046e:	eba1 0109 	sub.w	r1, r1, r9
 8000472:	fbb1 f9fe 	udiv	r9, r1, lr
 8000476:	fb09 f804 	mul.w	r8, r9, r4
 800047a:	fb0e 1119 	mls	r1, lr, r9, r1
 800047e:	b292      	uxth	r2, r2
 8000480:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000484:	4542      	cmp	r2, r8
 8000486:	d229      	bcs.n	80004dc <__udivmoddi4+0x2e4>
 8000488:	18ba      	adds	r2, r7, r2
 800048a:	f109 31ff 	add.w	r1, r9, #4294967295
 800048e:	d2c4      	bcs.n	800041a <__udivmoddi4+0x222>
 8000490:	4542      	cmp	r2, r8
 8000492:	d2c2      	bcs.n	800041a <__udivmoddi4+0x222>
 8000494:	f1a9 0102 	sub.w	r1, r9, #2
 8000498:	443a      	add	r2, r7
 800049a:	e7be      	b.n	800041a <__udivmoddi4+0x222>
 800049c:	45f0      	cmp	r8, lr
 800049e:	d29d      	bcs.n	80003dc <__udivmoddi4+0x1e4>
 80004a0:	ebbe 0302 	subs.w	r3, lr, r2
 80004a4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004a8:	3801      	subs	r0, #1
 80004aa:	46e1      	mov	r9, ip
 80004ac:	e796      	b.n	80003dc <__udivmoddi4+0x1e4>
 80004ae:	eba7 0909 	sub.w	r9, r7, r9
 80004b2:	4449      	add	r1, r9
 80004b4:	f1a8 0c02 	sub.w	ip, r8, #2
 80004b8:	fbb1 f9fe 	udiv	r9, r1, lr
 80004bc:	fb09 f804 	mul.w	r8, r9, r4
 80004c0:	e7db      	b.n	800047a <__udivmoddi4+0x282>
 80004c2:	4673      	mov	r3, lr
 80004c4:	e77f      	b.n	80003c6 <__udivmoddi4+0x1ce>
 80004c6:	4650      	mov	r0, sl
 80004c8:	e766      	b.n	8000398 <__udivmoddi4+0x1a0>
 80004ca:	4608      	mov	r0, r1
 80004cc:	e6fd      	b.n	80002ca <__udivmoddi4+0xd2>
 80004ce:	443b      	add	r3, r7
 80004d0:	3a02      	subs	r2, #2
 80004d2:	e733      	b.n	800033c <__udivmoddi4+0x144>
 80004d4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d8:	443b      	add	r3, r7
 80004da:	e71c      	b.n	8000316 <__udivmoddi4+0x11e>
 80004dc:	4649      	mov	r1, r9
 80004de:	e79c      	b.n	800041a <__udivmoddi4+0x222>
 80004e0:	eba1 0109 	sub.w	r1, r1, r9
 80004e4:	46c4      	mov	ip, r8
 80004e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004ea:	fb09 f804 	mul.w	r8, r9, r4
 80004ee:	e7c4      	b.n	800047a <__udivmoddi4+0x282>

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <HAL_TIM_IC_CaptureCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80004f4:	b480      	push	{r7}
 80004f6:	b083      	sub	sp, #12
 80004f8:	af00      	add	r7, sp, #0
 80004fa:	6078      	str	r0, [r7, #4]
	reportContainer.wheel = __HAL_TIM_GET_COUNTER(htim) >> 8;
 80004fc:	687b      	ldr	r3, [r7, #4]
 80004fe:	681b      	ldr	r3, [r3, #0]
 8000500:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000502:	0a1b      	lsrs	r3, r3, #8
 8000504:	b21a      	sxth	r2, r3
 8000506:	4b0b      	ldr	r3, [pc, #44]	@ (8000534 <HAL_TIM_IC_CaptureCallback+0x40>)
 8000508:	805a      	strh	r2, [r3, #2]
	reportContainer.acceleration = __HAL_TIM_GET_COUNTER(htim) >> 8;
 800050a:	687b      	ldr	r3, [r7, #4]
 800050c:	681b      	ldr	r3, [r3, #0]
 800050e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000510:	0a1b      	lsrs	r3, r3, #8
 8000512:	b29a      	uxth	r2, r3
 8000514:	4b07      	ldr	r3, [pc, #28]	@ (8000534 <HAL_TIM_IC_CaptureCallback+0x40>)
 8000516:	809a      	strh	r2, [r3, #4]
	reportContainer.brake = __HAL_TIM_GET_COUNTER(htim) >> 8;
 8000518:	687b      	ldr	r3, [r7, #4]
 800051a:	681b      	ldr	r3, [r3, #0]
 800051c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800051e:	0a1b      	lsrs	r3, r3, #8
 8000520:	b29a      	uxth	r2, r3
 8000522:	4b04      	ldr	r3, [pc, #16]	@ (8000534 <HAL_TIM_IC_CaptureCallback+0x40>)
 8000524:	80da      	strh	r2, [r3, #6]
}
 8000526:	bf00      	nop
 8000528:	370c      	adds	r7, #12
 800052a:	46bd      	mov	sp, r7
 800052c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000530:	4770      	bx	lr
 8000532:	bf00      	nop
 8000534:	20000184 	.word	0x20000184

08000538 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000538:	b580      	push	{r7, lr}
 800053a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800053c:	f000 fa0e 	bl	800095c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000540:	f000 f81a 	bl	8000578 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000544:	f000 f8d6 	bl	80006f4 <MX_GPIO_Init>
  MX_TIM3_Init();
 8000548:	f000 f880 	bl	800064c <MX_TIM3_Init>
  MX_USB_DEVICE_Init();
 800054c:	f006 f9dc 	bl	8006908 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Encoder_Start_IT(&htim3, TIM_CHANNEL_ALL);
 8000550:	213c      	movs	r1, #60	@ 0x3c
 8000552:	4806      	ldr	r0, [pc, #24]	@ (800056c <main+0x34>)
 8000554:	f002 fc96 	bl	8002e84 <HAL_TIM_Encoder_Start_IT>
  reportContainer.buttons = 0x55|0x55;
 8000558:	4b05      	ldr	r3, [pc, #20]	@ (8000570 <main+0x38>)
 800055a:	2255      	movs	r2, #85	@ 0x55
 800055c:	701a      	strb	r2, [r3, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, (uint8_t *)&reportContainer, 7);
 800055e:	2207      	movs	r2, #7
 8000560:	4903      	ldr	r1, [pc, #12]	@ (8000570 <main+0x38>)
 8000562:	4804      	ldr	r0, [pc, #16]	@ (8000574 <main+0x3c>)
 8000564:	f004 fd46 	bl	8004ff4 <USBD_CUSTOM_HID_SendReport>
  {
 8000568:	bf00      	nop
 800056a:	e7f8      	b.n	800055e <main+0x26>
 800056c:	2000013c 	.word	0x2000013c
 8000570:	20000184 	.word	0x20000184
 8000574:	20000194 	.word	0x20000194

08000578 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	b094      	sub	sp, #80	@ 0x50
 800057c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800057e:	f107 0320 	add.w	r3, r7, #32
 8000582:	2230      	movs	r2, #48	@ 0x30
 8000584:	2100      	movs	r1, #0
 8000586:	4618      	mov	r0, r3
 8000588:	f006 fe28 	bl	80071dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800058c:	f107 030c 	add.w	r3, r7, #12
 8000590:	2200      	movs	r2, #0
 8000592:	601a      	str	r2, [r3, #0]
 8000594:	605a      	str	r2, [r3, #4]
 8000596:	609a      	str	r2, [r3, #8]
 8000598:	60da      	str	r2, [r3, #12]
 800059a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800059c:	2300      	movs	r3, #0
 800059e:	60bb      	str	r3, [r7, #8]
 80005a0:	4b28      	ldr	r3, [pc, #160]	@ (8000644 <SystemClock_Config+0xcc>)
 80005a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005a4:	4a27      	ldr	r2, [pc, #156]	@ (8000644 <SystemClock_Config+0xcc>)
 80005a6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80005aa:	6413      	str	r3, [r2, #64]	@ 0x40
 80005ac:	4b25      	ldr	r3, [pc, #148]	@ (8000644 <SystemClock_Config+0xcc>)
 80005ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005b0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80005b4:	60bb      	str	r3, [r7, #8]
 80005b6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005b8:	2300      	movs	r3, #0
 80005ba:	607b      	str	r3, [r7, #4]
 80005bc:	4b22      	ldr	r3, [pc, #136]	@ (8000648 <SystemClock_Config+0xd0>)
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	4a21      	ldr	r2, [pc, #132]	@ (8000648 <SystemClock_Config+0xd0>)
 80005c2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80005c6:	6013      	str	r3, [r2, #0]
 80005c8:	4b1f      	ldr	r3, [pc, #124]	@ (8000648 <SystemClock_Config+0xd0>)
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80005d0:	607b      	str	r3, [r7, #4]
 80005d2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005d4:	2301      	movs	r3, #1
 80005d6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005d8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80005dc:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005de:	2302      	movs	r3, #2
 80005e0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005e2:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80005e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80005e8:	2304      	movs	r3, #4
 80005ea:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80005ec:	23a8      	movs	r3, #168	@ 0xa8
 80005ee:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005f0:	2302      	movs	r3, #2
 80005f2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80005f4:	2307      	movs	r3, #7
 80005f6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005f8:	f107 0320 	add.w	r3, r7, #32
 80005fc:	4618      	mov	r0, r3
 80005fe:	f001 ff2b 	bl	8002458 <HAL_RCC_OscConfig>
 8000602:	4603      	mov	r3, r0
 8000604:	2b00      	cmp	r3, #0
 8000606:	d001      	beq.n	800060c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000608:	f000 f8aa 	bl	8000760 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800060c:	230f      	movs	r3, #15
 800060e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000610:	2302      	movs	r3, #2
 8000612:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000614:	2300      	movs	r3, #0
 8000616:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000618:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800061c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800061e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000622:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000624:	f107 030c 	add.w	r3, r7, #12
 8000628:	2105      	movs	r1, #5
 800062a:	4618      	mov	r0, r3
 800062c:	f002 f98c 	bl	8002948 <HAL_RCC_ClockConfig>
 8000630:	4603      	mov	r3, r0
 8000632:	2b00      	cmp	r3, #0
 8000634:	d001      	beq.n	800063a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000636:	f000 f893 	bl	8000760 <Error_Handler>
  }
}
 800063a:	bf00      	nop
 800063c:	3750      	adds	r7, #80	@ 0x50
 800063e:	46bd      	mov	sp, r7
 8000640:	bd80      	pop	{r7, pc}
 8000642:	bf00      	nop
 8000644:	40023800 	.word	0x40023800
 8000648:	40007000 	.word	0x40007000

0800064c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	b08c      	sub	sp, #48	@ 0x30
 8000650:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000652:	f107 030c 	add.w	r3, r7, #12
 8000656:	2224      	movs	r2, #36	@ 0x24
 8000658:	2100      	movs	r1, #0
 800065a:	4618      	mov	r0, r3
 800065c:	f006 fdbe 	bl	80071dc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000660:	1d3b      	adds	r3, r7, #4
 8000662:	2200      	movs	r2, #0
 8000664:	601a      	str	r2, [r3, #0]
 8000666:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000668:	4b20      	ldr	r3, [pc, #128]	@ (80006ec <MX_TIM3_Init+0xa0>)
 800066a:	4a21      	ldr	r2, [pc, #132]	@ (80006f0 <MX_TIM3_Init+0xa4>)
 800066c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800066e:	4b1f      	ldr	r3, [pc, #124]	@ (80006ec <MX_TIM3_Init+0xa0>)
 8000670:	2200      	movs	r2, #0
 8000672:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000674:	4b1d      	ldr	r3, [pc, #116]	@ (80006ec <MX_TIM3_Init+0xa0>)
 8000676:	2200      	movs	r2, #0
 8000678:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800067a:	4b1c      	ldr	r3, [pc, #112]	@ (80006ec <MX_TIM3_Init+0xa0>)
 800067c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000680:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000682:	4b1a      	ldr	r3, [pc, #104]	@ (80006ec <MX_TIM3_Init+0xa0>)
 8000684:	2200      	movs	r2, #0
 8000686:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000688:	4b18      	ldr	r3, [pc, #96]	@ (80006ec <MX_TIM3_Init+0xa0>)
 800068a:	2200      	movs	r2, #0
 800068c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800068e:	2303      	movs	r3, #3
 8000690:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8000692:	2302      	movs	r3, #2
 8000694:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000696:	2301      	movs	r3, #1
 8000698:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800069a:	2300      	movs	r3, #0
 800069c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800069e:	2300      	movs	r3, #0
 80006a0:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 80006a2:	2302      	movs	r3, #2
 80006a4:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80006a6:	2301      	movs	r3, #1
 80006a8:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80006aa:	2300      	movs	r3, #0
 80006ac:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 80006ae:	2300      	movs	r3, #0
 80006b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80006b2:	f107 030c 	add.w	r3, r7, #12
 80006b6:	4619      	mov	r1, r3
 80006b8:	480c      	ldr	r0, [pc, #48]	@ (80006ec <MX_TIM3_Init+0xa0>)
 80006ba:	f002 fb3d 	bl	8002d38 <HAL_TIM_Encoder_Init>
 80006be:	4603      	mov	r3, r0
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	d001      	beq.n	80006c8 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 80006c4:	f000 f84c 	bl	8000760 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80006c8:	2300      	movs	r3, #0
 80006ca:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006cc:	2300      	movs	r3, #0
 80006ce:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80006d0:	1d3b      	adds	r3, r7, #4
 80006d2:	4619      	mov	r1, r3
 80006d4:	4805      	ldr	r0, [pc, #20]	@ (80006ec <MX_TIM3_Init+0xa0>)
 80006d6:	f002 fe6d 	bl	80033b4 <HAL_TIMEx_MasterConfigSynchronization>
 80006da:	4603      	mov	r3, r0
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d001      	beq.n	80006e4 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 80006e0:	f000 f83e 	bl	8000760 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80006e4:	bf00      	nop
 80006e6:	3730      	adds	r7, #48	@ 0x30
 80006e8:	46bd      	mov	sp, r7
 80006ea:	bd80      	pop	{r7, pc}
 80006ec:	2000013c 	.word	0x2000013c
 80006f0:	40000400 	.word	0x40000400

080006f4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006f4:	b480      	push	{r7}
 80006f6:	b085      	sub	sp, #20
 80006f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006fa:	2300      	movs	r3, #0
 80006fc:	60fb      	str	r3, [r7, #12]
 80006fe:	4b17      	ldr	r3, [pc, #92]	@ (800075c <MX_GPIO_Init+0x68>)
 8000700:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000702:	4a16      	ldr	r2, [pc, #88]	@ (800075c <MX_GPIO_Init+0x68>)
 8000704:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000708:	6313      	str	r3, [r2, #48]	@ 0x30
 800070a:	4b14      	ldr	r3, [pc, #80]	@ (800075c <MX_GPIO_Init+0x68>)
 800070c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800070e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000712:	60fb      	str	r3, [r7, #12]
 8000714:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000716:	2300      	movs	r3, #0
 8000718:	60bb      	str	r3, [r7, #8]
 800071a:	4b10      	ldr	r3, [pc, #64]	@ (800075c <MX_GPIO_Init+0x68>)
 800071c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800071e:	4a0f      	ldr	r2, [pc, #60]	@ (800075c <MX_GPIO_Init+0x68>)
 8000720:	f043 0301 	orr.w	r3, r3, #1
 8000724:	6313      	str	r3, [r2, #48]	@ 0x30
 8000726:	4b0d      	ldr	r3, [pc, #52]	@ (800075c <MX_GPIO_Init+0x68>)
 8000728:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800072a:	f003 0301 	and.w	r3, r3, #1
 800072e:	60bb      	str	r3, [r7, #8]
 8000730:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000732:	2300      	movs	r3, #0
 8000734:	607b      	str	r3, [r7, #4]
 8000736:	4b09      	ldr	r3, [pc, #36]	@ (800075c <MX_GPIO_Init+0x68>)
 8000738:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800073a:	4a08      	ldr	r2, [pc, #32]	@ (800075c <MX_GPIO_Init+0x68>)
 800073c:	f043 0302 	orr.w	r3, r3, #2
 8000740:	6313      	str	r3, [r2, #48]	@ 0x30
 8000742:	4b06      	ldr	r3, [pc, #24]	@ (800075c <MX_GPIO_Init+0x68>)
 8000744:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000746:	f003 0302 	and.w	r3, r3, #2
 800074a:	607b      	str	r3, [r7, #4]
 800074c:	687b      	ldr	r3, [r7, #4]

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800074e:	bf00      	nop
 8000750:	3714      	adds	r7, #20
 8000752:	46bd      	mov	sp, r7
 8000754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000758:	4770      	bx	lr
 800075a:	bf00      	nop
 800075c:	40023800 	.word	0x40023800

08000760 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000760:	b480      	push	{r7}
 8000762:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000764:	b672      	cpsid	i
}
 8000766:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000768:	bf00      	nop
 800076a:	e7fd      	b.n	8000768 <Error_Handler+0x8>

0800076c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800076c:	b480      	push	{r7}
 800076e:	b083      	sub	sp, #12
 8000770:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000772:	2300      	movs	r3, #0
 8000774:	607b      	str	r3, [r7, #4]
 8000776:	4b10      	ldr	r3, [pc, #64]	@ (80007b8 <HAL_MspInit+0x4c>)
 8000778:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800077a:	4a0f      	ldr	r2, [pc, #60]	@ (80007b8 <HAL_MspInit+0x4c>)
 800077c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000780:	6453      	str	r3, [r2, #68]	@ 0x44
 8000782:	4b0d      	ldr	r3, [pc, #52]	@ (80007b8 <HAL_MspInit+0x4c>)
 8000784:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000786:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800078a:	607b      	str	r3, [r7, #4]
 800078c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800078e:	2300      	movs	r3, #0
 8000790:	603b      	str	r3, [r7, #0]
 8000792:	4b09      	ldr	r3, [pc, #36]	@ (80007b8 <HAL_MspInit+0x4c>)
 8000794:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000796:	4a08      	ldr	r2, [pc, #32]	@ (80007b8 <HAL_MspInit+0x4c>)
 8000798:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800079c:	6413      	str	r3, [r2, #64]	@ 0x40
 800079e:	4b06      	ldr	r3, [pc, #24]	@ (80007b8 <HAL_MspInit+0x4c>)
 80007a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80007a6:	603b      	str	r3, [r7, #0]
 80007a8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007aa:	bf00      	nop
 80007ac:	370c      	adds	r7, #12
 80007ae:	46bd      	mov	sp, r7
 80007b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b4:	4770      	bx	lr
 80007b6:	bf00      	nop
 80007b8:	40023800 	.word	0x40023800

080007bc <HAL_TIM_Encoder_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_encoder: TIM_Encoder handle pointer
  * @retval None
  */
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b08a      	sub	sp, #40	@ 0x28
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007c4:	f107 0314 	add.w	r3, r7, #20
 80007c8:	2200      	movs	r2, #0
 80007ca:	601a      	str	r2, [r3, #0]
 80007cc:	605a      	str	r2, [r3, #4]
 80007ce:	609a      	str	r2, [r3, #8]
 80007d0:	60da      	str	r2, [r3, #12]
 80007d2:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	4a1d      	ldr	r2, [pc, #116]	@ (8000850 <HAL_TIM_Encoder_MspInit+0x94>)
 80007da:	4293      	cmp	r3, r2
 80007dc:	d133      	bne.n	8000846 <HAL_TIM_Encoder_MspInit+0x8a>
  {
    /* USER CODE BEGIN TIM3_MspInit 0 */

    /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80007de:	2300      	movs	r3, #0
 80007e0:	613b      	str	r3, [r7, #16]
 80007e2:	4b1c      	ldr	r3, [pc, #112]	@ (8000854 <HAL_TIM_Encoder_MspInit+0x98>)
 80007e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007e6:	4a1b      	ldr	r2, [pc, #108]	@ (8000854 <HAL_TIM_Encoder_MspInit+0x98>)
 80007e8:	f043 0302 	orr.w	r3, r3, #2
 80007ec:	6413      	str	r3, [r2, #64]	@ 0x40
 80007ee:	4b19      	ldr	r3, [pc, #100]	@ (8000854 <HAL_TIM_Encoder_MspInit+0x98>)
 80007f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007f2:	f003 0302 	and.w	r3, r3, #2
 80007f6:	613b      	str	r3, [r7, #16]
 80007f8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80007fa:	2300      	movs	r3, #0
 80007fc:	60fb      	str	r3, [r7, #12]
 80007fe:	4b15      	ldr	r3, [pc, #84]	@ (8000854 <HAL_TIM_Encoder_MspInit+0x98>)
 8000800:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000802:	4a14      	ldr	r2, [pc, #80]	@ (8000854 <HAL_TIM_Encoder_MspInit+0x98>)
 8000804:	f043 0302 	orr.w	r3, r3, #2
 8000808:	6313      	str	r3, [r2, #48]	@ 0x30
 800080a:	4b12      	ldr	r3, [pc, #72]	@ (8000854 <HAL_TIM_Encoder_MspInit+0x98>)
 800080c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800080e:	f003 0302 	and.w	r3, r3, #2
 8000812:	60fb      	str	r3, [r7, #12]
 8000814:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000816:	2330      	movs	r3, #48	@ 0x30
 8000818:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800081a:	2302      	movs	r3, #2
 800081c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800081e:	2300      	movs	r3, #0
 8000820:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000822:	2300      	movs	r3, #0
 8000824:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000826:	2302      	movs	r3, #2
 8000828:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800082a:	f107 0314 	add.w	r3, r7, #20
 800082e:	4619      	mov	r1, r3
 8000830:	4809      	ldr	r0, [pc, #36]	@ (8000858 <HAL_TIM_Encoder_MspInit+0x9c>)
 8000832:	f000 fa3b 	bl	8000cac <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000836:	2200      	movs	r2, #0
 8000838:	2100      	movs	r1, #0
 800083a:	201d      	movs	r0, #29
 800083c:	f000 f9ff 	bl	8000c3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000840:	201d      	movs	r0, #29
 8000842:	f000 fa18 	bl	8000c76 <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM3_MspInit 1 */

  }

}
 8000846:	bf00      	nop
 8000848:	3728      	adds	r7, #40	@ 0x28
 800084a:	46bd      	mov	sp, r7
 800084c:	bd80      	pop	{r7, pc}
 800084e:	bf00      	nop
 8000850:	40000400 	.word	0x40000400
 8000854:	40023800 	.word	0x40023800
 8000858:	40020400 	.word	0x40020400

0800085c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800085c:	b480      	push	{r7}
 800085e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000860:	bf00      	nop
 8000862:	e7fd      	b.n	8000860 <NMI_Handler+0x4>

08000864 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000864:	b480      	push	{r7}
 8000866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000868:	bf00      	nop
 800086a:	e7fd      	b.n	8000868 <HardFault_Handler+0x4>

0800086c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800086c:	b480      	push	{r7}
 800086e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000870:	bf00      	nop
 8000872:	e7fd      	b.n	8000870 <MemManage_Handler+0x4>

08000874 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000874:	b480      	push	{r7}
 8000876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000878:	bf00      	nop
 800087a:	e7fd      	b.n	8000878 <BusFault_Handler+0x4>

0800087c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800087c:	b480      	push	{r7}
 800087e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000880:	bf00      	nop
 8000882:	e7fd      	b.n	8000880 <UsageFault_Handler+0x4>

08000884 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000884:	b480      	push	{r7}
 8000886:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000888:	bf00      	nop
 800088a:	46bd      	mov	sp, r7
 800088c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000890:	4770      	bx	lr

08000892 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000892:	b480      	push	{r7}
 8000894:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000896:	bf00      	nop
 8000898:	46bd      	mov	sp, r7
 800089a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800089e:	4770      	bx	lr

080008a0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008a0:	b480      	push	{r7}
 80008a2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008a4:	bf00      	nop
 80008a6:	46bd      	mov	sp, r7
 80008a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ac:	4770      	bx	lr

080008ae <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008ae:	b580      	push	{r7, lr}
 80008b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008b2:	f000 f8a5 	bl	8000a00 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008b6:	bf00      	nop
 80008b8:	bd80      	pop	{r7, pc}
	...

080008bc <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80008c0:	4802      	ldr	r0, [pc, #8]	@ (80008cc <TIM3_IRQHandler+0x10>)
 80008c2:	f002 fb8d 	bl	8002fe0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80008c6:	bf00      	nop
 80008c8:	bd80      	pop	{r7, pc}
 80008ca:	bf00      	nop
 80008cc:	2000013c 	.word	0x2000013c

080008d0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80008d4:	4802      	ldr	r0, [pc, #8]	@ (80008e0 <OTG_FS_IRQHandler+0x10>)
 80008d6:	f000 fcc9 	bl	800126c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80008da:	bf00      	nop
 80008dc:	bd80      	pop	{r7, pc}
 80008de:	bf00      	nop
 80008e0:	20000670 	.word	0x20000670

080008e4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80008e4:	b480      	push	{r7}
 80008e6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80008e8:	4b06      	ldr	r3, [pc, #24]	@ (8000904 <SystemInit+0x20>)
 80008ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80008ee:	4a05      	ldr	r2, [pc, #20]	@ (8000904 <SystemInit+0x20>)
 80008f0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80008f4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80008f8:	bf00      	nop
 80008fa:	46bd      	mov	sp, r7
 80008fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000900:	4770      	bx	lr
 8000902:	bf00      	nop
 8000904:	e000ed00 	.word	0xe000ed00

08000908 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000908:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000940 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 800090c:	f7ff ffea 	bl	80008e4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000910:	480c      	ldr	r0, [pc, #48]	@ (8000944 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000912:	490d      	ldr	r1, [pc, #52]	@ (8000948 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000914:	4a0d      	ldr	r2, [pc, #52]	@ (800094c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000916:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000918:	e002      	b.n	8000920 <LoopCopyDataInit>

0800091a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800091a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800091c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800091e:	3304      	adds	r3, #4

08000920 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000920:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000922:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000924:	d3f9      	bcc.n	800091a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000926:	4a0a      	ldr	r2, [pc, #40]	@ (8000950 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000928:	4c0a      	ldr	r4, [pc, #40]	@ (8000954 <LoopFillZerobss+0x22>)
  movs r3, #0
 800092a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800092c:	e001      	b.n	8000932 <LoopFillZerobss>

0800092e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800092e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000930:	3204      	adds	r2, #4

08000932 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000932:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000934:	d3fb      	bcc.n	800092e <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8000936:	f006 fc59 	bl	80071ec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800093a:	f7ff fdfd 	bl	8000538 <main>
  bx  lr    
 800093e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000940:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000944:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000948:	20000120 	.word	0x20000120
  ldr r2, =_sidata
 800094c:	080072cc 	.word	0x080072cc
  ldr r2, =_sbss
 8000950:	20000120 	.word	0x20000120
  ldr r4, =_ebss
 8000954:	20000b74 	.word	0x20000b74

08000958 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000958:	e7fe      	b.n	8000958 <ADC_IRQHandler>
	...

0800095c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000960:	4b0e      	ldr	r3, [pc, #56]	@ (800099c <HAL_Init+0x40>)
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	4a0d      	ldr	r2, [pc, #52]	@ (800099c <HAL_Init+0x40>)
 8000966:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800096a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800096c:	4b0b      	ldr	r3, [pc, #44]	@ (800099c <HAL_Init+0x40>)
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	4a0a      	ldr	r2, [pc, #40]	@ (800099c <HAL_Init+0x40>)
 8000972:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000976:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000978:	4b08      	ldr	r3, [pc, #32]	@ (800099c <HAL_Init+0x40>)
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	4a07      	ldr	r2, [pc, #28]	@ (800099c <HAL_Init+0x40>)
 800097e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000982:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000984:	2003      	movs	r0, #3
 8000986:	f000 f94f 	bl	8000c28 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800098a:	200f      	movs	r0, #15
 800098c:	f000 f808 	bl	80009a0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000990:	f7ff feec 	bl	800076c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000994:	2300      	movs	r3, #0
}
 8000996:	4618      	mov	r0, r3
 8000998:	bd80      	pop	{r7, pc}
 800099a:	bf00      	nop
 800099c:	40023c00 	.word	0x40023c00

080009a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b082      	sub	sp, #8
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80009a8:	4b12      	ldr	r3, [pc, #72]	@ (80009f4 <HAL_InitTick+0x54>)
 80009aa:	681a      	ldr	r2, [r3, #0]
 80009ac:	4b12      	ldr	r3, [pc, #72]	@ (80009f8 <HAL_InitTick+0x58>)
 80009ae:	781b      	ldrb	r3, [r3, #0]
 80009b0:	4619      	mov	r1, r3
 80009b2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80009b6:	fbb3 f3f1 	udiv	r3, r3, r1
 80009ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80009be:	4618      	mov	r0, r3
 80009c0:	f000 f967 	bl	8000c92 <HAL_SYSTICK_Config>
 80009c4:	4603      	mov	r3, r0
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d001      	beq.n	80009ce <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80009ca:	2301      	movs	r3, #1
 80009cc:	e00e      	b.n	80009ec <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	2b0f      	cmp	r3, #15
 80009d2:	d80a      	bhi.n	80009ea <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009d4:	2200      	movs	r2, #0
 80009d6:	6879      	ldr	r1, [r7, #4]
 80009d8:	f04f 30ff 	mov.w	r0, #4294967295
 80009dc:	f000 f92f 	bl	8000c3e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80009e0:	4a06      	ldr	r2, [pc, #24]	@ (80009fc <HAL_InitTick+0x5c>)
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80009e6:	2300      	movs	r3, #0
 80009e8:	e000      	b.n	80009ec <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80009ea:	2301      	movs	r3, #1
}
 80009ec:	4618      	mov	r0, r3
 80009ee:	3708      	adds	r7, #8
 80009f0:	46bd      	mov	sp, r7
 80009f2:	bd80      	pop	{r7, pc}
 80009f4:	20000000 	.word	0x20000000
 80009f8:	20000008 	.word	0x20000008
 80009fc:	20000004 	.word	0x20000004

08000a00 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a00:	b480      	push	{r7}
 8000a02:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a04:	4b06      	ldr	r3, [pc, #24]	@ (8000a20 <HAL_IncTick+0x20>)
 8000a06:	781b      	ldrb	r3, [r3, #0]
 8000a08:	461a      	mov	r2, r3
 8000a0a:	4b06      	ldr	r3, [pc, #24]	@ (8000a24 <HAL_IncTick+0x24>)
 8000a0c:	681b      	ldr	r3, [r3, #0]
 8000a0e:	4413      	add	r3, r2
 8000a10:	4a04      	ldr	r2, [pc, #16]	@ (8000a24 <HAL_IncTick+0x24>)
 8000a12:	6013      	str	r3, [r2, #0]
}
 8000a14:	bf00      	nop
 8000a16:	46bd      	mov	sp, r7
 8000a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1c:	4770      	bx	lr
 8000a1e:	bf00      	nop
 8000a20:	20000008 	.word	0x20000008
 8000a24:	2000018c 	.word	0x2000018c

08000a28 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	af00      	add	r7, sp, #0
  return uwTick;
 8000a2c:	4b03      	ldr	r3, [pc, #12]	@ (8000a3c <HAL_GetTick+0x14>)
 8000a2e:	681b      	ldr	r3, [r3, #0]
}
 8000a30:	4618      	mov	r0, r3
 8000a32:	46bd      	mov	sp, r7
 8000a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a38:	4770      	bx	lr
 8000a3a:	bf00      	nop
 8000a3c:	2000018c 	.word	0x2000018c

08000a40 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b084      	sub	sp, #16
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a48:	f7ff ffee 	bl	8000a28 <HAL_GetTick>
 8000a4c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a52:	68fb      	ldr	r3, [r7, #12]
 8000a54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a58:	d005      	beq.n	8000a66 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000a5a:	4b0a      	ldr	r3, [pc, #40]	@ (8000a84 <HAL_Delay+0x44>)
 8000a5c:	781b      	ldrb	r3, [r3, #0]
 8000a5e:	461a      	mov	r2, r3
 8000a60:	68fb      	ldr	r3, [r7, #12]
 8000a62:	4413      	add	r3, r2
 8000a64:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000a66:	bf00      	nop
 8000a68:	f7ff ffde 	bl	8000a28 <HAL_GetTick>
 8000a6c:	4602      	mov	r2, r0
 8000a6e:	68bb      	ldr	r3, [r7, #8]
 8000a70:	1ad3      	subs	r3, r2, r3
 8000a72:	68fa      	ldr	r2, [r7, #12]
 8000a74:	429a      	cmp	r2, r3
 8000a76:	d8f7      	bhi.n	8000a68 <HAL_Delay+0x28>
  {
  }
}
 8000a78:	bf00      	nop
 8000a7a:	bf00      	nop
 8000a7c:	3710      	adds	r7, #16
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	bd80      	pop	{r7, pc}
 8000a82:	bf00      	nop
 8000a84:	20000008 	.word	0x20000008

08000a88 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	b085      	sub	sp, #20
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	f003 0307 	and.w	r3, r3, #7
 8000a96:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a98:	4b0c      	ldr	r3, [pc, #48]	@ (8000acc <__NVIC_SetPriorityGrouping+0x44>)
 8000a9a:	68db      	ldr	r3, [r3, #12]
 8000a9c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a9e:	68ba      	ldr	r2, [r7, #8]
 8000aa0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000aa4:	4013      	ands	r3, r2
 8000aa6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000aa8:	68fb      	ldr	r3, [r7, #12]
 8000aaa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000aac:	68bb      	ldr	r3, [r7, #8]
 8000aae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ab0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000ab4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ab8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000aba:	4a04      	ldr	r2, [pc, #16]	@ (8000acc <__NVIC_SetPriorityGrouping+0x44>)
 8000abc:	68bb      	ldr	r3, [r7, #8]
 8000abe:	60d3      	str	r3, [r2, #12]
}
 8000ac0:	bf00      	nop
 8000ac2:	3714      	adds	r7, #20
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aca:	4770      	bx	lr
 8000acc:	e000ed00 	.word	0xe000ed00

08000ad0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ad4:	4b04      	ldr	r3, [pc, #16]	@ (8000ae8 <__NVIC_GetPriorityGrouping+0x18>)
 8000ad6:	68db      	ldr	r3, [r3, #12]
 8000ad8:	0a1b      	lsrs	r3, r3, #8
 8000ada:	f003 0307 	and.w	r3, r3, #7
}
 8000ade:	4618      	mov	r0, r3
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae6:	4770      	bx	lr
 8000ae8:	e000ed00 	.word	0xe000ed00

08000aec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000aec:	b480      	push	{r7}
 8000aee:	b083      	sub	sp, #12
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	4603      	mov	r3, r0
 8000af4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000af6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	db0b      	blt.n	8000b16 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000afe:	79fb      	ldrb	r3, [r7, #7]
 8000b00:	f003 021f 	and.w	r2, r3, #31
 8000b04:	4907      	ldr	r1, [pc, #28]	@ (8000b24 <__NVIC_EnableIRQ+0x38>)
 8000b06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b0a:	095b      	lsrs	r3, r3, #5
 8000b0c:	2001      	movs	r0, #1
 8000b0e:	fa00 f202 	lsl.w	r2, r0, r2
 8000b12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000b16:	bf00      	nop
 8000b18:	370c      	adds	r7, #12
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b20:	4770      	bx	lr
 8000b22:	bf00      	nop
 8000b24:	e000e100 	.word	0xe000e100

08000b28 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	b083      	sub	sp, #12
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	4603      	mov	r3, r0
 8000b30:	6039      	str	r1, [r7, #0]
 8000b32:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	db0a      	blt.n	8000b52 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b3c:	683b      	ldr	r3, [r7, #0]
 8000b3e:	b2da      	uxtb	r2, r3
 8000b40:	490c      	ldr	r1, [pc, #48]	@ (8000b74 <__NVIC_SetPriority+0x4c>)
 8000b42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b46:	0112      	lsls	r2, r2, #4
 8000b48:	b2d2      	uxtb	r2, r2
 8000b4a:	440b      	add	r3, r1
 8000b4c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b50:	e00a      	b.n	8000b68 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b52:	683b      	ldr	r3, [r7, #0]
 8000b54:	b2da      	uxtb	r2, r3
 8000b56:	4908      	ldr	r1, [pc, #32]	@ (8000b78 <__NVIC_SetPriority+0x50>)
 8000b58:	79fb      	ldrb	r3, [r7, #7]
 8000b5a:	f003 030f 	and.w	r3, r3, #15
 8000b5e:	3b04      	subs	r3, #4
 8000b60:	0112      	lsls	r2, r2, #4
 8000b62:	b2d2      	uxtb	r2, r2
 8000b64:	440b      	add	r3, r1
 8000b66:	761a      	strb	r2, [r3, #24]
}
 8000b68:	bf00      	nop
 8000b6a:	370c      	adds	r7, #12
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b72:	4770      	bx	lr
 8000b74:	e000e100 	.word	0xe000e100
 8000b78:	e000ed00 	.word	0xe000ed00

08000b7c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	b089      	sub	sp, #36	@ 0x24
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	60f8      	str	r0, [r7, #12]
 8000b84:	60b9      	str	r1, [r7, #8]
 8000b86:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b88:	68fb      	ldr	r3, [r7, #12]
 8000b8a:	f003 0307 	and.w	r3, r3, #7
 8000b8e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b90:	69fb      	ldr	r3, [r7, #28]
 8000b92:	f1c3 0307 	rsb	r3, r3, #7
 8000b96:	2b04      	cmp	r3, #4
 8000b98:	bf28      	it	cs
 8000b9a:	2304      	movcs	r3, #4
 8000b9c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b9e:	69fb      	ldr	r3, [r7, #28]
 8000ba0:	3304      	adds	r3, #4
 8000ba2:	2b06      	cmp	r3, #6
 8000ba4:	d902      	bls.n	8000bac <NVIC_EncodePriority+0x30>
 8000ba6:	69fb      	ldr	r3, [r7, #28]
 8000ba8:	3b03      	subs	r3, #3
 8000baa:	e000      	b.n	8000bae <NVIC_EncodePriority+0x32>
 8000bac:	2300      	movs	r3, #0
 8000bae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bb0:	f04f 32ff 	mov.w	r2, #4294967295
 8000bb4:	69bb      	ldr	r3, [r7, #24]
 8000bb6:	fa02 f303 	lsl.w	r3, r2, r3
 8000bba:	43da      	mvns	r2, r3
 8000bbc:	68bb      	ldr	r3, [r7, #8]
 8000bbe:	401a      	ands	r2, r3
 8000bc0:	697b      	ldr	r3, [r7, #20]
 8000bc2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000bc4:	f04f 31ff 	mov.w	r1, #4294967295
 8000bc8:	697b      	ldr	r3, [r7, #20]
 8000bca:	fa01 f303 	lsl.w	r3, r1, r3
 8000bce:	43d9      	mvns	r1, r3
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bd4:	4313      	orrs	r3, r2
         );
}
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	3724      	adds	r7, #36	@ 0x24
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be0:	4770      	bx	lr
	...

08000be4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b082      	sub	sp, #8
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	3b01      	subs	r3, #1
 8000bf0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000bf4:	d301      	bcc.n	8000bfa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000bf6:	2301      	movs	r3, #1
 8000bf8:	e00f      	b.n	8000c1a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000bfa:	4a0a      	ldr	r2, [pc, #40]	@ (8000c24 <SysTick_Config+0x40>)
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	3b01      	subs	r3, #1
 8000c00:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c02:	210f      	movs	r1, #15
 8000c04:	f04f 30ff 	mov.w	r0, #4294967295
 8000c08:	f7ff ff8e 	bl	8000b28 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c0c:	4b05      	ldr	r3, [pc, #20]	@ (8000c24 <SysTick_Config+0x40>)
 8000c0e:	2200      	movs	r2, #0
 8000c10:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c12:	4b04      	ldr	r3, [pc, #16]	@ (8000c24 <SysTick_Config+0x40>)
 8000c14:	2207      	movs	r2, #7
 8000c16:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c18:	2300      	movs	r3, #0
}
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	3708      	adds	r7, #8
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	bd80      	pop	{r7, pc}
 8000c22:	bf00      	nop
 8000c24:	e000e010 	.word	0xe000e010

08000c28 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b082      	sub	sp, #8
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c30:	6878      	ldr	r0, [r7, #4]
 8000c32:	f7ff ff29 	bl	8000a88 <__NVIC_SetPriorityGrouping>
}
 8000c36:	bf00      	nop
 8000c38:	3708      	adds	r7, #8
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	bd80      	pop	{r7, pc}

08000c3e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c3e:	b580      	push	{r7, lr}
 8000c40:	b086      	sub	sp, #24
 8000c42:	af00      	add	r7, sp, #0
 8000c44:	4603      	mov	r3, r0
 8000c46:	60b9      	str	r1, [r7, #8]
 8000c48:	607a      	str	r2, [r7, #4]
 8000c4a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c50:	f7ff ff3e 	bl	8000ad0 <__NVIC_GetPriorityGrouping>
 8000c54:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c56:	687a      	ldr	r2, [r7, #4]
 8000c58:	68b9      	ldr	r1, [r7, #8]
 8000c5a:	6978      	ldr	r0, [r7, #20]
 8000c5c:	f7ff ff8e 	bl	8000b7c <NVIC_EncodePriority>
 8000c60:	4602      	mov	r2, r0
 8000c62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c66:	4611      	mov	r1, r2
 8000c68:	4618      	mov	r0, r3
 8000c6a:	f7ff ff5d 	bl	8000b28 <__NVIC_SetPriority>
}
 8000c6e:	bf00      	nop
 8000c70:	3718      	adds	r7, #24
 8000c72:	46bd      	mov	sp, r7
 8000c74:	bd80      	pop	{r7, pc}

08000c76 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c76:	b580      	push	{r7, lr}
 8000c78:	b082      	sub	sp, #8
 8000c7a:	af00      	add	r7, sp, #0
 8000c7c:	4603      	mov	r3, r0
 8000c7e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c84:	4618      	mov	r0, r3
 8000c86:	f7ff ff31 	bl	8000aec <__NVIC_EnableIRQ>
}
 8000c8a:	bf00      	nop
 8000c8c:	3708      	adds	r7, #8
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	bd80      	pop	{r7, pc}

08000c92 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c92:	b580      	push	{r7, lr}
 8000c94:	b082      	sub	sp, #8
 8000c96:	af00      	add	r7, sp, #0
 8000c98:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c9a:	6878      	ldr	r0, [r7, #4]
 8000c9c:	f7ff ffa2 	bl	8000be4 <SysTick_Config>
 8000ca0:	4603      	mov	r3, r0
}
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	3708      	adds	r7, #8
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	bd80      	pop	{r7, pc}
	...

08000cac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000cac:	b480      	push	{r7}
 8000cae:	b089      	sub	sp, #36	@ 0x24
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	6078      	str	r0, [r7, #4]
 8000cb4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	61fb      	str	r3, [r7, #28]
 8000cc6:	e16b      	b.n	8000fa0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000cc8:	2201      	movs	r2, #1
 8000cca:	69fb      	ldr	r3, [r7, #28]
 8000ccc:	fa02 f303 	lsl.w	r3, r2, r3
 8000cd0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000cd2:	683b      	ldr	r3, [r7, #0]
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	697a      	ldr	r2, [r7, #20]
 8000cd8:	4013      	ands	r3, r2
 8000cda:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000cdc:	693a      	ldr	r2, [r7, #16]
 8000cde:	697b      	ldr	r3, [r7, #20]
 8000ce0:	429a      	cmp	r2, r3
 8000ce2:	f040 815a 	bne.w	8000f9a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000ce6:	683b      	ldr	r3, [r7, #0]
 8000ce8:	685b      	ldr	r3, [r3, #4]
 8000cea:	f003 0303 	and.w	r3, r3, #3
 8000cee:	2b01      	cmp	r3, #1
 8000cf0:	d005      	beq.n	8000cfe <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000cf2:	683b      	ldr	r3, [r7, #0]
 8000cf4:	685b      	ldr	r3, [r3, #4]
 8000cf6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000cfa:	2b02      	cmp	r3, #2
 8000cfc:	d130      	bne.n	8000d60 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	689b      	ldr	r3, [r3, #8]
 8000d02:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000d04:	69fb      	ldr	r3, [r7, #28]
 8000d06:	005b      	lsls	r3, r3, #1
 8000d08:	2203      	movs	r2, #3
 8000d0a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d0e:	43db      	mvns	r3, r3
 8000d10:	69ba      	ldr	r2, [r7, #24]
 8000d12:	4013      	ands	r3, r2
 8000d14:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000d16:	683b      	ldr	r3, [r7, #0]
 8000d18:	68da      	ldr	r2, [r3, #12]
 8000d1a:	69fb      	ldr	r3, [r7, #28]
 8000d1c:	005b      	lsls	r3, r3, #1
 8000d1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d22:	69ba      	ldr	r2, [r7, #24]
 8000d24:	4313      	orrs	r3, r2
 8000d26:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	69ba      	ldr	r2, [r7, #24]
 8000d2c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	685b      	ldr	r3, [r3, #4]
 8000d32:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000d34:	2201      	movs	r2, #1
 8000d36:	69fb      	ldr	r3, [r7, #28]
 8000d38:	fa02 f303 	lsl.w	r3, r2, r3
 8000d3c:	43db      	mvns	r3, r3
 8000d3e:	69ba      	ldr	r2, [r7, #24]
 8000d40:	4013      	ands	r3, r2
 8000d42:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000d44:	683b      	ldr	r3, [r7, #0]
 8000d46:	685b      	ldr	r3, [r3, #4]
 8000d48:	091b      	lsrs	r3, r3, #4
 8000d4a:	f003 0201 	and.w	r2, r3, #1
 8000d4e:	69fb      	ldr	r3, [r7, #28]
 8000d50:	fa02 f303 	lsl.w	r3, r2, r3
 8000d54:	69ba      	ldr	r2, [r7, #24]
 8000d56:	4313      	orrs	r3, r2
 8000d58:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	69ba      	ldr	r2, [r7, #24]
 8000d5e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000d60:	683b      	ldr	r3, [r7, #0]
 8000d62:	685b      	ldr	r3, [r3, #4]
 8000d64:	f003 0303 	and.w	r3, r3, #3
 8000d68:	2b03      	cmp	r3, #3
 8000d6a:	d017      	beq.n	8000d9c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	68db      	ldr	r3, [r3, #12]
 8000d70:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000d72:	69fb      	ldr	r3, [r7, #28]
 8000d74:	005b      	lsls	r3, r3, #1
 8000d76:	2203      	movs	r2, #3
 8000d78:	fa02 f303 	lsl.w	r3, r2, r3
 8000d7c:	43db      	mvns	r3, r3
 8000d7e:	69ba      	ldr	r2, [r7, #24]
 8000d80:	4013      	ands	r3, r2
 8000d82:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000d84:	683b      	ldr	r3, [r7, #0]
 8000d86:	689a      	ldr	r2, [r3, #8]
 8000d88:	69fb      	ldr	r3, [r7, #28]
 8000d8a:	005b      	lsls	r3, r3, #1
 8000d8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d90:	69ba      	ldr	r2, [r7, #24]
 8000d92:	4313      	orrs	r3, r2
 8000d94:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	69ba      	ldr	r2, [r7, #24]
 8000d9a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d9c:	683b      	ldr	r3, [r7, #0]
 8000d9e:	685b      	ldr	r3, [r3, #4]
 8000da0:	f003 0303 	and.w	r3, r3, #3
 8000da4:	2b02      	cmp	r3, #2
 8000da6:	d123      	bne.n	8000df0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000da8:	69fb      	ldr	r3, [r7, #28]
 8000daa:	08da      	lsrs	r2, r3, #3
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	3208      	adds	r2, #8
 8000db0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000db4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000db6:	69fb      	ldr	r3, [r7, #28]
 8000db8:	f003 0307 	and.w	r3, r3, #7
 8000dbc:	009b      	lsls	r3, r3, #2
 8000dbe:	220f      	movs	r2, #15
 8000dc0:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc4:	43db      	mvns	r3, r3
 8000dc6:	69ba      	ldr	r2, [r7, #24]
 8000dc8:	4013      	ands	r3, r2
 8000dca:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000dcc:	683b      	ldr	r3, [r7, #0]
 8000dce:	691a      	ldr	r2, [r3, #16]
 8000dd0:	69fb      	ldr	r3, [r7, #28]
 8000dd2:	f003 0307 	and.w	r3, r3, #7
 8000dd6:	009b      	lsls	r3, r3, #2
 8000dd8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ddc:	69ba      	ldr	r2, [r7, #24]
 8000dde:	4313      	orrs	r3, r2
 8000de0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000de2:	69fb      	ldr	r3, [r7, #28]
 8000de4:	08da      	lsrs	r2, r3, #3
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	3208      	adds	r2, #8
 8000dea:	69b9      	ldr	r1, [r7, #24]
 8000dec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000df6:	69fb      	ldr	r3, [r7, #28]
 8000df8:	005b      	lsls	r3, r3, #1
 8000dfa:	2203      	movs	r2, #3
 8000dfc:	fa02 f303 	lsl.w	r3, r2, r3
 8000e00:	43db      	mvns	r3, r3
 8000e02:	69ba      	ldr	r2, [r7, #24]
 8000e04:	4013      	ands	r3, r2
 8000e06:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000e08:	683b      	ldr	r3, [r7, #0]
 8000e0a:	685b      	ldr	r3, [r3, #4]
 8000e0c:	f003 0203 	and.w	r2, r3, #3
 8000e10:	69fb      	ldr	r3, [r7, #28]
 8000e12:	005b      	lsls	r3, r3, #1
 8000e14:	fa02 f303 	lsl.w	r3, r2, r3
 8000e18:	69ba      	ldr	r2, [r7, #24]
 8000e1a:	4313      	orrs	r3, r2
 8000e1c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	69ba      	ldr	r2, [r7, #24]
 8000e22:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000e24:	683b      	ldr	r3, [r7, #0]
 8000e26:	685b      	ldr	r3, [r3, #4]
 8000e28:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	f000 80b4 	beq.w	8000f9a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e32:	2300      	movs	r3, #0
 8000e34:	60fb      	str	r3, [r7, #12]
 8000e36:	4b60      	ldr	r3, [pc, #384]	@ (8000fb8 <HAL_GPIO_Init+0x30c>)
 8000e38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e3a:	4a5f      	ldr	r2, [pc, #380]	@ (8000fb8 <HAL_GPIO_Init+0x30c>)
 8000e3c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000e40:	6453      	str	r3, [r2, #68]	@ 0x44
 8000e42:	4b5d      	ldr	r3, [pc, #372]	@ (8000fb8 <HAL_GPIO_Init+0x30c>)
 8000e44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e46:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000e4a:	60fb      	str	r3, [r7, #12]
 8000e4c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000e4e:	4a5b      	ldr	r2, [pc, #364]	@ (8000fbc <HAL_GPIO_Init+0x310>)
 8000e50:	69fb      	ldr	r3, [r7, #28]
 8000e52:	089b      	lsrs	r3, r3, #2
 8000e54:	3302      	adds	r3, #2
 8000e56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000e5c:	69fb      	ldr	r3, [r7, #28]
 8000e5e:	f003 0303 	and.w	r3, r3, #3
 8000e62:	009b      	lsls	r3, r3, #2
 8000e64:	220f      	movs	r2, #15
 8000e66:	fa02 f303 	lsl.w	r3, r2, r3
 8000e6a:	43db      	mvns	r3, r3
 8000e6c:	69ba      	ldr	r2, [r7, #24]
 8000e6e:	4013      	ands	r3, r2
 8000e70:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	4a52      	ldr	r2, [pc, #328]	@ (8000fc0 <HAL_GPIO_Init+0x314>)
 8000e76:	4293      	cmp	r3, r2
 8000e78:	d02b      	beq.n	8000ed2 <HAL_GPIO_Init+0x226>
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	4a51      	ldr	r2, [pc, #324]	@ (8000fc4 <HAL_GPIO_Init+0x318>)
 8000e7e:	4293      	cmp	r3, r2
 8000e80:	d025      	beq.n	8000ece <HAL_GPIO_Init+0x222>
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	4a50      	ldr	r2, [pc, #320]	@ (8000fc8 <HAL_GPIO_Init+0x31c>)
 8000e86:	4293      	cmp	r3, r2
 8000e88:	d01f      	beq.n	8000eca <HAL_GPIO_Init+0x21e>
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	4a4f      	ldr	r2, [pc, #316]	@ (8000fcc <HAL_GPIO_Init+0x320>)
 8000e8e:	4293      	cmp	r3, r2
 8000e90:	d019      	beq.n	8000ec6 <HAL_GPIO_Init+0x21a>
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	4a4e      	ldr	r2, [pc, #312]	@ (8000fd0 <HAL_GPIO_Init+0x324>)
 8000e96:	4293      	cmp	r3, r2
 8000e98:	d013      	beq.n	8000ec2 <HAL_GPIO_Init+0x216>
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	4a4d      	ldr	r2, [pc, #308]	@ (8000fd4 <HAL_GPIO_Init+0x328>)
 8000e9e:	4293      	cmp	r3, r2
 8000ea0:	d00d      	beq.n	8000ebe <HAL_GPIO_Init+0x212>
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	4a4c      	ldr	r2, [pc, #304]	@ (8000fd8 <HAL_GPIO_Init+0x32c>)
 8000ea6:	4293      	cmp	r3, r2
 8000ea8:	d007      	beq.n	8000eba <HAL_GPIO_Init+0x20e>
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	4a4b      	ldr	r2, [pc, #300]	@ (8000fdc <HAL_GPIO_Init+0x330>)
 8000eae:	4293      	cmp	r3, r2
 8000eb0:	d101      	bne.n	8000eb6 <HAL_GPIO_Init+0x20a>
 8000eb2:	2307      	movs	r3, #7
 8000eb4:	e00e      	b.n	8000ed4 <HAL_GPIO_Init+0x228>
 8000eb6:	2308      	movs	r3, #8
 8000eb8:	e00c      	b.n	8000ed4 <HAL_GPIO_Init+0x228>
 8000eba:	2306      	movs	r3, #6
 8000ebc:	e00a      	b.n	8000ed4 <HAL_GPIO_Init+0x228>
 8000ebe:	2305      	movs	r3, #5
 8000ec0:	e008      	b.n	8000ed4 <HAL_GPIO_Init+0x228>
 8000ec2:	2304      	movs	r3, #4
 8000ec4:	e006      	b.n	8000ed4 <HAL_GPIO_Init+0x228>
 8000ec6:	2303      	movs	r3, #3
 8000ec8:	e004      	b.n	8000ed4 <HAL_GPIO_Init+0x228>
 8000eca:	2302      	movs	r3, #2
 8000ecc:	e002      	b.n	8000ed4 <HAL_GPIO_Init+0x228>
 8000ece:	2301      	movs	r3, #1
 8000ed0:	e000      	b.n	8000ed4 <HAL_GPIO_Init+0x228>
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	69fa      	ldr	r2, [r7, #28]
 8000ed6:	f002 0203 	and.w	r2, r2, #3
 8000eda:	0092      	lsls	r2, r2, #2
 8000edc:	4093      	lsls	r3, r2
 8000ede:	69ba      	ldr	r2, [r7, #24]
 8000ee0:	4313      	orrs	r3, r2
 8000ee2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000ee4:	4935      	ldr	r1, [pc, #212]	@ (8000fbc <HAL_GPIO_Init+0x310>)
 8000ee6:	69fb      	ldr	r3, [r7, #28]
 8000ee8:	089b      	lsrs	r3, r3, #2
 8000eea:	3302      	adds	r3, #2
 8000eec:	69ba      	ldr	r2, [r7, #24]
 8000eee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000ef2:	4b3b      	ldr	r3, [pc, #236]	@ (8000fe0 <HAL_GPIO_Init+0x334>)
 8000ef4:	689b      	ldr	r3, [r3, #8]
 8000ef6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ef8:	693b      	ldr	r3, [r7, #16]
 8000efa:	43db      	mvns	r3, r3
 8000efc:	69ba      	ldr	r2, [r7, #24]
 8000efe:	4013      	ands	r3, r2
 8000f00:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000f02:	683b      	ldr	r3, [r7, #0]
 8000f04:	685b      	ldr	r3, [r3, #4]
 8000f06:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d003      	beq.n	8000f16 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8000f0e:	69ba      	ldr	r2, [r7, #24]
 8000f10:	693b      	ldr	r3, [r7, #16]
 8000f12:	4313      	orrs	r3, r2
 8000f14:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000f16:	4a32      	ldr	r2, [pc, #200]	@ (8000fe0 <HAL_GPIO_Init+0x334>)
 8000f18:	69bb      	ldr	r3, [r7, #24]
 8000f1a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000f1c:	4b30      	ldr	r3, [pc, #192]	@ (8000fe0 <HAL_GPIO_Init+0x334>)
 8000f1e:	68db      	ldr	r3, [r3, #12]
 8000f20:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f22:	693b      	ldr	r3, [r7, #16]
 8000f24:	43db      	mvns	r3, r3
 8000f26:	69ba      	ldr	r2, [r7, #24]
 8000f28:	4013      	ands	r3, r2
 8000f2a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000f2c:	683b      	ldr	r3, [r7, #0]
 8000f2e:	685b      	ldr	r3, [r3, #4]
 8000f30:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d003      	beq.n	8000f40 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8000f38:	69ba      	ldr	r2, [r7, #24]
 8000f3a:	693b      	ldr	r3, [r7, #16]
 8000f3c:	4313      	orrs	r3, r2
 8000f3e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000f40:	4a27      	ldr	r2, [pc, #156]	@ (8000fe0 <HAL_GPIO_Init+0x334>)
 8000f42:	69bb      	ldr	r3, [r7, #24]
 8000f44:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000f46:	4b26      	ldr	r3, [pc, #152]	@ (8000fe0 <HAL_GPIO_Init+0x334>)
 8000f48:	685b      	ldr	r3, [r3, #4]
 8000f4a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f4c:	693b      	ldr	r3, [r7, #16]
 8000f4e:	43db      	mvns	r3, r3
 8000f50:	69ba      	ldr	r2, [r7, #24]
 8000f52:	4013      	ands	r3, r2
 8000f54:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000f56:	683b      	ldr	r3, [r7, #0]
 8000f58:	685b      	ldr	r3, [r3, #4]
 8000f5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d003      	beq.n	8000f6a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8000f62:	69ba      	ldr	r2, [r7, #24]
 8000f64:	693b      	ldr	r3, [r7, #16]
 8000f66:	4313      	orrs	r3, r2
 8000f68:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000f6a:	4a1d      	ldr	r2, [pc, #116]	@ (8000fe0 <HAL_GPIO_Init+0x334>)
 8000f6c:	69bb      	ldr	r3, [r7, #24]
 8000f6e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000f70:	4b1b      	ldr	r3, [pc, #108]	@ (8000fe0 <HAL_GPIO_Init+0x334>)
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f76:	693b      	ldr	r3, [r7, #16]
 8000f78:	43db      	mvns	r3, r3
 8000f7a:	69ba      	ldr	r2, [r7, #24]
 8000f7c:	4013      	ands	r3, r2
 8000f7e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000f80:	683b      	ldr	r3, [r7, #0]
 8000f82:	685b      	ldr	r3, [r3, #4]
 8000f84:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d003      	beq.n	8000f94 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8000f8c:	69ba      	ldr	r2, [r7, #24]
 8000f8e:	693b      	ldr	r3, [r7, #16]
 8000f90:	4313      	orrs	r3, r2
 8000f92:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000f94:	4a12      	ldr	r2, [pc, #72]	@ (8000fe0 <HAL_GPIO_Init+0x334>)
 8000f96:	69bb      	ldr	r3, [r7, #24]
 8000f98:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f9a:	69fb      	ldr	r3, [r7, #28]
 8000f9c:	3301      	adds	r3, #1
 8000f9e:	61fb      	str	r3, [r7, #28]
 8000fa0:	69fb      	ldr	r3, [r7, #28]
 8000fa2:	2b0f      	cmp	r3, #15
 8000fa4:	f67f ae90 	bls.w	8000cc8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000fa8:	bf00      	nop
 8000faa:	bf00      	nop
 8000fac:	3724      	adds	r7, #36	@ 0x24
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb4:	4770      	bx	lr
 8000fb6:	bf00      	nop
 8000fb8:	40023800 	.word	0x40023800
 8000fbc:	40013800 	.word	0x40013800
 8000fc0:	40020000 	.word	0x40020000
 8000fc4:	40020400 	.word	0x40020400
 8000fc8:	40020800 	.word	0x40020800
 8000fcc:	40020c00 	.word	0x40020c00
 8000fd0:	40021000 	.word	0x40021000
 8000fd4:	40021400 	.word	0x40021400
 8000fd8:	40021800 	.word	0x40021800
 8000fdc:	40021c00 	.word	0x40021c00
 8000fe0:	40013c00 	.word	0x40013c00

08000fe4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b086      	sub	sp, #24
 8000fe8:	af02      	add	r7, sp, #8
 8000fea:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d101      	bne.n	8000ff6 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000ff2:	2301      	movs	r3, #1
 8000ff4:	e101      	b.n	80011fa <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8001002:	b2db      	uxtb	r3, r3
 8001004:	2b00      	cmp	r3, #0
 8001006:	d106      	bne.n	8001016 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	2200      	movs	r2, #0
 800100c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001010:	6878      	ldr	r0, [r7, #4]
 8001012:	f005 fde1 	bl	8006bd8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	2203      	movs	r2, #3
 800101a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 800101e:	68bb      	ldr	r3, [r7, #8]
 8001020:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001024:	d102      	bne.n	800102c <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	2200      	movs	r2, #0
 800102a:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	4618      	mov	r0, r3
 8001032:	f002 fb66 	bl	8003702 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	6818      	ldr	r0, [r3, #0]
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	7c1a      	ldrb	r2, [r3, #16]
 800103e:	f88d 2000 	strb.w	r2, [sp]
 8001042:	3304      	adds	r3, #4
 8001044:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001046:	f002 fa45 	bl	80034d4 <USB_CoreInit>
 800104a:	4603      	mov	r3, r0
 800104c:	2b00      	cmp	r3, #0
 800104e:	d005      	beq.n	800105c <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	2202      	movs	r2, #2
 8001054:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001058:	2301      	movs	r3, #1
 800105a:	e0ce      	b.n	80011fa <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	2100      	movs	r1, #0
 8001062:	4618      	mov	r0, r3
 8001064:	f002 fb5e 	bl	8003724 <USB_SetCurrentMode>
 8001068:	4603      	mov	r3, r0
 800106a:	2b00      	cmp	r3, #0
 800106c:	d005      	beq.n	800107a <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	2202      	movs	r2, #2
 8001072:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001076:	2301      	movs	r3, #1
 8001078:	e0bf      	b.n	80011fa <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800107a:	2300      	movs	r3, #0
 800107c:	73fb      	strb	r3, [r7, #15]
 800107e:	e04a      	b.n	8001116 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001080:	7bfa      	ldrb	r2, [r7, #15]
 8001082:	6879      	ldr	r1, [r7, #4]
 8001084:	4613      	mov	r3, r2
 8001086:	00db      	lsls	r3, r3, #3
 8001088:	4413      	add	r3, r2
 800108a:	009b      	lsls	r3, r3, #2
 800108c:	440b      	add	r3, r1
 800108e:	3315      	adds	r3, #21
 8001090:	2201      	movs	r2, #1
 8001092:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001094:	7bfa      	ldrb	r2, [r7, #15]
 8001096:	6879      	ldr	r1, [r7, #4]
 8001098:	4613      	mov	r3, r2
 800109a:	00db      	lsls	r3, r3, #3
 800109c:	4413      	add	r3, r2
 800109e:	009b      	lsls	r3, r3, #2
 80010a0:	440b      	add	r3, r1
 80010a2:	3314      	adds	r3, #20
 80010a4:	7bfa      	ldrb	r2, [r7, #15]
 80010a6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80010a8:	7bfa      	ldrb	r2, [r7, #15]
 80010aa:	7bfb      	ldrb	r3, [r7, #15]
 80010ac:	b298      	uxth	r0, r3
 80010ae:	6879      	ldr	r1, [r7, #4]
 80010b0:	4613      	mov	r3, r2
 80010b2:	00db      	lsls	r3, r3, #3
 80010b4:	4413      	add	r3, r2
 80010b6:	009b      	lsls	r3, r3, #2
 80010b8:	440b      	add	r3, r1
 80010ba:	332e      	adds	r3, #46	@ 0x2e
 80010bc:	4602      	mov	r2, r0
 80010be:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80010c0:	7bfa      	ldrb	r2, [r7, #15]
 80010c2:	6879      	ldr	r1, [r7, #4]
 80010c4:	4613      	mov	r3, r2
 80010c6:	00db      	lsls	r3, r3, #3
 80010c8:	4413      	add	r3, r2
 80010ca:	009b      	lsls	r3, r3, #2
 80010cc:	440b      	add	r3, r1
 80010ce:	3318      	adds	r3, #24
 80010d0:	2200      	movs	r2, #0
 80010d2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80010d4:	7bfa      	ldrb	r2, [r7, #15]
 80010d6:	6879      	ldr	r1, [r7, #4]
 80010d8:	4613      	mov	r3, r2
 80010da:	00db      	lsls	r3, r3, #3
 80010dc:	4413      	add	r3, r2
 80010de:	009b      	lsls	r3, r3, #2
 80010e0:	440b      	add	r3, r1
 80010e2:	331c      	adds	r3, #28
 80010e4:	2200      	movs	r2, #0
 80010e6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80010e8:	7bfa      	ldrb	r2, [r7, #15]
 80010ea:	6879      	ldr	r1, [r7, #4]
 80010ec:	4613      	mov	r3, r2
 80010ee:	00db      	lsls	r3, r3, #3
 80010f0:	4413      	add	r3, r2
 80010f2:	009b      	lsls	r3, r3, #2
 80010f4:	440b      	add	r3, r1
 80010f6:	3320      	adds	r3, #32
 80010f8:	2200      	movs	r2, #0
 80010fa:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80010fc:	7bfa      	ldrb	r2, [r7, #15]
 80010fe:	6879      	ldr	r1, [r7, #4]
 8001100:	4613      	mov	r3, r2
 8001102:	00db      	lsls	r3, r3, #3
 8001104:	4413      	add	r3, r2
 8001106:	009b      	lsls	r3, r3, #2
 8001108:	440b      	add	r3, r1
 800110a:	3324      	adds	r3, #36	@ 0x24
 800110c:	2200      	movs	r2, #0
 800110e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001110:	7bfb      	ldrb	r3, [r7, #15]
 8001112:	3301      	adds	r3, #1
 8001114:	73fb      	strb	r3, [r7, #15]
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	791b      	ldrb	r3, [r3, #4]
 800111a:	7bfa      	ldrb	r2, [r7, #15]
 800111c:	429a      	cmp	r2, r3
 800111e:	d3af      	bcc.n	8001080 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001120:	2300      	movs	r3, #0
 8001122:	73fb      	strb	r3, [r7, #15]
 8001124:	e044      	b.n	80011b0 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001126:	7bfa      	ldrb	r2, [r7, #15]
 8001128:	6879      	ldr	r1, [r7, #4]
 800112a:	4613      	mov	r3, r2
 800112c:	00db      	lsls	r3, r3, #3
 800112e:	4413      	add	r3, r2
 8001130:	009b      	lsls	r3, r3, #2
 8001132:	440b      	add	r3, r1
 8001134:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8001138:	2200      	movs	r2, #0
 800113a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800113c:	7bfa      	ldrb	r2, [r7, #15]
 800113e:	6879      	ldr	r1, [r7, #4]
 8001140:	4613      	mov	r3, r2
 8001142:	00db      	lsls	r3, r3, #3
 8001144:	4413      	add	r3, r2
 8001146:	009b      	lsls	r3, r3, #2
 8001148:	440b      	add	r3, r1
 800114a:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 800114e:	7bfa      	ldrb	r2, [r7, #15]
 8001150:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001152:	7bfa      	ldrb	r2, [r7, #15]
 8001154:	6879      	ldr	r1, [r7, #4]
 8001156:	4613      	mov	r3, r2
 8001158:	00db      	lsls	r3, r3, #3
 800115a:	4413      	add	r3, r2
 800115c:	009b      	lsls	r3, r3, #2
 800115e:	440b      	add	r3, r1
 8001160:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8001164:	2200      	movs	r2, #0
 8001166:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001168:	7bfa      	ldrb	r2, [r7, #15]
 800116a:	6879      	ldr	r1, [r7, #4]
 800116c:	4613      	mov	r3, r2
 800116e:	00db      	lsls	r3, r3, #3
 8001170:	4413      	add	r3, r2
 8001172:	009b      	lsls	r3, r3, #2
 8001174:	440b      	add	r3, r1
 8001176:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 800117a:	2200      	movs	r2, #0
 800117c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800117e:	7bfa      	ldrb	r2, [r7, #15]
 8001180:	6879      	ldr	r1, [r7, #4]
 8001182:	4613      	mov	r3, r2
 8001184:	00db      	lsls	r3, r3, #3
 8001186:	4413      	add	r3, r2
 8001188:	009b      	lsls	r3, r3, #2
 800118a:	440b      	add	r3, r1
 800118c:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8001190:	2200      	movs	r2, #0
 8001192:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001194:	7bfa      	ldrb	r2, [r7, #15]
 8001196:	6879      	ldr	r1, [r7, #4]
 8001198:	4613      	mov	r3, r2
 800119a:	00db      	lsls	r3, r3, #3
 800119c:	4413      	add	r3, r2
 800119e:	009b      	lsls	r3, r3, #2
 80011a0:	440b      	add	r3, r1
 80011a2:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80011a6:	2200      	movs	r2, #0
 80011a8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80011aa:	7bfb      	ldrb	r3, [r7, #15]
 80011ac:	3301      	adds	r3, #1
 80011ae:	73fb      	strb	r3, [r7, #15]
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	791b      	ldrb	r3, [r3, #4]
 80011b4:	7bfa      	ldrb	r2, [r7, #15]
 80011b6:	429a      	cmp	r2, r3
 80011b8:	d3b5      	bcc.n	8001126 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	6818      	ldr	r0, [r3, #0]
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	7c1a      	ldrb	r2, [r3, #16]
 80011c2:	f88d 2000 	strb.w	r2, [sp]
 80011c6:	3304      	adds	r3, #4
 80011c8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80011ca:	f002 faf7 	bl	80037bc <USB_DevInit>
 80011ce:	4603      	mov	r3, r0
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d005      	beq.n	80011e0 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	2202      	movs	r2, #2
 80011d8:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80011dc:	2301      	movs	r3, #1
 80011de:	e00c      	b.n	80011fa <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	2200      	movs	r2, #0
 80011e4:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	2201      	movs	r2, #1
 80011ea:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	4618      	mov	r0, r3
 80011f4:	f003 fb41 	bl	800487a <USB_DevDisconnect>

  return HAL_OK;
 80011f8:	2300      	movs	r3, #0
}
 80011fa:	4618      	mov	r0, r3
 80011fc:	3710      	adds	r7, #16
 80011fe:	46bd      	mov	sp, r7
 8001200:	bd80      	pop	{r7, pc}

08001202 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001202:	b580      	push	{r7, lr}
 8001204:	b084      	sub	sp, #16
 8001206:	af00      	add	r7, sp, #0
 8001208:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001216:	2b01      	cmp	r3, #1
 8001218:	d101      	bne.n	800121e <HAL_PCD_Start+0x1c>
 800121a:	2302      	movs	r3, #2
 800121c:	e022      	b.n	8001264 <HAL_PCD_Start+0x62>
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	2201      	movs	r2, #1
 8001222:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8001226:	68fb      	ldr	r3, [r7, #12]
 8001228:	68db      	ldr	r3, [r3, #12]
 800122a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800122e:	2b00      	cmp	r3, #0
 8001230:	d009      	beq.n	8001246 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8001236:	2b01      	cmp	r3, #1
 8001238:	d105      	bne.n	8001246 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800123a:	68fb      	ldr	r3, [r7, #12]
 800123c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800123e:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8001242:	68fb      	ldr	r3, [r7, #12]
 8001244:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	4618      	mov	r0, r3
 800124c:	f002 fa48 	bl	80036e0 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	4618      	mov	r0, r3
 8001256:	f003 faef 	bl	8004838 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	2200      	movs	r2, #0
 800125e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8001262:	2300      	movs	r3, #0
}
 8001264:	4618      	mov	r0, r3
 8001266:	3710      	adds	r7, #16
 8001268:	46bd      	mov	sp, r7
 800126a:	bd80      	pop	{r7, pc}

0800126c <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800126c:	b590      	push	{r4, r7, lr}
 800126e:	b08d      	sub	sp, #52	@ 0x34
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800127a:	6a3b      	ldr	r3, [r7, #32]
 800127c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	4618      	mov	r0, r3
 8001284:	f003 fbad 	bl	80049e2 <USB_GetMode>
 8001288:	4603      	mov	r3, r0
 800128a:	2b00      	cmp	r3, #0
 800128c:	f040 848c 	bne.w	8001ba8 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	4618      	mov	r0, r3
 8001296:	f003 fb11 	bl	80048bc <USB_ReadInterrupts>
 800129a:	4603      	mov	r3, r0
 800129c:	2b00      	cmp	r3, #0
 800129e:	f000 8482 	beq.w	8001ba6 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80012a2:	69fb      	ldr	r3, [r7, #28]
 80012a4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80012a8:	689b      	ldr	r3, [r3, #8]
 80012aa:	0a1b      	lsrs	r3, r3, #8
 80012ac:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	4618      	mov	r0, r3
 80012bc:	f003 fafe 	bl	80048bc <USB_ReadInterrupts>
 80012c0:	4603      	mov	r3, r0
 80012c2:	f003 0302 	and.w	r3, r3, #2
 80012c6:	2b02      	cmp	r3, #2
 80012c8:	d107      	bne.n	80012da <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	695a      	ldr	r2, [r3, #20]
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	f002 0202 	and.w	r2, r2, #2
 80012d8:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	4618      	mov	r0, r3
 80012e0:	f003 faec 	bl	80048bc <USB_ReadInterrupts>
 80012e4:	4603      	mov	r3, r0
 80012e6:	f003 0310 	and.w	r3, r3, #16
 80012ea:	2b10      	cmp	r3, #16
 80012ec:	d161      	bne.n	80013b2 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	699a      	ldr	r2, [r3, #24]
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	f022 0210 	bic.w	r2, r2, #16
 80012fc:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80012fe:	6a3b      	ldr	r3, [r7, #32]
 8001300:	6a1b      	ldr	r3, [r3, #32]
 8001302:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8001304:	69bb      	ldr	r3, [r7, #24]
 8001306:	f003 020f 	and.w	r2, r3, #15
 800130a:	4613      	mov	r3, r2
 800130c:	00db      	lsls	r3, r3, #3
 800130e:	4413      	add	r3, r2
 8001310:	009b      	lsls	r3, r3, #2
 8001312:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001316:	687a      	ldr	r2, [r7, #4]
 8001318:	4413      	add	r3, r2
 800131a:	3304      	adds	r3, #4
 800131c:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800131e:	69bb      	ldr	r3, [r7, #24]
 8001320:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8001324:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8001328:	d124      	bne.n	8001374 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800132a:	69ba      	ldr	r2, [r7, #24]
 800132c:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8001330:	4013      	ands	r3, r2
 8001332:	2b00      	cmp	r3, #0
 8001334:	d035      	beq.n	80013a2 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001336:	697b      	ldr	r3, [r7, #20]
 8001338:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800133a:	69bb      	ldr	r3, [r7, #24]
 800133c:	091b      	lsrs	r3, r3, #4
 800133e:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001340:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001344:	b29b      	uxth	r3, r3
 8001346:	461a      	mov	r2, r3
 8001348:	6a38      	ldr	r0, [r7, #32]
 800134a:	f003 f923 	bl	8004594 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800134e:	697b      	ldr	r3, [r7, #20]
 8001350:	68da      	ldr	r2, [r3, #12]
 8001352:	69bb      	ldr	r3, [r7, #24]
 8001354:	091b      	lsrs	r3, r3, #4
 8001356:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800135a:	441a      	add	r2, r3
 800135c:	697b      	ldr	r3, [r7, #20]
 800135e:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001360:	697b      	ldr	r3, [r7, #20]
 8001362:	695a      	ldr	r2, [r3, #20]
 8001364:	69bb      	ldr	r3, [r7, #24]
 8001366:	091b      	lsrs	r3, r3, #4
 8001368:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800136c:	441a      	add	r2, r3
 800136e:	697b      	ldr	r3, [r7, #20]
 8001370:	615a      	str	r2, [r3, #20]
 8001372:	e016      	b.n	80013a2 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8001374:	69bb      	ldr	r3, [r7, #24]
 8001376:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 800137a:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800137e:	d110      	bne.n	80013a2 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8001386:	2208      	movs	r2, #8
 8001388:	4619      	mov	r1, r3
 800138a:	6a38      	ldr	r0, [r7, #32]
 800138c:	f003 f902 	bl	8004594 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001390:	697b      	ldr	r3, [r7, #20]
 8001392:	695a      	ldr	r2, [r3, #20]
 8001394:	69bb      	ldr	r3, [r7, #24]
 8001396:	091b      	lsrs	r3, r3, #4
 8001398:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800139c:	441a      	add	r2, r3
 800139e:	697b      	ldr	r3, [r7, #20]
 80013a0:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	699a      	ldr	r2, [r3, #24]
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	f042 0210 	orr.w	r2, r2, #16
 80013b0:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	4618      	mov	r0, r3
 80013b8:	f003 fa80 	bl	80048bc <USB_ReadInterrupts>
 80013bc:	4603      	mov	r3, r0
 80013be:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80013c2:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80013c6:	f040 80a7 	bne.w	8001518 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80013ca:	2300      	movs	r3, #0
 80013cc:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	4618      	mov	r0, r3
 80013d4:	f003 fa85 	bl	80048e2 <USB_ReadDevAllOutEpInterrupt>
 80013d8:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 80013da:	e099      	b.n	8001510 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80013dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80013de:	f003 0301 	and.w	r3, r3, #1
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	f000 808e 	beq.w	8001504 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80013ee:	b2d2      	uxtb	r2, r2
 80013f0:	4611      	mov	r1, r2
 80013f2:	4618      	mov	r0, r3
 80013f4:	f003 faa9 	bl	800494a <USB_ReadDevOutEPInterrupt>
 80013f8:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80013fa:	693b      	ldr	r3, [r7, #16]
 80013fc:	f003 0301 	and.w	r3, r3, #1
 8001400:	2b00      	cmp	r3, #0
 8001402:	d00c      	beq.n	800141e <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001404:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001406:	015a      	lsls	r2, r3, #5
 8001408:	69fb      	ldr	r3, [r7, #28]
 800140a:	4413      	add	r3, r2
 800140c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001410:	461a      	mov	r2, r3
 8001412:	2301      	movs	r3, #1
 8001414:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001416:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001418:	6878      	ldr	r0, [r7, #4]
 800141a:	f000 fe8b 	bl	8002134 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800141e:	693b      	ldr	r3, [r7, #16]
 8001420:	f003 0308 	and.w	r3, r3, #8
 8001424:	2b00      	cmp	r3, #0
 8001426:	d00c      	beq.n	8001442 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001428:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800142a:	015a      	lsls	r2, r3, #5
 800142c:	69fb      	ldr	r3, [r7, #28]
 800142e:	4413      	add	r3, r2
 8001430:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001434:	461a      	mov	r2, r3
 8001436:	2308      	movs	r3, #8
 8001438:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800143a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800143c:	6878      	ldr	r0, [r7, #4]
 800143e:	f000 ff61 	bl	8002304 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001442:	693b      	ldr	r3, [r7, #16]
 8001444:	f003 0310 	and.w	r3, r3, #16
 8001448:	2b00      	cmp	r3, #0
 800144a:	d008      	beq.n	800145e <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800144c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800144e:	015a      	lsls	r2, r3, #5
 8001450:	69fb      	ldr	r3, [r7, #28]
 8001452:	4413      	add	r3, r2
 8001454:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001458:	461a      	mov	r2, r3
 800145a:	2310      	movs	r3, #16
 800145c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800145e:	693b      	ldr	r3, [r7, #16]
 8001460:	f003 0302 	and.w	r3, r3, #2
 8001464:	2b00      	cmp	r3, #0
 8001466:	d030      	beq.n	80014ca <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8001468:	6a3b      	ldr	r3, [r7, #32]
 800146a:	695b      	ldr	r3, [r3, #20]
 800146c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001470:	2b80      	cmp	r3, #128	@ 0x80
 8001472:	d109      	bne.n	8001488 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8001474:	69fb      	ldr	r3, [r7, #28]
 8001476:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800147a:	685b      	ldr	r3, [r3, #4]
 800147c:	69fa      	ldr	r2, [r7, #28]
 800147e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001482:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001486:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8001488:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800148a:	4613      	mov	r3, r2
 800148c:	00db      	lsls	r3, r3, #3
 800148e:	4413      	add	r3, r2
 8001490:	009b      	lsls	r3, r3, #2
 8001492:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001496:	687a      	ldr	r2, [r7, #4]
 8001498:	4413      	add	r3, r2
 800149a:	3304      	adds	r3, #4
 800149c:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800149e:	697b      	ldr	r3, [r7, #20]
 80014a0:	78db      	ldrb	r3, [r3, #3]
 80014a2:	2b01      	cmp	r3, #1
 80014a4:	d108      	bne.n	80014b8 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80014a6:	697b      	ldr	r3, [r7, #20]
 80014a8:	2200      	movs	r2, #0
 80014aa:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80014ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014ae:	b2db      	uxtb	r3, r3
 80014b0:	4619      	mov	r1, r3
 80014b2:	6878      	ldr	r0, [r7, #4]
 80014b4:	f005 fc96 	bl	8006de4 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80014b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014ba:	015a      	lsls	r2, r3, #5
 80014bc:	69fb      	ldr	r3, [r7, #28]
 80014be:	4413      	add	r3, r2
 80014c0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80014c4:	461a      	mov	r2, r3
 80014c6:	2302      	movs	r3, #2
 80014c8:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80014ca:	693b      	ldr	r3, [r7, #16]
 80014cc:	f003 0320 	and.w	r3, r3, #32
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d008      	beq.n	80014e6 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80014d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014d6:	015a      	lsls	r2, r3, #5
 80014d8:	69fb      	ldr	r3, [r7, #28]
 80014da:	4413      	add	r3, r2
 80014dc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80014e0:	461a      	mov	r2, r3
 80014e2:	2320      	movs	r3, #32
 80014e4:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80014e6:	693b      	ldr	r3, [r7, #16]
 80014e8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d009      	beq.n	8001504 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80014f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014f2:	015a      	lsls	r2, r3, #5
 80014f4:	69fb      	ldr	r3, [r7, #28]
 80014f6:	4413      	add	r3, r2
 80014f8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80014fc:	461a      	mov	r2, r3
 80014fe:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001502:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8001504:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001506:	3301      	adds	r3, #1
 8001508:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800150a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800150c:	085b      	lsrs	r3, r3, #1
 800150e:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8001510:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001512:	2b00      	cmp	r3, #0
 8001514:	f47f af62 	bne.w	80013dc <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	4618      	mov	r0, r3
 800151e:	f003 f9cd 	bl	80048bc <USB_ReadInterrupts>
 8001522:	4603      	mov	r3, r0
 8001524:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001528:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800152c:	f040 80db 	bne.w	80016e6 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	4618      	mov	r0, r3
 8001536:	f003 f9ee 	bl	8004916 <USB_ReadDevAllInEpInterrupt>
 800153a:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 800153c:	2300      	movs	r3, #0
 800153e:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8001540:	e0cd      	b.n	80016de <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001542:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001544:	f003 0301 	and.w	r3, r3, #1
 8001548:	2b00      	cmp	r3, #0
 800154a:	f000 80c2 	beq.w	80016d2 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001554:	b2d2      	uxtb	r2, r2
 8001556:	4611      	mov	r1, r2
 8001558:	4618      	mov	r0, r3
 800155a:	f003 fa14 	bl	8004986 <USB_ReadDevInEPInterrupt>
 800155e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001560:	693b      	ldr	r3, [r7, #16]
 8001562:	f003 0301 	and.w	r3, r3, #1
 8001566:	2b00      	cmp	r3, #0
 8001568:	d057      	beq.n	800161a <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800156a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800156c:	f003 030f 	and.w	r3, r3, #15
 8001570:	2201      	movs	r2, #1
 8001572:	fa02 f303 	lsl.w	r3, r2, r3
 8001576:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001578:	69fb      	ldr	r3, [r7, #28]
 800157a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800157e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	43db      	mvns	r3, r3
 8001584:	69f9      	ldr	r1, [r7, #28]
 8001586:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800158a:	4013      	ands	r3, r2
 800158c:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800158e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001590:	015a      	lsls	r2, r3, #5
 8001592:	69fb      	ldr	r3, [r7, #28]
 8001594:	4413      	add	r3, r2
 8001596:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800159a:	461a      	mov	r2, r3
 800159c:	2301      	movs	r3, #1
 800159e:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	799b      	ldrb	r3, [r3, #6]
 80015a4:	2b01      	cmp	r3, #1
 80015a6:	d132      	bne.n	800160e <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80015a8:	6879      	ldr	r1, [r7, #4]
 80015aa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80015ac:	4613      	mov	r3, r2
 80015ae:	00db      	lsls	r3, r3, #3
 80015b0:	4413      	add	r3, r2
 80015b2:	009b      	lsls	r3, r3, #2
 80015b4:	440b      	add	r3, r1
 80015b6:	3320      	adds	r3, #32
 80015b8:	6819      	ldr	r1, [r3, #0]
 80015ba:	6878      	ldr	r0, [r7, #4]
 80015bc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80015be:	4613      	mov	r3, r2
 80015c0:	00db      	lsls	r3, r3, #3
 80015c2:	4413      	add	r3, r2
 80015c4:	009b      	lsls	r3, r3, #2
 80015c6:	4403      	add	r3, r0
 80015c8:	331c      	adds	r3, #28
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	4419      	add	r1, r3
 80015ce:	6878      	ldr	r0, [r7, #4]
 80015d0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80015d2:	4613      	mov	r3, r2
 80015d4:	00db      	lsls	r3, r3, #3
 80015d6:	4413      	add	r3, r2
 80015d8:	009b      	lsls	r3, r3, #2
 80015da:	4403      	add	r3, r0
 80015dc:	3320      	adds	r3, #32
 80015de:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80015e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d113      	bne.n	800160e <HAL_PCD_IRQHandler+0x3a2>
 80015e6:	6879      	ldr	r1, [r7, #4]
 80015e8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80015ea:	4613      	mov	r3, r2
 80015ec:	00db      	lsls	r3, r3, #3
 80015ee:	4413      	add	r3, r2
 80015f0:	009b      	lsls	r3, r3, #2
 80015f2:	440b      	add	r3, r1
 80015f4:	3324      	adds	r3, #36	@ 0x24
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d108      	bne.n	800160e <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	6818      	ldr	r0, [r3, #0]
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8001606:	461a      	mov	r2, r3
 8001608:	2101      	movs	r1, #1
 800160a:	f003 fa1b 	bl	8004a44 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800160e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001610:	b2db      	uxtb	r3, r3
 8001612:	4619      	mov	r1, r3
 8001614:	6878      	ldr	r0, [r7, #4]
 8001616:	f005 fb60 	bl	8006cda <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800161a:	693b      	ldr	r3, [r7, #16]
 800161c:	f003 0308 	and.w	r3, r3, #8
 8001620:	2b00      	cmp	r3, #0
 8001622:	d008      	beq.n	8001636 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001624:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001626:	015a      	lsls	r2, r3, #5
 8001628:	69fb      	ldr	r3, [r7, #28]
 800162a:	4413      	add	r3, r2
 800162c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001630:	461a      	mov	r2, r3
 8001632:	2308      	movs	r3, #8
 8001634:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8001636:	693b      	ldr	r3, [r7, #16]
 8001638:	f003 0310 	and.w	r3, r3, #16
 800163c:	2b00      	cmp	r3, #0
 800163e:	d008      	beq.n	8001652 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8001640:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001642:	015a      	lsls	r2, r3, #5
 8001644:	69fb      	ldr	r3, [r7, #28]
 8001646:	4413      	add	r3, r2
 8001648:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800164c:	461a      	mov	r2, r3
 800164e:	2310      	movs	r3, #16
 8001650:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8001652:	693b      	ldr	r3, [r7, #16]
 8001654:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001658:	2b00      	cmp	r3, #0
 800165a:	d008      	beq.n	800166e <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800165c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800165e:	015a      	lsls	r2, r3, #5
 8001660:	69fb      	ldr	r3, [r7, #28]
 8001662:	4413      	add	r3, r2
 8001664:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001668:	461a      	mov	r2, r3
 800166a:	2340      	movs	r3, #64	@ 0x40
 800166c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800166e:	693b      	ldr	r3, [r7, #16]
 8001670:	f003 0302 	and.w	r3, r3, #2
 8001674:	2b00      	cmp	r3, #0
 8001676:	d023      	beq.n	80016c0 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8001678:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800167a:	6a38      	ldr	r0, [r7, #32]
 800167c:	f002 fa02 	bl	8003a84 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8001680:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001682:	4613      	mov	r3, r2
 8001684:	00db      	lsls	r3, r3, #3
 8001686:	4413      	add	r3, r2
 8001688:	009b      	lsls	r3, r3, #2
 800168a:	3310      	adds	r3, #16
 800168c:	687a      	ldr	r2, [r7, #4]
 800168e:	4413      	add	r3, r2
 8001690:	3304      	adds	r3, #4
 8001692:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001694:	697b      	ldr	r3, [r7, #20]
 8001696:	78db      	ldrb	r3, [r3, #3]
 8001698:	2b01      	cmp	r3, #1
 800169a:	d108      	bne.n	80016ae <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800169c:	697b      	ldr	r3, [r7, #20]
 800169e:	2200      	movs	r2, #0
 80016a0:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80016a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016a4:	b2db      	uxtb	r3, r3
 80016a6:	4619      	mov	r1, r3
 80016a8:	6878      	ldr	r0, [r7, #4]
 80016aa:	f005 fbad 	bl	8006e08 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80016ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016b0:	015a      	lsls	r2, r3, #5
 80016b2:	69fb      	ldr	r3, [r7, #28]
 80016b4:	4413      	add	r3, r2
 80016b6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80016ba:	461a      	mov	r2, r3
 80016bc:	2302      	movs	r3, #2
 80016be:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80016c0:	693b      	ldr	r3, [r7, #16]
 80016c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d003      	beq.n	80016d2 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80016ca:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80016cc:	6878      	ldr	r0, [r7, #4]
 80016ce:	f000 fca5 	bl	800201c <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80016d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016d4:	3301      	adds	r3, #1
 80016d6:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80016d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80016da:	085b      	lsrs	r3, r3, #1
 80016dc:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80016de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	f47f af2e 	bne.w	8001542 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	4618      	mov	r0, r3
 80016ec:	f003 f8e6 	bl	80048bc <USB_ReadInterrupts>
 80016f0:	4603      	mov	r3, r0
 80016f2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80016f6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80016fa:	d122      	bne.n	8001742 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80016fc:	69fb      	ldr	r3, [r7, #28]
 80016fe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001702:	685b      	ldr	r3, [r3, #4]
 8001704:	69fa      	ldr	r2, [r7, #28]
 8001706:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800170a:	f023 0301 	bic.w	r3, r3, #1
 800170e:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8001716:	2b01      	cmp	r3, #1
 8001718:	d108      	bne.n	800172c <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	2200      	movs	r2, #0
 800171e:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001722:	2100      	movs	r1, #0
 8001724:	6878      	ldr	r0, [r7, #4]
 8001726:	f000 fe8b 	bl	8002440 <HAL_PCDEx_LPM_Callback>
 800172a:	e002      	b.n	8001732 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800172c:	6878      	ldr	r0, [r7, #4]
 800172e:	f005 fb4b 	bl	8006dc8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	695a      	ldr	r2, [r3, #20]
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8001740:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	4618      	mov	r0, r3
 8001748:	f003 f8b8 	bl	80048bc <USB_ReadInterrupts>
 800174c:	4603      	mov	r3, r0
 800174e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001752:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001756:	d112      	bne.n	800177e <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8001758:	69fb      	ldr	r3, [r7, #28]
 800175a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800175e:	689b      	ldr	r3, [r3, #8]
 8001760:	f003 0301 	and.w	r3, r3, #1
 8001764:	2b01      	cmp	r3, #1
 8001766:	d102      	bne.n	800176e <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001768:	6878      	ldr	r0, [r7, #4]
 800176a:	f005 fb07 	bl	8006d7c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	695a      	ldr	r2, [r3, #20]
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 800177c:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	4618      	mov	r0, r3
 8001784:	f003 f89a 	bl	80048bc <USB_ReadInterrupts>
 8001788:	4603      	mov	r3, r0
 800178a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800178e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001792:	f040 80b7 	bne.w	8001904 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001796:	69fb      	ldr	r3, [r7, #28]
 8001798:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800179c:	685b      	ldr	r3, [r3, #4]
 800179e:	69fa      	ldr	r2, [r7, #28]
 80017a0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80017a4:	f023 0301 	bic.w	r3, r3, #1
 80017a8:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	2110      	movs	r1, #16
 80017b0:	4618      	mov	r0, r3
 80017b2:	f002 f967 	bl	8003a84 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80017b6:	2300      	movs	r3, #0
 80017b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80017ba:	e046      	b.n	800184a <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80017bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80017be:	015a      	lsls	r2, r3, #5
 80017c0:	69fb      	ldr	r3, [r7, #28]
 80017c2:	4413      	add	r3, r2
 80017c4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80017c8:	461a      	mov	r2, r3
 80017ca:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80017ce:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80017d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80017d2:	015a      	lsls	r2, r3, #5
 80017d4:	69fb      	ldr	r3, [r7, #28]
 80017d6:	4413      	add	r3, r2
 80017d8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80017e0:	0151      	lsls	r1, r2, #5
 80017e2:	69fa      	ldr	r2, [r7, #28]
 80017e4:	440a      	add	r2, r1
 80017e6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80017ea:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80017ee:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80017f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80017f2:	015a      	lsls	r2, r3, #5
 80017f4:	69fb      	ldr	r3, [r7, #28]
 80017f6:	4413      	add	r3, r2
 80017f8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80017fc:	461a      	mov	r2, r3
 80017fe:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8001802:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8001804:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001806:	015a      	lsls	r2, r3, #5
 8001808:	69fb      	ldr	r3, [r7, #28]
 800180a:	4413      	add	r3, r2
 800180c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001814:	0151      	lsls	r1, r2, #5
 8001816:	69fa      	ldr	r2, [r7, #28]
 8001818:	440a      	add	r2, r1
 800181a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800181e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8001822:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8001824:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001826:	015a      	lsls	r2, r3, #5
 8001828:	69fb      	ldr	r3, [r7, #28]
 800182a:	4413      	add	r3, r2
 800182c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001834:	0151      	lsls	r1, r2, #5
 8001836:	69fa      	ldr	r2, [r7, #28]
 8001838:	440a      	add	r2, r1
 800183a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800183e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8001842:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001844:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001846:	3301      	adds	r3, #1
 8001848:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	791b      	ldrb	r3, [r3, #4]
 800184e:	461a      	mov	r2, r3
 8001850:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001852:	4293      	cmp	r3, r2
 8001854:	d3b2      	bcc.n	80017bc <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8001856:	69fb      	ldr	r3, [r7, #28]
 8001858:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800185c:	69db      	ldr	r3, [r3, #28]
 800185e:	69fa      	ldr	r2, [r7, #28]
 8001860:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001864:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8001868:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	7bdb      	ldrb	r3, [r3, #15]
 800186e:	2b00      	cmp	r3, #0
 8001870:	d016      	beq.n	80018a0 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8001872:	69fb      	ldr	r3, [r7, #28]
 8001874:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001878:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800187c:	69fa      	ldr	r2, [r7, #28]
 800187e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001882:	f043 030b 	orr.w	r3, r3, #11
 8001886:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800188a:	69fb      	ldr	r3, [r7, #28]
 800188c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001890:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001892:	69fa      	ldr	r2, [r7, #28]
 8001894:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001898:	f043 030b 	orr.w	r3, r3, #11
 800189c:	6453      	str	r3, [r2, #68]	@ 0x44
 800189e:	e015      	b.n	80018cc <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80018a0:	69fb      	ldr	r3, [r7, #28]
 80018a2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80018a6:	695b      	ldr	r3, [r3, #20]
 80018a8:	69fa      	ldr	r2, [r7, #28]
 80018aa:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80018ae:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80018b2:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 80018b6:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80018b8:	69fb      	ldr	r3, [r7, #28]
 80018ba:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80018be:	691b      	ldr	r3, [r3, #16]
 80018c0:	69fa      	ldr	r2, [r7, #28]
 80018c2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80018c6:	f043 030b 	orr.w	r3, r3, #11
 80018ca:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80018cc:	69fb      	ldr	r3, [r7, #28]
 80018ce:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	69fa      	ldr	r2, [r7, #28]
 80018d6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80018da:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80018de:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	6818      	ldr	r0, [r3, #0]
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80018ee:	461a      	mov	r2, r3
 80018f0:	f003 f8a8 	bl	8004a44 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	695a      	ldr	r2, [r3, #20]
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8001902:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	4618      	mov	r0, r3
 800190a:	f002 ffd7 	bl	80048bc <USB_ReadInterrupts>
 800190e:	4603      	mov	r3, r0
 8001910:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001914:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001918:	d123      	bne.n	8001962 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	4618      	mov	r0, r3
 8001920:	f003 f86d 	bl	80049fe <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	4618      	mov	r0, r3
 800192a:	f002 f924 	bl	8003b76 <USB_GetDevSpeed>
 800192e:	4603      	mov	r3, r0
 8001930:	461a      	mov	r2, r3
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681c      	ldr	r4, [r3, #0]
 800193a:	f001 f9f1 	bl	8002d20 <HAL_RCC_GetHCLKFreq>
 800193e:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001944:	461a      	mov	r2, r3
 8001946:	4620      	mov	r0, r4
 8001948:	f001 fe28 	bl	800359c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800194c:	6878      	ldr	r0, [r7, #4]
 800194e:	f005 f9ec 	bl	8006d2a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	695a      	ldr	r2, [r3, #20]
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8001960:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	4618      	mov	r0, r3
 8001968:	f002 ffa8 	bl	80048bc <USB_ReadInterrupts>
 800196c:	4603      	mov	r3, r0
 800196e:	f003 0308 	and.w	r3, r3, #8
 8001972:	2b08      	cmp	r3, #8
 8001974:	d10a      	bne.n	800198c <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8001976:	6878      	ldr	r0, [r7, #4]
 8001978:	f005 f9c9 	bl	8006d0e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	695a      	ldr	r2, [r3, #20]
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f002 0208 	and.w	r2, r2, #8
 800198a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	4618      	mov	r0, r3
 8001992:	f002 ff93 	bl	80048bc <USB_ReadInterrupts>
 8001996:	4603      	mov	r3, r0
 8001998:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800199c:	2b80      	cmp	r3, #128	@ 0x80
 800199e:	d123      	bne.n	80019e8 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80019a0:	6a3b      	ldr	r3, [r7, #32]
 80019a2:	699b      	ldr	r3, [r3, #24]
 80019a4:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80019a8:	6a3b      	ldr	r3, [r7, #32]
 80019aa:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80019ac:	2301      	movs	r3, #1
 80019ae:	627b      	str	r3, [r7, #36]	@ 0x24
 80019b0:	e014      	b.n	80019dc <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80019b2:	6879      	ldr	r1, [r7, #4]
 80019b4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80019b6:	4613      	mov	r3, r2
 80019b8:	00db      	lsls	r3, r3, #3
 80019ba:	4413      	add	r3, r2
 80019bc:	009b      	lsls	r3, r3, #2
 80019be:	440b      	add	r3, r1
 80019c0:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80019c4:	781b      	ldrb	r3, [r3, #0]
 80019c6:	2b01      	cmp	r3, #1
 80019c8:	d105      	bne.n	80019d6 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80019ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019cc:	b2db      	uxtb	r3, r3
 80019ce:	4619      	mov	r1, r3
 80019d0:	6878      	ldr	r0, [r7, #4]
 80019d2:	f000 faf2 	bl	8001fba <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80019d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019d8:	3301      	adds	r3, #1
 80019da:	627b      	str	r3, [r7, #36]	@ 0x24
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	791b      	ldrb	r3, [r3, #4]
 80019e0:	461a      	mov	r2, r3
 80019e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019e4:	4293      	cmp	r3, r2
 80019e6:	d3e4      	bcc.n	80019b2 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	4618      	mov	r0, r3
 80019ee:	f002 ff65 	bl	80048bc <USB_ReadInterrupts>
 80019f2:	4603      	mov	r3, r0
 80019f4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80019f8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80019fc:	d13c      	bne.n	8001a78 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80019fe:	2301      	movs	r3, #1
 8001a00:	627b      	str	r3, [r7, #36]	@ 0x24
 8001a02:	e02b      	b.n	8001a5c <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8001a04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a06:	015a      	lsls	r2, r3, #5
 8001a08:	69fb      	ldr	r3, [r7, #28]
 8001a0a:	4413      	add	r3, r2
 8001a0c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001a14:	6879      	ldr	r1, [r7, #4]
 8001a16:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001a18:	4613      	mov	r3, r2
 8001a1a:	00db      	lsls	r3, r3, #3
 8001a1c:	4413      	add	r3, r2
 8001a1e:	009b      	lsls	r3, r3, #2
 8001a20:	440b      	add	r3, r1
 8001a22:	3318      	adds	r3, #24
 8001a24:	781b      	ldrb	r3, [r3, #0]
 8001a26:	2b01      	cmp	r3, #1
 8001a28:	d115      	bne.n	8001a56 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8001a2a:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	da12      	bge.n	8001a56 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8001a30:	6879      	ldr	r1, [r7, #4]
 8001a32:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001a34:	4613      	mov	r3, r2
 8001a36:	00db      	lsls	r3, r3, #3
 8001a38:	4413      	add	r3, r2
 8001a3a:	009b      	lsls	r3, r3, #2
 8001a3c:	440b      	add	r3, r1
 8001a3e:	3317      	adds	r3, #23
 8001a40:	2201      	movs	r2, #1
 8001a42:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8001a44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a46:	b2db      	uxtb	r3, r3
 8001a48:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001a4c:	b2db      	uxtb	r3, r3
 8001a4e:	4619      	mov	r1, r3
 8001a50:	6878      	ldr	r0, [r7, #4]
 8001a52:	f000 fab2 	bl	8001fba <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001a56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a58:	3301      	adds	r3, #1
 8001a5a:	627b      	str	r3, [r7, #36]	@ 0x24
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	791b      	ldrb	r3, [r3, #4]
 8001a60:	461a      	mov	r2, r3
 8001a62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a64:	4293      	cmp	r3, r2
 8001a66:	d3cd      	bcc.n	8001a04 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	695a      	ldr	r2, [r3, #20]
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8001a76:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	f002 ff1d 	bl	80048bc <USB_ReadInterrupts>
 8001a82:	4603      	mov	r3, r0
 8001a84:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001a88:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8001a8c:	d156      	bne.n	8001b3c <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001a8e:	2301      	movs	r3, #1
 8001a90:	627b      	str	r3, [r7, #36]	@ 0x24
 8001a92:	e045      	b.n	8001b20 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8001a94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a96:	015a      	lsls	r2, r3, #5
 8001a98:	69fb      	ldr	r3, [r7, #28]
 8001a9a:	4413      	add	r3, r2
 8001a9c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001aa4:	6879      	ldr	r1, [r7, #4]
 8001aa6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001aa8:	4613      	mov	r3, r2
 8001aaa:	00db      	lsls	r3, r3, #3
 8001aac:	4413      	add	r3, r2
 8001aae:	009b      	lsls	r3, r3, #2
 8001ab0:	440b      	add	r3, r1
 8001ab2:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8001ab6:	781b      	ldrb	r3, [r3, #0]
 8001ab8:	2b01      	cmp	r3, #1
 8001aba:	d12e      	bne.n	8001b1a <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001abc:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	da2b      	bge.n	8001b1a <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8001ac2:	69bb      	ldr	r3, [r7, #24]
 8001ac4:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8001ace:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001ad2:	429a      	cmp	r2, r3
 8001ad4:	d121      	bne.n	8001b1a <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8001ad6:	6879      	ldr	r1, [r7, #4]
 8001ad8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001ada:	4613      	mov	r3, r2
 8001adc:	00db      	lsls	r3, r3, #3
 8001ade:	4413      	add	r3, r2
 8001ae0:	009b      	lsls	r3, r3, #2
 8001ae2:	440b      	add	r3, r1
 8001ae4:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8001ae8:	2201      	movs	r2, #1
 8001aea:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8001aec:	6a3b      	ldr	r3, [r7, #32]
 8001aee:	699b      	ldr	r3, [r3, #24]
 8001af0:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8001af4:	6a3b      	ldr	r3, [r7, #32]
 8001af6:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8001af8:	6a3b      	ldr	r3, [r7, #32]
 8001afa:	695b      	ldr	r3, [r3, #20]
 8001afc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d10a      	bne.n	8001b1a <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8001b04:	69fb      	ldr	r3, [r7, #28]
 8001b06:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001b0a:	685b      	ldr	r3, [r3, #4]
 8001b0c:	69fa      	ldr	r2, [r7, #28]
 8001b0e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001b12:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001b16:	6053      	str	r3, [r2, #4]
            break;
 8001b18:	e008      	b.n	8001b2c <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001b1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b1c:	3301      	adds	r3, #1
 8001b1e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	791b      	ldrb	r3, [r3, #4]
 8001b24:	461a      	mov	r2, r3
 8001b26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b28:	4293      	cmp	r3, r2
 8001b2a:	d3b3      	bcc.n	8001a94 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	695a      	ldr	r2, [r3, #20]
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8001b3a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	4618      	mov	r0, r3
 8001b42:	f002 febb 	bl	80048bc <USB_ReadInterrupts>
 8001b46:	4603      	mov	r3, r0
 8001b48:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8001b4c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001b50:	d10a      	bne.n	8001b68 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8001b52:	6878      	ldr	r0, [r7, #4]
 8001b54:	f005 f96a 	bl	8006e2c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	695a      	ldr	r2, [r3, #20]
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8001b66:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	f002 fea5 	bl	80048bc <USB_ReadInterrupts>
 8001b72:	4603      	mov	r3, r0
 8001b74:	f003 0304 	and.w	r3, r3, #4
 8001b78:	2b04      	cmp	r3, #4
 8001b7a:	d115      	bne.n	8001ba8 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	685b      	ldr	r3, [r3, #4]
 8001b82:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8001b84:	69bb      	ldr	r3, [r7, #24]
 8001b86:	f003 0304 	and.w	r3, r3, #4
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d002      	beq.n	8001b94 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8001b8e:	6878      	ldr	r0, [r7, #4]
 8001b90:	f005 f95a 	bl	8006e48 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	6859      	ldr	r1, [r3, #4]
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	69ba      	ldr	r2, [r7, #24]
 8001ba0:	430a      	orrs	r2, r1
 8001ba2:	605a      	str	r2, [r3, #4]
 8001ba4:	e000      	b.n	8001ba8 <HAL_PCD_IRQHandler+0x93c>
      return;
 8001ba6:	bf00      	nop
    }
  }
}
 8001ba8:	3734      	adds	r7, #52	@ 0x34
 8001baa:	46bd      	mov	sp, r7
 8001bac:	bd90      	pop	{r4, r7, pc}

08001bae <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001bae:	b580      	push	{r7, lr}
 8001bb0:	b082      	sub	sp, #8
 8001bb2:	af00      	add	r7, sp, #0
 8001bb4:	6078      	str	r0, [r7, #4]
 8001bb6:	460b      	mov	r3, r1
 8001bb8:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001bc0:	2b01      	cmp	r3, #1
 8001bc2:	d101      	bne.n	8001bc8 <HAL_PCD_SetAddress+0x1a>
 8001bc4:	2302      	movs	r3, #2
 8001bc6:	e012      	b.n	8001bee <HAL_PCD_SetAddress+0x40>
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	2201      	movs	r2, #1
 8001bcc:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	78fa      	ldrb	r2, [r7, #3]
 8001bd4:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	78fa      	ldrb	r2, [r7, #3]
 8001bdc:	4611      	mov	r1, r2
 8001bde:	4618      	mov	r0, r3
 8001be0:	f002 fe04 	bl	80047ec <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	2200      	movs	r2, #0
 8001be8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8001bec:	2300      	movs	r3, #0
}
 8001bee:	4618      	mov	r0, r3
 8001bf0:	3708      	adds	r7, #8
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bd80      	pop	{r7, pc}

08001bf6 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001bf6:	b580      	push	{r7, lr}
 8001bf8:	b084      	sub	sp, #16
 8001bfa:	af00      	add	r7, sp, #0
 8001bfc:	6078      	str	r0, [r7, #4]
 8001bfe:	4608      	mov	r0, r1
 8001c00:	4611      	mov	r1, r2
 8001c02:	461a      	mov	r2, r3
 8001c04:	4603      	mov	r3, r0
 8001c06:	70fb      	strb	r3, [r7, #3]
 8001c08:	460b      	mov	r3, r1
 8001c0a:	803b      	strh	r3, [r7, #0]
 8001c0c:	4613      	mov	r3, r2
 8001c0e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8001c10:	2300      	movs	r3, #0
 8001c12:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001c14:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	da0f      	bge.n	8001c3c <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001c1c:	78fb      	ldrb	r3, [r7, #3]
 8001c1e:	f003 020f 	and.w	r2, r3, #15
 8001c22:	4613      	mov	r3, r2
 8001c24:	00db      	lsls	r3, r3, #3
 8001c26:	4413      	add	r3, r2
 8001c28:	009b      	lsls	r3, r3, #2
 8001c2a:	3310      	adds	r3, #16
 8001c2c:	687a      	ldr	r2, [r7, #4]
 8001c2e:	4413      	add	r3, r2
 8001c30:	3304      	adds	r3, #4
 8001c32:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	2201      	movs	r2, #1
 8001c38:	705a      	strb	r2, [r3, #1]
 8001c3a:	e00f      	b.n	8001c5c <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001c3c:	78fb      	ldrb	r3, [r7, #3]
 8001c3e:	f003 020f 	and.w	r2, r3, #15
 8001c42:	4613      	mov	r3, r2
 8001c44:	00db      	lsls	r3, r3, #3
 8001c46:	4413      	add	r3, r2
 8001c48:	009b      	lsls	r3, r3, #2
 8001c4a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001c4e:	687a      	ldr	r2, [r7, #4]
 8001c50:	4413      	add	r3, r2
 8001c52:	3304      	adds	r3, #4
 8001c54:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	2200      	movs	r2, #0
 8001c5a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001c5c:	78fb      	ldrb	r3, [r7, #3]
 8001c5e:	f003 030f 	and.w	r3, r3, #15
 8001c62:	b2da      	uxtb	r2, r3
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8001c68:	883b      	ldrh	r3, [r7, #0]
 8001c6a:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	78ba      	ldrb	r2, [r7, #2]
 8001c76:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	785b      	ldrb	r3, [r3, #1]
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d004      	beq.n	8001c8a <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	781b      	ldrb	r3, [r3, #0]
 8001c84:	461a      	mov	r2, r3
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001c8a:	78bb      	ldrb	r3, [r7, #2]
 8001c8c:	2b02      	cmp	r3, #2
 8001c8e:	d102      	bne.n	8001c96 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	2200      	movs	r2, #0
 8001c94:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001c9c:	2b01      	cmp	r3, #1
 8001c9e:	d101      	bne.n	8001ca4 <HAL_PCD_EP_Open+0xae>
 8001ca0:	2302      	movs	r3, #2
 8001ca2:	e00e      	b.n	8001cc2 <HAL_PCD_EP_Open+0xcc>
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	2201      	movs	r2, #1
 8001ca8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	68f9      	ldr	r1, [r7, #12]
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	f001 ff84 	bl	8003bc0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	2200      	movs	r2, #0
 8001cbc:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8001cc0:	7afb      	ldrb	r3, [r7, #11]
}
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	3710      	adds	r7, #16
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	bd80      	pop	{r7, pc}

08001cca <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001cca:	b580      	push	{r7, lr}
 8001ccc:	b084      	sub	sp, #16
 8001cce:	af00      	add	r7, sp, #0
 8001cd0:	6078      	str	r0, [r7, #4]
 8001cd2:	460b      	mov	r3, r1
 8001cd4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001cd6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	da0f      	bge.n	8001cfe <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001cde:	78fb      	ldrb	r3, [r7, #3]
 8001ce0:	f003 020f 	and.w	r2, r3, #15
 8001ce4:	4613      	mov	r3, r2
 8001ce6:	00db      	lsls	r3, r3, #3
 8001ce8:	4413      	add	r3, r2
 8001cea:	009b      	lsls	r3, r3, #2
 8001cec:	3310      	adds	r3, #16
 8001cee:	687a      	ldr	r2, [r7, #4]
 8001cf0:	4413      	add	r3, r2
 8001cf2:	3304      	adds	r3, #4
 8001cf4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	2201      	movs	r2, #1
 8001cfa:	705a      	strb	r2, [r3, #1]
 8001cfc:	e00f      	b.n	8001d1e <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001cfe:	78fb      	ldrb	r3, [r7, #3]
 8001d00:	f003 020f 	and.w	r2, r3, #15
 8001d04:	4613      	mov	r3, r2
 8001d06:	00db      	lsls	r3, r3, #3
 8001d08:	4413      	add	r3, r2
 8001d0a:	009b      	lsls	r3, r3, #2
 8001d0c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001d10:	687a      	ldr	r2, [r7, #4]
 8001d12:	4413      	add	r3, r2
 8001d14:	3304      	adds	r3, #4
 8001d16:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8001d1e:	78fb      	ldrb	r3, [r7, #3]
 8001d20:	f003 030f 	and.w	r3, r3, #15
 8001d24:	b2da      	uxtb	r2, r3
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001d30:	2b01      	cmp	r3, #1
 8001d32:	d101      	bne.n	8001d38 <HAL_PCD_EP_Close+0x6e>
 8001d34:	2302      	movs	r3, #2
 8001d36:	e00e      	b.n	8001d56 <HAL_PCD_EP_Close+0x8c>
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	2201      	movs	r2, #1
 8001d3c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	68f9      	ldr	r1, [r7, #12]
 8001d46:	4618      	mov	r0, r3
 8001d48:	f001 ffc2 	bl	8003cd0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	2200      	movs	r2, #0
 8001d50:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8001d54:	2300      	movs	r3, #0
}
 8001d56:	4618      	mov	r0, r3
 8001d58:	3710      	adds	r7, #16
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	bd80      	pop	{r7, pc}

08001d5e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001d5e:	b580      	push	{r7, lr}
 8001d60:	b086      	sub	sp, #24
 8001d62:	af00      	add	r7, sp, #0
 8001d64:	60f8      	str	r0, [r7, #12]
 8001d66:	607a      	str	r2, [r7, #4]
 8001d68:	603b      	str	r3, [r7, #0]
 8001d6a:	460b      	mov	r3, r1
 8001d6c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001d6e:	7afb      	ldrb	r3, [r7, #11]
 8001d70:	f003 020f 	and.w	r2, r3, #15
 8001d74:	4613      	mov	r3, r2
 8001d76:	00db      	lsls	r3, r3, #3
 8001d78:	4413      	add	r3, r2
 8001d7a:	009b      	lsls	r3, r3, #2
 8001d7c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001d80:	68fa      	ldr	r2, [r7, #12]
 8001d82:	4413      	add	r3, r2
 8001d84:	3304      	adds	r3, #4
 8001d86:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001d88:	697b      	ldr	r3, [r7, #20]
 8001d8a:	687a      	ldr	r2, [r7, #4]
 8001d8c:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001d8e:	697b      	ldr	r3, [r7, #20]
 8001d90:	683a      	ldr	r2, [r7, #0]
 8001d92:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8001d94:	697b      	ldr	r3, [r7, #20]
 8001d96:	2200      	movs	r2, #0
 8001d98:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8001d9a:	697b      	ldr	r3, [r7, #20]
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001da0:	7afb      	ldrb	r3, [r7, #11]
 8001da2:	f003 030f 	and.w	r3, r3, #15
 8001da6:	b2da      	uxtb	r2, r3
 8001da8:	697b      	ldr	r3, [r7, #20]
 8001daa:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	799b      	ldrb	r3, [r3, #6]
 8001db0:	2b01      	cmp	r3, #1
 8001db2:	d102      	bne.n	8001dba <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001db4:	687a      	ldr	r2, [r7, #4]
 8001db6:	697b      	ldr	r3, [r7, #20]
 8001db8:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	6818      	ldr	r0, [r3, #0]
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	799b      	ldrb	r3, [r3, #6]
 8001dc2:	461a      	mov	r2, r3
 8001dc4:	6979      	ldr	r1, [r7, #20]
 8001dc6:	f002 f85f 	bl	8003e88 <USB_EPStartXfer>

  return HAL_OK;
 8001dca:	2300      	movs	r3, #0
}
 8001dcc:	4618      	mov	r0, r3
 8001dce:	3718      	adds	r7, #24
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	bd80      	pop	{r7, pc}

08001dd4 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b086      	sub	sp, #24
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	60f8      	str	r0, [r7, #12]
 8001ddc:	607a      	str	r2, [r7, #4]
 8001dde:	603b      	str	r3, [r7, #0]
 8001de0:	460b      	mov	r3, r1
 8001de2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001de4:	7afb      	ldrb	r3, [r7, #11]
 8001de6:	f003 020f 	and.w	r2, r3, #15
 8001dea:	4613      	mov	r3, r2
 8001dec:	00db      	lsls	r3, r3, #3
 8001dee:	4413      	add	r3, r2
 8001df0:	009b      	lsls	r3, r3, #2
 8001df2:	3310      	adds	r3, #16
 8001df4:	68fa      	ldr	r2, [r7, #12]
 8001df6:	4413      	add	r3, r2
 8001df8:	3304      	adds	r3, #4
 8001dfa:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001dfc:	697b      	ldr	r3, [r7, #20]
 8001dfe:	687a      	ldr	r2, [r7, #4]
 8001e00:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001e02:	697b      	ldr	r3, [r7, #20]
 8001e04:	683a      	ldr	r2, [r7, #0]
 8001e06:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8001e08:	697b      	ldr	r3, [r7, #20]
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8001e0e:	697b      	ldr	r3, [r7, #20]
 8001e10:	2201      	movs	r2, #1
 8001e12:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001e14:	7afb      	ldrb	r3, [r7, #11]
 8001e16:	f003 030f 	and.w	r3, r3, #15
 8001e1a:	b2da      	uxtb	r2, r3
 8001e1c:	697b      	ldr	r3, [r7, #20]
 8001e1e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	799b      	ldrb	r3, [r3, #6]
 8001e24:	2b01      	cmp	r3, #1
 8001e26:	d102      	bne.n	8001e2e <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001e28:	687a      	ldr	r2, [r7, #4]
 8001e2a:	697b      	ldr	r3, [r7, #20]
 8001e2c:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	6818      	ldr	r0, [r3, #0]
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	799b      	ldrb	r3, [r3, #6]
 8001e36:	461a      	mov	r2, r3
 8001e38:	6979      	ldr	r1, [r7, #20]
 8001e3a:	f002 f825 	bl	8003e88 <USB_EPStartXfer>

  return HAL_OK;
 8001e3e:	2300      	movs	r3, #0
}
 8001e40:	4618      	mov	r0, r3
 8001e42:	3718      	adds	r7, #24
 8001e44:	46bd      	mov	sp, r7
 8001e46:	bd80      	pop	{r7, pc}

08001e48 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b084      	sub	sp, #16
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
 8001e50:	460b      	mov	r3, r1
 8001e52:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001e54:	78fb      	ldrb	r3, [r7, #3]
 8001e56:	f003 030f 	and.w	r3, r3, #15
 8001e5a:	687a      	ldr	r2, [r7, #4]
 8001e5c:	7912      	ldrb	r2, [r2, #4]
 8001e5e:	4293      	cmp	r3, r2
 8001e60:	d901      	bls.n	8001e66 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001e62:	2301      	movs	r3, #1
 8001e64:	e04f      	b.n	8001f06 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001e66:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	da0f      	bge.n	8001e8e <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001e6e:	78fb      	ldrb	r3, [r7, #3]
 8001e70:	f003 020f 	and.w	r2, r3, #15
 8001e74:	4613      	mov	r3, r2
 8001e76:	00db      	lsls	r3, r3, #3
 8001e78:	4413      	add	r3, r2
 8001e7a:	009b      	lsls	r3, r3, #2
 8001e7c:	3310      	adds	r3, #16
 8001e7e:	687a      	ldr	r2, [r7, #4]
 8001e80:	4413      	add	r3, r2
 8001e82:	3304      	adds	r3, #4
 8001e84:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	2201      	movs	r2, #1
 8001e8a:	705a      	strb	r2, [r3, #1]
 8001e8c:	e00d      	b.n	8001eaa <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001e8e:	78fa      	ldrb	r2, [r7, #3]
 8001e90:	4613      	mov	r3, r2
 8001e92:	00db      	lsls	r3, r3, #3
 8001e94:	4413      	add	r3, r2
 8001e96:	009b      	lsls	r3, r3, #2
 8001e98:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001e9c:	687a      	ldr	r2, [r7, #4]
 8001e9e:	4413      	add	r3, r2
 8001ea0:	3304      	adds	r3, #4
 8001ea2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	2201      	movs	r2, #1
 8001eae:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001eb0:	78fb      	ldrb	r3, [r7, #3]
 8001eb2:	f003 030f 	and.w	r3, r3, #15
 8001eb6:	b2da      	uxtb	r2, r3
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001ec2:	2b01      	cmp	r3, #1
 8001ec4:	d101      	bne.n	8001eca <HAL_PCD_EP_SetStall+0x82>
 8001ec6:	2302      	movs	r3, #2
 8001ec8:	e01d      	b.n	8001f06 <HAL_PCD_EP_SetStall+0xbe>
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	2201      	movs	r2, #1
 8001ece:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	68f9      	ldr	r1, [r7, #12]
 8001ed8:	4618      	mov	r0, r3
 8001eda:	f002 fbb3 	bl	8004644 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001ede:	78fb      	ldrb	r3, [r7, #3]
 8001ee0:	f003 030f 	and.w	r3, r3, #15
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d109      	bne.n	8001efc <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	6818      	ldr	r0, [r3, #0]
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	7999      	ldrb	r1, [r3, #6]
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8001ef6:	461a      	mov	r2, r3
 8001ef8:	f002 fda4 	bl	8004a44 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	2200      	movs	r2, #0
 8001f00:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8001f04:	2300      	movs	r3, #0
}
 8001f06:	4618      	mov	r0, r3
 8001f08:	3710      	adds	r7, #16
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	bd80      	pop	{r7, pc}

08001f0e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001f0e:	b580      	push	{r7, lr}
 8001f10:	b084      	sub	sp, #16
 8001f12:	af00      	add	r7, sp, #0
 8001f14:	6078      	str	r0, [r7, #4]
 8001f16:	460b      	mov	r3, r1
 8001f18:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001f1a:	78fb      	ldrb	r3, [r7, #3]
 8001f1c:	f003 030f 	and.w	r3, r3, #15
 8001f20:	687a      	ldr	r2, [r7, #4]
 8001f22:	7912      	ldrb	r2, [r2, #4]
 8001f24:	4293      	cmp	r3, r2
 8001f26:	d901      	bls.n	8001f2c <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001f28:	2301      	movs	r3, #1
 8001f2a:	e042      	b.n	8001fb2 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001f2c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	da0f      	bge.n	8001f54 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001f34:	78fb      	ldrb	r3, [r7, #3]
 8001f36:	f003 020f 	and.w	r2, r3, #15
 8001f3a:	4613      	mov	r3, r2
 8001f3c:	00db      	lsls	r3, r3, #3
 8001f3e:	4413      	add	r3, r2
 8001f40:	009b      	lsls	r3, r3, #2
 8001f42:	3310      	adds	r3, #16
 8001f44:	687a      	ldr	r2, [r7, #4]
 8001f46:	4413      	add	r3, r2
 8001f48:	3304      	adds	r3, #4
 8001f4a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	2201      	movs	r2, #1
 8001f50:	705a      	strb	r2, [r3, #1]
 8001f52:	e00f      	b.n	8001f74 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001f54:	78fb      	ldrb	r3, [r7, #3]
 8001f56:	f003 020f 	and.w	r2, r3, #15
 8001f5a:	4613      	mov	r3, r2
 8001f5c:	00db      	lsls	r3, r3, #3
 8001f5e:	4413      	add	r3, r2
 8001f60:	009b      	lsls	r3, r3, #2
 8001f62:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001f66:	687a      	ldr	r2, [r7, #4]
 8001f68:	4413      	add	r3, r2
 8001f6a:	3304      	adds	r3, #4
 8001f6c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	2200      	movs	r2, #0
 8001f72:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	2200      	movs	r2, #0
 8001f78:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001f7a:	78fb      	ldrb	r3, [r7, #3]
 8001f7c:	f003 030f 	and.w	r3, r3, #15
 8001f80:	b2da      	uxtb	r2, r3
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001f8c:	2b01      	cmp	r3, #1
 8001f8e:	d101      	bne.n	8001f94 <HAL_PCD_EP_ClrStall+0x86>
 8001f90:	2302      	movs	r3, #2
 8001f92:	e00e      	b.n	8001fb2 <HAL_PCD_EP_ClrStall+0xa4>
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	2201      	movs	r2, #1
 8001f98:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	68f9      	ldr	r1, [r7, #12]
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	f002 fbbc 	bl	8004720 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	2200      	movs	r2, #0
 8001fac:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8001fb0:	2300      	movs	r3, #0
}
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	3710      	adds	r7, #16
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	bd80      	pop	{r7, pc}

08001fba <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001fba:	b580      	push	{r7, lr}
 8001fbc:	b084      	sub	sp, #16
 8001fbe:	af00      	add	r7, sp, #0
 8001fc0:	6078      	str	r0, [r7, #4]
 8001fc2:	460b      	mov	r3, r1
 8001fc4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8001fc6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	da0c      	bge.n	8001fe8 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001fce:	78fb      	ldrb	r3, [r7, #3]
 8001fd0:	f003 020f 	and.w	r2, r3, #15
 8001fd4:	4613      	mov	r3, r2
 8001fd6:	00db      	lsls	r3, r3, #3
 8001fd8:	4413      	add	r3, r2
 8001fda:	009b      	lsls	r3, r3, #2
 8001fdc:	3310      	adds	r3, #16
 8001fde:	687a      	ldr	r2, [r7, #4]
 8001fe0:	4413      	add	r3, r2
 8001fe2:	3304      	adds	r3, #4
 8001fe4:	60fb      	str	r3, [r7, #12]
 8001fe6:	e00c      	b.n	8002002 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001fe8:	78fb      	ldrb	r3, [r7, #3]
 8001fea:	f003 020f 	and.w	r2, r3, #15
 8001fee:	4613      	mov	r3, r2
 8001ff0:	00db      	lsls	r3, r3, #3
 8001ff2:	4413      	add	r3, r2
 8001ff4:	009b      	lsls	r3, r3, #2
 8001ff6:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001ffa:	687a      	ldr	r2, [r7, #4]
 8001ffc:	4413      	add	r3, r2
 8001ffe:	3304      	adds	r3, #4
 8002000:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	68f9      	ldr	r1, [r7, #12]
 8002008:	4618      	mov	r0, r3
 800200a:	f002 f9db 	bl	80043c4 <USB_EPStopXfer>
 800200e:	4603      	mov	r3, r0
 8002010:	72fb      	strb	r3, [r7, #11]

  return ret;
 8002012:	7afb      	ldrb	r3, [r7, #11]
}
 8002014:	4618      	mov	r0, r3
 8002016:	3710      	adds	r7, #16
 8002018:	46bd      	mov	sp, r7
 800201a:	bd80      	pop	{r7, pc}

0800201c <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	b08a      	sub	sp, #40	@ 0x28
 8002020:	af02      	add	r7, sp, #8
 8002022:	6078      	str	r0, [r7, #4]
 8002024:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800202c:	697b      	ldr	r3, [r7, #20]
 800202e:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002030:	683a      	ldr	r2, [r7, #0]
 8002032:	4613      	mov	r3, r2
 8002034:	00db      	lsls	r3, r3, #3
 8002036:	4413      	add	r3, r2
 8002038:	009b      	lsls	r3, r3, #2
 800203a:	3310      	adds	r3, #16
 800203c:	687a      	ldr	r2, [r7, #4]
 800203e:	4413      	add	r3, r2
 8002040:	3304      	adds	r3, #4
 8002042:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	695a      	ldr	r2, [r3, #20]
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	691b      	ldr	r3, [r3, #16]
 800204c:	429a      	cmp	r2, r3
 800204e:	d901      	bls.n	8002054 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002050:	2301      	movs	r3, #1
 8002052:	e06b      	b.n	800212c <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	691a      	ldr	r2, [r3, #16]
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	695b      	ldr	r3, [r3, #20]
 800205c:	1ad3      	subs	r3, r2, r3
 800205e:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	689b      	ldr	r3, [r3, #8]
 8002064:	69fa      	ldr	r2, [r7, #28]
 8002066:	429a      	cmp	r2, r3
 8002068:	d902      	bls.n	8002070 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	689b      	ldr	r3, [r3, #8]
 800206e:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002070:	69fb      	ldr	r3, [r7, #28]
 8002072:	3303      	adds	r3, #3
 8002074:	089b      	lsrs	r3, r3, #2
 8002076:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002078:	e02a      	b.n	80020d0 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	691a      	ldr	r2, [r3, #16]
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	695b      	ldr	r3, [r3, #20]
 8002082:	1ad3      	subs	r3, r2, r3
 8002084:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	689b      	ldr	r3, [r3, #8]
 800208a:	69fa      	ldr	r2, [r7, #28]
 800208c:	429a      	cmp	r2, r3
 800208e:	d902      	bls.n	8002096 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	689b      	ldr	r3, [r3, #8]
 8002094:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002096:	69fb      	ldr	r3, [r7, #28]
 8002098:	3303      	adds	r3, #3
 800209a:	089b      	lsrs	r3, r3, #2
 800209c:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	68d9      	ldr	r1, [r3, #12]
 80020a2:	683b      	ldr	r3, [r7, #0]
 80020a4:	b2da      	uxtb	r2, r3
 80020a6:	69fb      	ldr	r3, [r7, #28]
 80020a8:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80020ae:	9300      	str	r3, [sp, #0]
 80020b0:	4603      	mov	r3, r0
 80020b2:	6978      	ldr	r0, [r7, #20]
 80020b4:	f002 fa30 	bl	8004518 <USB_WritePacket>

    ep->xfer_buff  += len;
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	68da      	ldr	r2, [r3, #12]
 80020bc:	69fb      	ldr	r3, [r7, #28]
 80020be:	441a      	add	r2, r3
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	695a      	ldr	r2, [r3, #20]
 80020c8:	69fb      	ldr	r3, [r7, #28]
 80020ca:	441a      	add	r2, r3
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80020d0:	683b      	ldr	r3, [r7, #0]
 80020d2:	015a      	lsls	r2, r3, #5
 80020d4:	693b      	ldr	r3, [r7, #16]
 80020d6:	4413      	add	r3, r2
 80020d8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80020dc:	699b      	ldr	r3, [r3, #24]
 80020de:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80020e0:	69ba      	ldr	r2, [r7, #24]
 80020e2:	429a      	cmp	r2, r3
 80020e4:	d809      	bhi.n	80020fa <PCD_WriteEmptyTxFifo+0xde>
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	695a      	ldr	r2, [r3, #20]
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80020ee:	429a      	cmp	r2, r3
 80020f0:	d203      	bcs.n	80020fa <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	691b      	ldr	r3, [r3, #16]
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d1bf      	bne.n	800207a <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	691a      	ldr	r2, [r3, #16]
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	695b      	ldr	r3, [r3, #20]
 8002102:	429a      	cmp	r2, r3
 8002104:	d811      	bhi.n	800212a <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002106:	683b      	ldr	r3, [r7, #0]
 8002108:	f003 030f 	and.w	r3, r3, #15
 800210c:	2201      	movs	r2, #1
 800210e:	fa02 f303 	lsl.w	r3, r2, r3
 8002112:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002114:	693b      	ldr	r3, [r7, #16]
 8002116:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800211a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800211c:	68bb      	ldr	r3, [r7, #8]
 800211e:	43db      	mvns	r3, r3
 8002120:	6939      	ldr	r1, [r7, #16]
 8002122:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8002126:	4013      	ands	r3, r2
 8002128:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 800212a:	2300      	movs	r3, #0
}
 800212c:	4618      	mov	r0, r3
 800212e:	3720      	adds	r7, #32
 8002130:	46bd      	mov	sp, r7
 8002132:	bd80      	pop	{r7, pc}

08002134 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	b088      	sub	sp, #32
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
 800213c:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002144:	69fb      	ldr	r3, [r7, #28]
 8002146:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8002148:	69fb      	ldr	r3, [r7, #28]
 800214a:	333c      	adds	r3, #60	@ 0x3c
 800214c:	3304      	adds	r3, #4
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002152:	683b      	ldr	r3, [r7, #0]
 8002154:	015a      	lsls	r2, r3, #5
 8002156:	69bb      	ldr	r3, [r7, #24]
 8002158:	4413      	add	r3, r2
 800215a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800215e:	689b      	ldr	r3, [r3, #8]
 8002160:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	799b      	ldrb	r3, [r3, #6]
 8002166:	2b01      	cmp	r3, #1
 8002168:	d17b      	bne.n	8002262 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800216a:	693b      	ldr	r3, [r7, #16]
 800216c:	f003 0308 	and.w	r3, r3, #8
 8002170:	2b00      	cmp	r3, #0
 8002172:	d015      	beq.n	80021a0 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002174:	697b      	ldr	r3, [r7, #20]
 8002176:	4a61      	ldr	r2, [pc, #388]	@ (80022fc <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002178:	4293      	cmp	r3, r2
 800217a:	f240 80b9 	bls.w	80022f0 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800217e:	693b      	ldr	r3, [r7, #16]
 8002180:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002184:	2b00      	cmp	r3, #0
 8002186:	f000 80b3 	beq.w	80022f0 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800218a:	683b      	ldr	r3, [r7, #0]
 800218c:	015a      	lsls	r2, r3, #5
 800218e:	69bb      	ldr	r3, [r7, #24]
 8002190:	4413      	add	r3, r2
 8002192:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002196:	461a      	mov	r2, r3
 8002198:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800219c:	6093      	str	r3, [r2, #8]
 800219e:	e0a7      	b.n	80022f0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80021a0:	693b      	ldr	r3, [r7, #16]
 80021a2:	f003 0320 	and.w	r3, r3, #32
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d009      	beq.n	80021be <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80021aa:	683b      	ldr	r3, [r7, #0]
 80021ac:	015a      	lsls	r2, r3, #5
 80021ae:	69bb      	ldr	r3, [r7, #24]
 80021b0:	4413      	add	r3, r2
 80021b2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80021b6:	461a      	mov	r2, r3
 80021b8:	2320      	movs	r3, #32
 80021ba:	6093      	str	r3, [r2, #8]
 80021bc:	e098      	b.n	80022f0 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80021be:	693b      	ldr	r3, [r7, #16]
 80021c0:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	f040 8093 	bne.w	80022f0 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80021ca:	697b      	ldr	r3, [r7, #20]
 80021cc:	4a4b      	ldr	r2, [pc, #300]	@ (80022fc <PCD_EP_OutXfrComplete_int+0x1c8>)
 80021ce:	4293      	cmp	r3, r2
 80021d0:	d90f      	bls.n	80021f2 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80021d2:	693b      	ldr	r3, [r7, #16]
 80021d4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d00a      	beq.n	80021f2 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	015a      	lsls	r2, r3, #5
 80021e0:	69bb      	ldr	r3, [r7, #24]
 80021e2:	4413      	add	r3, r2
 80021e4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80021e8:	461a      	mov	r2, r3
 80021ea:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80021ee:	6093      	str	r3, [r2, #8]
 80021f0:	e07e      	b.n	80022f0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80021f2:	683a      	ldr	r2, [r7, #0]
 80021f4:	4613      	mov	r3, r2
 80021f6:	00db      	lsls	r3, r3, #3
 80021f8:	4413      	add	r3, r2
 80021fa:	009b      	lsls	r3, r3, #2
 80021fc:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002200:	687a      	ldr	r2, [r7, #4]
 8002202:	4413      	add	r3, r2
 8002204:	3304      	adds	r3, #4
 8002206:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	6a1a      	ldr	r2, [r3, #32]
 800220c:	683b      	ldr	r3, [r7, #0]
 800220e:	0159      	lsls	r1, r3, #5
 8002210:	69bb      	ldr	r3, [r7, #24]
 8002212:	440b      	add	r3, r1
 8002214:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002218:	691b      	ldr	r3, [r3, #16]
 800221a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800221e:	1ad2      	subs	r2, r2, r3
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8002224:	683b      	ldr	r3, [r7, #0]
 8002226:	2b00      	cmp	r3, #0
 8002228:	d114      	bne.n	8002254 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	691b      	ldr	r3, [r3, #16]
 800222e:	2b00      	cmp	r3, #0
 8002230:	d109      	bne.n	8002246 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	6818      	ldr	r0, [r3, #0]
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800223c:	461a      	mov	r2, r3
 800223e:	2101      	movs	r1, #1
 8002240:	f002 fc00 	bl	8004a44 <USB_EP0_OutStart>
 8002244:	e006      	b.n	8002254 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	68da      	ldr	r2, [r3, #12]
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	695b      	ldr	r3, [r3, #20]
 800224e:	441a      	add	r2, r3
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002254:	683b      	ldr	r3, [r7, #0]
 8002256:	b2db      	uxtb	r3, r3
 8002258:	4619      	mov	r1, r3
 800225a:	6878      	ldr	r0, [r7, #4]
 800225c:	f004 fd22 	bl	8006ca4 <HAL_PCD_DataOutStageCallback>
 8002260:	e046      	b.n	80022f0 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002262:	697b      	ldr	r3, [r7, #20]
 8002264:	4a26      	ldr	r2, [pc, #152]	@ (8002300 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8002266:	4293      	cmp	r3, r2
 8002268:	d124      	bne.n	80022b4 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800226a:	693b      	ldr	r3, [r7, #16]
 800226c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002270:	2b00      	cmp	r3, #0
 8002272:	d00a      	beq.n	800228a <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	015a      	lsls	r2, r3, #5
 8002278:	69bb      	ldr	r3, [r7, #24]
 800227a:	4413      	add	r3, r2
 800227c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002280:	461a      	mov	r2, r3
 8002282:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002286:	6093      	str	r3, [r2, #8]
 8002288:	e032      	b.n	80022f0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800228a:	693b      	ldr	r3, [r7, #16]
 800228c:	f003 0320 	and.w	r3, r3, #32
 8002290:	2b00      	cmp	r3, #0
 8002292:	d008      	beq.n	80022a6 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	015a      	lsls	r2, r3, #5
 8002298:	69bb      	ldr	r3, [r7, #24]
 800229a:	4413      	add	r3, r2
 800229c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80022a0:	461a      	mov	r2, r3
 80022a2:	2320      	movs	r3, #32
 80022a4:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80022a6:	683b      	ldr	r3, [r7, #0]
 80022a8:	b2db      	uxtb	r3, r3
 80022aa:	4619      	mov	r1, r3
 80022ac:	6878      	ldr	r0, [r7, #4]
 80022ae:	f004 fcf9 	bl	8006ca4 <HAL_PCD_DataOutStageCallback>
 80022b2:	e01d      	b.n	80022f0 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d114      	bne.n	80022e4 <PCD_EP_OutXfrComplete_int+0x1b0>
 80022ba:	6879      	ldr	r1, [r7, #4]
 80022bc:	683a      	ldr	r2, [r7, #0]
 80022be:	4613      	mov	r3, r2
 80022c0:	00db      	lsls	r3, r3, #3
 80022c2:	4413      	add	r3, r2
 80022c4:	009b      	lsls	r3, r3, #2
 80022c6:	440b      	add	r3, r1
 80022c8:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d108      	bne.n	80022e4 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	6818      	ldr	r0, [r3, #0]
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80022dc:	461a      	mov	r2, r3
 80022de:	2100      	movs	r1, #0
 80022e0:	f002 fbb0 	bl	8004a44 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	b2db      	uxtb	r3, r3
 80022e8:	4619      	mov	r1, r3
 80022ea:	6878      	ldr	r0, [r7, #4]
 80022ec:	f004 fcda 	bl	8006ca4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80022f0:	2300      	movs	r3, #0
}
 80022f2:	4618      	mov	r0, r3
 80022f4:	3720      	adds	r7, #32
 80022f6:	46bd      	mov	sp, r7
 80022f8:	bd80      	pop	{r7, pc}
 80022fa:	bf00      	nop
 80022fc:	4f54300a 	.word	0x4f54300a
 8002300:	4f54310a 	.word	0x4f54310a

08002304 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	b086      	sub	sp, #24
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
 800230c:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002314:	697b      	ldr	r3, [r7, #20]
 8002316:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8002318:	697b      	ldr	r3, [r7, #20]
 800231a:	333c      	adds	r3, #60	@ 0x3c
 800231c:	3304      	adds	r3, #4
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002322:	683b      	ldr	r3, [r7, #0]
 8002324:	015a      	lsls	r2, r3, #5
 8002326:	693b      	ldr	r3, [r7, #16]
 8002328:	4413      	add	r3, r2
 800232a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800232e:	689b      	ldr	r3, [r3, #8]
 8002330:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	4a15      	ldr	r2, [pc, #84]	@ (800238c <PCD_EP_OutSetupPacket_int+0x88>)
 8002336:	4293      	cmp	r3, r2
 8002338:	d90e      	bls.n	8002358 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800233a:	68bb      	ldr	r3, [r7, #8]
 800233c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002340:	2b00      	cmp	r3, #0
 8002342:	d009      	beq.n	8002358 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	015a      	lsls	r2, r3, #5
 8002348:	693b      	ldr	r3, [r7, #16]
 800234a:	4413      	add	r3, r2
 800234c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002350:	461a      	mov	r2, r3
 8002352:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002356:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002358:	6878      	ldr	r0, [r7, #4]
 800235a:	f004 fc91 	bl	8006c80 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	4a0a      	ldr	r2, [pc, #40]	@ (800238c <PCD_EP_OutSetupPacket_int+0x88>)
 8002362:	4293      	cmp	r3, r2
 8002364:	d90c      	bls.n	8002380 <PCD_EP_OutSetupPacket_int+0x7c>
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	799b      	ldrb	r3, [r3, #6]
 800236a:	2b01      	cmp	r3, #1
 800236c:	d108      	bne.n	8002380 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	6818      	ldr	r0, [r3, #0]
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002378:	461a      	mov	r2, r3
 800237a:	2101      	movs	r1, #1
 800237c:	f002 fb62 	bl	8004a44 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002380:	2300      	movs	r3, #0
}
 8002382:	4618      	mov	r0, r3
 8002384:	3718      	adds	r7, #24
 8002386:	46bd      	mov	sp, r7
 8002388:	bd80      	pop	{r7, pc}
 800238a:	bf00      	nop
 800238c:	4f54300a 	.word	0x4f54300a

08002390 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002390:	b480      	push	{r7}
 8002392:	b085      	sub	sp, #20
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
 8002398:	460b      	mov	r3, r1
 800239a:	70fb      	strb	r3, [r7, #3]
 800239c:	4613      	mov	r3, r2
 800239e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023a6:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80023a8:	78fb      	ldrb	r3, [r7, #3]
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d107      	bne.n	80023be <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80023ae:	883b      	ldrh	r3, [r7, #0]
 80023b0:	0419      	lsls	r1, r3, #16
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	68ba      	ldr	r2, [r7, #8]
 80023b8:	430a      	orrs	r2, r1
 80023ba:	629a      	str	r2, [r3, #40]	@ 0x28
 80023bc:	e028      	b.n	8002410 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023c4:	0c1b      	lsrs	r3, r3, #16
 80023c6:	68ba      	ldr	r2, [r7, #8]
 80023c8:	4413      	add	r3, r2
 80023ca:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80023cc:	2300      	movs	r3, #0
 80023ce:	73fb      	strb	r3, [r7, #15]
 80023d0:	e00d      	b.n	80023ee <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681a      	ldr	r2, [r3, #0]
 80023d6:	7bfb      	ldrb	r3, [r7, #15]
 80023d8:	3340      	adds	r3, #64	@ 0x40
 80023da:	009b      	lsls	r3, r3, #2
 80023dc:	4413      	add	r3, r2
 80023de:	685b      	ldr	r3, [r3, #4]
 80023e0:	0c1b      	lsrs	r3, r3, #16
 80023e2:	68ba      	ldr	r2, [r7, #8]
 80023e4:	4413      	add	r3, r2
 80023e6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80023e8:	7bfb      	ldrb	r3, [r7, #15]
 80023ea:	3301      	adds	r3, #1
 80023ec:	73fb      	strb	r3, [r7, #15]
 80023ee:	7bfa      	ldrb	r2, [r7, #15]
 80023f0:	78fb      	ldrb	r3, [r7, #3]
 80023f2:	3b01      	subs	r3, #1
 80023f4:	429a      	cmp	r2, r3
 80023f6:	d3ec      	bcc.n	80023d2 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80023f8:	883b      	ldrh	r3, [r7, #0]
 80023fa:	0418      	lsls	r0, r3, #16
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	6819      	ldr	r1, [r3, #0]
 8002400:	78fb      	ldrb	r3, [r7, #3]
 8002402:	3b01      	subs	r3, #1
 8002404:	68ba      	ldr	r2, [r7, #8]
 8002406:	4302      	orrs	r2, r0
 8002408:	3340      	adds	r3, #64	@ 0x40
 800240a:	009b      	lsls	r3, r3, #2
 800240c:	440b      	add	r3, r1
 800240e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002410:	2300      	movs	r3, #0
}
 8002412:	4618      	mov	r0, r3
 8002414:	3714      	adds	r7, #20
 8002416:	46bd      	mov	sp, r7
 8002418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241c:	4770      	bx	lr

0800241e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800241e:	b480      	push	{r7}
 8002420:	b083      	sub	sp, #12
 8002422:	af00      	add	r7, sp, #0
 8002424:	6078      	str	r0, [r7, #4]
 8002426:	460b      	mov	r3, r1
 8002428:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	887a      	ldrh	r2, [r7, #2]
 8002430:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8002432:	2300      	movs	r3, #0
}
 8002434:	4618      	mov	r0, r3
 8002436:	370c      	adds	r7, #12
 8002438:	46bd      	mov	sp, r7
 800243a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243e:	4770      	bx	lr

08002440 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8002440:	b480      	push	{r7}
 8002442:	b083      	sub	sp, #12
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
 8002448:	460b      	mov	r3, r1
 800244a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800244c:	bf00      	nop
 800244e:	370c      	adds	r7, #12
 8002450:	46bd      	mov	sp, r7
 8002452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002456:	4770      	bx	lr

08002458 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	b086      	sub	sp, #24
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	2b00      	cmp	r3, #0
 8002464:	d101      	bne.n	800246a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002466:	2301      	movs	r3, #1
 8002468:	e267      	b.n	800293a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f003 0301 	and.w	r3, r3, #1
 8002472:	2b00      	cmp	r3, #0
 8002474:	d075      	beq.n	8002562 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002476:	4b88      	ldr	r3, [pc, #544]	@ (8002698 <HAL_RCC_OscConfig+0x240>)
 8002478:	689b      	ldr	r3, [r3, #8]
 800247a:	f003 030c 	and.w	r3, r3, #12
 800247e:	2b04      	cmp	r3, #4
 8002480:	d00c      	beq.n	800249c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002482:	4b85      	ldr	r3, [pc, #532]	@ (8002698 <HAL_RCC_OscConfig+0x240>)
 8002484:	689b      	ldr	r3, [r3, #8]
 8002486:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800248a:	2b08      	cmp	r3, #8
 800248c:	d112      	bne.n	80024b4 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800248e:	4b82      	ldr	r3, [pc, #520]	@ (8002698 <HAL_RCC_OscConfig+0x240>)
 8002490:	685b      	ldr	r3, [r3, #4]
 8002492:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002496:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800249a:	d10b      	bne.n	80024b4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800249c:	4b7e      	ldr	r3, [pc, #504]	@ (8002698 <HAL_RCC_OscConfig+0x240>)
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d05b      	beq.n	8002560 <HAL_RCC_OscConfig+0x108>
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	685b      	ldr	r3, [r3, #4]
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d157      	bne.n	8002560 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80024b0:	2301      	movs	r3, #1
 80024b2:	e242      	b.n	800293a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	685b      	ldr	r3, [r3, #4]
 80024b8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80024bc:	d106      	bne.n	80024cc <HAL_RCC_OscConfig+0x74>
 80024be:	4b76      	ldr	r3, [pc, #472]	@ (8002698 <HAL_RCC_OscConfig+0x240>)
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	4a75      	ldr	r2, [pc, #468]	@ (8002698 <HAL_RCC_OscConfig+0x240>)
 80024c4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80024c8:	6013      	str	r3, [r2, #0]
 80024ca:	e01d      	b.n	8002508 <HAL_RCC_OscConfig+0xb0>
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	685b      	ldr	r3, [r3, #4]
 80024d0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80024d4:	d10c      	bne.n	80024f0 <HAL_RCC_OscConfig+0x98>
 80024d6:	4b70      	ldr	r3, [pc, #448]	@ (8002698 <HAL_RCC_OscConfig+0x240>)
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	4a6f      	ldr	r2, [pc, #444]	@ (8002698 <HAL_RCC_OscConfig+0x240>)
 80024dc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80024e0:	6013      	str	r3, [r2, #0]
 80024e2:	4b6d      	ldr	r3, [pc, #436]	@ (8002698 <HAL_RCC_OscConfig+0x240>)
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	4a6c      	ldr	r2, [pc, #432]	@ (8002698 <HAL_RCC_OscConfig+0x240>)
 80024e8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80024ec:	6013      	str	r3, [r2, #0]
 80024ee:	e00b      	b.n	8002508 <HAL_RCC_OscConfig+0xb0>
 80024f0:	4b69      	ldr	r3, [pc, #420]	@ (8002698 <HAL_RCC_OscConfig+0x240>)
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	4a68      	ldr	r2, [pc, #416]	@ (8002698 <HAL_RCC_OscConfig+0x240>)
 80024f6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80024fa:	6013      	str	r3, [r2, #0]
 80024fc:	4b66      	ldr	r3, [pc, #408]	@ (8002698 <HAL_RCC_OscConfig+0x240>)
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	4a65      	ldr	r2, [pc, #404]	@ (8002698 <HAL_RCC_OscConfig+0x240>)
 8002502:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002506:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	685b      	ldr	r3, [r3, #4]
 800250c:	2b00      	cmp	r3, #0
 800250e:	d013      	beq.n	8002538 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002510:	f7fe fa8a 	bl	8000a28 <HAL_GetTick>
 8002514:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002516:	e008      	b.n	800252a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002518:	f7fe fa86 	bl	8000a28 <HAL_GetTick>
 800251c:	4602      	mov	r2, r0
 800251e:	693b      	ldr	r3, [r7, #16]
 8002520:	1ad3      	subs	r3, r2, r3
 8002522:	2b64      	cmp	r3, #100	@ 0x64
 8002524:	d901      	bls.n	800252a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002526:	2303      	movs	r3, #3
 8002528:	e207      	b.n	800293a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800252a:	4b5b      	ldr	r3, [pc, #364]	@ (8002698 <HAL_RCC_OscConfig+0x240>)
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002532:	2b00      	cmp	r3, #0
 8002534:	d0f0      	beq.n	8002518 <HAL_RCC_OscConfig+0xc0>
 8002536:	e014      	b.n	8002562 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002538:	f7fe fa76 	bl	8000a28 <HAL_GetTick>
 800253c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800253e:	e008      	b.n	8002552 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002540:	f7fe fa72 	bl	8000a28 <HAL_GetTick>
 8002544:	4602      	mov	r2, r0
 8002546:	693b      	ldr	r3, [r7, #16]
 8002548:	1ad3      	subs	r3, r2, r3
 800254a:	2b64      	cmp	r3, #100	@ 0x64
 800254c:	d901      	bls.n	8002552 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800254e:	2303      	movs	r3, #3
 8002550:	e1f3      	b.n	800293a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002552:	4b51      	ldr	r3, [pc, #324]	@ (8002698 <HAL_RCC_OscConfig+0x240>)
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800255a:	2b00      	cmp	r3, #0
 800255c:	d1f0      	bne.n	8002540 <HAL_RCC_OscConfig+0xe8>
 800255e:	e000      	b.n	8002562 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002560:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f003 0302 	and.w	r3, r3, #2
 800256a:	2b00      	cmp	r3, #0
 800256c:	d063      	beq.n	8002636 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800256e:	4b4a      	ldr	r3, [pc, #296]	@ (8002698 <HAL_RCC_OscConfig+0x240>)
 8002570:	689b      	ldr	r3, [r3, #8]
 8002572:	f003 030c 	and.w	r3, r3, #12
 8002576:	2b00      	cmp	r3, #0
 8002578:	d00b      	beq.n	8002592 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800257a:	4b47      	ldr	r3, [pc, #284]	@ (8002698 <HAL_RCC_OscConfig+0x240>)
 800257c:	689b      	ldr	r3, [r3, #8]
 800257e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002582:	2b08      	cmp	r3, #8
 8002584:	d11c      	bne.n	80025c0 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002586:	4b44      	ldr	r3, [pc, #272]	@ (8002698 <HAL_RCC_OscConfig+0x240>)
 8002588:	685b      	ldr	r3, [r3, #4]
 800258a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800258e:	2b00      	cmp	r3, #0
 8002590:	d116      	bne.n	80025c0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002592:	4b41      	ldr	r3, [pc, #260]	@ (8002698 <HAL_RCC_OscConfig+0x240>)
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f003 0302 	and.w	r3, r3, #2
 800259a:	2b00      	cmp	r3, #0
 800259c:	d005      	beq.n	80025aa <HAL_RCC_OscConfig+0x152>
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	68db      	ldr	r3, [r3, #12]
 80025a2:	2b01      	cmp	r3, #1
 80025a4:	d001      	beq.n	80025aa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80025a6:	2301      	movs	r3, #1
 80025a8:	e1c7      	b.n	800293a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025aa:	4b3b      	ldr	r3, [pc, #236]	@ (8002698 <HAL_RCC_OscConfig+0x240>)
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	691b      	ldr	r3, [r3, #16]
 80025b6:	00db      	lsls	r3, r3, #3
 80025b8:	4937      	ldr	r1, [pc, #220]	@ (8002698 <HAL_RCC_OscConfig+0x240>)
 80025ba:	4313      	orrs	r3, r2
 80025bc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025be:	e03a      	b.n	8002636 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	68db      	ldr	r3, [r3, #12]
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d020      	beq.n	800260a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80025c8:	4b34      	ldr	r3, [pc, #208]	@ (800269c <HAL_RCC_OscConfig+0x244>)
 80025ca:	2201      	movs	r2, #1
 80025cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025ce:	f7fe fa2b 	bl	8000a28 <HAL_GetTick>
 80025d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025d4:	e008      	b.n	80025e8 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80025d6:	f7fe fa27 	bl	8000a28 <HAL_GetTick>
 80025da:	4602      	mov	r2, r0
 80025dc:	693b      	ldr	r3, [r7, #16]
 80025de:	1ad3      	subs	r3, r2, r3
 80025e0:	2b02      	cmp	r3, #2
 80025e2:	d901      	bls.n	80025e8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80025e4:	2303      	movs	r3, #3
 80025e6:	e1a8      	b.n	800293a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025e8:	4b2b      	ldr	r3, [pc, #172]	@ (8002698 <HAL_RCC_OscConfig+0x240>)
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f003 0302 	and.w	r3, r3, #2
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d0f0      	beq.n	80025d6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025f4:	4b28      	ldr	r3, [pc, #160]	@ (8002698 <HAL_RCC_OscConfig+0x240>)
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	691b      	ldr	r3, [r3, #16]
 8002600:	00db      	lsls	r3, r3, #3
 8002602:	4925      	ldr	r1, [pc, #148]	@ (8002698 <HAL_RCC_OscConfig+0x240>)
 8002604:	4313      	orrs	r3, r2
 8002606:	600b      	str	r3, [r1, #0]
 8002608:	e015      	b.n	8002636 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800260a:	4b24      	ldr	r3, [pc, #144]	@ (800269c <HAL_RCC_OscConfig+0x244>)
 800260c:	2200      	movs	r2, #0
 800260e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002610:	f7fe fa0a 	bl	8000a28 <HAL_GetTick>
 8002614:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002616:	e008      	b.n	800262a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002618:	f7fe fa06 	bl	8000a28 <HAL_GetTick>
 800261c:	4602      	mov	r2, r0
 800261e:	693b      	ldr	r3, [r7, #16]
 8002620:	1ad3      	subs	r3, r2, r3
 8002622:	2b02      	cmp	r3, #2
 8002624:	d901      	bls.n	800262a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002626:	2303      	movs	r3, #3
 8002628:	e187      	b.n	800293a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800262a:	4b1b      	ldr	r3, [pc, #108]	@ (8002698 <HAL_RCC_OscConfig+0x240>)
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f003 0302 	and.w	r3, r3, #2
 8002632:	2b00      	cmp	r3, #0
 8002634:	d1f0      	bne.n	8002618 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f003 0308 	and.w	r3, r3, #8
 800263e:	2b00      	cmp	r3, #0
 8002640:	d036      	beq.n	80026b0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	695b      	ldr	r3, [r3, #20]
 8002646:	2b00      	cmp	r3, #0
 8002648:	d016      	beq.n	8002678 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800264a:	4b15      	ldr	r3, [pc, #84]	@ (80026a0 <HAL_RCC_OscConfig+0x248>)
 800264c:	2201      	movs	r2, #1
 800264e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002650:	f7fe f9ea 	bl	8000a28 <HAL_GetTick>
 8002654:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002656:	e008      	b.n	800266a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002658:	f7fe f9e6 	bl	8000a28 <HAL_GetTick>
 800265c:	4602      	mov	r2, r0
 800265e:	693b      	ldr	r3, [r7, #16]
 8002660:	1ad3      	subs	r3, r2, r3
 8002662:	2b02      	cmp	r3, #2
 8002664:	d901      	bls.n	800266a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002666:	2303      	movs	r3, #3
 8002668:	e167      	b.n	800293a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800266a:	4b0b      	ldr	r3, [pc, #44]	@ (8002698 <HAL_RCC_OscConfig+0x240>)
 800266c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800266e:	f003 0302 	and.w	r3, r3, #2
 8002672:	2b00      	cmp	r3, #0
 8002674:	d0f0      	beq.n	8002658 <HAL_RCC_OscConfig+0x200>
 8002676:	e01b      	b.n	80026b0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002678:	4b09      	ldr	r3, [pc, #36]	@ (80026a0 <HAL_RCC_OscConfig+0x248>)
 800267a:	2200      	movs	r2, #0
 800267c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800267e:	f7fe f9d3 	bl	8000a28 <HAL_GetTick>
 8002682:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002684:	e00e      	b.n	80026a4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002686:	f7fe f9cf 	bl	8000a28 <HAL_GetTick>
 800268a:	4602      	mov	r2, r0
 800268c:	693b      	ldr	r3, [r7, #16]
 800268e:	1ad3      	subs	r3, r2, r3
 8002690:	2b02      	cmp	r3, #2
 8002692:	d907      	bls.n	80026a4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002694:	2303      	movs	r3, #3
 8002696:	e150      	b.n	800293a <HAL_RCC_OscConfig+0x4e2>
 8002698:	40023800 	.word	0x40023800
 800269c:	42470000 	.word	0x42470000
 80026a0:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026a4:	4b88      	ldr	r3, [pc, #544]	@ (80028c8 <HAL_RCC_OscConfig+0x470>)
 80026a6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80026a8:	f003 0302 	and.w	r3, r3, #2
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d1ea      	bne.n	8002686 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f003 0304 	and.w	r3, r3, #4
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	f000 8097 	beq.w	80027ec <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80026be:	2300      	movs	r3, #0
 80026c0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80026c2:	4b81      	ldr	r3, [pc, #516]	@ (80028c8 <HAL_RCC_OscConfig+0x470>)
 80026c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d10f      	bne.n	80026ee <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80026ce:	2300      	movs	r3, #0
 80026d0:	60bb      	str	r3, [r7, #8]
 80026d2:	4b7d      	ldr	r3, [pc, #500]	@ (80028c8 <HAL_RCC_OscConfig+0x470>)
 80026d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026d6:	4a7c      	ldr	r2, [pc, #496]	@ (80028c8 <HAL_RCC_OscConfig+0x470>)
 80026d8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80026dc:	6413      	str	r3, [r2, #64]	@ 0x40
 80026de:	4b7a      	ldr	r3, [pc, #488]	@ (80028c8 <HAL_RCC_OscConfig+0x470>)
 80026e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026e2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80026e6:	60bb      	str	r3, [r7, #8]
 80026e8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80026ea:	2301      	movs	r3, #1
 80026ec:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026ee:	4b77      	ldr	r3, [pc, #476]	@ (80028cc <HAL_RCC_OscConfig+0x474>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d118      	bne.n	800272c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80026fa:	4b74      	ldr	r3, [pc, #464]	@ (80028cc <HAL_RCC_OscConfig+0x474>)
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	4a73      	ldr	r2, [pc, #460]	@ (80028cc <HAL_RCC_OscConfig+0x474>)
 8002700:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002704:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002706:	f7fe f98f 	bl	8000a28 <HAL_GetTick>
 800270a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800270c:	e008      	b.n	8002720 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800270e:	f7fe f98b 	bl	8000a28 <HAL_GetTick>
 8002712:	4602      	mov	r2, r0
 8002714:	693b      	ldr	r3, [r7, #16]
 8002716:	1ad3      	subs	r3, r2, r3
 8002718:	2b02      	cmp	r3, #2
 800271a:	d901      	bls.n	8002720 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800271c:	2303      	movs	r3, #3
 800271e:	e10c      	b.n	800293a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002720:	4b6a      	ldr	r3, [pc, #424]	@ (80028cc <HAL_RCC_OscConfig+0x474>)
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002728:	2b00      	cmp	r3, #0
 800272a:	d0f0      	beq.n	800270e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	689b      	ldr	r3, [r3, #8]
 8002730:	2b01      	cmp	r3, #1
 8002732:	d106      	bne.n	8002742 <HAL_RCC_OscConfig+0x2ea>
 8002734:	4b64      	ldr	r3, [pc, #400]	@ (80028c8 <HAL_RCC_OscConfig+0x470>)
 8002736:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002738:	4a63      	ldr	r2, [pc, #396]	@ (80028c8 <HAL_RCC_OscConfig+0x470>)
 800273a:	f043 0301 	orr.w	r3, r3, #1
 800273e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002740:	e01c      	b.n	800277c <HAL_RCC_OscConfig+0x324>
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	689b      	ldr	r3, [r3, #8]
 8002746:	2b05      	cmp	r3, #5
 8002748:	d10c      	bne.n	8002764 <HAL_RCC_OscConfig+0x30c>
 800274a:	4b5f      	ldr	r3, [pc, #380]	@ (80028c8 <HAL_RCC_OscConfig+0x470>)
 800274c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800274e:	4a5e      	ldr	r2, [pc, #376]	@ (80028c8 <HAL_RCC_OscConfig+0x470>)
 8002750:	f043 0304 	orr.w	r3, r3, #4
 8002754:	6713      	str	r3, [r2, #112]	@ 0x70
 8002756:	4b5c      	ldr	r3, [pc, #368]	@ (80028c8 <HAL_RCC_OscConfig+0x470>)
 8002758:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800275a:	4a5b      	ldr	r2, [pc, #364]	@ (80028c8 <HAL_RCC_OscConfig+0x470>)
 800275c:	f043 0301 	orr.w	r3, r3, #1
 8002760:	6713      	str	r3, [r2, #112]	@ 0x70
 8002762:	e00b      	b.n	800277c <HAL_RCC_OscConfig+0x324>
 8002764:	4b58      	ldr	r3, [pc, #352]	@ (80028c8 <HAL_RCC_OscConfig+0x470>)
 8002766:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002768:	4a57      	ldr	r2, [pc, #348]	@ (80028c8 <HAL_RCC_OscConfig+0x470>)
 800276a:	f023 0301 	bic.w	r3, r3, #1
 800276e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002770:	4b55      	ldr	r3, [pc, #340]	@ (80028c8 <HAL_RCC_OscConfig+0x470>)
 8002772:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002774:	4a54      	ldr	r2, [pc, #336]	@ (80028c8 <HAL_RCC_OscConfig+0x470>)
 8002776:	f023 0304 	bic.w	r3, r3, #4
 800277a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	689b      	ldr	r3, [r3, #8]
 8002780:	2b00      	cmp	r3, #0
 8002782:	d015      	beq.n	80027b0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002784:	f7fe f950 	bl	8000a28 <HAL_GetTick>
 8002788:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800278a:	e00a      	b.n	80027a2 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800278c:	f7fe f94c 	bl	8000a28 <HAL_GetTick>
 8002790:	4602      	mov	r2, r0
 8002792:	693b      	ldr	r3, [r7, #16]
 8002794:	1ad3      	subs	r3, r2, r3
 8002796:	f241 3288 	movw	r2, #5000	@ 0x1388
 800279a:	4293      	cmp	r3, r2
 800279c:	d901      	bls.n	80027a2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800279e:	2303      	movs	r3, #3
 80027a0:	e0cb      	b.n	800293a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027a2:	4b49      	ldr	r3, [pc, #292]	@ (80028c8 <HAL_RCC_OscConfig+0x470>)
 80027a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027a6:	f003 0302 	and.w	r3, r3, #2
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d0ee      	beq.n	800278c <HAL_RCC_OscConfig+0x334>
 80027ae:	e014      	b.n	80027da <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027b0:	f7fe f93a 	bl	8000a28 <HAL_GetTick>
 80027b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027b6:	e00a      	b.n	80027ce <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027b8:	f7fe f936 	bl	8000a28 <HAL_GetTick>
 80027bc:	4602      	mov	r2, r0
 80027be:	693b      	ldr	r3, [r7, #16]
 80027c0:	1ad3      	subs	r3, r2, r3
 80027c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80027c6:	4293      	cmp	r3, r2
 80027c8:	d901      	bls.n	80027ce <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80027ca:	2303      	movs	r3, #3
 80027cc:	e0b5      	b.n	800293a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027ce:	4b3e      	ldr	r3, [pc, #248]	@ (80028c8 <HAL_RCC_OscConfig+0x470>)
 80027d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027d2:	f003 0302 	and.w	r3, r3, #2
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d1ee      	bne.n	80027b8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80027da:	7dfb      	ldrb	r3, [r7, #23]
 80027dc:	2b01      	cmp	r3, #1
 80027de:	d105      	bne.n	80027ec <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80027e0:	4b39      	ldr	r3, [pc, #228]	@ (80028c8 <HAL_RCC_OscConfig+0x470>)
 80027e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027e4:	4a38      	ldr	r2, [pc, #224]	@ (80028c8 <HAL_RCC_OscConfig+0x470>)
 80027e6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80027ea:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	699b      	ldr	r3, [r3, #24]
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	f000 80a1 	beq.w	8002938 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80027f6:	4b34      	ldr	r3, [pc, #208]	@ (80028c8 <HAL_RCC_OscConfig+0x470>)
 80027f8:	689b      	ldr	r3, [r3, #8]
 80027fa:	f003 030c 	and.w	r3, r3, #12
 80027fe:	2b08      	cmp	r3, #8
 8002800:	d05c      	beq.n	80028bc <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	699b      	ldr	r3, [r3, #24]
 8002806:	2b02      	cmp	r3, #2
 8002808:	d141      	bne.n	800288e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800280a:	4b31      	ldr	r3, [pc, #196]	@ (80028d0 <HAL_RCC_OscConfig+0x478>)
 800280c:	2200      	movs	r2, #0
 800280e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002810:	f7fe f90a 	bl	8000a28 <HAL_GetTick>
 8002814:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002816:	e008      	b.n	800282a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002818:	f7fe f906 	bl	8000a28 <HAL_GetTick>
 800281c:	4602      	mov	r2, r0
 800281e:	693b      	ldr	r3, [r7, #16]
 8002820:	1ad3      	subs	r3, r2, r3
 8002822:	2b02      	cmp	r3, #2
 8002824:	d901      	bls.n	800282a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002826:	2303      	movs	r3, #3
 8002828:	e087      	b.n	800293a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800282a:	4b27      	ldr	r3, [pc, #156]	@ (80028c8 <HAL_RCC_OscConfig+0x470>)
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002832:	2b00      	cmp	r3, #0
 8002834:	d1f0      	bne.n	8002818 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	69da      	ldr	r2, [r3, #28]
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	6a1b      	ldr	r3, [r3, #32]
 800283e:	431a      	orrs	r2, r3
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002844:	019b      	lsls	r3, r3, #6
 8002846:	431a      	orrs	r2, r3
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800284c:	085b      	lsrs	r3, r3, #1
 800284e:	3b01      	subs	r3, #1
 8002850:	041b      	lsls	r3, r3, #16
 8002852:	431a      	orrs	r2, r3
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002858:	061b      	lsls	r3, r3, #24
 800285a:	491b      	ldr	r1, [pc, #108]	@ (80028c8 <HAL_RCC_OscConfig+0x470>)
 800285c:	4313      	orrs	r3, r2
 800285e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002860:	4b1b      	ldr	r3, [pc, #108]	@ (80028d0 <HAL_RCC_OscConfig+0x478>)
 8002862:	2201      	movs	r2, #1
 8002864:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002866:	f7fe f8df 	bl	8000a28 <HAL_GetTick>
 800286a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800286c:	e008      	b.n	8002880 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800286e:	f7fe f8db 	bl	8000a28 <HAL_GetTick>
 8002872:	4602      	mov	r2, r0
 8002874:	693b      	ldr	r3, [r7, #16]
 8002876:	1ad3      	subs	r3, r2, r3
 8002878:	2b02      	cmp	r3, #2
 800287a:	d901      	bls.n	8002880 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800287c:	2303      	movs	r3, #3
 800287e:	e05c      	b.n	800293a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002880:	4b11      	ldr	r3, [pc, #68]	@ (80028c8 <HAL_RCC_OscConfig+0x470>)
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002888:	2b00      	cmp	r3, #0
 800288a:	d0f0      	beq.n	800286e <HAL_RCC_OscConfig+0x416>
 800288c:	e054      	b.n	8002938 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800288e:	4b10      	ldr	r3, [pc, #64]	@ (80028d0 <HAL_RCC_OscConfig+0x478>)
 8002890:	2200      	movs	r2, #0
 8002892:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002894:	f7fe f8c8 	bl	8000a28 <HAL_GetTick>
 8002898:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800289a:	e008      	b.n	80028ae <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800289c:	f7fe f8c4 	bl	8000a28 <HAL_GetTick>
 80028a0:	4602      	mov	r2, r0
 80028a2:	693b      	ldr	r3, [r7, #16]
 80028a4:	1ad3      	subs	r3, r2, r3
 80028a6:	2b02      	cmp	r3, #2
 80028a8:	d901      	bls.n	80028ae <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80028aa:	2303      	movs	r3, #3
 80028ac:	e045      	b.n	800293a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028ae:	4b06      	ldr	r3, [pc, #24]	@ (80028c8 <HAL_RCC_OscConfig+0x470>)
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d1f0      	bne.n	800289c <HAL_RCC_OscConfig+0x444>
 80028ba:	e03d      	b.n	8002938 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	699b      	ldr	r3, [r3, #24]
 80028c0:	2b01      	cmp	r3, #1
 80028c2:	d107      	bne.n	80028d4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80028c4:	2301      	movs	r3, #1
 80028c6:	e038      	b.n	800293a <HAL_RCC_OscConfig+0x4e2>
 80028c8:	40023800 	.word	0x40023800
 80028cc:	40007000 	.word	0x40007000
 80028d0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80028d4:	4b1b      	ldr	r3, [pc, #108]	@ (8002944 <HAL_RCC_OscConfig+0x4ec>)
 80028d6:	685b      	ldr	r3, [r3, #4]
 80028d8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	699b      	ldr	r3, [r3, #24]
 80028de:	2b01      	cmp	r3, #1
 80028e0:	d028      	beq.n	8002934 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80028ec:	429a      	cmp	r2, r3
 80028ee:	d121      	bne.n	8002934 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028fa:	429a      	cmp	r2, r3
 80028fc:	d11a      	bne.n	8002934 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80028fe:	68fa      	ldr	r2, [r7, #12]
 8002900:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002904:	4013      	ands	r3, r2
 8002906:	687a      	ldr	r2, [r7, #4]
 8002908:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800290a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800290c:	4293      	cmp	r3, r2
 800290e:	d111      	bne.n	8002934 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800291a:	085b      	lsrs	r3, r3, #1
 800291c:	3b01      	subs	r3, #1
 800291e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002920:	429a      	cmp	r2, r3
 8002922:	d107      	bne.n	8002934 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800292e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002930:	429a      	cmp	r2, r3
 8002932:	d001      	beq.n	8002938 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002934:	2301      	movs	r3, #1
 8002936:	e000      	b.n	800293a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002938:	2300      	movs	r3, #0
}
 800293a:	4618      	mov	r0, r3
 800293c:	3718      	adds	r7, #24
 800293e:	46bd      	mov	sp, r7
 8002940:	bd80      	pop	{r7, pc}
 8002942:	bf00      	nop
 8002944:	40023800 	.word	0x40023800

08002948 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002948:	b580      	push	{r7, lr}
 800294a:	b084      	sub	sp, #16
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
 8002950:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	2b00      	cmp	r3, #0
 8002956:	d101      	bne.n	800295c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002958:	2301      	movs	r3, #1
 800295a:	e0cc      	b.n	8002af6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800295c:	4b68      	ldr	r3, [pc, #416]	@ (8002b00 <HAL_RCC_ClockConfig+0x1b8>)
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f003 0307 	and.w	r3, r3, #7
 8002964:	683a      	ldr	r2, [r7, #0]
 8002966:	429a      	cmp	r2, r3
 8002968:	d90c      	bls.n	8002984 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800296a:	4b65      	ldr	r3, [pc, #404]	@ (8002b00 <HAL_RCC_ClockConfig+0x1b8>)
 800296c:	683a      	ldr	r2, [r7, #0]
 800296e:	b2d2      	uxtb	r2, r2
 8002970:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002972:	4b63      	ldr	r3, [pc, #396]	@ (8002b00 <HAL_RCC_ClockConfig+0x1b8>)
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f003 0307 	and.w	r3, r3, #7
 800297a:	683a      	ldr	r2, [r7, #0]
 800297c:	429a      	cmp	r2, r3
 800297e:	d001      	beq.n	8002984 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002980:	2301      	movs	r3, #1
 8002982:	e0b8      	b.n	8002af6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f003 0302 	and.w	r3, r3, #2
 800298c:	2b00      	cmp	r3, #0
 800298e:	d020      	beq.n	80029d2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f003 0304 	and.w	r3, r3, #4
 8002998:	2b00      	cmp	r3, #0
 800299a:	d005      	beq.n	80029a8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800299c:	4b59      	ldr	r3, [pc, #356]	@ (8002b04 <HAL_RCC_ClockConfig+0x1bc>)
 800299e:	689b      	ldr	r3, [r3, #8]
 80029a0:	4a58      	ldr	r2, [pc, #352]	@ (8002b04 <HAL_RCC_ClockConfig+0x1bc>)
 80029a2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80029a6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f003 0308 	and.w	r3, r3, #8
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d005      	beq.n	80029c0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80029b4:	4b53      	ldr	r3, [pc, #332]	@ (8002b04 <HAL_RCC_ClockConfig+0x1bc>)
 80029b6:	689b      	ldr	r3, [r3, #8]
 80029b8:	4a52      	ldr	r2, [pc, #328]	@ (8002b04 <HAL_RCC_ClockConfig+0x1bc>)
 80029ba:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80029be:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80029c0:	4b50      	ldr	r3, [pc, #320]	@ (8002b04 <HAL_RCC_ClockConfig+0x1bc>)
 80029c2:	689b      	ldr	r3, [r3, #8]
 80029c4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	689b      	ldr	r3, [r3, #8]
 80029cc:	494d      	ldr	r1, [pc, #308]	@ (8002b04 <HAL_RCC_ClockConfig+0x1bc>)
 80029ce:	4313      	orrs	r3, r2
 80029d0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f003 0301 	and.w	r3, r3, #1
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d044      	beq.n	8002a68 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	685b      	ldr	r3, [r3, #4]
 80029e2:	2b01      	cmp	r3, #1
 80029e4:	d107      	bne.n	80029f6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029e6:	4b47      	ldr	r3, [pc, #284]	@ (8002b04 <HAL_RCC_ClockConfig+0x1bc>)
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d119      	bne.n	8002a26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029f2:	2301      	movs	r3, #1
 80029f4:	e07f      	b.n	8002af6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	685b      	ldr	r3, [r3, #4]
 80029fa:	2b02      	cmp	r3, #2
 80029fc:	d003      	beq.n	8002a06 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002a02:	2b03      	cmp	r3, #3
 8002a04:	d107      	bne.n	8002a16 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a06:	4b3f      	ldr	r3, [pc, #252]	@ (8002b04 <HAL_RCC_ClockConfig+0x1bc>)
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d109      	bne.n	8002a26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a12:	2301      	movs	r3, #1
 8002a14:	e06f      	b.n	8002af6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a16:	4b3b      	ldr	r3, [pc, #236]	@ (8002b04 <HAL_RCC_ClockConfig+0x1bc>)
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f003 0302 	and.w	r3, r3, #2
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d101      	bne.n	8002a26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a22:	2301      	movs	r3, #1
 8002a24:	e067      	b.n	8002af6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002a26:	4b37      	ldr	r3, [pc, #220]	@ (8002b04 <HAL_RCC_ClockConfig+0x1bc>)
 8002a28:	689b      	ldr	r3, [r3, #8]
 8002a2a:	f023 0203 	bic.w	r2, r3, #3
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	685b      	ldr	r3, [r3, #4]
 8002a32:	4934      	ldr	r1, [pc, #208]	@ (8002b04 <HAL_RCC_ClockConfig+0x1bc>)
 8002a34:	4313      	orrs	r3, r2
 8002a36:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002a38:	f7fd fff6 	bl	8000a28 <HAL_GetTick>
 8002a3c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a3e:	e00a      	b.n	8002a56 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a40:	f7fd fff2 	bl	8000a28 <HAL_GetTick>
 8002a44:	4602      	mov	r2, r0
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	1ad3      	subs	r3, r2, r3
 8002a4a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a4e:	4293      	cmp	r3, r2
 8002a50:	d901      	bls.n	8002a56 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002a52:	2303      	movs	r3, #3
 8002a54:	e04f      	b.n	8002af6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a56:	4b2b      	ldr	r3, [pc, #172]	@ (8002b04 <HAL_RCC_ClockConfig+0x1bc>)
 8002a58:	689b      	ldr	r3, [r3, #8]
 8002a5a:	f003 020c 	and.w	r2, r3, #12
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	685b      	ldr	r3, [r3, #4]
 8002a62:	009b      	lsls	r3, r3, #2
 8002a64:	429a      	cmp	r2, r3
 8002a66:	d1eb      	bne.n	8002a40 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002a68:	4b25      	ldr	r3, [pc, #148]	@ (8002b00 <HAL_RCC_ClockConfig+0x1b8>)
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f003 0307 	and.w	r3, r3, #7
 8002a70:	683a      	ldr	r2, [r7, #0]
 8002a72:	429a      	cmp	r2, r3
 8002a74:	d20c      	bcs.n	8002a90 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a76:	4b22      	ldr	r3, [pc, #136]	@ (8002b00 <HAL_RCC_ClockConfig+0x1b8>)
 8002a78:	683a      	ldr	r2, [r7, #0]
 8002a7a:	b2d2      	uxtb	r2, r2
 8002a7c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a7e:	4b20      	ldr	r3, [pc, #128]	@ (8002b00 <HAL_RCC_ClockConfig+0x1b8>)
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f003 0307 	and.w	r3, r3, #7
 8002a86:	683a      	ldr	r2, [r7, #0]
 8002a88:	429a      	cmp	r2, r3
 8002a8a:	d001      	beq.n	8002a90 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002a8c:	2301      	movs	r3, #1
 8002a8e:	e032      	b.n	8002af6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f003 0304 	and.w	r3, r3, #4
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d008      	beq.n	8002aae <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a9c:	4b19      	ldr	r3, [pc, #100]	@ (8002b04 <HAL_RCC_ClockConfig+0x1bc>)
 8002a9e:	689b      	ldr	r3, [r3, #8]
 8002aa0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	68db      	ldr	r3, [r3, #12]
 8002aa8:	4916      	ldr	r1, [pc, #88]	@ (8002b04 <HAL_RCC_ClockConfig+0x1bc>)
 8002aaa:	4313      	orrs	r3, r2
 8002aac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f003 0308 	and.w	r3, r3, #8
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d009      	beq.n	8002ace <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002aba:	4b12      	ldr	r3, [pc, #72]	@ (8002b04 <HAL_RCC_ClockConfig+0x1bc>)
 8002abc:	689b      	ldr	r3, [r3, #8]
 8002abe:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	691b      	ldr	r3, [r3, #16]
 8002ac6:	00db      	lsls	r3, r3, #3
 8002ac8:	490e      	ldr	r1, [pc, #56]	@ (8002b04 <HAL_RCC_ClockConfig+0x1bc>)
 8002aca:	4313      	orrs	r3, r2
 8002acc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002ace:	f000 f821 	bl	8002b14 <HAL_RCC_GetSysClockFreq>
 8002ad2:	4602      	mov	r2, r0
 8002ad4:	4b0b      	ldr	r3, [pc, #44]	@ (8002b04 <HAL_RCC_ClockConfig+0x1bc>)
 8002ad6:	689b      	ldr	r3, [r3, #8]
 8002ad8:	091b      	lsrs	r3, r3, #4
 8002ada:	f003 030f 	and.w	r3, r3, #15
 8002ade:	490a      	ldr	r1, [pc, #40]	@ (8002b08 <HAL_RCC_ClockConfig+0x1c0>)
 8002ae0:	5ccb      	ldrb	r3, [r1, r3]
 8002ae2:	fa22 f303 	lsr.w	r3, r2, r3
 8002ae6:	4a09      	ldr	r2, [pc, #36]	@ (8002b0c <HAL_RCC_ClockConfig+0x1c4>)
 8002ae8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002aea:	4b09      	ldr	r3, [pc, #36]	@ (8002b10 <HAL_RCC_ClockConfig+0x1c8>)
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	4618      	mov	r0, r3
 8002af0:	f7fd ff56 	bl	80009a0 <HAL_InitTick>

  return HAL_OK;
 8002af4:	2300      	movs	r3, #0
}
 8002af6:	4618      	mov	r0, r3
 8002af8:	3710      	adds	r7, #16
 8002afa:	46bd      	mov	sp, r7
 8002afc:	bd80      	pop	{r7, pc}
 8002afe:	bf00      	nop
 8002b00:	40023c00 	.word	0x40023c00
 8002b04:	40023800 	.word	0x40023800
 8002b08:	080072ac 	.word	0x080072ac
 8002b0c:	20000000 	.word	0x20000000
 8002b10:	20000004 	.word	0x20000004

08002b14 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b14:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002b18:	b094      	sub	sp, #80	@ 0x50
 8002b1a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002b1c:	2300      	movs	r3, #0
 8002b1e:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8002b20:	2300      	movs	r3, #0
 8002b22:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8002b24:	2300      	movs	r3, #0
 8002b26:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8002b28:	2300      	movs	r3, #0
 8002b2a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002b2c:	4b79      	ldr	r3, [pc, #484]	@ (8002d14 <HAL_RCC_GetSysClockFreq+0x200>)
 8002b2e:	689b      	ldr	r3, [r3, #8]
 8002b30:	f003 030c 	and.w	r3, r3, #12
 8002b34:	2b08      	cmp	r3, #8
 8002b36:	d00d      	beq.n	8002b54 <HAL_RCC_GetSysClockFreq+0x40>
 8002b38:	2b08      	cmp	r3, #8
 8002b3a:	f200 80e1 	bhi.w	8002d00 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d002      	beq.n	8002b48 <HAL_RCC_GetSysClockFreq+0x34>
 8002b42:	2b04      	cmp	r3, #4
 8002b44:	d003      	beq.n	8002b4e <HAL_RCC_GetSysClockFreq+0x3a>
 8002b46:	e0db      	b.n	8002d00 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002b48:	4b73      	ldr	r3, [pc, #460]	@ (8002d18 <HAL_RCC_GetSysClockFreq+0x204>)
 8002b4a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002b4c:	e0db      	b.n	8002d06 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002b4e:	4b73      	ldr	r3, [pc, #460]	@ (8002d1c <HAL_RCC_GetSysClockFreq+0x208>)
 8002b50:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002b52:	e0d8      	b.n	8002d06 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002b54:	4b6f      	ldr	r3, [pc, #444]	@ (8002d14 <HAL_RCC_GetSysClockFreq+0x200>)
 8002b56:	685b      	ldr	r3, [r3, #4]
 8002b58:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002b5c:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002b5e:	4b6d      	ldr	r3, [pc, #436]	@ (8002d14 <HAL_RCC_GetSysClockFreq+0x200>)
 8002b60:	685b      	ldr	r3, [r3, #4]
 8002b62:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d063      	beq.n	8002c32 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b6a:	4b6a      	ldr	r3, [pc, #424]	@ (8002d14 <HAL_RCC_GetSysClockFreq+0x200>)
 8002b6c:	685b      	ldr	r3, [r3, #4]
 8002b6e:	099b      	lsrs	r3, r3, #6
 8002b70:	2200      	movs	r2, #0
 8002b72:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002b74:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002b76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002b78:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b7c:	633b      	str	r3, [r7, #48]	@ 0x30
 8002b7e:	2300      	movs	r3, #0
 8002b80:	637b      	str	r3, [r7, #52]	@ 0x34
 8002b82:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002b86:	4622      	mov	r2, r4
 8002b88:	462b      	mov	r3, r5
 8002b8a:	f04f 0000 	mov.w	r0, #0
 8002b8e:	f04f 0100 	mov.w	r1, #0
 8002b92:	0159      	lsls	r1, r3, #5
 8002b94:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002b98:	0150      	lsls	r0, r2, #5
 8002b9a:	4602      	mov	r2, r0
 8002b9c:	460b      	mov	r3, r1
 8002b9e:	4621      	mov	r1, r4
 8002ba0:	1a51      	subs	r1, r2, r1
 8002ba2:	6139      	str	r1, [r7, #16]
 8002ba4:	4629      	mov	r1, r5
 8002ba6:	eb63 0301 	sbc.w	r3, r3, r1
 8002baa:	617b      	str	r3, [r7, #20]
 8002bac:	f04f 0200 	mov.w	r2, #0
 8002bb0:	f04f 0300 	mov.w	r3, #0
 8002bb4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002bb8:	4659      	mov	r1, fp
 8002bba:	018b      	lsls	r3, r1, #6
 8002bbc:	4651      	mov	r1, sl
 8002bbe:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002bc2:	4651      	mov	r1, sl
 8002bc4:	018a      	lsls	r2, r1, #6
 8002bc6:	4651      	mov	r1, sl
 8002bc8:	ebb2 0801 	subs.w	r8, r2, r1
 8002bcc:	4659      	mov	r1, fp
 8002bce:	eb63 0901 	sbc.w	r9, r3, r1
 8002bd2:	f04f 0200 	mov.w	r2, #0
 8002bd6:	f04f 0300 	mov.w	r3, #0
 8002bda:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002bde:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002be2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002be6:	4690      	mov	r8, r2
 8002be8:	4699      	mov	r9, r3
 8002bea:	4623      	mov	r3, r4
 8002bec:	eb18 0303 	adds.w	r3, r8, r3
 8002bf0:	60bb      	str	r3, [r7, #8]
 8002bf2:	462b      	mov	r3, r5
 8002bf4:	eb49 0303 	adc.w	r3, r9, r3
 8002bf8:	60fb      	str	r3, [r7, #12]
 8002bfa:	f04f 0200 	mov.w	r2, #0
 8002bfe:	f04f 0300 	mov.w	r3, #0
 8002c02:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002c06:	4629      	mov	r1, r5
 8002c08:	024b      	lsls	r3, r1, #9
 8002c0a:	4621      	mov	r1, r4
 8002c0c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002c10:	4621      	mov	r1, r4
 8002c12:	024a      	lsls	r2, r1, #9
 8002c14:	4610      	mov	r0, r2
 8002c16:	4619      	mov	r1, r3
 8002c18:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002c1e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002c20:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002c24:	f7fd fad0 	bl	80001c8 <__aeabi_uldivmod>
 8002c28:	4602      	mov	r2, r0
 8002c2a:	460b      	mov	r3, r1
 8002c2c:	4613      	mov	r3, r2
 8002c2e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002c30:	e058      	b.n	8002ce4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c32:	4b38      	ldr	r3, [pc, #224]	@ (8002d14 <HAL_RCC_GetSysClockFreq+0x200>)
 8002c34:	685b      	ldr	r3, [r3, #4]
 8002c36:	099b      	lsrs	r3, r3, #6
 8002c38:	2200      	movs	r2, #0
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	4611      	mov	r1, r2
 8002c3e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002c42:	623b      	str	r3, [r7, #32]
 8002c44:	2300      	movs	r3, #0
 8002c46:	627b      	str	r3, [r7, #36]	@ 0x24
 8002c48:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002c4c:	4642      	mov	r2, r8
 8002c4e:	464b      	mov	r3, r9
 8002c50:	f04f 0000 	mov.w	r0, #0
 8002c54:	f04f 0100 	mov.w	r1, #0
 8002c58:	0159      	lsls	r1, r3, #5
 8002c5a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002c5e:	0150      	lsls	r0, r2, #5
 8002c60:	4602      	mov	r2, r0
 8002c62:	460b      	mov	r3, r1
 8002c64:	4641      	mov	r1, r8
 8002c66:	ebb2 0a01 	subs.w	sl, r2, r1
 8002c6a:	4649      	mov	r1, r9
 8002c6c:	eb63 0b01 	sbc.w	fp, r3, r1
 8002c70:	f04f 0200 	mov.w	r2, #0
 8002c74:	f04f 0300 	mov.w	r3, #0
 8002c78:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002c7c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002c80:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002c84:	ebb2 040a 	subs.w	r4, r2, sl
 8002c88:	eb63 050b 	sbc.w	r5, r3, fp
 8002c8c:	f04f 0200 	mov.w	r2, #0
 8002c90:	f04f 0300 	mov.w	r3, #0
 8002c94:	00eb      	lsls	r3, r5, #3
 8002c96:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002c9a:	00e2      	lsls	r2, r4, #3
 8002c9c:	4614      	mov	r4, r2
 8002c9e:	461d      	mov	r5, r3
 8002ca0:	4643      	mov	r3, r8
 8002ca2:	18e3      	adds	r3, r4, r3
 8002ca4:	603b      	str	r3, [r7, #0]
 8002ca6:	464b      	mov	r3, r9
 8002ca8:	eb45 0303 	adc.w	r3, r5, r3
 8002cac:	607b      	str	r3, [r7, #4]
 8002cae:	f04f 0200 	mov.w	r2, #0
 8002cb2:	f04f 0300 	mov.w	r3, #0
 8002cb6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002cba:	4629      	mov	r1, r5
 8002cbc:	028b      	lsls	r3, r1, #10
 8002cbe:	4621      	mov	r1, r4
 8002cc0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002cc4:	4621      	mov	r1, r4
 8002cc6:	028a      	lsls	r2, r1, #10
 8002cc8:	4610      	mov	r0, r2
 8002cca:	4619      	mov	r1, r3
 8002ccc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002cce:	2200      	movs	r2, #0
 8002cd0:	61bb      	str	r3, [r7, #24]
 8002cd2:	61fa      	str	r2, [r7, #28]
 8002cd4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002cd8:	f7fd fa76 	bl	80001c8 <__aeabi_uldivmod>
 8002cdc:	4602      	mov	r2, r0
 8002cde:	460b      	mov	r3, r1
 8002ce0:	4613      	mov	r3, r2
 8002ce2:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002ce4:	4b0b      	ldr	r3, [pc, #44]	@ (8002d14 <HAL_RCC_GetSysClockFreq+0x200>)
 8002ce6:	685b      	ldr	r3, [r3, #4]
 8002ce8:	0c1b      	lsrs	r3, r3, #16
 8002cea:	f003 0303 	and.w	r3, r3, #3
 8002cee:	3301      	adds	r3, #1
 8002cf0:	005b      	lsls	r3, r3, #1
 8002cf2:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8002cf4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002cf6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002cf8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cfc:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002cfe:	e002      	b.n	8002d06 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002d00:	4b05      	ldr	r3, [pc, #20]	@ (8002d18 <HAL_RCC_GetSysClockFreq+0x204>)
 8002d02:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002d04:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002d06:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8002d08:	4618      	mov	r0, r3
 8002d0a:	3750      	adds	r7, #80	@ 0x50
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002d12:	bf00      	nop
 8002d14:	40023800 	.word	0x40023800
 8002d18:	00f42400 	.word	0x00f42400
 8002d1c:	007a1200 	.word	0x007a1200

08002d20 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d20:	b480      	push	{r7}
 8002d22:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002d24:	4b03      	ldr	r3, [pc, #12]	@ (8002d34 <HAL_RCC_GetHCLKFreq+0x14>)
 8002d26:	681b      	ldr	r3, [r3, #0]
}
 8002d28:	4618      	mov	r0, r3
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d30:	4770      	bx	lr
 8002d32:	bf00      	nop
 8002d34:	20000000 	.word	0x20000000

08002d38 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	b086      	sub	sp, #24
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]
 8002d40:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d101      	bne.n	8002d4c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8002d48:	2301      	movs	r3, #1
 8002d4a:	e097      	b.n	8002e7c <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002d52:	b2db      	uxtb	r3, r3
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d106      	bne.n	8002d66 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8002d60:	6878      	ldr	r0, [r7, #4]
 8002d62:	f7fd fd2b 	bl	80007bc <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	2202      	movs	r2, #2
 8002d6a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	689b      	ldr	r3, [r3, #8]
 8002d74:	687a      	ldr	r2, [r7, #4]
 8002d76:	6812      	ldr	r2, [r2, #0]
 8002d78:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002d7c:	f023 0307 	bic.w	r3, r3, #7
 8002d80:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681a      	ldr	r2, [r3, #0]
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	3304      	adds	r3, #4
 8002d8a:	4619      	mov	r1, r3
 8002d8c:	4610      	mov	r0, r2
 8002d8e:	f000 fa3f 	bl	8003210 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	689b      	ldr	r3, [r3, #8]
 8002d98:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	699b      	ldr	r3, [r3, #24]
 8002da0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	6a1b      	ldr	r3, [r3, #32]
 8002da8:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8002daa:	683b      	ldr	r3, [r7, #0]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	697a      	ldr	r2, [r7, #20]
 8002db0:	4313      	orrs	r3, r2
 8002db2:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8002db4:	693b      	ldr	r3, [r7, #16]
 8002db6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002dba:	f023 0303 	bic.w	r3, r3, #3
 8002dbe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8002dc0:	683b      	ldr	r3, [r7, #0]
 8002dc2:	689a      	ldr	r2, [r3, #8]
 8002dc4:	683b      	ldr	r3, [r7, #0]
 8002dc6:	699b      	ldr	r3, [r3, #24]
 8002dc8:	021b      	lsls	r3, r3, #8
 8002dca:	4313      	orrs	r3, r2
 8002dcc:	693a      	ldr	r2, [r7, #16]
 8002dce:	4313      	orrs	r3, r2
 8002dd0:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8002dd2:	693b      	ldr	r3, [r7, #16]
 8002dd4:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8002dd8:	f023 030c 	bic.w	r3, r3, #12
 8002ddc:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8002dde:	693b      	ldr	r3, [r7, #16]
 8002de0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002de4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002de8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8002dea:	683b      	ldr	r3, [r7, #0]
 8002dec:	68da      	ldr	r2, [r3, #12]
 8002dee:	683b      	ldr	r3, [r7, #0]
 8002df0:	69db      	ldr	r3, [r3, #28]
 8002df2:	021b      	lsls	r3, r3, #8
 8002df4:	4313      	orrs	r3, r2
 8002df6:	693a      	ldr	r2, [r7, #16]
 8002df8:	4313      	orrs	r3, r2
 8002dfa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8002dfc:	683b      	ldr	r3, [r7, #0]
 8002dfe:	691b      	ldr	r3, [r3, #16]
 8002e00:	011a      	lsls	r2, r3, #4
 8002e02:	683b      	ldr	r3, [r7, #0]
 8002e04:	6a1b      	ldr	r3, [r3, #32]
 8002e06:	031b      	lsls	r3, r3, #12
 8002e08:	4313      	orrs	r3, r2
 8002e0a:	693a      	ldr	r2, [r7, #16]
 8002e0c:	4313      	orrs	r3, r2
 8002e0e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8002e16:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8002e1e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8002e20:	683b      	ldr	r3, [r7, #0]
 8002e22:	685a      	ldr	r2, [r3, #4]
 8002e24:	683b      	ldr	r3, [r7, #0]
 8002e26:	695b      	ldr	r3, [r3, #20]
 8002e28:	011b      	lsls	r3, r3, #4
 8002e2a:	4313      	orrs	r3, r2
 8002e2c:	68fa      	ldr	r2, [r7, #12]
 8002e2e:	4313      	orrs	r3, r2
 8002e30:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	697a      	ldr	r2, [r7, #20]
 8002e38:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	693a      	ldr	r2, [r7, #16]
 8002e40:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	68fa      	ldr	r2, [r7, #12]
 8002e48:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	2201      	movs	r2, #1
 8002e4e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	2201      	movs	r2, #1
 8002e56:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	2201      	movs	r2, #1
 8002e5e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	2201      	movs	r2, #1
 8002e66:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	2201      	movs	r2, #1
 8002e6e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	2201      	movs	r2, #1
 8002e76:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002e7a:	2300      	movs	r3, #0
}
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	3718      	adds	r7, #24
 8002e80:	46bd      	mov	sp, r7
 8002e82:	bd80      	pop	{r7, pc}

08002e84 <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	b084      	sub	sp, #16
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
 8002e8c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002e94:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002e9c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002ea4:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8002eac:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8002eae:	683b      	ldr	r3, [r7, #0]
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d110      	bne.n	8002ed6 <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8002eb4:	7bfb      	ldrb	r3, [r7, #15]
 8002eb6:	2b01      	cmp	r3, #1
 8002eb8:	d102      	bne.n	8002ec0 <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8002eba:	7b7b      	ldrb	r3, [r7, #13]
 8002ebc:	2b01      	cmp	r3, #1
 8002ebe:	d001      	beq.n	8002ec4 <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 8002ec0:	2301      	movs	r3, #1
 8002ec2:	e089      	b.n	8002fd8 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	2202      	movs	r2, #2
 8002ec8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	2202      	movs	r2, #2
 8002ed0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002ed4:	e031      	b.n	8002f3a <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8002ed6:	683b      	ldr	r3, [r7, #0]
 8002ed8:	2b04      	cmp	r3, #4
 8002eda:	d110      	bne.n	8002efe <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8002edc:	7bbb      	ldrb	r3, [r7, #14]
 8002ede:	2b01      	cmp	r3, #1
 8002ee0:	d102      	bne.n	8002ee8 <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8002ee2:	7b3b      	ldrb	r3, [r7, #12]
 8002ee4:	2b01      	cmp	r3, #1
 8002ee6:	d001      	beq.n	8002eec <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 8002ee8:	2301      	movs	r3, #1
 8002eea:	e075      	b.n	8002fd8 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	2202      	movs	r2, #2
 8002ef0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	2202      	movs	r2, #2
 8002ef8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002efc:	e01d      	b.n	8002f3a <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8002efe:	7bfb      	ldrb	r3, [r7, #15]
 8002f00:	2b01      	cmp	r3, #1
 8002f02:	d108      	bne.n	8002f16 <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8002f04:	7bbb      	ldrb	r3, [r7, #14]
 8002f06:	2b01      	cmp	r3, #1
 8002f08:	d105      	bne.n	8002f16 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8002f0a:	7b7b      	ldrb	r3, [r7, #13]
 8002f0c:	2b01      	cmp	r3, #1
 8002f0e:	d102      	bne.n	8002f16 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8002f10:	7b3b      	ldrb	r3, [r7, #12]
 8002f12:	2b01      	cmp	r3, #1
 8002f14:	d001      	beq.n	8002f1a <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 8002f16:	2301      	movs	r3, #1
 8002f18:	e05e      	b.n	8002fd8 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	2202      	movs	r2, #2
 8002f1e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	2202      	movs	r2, #2
 8002f26:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	2202      	movs	r2, #2
 8002f2e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	2202      	movs	r2, #2
 8002f36:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 8002f3a:	683b      	ldr	r3, [r7, #0]
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d003      	beq.n	8002f48 <HAL_TIM_Encoder_Start_IT+0xc4>
 8002f40:	683b      	ldr	r3, [r7, #0]
 8002f42:	2b04      	cmp	r3, #4
 8002f44:	d010      	beq.n	8002f68 <HAL_TIM_Encoder_Start_IT+0xe4>
 8002f46:	e01f      	b.n	8002f88 <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	2201      	movs	r2, #1
 8002f4e:	2100      	movs	r1, #0
 8002f50:	4618      	mov	r0, r3
 8002f52:	f000 fa09 	bl	8003368 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	68da      	ldr	r2, [r3, #12]
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f042 0202 	orr.w	r2, r2, #2
 8002f64:	60da      	str	r2, [r3, #12]
      break;
 8002f66:	e02e      	b.n	8002fc6 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	2201      	movs	r2, #1
 8002f6e:	2104      	movs	r1, #4
 8002f70:	4618      	mov	r0, r3
 8002f72:	f000 f9f9 	bl	8003368 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	68da      	ldr	r2, [r3, #12]
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f042 0204 	orr.w	r2, r2, #4
 8002f84:	60da      	str	r2, [r3, #12]
      break;
 8002f86:	e01e      	b.n	8002fc6 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	2201      	movs	r2, #1
 8002f8e:	2100      	movs	r1, #0
 8002f90:	4618      	mov	r0, r3
 8002f92:	f000 f9e9 	bl	8003368 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	2201      	movs	r2, #1
 8002f9c:	2104      	movs	r1, #4
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	f000 f9e2 	bl	8003368 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	68da      	ldr	r2, [r3, #12]
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f042 0202 	orr.w	r2, r2, #2
 8002fb2:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	68da      	ldr	r2, [r3, #12]
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f042 0204 	orr.w	r2, r2, #4
 8002fc2:	60da      	str	r2, [r3, #12]
      break;
 8002fc4:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	681a      	ldr	r2, [r3, #0]
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f042 0201 	orr.w	r2, r2, #1
 8002fd4:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8002fd6:	2300      	movs	r3, #0
}
 8002fd8:	4618      	mov	r0, r3
 8002fda:	3710      	adds	r7, #16
 8002fdc:	46bd      	mov	sp, r7
 8002fde:	bd80      	pop	{r7, pc}

08002fe0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	b084      	sub	sp, #16
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	68db      	ldr	r3, [r3, #12]
 8002fee:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	691b      	ldr	r3, [r3, #16]
 8002ff6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002ff8:	68bb      	ldr	r3, [r7, #8]
 8002ffa:	f003 0302 	and.w	r3, r3, #2
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d020      	beq.n	8003044 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	f003 0302 	and.w	r3, r3, #2
 8003008:	2b00      	cmp	r3, #0
 800300a:	d01b      	beq.n	8003044 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f06f 0202 	mvn.w	r2, #2
 8003014:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	2201      	movs	r2, #1
 800301a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	699b      	ldr	r3, [r3, #24]
 8003022:	f003 0303 	and.w	r3, r3, #3
 8003026:	2b00      	cmp	r3, #0
 8003028:	d003      	beq.n	8003032 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800302a:	6878      	ldr	r0, [r7, #4]
 800302c:	f7fd fa62 	bl	80004f4 <HAL_TIM_IC_CaptureCallback>
 8003030:	e005      	b.n	800303e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003032:	6878      	ldr	r0, [r7, #4]
 8003034:	f000 f8ce 	bl	80031d4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003038:	6878      	ldr	r0, [r7, #4]
 800303a:	f000 f8d5 	bl	80031e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	2200      	movs	r2, #0
 8003042:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003044:	68bb      	ldr	r3, [r7, #8]
 8003046:	f003 0304 	and.w	r3, r3, #4
 800304a:	2b00      	cmp	r3, #0
 800304c:	d020      	beq.n	8003090 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	f003 0304 	and.w	r3, r3, #4
 8003054:	2b00      	cmp	r3, #0
 8003056:	d01b      	beq.n	8003090 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f06f 0204 	mvn.w	r2, #4
 8003060:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	2202      	movs	r2, #2
 8003066:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	699b      	ldr	r3, [r3, #24]
 800306e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003072:	2b00      	cmp	r3, #0
 8003074:	d003      	beq.n	800307e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003076:	6878      	ldr	r0, [r7, #4]
 8003078:	f7fd fa3c 	bl	80004f4 <HAL_TIM_IC_CaptureCallback>
 800307c:	e005      	b.n	800308a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800307e:	6878      	ldr	r0, [r7, #4]
 8003080:	f000 f8a8 	bl	80031d4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003084:	6878      	ldr	r0, [r7, #4]
 8003086:	f000 f8af 	bl	80031e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	2200      	movs	r2, #0
 800308e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003090:	68bb      	ldr	r3, [r7, #8]
 8003092:	f003 0308 	and.w	r3, r3, #8
 8003096:	2b00      	cmp	r3, #0
 8003098:	d020      	beq.n	80030dc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	f003 0308 	and.w	r3, r3, #8
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d01b      	beq.n	80030dc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f06f 0208 	mvn.w	r2, #8
 80030ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	2204      	movs	r2, #4
 80030b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	69db      	ldr	r3, [r3, #28]
 80030ba:	f003 0303 	and.w	r3, r3, #3
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d003      	beq.n	80030ca <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80030c2:	6878      	ldr	r0, [r7, #4]
 80030c4:	f7fd fa16 	bl	80004f4 <HAL_TIM_IC_CaptureCallback>
 80030c8:	e005      	b.n	80030d6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80030ca:	6878      	ldr	r0, [r7, #4]
 80030cc:	f000 f882 	bl	80031d4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030d0:	6878      	ldr	r0, [r7, #4]
 80030d2:	f000 f889 	bl	80031e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	2200      	movs	r2, #0
 80030da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80030dc:	68bb      	ldr	r3, [r7, #8]
 80030de:	f003 0310 	and.w	r3, r3, #16
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d020      	beq.n	8003128 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	f003 0310 	and.w	r3, r3, #16
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d01b      	beq.n	8003128 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f06f 0210 	mvn.w	r2, #16
 80030f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	2208      	movs	r2, #8
 80030fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	69db      	ldr	r3, [r3, #28]
 8003106:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800310a:	2b00      	cmp	r3, #0
 800310c:	d003      	beq.n	8003116 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800310e:	6878      	ldr	r0, [r7, #4]
 8003110:	f7fd f9f0 	bl	80004f4 <HAL_TIM_IC_CaptureCallback>
 8003114:	e005      	b.n	8003122 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003116:	6878      	ldr	r0, [r7, #4]
 8003118:	f000 f85c 	bl	80031d4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800311c:	6878      	ldr	r0, [r7, #4]
 800311e:	f000 f863 	bl	80031e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	2200      	movs	r2, #0
 8003126:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003128:	68bb      	ldr	r3, [r7, #8]
 800312a:	f003 0301 	and.w	r3, r3, #1
 800312e:	2b00      	cmp	r3, #0
 8003130:	d00c      	beq.n	800314c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	f003 0301 	and.w	r3, r3, #1
 8003138:	2b00      	cmp	r3, #0
 800313a:	d007      	beq.n	800314c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f06f 0201 	mvn.w	r2, #1
 8003144:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003146:	6878      	ldr	r0, [r7, #4]
 8003148:	f000 f83a 	bl	80031c0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800314c:	68bb      	ldr	r3, [r7, #8]
 800314e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003152:	2b00      	cmp	r3, #0
 8003154:	d00c      	beq.n	8003170 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800315c:	2b00      	cmp	r3, #0
 800315e:	d007      	beq.n	8003170 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003168:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800316a:	6878      	ldr	r0, [r7, #4]
 800316c:	f000 f9a8 	bl	80034c0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003170:	68bb      	ldr	r3, [r7, #8]
 8003172:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003176:	2b00      	cmp	r3, #0
 8003178:	d00c      	beq.n	8003194 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003180:	2b00      	cmp	r3, #0
 8003182:	d007      	beq.n	8003194 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800318c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800318e:	6878      	ldr	r0, [r7, #4]
 8003190:	f000 f834 	bl	80031fc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003194:	68bb      	ldr	r3, [r7, #8]
 8003196:	f003 0320 	and.w	r3, r3, #32
 800319a:	2b00      	cmp	r3, #0
 800319c:	d00c      	beq.n	80031b8 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	f003 0320 	and.w	r3, r3, #32
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d007      	beq.n	80031b8 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f06f 0220 	mvn.w	r2, #32
 80031b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80031b2:	6878      	ldr	r0, [r7, #4]
 80031b4:	f000 f97a 	bl	80034ac <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80031b8:	bf00      	nop
 80031ba:	3710      	adds	r7, #16
 80031bc:	46bd      	mov	sp, r7
 80031be:	bd80      	pop	{r7, pc}

080031c0 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80031c0:	b480      	push	{r7}
 80031c2:	b083      	sub	sp, #12
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80031c8:	bf00      	nop
 80031ca:	370c      	adds	r7, #12
 80031cc:	46bd      	mov	sp, r7
 80031ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d2:	4770      	bx	lr

080031d4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80031d4:	b480      	push	{r7}
 80031d6:	b083      	sub	sp, #12
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80031dc:	bf00      	nop
 80031de:	370c      	adds	r7, #12
 80031e0:	46bd      	mov	sp, r7
 80031e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e6:	4770      	bx	lr

080031e8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80031e8:	b480      	push	{r7}
 80031ea:	b083      	sub	sp, #12
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80031f0:	bf00      	nop
 80031f2:	370c      	adds	r7, #12
 80031f4:	46bd      	mov	sp, r7
 80031f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fa:	4770      	bx	lr

080031fc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80031fc:	b480      	push	{r7}
 80031fe:	b083      	sub	sp, #12
 8003200:	af00      	add	r7, sp, #0
 8003202:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003204:	bf00      	nop
 8003206:	370c      	adds	r7, #12
 8003208:	46bd      	mov	sp, r7
 800320a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320e:	4770      	bx	lr

08003210 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003210:	b480      	push	{r7}
 8003212:	b085      	sub	sp, #20
 8003214:	af00      	add	r7, sp, #0
 8003216:	6078      	str	r0, [r7, #4]
 8003218:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	4a46      	ldr	r2, [pc, #280]	@ (800333c <TIM_Base_SetConfig+0x12c>)
 8003224:	4293      	cmp	r3, r2
 8003226:	d013      	beq.n	8003250 <TIM_Base_SetConfig+0x40>
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800322e:	d00f      	beq.n	8003250 <TIM_Base_SetConfig+0x40>
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	4a43      	ldr	r2, [pc, #268]	@ (8003340 <TIM_Base_SetConfig+0x130>)
 8003234:	4293      	cmp	r3, r2
 8003236:	d00b      	beq.n	8003250 <TIM_Base_SetConfig+0x40>
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	4a42      	ldr	r2, [pc, #264]	@ (8003344 <TIM_Base_SetConfig+0x134>)
 800323c:	4293      	cmp	r3, r2
 800323e:	d007      	beq.n	8003250 <TIM_Base_SetConfig+0x40>
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	4a41      	ldr	r2, [pc, #260]	@ (8003348 <TIM_Base_SetConfig+0x138>)
 8003244:	4293      	cmp	r3, r2
 8003246:	d003      	beq.n	8003250 <TIM_Base_SetConfig+0x40>
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	4a40      	ldr	r2, [pc, #256]	@ (800334c <TIM_Base_SetConfig+0x13c>)
 800324c:	4293      	cmp	r3, r2
 800324e:	d108      	bne.n	8003262 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003256:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003258:	683b      	ldr	r3, [r7, #0]
 800325a:	685b      	ldr	r3, [r3, #4]
 800325c:	68fa      	ldr	r2, [r7, #12]
 800325e:	4313      	orrs	r3, r2
 8003260:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	4a35      	ldr	r2, [pc, #212]	@ (800333c <TIM_Base_SetConfig+0x12c>)
 8003266:	4293      	cmp	r3, r2
 8003268:	d02b      	beq.n	80032c2 <TIM_Base_SetConfig+0xb2>
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003270:	d027      	beq.n	80032c2 <TIM_Base_SetConfig+0xb2>
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	4a32      	ldr	r2, [pc, #200]	@ (8003340 <TIM_Base_SetConfig+0x130>)
 8003276:	4293      	cmp	r3, r2
 8003278:	d023      	beq.n	80032c2 <TIM_Base_SetConfig+0xb2>
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	4a31      	ldr	r2, [pc, #196]	@ (8003344 <TIM_Base_SetConfig+0x134>)
 800327e:	4293      	cmp	r3, r2
 8003280:	d01f      	beq.n	80032c2 <TIM_Base_SetConfig+0xb2>
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	4a30      	ldr	r2, [pc, #192]	@ (8003348 <TIM_Base_SetConfig+0x138>)
 8003286:	4293      	cmp	r3, r2
 8003288:	d01b      	beq.n	80032c2 <TIM_Base_SetConfig+0xb2>
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	4a2f      	ldr	r2, [pc, #188]	@ (800334c <TIM_Base_SetConfig+0x13c>)
 800328e:	4293      	cmp	r3, r2
 8003290:	d017      	beq.n	80032c2 <TIM_Base_SetConfig+0xb2>
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	4a2e      	ldr	r2, [pc, #184]	@ (8003350 <TIM_Base_SetConfig+0x140>)
 8003296:	4293      	cmp	r3, r2
 8003298:	d013      	beq.n	80032c2 <TIM_Base_SetConfig+0xb2>
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	4a2d      	ldr	r2, [pc, #180]	@ (8003354 <TIM_Base_SetConfig+0x144>)
 800329e:	4293      	cmp	r3, r2
 80032a0:	d00f      	beq.n	80032c2 <TIM_Base_SetConfig+0xb2>
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	4a2c      	ldr	r2, [pc, #176]	@ (8003358 <TIM_Base_SetConfig+0x148>)
 80032a6:	4293      	cmp	r3, r2
 80032a8:	d00b      	beq.n	80032c2 <TIM_Base_SetConfig+0xb2>
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	4a2b      	ldr	r2, [pc, #172]	@ (800335c <TIM_Base_SetConfig+0x14c>)
 80032ae:	4293      	cmp	r3, r2
 80032b0:	d007      	beq.n	80032c2 <TIM_Base_SetConfig+0xb2>
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	4a2a      	ldr	r2, [pc, #168]	@ (8003360 <TIM_Base_SetConfig+0x150>)
 80032b6:	4293      	cmp	r3, r2
 80032b8:	d003      	beq.n	80032c2 <TIM_Base_SetConfig+0xb2>
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	4a29      	ldr	r2, [pc, #164]	@ (8003364 <TIM_Base_SetConfig+0x154>)
 80032be:	4293      	cmp	r3, r2
 80032c0:	d108      	bne.n	80032d4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80032c8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80032ca:	683b      	ldr	r3, [r7, #0]
 80032cc:	68db      	ldr	r3, [r3, #12]
 80032ce:	68fa      	ldr	r2, [r7, #12]
 80032d0:	4313      	orrs	r3, r2
 80032d2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80032da:	683b      	ldr	r3, [r7, #0]
 80032dc:	695b      	ldr	r3, [r3, #20]
 80032de:	4313      	orrs	r3, r2
 80032e0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	68fa      	ldr	r2, [r7, #12]
 80032e6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80032e8:	683b      	ldr	r3, [r7, #0]
 80032ea:	689a      	ldr	r2, [r3, #8]
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80032f0:	683b      	ldr	r3, [r7, #0]
 80032f2:	681a      	ldr	r2, [r3, #0]
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	4a10      	ldr	r2, [pc, #64]	@ (800333c <TIM_Base_SetConfig+0x12c>)
 80032fc:	4293      	cmp	r3, r2
 80032fe:	d003      	beq.n	8003308 <TIM_Base_SetConfig+0xf8>
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	4a12      	ldr	r2, [pc, #72]	@ (800334c <TIM_Base_SetConfig+0x13c>)
 8003304:	4293      	cmp	r3, r2
 8003306:	d103      	bne.n	8003310 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003308:	683b      	ldr	r3, [r7, #0]
 800330a:	691a      	ldr	r2, [r3, #16]
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	2201      	movs	r2, #1
 8003314:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	691b      	ldr	r3, [r3, #16]
 800331a:	f003 0301 	and.w	r3, r3, #1
 800331e:	2b01      	cmp	r3, #1
 8003320:	d105      	bne.n	800332e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	691b      	ldr	r3, [r3, #16]
 8003326:	f023 0201 	bic.w	r2, r3, #1
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	611a      	str	r2, [r3, #16]
  }
}
 800332e:	bf00      	nop
 8003330:	3714      	adds	r7, #20
 8003332:	46bd      	mov	sp, r7
 8003334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003338:	4770      	bx	lr
 800333a:	bf00      	nop
 800333c:	40010000 	.word	0x40010000
 8003340:	40000400 	.word	0x40000400
 8003344:	40000800 	.word	0x40000800
 8003348:	40000c00 	.word	0x40000c00
 800334c:	40010400 	.word	0x40010400
 8003350:	40014000 	.word	0x40014000
 8003354:	40014400 	.word	0x40014400
 8003358:	40014800 	.word	0x40014800
 800335c:	40001800 	.word	0x40001800
 8003360:	40001c00 	.word	0x40001c00
 8003364:	40002000 	.word	0x40002000

08003368 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003368:	b480      	push	{r7}
 800336a:	b087      	sub	sp, #28
 800336c:	af00      	add	r7, sp, #0
 800336e:	60f8      	str	r0, [r7, #12]
 8003370:	60b9      	str	r1, [r7, #8]
 8003372:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003374:	68bb      	ldr	r3, [r7, #8]
 8003376:	f003 031f 	and.w	r3, r3, #31
 800337a:	2201      	movs	r2, #1
 800337c:	fa02 f303 	lsl.w	r3, r2, r3
 8003380:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	6a1a      	ldr	r2, [r3, #32]
 8003386:	697b      	ldr	r3, [r7, #20]
 8003388:	43db      	mvns	r3, r3
 800338a:	401a      	ands	r2, r3
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	6a1a      	ldr	r2, [r3, #32]
 8003394:	68bb      	ldr	r3, [r7, #8]
 8003396:	f003 031f 	and.w	r3, r3, #31
 800339a:	6879      	ldr	r1, [r7, #4]
 800339c:	fa01 f303 	lsl.w	r3, r1, r3
 80033a0:	431a      	orrs	r2, r3
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	621a      	str	r2, [r3, #32]
}
 80033a6:	bf00      	nop
 80033a8:	371c      	adds	r7, #28
 80033aa:	46bd      	mov	sp, r7
 80033ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b0:	4770      	bx	lr
	...

080033b4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80033b4:	b480      	push	{r7}
 80033b6:	b085      	sub	sp, #20
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	6078      	str	r0, [r7, #4]
 80033bc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80033c4:	2b01      	cmp	r3, #1
 80033c6:	d101      	bne.n	80033cc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80033c8:	2302      	movs	r3, #2
 80033ca:	e05a      	b.n	8003482 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	2201      	movs	r2, #1
 80033d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	2202      	movs	r2, #2
 80033d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	685b      	ldr	r3, [r3, #4]
 80033e2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	689b      	ldr	r3, [r3, #8]
 80033ea:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80033f2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80033f4:	683b      	ldr	r3, [r7, #0]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	68fa      	ldr	r2, [r7, #12]
 80033fa:	4313      	orrs	r3, r2
 80033fc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	68fa      	ldr	r2, [r7, #12]
 8003404:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	4a21      	ldr	r2, [pc, #132]	@ (8003490 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800340c:	4293      	cmp	r3, r2
 800340e:	d022      	beq.n	8003456 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003418:	d01d      	beq.n	8003456 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	4a1d      	ldr	r2, [pc, #116]	@ (8003494 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003420:	4293      	cmp	r3, r2
 8003422:	d018      	beq.n	8003456 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	4a1b      	ldr	r2, [pc, #108]	@ (8003498 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800342a:	4293      	cmp	r3, r2
 800342c:	d013      	beq.n	8003456 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	4a1a      	ldr	r2, [pc, #104]	@ (800349c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003434:	4293      	cmp	r3, r2
 8003436:	d00e      	beq.n	8003456 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	4a18      	ldr	r2, [pc, #96]	@ (80034a0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800343e:	4293      	cmp	r3, r2
 8003440:	d009      	beq.n	8003456 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	4a17      	ldr	r2, [pc, #92]	@ (80034a4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003448:	4293      	cmp	r3, r2
 800344a:	d004      	beq.n	8003456 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	4a15      	ldr	r2, [pc, #84]	@ (80034a8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003452:	4293      	cmp	r3, r2
 8003454:	d10c      	bne.n	8003470 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003456:	68bb      	ldr	r3, [r7, #8]
 8003458:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800345c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800345e:	683b      	ldr	r3, [r7, #0]
 8003460:	685b      	ldr	r3, [r3, #4]
 8003462:	68ba      	ldr	r2, [r7, #8]
 8003464:	4313      	orrs	r3, r2
 8003466:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	68ba      	ldr	r2, [r7, #8]
 800346e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	2201      	movs	r2, #1
 8003474:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	2200      	movs	r2, #0
 800347c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003480:	2300      	movs	r3, #0
}
 8003482:	4618      	mov	r0, r3
 8003484:	3714      	adds	r7, #20
 8003486:	46bd      	mov	sp, r7
 8003488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348c:	4770      	bx	lr
 800348e:	bf00      	nop
 8003490:	40010000 	.word	0x40010000
 8003494:	40000400 	.word	0x40000400
 8003498:	40000800 	.word	0x40000800
 800349c:	40000c00 	.word	0x40000c00
 80034a0:	40010400 	.word	0x40010400
 80034a4:	40014000 	.word	0x40014000
 80034a8:	40001800 	.word	0x40001800

080034ac <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80034ac:	b480      	push	{r7}
 80034ae:	b083      	sub	sp, #12
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80034b4:	bf00      	nop
 80034b6:	370c      	adds	r7, #12
 80034b8:	46bd      	mov	sp, r7
 80034ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034be:	4770      	bx	lr

080034c0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80034c0:	b480      	push	{r7}
 80034c2:	b083      	sub	sp, #12
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80034c8:	bf00      	nop
 80034ca:	370c      	adds	r7, #12
 80034cc:	46bd      	mov	sp, r7
 80034ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d2:	4770      	bx	lr

080034d4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80034d4:	b084      	sub	sp, #16
 80034d6:	b580      	push	{r7, lr}
 80034d8:	b084      	sub	sp, #16
 80034da:	af00      	add	r7, sp, #0
 80034dc:	6078      	str	r0, [r7, #4]
 80034de:	f107 001c 	add.w	r0, r7, #28
 80034e2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80034e6:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80034ea:	2b01      	cmp	r3, #1
 80034ec:	d123      	bne.n	8003536 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034f2:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	68db      	ldr	r3, [r3, #12]
 80034fe:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8003502:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003506:	687a      	ldr	r2, [r7, #4]
 8003508:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	68db      	ldr	r3, [r3, #12]
 800350e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003516:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800351a:	2b01      	cmp	r3, #1
 800351c:	d105      	bne.n	800352a <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	68db      	ldr	r3, [r3, #12]
 8003522:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800352a:	6878      	ldr	r0, [r7, #4]
 800352c:	f001 fae8 	bl	8004b00 <USB_CoreReset>
 8003530:	4603      	mov	r3, r0
 8003532:	73fb      	strb	r3, [r7, #15]
 8003534:	e01b      	b.n	800356e <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	68db      	ldr	r3, [r3, #12]
 800353a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003542:	6878      	ldr	r0, [r7, #4]
 8003544:	f001 fadc 	bl	8004b00 <USB_CoreReset>
 8003548:	4603      	mov	r3, r0
 800354a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800354c:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8003550:	2b00      	cmp	r3, #0
 8003552:	d106      	bne.n	8003562 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003558:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	639a      	str	r2, [r3, #56]	@ 0x38
 8003560:	e005      	b.n	800356e <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003566:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800356e:	7fbb      	ldrb	r3, [r7, #30]
 8003570:	2b01      	cmp	r3, #1
 8003572:	d10b      	bne.n	800358c <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	689b      	ldr	r3, [r3, #8]
 8003578:	f043 0206 	orr.w	r2, r3, #6
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	689b      	ldr	r3, [r3, #8]
 8003584:	f043 0220 	orr.w	r2, r3, #32
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800358c:	7bfb      	ldrb	r3, [r7, #15]
}
 800358e:	4618      	mov	r0, r3
 8003590:	3710      	adds	r7, #16
 8003592:	46bd      	mov	sp, r7
 8003594:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003598:	b004      	add	sp, #16
 800359a:	4770      	bx	lr

0800359c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800359c:	b480      	push	{r7}
 800359e:	b087      	sub	sp, #28
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	60f8      	str	r0, [r7, #12]
 80035a4:	60b9      	str	r1, [r7, #8]
 80035a6:	4613      	mov	r3, r2
 80035a8:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80035aa:	79fb      	ldrb	r3, [r7, #7]
 80035ac:	2b02      	cmp	r3, #2
 80035ae:	d165      	bne.n	800367c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80035b0:	68bb      	ldr	r3, [r7, #8]
 80035b2:	4a41      	ldr	r2, [pc, #260]	@ (80036b8 <USB_SetTurnaroundTime+0x11c>)
 80035b4:	4293      	cmp	r3, r2
 80035b6:	d906      	bls.n	80035c6 <USB_SetTurnaroundTime+0x2a>
 80035b8:	68bb      	ldr	r3, [r7, #8]
 80035ba:	4a40      	ldr	r2, [pc, #256]	@ (80036bc <USB_SetTurnaroundTime+0x120>)
 80035bc:	4293      	cmp	r3, r2
 80035be:	d202      	bcs.n	80035c6 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80035c0:	230f      	movs	r3, #15
 80035c2:	617b      	str	r3, [r7, #20]
 80035c4:	e062      	b.n	800368c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80035c6:	68bb      	ldr	r3, [r7, #8]
 80035c8:	4a3c      	ldr	r2, [pc, #240]	@ (80036bc <USB_SetTurnaroundTime+0x120>)
 80035ca:	4293      	cmp	r3, r2
 80035cc:	d306      	bcc.n	80035dc <USB_SetTurnaroundTime+0x40>
 80035ce:	68bb      	ldr	r3, [r7, #8]
 80035d0:	4a3b      	ldr	r2, [pc, #236]	@ (80036c0 <USB_SetTurnaroundTime+0x124>)
 80035d2:	4293      	cmp	r3, r2
 80035d4:	d202      	bcs.n	80035dc <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80035d6:	230e      	movs	r3, #14
 80035d8:	617b      	str	r3, [r7, #20]
 80035da:	e057      	b.n	800368c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80035dc:	68bb      	ldr	r3, [r7, #8]
 80035de:	4a38      	ldr	r2, [pc, #224]	@ (80036c0 <USB_SetTurnaroundTime+0x124>)
 80035e0:	4293      	cmp	r3, r2
 80035e2:	d306      	bcc.n	80035f2 <USB_SetTurnaroundTime+0x56>
 80035e4:	68bb      	ldr	r3, [r7, #8]
 80035e6:	4a37      	ldr	r2, [pc, #220]	@ (80036c4 <USB_SetTurnaroundTime+0x128>)
 80035e8:	4293      	cmp	r3, r2
 80035ea:	d202      	bcs.n	80035f2 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80035ec:	230d      	movs	r3, #13
 80035ee:	617b      	str	r3, [r7, #20]
 80035f0:	e04c      	b.n	800368c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80035f2:	68bb      	ldr	r3, [r7, #8]
 80035f4:	4a33      	ldr	r2, [pc, #204]	@ (80036c4 <USB_SetTurnaroundTime+0x128>)
 80035f6:	4293      	cmp	r3, r2
 80035f8:	d306      	bcc.n	8003608 <USB_SetTurnaroundTime+0x6c>
 80035fa:	68bb      	ldr	r3, [r7, #8]
 80035fc:	4a32      	ldr	r2, [pc, #200]	@ (80036c8 <USB_SetTurnaroundTime+0x12c>)
 80035fe:	4293      	cmp	r3, r2
 8003600:	d802      	bhi.n	8003608 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8003602:	230c      	movs	r3, #12
 8003604:	617b      	str	r3, [r7, #20]
 8003606:	e041      	b.n	800368c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8003608:	68bb      	ldr	r3, [r7, #8]
 800360a:	4a2f      	ldr	r2, [pc, #188]	@ (80036c8 <USB_SetTurnaroundTime+0x12c>)
 800360c:	4293      	cmp	r3, r2
 800360e:	d906      	bls.n	800361e <USB_SetTurnaroundTime+0x82>
 8003610:	68bb      	ldr	r3, [r7, #8]
 8003612:	4a2e      	ldr	r2, [pc, #184]	@ (80036cc <USB_SetTurnaroundTime+0x130>)
 8003614:	4293      	cmp	r3, r2
 8003616:	d802      	bhi.n	800361e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8003618:	230b      	movs	r3, #11
 800361a:	617b      	str	r3, [r7, #20]
 800361c:	e036      	b.n	800368c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800361e:	68bb      	ldr	r3, [r7, #8]
 8003620:	4a2a      	ldr	r2, [pc, #168]	@ (80036cc <USB_SetTurnaroundTime+0x130>)
 8003622:	4293      	cmp	r3, r2
 8003624:	d906      	bls.n	8003634 <USB_SetTurnaroundTime+0x98>
 8003626:	68bb      	ldr	r3, [r7, #8]
 8003628:	4a29      	ldr	r2, [pc, #164]	@ (80036d0 <USB_SetTurnaroundTime+0x134>)
 800362a:	4293      	cmp	r3, r2
 800362c:	d802      	bhi.n	8003634 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800362e:	230a      	movs	r3, #10
 8003630:	617b      	str	r3, [r7, #20]
 8003632:	e02b      	b.n	800368c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8003634:	68bb      	ldr	r3, [r7, #8]
 8003636:	4a26      	ldr	r2, [pc, #152]	@ (80036d0 <USB_SetTurnaroundTime+0x134>)
 8003638:	4293      	cmp	r3, r2
 800363a:	d906      	bls.n	800364a <USB_SetTurnaroundTime+0xae>
 800363c:	68bb      	ldr	r3, [r7, #8]
 800363e:	4a25      	ldr	r2, [pc, #148]	@ (80036d4 <USB_SetTurnaroundTime+0x138>)
 8003640:	4293      	cmp	r3, r2
 8003642:	d202      	bcs.n	800364a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8003644:	2309      	movs	r3, #9
 8003646:	617b      	str	r3, [r7, #20]
 8003648:	e020      	b.n	800368c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800364a:	68bb      	ldr	r3, [r7, #8]
 800364c:	4a21      	ldr	r2, [pc, #132]	@ (80036d4 <USB_SetTurnaroundTime+0x138>)
 800364e:	4293      	cmp	r3, r2
 8003650:	d306      	bcc.n	8003660 <USB_SetTurnaroundTime+0xc4>
 8003652:	68bb      	ldr	r3, [r7, #8]
 8003654:	4a20      	ldr	r2, [pc, #128]	@ (80036d8 <USB_SetTurnaroundTime+0x13c>)
 8003656:	4293      	cmp	r3, r2
 8003658:	d802      	bhi.n	8003660 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800365a:	2308      	movs	r3, #8
 800365c:	617b      	str	r3, [r7, #20]
 800365e:	e015      	b.n	800368c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8003660:	68bb      	ldr	r3, [r7, #8]
 8003662:	4a1d      	ldr	r2, [pc, #116]	@ (80036d8 <USB_SetTurnaroundTime+0x13c>)
 8003664:	4293      	cmp	r3, r2
 8003666:	d906      	bls.n	8003676 <USB_SetTurnaroundTime+0xda>
 8003668:	68bb      	ldr	r3, [r7, #8]
 800366a:	4a1c      	ldr	r2, [pc, #112]	@ (80036dc <USB_SetTurnaroundTime+0x140>)
 800366c:	4293      	cmp	r3, r2
 800366e:	d202      	bcs.n	8003676 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8003670:	2307      	movs	r3, #7
 8003672:	617b      	str	r3, [r7, #20]
 8003674:	e00a      	b.n	800368c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8003676:	2306      	movs	r3, #6
 8003678:	617b      	str	r3, [r7, #20]
 800367a:	e007      	b.n	800368c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800367c:	79fb      	ldrb	r3, [r7, #7]
 800367e:	2b00      	cmp	r3, #0
 8003680:	d102      	bne.n	8003688 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8003682:	2309      	movs	r3, #9
 8003684:	617b      	str	r3, [r7, #20]
 8003686:	e001      	b.n	800368c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8003688:	2309      	movs	r3, #9
 800368a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	68db      	ldr	r3, [r3, #12]
 8003690:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	68da      	ldr	r2, [r3, #12]
 800369c:	697b      	ldr	r3, [r7, #20]
 800369e:	029b      	lsls	r3, r3, #10
 80036a0:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 80036a4:	431a      	orrs	r2, r3
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80036aa:	2300      	movs	r3, #0
}
 80036ac:	4618      	mov	r0, r3
 80036ae:	371c      	adds	r7, #28
 80036b0:	46bd      	mov	sp, r7
 80036b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b6:	4770      	bx	lr
 80036b8:	00d8acbf 	.word	0x00d8acbf
 80036bc:	00e4e1c0 	.word	0x00e4e1c0
 80036c0:	00f42400 	.word	0x00f42400
 80036c4:	01067380 	.word	0x01067380
 80036c8:	011a499f 	.word	0x011a499f
 80036cc:	01312cff 	.word	0x01312cff
 80036d0:	014ca43f 	.word	0x014ca43f
 80036d4:	016e3600 	.word	0x016e3600
 80036d8:	01a6ab1f 	.word	0x01a6ab1f
 80036dc:	01e84800 	.word	0x01e84800

080036e0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80036e0:	b480      	push	{r7}
 80036e2:	b083      	sub	sp, #12
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	689b      	ldr	r3, [r3, #8]
 80036ec:	f043 0201 	orr.w	r2, r3, #1
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80036f4:	2300      	movs	r3, #0
}
 80036f6:	4618      	mov	r0, r3
 80036f8:	370c      	adds	r7, #12
 80036fa:	46bd      	mov	sp, r7
 80036fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003700:	4770      	bx	lr

08003702 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003702:	b480      	push	{r7}
 8003704:	b083      	sub	sp, #12
 8003706:	af00      	add	r7, sp, #0
 8003708:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	689b      	ldr	r3, [r3, #8]
 800370e:	f023 0201 	bic.w	r2, r3, #1
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003716:	2300      	movs	r3, #0
}
 8003718:	4618      	mov	r0, r3
 800371a:	370c      	adds	r7, #12
 800371c:	46bd      	mov	sp, r7
 800371e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003722:	4770      	bx	lr

08003724 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8003724:	b580      	push	{r7, lr}
 8003726:	b084      	sub	sp, #16
 8003728:	af00      	add	r7, sp, #0
 800372a:	6078      	str	r0, [r7, #4]
 800372c:	460b      	mov	r3, r1
 800372e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8003730:	2300      	movs	r3, #0
 8003732:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	68db      	ldr	r3, [r3, #12]
 8003738:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003740:	78fb      	ldrb	r3, [r7, #3]
 8003742:	2b01      	cmp	r3, #1
 8003744:	d115      	bne.n	8003772 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	68db      	ldr	r3, [r3, #12]
 800374a:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8003752:	200a      	movs	r0, #10
 8003754:	f7fd f974 	bl	8000a40 <HAL_Delay>
      ms += 10U;
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	330a      	adds	r3, #10
 800375c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800375e:	6878      	ldr	r0, [r7, #4]
 8003760:	f001 f93f 	bl	80049e2 <USB_GetMode>
 8003764:	4603      	mov	r3, r0
 8003766:	2b01      	cmp	r3, #1
 8003768:	d01e      	beq.n	80037a8 <USB_SetCurrentMode+0x84>
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	2bc7      	cmp	r3, #199	@ 0xc7
 800376e:	d9f0      	bls.n	8003752 <USB_SetCurrentMode+0x2e>
 8003770:	e01a      	b.n	80037a8 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8003772:	78fb      	ldrb	r3, [r7, #3]
 8003774:	2b00      	cmp	r3, #0
 8003776:	d115      	bne.n	80037a4 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	68db      	ldr	r3, [r3, #12]
 800377c:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8003784:	200a      	movs	r0, #10
 8003786:	f7fd f95b 	bl	8000a40 <HAL_Delay>
      ms += 10U;
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	330a      	adds	r3, #10
 800378e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8003790:	6878      	ldr	r0, [r7, #4]
 8003792:	f001 f926 	bl	80049e2 <USB_GetMode>
 8003796:	4603      	mov	r3, r0
 8003798:	2b00      	cmp	r3, #0
 800379a:	d005      	beq.n	80037a8 <USB_SetCurrentMode+0x84>
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	2bc7      	cmp	r3, #199	@ 0xc7
 80037a0:	d9f0      	bls.n	8003784 <USB_SetCurrentMode+0x60>
 80037a2:	e001      	b.n	80037a8 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80037a4:	2301      	movs	r3, #1
 80037a6:	e005      	b.n	80037b4 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	2bc8      	cmp	r3, #200	@ 0xc8
 80037ac:	d101      	bne.n	80037b2 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80037ae:	2301      	movs	r3, #1
 80037b0:	e000      	b.n	80037b4 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80037b2:	2300      	movs	r3, #0
}
 80037b4:	4618      	mov	r0, r3
 80037b6:	3710      	adds	r7, #16
 80037b8:	46bd      	mov	sp, r7
 80037ba:	bd80      	pop	{r7, pc}

080037bc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80037bc:	b084      	sub	sp, #16
 80037be:	b580      	push	{r7, lr}
 80037c0:	b086      	sub	sp, #24
 80037c2:	af00      	add	r7, sp, #0
 80037c4:	6078      	str	r0, [r7, #4]
 80037c6:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80037ca:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80037ce:	2300      	movs	r3, #0
 80037d0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80037d6:	2300      	movs	r3, #0
 80037d8:	613b      	str	r3, [r7, #16]
 80037da:	e009      	b.n	80037f0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80037dc:	687a      	ldr	r2, [r7, #4]
 80037de:	693b      	ldr	r3, [r7, #16]
 80037e0:	3340      	adds	r3, #64	@ 0x40
 80037e2:	009b      	lsls	r3, r3, #2
 80037e4:	4413      	add	r3, r2
 80037e6:	2200      	movs	r2, #0
 80037e8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80037ea:	693b      	ldr	r3, [r7, #16]
 80037ec:	3301      	adds	r3, #1
 80037ee:	613b      	str	r3, [r7, #16]
 80037f0:	693b      	ldr	r3, [r7, #16]
 80037f2:	2b0e      	cmp	r3, #14
 80037f4:	d9f2      	bls.n	80037dc <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80037f6:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d11c      	bne.n	8003838 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003804:	685b      	ldr	r3, [r3, #4]
 8003806:	68fa      	ldr	r2, [r7, #12]
 8003808:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800380c:	f043 0302 	orr.w	r3, r3, #2
 8003810:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003816:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003822:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800382e:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	639a      	str	r2, [r3, #56]	@ 0x38
 8003836:	e00b      	b.n	8003850 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800383c:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003848:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8003856:	461a      	mov	r2, r3
 8003858:	2300      	movs	r3, #0
 800385a:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800385c:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8003860:	2b01      	cmp	r3, #1
 8003862:	d10d      	bne.n	8003880 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8003864:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003868:	2b00      	cmp	r3, #0
 800386a:	d104      	bne.n	8003876 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800386c:	2100      	movs	r1, #0
 800386e:	6878      	ldr	r0, [r7, #4]
 8003870:	f000 f968 	bl	8003b44 <USB_SetDevSpeed>
 8003874:	e008      	b.n	8003888 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003876:	2101      	movs	r1, #1
 8003878:	6878      	ldr	r0, [r7, #4]
 800387a:	f000 f963 	bl	8003b44 <USB_SetDevSpeed>
 800387e:	e003      	b.n	8003888 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8003880:	2103      	movs	r1, #3
 8003882:	6878      	ldr	r0, [r7, #4]
 8003884:	f000 f95e 	bl	8003b44 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003888:	2110      	movs	r1, #16
 800388a:	6878      	ldr	r0, [r7, #4]
 800388c:	f000 f8fa 	bl	8003a84 <USB_FlushTxFifo>
 8003890:	4603      	mov	r3, r0
 8003892:	2b00      	cmp	r3, #0
 8003894:	d001      	beq.n	800389a <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8003896:	2301      	movs	r3, #1
 8003898:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800389a:	6878      	ldr	r0, [r7, #4]
 800389c:	f000 f924 	bl	8003ae8 <USB_FlushRxFifo>
 80038a0:	4603      	mov	r3, r0
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d001      	beq.n	80038aa <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 80038a6:	2301      	movs	r3, #1
 80038a8:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80038b0:	461a      	mov	r2, r3
 80038b2:	2300      	movs	r3, #0
 80038b4:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80038bc:	461a      	mov	r2, r3
 80038be:	2300      	movs	r3, #0
 80038c0:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80038c8:	461a      	mov	r2, r3
 80038ca:	2300      	movs	r3, #0
 80038cc:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80038ce:	2300      	movs	r3, #0
 80038d0:	613b      	str	r3, [r7, #16]
 80038d2:	e043      	b.n	800395c <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80038d4:	693b      	ldr	r3, [r7, #16]
 80038d6:	015a      	lsls	r2, r3, #5
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	4413      	add	r3, r2
 80038dc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80038e6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80038ea:	d118      	bne.n	800391e <USB_DevInit+0x162>
    {
      if (i == 0U)
 80038ec:	693b      	ldr	r3, [r7, #16]
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d10a      	bne.n	8003908 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80038f2:	693b      	ldr	r3, [r7, #16]
 80038f4:	015a      	lsls	r2, r3, #5
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	4413      	add	r3, r2
 80038fa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80038fe:	461a      	mov	r2, r3
 8003900:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8003904:	6013      	str	r3, [r2, #0]
 8003906:	e013      	b.n	8003930 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003908:	693b      	ldr	r3, [r7, #16]
 800390a:	015a      	lsls	r2, r3, #5
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	4413      	add	r3, r2
 8003910:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003914:	461a      	mov	r2, r3
 8003916:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800391a:	6013      	str	r3, [r2, #0]
 800391c:	e008      	b.n	8003930 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800391e:	693b      	ldr	r3, [r7, #16]
 8003920:	015a      	lsls	r2, r3, #5
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	4413      	add	r3, r2
 8003926:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800392a:	461a      	mov	r2, r3
 800392c:	2300      	movs	r3, #0
 800392e:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8003930:	693b      	ldr	r3, [r7, #16]
 8003932:	015a      	lsls	r2, r3, #5
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	4413      	add	r3, r2
 8003938:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800393c:	461a      	mov	r2, r3
 800393e:	2300      	movs	r3, #0
 8003940:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003942:	693b      	ldr	r3, [r7, #16]
 8003944:	015a      	lsls	r2, r3, #5
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	4413      	add	r3, r2
 800394a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800394e:	461a      	mov	r2, r3
 8003950:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003954:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003956:	693b      	ldr	r3, [r7, #16]
 8003958:	3301      	adds	r3, #1
 800395a:	613b      	str	r3, [r7, #16]
 800395c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8003960:	461a      	mov	r2, r3
 8003962:	693b      	ldr	r3, [r7, #16]
 8003964:	4293      	cmp	r3, r2
 8003966:	d3b5      	bcc.n	80038d4 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003968:	2300      	movs	r3, #0
 800396a:	613b      	str	r3, [r7, #16]
 800396c:	e043      	b.n	80039f6 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800396e:	693b      	ldr	r3, [r7, #16]
 8003970:	015a      	lsls	r2, r3, #5
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	4413      	add	r3, r2
 8003976:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003980:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003984:	d118      	bne.n	80039b8 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8003986:	693b      	ldr	r3, [r7, #16]
 8003988:	2b00      	cmp	r3, #0
 800398a:	d10a      	bne.n	80039a2 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800398c:	693b      	ldr	r3, [r7, #16]
 800398e:	015a      	lsls	r2, r3, #5
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	4413      	add	r3, r2
 8003994:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003998:	461a      	mov	r2, r3
 800399a:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800399e:	6013      	str	r3, [r2, #0]
 80039a0:	e013      	b.n	80039ca <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80039a2:	693b      	ldr	r3, [r7, #16]
 80039a4:	015a      	lsls	r2, r3, #5
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	4413      	add	r3, r2
 80039aa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80039ae:	461a      	mov	r2, r3
 80039b0:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80039b4:	6013      	str	r3, [r2, #0]
 80039b6:	e008      	b.n	80039ca <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80039b8:	693b      	ldr	r3, [r7, #16]
 80039ba:	015a      	lsls	r2, r3, #5
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	4413      	add	r3, r2
 80039c0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80039c4:	461a      	mov	r2, r3
 80039c6:	2300      	movs	r3, #0
 80039c8:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80039ca:	693b      	ldr	r3, [r7, #16]
 80039cc:	015a      	lsls	r2, r3, #5
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	4413      	add	r3, r2
 80039d2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80039d6:	461a      	mov	r2, r3
 80039d8:	2300      	movs	r3, #0
 80039da:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80039dc:	693b      	ldr	r3, [r7, #16]
 80039de:	015a      	lsls	r2, r3, #5
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	4413      	add	r3, r2
 80039e4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80039e8:	461a      	mov	r2, r3
 80039ea:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80039ee:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80039f0:	693b      	ldr	r3, [r7, #16]
 80039f2:	3301      	adds	r3, #1
 80039f4:	613b      	str	r3, [r7, #16]
 80039f6:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80039fa:	461a      	mov	r2, r3
 80039fc:	693b      	ldr	r3, [r7, #16]
 80039fe:	4293      	cmp	r3, r2
 8003a00:	d3b5      	bcc.n	800396e <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003a08:	691b      	ldr	r3, [r3, #16]
 8003a0a:	68fa      	ldr	r2, [r7, #12]
 8003a0c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003a10:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003a14:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	2200      	movs	r2, #0
 8003a1a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8003a22:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8003a24:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d105      	bne.n	8003a38 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	699b      	ldr	r3, [r3, #24]
 8003a30:	f043 0210 	orr.w	r2, r3, #16
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	699a      	ldr	r2, [r3, #24]
 8003a3c:	4b10      	ldr	r3, [pc, #64]	@ (8003a80 <USB_DevInit+0x2c4>)
 8003a3e:	4313      	orrs	r3, r2
 8003a40:	687a      	ldr	r2, [r7, #4]
 8003a42:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8003a44:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d005      	beq.n	8003a58 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	699b      	ldr	r3, [r3, #24]
 8003a50:	f043 0208 	orr.w	r2, r3, #8
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8003a58:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8003a5c:	2b01      	cmp	r3, #1
 8003a5e:	d107      	bne.n	8003a70 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	699b      	ldr	r3, [r3, #24]
 8003a64:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003a68:	f043 0304 	orr.w	r3, r3, #4
 8003a6c:	687a      	ldr	r2, [r7, #4]
 8003a6e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8003a70:	7dfb      	ldrb	r3, [r7, #23]
}
 8003a72:	4618      	mov	r0, r3
 8003a74:	3718      	adds	r7, #24
 8003a76:	46bd      	mov	sp, r7
 8003a78:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003a7c:	b004      	add	sp, #16
 8003a7e:	4770      	bx	lr
 8003a80:	803c3800 	.word	0x803c3800

08003a84 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003a84:	b480      	push	{r7}
 8003a86:	b085      	sub	sp, #20
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	6078      	str	r0, [r7, #4]
 8003a8c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8003a8e:	2300      	movs	r3, #0
 8003a90:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	3301      	adds	r3, #1
 8003a96:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003a9e:	d901      	bls.n	8003aa4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8003aa0:	2303      	movs	r3, #3
 8003aa2:	e01b      	b.n	8003adc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	691b      	ldr	r3, [r3, #16]
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	daf2      	bge.n	8003a92 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8003aac:	2300      	movs	r3, #0
 8003aae:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003ab0:	683b      	ldr	r3, [r7, #0]
 8003ab2:	019b      	lsls	r3, r3, #6
 8003ab4:	f043 0220 	orr.w	r2, r3, #32
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	3301      	adds	r3, #1
 8003ac0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003ac8:	d901      	bls.n	8003ace <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8003aca:	2303      	movs	r3, #3
 8003acc:	e006      	b.n	8003adc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	691b      	ldr	r3, [r3, #16]
 8003ad2:	f003 0320 	and.w	r3, r3, #32
 8003ad6:	2b20      	cmp	r3, #32
 8003ad8:	d0f0      	beq.n	8003abc <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8003ada:	2300      	movs	r3, #0
}
 8003adc:	4618      	mov	r0, r3
 8003ade:	3714      	adds	r7, #20
 8003ae0:	46bd      	mov	sp, r7
 8003ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae6:	4770      	bx	lr

08003ae8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003ae8:	b480      	push	{r7}
 8003aea:	b085      	sub	sp, #20
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003af0:	2300      	movs	r3, #0
 8003af2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	3301      	adds	r3, #1
 8003af8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003b00:	d901      	bls.n	8003b06 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8003b02:	2303      	movs	r3, #3
 8003b04:	e018      	b.n	8003b38 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	691b      	ldr	r3, [r3, #16]
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	daf2      	bge.n	8003af4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8003b0e:	2300      	movs	r3, #0
 8003b10:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	2210      	movs	r2, #16
 8003b16:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	3301      	adds	r3, #1
 8003b1c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003b24:	d901      	bls.n	8003b2a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8003b26:	2303      	movs	r3, #3
 8003b28:	e006      	b.n	8003b38 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	691b      	ldr	r3, [r3, #16]
 8003b2e:	f003 0310 	and.w	r3, r3, #16
 8003b32:	2b10      	cmp	r3, #16
 8003b34:	d0f0      	beq.n	8003b18 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8003b36:	2300      	movs	r3, #0
}
 8003b38:	4618      	mov	r0, r3
 8003b3a:	3714      	adds	r7, #20
 8003b3c:	46bd      	mov	sp, r7
 8003b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b42:	4770      	bx	lr

08003b44 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8003b44:	b480      	push	{r7}
 8003b46:	b085      	sub	sp, #20
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	6078      	str	r0, [r7, #4]
 8003b4c:	460b      	mov	r3, r1
 8003b4e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003b5a:	681a      	ldr	r2, [r3, #0]
 8003b5c:	78fb      	ldrb	r3, [r7, #3]
 8003b5e:	68f9      	ldr	r1, [r7, #12]
 8003b60:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003b64:	4313      	orrs	r3, r2
 8003b66:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8003b68:	2300      	movs	r3, #0
}
 8003b6a:	4618      	mov	r0, r3
 8003b6c:	3714      	adds	r7, #20
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b74:	4770      	bx	lr

08003b76 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8003b76:	b480      	push	{r7}
 8003b78:	b087      	sub	sp, #28
 8003b7a:	af00      	add	r7, sp, #0
 8003b7c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8003b82:	693b      	ldr	r3, [r7, #16]
 8003b84:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003b88:	689b      	ldr	r3, [r3, #8]
 8003b8a:	f003 0306 	and.w	r3, r3, #6
 8003b8e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d102      	bne.n	8003b9c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8003b96:	2300      	movs	r3, #0
 8003b98:	75fb      	strb	r3, [r7, #23]
 8003b9a:	e00a      	b.n	8003bb2 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	2b02      	cmp	r3, #2
 8003ba0:	d002      	beq.n	8003ba8 <USB_GetDevSpeed+0x32>
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	2b06      	cmp	r3, #6
 8003ba6:	d102      	bne.n	8003bae <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8003ba8:	2302      	movs	r3, #2
 8003baa:	75fb      	strb	r3, [r7, #23]
 8003bac:	e001      	b.n	8003bb2 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8003bae:	230f      	movs	r3, #15
 8003bb0:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8003bb2:	7dfb      	ldrb	r3, [r7, #23]
}
 8003bb4:	4618      	mov	r0, r3
 8003bb6:	371c      	adds	r7, #28
 8003bb8:	46bd      	mov	sp, r7
 8003bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bbe:	4770      	bx	lr

08003bc0 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8003bc0:	b480      	push	{r7}
 8003bc2:	b085      	sub	sp, #20
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	6078      	str	r0, [r7, #4]
 8003bc8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003bce:	683b      	ldr	r3, [r7, #0]
 8003bd0:	781b      	ldrb	r3, [r3, #0]
 8003bd2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003bd4:	683b      	ldr	r3, [r7, #0]
 8003bd6:	785b      	ldrb	r3, [r3, #1]
 8003bd8:	2b01      	cmp	r3, #1
 8003bda:	d13a      	bne.n	8003c52 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003be2:	69da      	ldr	r2, [r3, #28]
 8003be4:	683b      	ldr	r3, [r7, #0]
 8003be6:	781b      	ldrb	r3, [r3, #0]
 8003be8:	f003 030f 	and.w	r3, r3, #15
 8003bec:	2101      	movs	r1, #1
 8003bee:	fa01 f303 	lsl.w	r3, r1, r3
 8003bf2:	b29b      	uxth	r3, r3
 8003bf4:	68f9      	ldr	r1, [r7, #12]
 8003bf6:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003bfa:	4313      	orrs	r3, r2
 8003bfc:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8003bfe:	68bb      	ldr	r3, [r7, #8]
 8003c00:	015a      	lsls	r2, r3, #5
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	4413      	add	r3, r2
 8003c06:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d155      	bne.n	8003cc0 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003c14:	68bb      	ldr	r3, [r7, #8]
 8003c16:	015a      	lsls	r2, r3, #5
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	4413      	add	r3, r2
 8003c1c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003c20:	681a      	ldr	r2, [r3, #0]
 8003c22:	683b      	ldr	r3, [r7, #0]
 8003c24:	689b      	ldr	r3, [r3, #8]
 8003c26:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003c2a:	683b      	ldr	r3, [r7, #0]
 8003c2c:	791b      	ldrb	r3, [r3, #4]
 8003c2e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003c30:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003c32:	68bb      	ldr	r3, [r7, #8]
 8003c34:	059b      	lsls	r3, r3, #22
 8003c36:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003c38:	4313      	orrs	r3, r2
 8003c3a:	68ba      	ldr	r2, [r7, #8]
 8003c3c:	0151      	lsls	r1, r2, #5
 8003c3e:	68fa      	ldr	r2, [r7, #12]
 8003c40:	440a      	add	r2, r1
 8003c42:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003c46:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003c4a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003c4e:	6013      	str	r3, [r2, #0]
 8003c50:	e036      	b.n	8003cc0 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003c58:	69da      	ldr	r2, [r3, #28]
 8003c5a:	683b      	ldr	r3, [r7, #0]
 8003c5c:	781b      	ldrb	r3, [r3, #0]
 8003c5e:	f003 030f 	and.w	r3, r3, #15
 8003c62:	2101      	movs	r1, #1
 8003c64:	fa01 f303 	lsl.w	r3, r1, r3
 8003c68:	041b      	lsls	r3, r3, #16
 8003c6a:	68f9      	ldr	r1, [r7, #12]
 8003c6c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003c70:	4313      	orrs	r3, r2
 8003c72:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8003c74:	68bb      	ldr	r3, [r7, #8]
 8003c76:	015a      	lsls	r2, r3, #5
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	4413      	add	r3, r2
 8003c7c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d11a      	bne.n	8003cc0 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003c8a:	68bb      	ldr	r3, [r7, #8]
 8003c8c:	015a      	lsls	r2, r3, #5
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	4413      	add	r3, r2
 8003c92:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003c96:	681a      	ldr	r2, [r3, #0]
 8003c98:	683b      	ldr	r3, [r7, #0]
 8003c9a:	689b      	ldr	r3, [r3, #8]
 8003c9c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8003ca0:	683b      	ldr	r3, [r7, #0]
 8003ca2:	791b      	ldrb	r3, [r3, #4]
 8003ca4:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003ca6:	430b      	orrs	r3, r1
 8003ca8:	4313      	orrs	r3, r2
 8003caa:	68ba      	ldr	r2, [r7, #8]
 8003cac:	0151      	lsls	r1, r2, #5
 8003cae:	68fa      	ldr	r2, [r7, #12]
 8003cb0:	440a      	add	r2, r1
 8003cb2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003cb6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003cba:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003cbe:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8003cc0:	2300      	movs	r3, #0
}
 8003cc2:	4618      	mov	r0, r3
 8003cc4:	3714      	adds	r7, #20
 8003cc6:	46bd      	mov	sp, r7
 8003cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ccc:	4770      	bx	lr
	...

08003cd0 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8003cd0:	b480      	push	{r7}
 8003cd2:	b085      	sub	sp, #20
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	6078      	str	r0, [r7, #4]
 8003cd8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003cde:	683b      	ldr	r3, [r7, #0]
 8003ce0:	781b      	ldrb	r3, [r3, #0]
 8003ce2:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8003ce4:	683b      	ldr	r3, [r7, #0]
 8003ce6:	785b      	ldrb	r3, [r3, #1]
 8003ce8:	2b01      	cmp	r3, #1
 8003cea:	d161      	bne.n	8003db0 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003cec:	68bb      	ldr	r3, [r7, #8]
 8003cee:	015a      	lsls	r2, r3, #5
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	4413      	add	r3, r2
 8003cf4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003cfe:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003d02:	d11f      	bne.n	8003d44 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8003d04:	68bb      	ldr	r3, [r7, #8]
 8003d06:	015a      	lsls	r2, r3, #5
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	4413      	add	r3, r2
 8003d0c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	68ba      	ldr	r2, [r7, #8]
 8003d14:	0151      	lsls	r1, r2, #5
 8003d16:	68fa      	ldr	r2, [r7, #12]
 8003d18:	440a      	add	r2, r1
 8003d1a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003d1e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8003d22:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8003d24:	68bb      	ldr	r3, [r7, #8]
 8003d26:	015a      	lsls	r2, r3, #5
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	4413      	add	r3, r2
 8003d2c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	68ba      	ldr	r2, [r7, #8]
 8003d34:	0151      	lsls	r1, r2, #5
 8003d36:	68fa      	ldr	r2, [r7, #12]
 8003d38:	440a      	add	r2, r1
 8003d3a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003d3e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003d42:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003d4a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003d4c:	683b      	ldr	r3, [r7, #0]
 8003d4e:	781b      	ldrb	r3, [r3, #0]
 8003d50:	f003 030f 	and.w	r3, r3, #15
 8003d54:	2101      	movs	r1, #1
 8003d56:	fa01 f303 	lsl.w	r3, r1, r3
 8003d5a:	b29b      	uxth	r3, r3
 8003d5c:	43db      	mvns	r3, r3
 8003d5e:	68f9      	ldr	r1, [r7, #12]
 8003d60:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003d64:	4013      	ands	r3, r2
 8003d66:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003d6e:	69da      	ldr	r2, [r3, #28]
 8003d70:	683b      	ldr	r3, [r7, #0]
 8003d72:	781b      	ldrb	r3, [r3, #0]
 8003d74:	f003 030f 	and.w	r3, r3, #15
 8003d78:	2101      	movs	r1, #1
 8003d7a:	fa01 f303 	lsl.w	r3, r1, r3
 8003d7e:	b29b      	uxth	r3, r3
 8003d80:	43db      	mvns	r3, r3
 8003d82:	68f9      	ldr	r1, [r7, #12]
 8003d84:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003d88:	4013      	ands	r3, r2
 8003d8a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8003d8c:	68bb      	ldr	r3, [r7, #8]
 8003d8e:	015a      	lsls	r2, r3, #5
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	4413      	add	r3, r2
 8003d94:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003d98:	681a      	ldr	r2, [r3, #0]
 8003d9a:	68bb      	ldr	r3, [r7, #8]
 8003d9c:	0159      	lsls	r1, r3, #5
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	440b      	add	r3, r1
 8003da2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003da6:	4619      	mov	r1, r3
 8003da8:	4b35      	ldr	r3, [pc, #212]	@ (8003e80 <USB_DeactivateEndpoint+0x1b0>)
 8003daa:	4013      	ands	r3, r2
 8003dac:	600b      	str	r3, [r1, #0]
 8003dae:	e060      	b.n	8003e72 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003db0:	68bb      	ldr	r3, [r7, #8]
 8003db2:	015a      	lsls	r2, r3, #5
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	4413      	add	r3, r2
 8003db8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003dc2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003dc6:	d11f      	bne.n	8003e08 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003dc8:	68bb      	ldr	r3, [r7, #8]
 8003dca:	015a      	lsls	r2, r3, #5
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	4413      	add	r3, r2
 8003dd0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	68ba      	ldr	r2, [r7, #8]
 8003dd8:	0151      	lsls	r1, r2, #5
 8003dda:	68fa      	ldr	r2, [r7, #12]
 8003ddc:	440a      	add	r2, r1
 8003dde:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003de2:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8003de6:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8003de8:	68bb      	ldr	r3, [r7, #8]
 8003dea:	015a      	lsls	r2, r3, #5
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	4413      	add	r3, r2
 8003df0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	68ba      	ldr	r2, [r7, #8]
 8003df8:	0151      	lsls	r1, r2, #5
 8003dfa:	68fa      	ldr	r2, [r7, #12]
 8003dfc:	440a      	add	r2, r1
 8003dfe:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003e02:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003e06:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003e0e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003e10:	683b      	ldr	r3, [r7, #0]
 8003e12:	781b      	ldrb	r3, [r3, #0]
 8003e14:	f003 030f 	and.w	r3, r3, #15
 8003e18:	2101      	movs	r1, #1
 8003e1a:	fa01 f303 	lsl.w	r3, r1, r3
 8003e1e:	041b      	lsls	r3, r3, #16
 8003e20:	43db      	mvns	r3, r3
 8003e22:	68f9      	ldr	r1, [r7, #12]
 8003e24:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003e28:	4013      	ands	r3, r2
 8003e2a:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003e32:	69da      	ldr	r2, [r3, #28]
 8003e34:	683b      	ldr	r3, [r7, #0]
 8003e36:	781b      	ldrb	r3, [r3, #0]
 8003e38:	f003 030f 	and.w	r3, r3, #15
 8003e3c:	2101      	movs	r1, #1
 8003e3e:	fa01 f303 	lsl.w	r3, r1, r3
 8003e42:	041b      	lsls	r3, r3, #16
 8003e44:	43db      	mvns	r3, r3
 8003e46:	68f9      	ldr	r1, [r7, #12]
 8003e48:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003e4c:	4013      	ands	r3, r2
 8003e4e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8003e50:	68bb      	ldr	r3, [r7, #8]
 8003e52:	015a      	lsls	r2, r3, #5
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	4413      	add	r3, r2
 8003e58:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003e5c:	681a      	ldr	r2, [r3, #0]
 8003e5e:	68bb      	ldr	r3, [r7, #8]
 8003e60:	0159      	lsls	r1, r3, #5
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	440b      	add	r3, r1
 8003e66:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003e6a:	4619      	mov	r1, r3
 8003e6c:	4b05      	ldr	r3, [pc, #20]	@ (8003e84 <USB_DeactivateEndpoint+0x1b4>)
 8003e6e:	4013      	ands	r3, r2
 8003e70:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8003e72:	2300      	movs	r3, #0
}
 8003e74:	4618      	mov	r0, r3
 8003e76:	3714      	adds	r7, #20
 8003e78:	46bd      	mov	sp, r7
 8003e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7e:	4770      	bx	lr
 8003e80:	ec337800 	.word	0xec337800
 8003e84:	eff37800 	.word	0xeff37800

08003e88 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8003e88:	b580      	push	{r7, lr}
 8003e8a:	b08a      	sub	sp, #40	@ 0x28
 8003e8c:	af02      	add	r7, sp, #8
 8003e8e:	60f8      	str	r0, [r7, #12]
 8003e90:	60b9      	str	r1, [r7, #8]
 8003e92:	4613      	mov	r3, r2
 8003e94:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8003e9a:	68bb      	ldr	r3, [r7, #8]
 8003e9c:	781b      	ldrb	r3, [r3, #0]
 8003e9e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003ea0:	68bb      	ldr	r3, [r7, #8]
 8003ea2:	785b      	ldrb	r3, [r3, #1]
 8003ea4:	2b01      	cmp	r3, #1
 8003ea6:	f040 817f 	bne.w	80041a8 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8003eaa:	68bb      	ldr	r3, [r7, #8]
 8003eac:	691b      	ldr	r3, [r3, #16]
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d132      	bne.n	8003f18 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003eb2:	69bb      	ldr	r3, [r7, #24]
 8003eb4:	015a      	lsls	r2, r3, #5
 8003eb6:	69fb      	ldr	r3, [r7, #28]
 8003eb8:	4413      	add	r3, r2
 8003eba:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003ebe:	691b      	ldr	r3, [r3, #16]
 8003ec0:	69ba      	ldr	r2, [r7, #24]
 8003ec2:	0151      	lsls	r1, r2, #5
 8003ec4:	69fa      	ldr	r2, [r7, #28]
 8003ec6:	440a      	add	r2, r1
 8003ec8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003ecc:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8003ed0:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8003ed4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003ed6:	69bb      	ldr	r3, [r7, #24]
 8003ed8:	015a      	lsls	r2, r3, #5
 8003eda:	69fb      	ldr	r3, [r7, #28]
 8003edc:	4413      	add	r3, r2
 8003ede:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003ee2:	691b      	ldr	r3, [r3, #16]
 8003ee4:	69ba      	ldr	r2, [r7, #24]
 8003ee6:	0151      	lsls	r1, r2, #5
 8003ee8:	69fa      	ldr	r2, [r7, #28]
 8003eea:	440a      	add	r2, r1
 8003eec:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003ef0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8003ef4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003ef6:	69bb      	ldr	r3, [r7, #24]
 8003ef8:	015a      	lsls	r2, r3, #5
 8003efa:	69fb      	ldr	r3, [r7, #28]
 8003efc:	4413      	add	r3, r2
 8003efe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003f02:	691b      	ldr	r3, [r3, #16]
 8003f04:	69ba      	ldr	r2, [r7, #24]
 8003f06:	0151      	lsls	r1, r2, #5
 8003f08:	69fa      	ldr	r2, [r7, #28]
 8003f0a:	440a      	add	r2, r1
 8003f0c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003f10:	0cdb      	lsrs	r3, r3, #19
 8003f12:	04db      	lsls	r3, r3, #19
 8003f14:	6113      	str	r3, [r2, #16]
 8003f16:	e097      	b.n	8004048 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003f18:	69bb      	ldr	r3, [r7, #24]
 8003f1a:	015a      	lsls	r2, r3, #5
 8003f1c:	69fb      	ldr	r3, [r7, #28]
 8003f1e:	4413      	add	r3, r2
 8003f20:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003f24:	691b      	ldr	r3, [r3, #16]
 8003f26:	69ba      	ldr	r2, [r7, #24]
 8003f28:	0151      	lsls	r1, r2, #5
 8003f2a:	69fa      	ldr	r2, [r7, #28]
 8003f2c:	440a      	add	r2, r1
 8003f2e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003f32:	0cdb      	lsrs	r3, r3, #19
 8003f34:	04db      	lsls	r3, r3, #19
 8003f36:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003f38:	69bb      	ldr	r3, [r7, #24]
 8003f3a:	015a      	lsls	r2, r3, #5
 8003f3c:	69fb      	ldr	r3, [r7, #28]
 8003f3e:	4413      	add	r3, r2
 8003f40:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003f44:	691b      	ldr	r3, [r3, #16]
 8003f46:	69ba      	ldr	r2, [r7, #24]
 8003f48:	0151      	lsls	r1, r2, #5
 8003f4a:	69fa      	ldr	r2, [r7, #28]
 8003f4c:	440a      	add	r2, r1
 8003f4e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003f52:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8003f56:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8003f5a:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8003f5c:	69bb      	ldr	r3, [r7, #24]
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d11a      	bne.n	8003f98 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8003f62:	68bb      	ldr	r3, [r7, #8]
 8003f64:	691a      	ldr	r2, [r3, #16]
 8003f66:	68bb      	ldr	r3, [r7, #8]
 8003f68:	689b      	ldr	r3, [r3, #8]
 8003f6a:	429a      	cmp	r2, r3
 8003f6c:	d903      	bls.n	8003f76 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8003f6e:	68bb      	ldr	r3, [r7, #8]
 8003f70:	689a      	ldr	r2, [r3, #8]
 8003f72:	68bb      	ldr	r3, [r7, #8]
 8003f74:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003f76:	69bb      	ldr	r3, [r7, #24]
 8003f78:	015a      	lsls	r2, r3, #5
 8003f7a:	69fb      	ldr	r3, [r7, #28]
 8003f7c:	4413      	add	r3, r2
 8003f7e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003f82:	691b      	ldr	r3, [r3, #16]
 8003f84:	69ba      	ldr	r2, [r7, #24]
 8003f86:	0151      	lsls	r1, r2, #5
 8003f88:	69fa      	ldr	r2, [r7, #28]
 8003f8a:	440a      	add	r2, r1
 8003f8c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003f90:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8003f94:	6113      	str	r3, [r2, #16]
 8003f96:	e044      	b.n	8004022 <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8003f98:	68bb      	ldr	r3, [r7, #8]
 8003f9a:	691a      	ldr	r2, [r3, #16]
 8003f9c:	68bb      	ldr	r3, [r7, #8]
 8003f9e:	689b      	ldr	r3, [r3, #8]
 8003fa0:	4413      	add	r3, r2
 8003fa2:	1e5a      	subs	r2, r3, #1
 8003fa4:	68bb      	ldr	r3, [r7, #8]
 8003fa6:	689b      	ldr	r3, [r3, #8]
 8003fa8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fac:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 8003fae:	69bb      	ldr	r3, [r7, #24]
 8003fb0:	015a      	lsls	r2, r3, #5
 8003fb2:	69fb      	ldr	r3, [r7, #28]
 8003fb4:	4413      	add	r3, r2
 8003fb6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003fba:	691a      	ldr	r2, [r3, #16]
 8003fbc:	8afb      	ldrh	r3, [r7, #22]
 8003fbe:	04d9      	lsls	r1, r3, #19
 8003fc0:	4ba4      	ldr	r3, [pc, #656]	@ (8004254 <USB_EPStartXfer+0x3cc>)
 8003fc2:	400b      	ands	r3, r1
 8003fc4:	69b9      	ldr	r1, [r7, #24]
 8003fc6:	0148      	lsls	r0, r1, #5
 8003fc8:	69f9      	ldr	r1, [r7, #28]
 8003fca:	4401      	add	r1, r0
 8003fcc:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8003fd0:	4313      	orrs	r3, r2
 8003fd2:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 8003fd4:	68bb      	ldr	r3, [r7, #8]
 8003fd6:	791b      	ldrb	r3, [r3, #4]
 8003fd8:	2b01      	cmp	r3, #1
 8003fda:	d122      	bne.n	8004022 <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8003fdc:	69bb      	ldr	r3, [r7, #24]
 8003fde:	015a      	lsls	r2, r3, #5
 8003fe0:	69fb      	ldr	r3, [r7, #28]
 8003fe2:	4413      	add	r3, r2
 8003fe4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003fe8:	691b      	ldr	r3, [r3, #16]
 8003fea:	69ba      	ldr	r2, [r7, #24]
 8003fec:	0151      	lsls	r1, r2, #5
 8003fee:	69fa      	ldr	r2, [r7, #28]
 8003ff0:	440a      	add	r2, r1
 8003ff2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003ff6:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8003ffa:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 8003ffc:	69bb      	ldr	r3, [r7, #24]
 8003ffe:	015a      	lsls	r2, r3, #5
 8004000:	69fb      	ldr	r3, [r7, #28]
 8004002:	4413      	add	r3, r2
 8004004:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004008:	691a      	ldr	r2, [r3, #16]
 800400a:	8afb      	ldrh	r3, [r7, #22]
 800400c:	075b      	lsls	r3, r3, #29
 800400e:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 8004012:	69b9      	ldr	r1, [r7, #24]
 8004014:	0148      	lsls	r0, r1, #5
 8004016:	69f9      	ldr	r1, [r7, #28]
 8004018:	4401      	add	r1, r0
 800401a:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800401e:	4313      	orrs	r3, r2
 8004020:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004022:	69bb      	ldr	r3, [r7, #24]
 8004024:	015a      	lsls	r2, r3, #5
 8004026:	69fb      	ldr	r3, [r7, #28]
 8004028:	4413      	add	r3, r2
 800402a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800402e:	691a      	ldr	r2, [r3, #16]
 8004030:	68bb      	ldr	r3, [r7, #8]
 8004032:	691b      	ldr	r3, [r3, #16]
 8004034:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004038:	69b9      	ldr	r1, [r7, #24]
 800403a:	0148      	lsls	r0, r1, #5
 800403c:	69f9      	ldr	r1, [r7, #28]
 800403e:	4401      	add	r1, r0
 8004040:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8004044:	4313      	orrs	r3, r2
 8004046:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004048:	79fb      	ldrb	r3, [r7, #7]
 800404a:	2b01      	cmp	r3, #1
 800404c:	d14b      	bne.n	80040e6 <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800404e:	68bb      	ldr	r3, [r7, #8]
 8004050:	69db      	ldr	r3, [r3, #28]
 8004052:	2b00      	cmp	r3, #0
 8004054:	d009      	beq.n	800406a <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004056:	69bb      	ldr	r3, [r7, #24]
 8004058:	015a      	lsls	r2, r3, #5
 800405a:	69fb      	ldr	r3, [r7, #28]
 800405c:	4413      	add	r3, r2
 800405e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004062:	461a      	mov	r2, r3
 8004064:	68bb      	ldr	r3, [r7, #8]
 8004066:	69db      	ldr	r3, [r3, #28]
 8004068:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800406a:	68bb      	ldr	r3, [r7, #8]
 800406c:	791b      	ldrb	r3, [r3, #4]
 800406e:	2b01      	cmp	r3, #1
 8004070:	d128      	bne.n	80040c4 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004072:	69fb      	ldr	r3, [r7, #28]
 8004074:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004078:	689b      	ldr	r3, [r3, #8]
 800407a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800407e:	2b00      	cmp	r3, #0
 8004080:	d110      	bne.n	80040a4 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004082:	69bb      	ldr	r3, [r7, #24]
 8004084:	015a      	lsls	r2, r3, #5
 8004086:	69fb      	ldr	r3, [r7, #28]
 8004088:	4413      	add	r3, r2
 800408a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	69ba      	ldr	r2, [r7, #24]
 8004092:	0151      	lsls	r1, r2, #5
 8004094:	69fa      	ldr	r2, [r7, #28]
 8004096:	440a      	add	r2, r1
 8004098:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800409c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80040a0:	6013      	str	r3, [r2, #0]
 80040a2:	e00f      	b.n	80040c4 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80040a4:	69bb      	ldr	r3, [r7, #24]
 80040a6:	015a      	lsls	r2, r3, #5
 80040a8:	69fb      	ldr	r3, [r7, #28]
 80040aa:	4413      	add	r3, r2
 80040ac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	69ba      	ldr	r2, [r7, #24]
 80040b4:	0151      	lsls	r1, r2, #5
 80040b6:	69fa      	ldr	r2, [r7, #28]
 80040b8:	440a      	add	r2, r1
 80040ba:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80040be:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80040c2:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80040c4:	69bb      	ldr	r3, [r7, #24]
 80040c6:	015a      	lsls	r2, r3, #5
 80040c8:	69fb      	ldr	r3, [r7, #28]
 80040ca:	4413      	add	r3, r2
 80040cc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	69ba      	ldr	r2, [r7, #24]
 80040d4:	0151      	lsls	r1, r2, #5
 80040d6:	69fa      	ldr	r2, [r7, #28]
 80040d8:	440a      	add	r2, r1
 80040da:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80040de:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80040e2:	6013      	str	r3, [r2, #0]
 80040e4:	e166      	b.n	80043b4 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80040e6:	69bb      	ldr	r3, [r7, #24]
 80040e8:	015a      	lsls	r2, r3, #5
 80040ea:	69fb      	ldr	r3, [r7, #28]
 80040ec:	4413      	add	r3, r2
 80040ee:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	69ba      	ldr	r2, [r7, #24]
 80040f6:	0151      	lsls	r1, r2, #5
 80040f8:	69fa      	ldr	r2, [r7, #28]
 80040fa:	440a      	add	r2, r1
 80040fc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004100:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8004104:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004106:	68bb      	ldr	r3, [r7, #8]
 8004108:	791b      	ldrb	r3, [r3, #4]
 800410a:	2b01      	cmp	r3, #1
 800410c:	d015      	beq.n	800413a <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800410e:	68bb      	ldr	r3, [r7, #8]
 8004110:	691b      	ldr	r3, [r3, #16]
 8004112:	2b00      	cmp	r3, #0
 8004114:	f000 814e 	beq.w	80043b4 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004118:	69fb      	ldr	r3, [r7, #28]
 800411a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800411e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004120:	68bb      	ldr	r3, [r7, #8]
 8004122:	781b      	ldrb	r3, [r3, #0]
 8004124:	f003 030f 	and.w	r3, r3, #15
 8004128:	2101      	movs	r1, #1
 800412a:	fa01 f303 	lsl.w	r3, r1, r3
 800412e:	69f9      	ldr	r1, [r7, #28]
 8004130:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004134:	4313      	orrs	r3, r2
 8004136:	634b      	str	r3, [r1, #52]	@ 0x34
 8004138:	e13c      	b.n	80043b4 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800413a:	69fb      	ldr	r3, [r7, #28]
 800413c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004140:	689b      	ldr	r3, [r3, #8]
 8004142:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004146:	2b00      	cmp	r3, #0
 8004148:	d110      	bne.n	800416c <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800414a:	69bb      	ldr	r3, [r7, #24]
 800414c:	015a      	lsls	r2, r3, #5
 800414e:	69fb      	ldr	r3, [r7, #28]
 8004150:	4413      	add	r3, r2
 8004152:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	69ba      	ldr	r2, [r7, #24]
 800415a:	0151      	lsls	r1, r2, #5
 800415c:	69fa      	ldr	r2, [r7, #28]
 800415e:	440a      	add	r2, r1
 8004160:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004164:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8004168:	6013      	str	r3, [r2, #0]
 800416a:	e00f      	b.n	800418c <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800416c:	69bb      	ldr	r3, [r7, #24]
 800416e:	015a      	lsls	r2, r3, #5
 8004170:	69fb      	ldr	r3, [r7, #28]
 8004172:	4413      	add	r3, r2
 8004174:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	69ba      	ldr	r2, [r7, #24]
 800417c:	0151      	lsls	r1, r2, #5
 800417e:	69fa      	ldr	r2, [r7, #28]
 8004180:	440a      	add	r2, r1
 8004182:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004186:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800418a:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800418c:	68bb      	ldr	r3, [r7, #8]
 800418e:	68d9      	ldr	r1, [r3, #12]
 8004190:	68bb      	ldr	r3, [r7, #8]
 8004192:	781a      	ldrb	r2, [r3, #0]
 8004194:	68bb      	ldr	r3, [r7, #8]
 8004196:	691b      	ldr	r3, [r3, #16]
 8004198:	b298      	uxth	r0, r3
 800419a:	79fb      	ldrb	r3, [r7, #7]
 800419c:	9300      	str	r3, [sp, #0]
 800419e:	4603      	mov	r3, r0
 80041a0:	68f8      	ldr	r0, [r7, #12]
 80041a2:	f000 f9b9 	bl	8004518 <USB_WritePacket>
 80041a6:	e105      	b.n	80043b4 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80041a8:	69bb      	ldr	r3, [r7, #24]
 80041aa:	015a      	lsls	r2, r3, #5
 80041ac:	69fb      	ldr	r3, [r7, #28]
 80041ae:	4413      	add	r3, r2
 80041b0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80041b4:	691b      	ldr	r3, [r3, #16]
 80041b6:	69ba      	ldr	r2, [r7, #24]
 80041b8:	0151      	lsls	r1, r2, #5
 80041ba:	69fa      	ldr	r2, [r7, #28]
 80041bc:	440a      	add	r2, r1
 80041be:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80041c2:	0cdb      	lsrs	r3, r3, #19
 80041c4:	04db      	lsls	r3, r3, #19
 80041c6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80041c8:	69bb      	ldr	r3, [r7, #24]
 80041ca:	015a      	lsls	r2, r3, #5
 80041cc:	69fb      	ldr	r3, [r7, #28]
 80041ce:	4413      	add	r3, r2
 80041d0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80041d4:	691b      	ldr	r3, [r3, #16]
 80041d6:	69ba      	ldr	r2, [r7, #24]
 80041d8:	0151      	lsls	r1, r2, #5
 80041da:	69fa      	ldr	r2, [r7, #28]
 80041dc:	440a      	add	r2, r1
 80041de:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80041e2:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80041e6:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80041ea:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 80041ec:	69bb      	ldr	r3, [r7, #24]
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d132      	bne.n	8004258 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 80041f2:	68bb      	ldr	r3, [r7, #8]
 80041f4:	691b      	ldr	r3, [r3, #16]
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d003      	beq.n	8004202 <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 80041fa:	68bb      	ldr	r3, [r7, #8]
 80041fc:	689a      	ldr	r2, [r3, #8]
 80041fe:	68bb      	ldr	r3, [r7, #8]
 8004200:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8004202:	68bb      	ldr	r3, [r7, #8]
 8004204:	689a      	ldr	r2, [r3, #8]
 8004206:	68bb      	ldr	r3, [r7, #8]
 8004208:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800420a:	69bb      	ldr	r3, [r7, #24]
 800420c:	015a      	lsls	r2, r3, #5
 800420e:	69fb      	ldr	r3, [r7, #28]
 8004210:	4413      	add	r3, r2
 8004212:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004216:	691a      	ldr	r2, [r3, #16]
 8004218:	68bb      	ldr	r3, [r7, #8]
 800421a:	6a1b      	ldr	r3, [r3, #32]
 800421c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004220:	69b9      	ldr	r1, [r7, #24]
 8004222:	0148      	lsls	r0, r1, #5
 8004224:	69f9      	ldr	r1, [r7, #28]
 8004226:	4401      	add	r1, r0
 8004228:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800422c:	4313      	orrs	r3, r2
 800422e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004230:	69bb      	ldr	r3, [r7, #24]
 8004232:	015a      	lsls	r2, r3, #5
 8004234:	69fb      	ldr	r3, [r7, #28]
 8004236:	4413      	add	r3, r2
 8004238:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800423c:	691b      	ldr	r3, [r3, #16]
 800423e:	69ba      	ldr	r2, [r7, #24]
 8004240:	0151      	lsls	r1, r2, #5
 8004242:	69fa      	ldr	r2, [r7, #28]
 8004244:	440a      	add	r2, r1
 8004246:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800424a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800424e:	6113      	str	r3, [r2, #16]
 8004250:	e062      	b.n	8004318 <USB_EPStartXfer+0x490>
 8004252:	bf00      	nop
 8004254:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8004258:	68bb      	ldr	r3, [r7, #8]
 800425a:	691b      	ldr	r3, [r3, #16]
 800425c:	2b00      	cmp	r3, #0
 800425e:	d123      	bne.n	80042a8 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8004260:	69bb      	ldr	r3, [r7, #24]
 8004262:	015a      	lsls	r2, r3, #5
 8004264:	69fb      	ldr	r3, [r7, #28]
 8004266:	4413      	add	r3, r2
 8004268:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800426c:	691a      	ldr	r2, [r3, #16]
 800426e:	68bb      	ldr	r3, [r7, #8]
 8004270:	689b      	ldr	r3, [r3, #8]
 8004272:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004276:	69b9      	ldr	r1, [r7, #24]
 8004278:	0148      	lsls	r0, r1, #5
 800427a:	69f9      	ldr	r1, [r7, #28]
 800427c:	4401      	add	r1, r0
 800427e:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8004282:	4313      	orrs	r3, r2
 8004284:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004286:	69bb      	ldr	r3, [r7, #24]
 8004288:	015a      	lsls	r2, r3, #5
 800428a:	69fb      	ldr	r3, [r7, #28]
 800428c:	4413      	add	r3, r2
 800428e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004292:	691b      	ldr	r3, [r3, #16]
 8004294:	69ba      	ldr	r2, [r7, #24]
 8004296:	0151      	lsls	r1, r2, #5
 8004298:	69fa      	ldr	r2, [r7, #28]
 800429a:	440a      	add	r2, r1
 800429c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80042a0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80042a4:	6113      	str	r3, [r2, #16]
 80042a6:	e037      	b.n	8004318 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80042a8:	68bb      	ldr	r3, [r7, #8]
 80042aa:	691a      	ldr	r2, [r3, #16]
 80042ac:	68bb      	ldr	r3, [r7, #8]
 80042ae:	689b      	ldr	r3, [r3, #8]
 80042b0:	4413      	add	r3, r2
 80042b2:	1e5a      	subs	r2, r3, #1
 80042b4:	68bb      	ldr	r3, [r7, #8]
 80042b6:	689b      	ldr	r3, [r3, #8]
 80042b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80042bc:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 80042be:	68bb      	ldr	r3, [r7, #8]
 80042c0:	689b      	ldr	r3, [r3, #8]
 80042c2:	8afa      	ldrh	r2, [r7, #22]
 80042c4:	fb03 f202 	mul.w	r2, r3, r2
 80042c8:	68bb      	ldr	r3, [r7, #8]
 80042ca:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80042cc:	69bb      	ldr	r3, [r7, #24]
 80042ce:	015a      	lsls	r2, r3, #5
 80042d0:	69fb      	ldr	r3, [r7, #28]
 80042d2:	4413      	add	r3, r2
 80042d4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80042d8:	691a      	ldr	r2, [r3, #16]
 80042da:	8afb      	ldrh	r3, [r7, #22]
 80042dc:	04d9      	lsls	r1, r3, #19
 80042de:	4b38      	ldr	r3, [pc, #224]	@ (80043c0 <USB_EPStartXfer+0x538>)
 80042e0:	400b      	ands	r3, r1
 80042e2:	69b9      	ldr	r1, [r7, #24]
 80042e4:	0148      	lsls	r0, r1, #5
 80042e6:	69f9      	ldr	r1, [r7, #28]
 80042e8:	4401      	add	r1, r0
 80042ea:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80042ee:	4313      	orrs	r3, r2
 80042f0:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80042f2:	69bb      	ldr	r3, [r7, #24]
 80042f4:	015a      	lsls	r2, r3, #5
 80042f6:	69fb      	ldr	r3, [r7, #28]
 80042f8:	4413      	add	r3, r2
 80042fa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80042fe:	691a      	ldr	r2, [r3, #16]
 8004300:	68bb      	ldr	r3, [r7, #8]
 8004302:	6a1b      	ldr	r3, [r3, #32]
 8004304:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004308:	69b9      	ldr	r1, [r7, #24]
 800430a:	0148      	lsls	r0, r1, #5
 800430c:	69f9      	ldr	r1, [r7, #28]
 800430e:	4401      	add	r1, r0
 8004310:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8004314:	4313      	orrs	r3, r2
 8004316:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8004318:	79fb      	ldrb	r3, [r7, #7]
 800431a:	2b01      	cmp	r3, #1
 800431c:	d10d      	bne.n	800433a <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800431e:	68bb      	ldr	r3, [r7, #8]
 8004320:	68db      	ldr	r3, [r3, #12]
 8004322:	2b00      	cmp	r3, #0
 8004324:	d009      	beq.n	800433a <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004326:	68bb      	ldr	r3, [r7, #8]
 8004328:	68d9      	ldr	r1, [r3, #12]
 800432a:	69bb      	ldr	r3, [r7, #24]
 800432c:	015a      	lsls	r2, r3, #5
 800432e:	69fb      	ldr	r3, [r7, #28]
 8004330:	4413      	add	r3, r2
 8004332:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004336:	460a      	mov	r2, r1
 8004338:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800433a:	68bb      	ldr	r3, [r7, #8]
 800433c:	791b      	ldrb	r3, [r3, #4]
 800433e:	2b01      	cmp	r3, #1
 8004340:	d128      	bne.n	8004394 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004342:	69fb      	ldr	r3, [r7, #28]
 8004344:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004348:	689b      	ldr	r3, [r3, #8]
 800434a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800434e:	2b00      	cmp	r3, #0
 8004350:	d110      	bne.n	8004374 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8004352:	69bb      	ldr	r3, [r7, #24]
 8004354:	015a      	lsls	r2, r3, #5
 8004356:	69fb      	ldr	r3, [r7, #28]
 8004358:	4413      	add	r3, r2
 800435a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	69ba      	ldr	r2, [r7, #24]
 8004362:	0151      	lsls	r1, r2, #5
 8004364:	69fa      	ldr	r2, [r7, #28]
 8004366:	440a      	add	r2, r1
 8004368:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800436c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8004370:	6013      	str	r3, [r2, #0]
 8004372:	e00f      	b.n	8004394 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8004374:	69bb      	ldr	r3, [r7, #24]
 8004376:	015a      	lsls	r2, r3, #5
 8004378:	69fb      	ldr	r3, [r7, #28]
 800437a:	4413      	add	r3, r2
 800437c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	69ba      	ldr	r2, [r7, #24]
 8004384:	0151      	lsls	r1, r2, #5
 8004386:	69fa      	ldr	r2, [r7, #28]
 8004388:	440a      	add	r2, r1
 800438a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800438e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004392:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004394:	69bb      	ldr	r3, [r7, #24]
 8004396:	015a      	lsls	r2, r3, #5
 8004398:	69fb      	ldr	r3, [r7, #28]
 800439a:	4413      	add	r3, r2
 800439c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	69ba      	ldr	r2, [r7, #24]
 80043a4:	0151      	lsls	r1, r2, #5
 80043a6:	69fa      	ldr	r2, [r7, #28]
 80043a8:	440a      	add	r2, r1
 80043aa:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80043ae:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80043b2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80043b4:	2300      	movs	r3, #0
}
 80043b6:	4618      	mov	r0, r3
 80043b8:	3720      	adds	r7, #32
 80043ba:	46bd      	mov	sp, r7
 80043bc:	bd80      	pop	{r7, pc}
 80043be:	bf00      	nop
 80043c0:	1ff80000 	.word	0x1ff80000

080043c4 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80043c4:	b480      	push	{r7}
 80043c6:	b087      	sub	sp, #28
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	6078      	str	r0, [r7, #4]
 80043cc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80043ce:	2300      	movs	r3, #0
 80043d0:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80043d2:	2300      	movs	r3, #0
 80043d4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80043da:	683b      	ldr	r3, [r7, #0]
 80043dc:	785b      	ldrb	r3, [r3, #1]
 80043de:	2b01      	cmp	r3, #1
 80043e0:	d14a      	bne.n	8004478 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80043e2:	683b      	ldr	r3, [r7, #0]
 80043e4:	781b      	ldrb	r3, [r3, #0]
 80043e6:	015a      	lsls	r2, r3, #5
 80043e8:	693b      	ldr	r3, [r7, #16]
 80043ea:	4413      	add	r3, r2
 80043ec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80043f6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80043fa:	f040 8086 	bne.w	800450a <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80043fe:	683b      	ldr	r3, [r7, #0]
 8004400:	781b      	ldrb	r3, [r3, #0]
 8004402:	015a      	lsls	r2, r3, #5
 8004404:	693b      	ldr	r3, [r7, #16]
 8004406:	4413      	add	r3, r2
 8004408:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	683a      	ldr	r2, [r7, #0]
 8004410:	7812      	ldrb	r2, [r2, #0]
 8004412:	0151      	lsls	r1, r2, #5
 8004414:	693a      	ldr	r2, [r7, #16]
 8004416:	440a      	add	r2, r1
 8004418:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800441c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8004420:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8004422:	683b      	ldr	r3, [r7, #0]
 8004424:	781b      	ldrb	r3, [r3, #0]
 8004426:	015a      	lsls	r2, r3, #5
 8004428:	693b      	ldr	r3, [r7, #16]
 800442a:	4413      	add	r3, r2
 800442c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	683a      	ldr	r2, [r7, #0]
 8004434:	7812      	ldrb	r2, [r2, #0]
 8004436:	0151      	lsls	r1, r2, #5
 8004438:	693a      	ldr	r2, [r7, #16]
 800443a:	440a      	add	r2, r1
 800443c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004440:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004444:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	3301      	adds	r3, #1
 800444a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	f242 7210 	movw	r2, #10000	@ 0x2710
 8004452:	4293      	cmp	r3, r2
 8004454:	d902      	bls.n	800445c <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8004456:	2301      	movs	r3, #1
 8004458:	75fb      	strb	r3, [r7, #23]
          break;
 800445a:	e056      	b.n	800450a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800445c:	683b      	ldr	r3, [r7, #0]
 800445e:	781b      	ldrb	r3, [r3, #0]
 8004460:	015a      	lsls	r2, r3, #5
 8004462:	693b      	ldr	r3, [r7, #16]
 8004464:	4413      	add	r3, r2
 8004466:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004470:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004474:	d0e7      	beq.n	8004446 <USB_EPStopXfer+0x82>
 8004476:	e048      	b.n	800450a <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004478:	683b      	ldr	r3, [r7, #0]
 800447a:	781b      	ldrb	r3, [r3, #0]
 800447c:	015a      	lsls	r2, r3, #5
 800447e:	693b      	ldr	r3, [r7, #16]
 8004480:	4413      	add	r3, r2
 8004482:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800448c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004490:	d13b      	bne.n	800450a <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8004492:	683b      	ldr	r3, [r7, #0]
 8004494:	781b      	ldrb	r3, [r3, #0]
 8004496:	015a      	lsls	r2, r3, #5
 8004498:	693b      	ldr	r3, [r7, #16]
 800449a:	4413      	add	r3, r2
 800449c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	683a      	ldr	r2, [r7, #0]
 80044a4:	7812      	ldrb	r2, [r2, #0]
 80044a6:	0151      	lsls	r1, r2, #5
 80044a8:	693a      	ldr	r2, [r7, #16]
 80044aa:	440a      	add	r2, r1
 80044ac:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80044b0:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80044b4:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80044b6:	683b      	ldr	r3, [r7, #0]
 80044b8:	781b      	ldrb	r3, [r3, #0]
 80044ba:	015a      	lsls	r2, r3, #5
 80044bc:	693b      	ldr	r3, [r7, #16]
 80044be:	4413      	add	r3, r2
 80044c0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	683a      	ldr	r2, [r7, #0]
 80044c8:	7812      	ldrb	r2, [r2, #0]
 80044ca:	0151      	lsls	r1, r2, #5
 80044cc:	693a      	ldr	r2, [r7, #16]
 80044ce:	440a      	add	r2, r1
 80044d0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80044d4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80044d8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	3301      	adds	r3, #1
 80044de:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	f242 7210 	movw	r2, #10000	@ 0x2710
 80044e6:	4293      	cmp	r3, r2
 80044e8:	d902      	bls.n	80044f0 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80044ea:	2301      	movs	r3, #1
 80044ec:	75fb      	strb	r3, [r7, #23]
          break;
 80044ee:	e00c      	b.n	800450a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80044f0:	683b      	ldr	r3, [r7, #0]
 80044f2:	781b      	ldrb	r3, [r3, #0]
 80044f4:	015a      	lsls	r2, r3, #5
 80044f6:	693b      	ldr	r3, [r7, #16]
 80044f8:	4413      	add	r3, r2
 80044fa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004504:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004508:	d0e7      	beq.n	80044da <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800450a:	7dfb      	ldrb	r3, [r7, #23]
}
 800450c:	4618      	mov	r0, r3
 800450e:	371c      	adds	r7, #28
 8004510:	46bd      	mov	sp, r7
 8004512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004516:	4770      	bx	lr

08004518 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8004518:	b480      	push	{r7}
 800451a:	b089      	sub	sp, #36	@ 0x24
 800451c:	af00      	add	r7, sp, #0
 800451e:	60f8      	str	r0, [r7, #12]
 8004520:	60b9      	str	r1, [r7, #8]
 8004522:	4611      	mov	r1, r2
 8004524:	461a      	mov	r2, r3
 8004526:	460b      	mov	r3, r1
 8004528:	71fb      	strb	r3, [r7, #7]
 800452a:	4613      	mov	r3, r2
 800452c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8004532:	68bb      	ldr	r3, [r7, #8]
 8004534:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8004536:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800453a:	2b00      	cmp	r3, #0
 800453c:	d123      	bne.n	8004586 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800453e:	88bb      	ldrh	r3, [r7, #4]
 8004540:	3303      	adds	r3, #3
 8004542:	089b      	lsrs	r3, r3, #2
 8004544:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8004546:	2300      	movs	r3, #0
 8004548:	61bb      	str	r3, [r7, #24]
 800454a:	e018      	b.n	800457e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800454c:	79fb      	ldrb	r3, [r7, #7]
 800454e:	031a      	lsls	r2, r3, #12
 8004550:	697b      	ldr	r3, [r7, #20]
 8004552:	4413      	add	r3, r2
 8004554:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004558:	461a      	mov	r2, r3
 800455a:	69fb      	ldr	r3, [r7, #28]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8004560:	69fb      	ldr	r3, [r7, #28]
 8004562:	3301      	adds	r3, #1
 8004564:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004566:	69fb      	ldr	r3, [r7, #28]
 8004568:	3301      	adds	r3, #1
 800456a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800456c:	69fb      	ldr	r3, [r7, #28]
 800456e:	3301      	adds	r3, #1
 8004570:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004572:	69fb      	ldr	r3, [r7, #28]
 8004574:	3301      	adds	r3, #1
 8004576:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8004578:	69bb      	ldr	r3, [r7, #24]
 800457a:	3301      	adds	r3, #1
 800457c:	61bb      	str	r3, [r7, #24]
 800457e:	69ba      	ldr	r2, [r7, #24]
 8004580:	693b      	ldr	r3, [r7, #16]
 8004582:	429a      	cmp	r2, r3
 8004584:	d3e2      	bcc.n	800454c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8004586:	2300      	movs	r3, #0
}
 8004588:	4618      	mov	r0, r3
 800458a:	3724      	adds	r7, #36	@ 0x24
 800458c:	46bd      	mov	sp, r7
 800458e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004592:	4770      	bx	lr

08004594 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8004594:	b480      	push	{r7}
 8004596:	b08b      	sub	sp, #44	@ 0x2c
 8004598:	af00      	add	r7, sp, #0
 800459a:	60f8      	str	r0, [r7, #12]
 800459c:	60b9      	str	r1, [r7, #8]
 800459e:	4613      	mov	r3, r2
 80045a0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80045a6:	68bb      	ldr	r3, [r7, #8]
 80045a8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80045aa:	88fb      	ldrh	r3, [r7, #6]
 80045ac:	089b      	lsrs	r3, r3, #2
 80045ae:	b29b      	uxth	r3, r3
 80045b0:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80045b2:	88fb      	ldrh	r3, [r7, #6]
 80045b4:	f003 0303 	and.w	r3, r3, #3
 80045b8:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80045ba:	2300      	movs	r3, #0
 80045bc:	623b      	str	r3, [r7, #32]
 80045be:	e014      	b.n	80045ea <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80045c0:	69bb      	ldr	r3, [r7, #24]
 80045c2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80045c6:	681a      	ldr	r2, [r3, #0]
 80045c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045ca:	601a      	str	r2, [r3, #0]
    pDest++;
 80045cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045ce:	3301      	adds	r3, #1
 80045d0:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80045d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045d4:	3301      	adds	r3, #1
 80045d6:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80045d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045da:	3301      	adds	r3, #1
 80045dc:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80045de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045e0:	3301      	adds	r3, #1
 80045e2:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 80045e4:	6a3b      	ldr	r3, [r7, #32]
 80045e6:	3301      	adds	r3, #1
 80045e8:	623b      	str	r3, [r7, #32]
 80045ea:	6a3a      	ldr	r2, [r7, #32]
 80045ec:	697b      	ldr	r3, [r7, #20]
 80045ee:	429a      	cmp	r2, r3
 80045f0:	d3e6      	bcc.n	80045c0 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80045f2:	8bfb      	ldrh	r3, [r7, #30]
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d01e      	beq.n	8004636 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80045f8:	2300      	movs	r3, #0
 80045fa:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80045fc:	69bb      	ldr	r3, [r7, #24]
 80045fe:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004602:	461a      	mov	r2, r3
 8004604:	f107 0310 	add.w	r3, r7, #16
 8004608:	6812      	ldr	r2, [r2, #0]
 800460a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800460c:	693a      	ldr	r2, [r7, #16]
 800460e:	6a3b      	ldr	r3, [r7, #32]
 8004610:	b2db      	uxtb	r3, r3
 8004612:	00db      	lsls	r3, r3, #3
 8004614:	fa22 f303 	lsr.w	r3, r2, r3
 8004618:	b2da      	uxtb	r2, r3
 800461a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800461c:	701a      	strb	r2, [r3, #0]
      i++;
 800461e:	6a3b      	ldr	r3, [r7, #32]
 8004620:	3301      	adds	r3, #1
 8004622:	623b      	str	r3, [r7, #32]
      pDest++;
 8004624:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004626:	3301      	adds	r3, #1
 8004628:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800462a:	8bfb      	ldrh	r3, [r7, #30]
 800462c:	3b01      	subs	r3, #1
 800462e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8004630:	8bfb      	ldrh	r3, [r7, #30]
 8004632:	2b00      	cmp	r3, #0
 8004634:	d1ea      	bne.n	800460c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8004636:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8004638:	4618      	mov	r0, r3
 800463a:	372c      	adds	r7, #44	@ 0x2c
 800463c:	46bd      	mov	sp, r7
 800463e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004642:	4770      	bx	lr

08004644 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8004644:	b480      	push	{r7}
 8004646:	b085      	sub	sp, #20
 8004648:	af00      	add	r7, sp, #0
 800464a:	6078      	str	r0, [r7, #4]
 800464c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004652:	683b      	ldr	r3, [r7, #0]
 8004654:	781b      	ldrb	r3, [r3, #0]
 8004656:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004658:	683b      	ldr	r3, [r7, #0]
 800465a:	785b      	ldrb	r3, [r3, #1]
 800465c:	2b01      	cmp	r3, #1
 800465e:	d12c      	bne.n	80046ba <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004660:	68bb      	ldr	r3, [r7, #8]
 8004662:	015a      	lsls	r2, r3, #5
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	4413      	add	r3, r2
 8004668:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	2b00      	cmp	r3, #0
 8004670:	db12      	blt.n	8004698 <USB_EPSetStall+0x54>
 8004672:	68bb      	ldr	r3, [r7, #8]
 8004674:	2b00      	cmp	r3, #0
 8004676:	d00f      	beq.n	8004698 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8004678:	68bb      	ldr	r3, [r7, #8]
 800467a:	015a      	lsls	r2, r3, #5
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	4413      	add	r3, r2
 8004680:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	68ba      	ldr	r2, [r7, #8]
 8004688:	0151      	lsls	r1, r2, #5
 800468a:	68fa      	ldr	r2, [r7, #12]
 800468c:	440a      	add	r2, r1
 800468e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004692:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004696:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8004698:	68bb      	ldr	r3, [r7, #8]
 800469a:	015a      	lsls	r2, r3, #5
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	4413      	add	r3, r2
 80046a0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	68ba      	ldr	r2, [r7, #8]
 80046a8:	0151      	lsls	r1, r2, #5
 80046aa:	68fa      	ldr	r2, [r7, #12]
 80046ac:	440a      	add	r2, r1
 80046ae:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80046b2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80046b6:	6013      	str	r3, [r2, #0]
 80046b8:	e02b      	b.n	8004712 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80046ba:	68bb      	ldr	r3, [r7, #8]
 80046bc:	015a      	lsls	r2, r3, #5
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	4413      	add	r3, r2
 80046c2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	db12      	blt.n	80046f2 <USB_EPSetStall+0xae>
 80046cc:	68bb      	ldr	r3, [r7, #8]
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d00f      	beq.n	80046f2 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80046d2:	68bb      	ldr	r3, [r7, #8]
 80046d4:	015a      	lsls	r2, r3, #5
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	4413      	add	r3, r2
 80046da:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	68ba      	ldr	r2, [r7, #8]
 80046e2:	0151      	lsls	r1, r2, #5
 80046e4:	68fa      	ldr	r2, [r7, #12]
 80046e6:	440a      	add	r2, r1
 80046e8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80046ec:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80046f0:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80046f2:	68bb      	ldr	r3, [r7, #8]
 80046f4:	015a      	lsls	r2, r3, #5
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	4413      	add	r3, r2
 80046fa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	68ba      	ldr	r2, [r7, #8]
 8004702:	0151      	lsls	r1, r2, #5
 8004704:	68fa      	ldr	r2, [r7, #12]
 8004706:	440a      	add	r2, r1
 8004708:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800470c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004710:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004712:	2300      	movs	r3, #0
}
 8004714:	4618      	mov	r0, r3
 8004716:	3714      	adds	r7, #20
 8004718:	46bd      	mov	sp, r7
 800471a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800471e:	4770      	bx	lr

08004720 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8004720:	b480      	push	{r7}
 8004722:	b085      	sub	sp, #20
 8004724:	af00      	add	r7, sp, #0
 8004726:	6078      	str	r0, [r7, #4]
 8004728:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800472e:	683b      	ldr	r3, [r7, #0]
 8004730:	781b      	ldrb	r3, [r3, #0]
 8004732:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004734:	683b      	ldr	r3, [r7, #0]
 8004736:	785b      	ldrb	r3, [r3, #1]
 8004738:	2b01      	cmp	r3, #1
 800473a:	d128      	bne.n	800478e <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800473c:	68bb      	ldr	r3, [r7, #8]
 800473e:	015a      	lsls	r2, r3, #5
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	4413      	add	r3, r2
 8004744:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	68ba      	ldr	r2, [r7, #8]
 800474c:	0151      	lsls	r1, r2, #5
 800474e:	68fa      	ldr	r2, [r7, #12]
 8004750:	440a      	add	r2, r1
 8004752:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004756:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800475a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800475c:	683b      	ldr	r3, [r7, #0]
 800475e:	791b      	ldrb	r3, [r3, #4]
 8004760:	2b03      	cmp	r3, #3
 8004762:	d003      	beq.n	800476c <USB_EPClearStall+0x4c>
 8004764:	683b      	ldr	r3, [r7, #0]
 8004766:	791b      	ldrb	r3, [r3, #4]
 8004768:	2b02      	cmp	r3, #2
 800476a:	d138      	bne.n	80047de <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800476c:	68bb      	ldr	r3, [r7, #8]
 800476e:	015a      	lsls	r2, r3, #5
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	4413      	add	r3, r2
 8004774:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	68ba      	ldr	r2, [r7, #8]
 800477c:	0151      	lsls	r1, r2, #5
 800477e:	68fa      	ldr	r2, [r7, #12]
 8004780:	440a      	add	r2, r1
 8004782:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004786:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800478a:	6013      	str	r3, [r2, #0]
 800478c:	e027      	b.n	80047de <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800478e:	68bb      	ldr	r3, [r7, #8]
 8004790:	015a      	lsls	r2, r3, #5
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	4413      	add	r3, r2
 8004796:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	68ba      	ldr	r2, [r7, #8]
 800479e:	0151      	lsls	r1, r2, #5
 80047a0:	68fa      	ldr	r2, [r7, #12]
 80047a2:	440a      	add	r2, r1
 80047a4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80047a8:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80047ac:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80047ae:	683b      	ldr	r3, [r7, #0]
 80047b0:	791b      	ldrb	r3, [r3, #4]
 80047b2:	2b03      	cmp	r3, #3
 80047b4:	d003      	beq.n	80047be <USB_EPClearStall+0x9e>
 80047b6:	683b      	ldr	r3, [r7, #0]
 80047b8:	791b      	ldrb	r3, [r3, #4]
 80047ba:	2b02      	cmp	r3, #2
 80047bc:	d10f      	bne.n	80047de <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80047be:	68bb      	ldr	r3, [r7, #8]
 80047c0:	015a      	lsls	r2, r3, #5
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	4413      	add	r3, r2
 80047c6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	68ba      	ldr	r2, [r7, #8]
 80047ce:	0151      	lsls	r1, r2, #5
 80047d0:	68fa      	ldr	r2, [r7, #12]
 80047d2:	440a      	add	r2, r1
 80047d4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80047d8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80047dc:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80047de:	2300      	movs	r3, #0
}
 80047e0:	4618      	mov	r0, r3
 80047e2:	3714      	adds	r7, #20
 80047e4:	46bd      	mov	sp, r7
 80047e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ea:	4770      	bx	lr

080047ec <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80047ec:	b480      	push	{r7}
 80047ee:	b085      	sub	sp, #20
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	6078      	str	r0, [r7, #4]
 80047f4:	460b      	mov	r3, r1
 80047f6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	68fa      	ldr	r2, [r7, #12]
 8004806:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800480a:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800480e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004816:	681a      	ldr	r2, [r3, #0]
 8004818:	78fb      	ldrb	r3, [r7, #3]
 800481a:	011b      	lsls	r3, r3, #4
 800481c:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8004820:	68f9      	ldr	r1, [r7, #12]
 8004822:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004826:	4313      	orrs	r3, r2
 8004828:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800482a:	2300      	movs	r3, #0
}
 800482c:	4618      	mov	r0, r3
 800482e:	3714      	adds	r7, #20
 8004830:	46bd      	mov	sp, r7
 8004832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004836:	4770      	bx	lr

08004838 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8004838:	b480      	push	{r7}
 800483a:	b085      	sub	sp, #20
 800483c:	af00      	add	r7, sp, #0
 800483e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	68fa      	ldr	r2, [r7, #12]
 800484e:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8004852:	f023 0303 	bic.w	r3, r3, #3
 8004856:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800485e:	685b      	ldr	r3, [r3, #4]
 8004860:	68fa      	ldr	r2, [r7, #12]
 8004862:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004866:	f023 0302 	bic.w	r3, r3, #2
 800486a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800486c:	2300      	movs	r3, #0
}
 800486e:	4618      	mov	r0, r3
 8004870:	3714      	adds	r7, #20
 8004872:	46bd      	mov	sp, r7
 8004874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004878:	4770      	bx	lr

0800487a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800487a:	b480      	push	{r7}
 800487c:	b085      	sub	sp, #20
 800487e:	af00      	add	r7, sp, #0
 8004880:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	68fa      	ldr	r2, [r7, #12]
 8004890:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8004894:	f023 0303 	bic.w	r3, r3, #3
 8004898:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80048a0:	685b      	ldr	r3, [r3, #4]
 80048a2:	68fa      	ldr	r2, [r7, #12]
 80048a4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80048a8:	f043 0302 	orr.w	r3, r3, #2
 80048ac:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80048ae:	2300      	movs	r3, #0
}
 80048b0:	4618      	mov	r0, r3
 80048b2:	3714      	adds	r7, #20
 80048b4:	46bd      	mov	sp, r7
 80048b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ba:	4770      	bx	lr

080048bc <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 80048bc:	b480      	push	{r7}
 80048be:	b085      	sub	sp, #20
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	695b      	ldr	r3, [r3, #20]
 80048c8:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	699b      	ldr	r3, [r3, #24]
 80048ce:	68fa      	ldr	r2, [r7, #12]
 80048d0:	4013      	ands	r3, r2
 80048d2:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80048d4:	68fb      	ldr	r3, [r7, #12]
}
 80048d6:	4618      	mov	r0, r3
 80048d8:	3714      	adds	r7, #20
 80048da:	46bd      	mov	sp, r7
 80048dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e0:	4770      	bx	lr

080048e2 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80048e2:	b480      	push	{r7}
 80048e4:	b085      	sub	sp, #20
 80048e6:	af00      	add	r7, sp, #0
 80048e8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80048f4:	699b      	ldr	r3, [r3, #24]
 80048f6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80048fe:	69db      	ldr	r3, [r3, #28]
 8004900:	68ba      	ldr	r2, [r7, #8]
 8004902:	4013      	ands	r3, r2
 8004904:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8004906:	68bb      	ldr	r3, [r7, #8]
 8004908:	0c1b      	lsrs	r3, r3, #16
}
 800490a:	4618      	mov	r0, r3
 800490c:	3714      	adds	r7, #20
 800490e:	46bd      	mov	sp, r7
 8004910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004914:	4770      	bx	lr

08004916 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8004916:	b480      	push	{r7}
 8004918:	b085      	sub	sp, #20
 800491a:	af00      	add	r7, sp, #0
 800491c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004928:	699b      	ldr	r3, [r3, #24]
 800492a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004932:	69db      	ldr	r3, [r3, #28]
 8004934:	68ba      	ldr	r2, [r7, #8]
 8004936:	4013      	ands	r3, r2
 8004938:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800493a:	68bb      	ldr	r3, [r7, #8]
 800493c:	b29b      	uxth	r3, r3
}
 800493e:	4618      	mov	r0, r3
 8004940:	3714      	adds	r7, #20
 8004942:	46bd      	mov	sp, r7
 8004944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004948:	4770      	bx	lr

0800494a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800494a:	b480      	push	{r7}
 800494c:	b085      	sub	sp, #20
 800494e:	af00      	add	r7, sp, #0
 8004950:	6078      	str	r0, [r7, #4]
 8004952:	460b      	mov	r3, r1
 8004954:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800495a:	78fb      	ldrb	r3, [r7, #3]
 800495c:	015a      	lsls	r2, r3, #5
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	4413      	add	r3, r2
 8004962:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004966:	689b      	ldr	r3, [r3, #8]
 8004968:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004970:	695b      	ldr	r3, [r3, #20]
 8004972:	68ba      	ldr	r2, [r7, #8]
 8004974:	4013      	ands	r3, r2
 8004976:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004978:	68bb      	ldr	r3, [r7, #8]
}
 800497a:	4618      	mov	r0, r3
 800497c:	3714      	adds	r7, #20
 800497e:	46bd      	mov	sp, r7
 8004980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004984:	4770      	bx	lr

08004986 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004986:	b480      	push	{r7}
 8004988:	b087      	sub	sp, #28
 800498a:	af00      	add	r7, sp, #0
 800498c:	6078      	str	r0, [r7, #4]
 800498e:	460b      	mov	r3, r1
 8004990:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8004996:	697b      	ldr	r3, [r7, #20]
 8004998:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800499c:	691b      	ldr	r3, [r3, #16]
 800499e:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80049a0:	697b      	ldr	r3, [r7, #20]
 80049a2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80049a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80049a8:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80049aa:	78fb      	ldrb	r3, [r7, #3]
 80049ac:	f003 030f 	and.w	r3, r3, #15
 80049b0:	68fa      	ldr	r2, [r7, #12]
 80049b2:	fa22 f303 	lsr.w	r3, r2, r3
 80049b6:	01db      	lsls	r3, r3, #7
 80049b8:	b2db      	uxtb	r3, r3
 80049ba:	693a      	ldr	r2, [r7, #16]
 80049bc:	4313      	orrs	r3, r2
 80049be:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80049c0:	78fb      	ldrb	r3, [r7, #3]
 80049c2:	015a      	lsls	r2, r3, #5
 80049c4:	697b      	ldr	r3, [r7, #20]
 80049c6:	4413      	add	r3, r2
 80049c8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80049cc:	689b      	ldr	r3, [r3, #8]
 80049ce:	693a      	ldr	r2, [r7, #16]
 80049d0:	4013      	ands	r3, r2
 80049d2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80049d4:	68bb      	ldr	r3, [r7, #8]
}
 80049d6:	4618      	mov	r0, r3
 80049d8:	371c      	adds	r7, #28
 80049da:	46bd      	mov	sp, r7
 80049dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e0:	4770      	bx	lr

080049e2 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80049e2:	b480      	push	{r7}
 80049e4:	b083      	sub	sp, #12
 80049e6:	af00      	add	r7, sp, #0
 80049e8:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	695b      	ldr	r3, [r3, #20]
 80049ee:	f003 0301 	and.w	r3, r3, #1
}
 80049f2:	4618      	mov	r0, r3
 80049f4:	370c      	adds	r7, #12
 80049f6:	46bd      	mov	sp, r7
 80049f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049fc:	4770      	bx	lr

080049fe <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 80049fe:	b480      	push	{r7}
 8004a00:	b085      	sub	sp, #20
 8004a02:	af00      	add	r7, sp, #0
 8004a04:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	68fa      	ldr	r2, [r7, #12]
 8004a14:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004a18:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8004a1c:	f023 0307 	bic.w	r3, r3, #7
 8004a20:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004a28:	685b      	ldr	r3, [r3, #4]
 8004a2a:	68fa      	ldr	r2, [r7, #12]
 8004a2c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004a30:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004a34:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004a36:	2300      	movs	r3, #0
}
 8004a38:	4618      	mov	r0, r3
 8004a3a:	3714      	adds	r7, #20
 8004a3c:	46bd      	mov	sp, r7
 8004a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a42:	4770      	bx	lr

08004a44 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8004a44:	b480      	push	{r7}
 8004a46:	b087      	sub	sp, #28
 8004a48:	af00      	add	r7, sp, #0
 8004a4a:	60f8      	str	r0, [r7, #12]
 8004a4c:	460b      	mov	r3, r1
 8004a4e:	607a      	str	r2, [r7, #4]
 8004a50:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	333c      	adds	r3, #60	@ 0x3c
 8004a5a:	3304      	adds	r3, #4
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8004a60:	693b      	ldr	r3, [r7, #16]
 8004a62:	4a26      	ldr	r2, [pc, #152]	@ (8004afc <USB_EP0_OutStart+0xb8>)
 8004a64:	4293      	cmp	r3, r2
 8004a66:	d90a      	bls.n	8004a7e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004a68:	697b      	ldr	r3, [r7, #20]
 8004a6a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004a74:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004a78:	d101      	bne.n	8004a7e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8004a7a:	2300      	movs	r3, #0
 8004a7c:	e037      	b.n	8004aee <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8004a7e:	697b      	ldr	r3, [r7, #20]
 8004a80:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004a84:	461a      	mov	r2, r3
 8004a86:	2300      	movs	r3, #0
 8004a88:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004a8a:	697b      	ldr	r3, [r7, #20]
 8004a8c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004a90:	691b      	ldr	r3, [r3, #16]
 8004a92:	697a      	ldr	r2, [r7, #20]
 8004a94:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004a98:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004a9c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8004a9e:	697b      	ldr	r3, [r7, #20]
 8004aa0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004aa4:	691b      	ldr	r3, [r3, #16]
 8004aa6:	697a      	ldr	r2, [r7, #20]
 8004aa8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004aac:	f043 0318 	orr.w	r3, r3, #24
 8004ab0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8004ab2:	697b      	ldr	r3, [r7, #20]
 8004ab4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004ab8:	691b      	ldr	r3, [r3, #16]
 8004aba:	697a      	ldr	r2, [r7, #20]
 8004abc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004ac0:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8004ac4:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8004ac6:	7afb      	ldrb	r3, [r7, #11]
 8004ac8:	2b01      	cmp	r3, #1
 8004aca:	d10f      	bne.n	8004aec <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8004acc:	697b      	ldr	r3, [r7, #20]
 8004ace:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004ad2:	461a      	mov	r2, r3
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8004ad8:	697b      	ldr	r3, [r7, #20]
 8004ada:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	697a      	ldr	r2, [r7, #20]
 8004ae2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004ae6:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8004aea:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004aec:	2300      	movs	r3, #0
}
 8004aee:	4618      	mov	r0, r3
 8004af0:	371c      	adds	r7, #28
 8004af2:	46bd      	mov	sp, r7
 8004af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af8:	4770      	bx	lr
 8004afa:	bf00      	nop
 8004afc:	4f54300a 	.word	0x4f54300a

08004b00 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004b00:	b480      	push	{r7}
 8004b02:	b085      	sub	sp, #20
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004b08:	2300      	movs	r3, #0
 8004b0a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	3301      	adds	r3, #1
 8004b10:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004b18:	d901      	bls.n	8004b1e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004b1a:	2303      	movs	r3, #3
 8004b1c:	e01b      	b.n	8004b56 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	691b      	ldr	r3, [r3, #16]
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	daf2      	bge.n	8004b0c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004b26:	2300      	movs	r3, #0
 8004b28:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	691b      	ldr	r3, [r3, #16]
 8004b2e:	f043 0201 	orr.w	r2, r3, #1
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	3301      	adds	r3, #1
 8004b3a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004b42:	d901      	bls.n	8004b48 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004b44:	2303      	movs	r3, #3
 8004b46:	e006      	b.n	8004b56 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	691b      	ldr	r3, [r3, #16]
 8004b4c:	f003 0301 	and.w	r3, r3, #1
 8004b50:	2b01      	cmp	r3, #1
 8004b52:	d0f0      	beq.n	8004b36 <USB_CoreReset+0x36>

  return HAL_OK;
 8004b54:	2300      	movs	r3, #0
}
 8004b56:	4618      	mov	r0, r3
 8004b58:	3714      	adds	r7, #20
 8004b5a:	46bd      	mov	sp, r7
 8004b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b60:	4770      	bx	lr
	...

08004b64 <USBD_CUSTOM_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004b64:	b580      	push	{r7, lr}
 8004b66:	b084      	sub	sp, #16
 8004b68:	af00      	add	r7, sp, #0
 8004b6a:	6078      	str	r0, [r7, #4]
 8004b6c:	460b      	mov	r3, r1
 8004b6e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)USBD_malloc(sizeof(USBD_CUSTOM_HID_HandleTypeDef));
 8004b70:	201c      	movs	r0, #28
 8004b72:	f002 faef 	bl	8007154 <USBD_static_malloc>
 8004b76:	60f8      	str	r0, [r7, #12]

  if (hhid == NULL)
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d109      	bne.n	8004b92 <USBD_CUSTOM_HID_Init+0x2e>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	32b0      	adds	r2, #176	@ 0xb0
 8004b88:	2100      	movs	r1, #0
 8004b8a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8004b8e:	2302      	movs	r3, #2
 8004b90:	e08a      	b.n	8004ca8 <USBD_CUSTOM_HID_Init+0x144>
  }

  pdev->pClassDataCmsit[pdev->classId] = (void *)hhid;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	32b0      	adds	r2, #176	@ 0xb0
 8004b9c:	68f9      	ldr	r1, [r7, #12]
 8004b9e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	32b0      	adds	r2, #176	@ 0xb0
 8004bac:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  /* Get the Endpoints addresses allocated for this class instance */
  CUSTOMHIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
  CUSTOMHIDOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	7c1b      	ldrb	r3, [r3, #16]
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d11b      	bne.n	8004bf6 <USBD_CUSTOM_HID_Init+0x92>
  {
    pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].bInterval = CUSTOM_HID_HS_BINTERVAL;
 8004bbe:	4b3c      	ldr	r3, [pc, #240]	@ (8004cb0 <USBD_CUSTOM_HID_Init+0x14c>)
 8004bc0:	781b      	ldrb	r3, [r3, #0]
 8004bc2:	f003 020f 	and.w	r2, r3, #15
 8004bc6:	6879      	ldr	r1, [r7, #4]
 8004bc8:	4613      	mov	r3, r2
 8004bca:	009b      	lsls	r3, r3, #2
 8004bcc:	4413      	add	r3, r2
 8004bce:	009b      	lsls	r3, r3, #2
 8004bd0:	440b      	add	r3, r1
 8004bd2:	3326      	adds	r3, #38	@ 0x26
 8004bd4:	2205      	movs	r2, #5
 8004bd6:	801a      	strh	r2, [r3, #0]
    pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].bInterval = CUSTOM_HID_HS_BINTERVAL;
 8004bd8:	4b36      	ldr	r3, [pc, #216]	@ (8004cb4 <USBD_CUSTOM_HID_Init+0x150>)
 8004bda:	781b      	ldrb	r3, [r3, #0]
 8004bdc:	f003 020f 	and.w	r2, r3, #15
 8004be0:	6879      	ldr	r1, [r7, #4]
 8004be2:	4613      	mov	r3, r2
 8004be4:	009b      	lsls	r3, r3, #2
 8004be6:	4413      	add	r3, r2
 8004be8:	009b      	lsls	r3, r3, #2
 8004bea:	440b      	add	r3, r1
 8004bec:	f503 73b3 	add.w	r3, r3, #358	@ 0x166
 8004bf0:	2205      	movs	r2, #5
 8004bf2:	801a      	strh	r2, [r3, #0]
 8004bf4:	e01a      	b.n	8004c2c <USBD_CUSTOM_HID_Init+0xc8>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].bInterval = CUSTOM_HID_FS_BINTERVAL;
 8004bf6:	4b2e      	ldr	r3, [pc, #184]	@ (8004cb0 <USBD_CUSTOM_HID_Init+0x14c>)
 8004bf8:	781b      	ldrb	r3, [r3, #0]
 8004bfa:	f003 020f 	and.w	r2, r3, #15
 8004bfe:	6879      	ldr	r1, [r7, #4]
 8004c00:	4613      	mov	r3, r2
 8004c02:	009b      	lsls	r3, r3, #2
 8004c04:	4413      	add	r3, r2
 8004c06:	009b      	lsls	r3, r3, #2
 8004c08:	440b      	add	r3, r1
 8004c0a:	3326      	adds	r3, #38	@ 0x26
 8004c0c:	2205      	movs	r2, #5
 8004c0e:	801a      	strh	r2, [r3, #0]
    pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].bInterval = CUSTOM_HID_FS_BINTERVAL;
 8004c10:	4b28      	ldr	r3, [pc, #160]	@ (8004cb4 <USBD_CUSTOM_HID_Init+0x150>)
 8004c12:	781b      	ldrb	r3, [r3, #0]
 8004c14:	f003 020f 	and.w	r2, r3, #15
 8004c18:	6879      	ldr	r1, [r7, #4]
 8004c1a:	4613      	mov	r3, r2
 8004c1c:	009b      	lsls	r3, r3, #2
 8004c1e:	4413      	add	r3, r2
 8004c20:	009b      	lsls	r3, r3, #2
 8004c22:	440b      	add	r3, r1
 8004c24:	f503 73b3 	add.w	r3, r3, #358	@ 0x166
 8004c28:	2205      	movs	r2, #5
 8004c2a:	801a      	strh	r2, [r3, #0]
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, CUSTOMHIDInEpAdd, USBD_EP_TYPE_INTR,
 8004c2c:	4b20      	ldr	r3, [pc, #128]	@ (8004cb0 <USBD_CUSTOM_HID_Init+0x14c>)
 8004c2e:	7819      	ldrb	r1, [r3, #0]
 8004c30:	2302      	movs	r3, #2
 8004c32:	2203      	movs	r2, #3
 8004c34:	6878      	ldr	r0, [r7, #4]
 8004c36:	f002 f97c 	bl	8006f32 <USBD_LL_OpenEP>
                       CUSTOM_HID_EPIN_SIZE);

  pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].is_used = 1U;
 8004c3a:	4b1d      	ldr	r3, [pc, #116]	@ (8004cb0 <USBD_CUSTOM_HID_Init+0x14c>)
 8004c3c:	781b      	ldrb	r3, [r3, #0]
 8004c3e:	f003 020f 	and.w	r2, r3, #15
 8004c42:	6879      	ldr	r1, [r7, #4]
 8004c44:	4613      	mov	r3, r2
 8004c46:	009b      	lsls	r3, r3, #2
 8004c48:	4413      	add	r3, r2
 8004c4a:	009b      	lsls	r3, r3, #2
 8004c4c:	440b      	add	r3, r1
 8004c4e:	3324      	adds	r3, #36	@ 0x24
 8004c50:	2201      	movs	r2, #1
 8004c52:	801a      	strh	r2, [r3, #0]

  /* Open EP OUT */
  (void)USBD_LL_OpenEP(pdev, CUSTOMHIDOutEpAdd, USBD_EP_TYPE_INTR,
 8004c54:	4b17      	ldr	r3, [pc, #92]	@ (8004cb4 <USBD_CUSTOM_HID_Init+0x150>)
 8004c56:	7819      	ldrb	r1, [r3, #0]
 8004c58:	2302      	movs	r3, #2
 8004c5a:	2203      	movs	r2, #3
 8004c5c:	6878      	ldr	r0, [r7, #4]
 8004c5e:	f002 f968 	bl	8006f32 <USBD_LL_OpenEP>
                       CUSTOM_HID_EPOUT_SIZE);

  pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].is_used = 1U;
 8004c62:	4b14      	ldr	r3, [pc, #80]	@ (8004cb4 <USBD_CUSTOM_HID_Init+0x150>)
 8004c64:	781b      	ldrb	r3, [r3, #0]
 8004c66:	f003 020f 	and.w	r2, r3, #15
 8004c6a:	6879      	ldr	r1, [r7, #4]
 8004c6c:	4613      	mov	r3, r2
 8004c6e:	009b      	lsls	r3, r3, #2
 8004c70:	4413      	add	r3, r2
 8004c72:	009b      	lsls	r3, r3, #2
 8004c74:	440b      	add	r3, r1
 8004c76:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8004c7a:	2201      	movs	r2, #1
 8004c7c:	801a      	strh	r2, [r3, #0]

  hhid->state = CUSTOM_HID_IDLE;
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	2200      	movs	r2, #0
 8004c82:	761a      	strb	r2, [r3, #24]

  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8004c8a:	687a      	ldr	r2, [r7, #4]
 8004c8c:	33b0      	adds	r3, #176	@ 0xb0
 8004c8e:	009b      	lsls	r3, r3, #2
 8004c90:	4413      	add	r3, r2
 8004c92:	685b      	ldr	r3, [r3, #4]
 8004c94:	685b      	ldr	r3, [r3, #4]
 8004c96:	4798      	blx	r3

#ifndef USBD_CUSTOMHID_OUT_PREPARE_RECEIVE_DISABLED
  /* Prepare Out endpoint to receive 1st packet */
  (void)USBD_LL_PrepareReceive(pdev, CUSTOMHIDOutEpAdd, hhid->Report_buf,
 8004c98:	4b06      	ldr	r3, [pc, #24]	@ (8004cb4 <USBD_CUSTOM_HID_Init+0x150>)
 8004c9a:	7819      	ldrb	r1, [r3, #0]
 8004c9c:	68fa      	ldr	r2, [r7, #12]
 8004c9e:	2308      	movs	r3, #8
 8004ca0:	6878      	ldr	r0, [r7, #4]
 8004ca2:	f002 fa35 	bl	8007110 <USBD_LL_PrepareReceive>
                               USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);
#endif /* USBD_CUSTOMHID_OUT_PREPARE_RECEIVE_DISABLED */

  return (uint8_t)USBD_OK;
 8004ca6:	2300      	movs	r3, #0
}
 8004ca8:	4618      	mov	r0, r3
 8004caa:	3710      	adds	r7, #16
 8004cac:	46bd      	mov	sp, r7
 8004cae:	bd80      	pop	{r7, pc}
 8004cb0:	20000086 	.word	0x20000086
 8004cb4:	20000087 	.word	0x20000087

08004cb8 <USBD_CUSTOM_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004cb8:	b580      	push	{r7, lr}
 8004cba:	b082      	sub	sp, #8
 8004cbc:	af00      	add	r7, sp, #0
 8004cbe:	6078      	str	r0, [r7, #4]
 8004cc0:	460b      	mov	r3, r1
 8004cc2:	70fb      	strb	r3, [r7, #3]
  CUSTOMHIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
  CUSTOMHIDOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close CUSTOM_HID EP IN */
  (void)USBD_LL_CloseEP(pdev, CUSTOMHIDInEpAdd);
 8004cc4:	4b37      	ldr	r3, [pc, #220]	@ (8004da4 <USBD_CUSTOM_HID_DeInit+0xec>)
 8004cc6:	781b      	ldrb	r3, [r3, #0]
 8004cc8:	4619      	mov	r1, r3
 8004cca:	6878      	ldr	r0, [r7, #4]
 8004ccc:	f002 f957 	bl	8006f7e <USBD_LL_CloseEP>
  pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].is_used = 0U;
 8004cd0:	4b34      	ldr	r3, [pc, #208]	@ (8004da4 <USBD_CUSTOM_HID_DeInit+0xec>)
 8004cd2:	781b      	ldrb	r3, [r3, #0]
 8004cd4:	f003 020f 	and.w	r2, r3, #15
 8004cd8:	6879      	ldr	r1, [r7, #4]
 8004cda:	4613      	mov	r3, r2
 8004cdc:	009b      	lsls	r3, r3, #2
 8004cde:	4413      	add	r3, r2
 8004ce0:	009b      	lsls	r3, r3, #2
 8004ce2:	440b      	add	r3, r1
 8004ce4:	3324      	adds	r3, #36	@ 0x24
 8004ce6:	2200      	movs	r2, #0
 8004ce8:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].bInterval = 0U;
 8004cea:	4b2e      	ldr	r3, [pc, #184]	@ (8004da4 <USBD_CUSTOM_HID_DeInit+0xec>)
 8004cec:	781b      	ldrb	r3, [r3, #0]
 8004cee:	f003 020f 	and.w	r2, r3, #15
 8004cf2:	6879      	ldr	r1, [r7, #4]
 8004cf4:	4613      	mov	r3, r2
 8004cf6:	009b      	lsls	r3, r3, #2
 8004cf8:	4413      	add	r3, r2
 8004cfa:	009b      	lsls	r3, r3, #2
 8004cfc:	440b      	add	r3, r1
 8004cfe:	3326      	adds	r3, #38	@ 0x26
 8004d00:	2200      	movs	r2, #0
 8004d02:	801a      	strh	r2, [r3, #0]

  /* Close CUSTOM_HID EP OUT */
  (void)USBD_LL_CloseEP(pdev, CUSTOMHIDOutEpAdd);
 8004d04:	4b28      	ldr	r3, [pc, #160]	@ (8004da8 <USBD_CUSTOM_HID_DeInit+0xf0>)
 8004d06:	781b      	ldrb	r3, [r3, #0]
 8004d08:	4619      	mov	r1, r3
 8004d0a:	6878      	ldr	r0, [r7, #4]
 8004d0c:	f002 f937 	bl	8006f7e <USBD_LL_CloseEP>
  pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].is_used = 0U;
 8004d10:	4b25      	ldr	r3, [pc, #148]	@ (8004da8 <USBD_CUSTOM_HID_DeInit+0xf0>)
 8004d12:	781b      	ldrb	r3, [r3, #0]
 8004d14:	f003 020f 	and.w	r2, r3, #15
 8004d18:	6879      	ldr	r1, [r7, #4]
 8004d1a:	4613      	mov	r3, r2
 8004d1c:	009b      	lsls	r3, r3, #2
 8004d1e:	4413      	add	r3, r2
 8004d20:	009b      	lsls	r3, r3, #2
 8004d22:	440b      	add	r3, r1
 8004d24:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8004d28:	2200      	movs	r2, #0
 8004d2a:	801a      	strh	r2, [r3, #0]
  pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].bInterval = 0U;
 8004d2c:	4b1e      	ldr	r3, [pc, #120]	@ (8004da8 <USBD_CUSTOM_HID_DeInit+0xf0>)
 8004d2e:	781b      	ldrb	r3, [r3, #0]
 8004d30:	f003 020f 	and.w	r2, r3, #15
 8004d34:	6879      	ldr	r1, [r7, #4]
 8004d36:	4613      	mov	r3, r2
 8004d38:	009b      	lsls	r3, r3, #2
 8004d3a:	4413      	add	r3, r2
 8004d3c:	009b      	lsls	r3, r3, #2
 8004d3e:	440b      	add	r3, r1
 8004d40:	f503 73b3 	add.w	r3, r3, #358	@ 0x166
 8004d44:	2200      	movs	r2, #0
 8004d46:	801a      	strh	r2, [r3, #0]

  /* Free allocated memory */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	32b0      	adds	r2, #176	@ 0xb0
 8004d52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d01f      	beq.n	8004d9a <USBD_CUSTOM_HID_DeInit+0xe2>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8004d60:	687a      	ldr	r2, [r7, #4]
 8004d62:	33b0      	adds	r3, #176	@ 0xb0
 8004d64:	009b      	lsls	r3, r3, #2
 8004d66:	4413      	add	r3, r2
 8004d68:	685b      	ldr	r3, [r3, #4]
 8004d6a:	689b      	ldr	r3, [r3, #8]
 8004d6c:	4798      	blx	r3
    USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	32b0      	adds	r2, #176	@ 0xb0
 8004d78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004d7c:	4618      	mov	r0, r3
 8004d7e:	f002 f9f7 	bl	8007170 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	32b0      	adds	r2, #176	@ 0xb0
 8004d8c:	2100      	movs	r1, #0
 8004d8e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	2200      	movs	r2, #0
 8004d96:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8004d9a:	2300      	movs	r3, #0
}
 8004d9c:	4618      	mov	r0, r3
 8004d9e:	3708      	adds	r7, #8
 8004da0:	46bd      	mov	sp, r7
 8004da2:	bd80      	pop	{r7, pc}
 8004da4:	20000086 	.word	0x20000086
 8004da8:	20000087 	.word	0x20000087

08004dac <USBD_CUSTOM_HID_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_Setup(USBD_HandleTypeDef *pdev,
                                     USBD_SetupReqTypedef *req)
{
 8004dac:	b580      	push	{r7, lr}
 8004dae:	b088      	sub	sp, #32
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	6078      	str	r0, [r7, #4]
 8004db4:	6039      	str	r1, [r7, #0]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	32b0      	adds	r2, #176	@ 0xb0
 8004dc0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004dc4:	613b      	str	r3, [r7, #16]
  uint16_t len = 0U;
 8004dc6:	2300      	movs	r3, #0
 8004dc8:	83fb      	strh	r3, [r7, #30]
#ifdef USBD_CUSTOMHID_CTRL_REQ_GET_REPORT_ENABLED
  uint16_t ReportLength = 0U;
#endif /* USBD_CUSTOMHID_CTRL_REQ_GET_REPORT_ENABLED */
  uint8_t  *pbuf = NULL;
 8004dca:	2300      	movs	r3, #0
 8004dcc:	61bb      	str	r3, [r7, #24]
  uint16_t status_info = 0U;
 8004dce:	2300      	movs	r3, #0
 8004dd0:	81fb      	strh	r3, [r7, #14]
  USBD_StatusTypeDef ret = USBD_OK;
 8004dd2:	2300      	movs	r3, #0
 8004dd4:	75fb      	strb	r3, [r7, #23]

  if (hhid == NULL)
 8004dd6:	693b      	ldr	r3, [r7, #16]
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d101      	bne.n	8004de0 <USBD_CUSTOM_HID_Setup+0x34>
  {
    return (uint8_t)USBD_FAIL;
 8004ddc:	2303      	movs	r3, #3
 8004dde:	e102      	b.n	8004fe6 <USBD_CUSTOM_HID_Setup+0x23a>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004de0:	683b      	ldr	r3, [r7, #0]
 8004de2:	781b      	ldrb	r3, [r3, #0]
 8004de4:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d056      	beq.n	8004e9a <USBD_CUSTOM_HID_Setup+0xee>
 8004dec:	2b20      	cmp	r3, #32
 8004dee:	f040 80f2 	bne.w	8004fd6 <USBD_CUSTOM_HID_Setup+0x22a>
  {
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
 8004df2:	683b      	ldr	r3, [r7, #0]
 8004df4:	785b      	ldrb	r3, [r3, #1]
 8004df6:	3b02      	subs	r3, #2
 8004df8:	2b09      	cmp	r3, #9
 8004dfa:	d846      	bhi.n	8004e8a <USBD_CUSTOM_HID_Setup+0xde>
 8004dfc:	a201      	add	r2, pc, #4	@ (adr r2, 8004e04 <USBD_CUSTOM_HID_Setup+0x58>)
 8004dfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e02:	bf00      	nop
 8004e04:	08004e5d 	.word	0x08004e5d
 8004e08:	08004e3b 	.word	0x08004e3b
 8004e0c:	08004e8b 	.word	0x08004e8b
 8004e10:	08004e8b 	.word	0x08004e8b
 8004e14:	08004e8b 	.word	0x08004e8b
 8004e18:	08004e8b 	.word	0x08004e8b
 8004e1c:	08004e8b 	.word	0x08004e8b
 8004e20:	08004e6d 	.word	0x08004e6d
 8004e24:	08004e4b 	.word	0x08004e4b
 8004e28:	08004e2d 	.word	0x08004e2d
      {
        case CUSTOM_HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 8004e2c:	683b      	ldr	r3, [r7, #0]
 8004e2e:	885b      	ldrh	r3, [r3, #2]
 8004e30:	b2db      	uxtb	r3, r3
 8004e32:	461a      	mov	r2, r3
 8004e34:	693b      	ldr	r3, [r7, #16]
 8004e36:	609a      	str	r2, [r3, #8]
          break;
 8004e38:	e02e      	b.n	8004e98 <USBD_CUSTOM_HID_Setup+0xec>

        case CUSTOM_HID_REQ_GET_PROTOCOL:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 8004e3a:	693b      	ldr	r3, [r7, #16]
 8004e3c:	3308      	adds	r3, #8
 8004e3e:	2201      	movs	r2, #1
 8004e40:	4619      	mov	r1, r3
 8004e42:	6878      	ldr	r0, [r7, #4]
 8004e44:	f001 fce0 	bl	8006808 <USBD_CtlSendData>
          break;
 8004e48:	e026      	b.n	8004e98 <USBD_CUSTOM_HID_Setup+0xec>

        case CUSTOM_HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8004e4a:	683b      	ldr	r3, [r7, #0]
 8004e4c:	885b      	ldrh	r3, [r3, #2]
 8004e4e:	0a1b      	lsrs	r3, r3, #8
 8004e50:	b29b      	uxth	r3, r3
 8004e52:	b2db      	uxtb	r3, r3
 8004e54:	461a      	mov	r2, r3
 8004e56:	693b      	ldr	r3, [r7, #16]
 8004e58:	60da      	str	r2, [r3, #12]
          break;
 8004e5a:	e01d      	b.n	8004e98 <USBD_CUSTOM_HID_Setup+0xec>

        case CUSTOM_HID_REQ_GET_IDLE:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 8004e5c:	693b      	ldr	r3, [r7, #16]
 8004e5e:	330c      	adds	r3, #12
 8004e60:	2201      	movs	r2, #1
 8004e62:	4619      	mov	r1, r3
 8004e64:	6878      	ldr	r0, [r7, #4]
 8004e66:	f001 fccf 	bl	8006808 <USBD_CtlSendData>
          break;
 8004e6a:	e015      	b.n	8004e98 <USBD_CUSTOM_HID_Setup+0xec>
            ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->CtrlReqComplete(req->bRequest,
                                                                                            req->wLength);
          }
#endif /* USBD_CUSTOMHID_CTRL_REQ_COMPLETE_CALLBACK_ENABLED */
#ifndef USBD_CUSTOMHID_EP0_OUT_PREPARE_RECEIVE_DISABLED
          hhid->IsReportAvailable = 1U;
 8004e6c:	693b      	ldr	r3, [r7, #16]
 8004e6e:	2201      	movs	r2, #1
 8004e70:	615a      	str	r2, [r3, #20]
          (void)USBD_CtlPrepareRx(pdev, hhid->Report_buf,
 8004e72:	6939      	ldr	r1, [r7, #16]
                                  MIN(req->wLength, USBD_CUSTOMHID_OUTREPORT_BUF_SIZE));
 8004e74:	683b      	ldr	r3, [r7, #0]
 8004e76:	88db      	ldrh	r3, [r3, #6]
 8004e78:	2b08      	cmp	r3, #8
 8004e7a:	bf28      	it	cs
 8004e7c:	2308      	movcs	r3, #8
 8004e7e:	b29b      	uxth	r3, r3
          (void)USBD_CtlPrepareRx(pdev, hhid->Report_buf,
 8004e80:	461a      	mov	r2, r3
 8004e82:	6878      	ldr	r0, [r7, #4]
 8004e84:	f001 fcec 	bl	8006860 <USBD_CtlPrepareRx>
#endif /* USBD_CUSTOMHID_EP0_OUT_PREPARE_RECEIVE_DISABLED */
          break;
 8004e88:	e006      	b.n	8004e98 <USBD_CUSTOM_HID_Setup+0xec>
          }
          break;
#endif /* USBD_CUSTOMHID_CTRL_REQ_GET_REPORT_ENABLED */

        default:
          USBD_CtlError(pdev, req);
 8004e8a:	6839      	ldr	r1, [r7, #0]
 8004e8c:	6878      	ldr	r0, [r7, #4]
 8004e8e:	f001 fc3e 	bl	800670e <USBD_CtlError>
          ret = USBD_FAIL;
 8004e92:	2303      	movs	r3, #3
 8004e94:	75fb      	strb	r3, [r7, #23]
          break;
 8004e96:	bf00      	nop
      }
      break;
 8004e98:	e0a4      	b.n	8004fe4 <USBD_CUSTOM_HID_Setup+0x238>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8004e9a:	683b      	ldr	r3, [r7, #0]
 8004e9c:	785b      	ldrb	r3, [r3, #1]
 8004e9e:	2b0b      	cmp	r3, #11
 8004ea0:	f200 8090 	bhi.w	8004fc4 <USBD_CUSTOM_HID_Setup+0x218>
 8004ea4:	a201      	add	r2, pc, #4	@ (adr r2, 8004eac <USBD_CUSTOM_HID_Setup+0x100>)
 8004ea6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004eaa:	bf00      	nop
 8004eac:	08004edd 	.word	0x08004edd
 8004eb0:	08004fd3 	.word	0x08004fd3
 8004eb4:	08004fc5 	.word	0x08004fc5
 8004eb8:	08004fc5 	.word	0x08004fc5
 8004ebc:	08004fc5 	.word	0x08004fc5
 8004ec0:	08004fc5 	.word	0x08004fc5
 8004ec4:	08004f07 	.word	0x08004f07
 8004ec8:	08004fc5 	.word	0x08004fc5
 8004ecc:	08004fc5 	.word	0x08004fc5
 8004ed0:	08004fc5 	.word	0x08004fc5
 8004ed4:	08004f73 	.word	0x08004f73
 8004ed8:	08004f9d 	.word	0x08004f9d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8004ee2:	b2db      	uxtb	r3, r3
 8004ee4:	2b03      	cmp	r3, #3
 8004ee6:	d107      	bne.n	8004ef8 <USBD_CUSTOM_HID_Setup+0x14c>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8004ee8:	f107 030e 	add.w	r3, r7, #14
 8004eec:	2202      	movs	r2, #2
 8004eee:	4619      	mov	r1, r3
 8004ef0:	6878      	ldr	r0, [r7, #4]
 8004ef2:	f001 fc89 	bl	8006808 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8004ef6:	e06d      	b.n	8004fd4 <USBD_CUSTOM_HID_Setup+0x228>
            USBD_CtlError(pdev, req);
 8004ef8:	6839      	ldr	r1, [r7, #0]
 8004efa:	6878      	ldr	r0, [r7, #4]
 8004efc:	f001 fc07 	bl	800670e <USBD_CtlError>
            ret = USBD_FAIL;
 8004f00:	2303      	movs	r3, #3
 8004f02:	75fb      	strb	r3, [r7, #23]
          break;
 8004f04:	e066      	b.n	8004fd4 <USBD_CUSTOM_HID_Setup+0x228>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == CUSTOM_HID_REPORT_DESC)
 8004f06:	683b      	ldr	r3, [r7, #0]
 8004f08:	885b      	ldrh	r3, [r3, #2]
 8004f0a:	0a1b      	lsrs	r3, r3, #8
 8004f0c:	b29b      	uxth	r3, r3
 8004f0e:	2b22      	cmp	r3, #34	@ 0x22
 8004f10:	d110      	bne.n	8004f34 <USBD_CUSTOM_HID_Setup+0x188>
          {
            len = MIN(USBD_CUSTOM_HID_REPORT_DESC_SIZE, req->wLength);
 8004f12:	683b      	ldr	r3, [r7, #0]
 8004f14:	88db      	ldrh	r3, [r3, #6]
 8004f16:	2b37      	cmp	r3, #55	@ 0x37
 8004f18:	bf28      	it	cs
 8004f1a:	2337      	movcs	r3, #55	@ 0x37
 8004f1c:	83fb      	strh	r3, [r7, #30]
            pbuf = ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->pReport;
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8004f24:	687a      	ldr	r2, [r7, #4]
 8004f26:	33b0      	adds	r3, #176	@ 0xb0
 8004f28:	009b      	lsls	r3, r3, #2
 8004f2a:	4413      	add	r3, r2
 8004f2c:	685b      	ldr	r3, [r3, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	61bb      	str	r3, [r7, #24]
 8004f32:	e00d      	b.n	8004f50 <USBD_CUSTOM_HID_Setup+0x1a4>
          }
          else
          {
            if ((req->wValue >> 8) == CUSTOM_HID_DESCRIPTOR_TYPE)
 8004f34:	683b      	ldr	r3, [r7, #0]
 8004f36:	885b      	ldrh	r3, [r3, #2]
 8004f38:	0a1b      	lsrs	r3, r3, #8
 8004f3a:	b29b      	uxth	r3, r3
 8004f3c:	2b21      	cmp	r3, #33	@ 0x21
 8004f3e:	d107      	bne.n	8004f50 <USBD_CUSTOM_HID_Setup+0x1a4>
            {
              pbuf = USBD_CUSTOM_HID_Desc;
 8004f40:	4b2b      	ldr	r3, [pc, #172]	@ (8004ff0 <USBD_CUSTOM_HID_Setup+0x244>)
 8004f42:	61bb      	str	r3, [r7, #24]
              len = MIN(USB_CUSTOM_HID_DESC_SIZ, req->wLength);
 8004f44:	683b      	ldr	r3, [r7, #0]
 8004f46:	88db      	ldrh	r3, [r3, #6]
 8004f48:	2b09      	cmp	r3, #9
 8004f4a:	bf28      	it	cs
 8004f4c:	2309      	movcs	r3, #9
 8004f4e:	83fb      	strh	r3, [r7, #30]
            }
          }

          if (pbuf != NULL)
 8004f50:	69bb      	ldr	r3, [r7, #24]
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d006      	beq.n	8004f64 <USBD_CUSTOM_HID_Setup+0x1b8>
          {
            (void)USBD_CtlSendData(pdev, pbuf, len);
 8004f56:	8bfb      	ldrh	r3, [r7, #30]
 8004f58:	461a      	mov	r2, r3
 8004f5a:	69b9      	ldr	r1, [r7, #24]
 8004f5c:	6878      	ldr	r0, [r7, #4]
 8004f5e:	f001 fc53 	bl	8006808 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8004f62:	e037      	b.n	8004fd4 <USBD_CUSTOM_HID_Setup+0x228>
            USBD_CtlError(pdev, req);
 8004f64:	6839      	ldr	r1, [r7, #0]
 8004f66:	6878      	ldr	r0, [r7, #4]
 8004f68:	f001 fbd1 	bl	800670e <USBD_CtlError>
            ret = USBD_FAIL;
 8004f6c:	2303      	movs	r3, #3
 8004f6e:	75fb      	strb	r3, [r7, #23]
          break;
 8004f70:	e030      	b.n	8004fd4 <USBD_CUSTOM_HID_Setup+0x228>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8004f78:	b2db      	uxtb	r3, r3
 8004f7a:	2b03      	cmp	r3, #3
 8004f7c:	d107      	bne.n	8004f8e <USBD_CUSTOM_HID_Setup+0x1e2>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 8004f7e:	693b      	ldr	r3, [r7, #16]
 8004f80:	3310      	adds	r3, #16
 8004f82:	2201      	movs	r2, #1
 8004f84:	4619      	mov	r1, r3
 8004f86:	6878      	ldr	r0, [r7, #4]
 8004f88:	f001 fc3e 	bl	8006808 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8004f8c:	e022      	b.n	8004fd4 <USBD_CUSTOM_HID_Setup+0x228>
            USBD_CtlError(pdev, req);
 8004f8e:	6839      	ldr	r1, [r7, #0]
 8004f90:	6878      	ldr	r0, [r7, #4]
 8004f92:	f001 fbbc 	bl	800670e <USBD_CtlError>
            ret = USBD_FAIL;
 8004f96:	2303      	movs	r3, #3
 8004f98:	75fb      	strb	r3, [r7, #23]
          break;
 8004f9a:	e01b      	b.n	8004fd4 <USBD_CUSTOM_HID_Setup+0x228>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8004fa2:	b2db      	uxtb	r3, r3
 8004fa4:	2b03      	cmp	r3, #3
 8004fa6:	d106      	bne.n	8004fb6 <USBD_CUSTOM_HID_Setup+0x20a>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 8004fa8:	683b      	ldr	r3, [r7, #0]
 8004faa:	885b      	ldrh	r3, [r3, #2]
 8004fac:	b2db      	uxtb	r3, r3
 8004fae:	461a      	mov	r2, r3
 8004fb0:	693b      	ldr	r3, [r7, #16]
 8004fb2:	611a      	str	r2, [r3, #16]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8004fb4:	e00e      	b.n	8004fd4 <USBD_CUSTOM_HID_Setup+0x228>
            USBD_CtlError(pdev, req);
 8004fb6:	6839      	ldr	r1, [r7, #0]
 8004fb8:	6878      	ldr	r0, [r7, #4]
 8004fba:	f001 fba8 	bl	800670e <USBD_CtlError>
            ret = USBD_FAIL;
 8004fbe:	2303      	movs	r3, #3
 8004fc0:	75fb      	strb	r3, [r7, #23]
          break;
 8004fc2:	e007      	b.n	8004fd4 <USBD_CUSTOM_HID_Setup+0x228>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8004fc4:	6839      	ldr	r1, [r7, #0]
 8004fc6:	6878      	ldr	r0, [r7, #4]
 8004fc8:	f001 fba1 	bl	800670e <USBD_CtlError>
          ret = USBD_FAIL;
 8004fcc:	2303      	movs	r3, #3
 8004fce:	75fb      	strb	r3, [r7, #23]
          break;
 8004fd0:	e000      	b.n	8004fd4 <USBD_CUSTOM_HID_Setup+0x228>
          break;
 8004fd2:	bf00      	nop
      }
      break;
 8004fd4:	e006      	b.n	8004fe4 <USBD_CUSTOM_HID_Setup+0x238>

    default:
      USBD_CtlError(pdev, req);
 8004fd6:	6839      	ldr	r1, [r7, #0]
 8004fd8:	6878      	ldr	r0, [r7, #4]
 8004fda:	f001 fb98 	bl	800670e <USBD_CtlError>
      ret = USBD_FAIL;
 8004fde:	2303      	movs	r3, #3
 8004fe0:	75fb      	strb	r3, [r7, #23]
      break;
 8004fe2:	bf00      	nop
  }
  return (uint8_t)ret;
 8004fe4:	7dfb      	ldrb	r3, [r7, #23]
}
 8004fe6:	4618      	mov	r0, r3
 8004fe8:	3720      	adds	r7, #32
 8004fea:	46bd      	mov	sp, r7
 8004fec:	bd80      	pop	{r7, pc}
 8004fee:	bf00      	nop
 8004ff0:	20000070 	.word	0x20000070

08004ff4 <USBD_CUSTOM_HID_SendReport>:
{
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CUSTOM_HID_SendReport(USBD_HandleTypeDef *pdev,
                                   uint8_t *report, uint16_t len)
{
 8004ff4:	b580      	push	{r7, lr}
 8004ff6:	b086      	sub	sp, #24
 8004ff8:	af00      	add	r7, sp, #0
 8004ffa:	60f8      	str	r0, [r7, #12]
 8004ffc:	60b9      	str	r1, [r7, #8]
 8004ffe:	4613      	mov	r3, r2
 8005000:	80fb      	strh	r3, [r7, #6]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	32b0      	adds	r2, #176	@ 0xb0
 800500c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005010:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hhid == NULL)
 8005012:	697b      	ldr	r3, [r7, #20]
 8005014:	2b00      	cmp	r3, #0
 8005016:	d101      	bne.n	800501c <USBD_CUSTOM_HID_SendReport+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8005018:	2303      	movs	r3, #3
 800501a:	e017      	b.n	800504c <USBD_CUSTOM_HID_SendReport+0x58>
#ifdef USE_USBD_COMPOSITE
  /* Get Endpoint IN address allocated for this class instance */
  CUSTOMHIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, ClassId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005022:	b2db      	uxtb	r3, r3
 8005024:	2b03      	cmp	r3, #3
 8005026:	d110      	bne.n	800504a <USBD_CUSTOM_HID_SendReport+0x56>
  {
    if (hhid->state == CUSTOM_HID_IDLE)
 8005028:	697b      	ldr	r3, [r7, #20]
 800502a:	7e1b      	ldrb	r3, [r3, #24]
 800502c:	2b00      	cmp	r3, #0
 800502e:	d10a      	bne.n	8005046 <USBD_CUSTOM_HID_SendReport+0x52>
    {
      hhid->state = CUSTOM_HID_BUSY;
 8005030:	697b      	ldr	r3, [r7, #20]
 8005032:	2201      	movs	r2, #1
 8005034:	761a      	strb	r2, [r3, #24]
      (void)USBD_LL_Transmit(pdev, CUSTOMHIDInEpAdd, report, len);
 8005036:	4b07      	ldr	r3, [pc, #28]	@ (8005054 <USBD_CUSTOM_HID_SendReport+0x60>)
 8005038:	7819      	ldrb	r1, [r3, #0]
 800503a:	88fb      	ldrh	r3, [r7, #6]
 800503c:	68ba      	ldr	r2, [r7, #8]
 800503e:	68f8      	ldr	r0, [r7, #12]
 8005040:	f002 f845 	bl	80070ce <USBD_LL_Transmit>
 8005044:	e001      	b.n	800504a <USBD_CUSTOM_HID_SendReport+0x56>
    }
    else
    {
      return (uint8_t)USBD_BUSY;
 8005046:	2301      	movs	r3, #1
 8005048:	e000      	b.n	800504c <USBD_CUSTOM_HID_SendReport+0x58>
    }
  }
  return (uint8_t)USBD_OK;
 800504a:	2300      	movs	r3, #0
}
 800504c:	4618      	mov	r0, r3
 800504e:	3718      	adds	r7, #24
 8005050:	46bd      	mov	sp, r7
 8005052:	bd80      	pop	{r7, pc}
 8005054:	20000086 	.word	0x20000086

08005058 <USBD_CUSTOM_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetFSCfgDesc(uint16_t *length)
{
 8005058:	b580      	push	{r7, lr}
 800505a:	b084      	sub	sp, #16
 800505c:	af00      	add	r7, sp, #0
 800505e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPIN_ADDR);
 8005060:	2181      	movs	r1, #129	@ 0x81
 8005062:	4815      	ldr	r0, [pc, #84]	@ (80050b8 <USBD_CUSTOM_HID_GetFSCfgDesc+0x60>)
 8005064:	f000 fd1d 	bl	8005aa2 <USBD_GetEpDesc>
 8005068:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPOUT_ADDR);
 800506a:	2101      	movs	r1, #1
 800506c:	4812      	ldr	r0, [pc, #72]	@ (80050b8 <USBD_CUSTOM_HID_GetFSCfgDesc+0x60>)
 800506e:	f000 fd18 	bl	8005aa2 <USBD_GetEpDesc>
 8005072:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	2b00      	cmp	r3, #0
 8005078:	d009      	beq.n	800508e <USBD_CUSTOM_HID_GetFSCfgDesc+0x36>
  {
    pEpInDesc->wMaxPacketSize = CUSTOM_HID_EPIN_SIZE;
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	2200      	movs	r2, #0
 800507e:	f042 0202 	orr.w	r2, r2, #2
 8005082:	711a      	strb	r2, [r3, #4]
 8005084:	2200      	movs	r2, #0
 8005086:	715a      	strb	r2, [r3, #5]
    pEpInDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	2205      	movs	r2, #5
 800508c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800508e:	68bb      	ldr	r3, [r7, #8]
 8005090:	2b00      	cmp	r3, #0
 8005092:	d009      	beq.n	80050a8 <USBD_CUSTOM_HID_GetFSCfgDesc+0x50>
  {
    pEpOutDesc->wMaxPacketSize = CUSTOM_HID_EPOUT_SIZE;
 8005094:	68bb      	ldr	r3, [r7, #8]
 8005096:	2200      	movs	r2, #0
 8005098:	f042 0202 	orr.w	r2, r2, #2
 800509c:	711a      	strb	r2, [r3, #4]
 800509e:	2200      	movs	r2, #0
 80050a0:	715a      	strb	r2, [r3, #5]
    pEpOutDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
 80050a2:	68bb      	ldr	r3, [r7, #8]
 80050a4:	2205      	movs	r2, #5
 80050a6:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgDesc);
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	2229      	movs	r2, #41	@ 0x29
 80050ac:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgDesc;
 80050ae:	4b02      	ldr	r3, [pc, #8]	@ (80050b8 <USBD_CUSTOM_HID_GetFSCfgDesc+0x60>)
}
 80050b0:	4618      	mov	r0, r3
 80050b2:	3710      	adds	r7, #16
 80050b4:	46bd      	mov	sp, r7
 80050b6:	bd80      	pop	{r7, pc}
 80050b8:	20000044 	.word	0x20000044

080050bc <USBD_CUSTOM_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetHSCfgDesc(uint16_t *length)
{
 80050bc:	b580      	push	{r7, lr}
 80050be:	b084      	sub	sp, #16
 80050c0:	af00      	add	r7, sp, #0
 80050c2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPIN_ADDR);
 80050c4:	2181      	movs	r1, #129	@ 0x81
 80050c6:	4815      	ldr	r0, [pc, #84]	@ (800511c <USBD_CUSTOM_HID_GetHSCfgDesc+0x60>)
 80050c8:	f000 fceb 	bl	8005aa2 <USBD_GetEpDesc>
 80050cc:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPOUT_ADDR);
 80050ce:	2101      	movs	r1, #1
 80050d0:	4812      	ldr	r0, [pc, #72]	@ (800511c <USBD_CUSTOM_HID_GetHSCfgDesc+0x60>)
 80050d2:	f000 fce6 	bl	8005aa2 <USBD_GetEpDesc>
 80050d6:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d009      	beq.n	80050f2 <USBD_CUSTOM_HID_GetHSCfgDesc+0x36>
  {
    pEpInDesc->wMaxPacketSize = CUSTOM_HID_EPIN_SIZE;
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	2200      	movs	r2, #0
 80050e2:	f042 0202 	orr.w	r2, r2, #2
 80050e6:	711a      	strb	r2, [r3, #4]
 80050e8:	2200      	movs	r2, #0
 80050ea:	715a      	strb	r2, [r3, #5]
    pEpInDesc->bInterval = CUSTOM_HID_HS_BINTERVAL;
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	2205      	movs	r2, #5
 80050f0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80050f2:	68bb      	ldr	r3, [r7, #8]
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d009      	beq.n	800510c <USBD_CUSTOM_HID_GetHSCfgDesc+0x50>
  {
    pEpOutDesc->wMaxPacketSize = CUSTOM_HID_EPOUT_SIZE;
 80050f8:	68bb      	ldr	r3, [r7, #8]
 80050fa:	2200      	movs	r2, #0
 80050fc:	f042 0202 	orr.w	r2, r2, #2
 8005100:	711a      	strb	r2, [r3, #4]
 8005102:	2200      	movs	r2, #0
 8005104:	715a      	strb	r2, [r3, #5]
    pEpOutDesc->bInterval = CUSTOM_HID_HS_BINTERVAL;
 8005106:	68bb      	ldr	r3, [r7, #8]
 8005108:	2205      	movs	r2, #5
 800510a:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgDesc);
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	2229      	movs	r2, #41	@ 0x29
 8005110:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgDesc;
 8005112:	4b02      	ldr	r3, [pc, #8]	@ (800511c <USBD_CUSTOM_HID_GetHSCfgDesc+0x60>)
}
 8005114:	4618      	mov	r0, r3
 8005116:	3710      	adds	r7, #16
 8005118:	46bd      	mov	sp, r7
 800511a:	bd80      	pop	{r7, pc}
 800511c:	20000044 	.word	0x20000044

08005120 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8005120:	b580      	push	{r7, lr}
 8005122:	b084      	sub	sp, #16
 8005124:	af00      	add	r7, sp, #0
 8005126:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPIN_ADDR);
 8005128:	2181      	movs	r1, #129	@ 0x81
 800512a:	4815      	ldr	r0, [pc, #84]	@ (8005180 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x60>)
 800512c:	f000 fcb9 	bl	8005aa2 <USBD_GetEpDesc>
 8005130:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPOUT_ADDR);
 8005132:	2101      	movs	r1, #1
 8005134:	4812      	ldr	r0, [pc, #72]	@ (8005180 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x60>)
 8005136:	f000 fcb4 	bl	8005aa2 <USBD_GetEpDesc>
 800513a:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	2b00      	cmp	r3, #0
 8005140:	d009      	beq.n	8005156 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x36>
  {
    pEpInDesc->wMaxPacketSize = CUSTOM_HID_EPIN_SIZE;
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	2200      	movs	r2, #0
 8005146:	f042 0202 	orr.w	r2, r2, #2
 800514a:	711a      	strb	r2, [r3, #4]
 800514c:	2200      	movs	r2, #0
 800514e:	715a      	strb	r2, [r3, #5]
    pEpInDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	2205      	movs	r2, #5
 8005154:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8005156:	68bb      	ldr	r3, [r7, #8]
 8005158:	2b00      	cmp	r3, #0
 800515a:	d009      	beq.n	8005170 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x50>
  {
    pEpOutDesc->wMaxPacketSize = CUSTOM_HID_EPOUT_SIZE;
 800515c:	68bb      	ldr	r3, [r7, #8]
 800515e:	2200      	movs	r2, #0
 8005160:	f042 0202 	orr.w	r2, r2, #2
 8005164:	711a      	strb	r2, [r3, #4]
 8005166:	2200      	movs	r2, #0
 8005168:	715a      	strb	r2, [r3, #5]
    pEpOutDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
 800516a:	68bb      	ldr	r3, [r7, #8]
 800516c:	2205      	movs	r2, #5
 800516e:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgDesc);
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	2229      	movs	r2, #41	@ 0x29
 8005174:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgDesc;
 8005176:	4b02      	ldr	r3, [pc, #8]	@ (8005180 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x60>)
}
 8005178:	4618      	mov	r0, r3
 800517a:	3710      	adds	r7, #16
 800517c:	46bd      	mov	sp, r7
 800517e:	bd80      	pop	{r7, pc}
 8005180:	20000044 	.word	0x20000044

08005184 <USBD_CUSTOM_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005184:	b480      	push	{r7}
 8005186:	b083      	sub	sp, #12
 8005188:	af00      	add	r7, sp, #0
 800518a:	6078      	str	r0, [r7, #4]
 800518c:	460b      	mov	r3, r1
 800518e:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId])->state = CUSTOM_HID_IDLE;
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	32b0      	adds	r2, #176	@ 0xb0
 800519a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800519e:	2200      	movs	r2, #0
 80051a0:	761a      	strb	r2, [r3, #24]

  return (uint8_t)USBD_OK;
 80051a2:	2300      	movs	r3, #0
}
 80051a4:	4618      	mov	r0, r3
 80051a6:	370c      	adds	r7, #12
 80051a8:	46bd      	mov	sp, r7
 80051aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ae:	4770      	bx	lr

080051b0 <USBD_CUSTOM_HID_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80051b0:	b580      	push	{r7, lr}
 80051b2:	b084      	sub	sp, #16
 80051b4:	af00      	add	r7, sp, #0
 80051b6:	6078      	str	r0, [r7, #4]
 80051b8:	460b      	mov	r3, r1
 80051ba:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	32b0      	adds	r2, #176	@ 0xb0
 80051c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d101      	bne.n	80051d2 <USBD_CUSTOM_HID_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80051ce:	2303      	movs	r3, #3
 80051d0:	e017      	b.n	8005202 <USBD_CUSTOM_HID_DataOut+0x52>
  }

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	32b0      	adds	r2, #176	@ 0xb0
 80051dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80051e0:	60fb      	str	r3, [r7, #12]

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application processing */
  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->OutEvent(hhid->Report_buf[0],
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80051e8:	687a      	ldr	r2, [r7, #4]
 80051ea:	33b0      	adds	r3, #176	@ 0xb0
 80051ec:	009b      	lsls	r3, r3, #2
 80051ee:	4413      	add	r3, r2
 80051f0:	685b      	ldr	r3, [r3, #4]
 80051f2:	68db      	ldr	r3, [r3, #12]
 80051f4:	68fa      	ldr	r2, [r7, #12]
 80051f6:	7810      	ldrb	r0, [r2, #0]
 80051f8:	68fa      	ldr	r2, [r7, #12]
 80051fa:	7852      	ldrb	r2, [r2, #1]
 80051fc:	4611      	mov	r1, r2
 80051fe:	4798      	blx	r3
                                                                           hhid->Report_buf[1]);

  return (uint8_t)USBD_OK;
 8005200:	2300      	movs	r3, #0
}
 8005202:	4618      	mov	r0, r3
 8005204:	3710      	adds	r7, #16
 8005206:	46bd      	mov	sp, r7
 8005208:	bd80      	pop	{r7, pc}
	...

0800520c <USBD_CUSTOM_HID_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800520c:	b580      	push	{r7, lr}
 800520e:	b084      	sub	sp, #16
 8005210:	af00      	add	r7, sp, #0
 8005212:	6078      	str	r0, [r7, #4]
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	32b0      	adds	r2, #176	@ 0xb0
 800521e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005222:	2b00      	cmp	r3, #0
 8005224:	d101      	bne.n	800522a <USBD_CUSTOM_HID_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8005226:	2303      	movs	r3, #3
 8005228:	e00f      	b.n	800524a <USBD_CUSTOM_HID_ReceivePacket+0x3e>
#ifdef USE_USBD_COMPOSITE
  /* Get OUT Endpoint address allocated for this class instance */
  CUSTOMHIDOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	32b0      	adds	r2, #176	@ 0xb0
 8005234:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005238:	60fb      	str	r3, [r7, #12]

  /* Resume USB Out process */
  (void)USBD_LL_PrepareReceive(pdev, CUSTOMHIDOutEpAdd, hhid->Report_buf,
 800523a:	4b06      	ldr	r3, [pc, #24]	@ (8005254 <USBD_CUSTOM_HID_ReceivePacket+0x48>)
 800523c:	7819      	ldrb	r1, [r3, #0]
 800523e:	68fa      	ldr	r2, [r7, #12]
 8005240:	2308      	movs	r3, #8
 8005242:	6878      	ldr	r0, [r7, #4]
 8005244:	f001 ff64 	bl	8007110 <USBD_LL_PrepareReceive>
                               USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);

  return (uint8_t)USBD_OK;
 8005248:	2300      	movs	r3, #0
}
 800524a:	4618      	mov	r0, r3
 800524c:	3710      	adds	r7, #16
 800524e:	46bd      	mov	sp, r7
 8005250:	bd80      	pop	{r7, pc}
 8005252:	bf00      	nop
 8005254:	20000087 	.word	0x20000087

08005258 <USBD_CUSTOM_HID_EP0_RxReady>:
  *         Handles control request data.
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8005258:	b580      	push	{r7, lr}
 800525a:	b084      	sub	sp, #16
 800525c:	af00      	add	r7, sp, #0
 800525e:	6078      	str	r0, [r7, #4]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	32b0      	adds	r2, #176	@ 0xb0
 800526a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800526e:	60fb      	str	r3, [r7, #12]

  if (hhid == NULL)
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	2b00      	cmp	r3, #0
 8005274:	d101      	bne.n	800527a <USBD_CUSTOM_HID_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8005276:	2303      	movs	r3, #3
 8005278:	e016      	b.n	80052a8 <USBD_CUSTOM_HID_EP0_RxReady+0x50>
  }

  if (hhid->IsReportAvailable == 1U)
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	695b      	ldr	r3, [r3, #20]
 800527e:	2b01      	cmp	r3, #1
 8005280:	d111      	bne.n	80052a6 <USBD_CUSTOM_HID_EP0_RxReady+0x4e>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->OutEvent(hhid->Report_buf[0],
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005288:	687a      	ldr	r2, [r7, #4]
 800528a:	33b0      	adds	r3, #176	@ 0xb0
 800528c:	009b      	lsls	r3, r3, #2
 800528e:	4413      	add	r3, r2
 8005290:	685b      	ldr	r3, [r3, #4]
 8005292:	68db      	ldr	r3, [r3, #12]
 8005294:	68fa      	ldr	r2, [r7, #12]
 8005296:	7810      	ldrb	r0, [r2, #0]
 8005298:	68fa      	ldr	r2, [r7, #12]
 800529a:	7852      	ldrb	r2, [r2, #1]
 800529c:	4611      	mov	r1, r2
 800529e:	4798      	blx	r3
                                                                             hhid->Report_buf[1]);
    hhid->IsReportAvailable = 0U;
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	2200      	movs	r2, #0
 80052a4:	615a      	str	r2, [r3, #20]
  }

  return (uint8_t)USBD_OK;
 80052a6:	2300      	movs	r3, #0
}
 80052a8:	4618      	mov	r0, r3
 80052aa:	3710      	adds	r7, #16
 80052ac:	46bd      	mov	sp, r7
 80052ae:	bd80      	pop	{r7, pc}

080052b0 <USBD_CUSTOM_HID_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 80052b0:	b480      	push	{r7}
 80052b2:	b083      	sub	sp, #12
 80052b4:	af00      	add	r7, sp, #0
 80052b6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_DeviceQualifierDesc);
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	220a      	movs	r2, #10
 80052bc:	801a      	strh	r2, [r3, #0]

  return USBD_CUSTOM_HID_DeviceQualifierDesc;
 80052be:	4b03      	ldr	r3, [pc, #12]	@ (80052cc <USBD_CUSTOM_HID_GetDeviceQualifierDesc+0x1c>)
}
 80052c0:	4618      	mov	r0, r3
 80052c2:	370c      	adds	r7, #12
 80052c4:	46bd      	mov	sp, r7
 80052c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ca:	4770      	bx	lr
 80052cc:	2000007c 	.word	0x2000007c

080052d0 <USBD_CUSTOM_HID_RegisterInterface>:
  * @param  fops: CUSTOMHID Interface callback
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_RegisterInterface(USBD_HandleTypeDef *pdev,
                                          USBD_CUSTOM_HID_ItfTypeDef *fops)
{
 80052d0:	b480      	push	{r7}
 80052d2:	b083      	sub	sp, #12
 80052d4:	af00      	add	r7, sp, #0
 80052d6:	6078      	str	r0, [r7, #4]
 80052d8:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80052da:	683b      	ldr	r3, [r7, #0]
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d101      	bne.n	80052e4 <USBD_CUSTOM_HID_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80052e0:	2303      	movs	r3, #3
 80052e2:	e009      	b.n	80052f8 <USBD_CUSTOM_HID_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80052ea:	687a      	ldr	r2, [r7, #4]
 80052ec:	33b0      	adds	r3, #176	@ 0xb0
 80052ee:	009b      	lsls	r3, r3, #2
 80052f0:	4413      	add	r3, r2
 80052f2:	683a      	ldr	r2, [r7, #0]
 80052f4:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 80052f6:	2300      	movs	r3, #0
}
 80052f8:	4618      	mov	r0, r3
 80052fa:	370c      	adds	r7, #12
 80052fc:	46bd      	mov	sp, r7
 80052fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005302:	4770      	bx	lr

08005304 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8005304:	b580      	push	{r7, lr}
 8005306:	b086      	sub	sp, #24
 8005308:	af00      	add	r7, sp, #0
 800530a:	60f8      	str	r0, [r7, #12]
 800530c:	60b9      	str	r1, [r7, #8]
 800530e:	4613      	mov	r3, r2
 8005310:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	2b00      	cmp	r3, #0
 8005316:	d101      	bne.n	800531c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8005318:	2303      	movs	r3, #3
 800531a:	e01f      	b.n	800535c <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	2200      	movs	r2, #0
 8005320:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	2200      	movs	r2, #0
 8005328:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	2200      	movs	r2, #0
 8005330:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8005334:	68bb      	ldr	r3, [r7, #8]
 8005336:	2b00      	cmp	r3, #0
 8005338:	d003      	beq.n	8005342 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	68ba      	ldr	r2, [r7, #8]
 800533e:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	2201      	movs	r2, #1
 8005346:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	79fa      	ldrb	r2, [r7, #7]
 800534e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8005350:	68f8      	ldr	r0, [r7, #12]
 8005352:	f001 fd87 	bl	8006e64 <USBD_LL_Init>
 8005356:	4603      	mov	r3, r0
 8005358:	75fb      	strb	r3, [r7, #23]

  return ret;
 800535a:	7dfb      	ldrb	r3, [r7, #23]
}
 800535c:	4618      	mov	r0, r3
 800535e:	3718      	adds	r7, #24
 8005360:	46bd      	mov	sp, r7
 8005362:	bd80      	pop	{r7, pc}

08005364 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8005364:	b580      	push	{r7, lr}
 8005366:	b084      	sub	sp, #16
 8005368:	af00      	add	r7, sp, #0
 800536a:	6078      	str	r0, [r7, #4]
 800536c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800536e:	2300      	movs	r3, #0
 8005370:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8005372:	683b      	ldr	r3, [r7, #0]
 8005374:	2b00      	cmp	r3, #0
 8005376:	d101      	bne.n	800537c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8005378:	2303      	movs	r3, #3
 800537a:	e025      	b.n	80053c8 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	683a      	ldr	r2, [r7, #0]
 8005380:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	32ae      	adds	r2, #174	@ 0xae
 800538e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005392:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005394:	2b00      	cmp	r3, #0
 8005396:	d00f      	beq.n	80053b8 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	32ae      	adds	r2, #174	@ 0xae
 80053a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80053a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053a8:	f107 020e 	add.w	r2, r7, #14
 80053ac:	4610      	mov	r0, r2
 80053ae:	4798      	blx	r3
 80053b0:	4602      	mov	r2, r0
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 80053be:	1c5a      	adds	r2, r3, #1
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 80053c6:	2300      	movs	r3, #0
}
 80053c8:	4618      	mov	r0, r3
 80053ca:	3710      	adds	r7, #16
 80053cc:	46bd      	mov	sp, r7
 80053ce:	bd80      	pop	{r7, pc}

080053d0 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80053d0:	b580      	push	{r7, lr}
 80053d2:	b082      	sub	sp, #8
 80053d4:	af00      	add	r7, sp, #0
 80053d6:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80053d8:	6878      	ldr	r0, [r7, #4]
 80053da:	f001 fd8f 	bl	8006efc <USBD_LL_Start>
 80053de:	4603      	mov	r3, r0
}
 80053e0:	4618      	mov	r0, r3
 80053e2:	3708      	adds	r7, #8
 80053e4:	46bd      	mov	sp, r7
 80053e6:	bd80      	pop	{r7, pc}

080053e8 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 80053e8:	b480      	push	{r7}
 80053ea:	b083      	sub	sp, #12
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80053f0:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 80053f2:	4618      	mov	r0, r3
 80053f4:	370c      	adds	r7, #12
 80053f6:	46bd      	mov	sp, r7
 80053f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053fc:	4770      	bx	lr

080053fe <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80053fe:	b580      	push	{r7, lr}
 8005400:	b084      	sub	sp, #16
 8005402:	af00      	add	r7, sp, #0
 8005404:	6078      	str	r0, [r7, #4]
 8005406:	460b      	mov	r3, r1
 8005408:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800540a:	2300      	movs	r3, #0
 800540c:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005414:	2b00      	cmp	r3, #0
 8005416:	d009      	beq.n	800542c <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	78fa      	ldrb	r2, [r7, #3]
 8005422:	4611      	mov	r1, r2
 8005424:	6878      	ldr	r0, [r7, #4]
 8005426:	4798      	blx	r3
 8005428:	4603      	mov	r3, r0
 800542a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800542c:	7bfb      	ldrb	r3, [r7, #15]
}
 800542e:	4618      	mov	r0, r3
 8005430:	3710      	adds	r7, #16
 8005432:	46bd      	mov	sp, r7
 8005434:	bd80      	pop	{r7, pc}

08005436 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005436:	b580      	push	{r7, lr}
 8005438:	b084      	sub	sp, #16
 800543a:	af00      	add	r7, sp, #0
 800543c:	6078      	str	r0, [r7, #4]
 800543e:	460b      	mov	r3, r1
 8005440:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8005442:	2300      	movs	r3, #0
 8005444:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800544c:	685b      	ldr	r3, [r3, #4]
 800544e:	78fa      	ldrb	r2, [r7, #3]
 8005450:	4611      	mov	r1, r2
 8005452:	6878      	ldr	r0, [r7, #4]
 8005454:	4798      	blx	r3
 8005456:	4603      	mov	r3, r0
 8005458:	2b00      	cmp	r3, #0
 800545a:	d001      	beq.n	8005460 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800545c:	2303      	movs	r3, #3
 800545e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005460:	7bfb      	ldrb	r3, [r7, #15]
}
 8005462:	4618      	mov	r0, r3
 8005464:	3710      	adds	r7, #16
 8005466:	46bd      	mov	sp, r7
 8005468:	bd80      	pop	{r7, pc}

0800546a <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800546a:	b580      	push	{r7, lr}
 800546c:	b084      	sub	sp, #16
 800546e:	af00      	add	r7, sp, #0
 8005470:	6078      	str	r0, [r7, #4]
 8005472:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800547a:	6839      	ldr	r1, [r7, #0]
 800547c:	4618      	mov	r0, r3
 800547e:	f001 f90c 	bl	800669a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	2201      	movs	r2, #1
 8005486:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8005490:	461a      	mov	r2, r3
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800549e:	f003 031f 	and.w	r3, r3, #31
 80054a2:	2b02      	cmp	r3, #2
 80054a4:	d01a      	beq.n	80054dc <USBD_LL_SetupStage+0x72>
 80054a6:	2b02      	cmp	r3, #2
 80054a8:	d822      	bhi.n	80054f0 <USBD_LL_SetupStage+0x86>
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d002      	beq.n	80054b4 <USBD_LL_SetupStage+0x4a>
 80054ae:	2b01      	cmp	r3, #1
 80054b0:	d00a      	beq.n	80054c8 <USBD_LL_SetupStage+0x5e>
 80054b2:	e01d      	b.n	80054f0 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80054ba:	4619      	mov	r1, r3
 80054bc:	6878      	ldr	r0, [r7, #4]
 80054be:	f000 fb63 	bl	8005b88 <USBD_StdDevReq>
 80054c2:	4603      	mov	r3, r0
 80054c4:	73fb      	strb	r3, [r7, #15]
      break;
 80054c6:	e020      	b.n	800550a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80054ce:	4619      	mov	r1, r3
 80054d0:	6878      	ldr	r0, [r7, #4]
 80054d2:	f000 fbcb 	bl	8005c6c <USBD_StdItfReq>
 80054d6:	4603      	mov	r3, r0
 80054d8:	73fb      	strb	r3, [r7, #15]
      break;
 80054da:	e016      	b.n	800550a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80054e2:	4619      	mov	r1, r3
 80054e4:	6878      	ldr	r0, [r7, #4]
 80054e6:	f000 fc2d 	bl	8005d44 <USBD_StdEPReq>
 80054ea:	4603      	mov	r3, r0
 80054ec:	73fb      	strb	r3, [r7, #15]
      break;
 80054ee:	e00c      	b.n	800550a <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80054f6:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80054fa:	b2db      	uxtb	r3, r3
 80054fc:	4619      	mov	r1, r3
 80054fe:	6878      	ldr	r0, [r7, #4]
 8005500:	f001 fd5c 	bl	8006fbc <USBD_LL_StallEP>
 8005504:	4603      	mov	r3, r0
 8005506:	73fb      	strb	r3, [r7, #15]
      break;
 8005508:	bf00      	nop
  }

  return ret;
 800550a:	7bfb      	ldrb	r3, [r7, #15]
}
 800550c:	4618      	mov	r0, r3
 800550e:	3710      	adds	r7, #16
 8005510:	46bd      	mov	sp, r7
 8005512:	bd80      	pop	{r7, pc}

08005514 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8005514:	b580      	push	{r7, lr}
 8005516:	b086      	sub	sp, #24
 8005518:	af00      	add	r7, sp, #0
 800551a:	60f8      	str	r0, [r7, #12]
 800551c:	460b      	mov	r3, r1
 800551e:	607a      	str	r2, [r7, #4]
 8005520:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8005522:	2300      	movs	r3, #0
 8005524:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8005526:	7afb      	ldrb	r3, [r7, #11]
 8005528:	2b00      	cmp	r3, #0
 800552a:	d16e      	bne.n	800560a <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8005532:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800553a:	2b03      	cmp	r3, #3
 800553c:	f040 8098 	bne.w	8005670 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8005540:	693b      	ldr	r3, [r7, #16]
 8005542:	689a      	ldr	r2, [r3, #8]
 8005544:	693b      	ldr	r3, [r7, #16]
 8005546:	68db      	ldr	r3, [r3, #12]
 8005548:	429a      	cmp	r2, r3
 800554a:	d913      	bls.n	8005574 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800554c:	693b      	ldr	r3, [r7, #16]
 800554e:	689a      	ldr	r2, [r3, #8]
 8005550:	693b      	ldr	r3, [r7, #16]
 8005552:	68db      	ldr	r3, [r3, #12]
 8005554:	1ad2      	subs	r2, r2, r3
 8005556:	693b      	ldr	r3, [r7, #16]
 8005558:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800555a:	693b      	ldr	r3, [r7, #16]
 800555c:	68da      	ldr	r2, [r3, #12]
 800555e:	693b      	ldr	r3, [r7, #16]
 8005560:	689b      	ldr	r3, [r3, #8]
 8005562:	4293      	cmp	r3, r2
 8005564:	bf28      	it	cs
 8005566:	4613      	movcs	r3, r2
 8005568:	461a      	mov	r2, r3
 800556a:	6879      	ldr	r1, [r7, #4]
 800556c:	68f8      	ldr	r0, [r7, #12]
 800556e:	f001 f994 	bl	800689a <USBD_CtlContinueRx>
 8005572:	e07d      	b.n	8005670 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800557a:	f003 031f 	and.w	r3, r3, #31
 800557e:	2b02      	cmp	r3, #2
 8005580:	d014      	beq.n	80055ac <USBD_LL_DataOutStage+0x98>
 8005582:	2b02      	cmp	r3, #2
 8005584:	d81d      	bhi.n	80055c2 <USBD_LL_DataOutStage+0xae>
 8005586:	2b00      	cmp	r3, #0
 8005588:	d002      	beq.n	8005590 <USBD_LL_DataOutStage+0x7c>
 800558a:	2b01      	cmp	r3, #1
 800558c:	d003      	beq.n	8005596 <USBD_LL_DataOutStage+0x82>
 800558e:	e018      	b.n	80055c2 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8005590:	2300      	movs	r3, #0
 8005592:	75bb      	strb	r3, [r7, #22]
            break;
 8005594:	e018      	b.n	80055c8 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800559c:	b2db      	uxtb	r3, r3
 800559e:	4619      	mov	r1, r3
 80055a0:	68f8      	ldr	r0, [r7, #12]
 80055a2:	f000 fa64 	bl	8005a6e <USBD_CoreFindIF>
 80055a6:	4603      	mov	r3, r0
 80055a8:	75bb      	strb	r3, [r7, #22]
            break;
 80055aa:	e00d      	b.n	80055c8 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 80055b2:	b2db      	uxtb	r3, r3
 80055b4:	4619      	mov	r1, r3
 80055b6:	68f8      	ldr	r0, [r7, #12]
 80055b8:	f000 fa66 	bl	8005a88 <USBD_CoreFindEP>
 80055bc:	4603      	mov	r3, r0
 80055be:	75bb      	strb	r3, [r7, #22]
            break;
 80055c0:	e002      	b.n	80055c8 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 80055c2:	2300      	movs	r3, #0
 80055c4:	75bb      	strb	r3, [r7, #22]
            break;
 80055c6:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 80055c8:	7dbb      	ldrb	r3, [r7, #22]
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d119      	bne.n	8005602 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80055d4:	b2db      	uxtb	r3, r3
 80055d6:	2b03      	cmp	r3, #3
 80055d8:	d113      	bne.n	8005602 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 80055da:	7dba      	ldrb	r2, [r7, #22]
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	32ae      	adds	r2, #174	@ 0xae
 80055e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80055e4:	691b      	ldr	r3, [r3, #16]
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d00b      	beq.n	8005602 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 80055ea:	7dba      	ldrb	r2, [r7, #22]
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 80055f2:	7dba      	ldrb	r2, [r7, #22]
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	32ae      	adds	r2, #174	@ 0xae
 80055f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80055fc:	691b      	ldr	r3, [r3, #16]
 80055fe:	68f8      	ldr	r0, [r7, #12]
 8005600:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8005602:	68f8      	ldr	r0, [r7, #12]
 8005604:	f001 f95a 	bl	80068bc <USBD_CtlSendStatus>
 8005608:	e032      	b.n	8005670 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800560a:	7afb      	ldrb	r3, [r7, #11]
 800560c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005610:	b2db      	uxtb	r3, r3
 8005612:	4619      	mov	r1, r3
 8005614:	68f8      	ldr	r0, [r7, #12]
 8005616:	f000 fa37 	bl	8005a88 <USBD_CoreFindEP>
 800561a:	4603      	mov	r3, r0
 800561c:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800561e:	7dbb      	ldrb	r3, [r7, #22]
 8005620:	2bff      	cmp	r3, #255	@ 0xff
 8005622:	d025      	beq.n	8005670 <USBD_LL_DataOutStage+0x15c>
 8005624:	7dbb      	ldrb	r3, [r7, #22]
 8005626:	2b00      	cmp	r3, #0
 8005628:	d122      	bne.n	8005670 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005630:	b2db      	uxtb	r3, r3
 8005632:	2b03      	cmp	r3, #3
 8005634:	d117      	bne.n	8005666 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8005636:	7dba      	ldrb	r2, [r7, #22]
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	32ae      	adds	r2, #174	@ 0xae
 800563c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005640:	699b      	ldr	r3, [r3, #24]
 8005642:	2b00      	cmp	r3, #0
 8005644:	d00f      	beq.n	8005666 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8005646:	7dba      	ldrb	r2, [r7, #22]
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800564e:	7dba      	ldrb	r2, [r7, #22]
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	32ae      	adds	r2, #174	@ 0xae
 8005654:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005658:	699b      	ldr	r3, [r3, #24]
 800565a:	7afa      	ldrb	r2, [r7, #11]
 800565c:	4611      	mov	r1, r2
 800565e:	68f8      	ldr	r0, [r7, #12]
 8005660:	4798      	blx	r3
 8005662:	4603      	mov	r3, r0
 8005664:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8005666:	7dfb      	ldrb	r3, [r7, #23]
 8005668:	2b00      	cmp	r3, #0
 800566a:	d001      	beq.n	8005670 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800566c:	7dfb      	ldrb	r3, [r7, #23]
 800566e:	e000      	b.n	8005672 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8005670:	2300      	movs	r3, #0
}
 8005672:	4618      	mov	r0, r3
 8005674:	3718      	adds	r7, #24
 8005676:	46bd      	mov	sp, r7
 8005678:	bd80      	pop	{r7, pc}

0800567a <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800567a:	b580      	push	{r7, lr}
 800567c:	b086      	sub	sp, #24
 800567e:	af00      	add	r7, sp, #0
 8005680:	60f8      	str	r0, [r7, #12]
 8005682:	460b      	mov	r3, r1
 8005684:	607a      	str	r2, [r7, #4]
 8005686:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8005688:	7afb      	ldrb	r3, [r7, #11]
 800568a:	2b00      	cmp	r3, #0
 800568c:	d16f      	bne.n	800576e <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	3314      	adds	r3, #20
 8005692:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800569a:	2b02      	cmp	r3, #2
 800569c:	d15a      	bne.n	8005754 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800569e:	693b      	ldr	r3, [r7, #16]
 80056a0:	689a      	ldr	r2, [r3, #8]
 80056a2:	693b      	ldr	r3, [r7, #16]
 80056a4:	68db      	ldr	r3, [r3, #12]
 80056a6:	429a      	cmp	r2, r3
 80056a8:	d914      	bls.n	80056d4 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80056aa:	693b      	ldr	r3, [r7, #16]
 80056ac:	689a      	ldr	r2, [r3, #8]
 80056ae:	693b      	ldr	r3, [r7, #16]
 80056b0:	68db      	ldr	r3, [r3, #12]
 80056b2:	1ad2      	subs	r2, r2, r3
 80056b4:	693b      	ldr	r3, [r7, #16]
 80056b6:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80056b8:	693b      	ldr	r3, [r7, #16]
 80056ba:	689b      	ldr	r3, [r3, #8]
 80056bc:	461a      	mov	r2, r3
 80056be:	6879      	ldr	r1, [r7, #4]
 80056c0:	68f8      	ldr	r0, [r7, #12]
 80056c2:	f001 f8bc 	bl	800683e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80056c6:	2300      	movs	r3, #0
 80056c8:	2200      	movs	r2, #0
 80056ca:	2100      	movs	r1, #0
 80056cc:	68f8      	ldr	r0, [r7, #12]
 80056ce:	f001 fd1f 	bl	8007110 <USBD_LL_PrepareReceive>
 80056d2:	e03f      	b.n	8005754 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80056d4:	693b      	ldr	r3, [r7, #16]
 80056d6:	68da      	ldr	r2, [r3, #12]
 80056d8:	693b      	ldr	r3, [r7, #16]
 80056da:	689b      	ldr	r3, [r3, #8]
 80056dc:	429a      	cmp	r2, r3
 80056de:	d11c      	bne.n	800571a <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80056e0:	693b      	ldr	r3, [r7, #16]
 80056e2:	685a      	ldr	r2, [r3, #4]
 80056e4:	693b      	ldr	r3, [r7, #16]
 80056e6:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80056e8:	429a      	cmp	r2, r3
 80056ea:	d316      	bcc.n	800571a <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80056ec:	693b      	ldr	r3, [r7, #16]
 80056ee:	685a      	ldr	r2, [r3, #4]
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 80056f6:	429a      	cmp	r2, r3
 80056f8:	d20f      	bcs.n	800571a <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80056fa:	2200      	movs	r2, #0
 80056fc:	2100      	movs	r1, #0
 80056fe:	68f8      	ldr	r0, [r7, #12]
 8005700:	f001 f89d 	bl	800683e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	2200      	movs	r2, #0
 8005708:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800570c:	2300      	movs	r3, #0
 800570e:	2200      	movs	r2, #0
 8005710:	2100      	movs	r1, #0
 8005712:	68f8      	ldr	r0, [r7, #12]
 8005714:	f001 fcfc 	bl	8007110 <USBD_LL_PrepareReceive>
 8005718:	e01c      	b.n	8005754 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005720:	b2db      	uxtb	r3, r3
 8005722:	2b03      	cmp	r3, #3
 8005724:	d10f      	bne.n	8005746 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800572c:	68db      	ldr	r3, [r3, #12]
 800572e:	2b00      	cmp	r3, #0
 8005730:	d009      	beq.n	8005746 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	2200      	movs	r2, #0
 8005736:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005740:	68db      	ldr	r3, [r3, #12]
 8005742:	68f8      	ldr	r0, [r7, #12]
 8005744:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8005746:	2180      	movs	r1, #128	@ 0x80
 8005748:	68f8      	ldr	r0, [r7, #12]
 800574a:	f001 fc37 	bl	8006fbc <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800574e:	68f8      	ldr	r0, [r7, #12]
 8005750:	f001 f8c7 	bl	80068e2 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800575a:	2b00      	cmp	r3, #0
 800575c:	d03a      	beq.n	80057d4 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800575e:	68f8      	ldr	r0, [r7, #12]
 8005760:	f7ff fe42 	bl	80053e8 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	2200      	movs	r2, #0
 8005768:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800576c:	e032      	b.n	80057d4 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800576e:	7afb      	ldrb	r3, [r7, #11]
 8005770:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005774:	b2db      	uxtb	r3, r3
 8005776:	4619      	mov	r1, r3
 8005778:	68f8      	ldr	r0, [r7, #12]
 800577a:	f000 f985 	bl	8005a88 <USBD_CoreFindEP>
 800577e:	4603      	mov	r3, r0
 8005780:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005782:	7dfb      	ldrb	r3, [r7, #23]
 8005784:	2bff      	cmp	r3, #255	@ 0xff
 8005786:	d025      	beq.n	80057d4 <USBD_LL_DataInStage+0x15a>
 8005788:	7dfb      	ldrb	r3, [r7, #23]
 800578a:	2b00      	cmp	r3, #0
 800578c:	d122      	bne.n	80057d4 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005794:	b2db      	uxtb	r3, r3
 8005796:	2b03      	cmp	r3, #3
 8005798:	d11c      	bne.n	80057d4 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800579a:	7dfa      	ldrb	r2, [r7, #23]
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	32ae      	adds	r2, #174	@ 0xae
 80057a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80057a4:	695b      	ldr	r3, [r3, #20]
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d014      	beq.n	80057d4 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 80057aa:	7dfa      	ldrb	r2, [r7, #23]
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 80057b2:	7dfa      	ldrb	r2, [r7, #23]
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	32ae      	adds	r2, #174	@ 0xae
 80057b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80057bc:	695b      	ldr	r3, [r3, #20]
 80057be:	7afa      	ldrb	r2, [r7, #11]
 80057c0:	4611      	mov	r1, r2
 80057c2:	68f8      	ldr	r0, [r7, #12]
 80057c4:	4798      	blx	r3
 80057c6:	4603      	mov	r3, r0
 80057c8:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 80057ca:	7dbb      	ldrb	r3, [r7, #22]
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d001      	beq.n	80057d4 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 80057d0:	7dbb      	ldrb	r3, [r7, #22]
 80057d2:	e000      	b.n	80057d6 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 80057d4:	2300      	movs	r3, #0
}
 80057d6:	4618      	mov	r0, r3
 80057d8:	3718      	adds	r7, #24
 80057da:	46bd      	mov	sp, r7
 80057dc:	bd80      	pop	{r7, pc}

080057de <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80057de:	b580      	push	{r7, lr}
 80057e0:	b084      	sub	sp, #16
 80057e2:	af00      	add	r7, sp, #0
 80057e4:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 80057e6:	2300      	movs	r3, #0
 80057e8:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	2201      	movs	r2, #1
 80057ee:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	2200      	movs	r2, #0
 80057f6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	2200      	movs	r2, #0
 80057fe:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	2200      	movs	r2, #0
 8005804:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	2200      	movs	r2, #0
 800580c:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005816:	2b00      	cmp	r3, #0
 8005818:	d014      	beq.n	8005844 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005820:	685b      	ldr	r3, [r3, #4]
 8005822:	2b00      	cmp	r3, #0
 8005824:	d00e      	beq.n	8005844 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800582c:	685b      	ldr	r3, [r3, #4]
 800582e:	687a      	ldr	r2, [r7, #4]
 8005830:	6852      	ldr	r2, [r2, #4]
 8005832:	b2d2      	uxtb	r2, r2
 8005834:	4611      	mov	r1, r2
 8005836:	6878      	ldr	r0, [r7, #4]
 8005838:	4798      	blx	r3
 800583a:	4603      	mov	r3, r0
 800583c:	2b00      	cmp	r3, #0
 800583e:	d001      	beq.n	8005844 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8005840:	2303      	movs	r3, #3
 8005842:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005844:	2340      	movs	r3, #64	@ 0x40
 8005846:	2200      	movs	r2, #0
 8005848:	2100      	movs	r1, #0
 800584a:	6878      	ldr	r0, [r7, #4]
 800584c:	f001 fb71 	bl	8006f32 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	2201      	movs	r2, #1
 8005854:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	2240      	movs	r2, #64	@ 0x40
 800585c:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005860:	2340      	movs	r3, #64	@ 0x40
 8005862:	2200      	movs	r2, #0
 8005864:	2180      	movs	r1, #128	@ 0x80
 8005866:	6878      	ldr	r0, [r7, #4]
 8005868:	f001 fb63 	bl	8006f32 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	2201      	movs	r2, #1
 8005870:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	2240      	movs	r2, #64	@ 0x40
 8005876:	621a      	str	r2, [r3, #32]

  return ret;
 8005878:	7bfb      	ldrb	r3, [r7, #15]
}
 800587a:	4618      	mov	r0, r3
 800587c:	3710      	adds	r7, #16
 800587e:	46bd      	mov	sp, r7
 8005880:	bd80      	pop	{r7, pc}

08005882 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8005882:	b480      	push	{r7}
 8005884:	b083      	sub	sp, #12
 8005886:	af00      	add	r7, sp, #0
 8005888:	6078      	str	r0, [r7, #4]
 800588a:	460b      	mov	r3, r1
 800588c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	78fa      	ldrb	r2, [r7, #3]
 8005892:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8005894:	2300      	movs	r3, #0
}
 8005896:	4618      	mov	r0, r3
 8005898:	370c      	adds	r7, #12
 800589a:	46bd      	mov	sp, r7
 800589c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a0:	4770      	bx	lr

080058a2 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80058a2:	b480      	push	{r7}
 80058a4:	b083      	sub	sp, #12
 80058a6:	af00      	add	r7, sp, #0
 80058a8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80058b0:	b2db      	uxtb	r3, r3
 80058b2:	2b04      	cmp	r3, #4
 80058b4:	d006      	beq.n	80058c4 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80058bc:	b2da      	uxtb	r2, r3
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	2204      	movs	r2, #4
 80058c8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 80058cc:	2300      	movs	r3, #0
}
 80058ce:	4618      	mov	r0, r3
 80058d0:	370c      	adds	r7, #12
 80058d2:	46bd      	mov	sp, r7
 80058d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d8:	4770      	bx	lr

080058da <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80058da:	b480      	push	{r7}
 80058dc:	b083      	sub	sp, #12
 80058de:	af00      	add	r7, sp, #0
 80058e0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80058e8:	b2db      	uxtb	r3, r3
 80058ea:	2b04      	cmp	r3, #4
 80058ec:	d106      	bne.n	80058fc <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 80058f4:	b2da      	uxtb	r2, r3
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 80058fc:	2300      	movs	r3, #0
}
 80058fe:	4618      	mov	r0, r3
 8005900:	370c      	adds	r7, #12
 8005902:	46bd      	mov	sp, r7
 8005904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005908:	4770      	bx	lr

0800590a <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800590a:	b580      	push	{r7, lr}
 800590c:	b082      	sub	sp, #8
 800590e:	af00      	add	r7, sp, #0
 8005910:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005918:	b2db      	uxtb	r3, r3
 800591a:	2b03      	cmp	r3, #3
 800591c:	d110      	bne.n	8005940 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005924:	2b00      	cmp	r3, #0
 8005926:	d00b      	beq.n	8005940 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800592e:	69db      	ldr	r3, [r3, #28]
 8005930:	2b00      	cmp	r3, #0
 8005932:	d005      	beq.n	8005940 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800593a:	69db      	ldr	r3, [r3, #28]
 800593c:	6878      	ldr	r0, [r7, #4]
 800593e:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8005940:	2300      	movs	r3, #0
}
 8005942:	4618      	mov	r0, r3
 8005944:	3708      	adds	r7, #8
 8005946:	46bd      	mov	sp, r7
 8005948:	bd80      	pop	{r7, pc}

0800594a <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800594a:	b580      	push	{r7, lr}
 800594c:	b082      	sub	sp, #8
 800594e:	af00      	add	r7, sp, #0
 8005950:	6078      	str	r0, [r7, #4]
 8005952:	460b      	mov	r3, r1
 8005954:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	32ae      	adds	r2, #174	@ 0xae
 8005960:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005964:	2b00      	cmp	r3, #0
 8005966:	d101      	bne.n	800596c <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8005968:	2303      	movs	r3, #3
 800596a:	e01c      	b.n	80059a6 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005972:	b2db      	uxtb	r3, r3
 8005974:	2b03      	cmp	r3, #3
 8005976:	d115      	bne.n	80059a4 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	32ae      	adds	r2, #174	@ 0xae
 8005982:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005986:	6a1b      	ldr	r3, [r3, #32]
 8005988:	2b00      	cmp	r3, #0
 800598a:	d00b      	beq.n	80059a4 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	32ae      	adds	r2, #174	@ 0xae
 8005996:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800599a:	6a1b      	ldr	r3, [r3, #32]
 800599c:	78fa      	ldrb	r2, [r7, #3]
 800599e:	4611      	mov	r1, r2
 80059a0:	6878      	ldr	r0, [r7, #4]
 80059a2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80059a4:	2300      	movs	r3, #0
}
 80059a6:	4618      	mov	r0, r3
 80059a8:	3708      	adds	r7, #8
 80059aa:	46bd      	mov	sp, r7
 80059ac:	bd80      	pop	{r7, pc}

080059ae <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80059ae:	b580      	push	{r7, lr}
 80059b0:	b082      	sub	sp, #8
 80059b2:	af00      	add	r7, sp, #0
 80059b4:	6078      	str	r0, [r7, #4]
 80059b6:	460b      	mov	r3, r1
 80059b8:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	32ae      	adds	r2, #174	@ 0xae
 80059c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d101      	bne.n	80059d0 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 80059cc:	2303      	movs	r3, #3
 80059ce:	e01c      	b.n	8005a0a <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80059d6:	b2db      	uxtb	r3, r3
 80059d8:	2b03      	cmp	r3, #3
 80059da:	d115      	bne.n	8005a08 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	32ae      	adds	r2, #174	@ 0xae
 80059e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80059ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d00b      	beq.n	8005a08 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	32ae      	adds	r2, #174	@ 0xae
 80059fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80059fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a00:	78fa      	ldrb	r2, [r7, #3]
 8005a02:	4611      	mov	r1, r2
 8005a04:	6878      	ldr	r0, [r7, #4]
 8005a06:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005a08:	2300      	movs	r3, #0
}
 8005a0a:	4618      	mov	r0, r3
 8005a0c:	3708      	adds	r7, #8
 8005a0e:	46bd      	mov	sp, r7
 8005a10:	bd80      	pop	{r7, pc}

08005a12 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8005a12:	b480      	push	{r7}
 8005a14:	b083      	sub	sp, #12
 8005a16:	af00      	add	r7, sp, #0
 8005a18:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005a1a:	2300      	movs	r3, #0
}
 8005a1c:	4618      	mov	r0, r3
 8005a1e:	370c      	adds	r7, #12
 8005a20:	46bd      	mov	sp, r7
 8005a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a26:	4770      	bx	lr

08005a28 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8005a28:	b580      	push	{r7, lr}
 8005a2a:	b084      	sub	sp, #16
 8005a2c:	af00      	add	r7, sp, #0
 8005a2e:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8005a30:	2300      	movs	r3, #0
 8005a32:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	2201      	movs	r2, #1
 8005a38:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d00e      	beq.n	8005a64 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005a4c:	685b      	ldr	r3, [r3, #4]
 8005a4e:	687a      	ldr	r2, [r7, #4]
 8005a50:	6852      	ldr	r2, [r2, #4]
 8005a52:	b2d2      	uxtb	r2, r2
 8005a54:	4611      	mov	r1, r2
 8005a56:	6878      	ldr	r0, [r7, #4]
 8005a58:	4798      	blx	r3
 8005a5a:	4603      	mov	r3, r0
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d001      	beq.n	8005a64 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8005a60:	2303      	movs	r3, #3
 8005a62:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005a64:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a66:	4618      	mov	r0, r3
 8005a68:	3710      	adds	r7, #16
 8005a6a:	46bd      	mov	sp, r7
 8005a6c:	bd80      	pop	{r7, pc}

08005a6e <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8005a6e:	b480      	push	{r7}
 8005a70:	b083      	sub	sp, #12
 8005a72:	af00      	add	r7, sp, #0
 8005a74:	6078      	str	r0, [r7, #4]
 8005a76:	460b      	mov	r3, r1
 8005a78:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8005a7a:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8005a7c:	4618      	mov	r0, r3
 8005a7e:	370c      	adds	r7, #12
 8005a80:	46bd      	mov	sp, r7
 8005a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a86:	4770      	bx	lr

08005a88 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8005a88:	b480      	push	{r7}
 8005a8a:	b083      	sub	sp, #12
 8005a8c:	af00      	add	r7, sp, #0
 8005a8e:	6078      	str	r0, [r7, #4]
 8005a90:	460b      	mov	r3, r1
 8005a92:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8005a94:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8005a96:	4618      	mov	r0, r3
 8005a98:	370c      	adds	r7, #12
 8005a9a:	46bd      	mov	sp, r7
 8005a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa0:	4770      	bx	lr

08005aa2 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8005aa2:	b580      	push	{r7, lr}
 8005aa4:	b086      	sub	sp, #24
 8005aa6:	af00      	add	r7, sp, #0
 8005aa8:	6078      	str	r0, [r7, #4]
 8005aaa:	460b      	mov	r3, r1
 8005aac:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8005ab6:	2300      	movs	r3, #0
 8005ab8:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	885b      	ldrh	r3, [r3, #2]
 8005abe:	b29b      	uxth	r3, r3
 8005ac0:	68fa      	ldr	r2, [r7, #12]
 8005ac2:	7812      	ldrb	r2, [r2, #0]
 8005ac4:	4293      	cmp	r3, r2
 8005ac6:	d91f      	bls.n	8005b08 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	781b      	ldrb	r3, [r3, #0]
 8005acc:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8005ace:	e013      	b.n	8005af8 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8005ad0:	f107 030a 	add.w	r3, r7, #10
 8005ad4:	4619      	mov	r1, r3
 8005ad6:	6978      	ldr	r0, [r7, #20]
 8005ad8:	f000 f81b 	bl	8005b12 <USBD_GetNextDesc>
 8005adc:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8005ade:	697b      	ldr	r3, [r7, #20]
 8005ae0:	785b      	ldrb	r3, [r3, #1]
 8005ae2:	2b05      	cmp	r3, #5
 8005ae4:	d108      	bne.n	8005af8 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8005ae6:	697b      	ldr	r3, [r7, #20]
 8005ae8:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8005aea:	693b      	ldr	r3, [r7, #16]
 8005aec:	789b      	ldrb	r3, [r3, #2]
 8005aee:	78fa      	ldrb	r2, [r7, #3]
 8005af0:	429a      	cmp	r2, r3
 8005af2:	d008      	beq.n	8005b06 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8005af4:	2300      	movs	r3, #0
 8005af6:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	885b      	ldrh	r3, [r3, #2]
 8005afc:	b29a      	uxth	r2, r3
 8005afe:	897b      	ldrh	r3, [r7, #10]
 8005b00:	429a      	cmp	r2, r3
 8005b02:	d8e5      	bhi.n	8005ad0 <USBD_GetEpDesc+0x2e>
 8005b04:	e000      	b.n	8005b08 <USBD_GetEpDesc+0x66>
          break;
 8005b06:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8005b08:	693b      	ldr	r3, [r7, #16]
}
 8005b0a:	4618      	mov	r0, r3
 8005b0c:	3718      	adds	r7, #24
 8005b0e:	46bd      	mov	sp, r7
 8005b10:	bd80      	pop	{r7, pc}

08005b12 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8005b12:	b480      	push	{r7}
 8005b14:	b085      	sub	sp, #20
 8005b16:	af00      	add	r7, sp, #0
 8005b18:	6078      	str	r0, [r7, #4]
 8005b1a:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8005b20:	683b      	ldr	r3, [r7, #0]
 8005b22:	881b      	ldrh	r3, [r3, #0]
 8005b24:	68fa      	ldr	r2, [r7, #12]
 8005b26:	7812      	ldrb	r2, [r2, #0]
 8005b28:	4413      	add	r3, r2
 8005b2a:	b29a      	uxth	r2, r3
 8005b2c:	683b      	ldr	r3, [r7, #0]
 8005b2e:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	781b      	ldrb	r3, [r3, #0]
 8005b34:	461a      	mov	r2, r3
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	4413      	add	r3, r2
 8005b3a:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8005b3c:	68fb      	ldr	r3, [r7, #12]
}
 8005b3e:	4618      	mov	r0, r3
 8005b40:	3714      	adds	r7, #20
 8005b42:	46bd      	mov	sp, r7
 8005b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b48:	4770      	bx	lr

08005b4a <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8005b4a:	b480      	push	{r7}
 8005b4c:	b087      	sub	sp, #28
 8005b4e:	af00      	add	r7, sp, #0
 8005b50:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8005b56:	697b      	ldr	r3, [r7, #20]
 8005b58:	781b      	ldrb	r3, [r3, #0]
 8005b5a:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8005b5c:	697b      	ldr	r3, [r7, #20]
 8005b5e:	3301      	adds	r3, #1
 8005b60:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8005b62:	697b      	ldr	r3, [r7, #20]
 8005b64:	781b      	ldrb	r3, [r3, #0]
 8005b66:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8005b68:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8005b6c:	021b      	lsls	r3, r3, #8
 8005b6e:	b21a      	sxth	r2, r3
 8005b70:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8005b74:	4313      	orrs	r3, r2
 8005b76:	b21b      	sxth	r3, r3
 8005b78:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8005b7a:	89fb      	ldrh	r3, [r7, #14]
}
 8005b7c:	4618      	mov	r0, r3
 8005b7e:	371c      	adds	r7, #28
 8005b80:	46bd      	mov	sp, r7
 8005b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b86:	4770      	bx	lr

08005b88 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005b88:	b580      	push	{r7, lr}
 8005b8a:	b084      	sub	sp, #16
 8005b8c:	af00      	add	r7, sp, #0
 8005b8e:	6078      	str	r0, [r7, #4]
 8005b90:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005b92:	2300      	movs	r3, #0
 8005b94:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005b96:	683b      	ldr	r3, [r7, #0]
 8005b98:	781b      	ldrb	r3, [r3, #0]
 8005b9a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8005b9e:	2b40      	cmp	r3, #64	@ 0x40
 8005ba0:	d005      	beq.n	8005bae <USBD_StdDevReq+0x26>
 8005ba2:	2b40      	cmp	r3, #64	@ 0x40
 8005ba4:	d857      	bhi.n	8005c56 <USBD_StdDevReq+0xce>
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d00f      	beq.n	8005bca <USBD_StdDevReq+0x42>
 8005baa:	2b20      	cmp	r3, #32
 8005bac:	d153      	bne.n	8005c56 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	32ae      	adds	r2, #174	@ 0xae
 8005bb8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005bbc:	689b      	ldr	r3, [r3, #8]
 8005bbe:	6839      	ldr	r1, [r7, #0]
 8005bc0:	6878      	ldr	r0, [r7, #4]
 8005bc2:	4798      	blx	r3
 8005bc4:	4603      	mov	r3, r0
 8005bc6:	73fb      	strb	r3, [r7, #15]
      break;
 8005bc8:	e04a      	b.n	8005c60 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005bca:	683b      	ldr	r3, [r7, #0]
 8005bcc:	785b      	ldrb	r3, [r3, #1]
 8005bce:	2b09      	cmp	r3, #9
 8005bd0:	d83b      	bhi.n	8005c4a <USBD_StdDevReq+0xc2>
 8005bd2:	a201      	add	r2, pc, #4	@ (adr r2, 8005bd8 <USBD_StdDevReq+0x50>)
 8005bd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bd8:	08005c2d 	.word	0x08005c2d
 8005bdc:	08005c41 	.word	0x08005c41
 8005be0:	08005c4b 	.word	0x08005c4b
 8005be4:	08005c37 	.word	0x08005c37
 8005be8:	08005c4b 	.word	0x08005c4b
 8005bec:	08005c0b 	.word	0x08005c0b
 8005bf0:	08005c01 	.word	0x08005c01
 8005bf4:	08005c4b 	.word	0x08005c4b
 8005bf8:	08005c23 	.word	0x08005c23
 8005bfc:	08005c15 	.word	0x08005c15
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8005c00:	6839      	ldr	r1, [r7, #0]
 8005c02:	6878      	ldr	r0, [r7, #4]
 8005c04:	f000 fa3c 	bl	8006080 <USBD_GetDescriptor>
          break;
 8005c08:	e024      	b.n	8005c54 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8005c0a:	6839      	ldr	r1, [r7, #0]
 8005c0c:	6878      	ldr	r0, [r7, #4]
 8005c0e:	f000 fba1 	bl	8006354 <USBD_SetAddress>
          break;
 8005c12:	e01f      	b.n	8005c54 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8005c14:	6839      	ldr	r1, [r7, #0]
 8005c16:	6878      	ldr	r0, [r7, #4]
 8005c18:	f000 fbe0 	bl	80063dc <USBD_SetConfig>
 8005c1c:	4603      	mov	r3, r0
 8005c1e:	73fb      	strb	r3, [r7, #15]
          break;
 8005c20:	e018      	b.n	8005c54 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8005c22:	6839      	ldr	r1, [r7, #0]
 8005c24:	6878      	ldr	r0, [r7, #4]
 8005c26:	f000 fc83 	bl	8006530 <USBD_GetConfig>
          break;
 8005c2a:	e013      	b.n	8005c54 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8005c2c:	6839      	ldr	r1, [r7, #0]
 8005c2e:	6878      	ldr	r0, [r7, #4]
 8005c30:	f000 fcb4 	bl	800659c <USBD_GetStatus>
          break;
 8005c34:	e00e      	b.n	8005c54 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8005c36:	6839      	ldr	r1, [r7, #0]
 8005c38:	6878      	ldr	r0, [r7, #4]
 8005c3a:	f000 fce3 	bl	8006604 <USBD_SetFeature>
          break;
 8005c3e:	e009      	b.n	8005c54 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8005c40:	6839      	ldr	r1, [r7, #0]
 8005c42:	6878      	ldr	r0, [r7, #4]
 8005c44:	f000 fd07 	bl	8006656 <USBD_ClrFeature>
          break;
 8005c48:	e004      	b.n	8005c54 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8005c4a:	6839      	ldr	r1, [r7, #0]
 8005c4c:	6878      	ldr	r0, [r7, #4]
 8005c4e:	f000 fd5e 	bl	800670e <USBD_CtlError>
          break;
 8005c52:	bf00      	nop
      }
      break;
 8005c54:	e004      	b.n	8005c60 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8005c56:	6839      	ldr	r1, [r7, #0]
 8005c58:	6878      	ldr	r0, [r7, #4]
 8005c5a:	f000 fd58 	bl	800670e <USBD_CtlError>
      break;
 8005c5e:	bf00      	nop
  }

  return ret;
 8005c60:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c62:	4618      	mov	r0, r3
 8005c64:	3710      	adds	r7, #16
 8005c66:	46bd      	mov	sp, r7
 8005c68:	bd80      	pop	{r7, pc}
 8005c6a:	bf00      	nop

08005c6c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005c6c:	b580      	push	{r7, lr}
 8005c6e:	b084      	sub	sp, #16
 8005c70:	af00      	add	r7, sp, #0
 8005c72:	6078      	str	r0, [r7, #4]
 8005c74:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005c76:	2300      	movs	r3, #0
 8005c78:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005c7a:	683b      	ldr	r3, [r7, #0]
 8005c7c:	781b      	ldrb	r3, [r3, #0]
 8005c7e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8005c82:	2b40      	cmp	r3, #64	@ 0x40
 8005c84:	d005      	beq.n	8005c92 <USBD_StdItfReq+0x26>
 8005c86:	2b40      	cmp	r3, #64	@ 0x40
 8005c88:	d852      	bhi.n	8005d30 <USBD_StdItfReq+0xc4>
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d001      	beq.n	8005c92 <USBD_StdItfReq+0x26>
 8005c8e:	2b20      	cmp	r3, #32
 8005c90:	d14e      	bne.n	8005d30 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005c98:	b2db      	uxtb	r3, r3
 8005c9a:	3b01      	subs	r3, #1
 8005c9c:	2b02      	cmp	r3, #2
 8005c9e:	d840      	bhi.n	8005d22 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8005ca0:	683b      	ldr	r3, [r7, #0]
 8005ca2:	889b      	ldrh	r3, [r3, #4]
 8005ca4:	b2db      	uxtb	r3, r3
 8005ca6:	2b01      	cmp	r3, #1
 8005ca8:	d836      	bhi.n	8005d18 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8005caa:	683b      	ldr	r3, [r7, #0]
 8005cac:	889b      	ldrh	r3, [r3, #4]
 8005cae:	b2db      	uxtb	r3, r3
 8005cb0:	4619      	mov	r1, r3
 8005cb2:	6878      	ldr	r0, [r7, #4]
 8005cb4:	f7ff fedb 	bl	8005a6e <USBD_CoreFindIF>
 8005cb8:	4603      	mov	r3, r0
 8005cba:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005cbc:	7bbb      	ldrb	r3, [r7, #14]
 8005cbe:	2bff      	cmp	r3, #255	@ 0xff
 8005cc0:	d01d      	beq.n	8005cfe <USBD_StdItfReq+0x92>
 8005cc2:	7bbb      	ldrb	r3, [r7, #14]
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d11a      	bne.n	8005cfe <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8005cc8:	7bba      	ldrb	r2, [r7, #14]
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	32ae      	adds	r2, #174	@ 0xae
 8005cce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005cd2:	689b      	ldr	r3, [r3, #8]
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d00f      	beq.n	8005cf8 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8005cd8:	7bba      	ldrb	r2, [r7, #14]
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8005ce0:	7bba      	ldrb	r2, [r7, #14]
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	32ae      	adds	r2, #174	@ 0xae
 8005ce6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005cea:	689b      	ldr	r3, [r3, #8]
 8005cec:	6839      	ldr	r1, [r7, #0]
 8005cee:	6878      	ldr	r0, [r7, #4]
 8005cf0:	4798      	blx	r3
 8005cf2:	4603      	mov	r3, r0
 8005cf4:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8005cf6:	e004      	b.n	8005d02 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8005cf8:	2303      	movs	r3, #3
 8005cfa:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8005cfc:	e001      	b.n	8005d02 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8005cfe:	2303      	movs	r3, #3
 8005d00:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8005d02:	683b      	ldr	r3, [r7, #0]
 8005d04:	88db      	ldrh	r3, [r3, #6]
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d110      	bne.n	8005d2c <USBD_StdItfReq+0xc0>
 8005d0a:	7bfb      	ldrb	r3, [r7, #15]
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d10d      	bne.n	8005d2c <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8005d10:	6878      	ldr	r0, [r7, #4]
 8005d12:	f000 fdd3 	bl	80068bc <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8005d16:	e009      	b.n	8005d2c <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8005d18:	6839      	ldr	r1, [r7, #0]
 8005d1a:	6878      	ldr	r0, [r7, #4]
 8005d1c:	f000 fcf7 	bl	800670e <USBD_CtlError>
          break;
 8005d20:	e004      	b.n	8005d2c <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8005d22:	6839      	ldr	r1, [r7, #0]
 8005d24:	6878      	ldr	r0, [r7, #4]
 8005d26:	f000 fcf2 	bl	800670e <USBD_CtlError>
          break;
 8005d2a:	e000      	b.n	8005d2e <USBD_StdItfReq+0xc2>
          break;
 8005d2c:	bf00      	nop
      }
      break;
 8005d2e:	e004      	b.n	8005d3a <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8005d30:	6839      	ldr	r1, [r7, #0]
 8005d32:	6878      	ldr	r0, [r7, #4]
 8005d34:	f000 fceb 	bl	800670e <USBD_CtlError>
      break;
 8005d38:	bf00      	nop
  }

  return ret;
 8005d3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d3c:	4618      	mov	r0, r3
 8005d3e:	3710      	adds	r7, #16
 8005d40:	46bd      	mov	sp, r7
 8005d42:	bd80      	pop	{r7, pc}

08005d44 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005d44:	b580      	push	{r7, lr}
 8005d46:	b084      	sub	sp, #16
 8005d48:	af00      	add	r7, sp, #0
 8005d4a:	6078      	str	r0, [r7, #4]
 8005d4c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8005d4e:	2300      	movs	r3, #0
 8005d50:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8005d52:	683b      	ldr	r3, [r7, #0]
 8005d54:	889b      	ldrh	r3, [r3, #4]
 8005d56:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005d58:	683b      	ldr	r3, [r7, #0]
 8005d5a:	781b      	ldrb	r3, [r3, #0]
 8005d5c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8005d60:	2b40      	cmp	r3, #64	@ 0x40
 8005d62:	d007      	beq.n	8005d74 <USBD_StdEPReq+0x30>
 8005d64:	2b40      	cmp	r3, #64	@ 0x40
 8005d66:	f200 817f 	bhi.w	8006068 <USBD_StdEPReq+0x324>
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d02a      	beq.n	8005dc4 <USBD_StdEPReq+0x80>
 8005d6e:	2b20      	cmp	r3, #32
 8005d70:	f040 817a 	bne.w	8006068 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8005d74:	7bbb      	ldrb	r3, [r7, #14]
 8005d76:	4619      	mov	r1, r3
 8005d78:	6878      	ldr	r0, [r7, #4]
 8005d7a:	f7ff fe85 	bl	8005a88 <USBD_CoreFindEP>
 8005d7e:	4603      	mov	r3, r0
 8005d80:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005d82:	7b7b      	ldrb	r3, [r7, #13]
 8005d84:	2bff      	cmp	r3, #255	@ 0xff
 8005d86:	f000 8174 	beq.w	8006072 <USBD_StdEPReq+0x32e>
 8005d8a:	7b7b      	ldrb	r3, [r7, #13]
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	f040 8170 	bne.w	8006072 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8005d92:	7b7a      	ldrb	r2, [r7, #13]
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8005d9a:	7b7a      	ldrb	r2, [r7, #13]
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	32ae      	adds	r2, #174	@ 0xae
 8005da0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005da4:	689b      	ldr	r3, [r3, #8]
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	f000 8163 	beq.w	8006072 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8005dac:	7b7a      	ldrb	r2, [r7, #13]
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	32ae      	adds	r2, #174	@ 0xae
 8005db2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005db6:	689b      	ldr	r3, [r3, #8]
 8005db8:	6839      	ldr	r1, [r7, #0]
 8005dba:	6878      	ldr	r0, [r7, #4]
 8005dbc:	4798      	blx	r3
 8005dbe:	4603      	mov	r3, r0
 8005dc0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005dc2:	e156      	b.n	8006072 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005dc4:	683b      	ldr	r3, [r7, #0]
 8005dc6:	785b      	ldrb	r3, [r3, #1]
 8005dc8:	2b03      	cmp	r3, #3
 8005dca:	d008      	beq.n	8005dde <USBD_StdEPReq+0x9a>
 8005dcc:	2b03      	cmp	r3, #3
 8005dce:	f300 8145 	bgt.w	800605c <USBD_StdEPReq+0x318>
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	f000 809b 	beq.w	8005f0e <USBD_StdEPReq+0x1ca>
 8005dd8:	2b01      	cmp	r3, #1
 8005dda:	d03c      	beq.n	8005e56 <USBD_StdEPReq+0x112>
 8005ddc:	e13e      	b.n	800605c <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005de4:	b2db      	uxtb	r3, r3
 8005de6:	2b02      	cmp	r3, #2
 8005de8:	d002      	beq.n	8005df0 <USBD_StdEPReq+0xac>
 8005dea:	2b03      	cmp	r3, #3
 8005dec:	d016      	beq.n	8005e1c <USBD_StdEPReq+0xd8>
 8005dee:	e02c      	b.n	8005e4a <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005df0:	7bbb      	ldrb	r3, [r7, #14]
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d00d      	beq.n	8005e12 <USBD_StdEPReq+0xce>
 8005df6:	7bbb      	ldrb	r3, [r7, #14]
 8005df8:	2b80      	cmp	r3, #128	@ 0x80
 8005dfa:	d00a      	beq.n	8005e12 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8005dfc:	7bbb      	ldrb	r3, [r7, #14]
 8005dfe:	4619      	mov	r1, r3
 8005e00:	6878      	ldr	r0, [r7, #4]
 8005e02:	f001 f8db 	bl	8006fbc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8005e06:	2180      	movs	r1, #128	@ 0x80
 8005e08:	6878      	ldr	r0, [r7, #4]
 8005e0a:	f001 f8d7 	bl	8006fbc <USBD_LL_StallEP>
 8005e0e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8005e10:	e020      	b.n	8005e54 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8005e12:	6839      	ldr	r1, [r7, #0]
 8005e14:	6878      	ldr	r0, [r7, #4]
 8005e16:	f000 fc7a 	bl	800670e <USBD_CtlError>
              break;
 8005e1a:	e01b      	b.n	8005e54 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8005e1c:	683b      	ldr	r3, [r7, #0]
 8005e1e:	885b      	ldrh	r3, [r3, #2]
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d10e      	bne.n	8005e42 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8005e24:	7bbb      	ldrb	r3, [r7, #14]
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d00b      	beq.n	8005e42 <USBD_StdEPReq+0xfe>
 8005e2a:	7bbb      	ldrb	r3, [r7, #14]
 8005e2c:	2b80      	cmp	r3, #128	@ 0x80
 8005e2e:	d008      	beq.n	8005e42 <USBD_StdEPReq+0xfe>
 8005e30:	683b      	ldr	r3, [r7, #0]
 8005e32:	88db      	ldrh	r3, [r3, #6]
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d104      	bne.n	8005e42 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8005e38:	7bbb      	ldrb	r3, [r7, #14]
 8005e3a:	4619      	mov	r1, r3
 8005e3c:	6878      	ldr	r0, [r7, #4]
 8005e3e:	f001 f8bd 	bl	8006fbc <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8005e42:	6878      	ldr	r0, [r7, #4]
 8005e44:	f000 fd3a 	bl	80068bc <USBD_CtlSendStatus>

              break;
 8005e48:	e004      	b.n	8005e54 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8005e4a:	6839      	ldr	r1, [r7, #0]
 8005e4c:	6878      	ldr	r0, [r7, #4]
 8005e4e:	f000 fc5e 	bl	800670e <USBD_CtlError>
              break;
 8005e52:	bf00      	nop
          }
          break;
 8005e54:	e107      	b.n	8006066 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005e5c:	b2db      	uxtb	r3, r3
 8005e5e:	2b02      	cmp	r3, #2
 8005e60:	d002      	beq.n	8005e68 <USBD_StdEPReq+0x124>
 8005e62:	2b03      	cmp	r3, #3
 8005e64:	d016      	beq.n	8005e94 <USBD_StdEPReq+0x150>
 8005e66:	e04b      	b.n	8005f00 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005e68:	7bbb      	ldrb	r3, [r7, #14]
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d00d      	beq.n	8005e8a <USBD_StdEPReq+0x146>
 8005e6e:	7bbb      	ldrb	r3, [r7, #14]
 8005e70:	2b80      	cmp	r3, #128	@ 0x80
 8005e72:	d00a      	beq.n	8005e8a <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8005e74:	7bbb      	ldrb	r3, [r7, #14]
 8005e76:	4619      	mov	r1, r3
 8005e78:	6878      	ldr	r0, [r7, #4]
 8005e7a:	f001 f89f 	bl	8006fbc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8005e7e:	2180      	movs	r1, #128	@ 0x80
 8005e80:	6878      	ldr	r0, [r7, #4]
 8005e82:	f001 f89b 	bl	8006fbc <USBD_LL_StallEP>
 8005e86:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8005e88:	e040      	b.n	8005f0c <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8005e8a:	6839      	ldr	r1, [r7, #0]
 8005e8c:	6878      	ldr	r0, [r7, #4]
 8005e8e:	f000 fc3e 	bl	800670e <USBD_CtlError>
              break;
 8005e92:	e03b      	b.n	8005f0c <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8005e94:	683b      	ldr	r3, [r7, #0]
 8005e96:	885b      	ldrh	r3, [r3, #2]
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d136      	bne.n	8005f0a <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8005e9c:	7bbb      	ldrb	r3, [r7, #14]
 8005e9e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d004      	beq.n	8005eb0 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8005ea6:	7bbb      	ldrb	r3, [r7, #14]
 8005ea8:	4619      	mov	r1, r3
 8005eaa:	6878      	ldr	r0, [r7, #4]
 8005eac:	f001 f8a5 	bl	8006ffa <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8005eb0:	6878      	ldr	r0, [r7, #4]
 8005eb2:	f000 fd03 	bl	80068bc <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8005eb6:	7bbb      	ldrb	r3, [r7, #14]
 8005eb8:	4619      	mov	r1, r3
 8005eba:	6878      	ldr	r0, [r7, #4]
 8005ebc:	f7ff fde4 	bl	8005a88 <USBD_CoreFindEP>
 8005ec0:	4603      	mov	r3, r0
 8005ec2:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005ec4:	7b7b      	ldrb	r3, [r7, #13]
 8005ec6:	2bff      	cmp	r3, #255	@ 0xff
 8005ec8:	d01f      	beq.n	8005f0a <USBD_StdEPReq+0x1c6>
 8005eca:	7b7b      	ldrb	r3, [r7, #13]
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d11c      	bne.n	8005f0a <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8005ed0:	7b7a      	ldrb	r2, [r7, #13]
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8005ed8:	7b7a      	ldrb	r2, [r7, #13]
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	32ae      	adds	r2, #174	@ 0xae
 8005ede:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ee2:	689b      	ldr	r3, [r3, #8]
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d010      	beq.n	8005f0a <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8005ee8:	7b7a      	ldrb	r2, [r7, #13]
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	32ae      	adds	r2, #174	@ 0xae
 8005eee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ef2:	689b      	ldr	r3, [r3, #8]
 8005ef4:	6839      	ldr	r1, [r7, #0]
 8005ef6:	6878      	ldr	r0, [r7, #4]
 8005ef8:	4798      	blx	r3
 8005efa:	4603      	mov	r3, r0
 8005efc:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8005efe:	e004      	b.n	8005f0a <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8005f00:	6839      	ldr	r1, [r7, #0]
 8005f02:	6878      	ldr	r0, [r7, #4]
 8005f04:	f000 fc03 	bl	800670e <USBD_CtlError>
              break;
 8005f08:	e000      	b.n	8005f0c <USBD_StdEPReq+0x1c8>
              break;
 8005f0a:	bf00      	nop
          }
          break;
 8005f0c:	e0ab      	b.n	8006066 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005f14:	b2db      	uxtb	r3, r3
 8005f16:	2b02      	cmp	r3, #2
 8005f18:	d002      	beq.n	8005f20 <USBD_StdEPReq+0x1dc>
 8005f1a:	2b03      	cmp	r3, #3
 8005f1c:	d032      	beq.n	8005f84 <USBD_StdEPReq+0x240>
 8005f1e:	e097      	b.n	8006050 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005f20:	7bbb      	ldrb	r3, [r7, #14]
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d007      	beq.n	8005f36 <USBD_StdEPReq+0x1f2>
 8005f26:	7bbb      	ldrb	r3, [r7, #14]
 8005f28:	2b80      	cmp	r3, #128	@ 0x80
 8005f2a:	d004      	beq.n	8005f36 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8005f2c:	6839      	ldr	r1, [r7, #0]
 8005f2e:	6878      	ldr	r0, [r7, #4]
 8005f30:	f000 fbed 	bl	800670e <USBD_CtlError>
                break;
 8005f34:	e091      	b.n	800605a <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005f36:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	da0b      	bge.n	8005f56 <USBD_StdEPReq+0x212>
 8005f3e:	7bbb      	ldrb	r3, [r7, #14]
 8005f40:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005f44:	4613      	mov	r3, r2
 8005f46:	009b      	lsls	r3, r3, #2
 8005f48:	4413      	add	r3, r2
 8005f4a:	009b      	lsls	r3, r3, #2
 8005f4c:	3310      	adds	r3, #16
 8005f4e:	687a      	ldr	r2, [r7, #4]
 8005f50:	4413      	add	r3, r2
 8005f52:	3304      	adds	r3, #4
 8005f54:	e00b      	b.n	8005f6e <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8005f56:	7bbb      	ldrb	r3, [r7, #14]
 8005f58:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005f5c:	4613      	mov	r3, r2
 8005f5e:	009b      	lsls	r3, r3, #2
 8005f60:	4413      	add	r3, r2
 8005f62:	009b      	lsls	r3, r3, #2
 8005f64:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8005f68:	687a      	ldr	r2, [r7, #4]
 8005f6a:	4413      	add	r3, r2
 8005f6c:	3304      	adds	r3, #4
 8005f6e:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8005f70:	68bb      	ldr	r3, [r7, #8]
 8005f72:	2200      	movs	r2, #0
 8005f74:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8005f76:	68bb      	ldr	r3, [r7, #8]
 8005f78:	2202      	movs	r2, #2
 8005f7a:	4619      	mov	r1, r3
 8005f7c:	6878      	ldr	r0, [r7, #4]
 8005f7e:	f000 fc43 	bl	8006808 <USBD_CtlSendData>
              break;
 8005f82:	e06a      	b.n	800605a <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8005f84:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	da11      	bge.n	8005fb0 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8005f8c:	7bbb      	ldrb	r3, [r7, #14]
 8005f8e:	f003 020f 	and.w	r2, r3, #15
 8005f92:	6879      	ldr	r1, [r7, #4]
 8005f94:	4613      	mov	r3, r2
 8005f96:	009b      	lsls	r3, r3, #2
 8005f98:	4413      	add	r3, r2
 8005f9a:	009b      	lsls	r3, r3, #2
 8005f9c:	440b      	add	r3, r1
 8005f9e:	3324      	adds	r3, #36	@ 0x24
 8005fa0:	881b      	ldrh	r3, [r3, #0]
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d117      	bne.n	8005fd6 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8005fa6:	6839      	ldr	r1, [r7, #0]
 8005fa8:	6878      	ldr	r0, [r7, #4]
 8005faa:	f000 fbb0 	bl	800670e <USBD_CtlError>
                  break;
 8005fae:	e054      	b.n	800605a <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8005fb0:	7bbb      	ldrb	r3, [r7, #14]
 8005fb2:	f003 020f 	and.w	r2, r3, #15
 8005fb6:	6879      	ldr	r1, [r7, #4]
 8005fb8:	4613      	mov	r3, r2
 8005fba:	009b      	lsls	r3, r3, #2
 8005fbc:	4413      	add	r3, r2
 8005fbe:	009b      	lsls	r3, r3, #2
 8005fc0:	440b      	add	r3, r1
 8005fc2:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8005fc6:	881b      	ldrh	r3, [r3, #0]
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d104      	bne.n	8005fd6 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8005fcc:	6839      	ldr	r1, [r7, #0]
 8005fce:	6878      	ldr	r0, [r7, #4]
 8005fd0:	f000 fb9d 	bl	800670e <USBD_CtlError>
                  break;
 8005fd4:	e041      	b.n	800605a <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005fd6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	da0b      	bge.n	8005ff6 <USBD_StdEPReq+0x2b2>
 8005fde:	7bbb      	ldrb	r3, [r7, #14]
 8005fe0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005fe4:	4613      	mov	r3, r2
 8005fe6:	009b      	lsls	r3, r3, #2
 8005fe8:	4413      	add	r3, r2
 8005fea:	009b      	lsls	r3, r3, #2
 8005fec:	3310      	adds	r3, #16
 8005fee:	687a      	ldr	r2, [r7, #4]
 8005ff0:	4413      	add	r3, r2
 8005ff2:	3304      	adds	r3, #4
 8005ff4:	e00b      	b.n	800600e <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8005ff6:	7bbb      	ldrb	r3, [r7, #14]
 8005ff8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005ffc:	4613      	mov	r3, r2
 8005ffe:	009b      	lsls	r3, r3, #2
 8006000:	4413      	add	r3, r2
 8006002:	009b      	lsls	r3, r3, #2
 8006004:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8006008:	687a      	ldr	r2, [r7, #4]
 800600a:	4413      	add	r3, r2
 800600c:	3304      	adds	r3, #4
 800600e:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006010:	7bbb      	ldrb	r3, [r7, #14]
 8006012:	2b00      	cmp	r3, #0
 8006014:	d002      	beq.n	800601c <USBD_StdEPReq+0x2d8>
 8006016:	7bbb      	ldrb	r3, [r7, #14]
 8006018:	2b80      	cmp	r3, #128	@ 0x80
 800601a:	d103      	bne.n	8006024 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800601c:	68bb      	ldr	r3, [r7, #8]
 800601e:	2200      	movs	r2, #0
 8006020:	601a      	str	r2, [r3, #0]
 8006022:	e00e      	b.n	8006042 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8006024:	7bbb      	ldrb	r3, [r7, #14]
 8006026:	4619      	mov	r1, r3
 8006028:	6878      	ldr	r0, [r7, #4]
 800602a:	f001 f805 	bl	8007038 <USBD_LL_IsStallEP>
 800602e:	4603      	mov	r3, r0
 8006030:	2b00      	cmp	r3, #0
 8006032:	d003      	beq.n	800603c <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8006034:	68bb      	ldr	r3, [r7, #8]
 8006036:	2201      	movs	r2, #1
 8006038:	601a      	str	r2, [r3, #0]
 800603a:	e002      	b.n	8006042 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800603c:	68bb      	ldr	r3, [r7, #8]
 800603e:	2200      	movs	r2, #0
 8006040:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006042:	68bb      	ldr	r3, [r7, #8]
 8006044:	2202      	movs	r2, #2
 8006046:	4619      	mov	r1, r3
 8006048:	6878      	ldr	r0, [r7, #4]
 800604a:	f000 fbdd 	bl	8006808 <USBD_CtlSendData>
              break;
 800604e:	e004      	b.n	800605a <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8006050:	6839      	ldr	r1, [r7, #0]
 8006052:	6878      	ldr	r0, [r7, #4]
 8006054:	f000 fb5b 	bl	800670e <USBD_CtlError>
              break;
 8006058:	bf00      	nop
          }
          break;
 800605a:	e004      	b.n	8006066 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800605c:	6839      	ldr	r1, [r7, #0]
 800605e:	6878      	ldr	r0, [r7, #4]
 8006060:	f000 fb55 	bl	800670e <USBD_CtlError>
          break;
 8006064:	bf00      	nop
      }
      break;
 8006066:	e005      	b.n	8006074 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8006068:	6839      	ldr	r1, [r7, #0]
 800606a:	6878      	ldr	r0, [r7, #4]
 800606c:	f000 fb4f 	bl	800670e <USBD_CtlError>
      break;
 8006070:	e000      	b.n	8006074 <USBD_StdEPReq+0x330>
      break;
 8006072:	bf00      	nop
  }

  return ret;
 8006074:	7bfb      	ldrb	r3, [r7, #15]
}
 8006076:	4618      	mov	r0, r3
 8006078:	3710      	adds	r7, #16
 800607a:	46bd      	mov	sp, r7
 800607c:	bd80      	pop	{r7, pc}
	...

08006080 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006080:	b580      	push	{r7, lr}
 8006082:	b084      	sub	sp, #16
 8006084:	af00      	add	r7, sp, #0
 8006086:	6078      	str	r0, [r7, #4]
 8006088:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800608a:	2300      	movs	r3, #0
 800608c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800608e:	2300      	movs	r3, #0
 8006090:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8006092:	2300      	movs	r3, #0
 8006094:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8006096:	683b      	ldr	r3, [r7, #0]
 8006098:	885b      	ldrh	r3, [r3, #2]
 800609a:	0a1b      	lsrs	r3, r3, #8
 800609c:	b29b      	uxth	r3, r3
 800609e:	3b01      	subs	r3, #1
 80060a0:	2b06      	cmp	r3, #6
 80060a2:	f200 8128 	bhi.w	80062f6 <USBD_GetDescriptor+0x276>
 80060a6:	a201      	add	r2, pc, #4	@ (adr r2, 80060ac <USBD_GetDescriptor+0x2c>)
 80060a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060ac:	080060c9 	.word	0x080060c9
 80060b0:	080060e1 	.word	0x080060e1
 80060b4:	08006121 	.word	0x08006121
 80060b8:	080062f7 	.word	0x080062f7
 80060bc:	080062f7 	.word	0x080062f7
 80060c0:	08006297 	.word	0x08006297
 80060c4:	080062c3 	.word	0x080062c3
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	687a      	ldr	r2, [r7, #4]
 80060d2:	7c12      	ldrb	r2, [r2, #16]
 80060d4:	f107 0108 	add.w	r1, r7, #8
 80060d8:	4610      	mov	r0, r2
 80060da:	4798      	blx	r3
 80060dc:	60f8      	str	r0, [r7, #12]
      break;
 80060de:	e112      	b.n	8006306 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	7c1b      	ldrb	r3, [r3, #16]
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d10d      	bne.n	8006104 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80060ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80060f0:	f107 0208 	add.w	r2, r7, #8
 80060f4:	4610      	mov	r0, r2
 80060f6:	4798      	blx	r3
 80060f8:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	3301      	adds	r3, #1
 80060fe:	2202      	movs	r2, #2
 8006100:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8006102:	e100      	b.n	8006306 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800610a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800610c:	f107 0208 	add.w	r2, r7, #8
 8006110:	4610      	mov	r0, r2
 8006112:	4798      	blx	r3
 8006114:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	3301      	adds	r3, #1
 800611a:	2202      	movs	r2, #2
 800611c:	701a      	strb	r2, [r3, #0]
      break;
 800611e:	e0f2      	b.n	8006306 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8006120:	683b      	ldr	r3, [r7, #0]
 8006122:	885b      	ldrh	r3, [r3, #2]
 8006124:	b2db      	uxtb	r3, r3
 8006126:	2b05      	cmp	r3, #5
 8006128:	f200 80ac 	bhi.w	8006284 <USBD_GetDescriptor+0x204>
 800612c:	a201      	add	r2, pc, #4	@ (adr r2, 8006134 <USBD_GetDescriptor+0xb4>)
 800612e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006132:	bf00      	nop
 8006134:	0800614d 	.word	0x0800614d
 8006138:	08006181 	.word	0x08006181
 800613c:	080061b5 	.word	0x080061b5
 8006140:	080061e9 	.word	0x080061e9
 8006144:	0800621d 	.word	0x0800621d
 8006148:	08006251 	.word	0x08006251
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006152:	685b      	ldr	r3, [r3, #4]
 8006154:	2b00      	cmp	r3, #0
 8006156:	d00b      	beq.n	8006170 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800615e:	685b      	ldr	r3, [r3, #4]
 8006160:	687a      	ldr	r2, [r7, #4]
 8006162:	7c12      	ldrb	r2, [r2, #16]
 8006164:	f107 0108 	add.w	r1, r7, #8
 8006168:	4610      	mov	r0, r2
 800616a:	4798      	blx	r3
 800616c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800616e:	e091      	b.n	8006294 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006170:	6839      	ldr	r1, [r7, #0]
 8006172:	6878      	ldr	r0, [r7, #4]
 8006174:	f000 facb 	bl	800670e <USBD_CtlError>
            err++;
 8006178:	7afb      	ldrb	r3, [r7, #11]
 800617a:	3301      	adds	r3, #1
 800617c:	72fb      	strb	r3, [r7, #11]
          break;
 800617e:	e089      	b.n	8006294 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006186:	689b      	ldr	r3, [r3, #8]
 8006188:	2b00      	cmp	r3, #0
 800618a:	d00b      	beq.n	80061a4 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006192:	689b      	ldr	r3, [r3, #8]
 8006194:	687a      	ldr	r2, [r7, #4]
 8006196:	7c12      	ldrb	r2, [r2, #16]
 8006198:	f107 0108 	add.w	r1, r7, #8
 800619c:	4610      	mov	r0, r2
 800619e:	4798      	blx	r3
 80061a0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80061a2:	e077      	b.n	8006294 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80061a4:	6839      	ldr	r1, [r7, #0]
 80061a6:	6878      	ldr	r0, [r7, #4]
 80061a8:	f000 fab1 	bl	800670e <USBD_CtlError>
            err++;
 80061ac:	7afb      	ldrb	r3, [r7, #11]
 80061ae:	3301      	adds	r3, #1
 80061b0:	72fb      	strb	r3, [r7, #11]
          break;
 80061b2:	e06f      	b.n	8006294 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80061ba:	68db      	ldr	r3, [r3, #12]
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d00b      	beq.n	80061d8 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80061c6:	68db      	ldr	r3, [r3, #12]
 80061c8:	687a      	ldr	r2, [r7, #4]
 80061ca:	7c12      	ldrb	r2, [r2, #16]
 80061cc:	f107 0108 	add.w	r1, r7, #8
 80061d0:	4610      	mov	r0, r2
 80061d2:	4798      	blx	r3
 80061d4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80061d6:	e05d      	b.n	8006294 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80061d8:	6839      	ldr	r1, [r7, #0]
 80061da:	6878      	ldr	r0, [r7, #4]
 80061dc:	f000 fa97 	bl	800670e <USBD_CtlError>
            err++;
 80061e0:	7afb      	ldrb	r3, [r7, #11]
 80061e2:	3301      	adds	r3, #1
 80061e4:	72fb      	strb	r3, [r7, #11]
          break;
 80061e6:	e055      	b.n	8006294 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80061ee:	691b      	ldr	r3, [r3, #16]
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d00b      	beq.n	800620c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80061fa:	691b      	ldr	r3, [r3, #16]
 80061fc:	687a      	ldr	r2, [r7, #4]
 80061fe:	7c12      	ldrb	r2, [r2, #16]
 8006200:	f107 0108 	add.w	r1, r7, #8
 8006204:	4610      	mov	r0, r2
 8006206:	4798      	blx	r3
 8006208:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800620a:	e043      	b.n	8006294 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800620c:	6839      	ldr	r1, [r7, #0]
 800620e:	6878      	ldr	r0, [r7, #4]
 8006210:	f000 fa7d 	bl	800670e <USBD_CtlError>
            err++;
 8006214:	7afb      	ldrb	r3, [r7, #11]
 8006216:	3301      	adds	r3, #1
 8006218:	72fb      	strb	r3, [r7, #11]
          break;
 800621a:	e03b      	b.n	8006294 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006222:	695b      	ldr	r3, [r3, #20]
 8006224:	2b00      	cmp	r3, #0
 8006226:	d00b      	beq.n	8006240 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800622e:	695b      	ldr	r3, [r3, #20]
 8006230:	687a      	ldr	r2, [r7, #4]
 8006232:	7c12      	ldrb	r2, [r2, #16]
 8006234:	f107 0108 	add.w	r1, r7, #8
 8006238:	4610      	mov	r0, r2
 800623a:	4798      	blx	r3
 800623c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800623e:	e029      	b.n	8006294 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006240:	6839      	ldr	r1, [r7, #0]
 8006242:	6878      	ldr	r0, [r7, #4]
 8006244:	f000 fa63 	bl	800670e <USBD_CtlError>
            err++;
 8006248:	7afb      	ldrb	r3, [r7, #11]
 800624a:	3301      	adds	r3, #1
 800624c:	72fb      	strb	r3, [r7, #11]
          break;
 800624e:	e021      	b.n	8006294 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006256:	699b      	ldr	r3, [r3, #24]
 8006258:	2b00      	cmp	r3, #0
 800625a:	d00b      	beq.n	8006274 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006262:	699b      	ldr	r3, [r3, #24]
 8006264:	687a      	ldr	r2, [r7, #4]
 8006266:	7c12      	ldrb	r2, [r2, #16]
 8006268:	f107 0108 	add.w	r1, r7, #8
 800626c:	4610      	mov	r0, r2
 800626e:	4798      	blx	r3
 8006270:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006272:	e00f      	b.n	8006294 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006274:	6839      	ldr	r1, [r7, #0]
 8006276:	6878      	ldr	r0, [r7, #4]
 8006278:	f000 fa49 	bl	800670e <USBD_CtlError>
            err++;
 800627c:	7afb      	ldrb	r3, [r7, #11]
 800627e:	3301      	adds	r3, #1
 8006280:	72fb      	strb	r3, [r7, #11]
          break;
 8006282:	e007      	b.n	8006294 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8006284:	6839      	ldr	r1, [r7, #0]
 8006286:	6878      	ldr	r0, [r7, #4]
 8006288:	f000 fa41 	bl	800670e <USBD_CtlError>
          err++;
 800628c:	7afb      	ldrb	r3, [r7, #11]
 800628e:	3301      	adds	r3, #1
 8006290:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8006292:	bf00      	nop
      }
      break;
 8006294:	e037      	b.n	8006306 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	7c1b      	ldrb	r3, [r3, #16]
 800629a:	2b00      	cmp	r3, #0
 800629c:	d109      	bne.n	80062b2 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80062a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80062a6:	f107 0208 	add.w	r2, r7, #8
 80062aa:	4610      	mov	r0, r2
 80062ac:	4798      	blx	r3
 80062ae:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80062b0:	e029      	b.n	8006306 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80062b2:	6839      	ldr	r1, [r7, #0]
 80062b4:	6878      	ldr	r0, [r7, #4]
 80062b6:	f000 fa2a 	bl	800670e <USBD_CtlError>
        err++;
 80062ba:	7afb      	ldrb	r3, [r7, #11]
 80062bc:	3301      	adds	r3, #1
 80062be:	72fb      	strb	r3, [r7, #11]
      break;
 80062c0:	e021      	b.n	8006306 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	7c1b      	ldrb	r3, [r3, #16]
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d10d      	bne.n	80062e6 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80062d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80062d2:	f107 0208 	add.w	r2, r7, #8
 80062d6:	4610      	mov	r0, r2
 80062d8:	4798      	blx	r3
 80062da:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	3301      	adds	r3, #1
 80062e0:	2207      	movs	r2, #7
 80062e2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80062e4:	e00f      	b.n	8006306 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80062e6:	6839      	ldr	r1, [r7, #0]
 80062e8:	6878      	ldr	r0, [r7, #4]
 80062ea:	f000 fa10 	bl	800670e <USBD_CtlError>
        err++;
 80062ee:	7afb      	ldrb	r3, [r7, #11]
 80062f0:	3301      	adds	r3, #1
 80062f2:	72fb      	strb	r3, [r7, #11]
      break;
 80062f4:	e007      	b.n	8006306 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80062f6:	6839      	ldr	r1, [r7, #0]
 80062f8:	6878      	ldr	r0, [r7, #4]
 80062fa:	f000 fa08 	bl	800670e <USBD_CtlError>
      err++;
 80062fe:	7afb      	ldrb	r3, [r7, #11]
 8006300:	3301      	adds	r3, #1
 8006302:	72fb      	strb	r3, [r7, #11]
      break;
 8006304:	bf00      	nop
  }

  if (err != 0U)
 8006306:	7afb      	ldrb	r3, [r7, #11]
 8006308:	2b00      	cmp	r3, #0
 800630a:	d11e      	bne.n	800634a <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800630c:	683b      	ldr	r3, [r7, #0]
 800630e:	88db      	ldrh	r3, [r3, #6]
 8006310:	2b00      	cmp	r3, #0
 8006312:	d016      	beq.n	8006342 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8006314:	893b      	ldrh	r3, [r7, #8]
 8006316:	2b00      	cmp	r3, #0
 8006318:	d00e      	beq.n	8006338 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800631a:	683b      	ldr	r3, [r7, #0]
 800631c:	88da      	ldrh	r2, [r3, #6]
 800631e:	893b      	ldrh	r3, [r7, #8]
 8006320:	4293      	cmp	r3, r2
 8006322:	bf28      	it	cs
 8006324:	4613      	movcs	r3, r2
 8006326:	b29b      	uxth	r3, r3
 8006328:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800632a:	893b      	ldrh	r3, [r7, #8]
 800632c:	461a      	mov	r2, r3
 800632e:	68f9      	ldr	r1, [r7, #12]
 8006330:	6878      	ldr	r0, [r7, #4]
 8006332:	f000 fa69 	bl	8006808 <USBD_CtlSendData>
 8006336:	e009      	b.n	800634c <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8006338:	6839      	ldr	r1, [r7, #0]
 800633a:	6878      	ldr	r0, [r7, #4]
 800633c:	f000 f9e7 	bl	800670e <USBD_CtlError>
 8006340:	e004      	b.n	800634c <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8006342:	6878      	ldr	r0, [r7, #4]
 8006344:	f000 faba 	bl	80068bc <USBD_CtlSendStatus>
 8006348:	e000      	b.n	800634c <USBD_GetDescriptor+0x2cc>
    return;
 800634a:	bf00      	nop
  }
}
 800634c:	3710      	adds	r7, #16
 800634e:	46bd      	mov	sp, r7
 8006350:	bd80      	pop	{r7, pc}
 8006352:	bf00      	nop

08006354 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006354:	b580      	push	{r7, lr}
 8006356:	b084      	sub	sp, #16
 8006358:	af00      	add	r7, sp, #0
 800635a:	6078      	str	r0, [r7, #4]
 800635c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800635e:	683b      	ldr	r3, [r7, #0]
 8006360:	889b      	ldrh	r3, [r3, #4]
 8006362:	2b00      	cmp	r3, #0
 8006364:	d131      	bne.n	80063ca <USBD_SetAddress+0x76>
 8006366:	683b      	ldr	r3, [r7, #0]
 8006368:	88db      	ldrh	r3, [r3, #6]
 800636a:	2b00      	cmp	r3, #0
 800636c:	d12d      	bne.n	80063ca <USBD_SetAddress+0x76>
 800636e:	683b      	ldr	r3, [r7, #0]
 8006370:	885b      	ldrh	r3, [r3, #2]
 8006372:	2b7f      	cmp	r3, #127	@ 0x7f
 8006374:	d829      	bhi.n	80063ca <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8006376:	683b      	ldr	r3, [r7, #0]
 8006378:	885b      	ldrh	r3, [r3, #2]
 800637a:	b2db      	uxtb	r3, r3
 800637c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006380:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006388:	b2db      	uxtb	r3, r3
 800638a:	2b03      	cmp	r3, #3
 800638c:	d104      	bne.n	8006398 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800638e:	6839      	ldr	r1, [r7, #0]
 8006390:	6878      	ldr	r0, [r7, #4]
 8006392:	f000 f9bc 	bl	800670e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006396:	e01d      	b.n	80063d4 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	7bfa      	ldrb	r2, [r7, #15]
 800639c:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80063a0:	7bfb      	ldrb	r3, [r7, #15]
 80063a2:	4619      	mov	r1, r3
 80063a4:	6878      	ldr	r0, [r7, #4]
 80063a6:	f000 fe73 	bl	8007090 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80063aa:	6878      	ldr	r0, [r7, #4]
 80063ac:	f000 fa86 	bl	80068bc <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80063b0:	7bfb      	ldrb	r3, [r7, #15]
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d004      	beq.n	80063c0 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	2202      	movs	r2, #2
 80063ba:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80063be:	e009      	b.n	80063d4 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	2201      	movs	r2, #1
 80063c4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80063c8:	e004      	b.n	80063d4 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80063ca:	6839      	ldr	r1, [r7, #0]
 80063cc:	6878      	ldr	r0, [r7, #4]
 80063ce:	f000 f99e 	bl	800670e <USBD_CtlError>
  }
}
 80063d2:	bf00      	nop
 80063d4:	bf00      	nop
 80063d6:	3710      	adds	r7, #16
 80063d8:	46bd      	mov	sp, r7
 80063da:	bd80      	pop	{r7, pc}

080063dc <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80063dc:	b580      	push	{r7, lr}
 80063de:	b084      	sub	sp, #16
 80063e0:	af00      	add	r7, sp, #0
 80063e2:	6078      	str	r0, [r7, #4]
 80063e4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80063e6:	2300      	movs	r3, #0
 80063e8:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80063ea:	683b      	ldr	r3, [r7, #0]
 80063ec:	885b      	ldrh	r3, [r3, #2]
 80063ee:	b2da      	uxtb	r2, r3
 80063f0:	4b4e      	ldr	r3, [pc, #312]	@ (800652c <USBD_SetConfig+0x150>)
 80063f2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80063f4:	4b4d      	ldr	r3, [pc, #308]	@ (800652c <USBD_SetConfig+0x150>)
 80063f6:	781b      	ldrb	r3, [r3, #0]
 80063f8:	2b01      	cmp	r3, #1
 80063fa:	d905      	bls.n	8006408 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80063fc:	6839      	ldr	r1, [r7, #0]
 80063fe:	6878      	ldr	r0, [r7, #4]
 8006400:	f000 f985 	bl	800670e <USBD_CtlError>
    return USBD_FAIL;
 8006404:	2303      	movs	r3, #3
 8006406:	e08c      	b.n	8006522 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800640e:	b2db      	uxtb	r3, r3
 8006410:	2b02      	cmp	r3, #2
 8006412:	d002      	beq.n	800641a <USBD_SetConfig+0x3e>
 8006414:	2b03      	cmp	r3, #3
 8006416:	d029      	beq.n	800646c <USBD_SetConfig+0x90>
 8006418:	e075      	b.n	8006506 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800641a:	4b44      	ldr	r3, [pc, #272]	@ (800652c <USBD_SetConfig+0x150>)
 800641c:	781b      	ldrb	r3, [r3, #0]
 800641e:	2b00      	cmp	r3, #0
 8006420:	d020      	beq.n	8006464 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8006422:	4b42      	ldr	r3, [pc, #264]	@ (800652c <USBD_SetConfig+0x150>)
 8006424:	781b      	ldrb	r3, [r3, #0]
 8006426:	461a      	mov	r2, r3
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800642c:	4b3f      	ldr	r3, [pc, #252]	@ (800652c <USBD_SetConfig+0x150>)
 800642e:	781b      	ldrb	r3, [r3, #0]
 8006430:	4619      	mov	r1, r3
 8006432:	6878      	ldr	r0, [r7, #4]
 8006434:	f7fe ffe3 	bl	80053fe <USBD_SetClassConfig>
 8006438:	4603      	mov	r3, r0
 800643a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800643c:	7bfb      	ldrb	r3, [r7, #15]
 800643e:	2b00      	cmp	r3, #0
 8006440:	d008      	beq.n	8006454 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8006442:	6839      	ldr	r1, [r7, #0]
 8006444:	6878      	ldr	r0, [r7, #4]
 8006446:	f000 f962 	bl	800670e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	2202      	movs	r2, #2
 800644e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006452:	e065      	b.n	8006520 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8006454:	6878      	ldr	r0, [r7, #4]
 8006456:	f000 fa31 	bl	80068bc <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	2203      	movs	r2, #3
 800645e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8006462:	e05d      	b.n	8006520 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8006464:	6878      	ldr	r0, [r7, #4]
 8006466:	f000 fa29 	bl	80068bc <USBD_CtlSendStatus>
      break;
 800646a:	e059      	b.n	8006520 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800646c:	4b2f      	ldr	r3, [pc, #188]	@ (800652c <USBD_SetConfig+0x150>)
 800646e:	781b      	ldrb	r3, [r3, #0]
 8006470:	2b00      	cmp	r3, #0
 8006472:	d112      	bne.n	800649a <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	2202      	movs	r2, #2
 8006478:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800647c:	4b2b      	ldr	r3, [pc, #172]	@ (800652c <USBD_SetConfig+0x150>)
 800647e:	781b      	ldrb	r3, [r3, #0]
 8006480:	461a      	mov	r2, r3
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006486:	4b29      	ldr	r3, [pc, #164]	@ (800652c <USBD_SetConfig+0x150>)
 8006488:	781b      	ldrb	r3, [r3, #0]
 800648a:	4619      	mov	r1, r3
 800648c:	6878      	ldr	r0, [r7, #4]
 800648e:	f7fe ffd2 	bl	8005436 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8006492:	6878      	ldr	r0, [r7, #4]
 8006494:	f000 fa12 	bl	80068bc <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006498:	e042      	b.n	8006520 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800649a:	4b24      	ldr	r3, [pc, #144]	@ (800652c <USBD_SetConfig+0x150>)
 800649c:	781b      	ldrb	r3, [r3, #0]
 800649e:	461a      	mov	r2, r3
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	685b      	ldr	r3, [r3, #4]
 80064a4:	429a      	cmp	r2, r3
 80064a6:	d02a      	beq.n	80064fe <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	685b      	ldr	r3, [r3, #4]
 80064ac:	b2db      	uxtb	r3, r3
 80064ae:	4619      	mov	r1, r3
 80064b0:	6878      	ldr	r0, [r7, #4]
 80064b2:	f7fe ffc0 	bl	8005436 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80064b6:	4b1d      	ldr	r3, [pc, #116]	@ (800652c <USBD_SetConfig+0x150>)
 80064b8:	781b      	ldrb	r3, [r3, #0]
 80064ba:	461a      	mov	r2, r3
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80064c0:	4b1a      	ldr	r3, [pc, #104]	@ (800652c <USBD_SetConfig+0x150>)
 80064c2:	781b      	ldrb	r3, [r3, #0]
 80064c4:	4619      	mov	r1, r3
 80064c6:	6878      	ldr	r0, [r7, #4]
 80064c8:	f7fe ff99 	bl	80053fe <USBD_SetClassConfig>
 80064cc:	4603      	mov	r3, r0
 80064ce:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80064d0:	7bfb      	ldrb	r3, [r7, #15]
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d00f      	beq.n	80064f6 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 80064d6:	6839      	ldr	r1, [r7, #0]
 80064d8:	6878      	ldr	r0, [r7, #4]
 80064da:	f000 f918 	bl	800670e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	685b      	ldr	r3, [r3, #4]
 80064e2:	b2db      	uxtb	r3, r3
 80064e4:	4619      	mov	r1, r3
 80064e6:	6878      	ldr	r0, [r7, #4]
 80064e8:	f7fe ffa5 	bl	8005436 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	2202      	movs	r2, #2
 80064f0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 80064f4:	e014      	b.n	8006520 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80064f6:	6878      	ldr	r0, [r7, #4]
 80064f8:	f000 f9e0 	bl	80068bc <USBD_CtlSendStatus>
      break;
 80064fc:	e010      	b.n	8006520 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80064fe:	6878      	ldr	r0, [r7, #4]
 8006500:	f000 f9dc 	bl	80068bc <USBD_CtlSendStatus>
      break;
 8006504:	e00c      	b.n	8006520 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8006506:	6839      	ldr	r1, [r7, #0]
 8006508:	6878      	ldr	r0, [r7, #4]
 800650a:	f000 f900 	bl	800670e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800650e:	4b07      	ldr	r3, [pc, #28]	@ (800652c <USBD_SetConfig+0x150>)
 8006510:	781b      	ldrb	r3, [r3, #0]
 8006512:	4619      	mov	r1, r3
 8006514:	6878      	ldr	r0, [r7, #4]
 8006516:	f7fe ff8e 	bl	8005436 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800651a:	2303      	movs	r3, #3
 800651c:	73fb      	strb	r3, [r7, #15]
      break;
 800651e:	bf00      	nop
  }

  return ret;
 8006520:	7bfb      	ldrb	r3, [r7, #15]
}
 8006522:	4618      	mov	r0, r3
 8006524:	3710      	adds	r7, #16
 8006526:	46bd      	mov	sp, r7
 8006528:	bd80      	pop	{r7, pc}
 800652a:	bf00      	nop
 800652c:	20000190 	.word	0x20000190

08006530 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006530:	b580      	push	{r7, lr}
 8006532:	b082      	sub	sp, #8
 8006534:	af00      	add	r7, sp, #0
 8006536:	6078      	str	r0, [r7, #4]
 8006538:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800653a:	683b      	ldr	r3, [r7, #0]
 800653c:	88db      	ldrh	r3, [r3, #6]
 800653e:	2b01      	cmp	r3, #1
 8006540:	d004      	beq.n	800654c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8006542:	6839      	ldr	r1, [r7, #0]
 8006544:	6878      	ldr	r0, [r7, #4]
 8006546:	f000 f8e2 	bl	800670e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800654a:	e023      	b.n	8006594 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006552:	b2db      	uxtb	r3, r3
 8006554:	2b02      	cmp	r3, #2
 8006556:	dc02      	bgt.n	800655e <USBD_GetConfig+0x2e>
 8006558:	2b00      	cmp	r3, #0
 800655a:	dc03      	bgt.n	8006564 <USBD_GetConfig+0x34>
 800655c:	e015      	b.n	800658a <USBD_GetConfig+0x5a>
 800655e:	2b03      	cmp	r3, #3
 8006560:	d00b      	beq.n	800657a <USBD_GetConfig+0x4a>
 8006562:	e012      	b.n	800658a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	2200      	movs	r2, #0
 8006568:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	3308      	adds	r3, #8
 800656e:	2201      	movs	r2, #1
 8006570:	4619      	mov	r1, r3
 8006572:	6878      	ldr	r0, [r7, #4]
 8006574:	f000 f948 	bl	8006808 <USBD_CtlSendData>
        break;
 8006578:	e00c      	b.n	8006594 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	3304      	adds	r3, #4
 800657e:	2201      	movs	r2, #1
 8006580:	4619      	mov	r1, r3
 8006582:	6878      	ldr	r0, [r7, #4]
 8006584:	f000 f940 	bl	8006808 <USBD_CtlSendData>
        break;
 8006588:	e004      	b.n	8006594 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800658a:	6839      	ldr	r1, [r7, #0]
 800658c:	6878      	ldr	r0, [r7, #4]
 800658e:	f000 f8be 	bl	800670e <USBD_CtlError>
        break;
 8006592:	bf00      	nop
}
 8006594:	bf00      	nop
 8006596:	3708      	adds	r7, #8
 8006598:	46bd      	mov	sp, r7
 800659a:	bd80      	pop	{r7, pc}

0800659c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800659c:	b580      	push	{r7, lr}
 800659e:	b082      	sub	sp, #8
 80065a0:	af00      	add	r7, sp, #0
 80065a2:	6078      	str	r0, [r7, #4]
 80065a4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80065ac:	b2db      	uxtb	r3, r3
 80065ae:	3b01      	subs	r3, #1
 80065b0:	2b02      	cmp	r3, #2
 80065b2:	d81e      	bhi.n	80065f2 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80065b4:	683b      	ldr	r3, [r7, #0]
 80065b6:	88db      	ldrh	r3, [r3, #6]
 80065b8:	2b02      	cmp	r3, #2
 80065ba:	d004      	beq.n	80065c6 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80065bc:	6839      	ldr	r1, [r7, #0]
 80065be:	6878      	ldr	r0, [r7, #4]
 80065c0:	f000 f8a5 	bl	800670e <USBD_CtlError>
        break;
 80065c4:	e01a      	b.n	80065fc <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
#else
      pdev->dev_config_status = 0U;
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	2200      	movs	r2, #0
 80065ca:	60da      	str	r2, [r3, #12]
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d005      	beq.n	80065e2 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	68db      	ldr	r3, [r3, #12]
 80065da:	f043 0202 	orr.w	r2, r3, #2
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	330c      	adds	r3, #12
 80065e6:	2202      	movs	r2, #2
 80065e8:	4619      	mov	r1, r3
 80065ea:	6878      	ldr	r0, [r7, #4]
 80065ec:	f000 f90c 	bl	8006808 <USBD_CtlSendData>
      break;
 80065f0:	e004      	b.n	80065fc <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80065f2:	6839      	ldr	r1, [r7, #0]
 80065f4:	6878      	ldr	r0, [r7, #4]
 80065f6:	f000 f88a 	bl	800670e <USBD_CtlError>
      break;
 80065fa:	bf00      	nop
  }
}
 80065fc:	bf00      	nop
 80065fe:	3708      	adds	r7, #8
 8006600:	46bd      	mov	sp, r7
 8006602:	bd80      	pop	{r7, pc}

08006604 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006604:	b580      	push	{r7, lr}
 8006606:	b082      	sub	sp, #8
 8006608:	af00      	add	r7, sp, #0
 800660a:	6078      	str	r0, [r7, #4]
 800660c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800660e:	683b      	ldr	r3, [r7, #0]
 8006610:	885b      	ldrh	r3, [r3, #2]
 8006612:	2b01      	cmp	r3, #1
 8006614:	d107      	bne.n	8006626 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	2201      	movs	r2, #1
 800661a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800661e:	6878      	ldr	r0, [r7, #4]
 8006620:	f000 f94c 	bl	80068bc <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8006624:	e013      	b.n	800664e <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8006626:	683b      	ldr	r3, [r7, #0]
 8006628:	885b      	ldrh	r3, [r3, #2]
 800662a:	2b02      	cmp	r3, #2
 800662c:	d10b      	bne.n	8006646 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800662e:	683b      	ldr	r3, [r7, #0]
 8006630:	889b      	ldrh	r3, [r3, #4]
 8006632:	0a1b      	lsrs	r3, r3, #8
 8006634:	b29b      	uxth	r3, r3
 8006636:	b2da      	uxtb	r2, r3
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800663e:	6878      	ldr	r0, [r7, #4]
 8006640:	f000 f93c 	bl	80068bc <USBD_CtlSendStatus>
}
 8006644:	e003      	b.n	800664e <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8006646:	6839      	ldr	r1, [r7, #0]
 8006648:	6878      	ldr	r0, [r7, #4]
 800664a:	f000 f860 	bl	800670e <USBD_CtlError>
}
 800664e:	bf00      	nop
 8006650:	3708      	adds	r7, #8
 8006652:	46bd      	mov	sp, r7
 8006654:	bd80      	pop	{r7, pc}

08006656 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006656:	b580      	push	{r7, lr}
 8006658:	b082      	sub	sp, #8
 800665a:	af00      	add	r7, sp, #0
 800665c:	6078      	str	r0, [r7, #4]
 800665e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006666:	b2db      	uxtb	r3, r3
 8006668:	3b01      	subs	r3, #1
 800666a:	2b02      	cmp	r3, #2
 800666c:	d80b      	bhi.n	8006686 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800666e:	683b      	ldr	r3, [r7, #0]
 8006670:	885b      	ldrh	r3, [r3, #2]
 8006672:	2b01      	cmp	r3, #1
 8006674:	d10c      	bne.n	8006690 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	2200      	movs	r2, #0
 800667a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800667e:	6878      	ldr	r0, [r7, #4]
 8006680:	f000 f91c 	bl	80068bc <USBD_CtlSendStatus>
      }
      break;
 8006684:	e004      	b.n	8006690 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8006686:	6839      	ldr	r1, [r7, #0]
 8006688:	6878      	ldr	r0, [r7, #4]
 800668a:	f000 f840 	bl	800670e <USBD_CtlError>
      break;
 800668e:	e000      	b.n	8006692 <USBD_ClrFeature+0x3c>
      break;
 8006690:	bf00      	nop
  }
}
 8006692:	bf00      	nop
 8006694:	3708      	adds	r7, #8
 8006696:	46bd      	mov	sp, r7
 8006698:	bd80      	pop	{r7, pc}

0800669a <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800669a:	b580      	push	{r7, lr}
 800669c:	b084      	sub	sp, #16
 800669e:	af00      	add	r7, sp, #0
 80066a0:	6078      	str	r0, [r7, #4]
 80066a2:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80066a4:	683b      	ldr	r3, [r7, #0]
 80066a6:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	781a      	ldrb	r2, [r3, #0]
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	3301      	adds	r3, #1
 80066b4:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	781a      	ldrb	r2, [r3, #0]
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	3301      	adds	r3, #1
 80066c2:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80066c4:	68f8      	ldr	r0, [r7, #12]
 80066c6:	f7ff fa40 	bl	8005b4a <SWAPBYTE>
 80066ca:	4603      	mov	r3, r0
 80066cc:	461a      	mov	r2, r3
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	3301      	adds	r3, #1
 80066d6:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	3301      	adds	r3, #1
 80066dc:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80066de:	68f8      	ldr	r0, [r7, #12]
 80066e0:	f7ff fa33 	bl	8005b4a <SWAPBYTE>
 80066e4:	4603      	mov	r3, r0
 80066e6:	461a      	mov	r2, r3
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	3301      	adds	r3, #1
 80066f0:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	3301      	adds	r3, #1
 80066f6:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80066f8:	68f8      	ldr	r0, [r7, #12]
 80066fa:	f7ff fa26 	bl	8005b4a <SWAPBYTE>
 80066fe:	4603      	mov	r3, r0
 8006700:	461a      	mov	r2, r3
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	80da      	strh	r2, [r3, #6]
}
 8006706:	bf00      	nop
 8006708:	3710      	adds	r7, #16
 800670a:	46bd      	mov	sp, r7
 800670c:	bd80      	pop	{r7, pc}

0800670e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800670e:	b580      	push	{r7, lr}
 8006710:	b082      	sub	sp, #8
 8006712:	af00      	add	r7, sp, #0
 8006714:	6078      	str	r0, [r7, #4]
 8006716:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8006718:	2180      	movs	r1, #128	@ 0x80
 800671a:	6878      	ldr	r0, [r7, #4]
 800671c:	f000 fc4e 	bl	8006fbc <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8006720:	2100      	movs	r1, #0
 8006722:	6878      	ldr	r0, [r7, #4]
 8006724:	f000 fc4a 	bl	8006fbc <USBD_LL_StallEP>
}
 8006728:	bf00      	nop
 800672a:	3708      	adds	r7, #8
 800672c:	46bd      	mov	sp, r7
 800672e:	bd80      	pop	{r7, pc}

08006730 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8006730:	b580      	push	{r7, lr}
 8006732:	b086      	sub	sp, #24
 8006734:	af00      	add	r7, sp, #0
 8006736:	60f8      	str	r0, [r7, #12]
 8006738:	60b9      	str	r1, [r7, #8]
 800673a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800673c:	2300      	movs	r3, #0
 800673e:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	2b00      	cmp	r3, #0
 8006744:	d042      	beq.n	80067cc <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800674a:	6938      	ldr	r0, [r7, #16]
 800674c:	f000 f842 	bl	80067d4 <USBD_GetLen>
 8006750:	4603      	mov	r3, r0
 8006752:	3301      	adds	r3, #1
 8006754:	005b      	lsls	r3, r3, #1
 8006756:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800675a:	d808      	bhi.n	800676e <USBD_GetString+0x3e>
 800675c:	6938      	ldr	r0, [r7, #16]
 800675e:	f000 f839 	bl	80067d4 <USBD_GetLen>
 8006762:	4603      	mov	r3, r0
 8006764:	3301      	adds	r3, #1
 8006766:	b29b      	uxth	r3, r3
 8006768:	005b      	lsls	r3, r3, #1
 800676a:	b29a      	uxth	r2, r3
 800676c:	e001      	b.n	8006772 <USBD_GetString+0x42>
 800676e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8006776:	7dfb      	ldrb	r3, [r7, #23]
 8006778:	68ba      	ldr	r2, [r7, #8]
 800677a:	4413      	add	r3, r2
 800677c:	687a      	ldr	r2, [r7, #4]
 800677e:	7812      	ldrb	r2, [r2, #0]
 8006780:	701a      	strb	r2, [r3, #0]
  idx++;
 8006782:	7dfb      	ldrb	r3, [r7, #23]
 8006784:	3301      	adds	r3, #1
 8006786:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8006788:	7dfb      	ldrb	r3, [r7, #23]
 800678a:	68ba      	ldr	r2, [r7, #8]
 800678c:	4413      	add	r3, r2
 800678e:	2203      	movs	r2, #3
 8006790:	701a      	strb	r2, [r3, #0]
  idx++;
 8006792:	7dfb      	ldrb	r3, [r7, #23]
 8006794:	3301      	adds	r3, #1
 8006796:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8006798:	e013      	b.n	80067c2 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 800679a:	7dfb      	ldrb	r3, [r7, #23]
 800679c:	68ba      	ldr	r2, [r7, #8]
 800679e:	4413      	add	r3, r2
 80067a0:	693a      	ldr	r2, [r7, #16]
 80067a2:	7812      	ldrb	r2, [r2, #0]
 80067a4:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80067a6:	693b      	ldr	r3, [r7, #16]
 80067a8:	3301      	adds	r3, #1
 80067aa:	613b      	str	r3, [r7, #16]
    idx++;
 80067ac:	7dfb      	ldrb	r3, [r7, #23]
 80067ae:	3301      	adds	r3, #1
 80067b0:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80067b2:	7dfb      	ldrb	r3, [r7, #23]
 80067b4:	68ba      	ldr	r2, [r7, #8]
 80067b6:	4413      	add	r3, r2
 80067b8:	2200      	movs	r2, #0
 80067ba:	701a      	strb	r2, [r3, #0]
    idx++;
 80067bc:	7dfb      	ldrb	r3, [r7, #23]
 80067be:	3301      	adds	r3, #1
 80067c0:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80067c2:	693b      	ldr	r3, [r7, #16]
 80067c4:	781b      	ldrb	r3, [r3, #0]
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d1e7      	bne.n	800679a <USBD_GetString+0x6a>
 80067ca:	e000      	b.n	80067ce <USBD_GetString+0x9e>
    return;
 80067cc:	bf00      	nop
  }
}
 80067ce:	3718      	adds	r7, #24
 80067d0:	46bd      	mov	sp, r7
 80067d2:	bd80      	pop	{r7, pc}

080067d4 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80067d4:	b480      	push	{r7}
 80067d6:	b085      	sub	sp, #20
 80067d8:	af00      	add	r7, sp, #0
 80067da:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80067dc:	2300      	movs	r3, #0
 80067de:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80067e4:	e005      	b.n	80067f2 <USBD_GetLen+0x1e>
  {
    len++;
 80067e6:	7bfb      	ldrb	r3, [r7, #15]
 80067e8:	3301      	adds	r3, #1
 80067ea:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80067ec:	68bb      	ldr	r3, [r7, #8]
 80067ee:	3301      	adds	r3, #1
 80067f0:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80067f2:	68bb      	ldr	r3, [r7, #8]
 80067f4:	781b      	ldrb	r3, [r3, #0]
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d1f5      	bne.n	80067e6 <USBD_GetLen+0x12>
  }

  return len;
 80067fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80067fc:	4618      	mov	r0, r3
 80067fe:	3714      	adds	r7, #20
 8006800:	46bd      	mov	sp, r7
 8006802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006806:	4770      	bx	lr

08006808 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8006808:	b580      	push	{r7, lr}
 800680a:	b084      	sub	sp, #16
 800680c:	af00      	add	r7, sp, #0
 800680e:	60f8      	str	r0, [r7, #12]
 8006810:	60b9      	str	r1, [r7, #8]
 8006812:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	2202      	movs	r2, #2
 8006818:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	687a      	ldr	r2, [r7, #4]
 8006820:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	687a      	ldr	r2, [r7, #4]
 8006826:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	68ba      	ldr	r2, [r7, #8]
 800682c:	2100      	movs	r1, #0
 800682e:	68f8      	ldr	r0, [r7, #12]
 8006830:	f000 fc4d 	bl	80070ce <USBD_LL_Transmit>

  return USBD_OK;
 8006834:	2300      	movs	r3, #0
}
 8006836:	4618      	mov	r0, r3
 8006838:	3710      	adds	r7, #16
 800683a:	46bd      	mov	sp, r7
 800683c:	bd80      	pop	{r7, pc}

0800683e <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800683e:	b580      	push	{r7, lr}
 8006840:	b084      	sub	sp, #16
 8006842:	af00      	add	r7, sp, #0
 8006844:	60f8      	str	r0, [r7, #12]
 8006846:	60b9      	str	r1, [r7, #8]
 8006848:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	68ba      	ldr	r2, [r7, #8]
 800684e:	2100      	movs	r1, #0
 8006850:	68f8      	ldr	r0, [r7, #12]
 8006852:	f000 fc3c 	bl	80070ce <USBD_LL_Transmit>

  return USBD_OK;
 8006856:	2300      	movs	r3, #0
}
 8006858:	4618      	mov	r0, r3
 800685a:	3710      	adds	r7, #16
 800685c:	46bd      	mov	sp, r7
 800685e:	bd80      	pop	{r7, pc}

08006860 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8006860:	b580      	push	{r7, lr}
 8006862:	b084      	sub	sp, #16
 8006864:	af00      	add	r7, sp, #0
 8006866:	60f8      	str	r0, [r7, #12]
 8006868:	60b9      	str	r1, [r7, #8]
 800686a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	2203      	movs	r2, #3
 8006870:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	687a      	ldr	r2, [r7, #4]
 8006878:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	687a      	ldr	r2, [r7, #4]
 8006880:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	68ba      	ldr	r2, [r7, #8]
 8006888:	2100      	movs	r1, #0
 800688a:	68f8      	ldr	r0, [r7, #12]
 800688c:	f000 fc40 	bl	8007110 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006890:	2300      	movs	r3, #0
}
 8006892:	4618      	mov	r0, r3
 8006894:	3710      	adds	r7, #16
 8006896:	46bd      	mov	sp, r7
 8006898:	bd80      	pop	{r7, pc}

0800689a <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800689a:	b580      	push	{r7, lr}
 800689c:	b084      	sub	sp, #16
 800689e:	af00      	add	r7, sp, #0
 80068a0:	60f8      	str	r0, [r7, #12]
 80068a2:	60b9      	str	r1, [r7, #8]
 80068a4:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	68ba      	ldr	r2, [r7, #8]
 80068aa:	2100      	movs	r1, #0
 80068ac:	68f8      	ldr	r0, [r7, #12]
 80068ae:	f000 fc2f 	bl	8007110 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80068b2:	2300      	movs	r3, #0
}
 80068b4:	4618      	mov	r0, r3
 80068b6:	3710      	adds	r7, #16
 80068b8:	46bd      	mov	sp, r7
 80068ba:	bd80      	pop	{r7, pc}

080068bc <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80068bc:	b580      	push	{r7, lr}
 80068be:	b082      	sub	sp, #8
 80068c0:	af00      	add	r7, sp, #0
 80068c2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	2204      	movs	r2, #4
 80068c8:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80068cc:	2300      	movs	r3, #0
 80068ce:	2200      	movs	r2, #0
 80068d0:	2100      	movs	r1, #0
 80068d2:	6878      	ldr	r0, [r7, #4]
 80068d4:	f000 fbfb 	bl	80070ce <USBD_LL_Transmit>

  return USBD_OK;
 80068d8:	2300      	movs	r3, #0
}
 80068da:	4618      	mov	r0, r3
 80068dc:	3708      	adds	r7, #8
 80068de:	46bd      	mov	sp, r7
 80068e0:	bd80      	pop	{r7, pc}

080068e2 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80068e2:	b580      	push	{r7, lr}
 80068e4:	b082      	sub	sp, #8
 80068e6:	af00      	add	r7, sp, #0
 80068e8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	2205      	movs	r2, #5
 80068ee:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80068f2:	2300      	movs	r3, #0
 80068f4:	2200      	movs	r2, #0
 80068f6:	2100      	movs	r1, #0
 80068f8:	6878      	ldr	r0, [r7, #4]
 80068fa:	f000 fc09 	bl	8007110 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80068fe:	2300      	movs	r3, #0
}
 8006900:	4618      	mov	r0, r3
 8006902:	3708      	adds	r7, #8
 8006904:	46bd      	mov	sp, r7
 8006906:	bd80      	pop	{r7, pc}

08006908 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8006908:	b580      	push	{r7, lr}
 800690a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800690c:	2200      	movs	r2, #0
 800690e:	4912      	ldr	r1, [pc, #72]	@ (8006958 <MX_USB_DEVICE_Init+0x50>)
 8006910:	4812      	ldr	r0, [pc, #72]	@ (800695c <MX_USB_DEVICE_Init+0x54>)
 8006912:	f7fe fcf7 	bl	8005304 <USBD_Init>
 8006916:	4603      	mov	r3, r0
 8006918:	2b00      	cmp	r3, #0
 800691a:	d001      	beq.n	8006920 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800691c:	f7f9 ff20 	bl	8000760 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CUSTOM_HID) != USBD_OK)
 8006920:	490f      	ldr	r1, [pc, #60]	@ (8006960 <MX_USB_DEVICE_Init+0x58>)
 8006922:	480e      	ldr	r0, [pc, #56]	@ (800695c <MX_USB_DEVICE_Init+0x54>)
 8006924:	f7fe fd1e 	bl	8005364 <USBD_RegisterClass>
 8006928:	4603      	mov	r3, r0
 800692a:	2b00      	cmp	r3, #0
 800692c:	d001      	beq.n	8006932 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800692e:	f7f9 ff17 	bl	8000760 <Error_Handler>
  }
  if (USBD_CUSTOM_HID_RegisterInterface(&hUsbDeviceFS, &USBD_CustomHID_fops_FS) != USBD_OK)
 8006932:	490c      	ldr	r1, [pc, #48]	@ (8006964 <MX_USB_DEVICE_Init+0x5c>)
 8006934:	4809      	ldr	r0, [pc, #36]	@ (800695c <MX_USB_DEVICE_Init+0x54>)
 8006936:	f7fe fccb 	bl	80052d0 <USBD_CUSTOM_HID_RegisterInterface>
 800693a:	4603      	mov	r3, r0
 800693c:	2b00      	cmp	r3, #0
 800693e:	d001      	beq.n	8006944 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8006940:	f7f9 ff0e 	bl	8000760 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8006944:	4805      	ldr	r0, [pc, #20]	@ (800695c <MX_USB_DEVICE_Init+0x54>)
 8006946:	f7fe fd43 	bl	80053d0 <USBD_Start>
 800694a:	4603      	mov	r3, r0
 800694c:	2b00      	cmp	r3, #0
 800694e:	d001      	beq.n	8006954 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8006950:	f7f9 ff06 	bl	8000760 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8006954:	bf00      	nop
 8006956:	bd80      	pop	{r7, pc}
 8006958:	200000d0 	.word	0x200000d0
 800695c:	20000194 	.word	0x20000194
 8006960:	2000000c 	.word	0x2000000c
 8006964:	200000c0 	.word	0x200000c0

08006968 <CUSTOM_HID_Init_FS>:
/**
  * @brief  Initializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_Init_FS(void)
{
 8006968:	b480      	push	{r7}
 800696a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800696c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800696e:	4618      	mov	r0, r3
 8006970:	46bd      	mov	sp, r7
 8006972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006976:	4770      	bx	lr

08006978 <CUSTOM_HID_DeInit_FS>:
/**
  * @brief  DeInitializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_DeInit_FS(void)
{
 8006978:	b480      	push	{r7}
 800697a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 800697c:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800697e:	4618      	mov	r0, r3
 8006980:	46bd      	mov	sp, r7
 8006982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006986:	4770      	bx	lr

08006988 <CUSTOM_HID_OutEvent_FS>:
  * @param  event_idx: Event index
  * @param  state: Event state
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_OutEvent_FS(uint8_t event_idx, uint8_t state)
{
 8006988:	b580      	push	{r7, lr}
 800698a:	b082      	sub	sp, #8
 800698c:	af00      	add	r7, sp, #0
 800698e:	4603      	mov	r3, r0
 8006990:	460a      	mov	r2, r1
 8006992:	71fb      	strb	r3, [r7, #7]
 8006994:	4613      	mov	r3, r2
 8006996:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN 6 */
  UNUSED(event_idx);
  UNUSED(state);

  /* Start next USB packet transfer once data processing is completed */
  if (USBD_CUSTOM_HID_ReceivePacket(&hUsbDeviceFS) != (uint8_t)USBD_OK)
 8006998:	4806      	ldr	r0, [pc, #24]	@ (80069b4 <CUSTOM_HID_OutEvent_FS+0x2c>)
 800699a:	f7fe fc37 	bl	800520c <USBD_CUSTOM_HID_ReceivePacket>
 800699e:	4603      	mov	r3, r0
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d002      	beq.n	80069aa <CUSTOM_HID_OutEvent_FS+0x22>
  {
    return -1;
 80069a4:	f04f 33ff 	mov.w	r3, #4294967295
 80069a8:	e000      	b.n	80069ac <CUSTOM_HID_OutEvent_FS+0x24>
  }

  return (USBD_OK);
 80069aa:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80069ac:	4618      	mov	r0, r3
 80069ae:	3708      	adds	r7, #8
 80069b0:	46bd      	mov	sp, r7
 80069b2:	bd80      	pop	{r7, pc}
 80069b4:	20000194 	.word	0x20000194

080069b8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80069b8:	b480      	push	{r7}
 80069ba:	b083      	sub	sp, #12
 80069bc:	af00      	add	r7, sp, #0
 80069be:	4603      	mov	r3, r0
 80069c0:	6039      	str	r1, [r7, #0]
 80069c2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80069c4:	683b      	ldr	r3, [r7, #0]
 80069c6:	2212      	movs	r2, #18
 80069c8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80069ca:	4b03      	ldr	r3, [pc, #12]	@ (80069d8 <USBD_FS_DeviceDescriptor+0x20>)
}
 80069cc:	4618      	mov	r0, r3
 80069ce:	370c      	adds	r7, #12
 80069d0:	46bd      	mov	sp, r7
 80069d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d6:	4770      	bx	lr
 80069d8:	200000ec 	.word	0x200000ec

080069dc <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80069dc:	b480      	push	{r7}
 80069de:	b083      	sub	sp, #12
 80069e0:	af00      	add	r7, sp, #0
 80069e2:	4603      	mov	r3, r0
 80069e4:	6039      	str	r1, [r7, #0]
 80069e6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80069e8:	683b      	ldr	r3, [r7, #0]
 80069ea:	2204      	movs	r2, #4
 80069ec:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80069ee:	4b03      	ldr	r3, [pc, #12]	@ (80069fc <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80069f0:	4618      	mov	r0, r3
 80069f2:	370c      	adds	r7, #12
 80069f4:	46bd      	mov	sp, r7
 80069f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069fa:	4770      	bx	lr
 80069fc:	20000100 	.word	0x20000100

08006a00 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006a00:	b580      	push	{r7, lr}
 8006a02:	b082      	sub	sp, #8
 8006a04:	af00      	add	r7, sp, #0
 8006a06:	4603      	mov	r3, r0
 8006a08:	6039      	str	r1, [r7, #0]
 8006a0a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006a0c:	79fb      	ldrb	r3, [r7, #7]
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d105      	bne.n	8006a1e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006a12:	683a      	ldr	r2, [r7, #0]
 8006a14:	4907      	ldr	r1, [pc, #28]	@ (8006a34 <USBD_FS_ProductStrDescriptor+0x34>)
 8006a16:	4808      	ldr	r0, [pc, #32]	@ (8006a38 <USBD_FS_ProductStrDescriptor+0x38>)
 8006a18:	f7ff fe8a 	bl	8006730 <USBD_GetString>
 8006a1c:	e004      	b.n	8006a28 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006a1e:	683a      	ldr	r2, [r7, #0]
 8006a20:	4904      	ldr	r1, [pc, #16]	@ (8006a34 <USBD_FS_ProductStrDescriptor+0x34>)
 8006a22:	4805      	ldr	r0, [pc, #20]	@ (8006a38 <USBD_FS_ProductStrDescriptor+0x38>)
 8006a24:	f7ff fe84 	bl	8006730 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006a28:	4b02      	ldr	r3, [pc, #8]	@ (8006a34 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8006a2a:	4618      	mov	r0, r3
 8006a2c:	3708      	adds	r7, #8
 8006a2e:	46bd      	mov	sp, r7
 8006a30:	bd80      	pop	{r7, pc}
 8006a32:	bf00      	nop
 8006a34:	20000470 	.word	0x20000470
 8006a38:	0800724c 	.word	0x0800724c

08006a3c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006a3c:	b580      	push	{r7, lr}
 8006a3e:	b082      	sub	sp, #8
 8006a40:	af00      	add	r7, sp, #0
 8006a42:	4603      	mov	r3, r0
 8006a44:	6039      	str	r1, [r7, #0]
 8006a46:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8006a48:	683a      	ldr	r2, [r7, #0]
 8006a4a:	4904      	ldr	r1, [pc, #16]	@ (8006a5c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8006a4c:	4804      	ldr	r0, [pc, #16]	@ (8006a60 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8006a4e:	f7ff fe6f 	bl	8006730 <USBD_GetString>
  return USBD_StrDesc;
 8006a52:	4b02      	ldr	r3, [pc, #8]	@ (8006a5c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8006a54:	4618      	mov	r0, r3
 8006a56:	3708      	adds	r7, #8
 8006a58:	46bd      	mov	sp, r7
 8006a5a:	bd80      	pop	{r7, pc}
 8006a5c:	20000470 	.word	0x20000470
 8006a60:	0800726c 	.word	0x0800726c

08006a64 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006a64:	b580      	push	{r7, lr}
 8006a66:	b082      	sub	sp, #8
 8006a68:	af00      	add	r7, sp, #0
 8006a6a:	4603      	mov	r3, r0
 8006a6c:	6039      	str	r1, [r7, #0]
 8006a6e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8006a70:	683b      	ldr	r3, [r7, #0]
 8006a72:	221a      	movs	r2, #26
 8006a74:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8006a76:	f000 f843 	bl	8006b00 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8006a7a:	4b02      	ldr	r3, [pc, #8]	@ (8006a84 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8006a7c:	4618      	mov	r0, r3
 8006a7e:	3708      	adds	r7, #8
 8006a80:	46bd      	mov	sp, r7
 8006a82:	bd80      	pop	{r7, pc}
 8006a84:	20000104 	.word	0x20000104

08006a88 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006a88:	b580      	push	{r7, lr}
 8006a8a:	b082      	sub	sp, #8
 8006a8c:	af00      	add	r7, sp, #0
 8006a8e:	4603      	mov	r3, r0
 8006a90:	6039      	str	r1, [r7, #0]
 8006a92:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8006a94:	79fb      	ldrb	r3, [r7, #7]
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d105      	bne.n	8006aa6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006a9a:	683a      	ldr	r2, [r7, #0]
 8006a9c:	4907      	ldr	r1, [pc, #28]	@ (8006abc <USBD_FS_ConfigStrDescriptor+0x34>)
 8006a9e:	4808      	ldr	r0, [pc, #32]	@ (8006ac0 <USBD_FS_ConfigStrDescriptor+0x38>)
 8006aa0:	f7ff fe46 	bl	8006730 <USBD_GetString>
 8006aa4:	e004      	b.n	8006ab0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006aa6:	683a      	ldr	r2, [r7, #0]
 8006aa8:	4904      	ldr	r1, [pc, #16]	@ (8006abc <USBD_FS_ConfigStrDescriptor+0x34>)
 8006aaa:	4805      	ldr	r0, [pc, #20]	@ (8006ac0 <USBD_FS_ConfigStrDescriptor+0x38>)
 8006aac:	f7ff fe40 	bl	8006730 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006ab0:	4b02      	ldr	r3, [pc, #8]	@ (8006abc <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8006ab2:	4618      	mov	r0, r3
 8006ab4:	3708      	adds	r7, #8
 8006ab6:	46bd      	mov	sp, r7
 8006ab8:	bd80      	pop	{r7, pc}
 8006aba:	bf00      	nop
 8006abc:	20000470 	.word	0x20000470
 8006ac0:	08007280 	.word	0x08007280

08006ac4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006ac4:	b580      	push	{r7, lr}
 8006ac6:	b082      	sub	sp, #8
 8006ac8:	af00      	add	r7, sp, #0
 8006aca:	4603      	mov	r3, r0
 8006acc:	6039      	str	r1, [r7, #0]
 8006ace:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006ad0:	79fb      	ldrb	r3, [r7, #7]
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d105      	bne.n	8006ae2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006ad6:	683a      	ldr	r2, [r7, #0]
 8006ad8:	4907      	ldr	r1, [pc, #28]	@ (8006af8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8006ada:	4808      	ldr	r0, [pc, #32]	@ (8006afc <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006adc:	f7ff fe28 	bl	8006730 <USBD_GetString>
 8006ae0:	e004      	b.n	8006aec <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006ae2:	683a      	ldr	r2, [r7, #0]
 8006ae4:	4904      	ldr	r1, [pc, #16]	@ (8006af8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8006ae6:	4805      	ldr	r0, [pc, #20]	@ (8006afc <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006ae8:	f7ff fe22 	bl	8006730 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006aec:	4b02      	ldr	r3, [pc, #8]	@ (8006af8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8006aee:	4618      	mov	r0, r3
 8006af0:	3708      	adds	r7, #8
 8006af2:	46bd      	mov	sp, r7
 8006af4:	bd80      	pop	{r7, pc}
 8006af6:	bf00      	nop
 8006af8:	20000470 	.word	0x20000470
 8006afc:	08007294 	.word	0x08007294

08006b00 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8006b00:	b580      	push	{r7, lr}
 8006b02:	b084      	sub	sp, #16
 8006b04:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8006b06:	4b0f      	ldr	r3, [pc, #60]	@ (8006b44 <Get_SerialNum+0x44>)
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8006b0c:	4b0e      	ldr	r3, [pc, #56]	@ (8006b48 <Get_SerialNum+0x48>)
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8006b12:	4b0e      	ldr	r3, [pc, #56]	@ (8006b4c <Get_SerialNum+0x4c>)
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8006b18:	68fa      	ldr	r2, [r7, #12]
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	4413      	add	r3, r2
 8006b1e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d009      	beq.n	8006b3a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8006b26:	2208      	movs	r2, #8
 8006b28:	4909      	ldr	r1, [pc, #36]	@ (8006b50 <Get_SerialNum+0x50>)
 8006b2a:	68f8      	ldr	r0, [r7, #12]
 8006b2c:	f000 f814 	bl	8006b58 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8006b30:	2204      	movs	r2, #4
 8006b32:	4908      	ldr	r1, [pc, #32]	@ (8006b54 <Get_SerialNum+0x54>)
 8006b34:	68b8      	ldr	r0, [r7, #8]
 8006b36:	f000 f80f 	bl	8006b58 <IntToUnicode>
  }
}
 8006b3a:	bf00      	nop
 8006b3c:	3710      	adds	r7, #16
 8006b3e:	46bd      	mov	sp, r7
 8006b40:	bd80      	pop	{r7, pc}
 8006b42:	bf00      	nop
 8006b44:	1fff7a10 	.word	0x1fff7a10
 8006b48:	1fff7a14 	.word	0x1fff7a14
 8006b4c:	1fff7a18 	.word	0x1fff7a18
 8006b50:	20000106 	.word	0x20000106
 8006b54:	20000116 	.word	0x20000116

08006b58 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8006b58:	b480      	push	{r7}
 8006b5a:	b087      	sub	sp, #28
 8006b5c:	af00      	add	r7, sp, #0
 8006b5e:	60f8      	str	r0, [r7, #12]
 8006b60:	60b9      	str	r1, [r7, #8]
 8006b62:	4613      	mov	r3, r2
 8006b64:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8006b66:	2300      	movs	r3, #0
 8006b68:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8006b6a:	2300      	movs	r3, #0
 8006b6c:	75fb      	strb	r3, [r7, #23]
 8006b6e:	e027      	b.n	8006bc0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	0f1b      	lsrs	r3, r3, #28
 8006b74:	2b09      	cmp	r3, #9
 8006b76:	d80b      	bhi.n	8006b90 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	0f1b      	lsrs	r3, r3, #28
 8006b7c:	b2da      	uxtb	r2, r3
 8006b7e:	7dfb      	ldrb	r3, [r7, #23]
 8006b80:	005b      	lsls	r3, r3, #1
 8006b82:	4619      	mov	r1, r3
 8006b84:	68bb      	ldr	r3, [r7, #8]
 8006b86:	440b      	add	r3, r1
 8006b88:	3230      	adds	r2, #48	@ 0x30
 8006b8a:	b2d2      	uxtb	r2, r2
 8006b8c:	701a      	strb	r2, [r3, #0]
 8006b8e:	e00a      	b.n	8006ba6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	0f1b      	lsrs	r3, r3, #28
 8006b94:	b2da      	uxtb	r2, r3
 8006b96:	7dfb      	ldrb	r3, [r7, #23]
 8006b98:	005b      	lsls	r3, r3, #1
 8006b9a:	4619      	mov	r1, r3
 8006b9c:	68bb      	ldr	r3, [r7, #8]
 8006b9e:	440b      	add	r3, r1
 8006ba0:	3237      	adds	r2, #55	@ 0x37
 8006ba2:	b2d2      	uxtb	r2, r2
 8006ba4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	011b      	lsls	r3, r3, #4
 8006baa:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8006bac:	7dfb      	ldrb	r3, [r7, #23]
 8006bae:	005b      	lsls	r3, r3, #1
 8006bb0:	3301      	adds	r3, #1
 8006bb2:	68ba      	ldr	r2, [r7, #8]
 8006bb4:	4413      	add	r3, r2
 8006bb6:	2200      	movs	r2, #0
 8006bb8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8006bba:	7dfb      	ldrb	r3, [r7, #23]
 8006bbc:	3301      	adds	r3, #1
 8006bbe:	75fb      	strb	r3, [r7, #23]
 8006bc0:	7dfa      	ldrb	r2, [r7, #23]
 8006bc2:	79fb      	ldrb	r3, [r7, #7]
 8006bc4:	429a      	cmp	r2, r3
 8006bc6:	d3d3      	bcc.n	8006b70 <IntToUnicode+0x18>
  }
}
 8006bc8:	bf00      	nop
 8006bca:	bf00      	nop
 8006bcc:	371c      	adds	r7, #28
 8006bce:	46bd      	mov	sp, r7
 8006bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd4:	4770      	bx	lr
	...

08006bd8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8006bd8:	b580      	push	{r7, lr}
 8006bda:	b08a      	sub	sp, #40	@ 0x28
 8006bdc:	af00      	add	r7, sp, #0
 8006bde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006be0:	f107 0314 	add.w	r3, r7, #20
 8006be4:	2200      	movs	r2, #0
 8006be6:	601a      	str	r2, [r3, #0]
 8006be8:	605a      	str	r2, [r3, #4]
 8006bea:	609a      	str	r2, [r3, #8]
 8006bec:	60da      	str	r2, [r3, #12]
 8006bee:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006bf8:	d13a      	bne.n	8006c70 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006bfa:	2300      	movs	r3, #0
 8006bfc:	613b      	str	r3, [r7, #16]
 8006bfe:	4b1e      	ldr	r3, [pc, #120]	@ (8006c78 <HAL_PCD_MspInit+0xa0>)
 8006c00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006c02:	4a1d      	ldr	r2, [pc, #116]	@ (8006c78 <HAL_PCD_MspInit+0xa0>)
 8006c04:	f043 0301 	orr.w	r3, r3, #1
 8006c08:	6313      	str	r3, [r2, #48]	@ 0x30
 8006c0a:	4b1b      	ldr	r3, [pc, #108]	@ (8006c78 <HAL_PCD_MspInit+0xa0>)
 8006c0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006c0e:	f003 0301 	and.w	r3, r3, #1
 8006c12:	613b      	str	r3, [r7, #16]
 8006c14:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8006c16:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8006c1a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006c1c:	2302      	movs	r3, #2
 8006c1e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006c20:	2300      	movs	r3, #0
 8006c22:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006c24:	2303      	movs	r3, #3
 8006c26:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8006c28:	230a      	movs	r3, #10
 8006c2a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006c2c:	f107 0314 	add.w	r3, r7, #20
 8006c30:	4619      	mov	r1, r3
 8006c32:	4812      	ldr	r0, [pc, #72]	@ (8006c7c <HAL_PCD_MspInit+0xa4>)
 8006c34:	f7fa f83a 	bl	8000cac <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8006c38:	4b0f      	ldr	r3, [pc, #60]	@ (8006c78 <HAL_PCD_MspInit+0xa0>)
 8006c3a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006c3c:	4a0e      	ldr	r2, [pc, #56]	@ (8006c78 <HAL_PCD_MspInit+0xa0>)
 8006c3e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006c42:	6353      	str	r3, [r2, #52]	@ 0x34
 8006c44:	2300      	movs	r3, #0
 8006c46:	60fb      	str	r3, [r7, #12]
 8006c48:	4b0b      	ldr	r3, [pc, #44]	@ (8006c78 <HAL_PCD_MspInit+0xa0>)
 8006c4a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006c4c:	4a0a      	ldr	r2, [pc, #40]	@ (8006c78 <HAL_PCD_MspInit+0xa0>)
 8006c4e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006c52:	6453      	str	r3, [r2, #68]	@ 0x44
 8006c54:	4b08      	ldr	r3, [pc, #32]	@ (8006c78 <HAL_PCD_MspInit+0xa0>)
 8006c56:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006c58:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006c5c:	60fb      	str	r3, [r7, #12]
 8006c5e:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8006c60:	2200      	movs	r2, #0
 8006c62:	2100      	movs	r1, #0
 8006c64:	2043      	movs	r0, #67	@ 0x43
 8006c66:	f7f9 ffea 	bl	8000c3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8006c6a:	2043      	movs	r0, #67	@ 0x43
 8006c6c:	f7fa f803 	bl	8000c76 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8006c70:	bf00      	nop
 8006c72:	3728      	adds	r7, #40	@ 0x28
 8006c74:	46bd      	mov	sp, r7
 8006c76:	bd80      	pop	{r7, pc}
 8006c78:	40023800 	.word	0x40023800
 8006c7c:	40020000 	.word	0x40020000

08006c80 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006c80:	b580      	push	{r7, lr}
 8006c82:	b082      	sub	sp, #8
 8006c84:	af00      	add	r7, sp, #0
 8006c86:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8006c94:	4619      	mov	r1, r3
 8006c96:	4610      	mov	r0, r2
 8006c98:	f7fe fbe7 	bl	800546a <USBD_LL_SetupStage>
}
 8006c9c:	bf00      	nop
 8006c9e:	3708      	adds	r7, #8
 8006ca0:	46bd      	mov	sp, r7
 8006ca2:	bd80      	pop	{r7, pc}

08006ca4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006ca4:	b580      	push	{r7, lr}
 8006ca6:	b082      	sub	sp, #8
 8006ca8:	af00      	add	r7, sp, #0
 8006caa:	6078      	str	r0, [r7, #4]
 8006cac:	460b      	mov	r3, r1
 8006cae:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8006cb6:	78fa      	ldrb	r2, [r7, #3]
 8006cb8:	6879      	ldr	r1, [r7, #4]
 8006cba:	4613      	mov	r3, r2
 8006cbc:	00db      	lsls	r3, r3, #3
 8006cbe:	4413      	add	r3, r2
 8006cc0:	009b      	lsls	r3, r3, #2
 8006cc2:	440b      	add	r3, r1
 8006cc4:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8006cc8:	681a      	ldr	r2, [r3, #0]
 8006cca:	78fb      	ldrb	r3, [r7, #3]
 8006ccc:	4619      	mov	r1, r3
 8006cce:	f7fe fc21 	bl	8005514 <USBD_LL_DataOutStage>
}
 8006cd2:	bf00      	nop
 8006cd4:	3708      	adds	r7, #8
 8006cd6:	46bd      	mov	sp, r7
 8006cd8:	bd80      	pop	{r7, pc}

08006cda <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006cda:	b580      	push	{r7, lr}
 8006cdc:	b082      	sub	sp, #8
 8006cde:	af00      	add	r7, sp, #0
 8006ce0:	6078      	str	r0, [r7, #4]
 8006ce2:	460b      	mov	r3, r1
 8006ce4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8006cec:	78fa      	ldrb	r2, [r7, #3]
 8006cee:	6879      	ldr	r1, [r7, #4]
 8006cf0:	4613      	mov	r3, r2
 8006cf2:	00db      	lsls	r3, r3, #3
 8006cf4:	4413      	add	r3, r2
 8006cf6:	009b      	lsls	r3, r3, #2
 8006cf8:	440b      	add	r3, r1
 8006cfa:	3320      	adds	r3, #32
 8006cfc:	681a      	ldr	r2, [r3, #0]
 8006cfe:	78fb      	ldrb	r3, [r7, #3]
 8006d00:	4619      	mov	r1, r3
 8006d02:	f7fe fcba 	bl	800567a <USBD_LL_DataInStage>
}
 8006d06:	bf00      	nop
 8006d08:	3708      	adds	r7, #8
 8006d0a:	46bd      	mov	sp, r7
 8006d0c:	bd80      	pop	{r7, pc}

08006d0e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006d0e:	b580      	push	{r7, lr}
 8006d10:	b082      	sub	sp, #8
 8006d12:	af00      	add	r7, sp, #0
 8006d14:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8006d1c:	4618      	mov	r0, r3
 8006d1e:	f7fe fdf4 	bl	800590a <USBD_LL_SOF>
}
 8006d22:	bf00      	nop
 8006d24:	3708      	adds	r7, #8
 8006d26:	46bd      	mov	sp, r7
 8006d28:	bd80      	pop	{r7, pc}

08006d2a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006d2a:	b580      	push	{r7, lr}
 8006d2c:	b084      	sub	sp, #16
 8006d2e:	af00      	add	r7, sp, #0
 8006d30:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8006d32:	2301      	movs	r3, #1
 8006d34:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	79db      	ldrb	r3, [r3, #7]
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d102      	bne.n	8006d44 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8006d3e:	2300      	movs	r3, #0
 8006d40:	73fb      	strb	r3, [r7, #15]
 8006d42:	e008      	b.n	8006d56 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	79db      	ldrb	r3, [r3, #7]
 8006d48:	2b02      	cmp	r3, #2
 8006d4a:	d102      	bne.n	8006d52 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8006d4c:	2301      	movs	r3, #1
 8006d4e:	73fb      	strb	r3, [r7, #15]
 8006d50:	e001      	b.n	8006d56 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8006d52:	f7f9 fd05 	bl	8000760 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8006d5c:	7bfa      	ldrb	r2, [r7, #15]
 8006d5e:	4611      	mov	r1, r2
 8006d60:	4618      	mov	r0, r3
 8006d62:	f7fe fd8e 	bl	8005882 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8006d6c:	4618      	mov	r0, r3
 8006d6e:	f7fe fd36 	bl	80057de <USBD_LL_Reset>
}
 8006d72:	bf00      	nop
 8006d74:	3710      	adds	r7, #16
 8006d76:	46bd      	mov	sp, r7
 8006d78:	bd80      	pop	{r7, pc}
	...

08006d7c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006d7c:	b580      	push	{r7, lr}
 8006d7e:	b082      	sub	sp, #8
 8006d80:	af00      	add	r7, sp, #0
 8006d82:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8006d8a:	4618      	mov	r0, r3
 8006d8c:	f7fe fd89 	bl	80058a2 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	687a      	ldr	r2, [r7, #4]
 8006d9c:	6812      	ldr	r2, [r2, #0]
 8006d9e:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8006da2:	f043 0301 	orr.w	r3, r3, #1
 8006da6:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	7adb      	ldrb	r3, [r3, #11]
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d005      	beq.n	8006dbc <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8006db0:	4b04      	ldr	r3, [pc, #16]	@ (8006dc4 <HAL_PCD_SuspendCallback+0x48>)
 8006db2:	691b      	ldr	r3, [r3, #16]
 8006db4:	4a03      	ldr	r2, [pc, #12]	@ (8006dc4 <HAL_PCD_SuspendCallback+0x48>)
 8006db6:	f043 0306 	orr.w	r3, r3, #6
 8006dba:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8006dbc:	bf00      	nop
 8006dbe:	3708      	adds	r7, #8
 8006dc0:	46bd      	mov	sp, r7
 8006dc2:	bd80      	pop	{r7, pc}
 8006dc4:	e000ed00 	.word	0xe000ed00

08006dc8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006dc8:	b580      	push	{r7, lr}
 8006dca:	b082      	sub	sp, #8
 8006dcc:	af00      	add	r7, sp, #0
 8006dce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8006dd6:	4618      	mov	r0, r3
 8006dd8:	f7fe fd7f 	bl	80058da <USBD_LL_Resume>
}
 8006ddc:	bf00      	nop
 8006dde:	3708      	adds	r7, #8
 8006de0:	46bd      	mov	sp, r7
 8006de2:	bd80      	pop	{r7, pc}

08006de4 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006de4:	b580      	push	{r7, lr}
 8006de6:	b082      	sub	sp, #8
 8006de8:	af00      	add	r7, sp, #0
 8006dea:	6078      	str	r0, [r7, #4]
 8006dec:	460b      	mov	r3, r1
 8006dee:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8006df6:	78fa      	ldrb	r2, [r7, #3]
 8006df8:	4611      	mov	r1, r2
 8006dfa:	4618      	mov	r0, r3
 8006dfc:	f7fe fdd7 	bl	80059ae <USBD_LL_IsoOUTIncomplete>
}
 8006e00:	bf00      	nop
 8006e02:	3708      	adds	r7, #8
 8006e04:	46bd      	mov	sp, r7
 8006e06:	bd80      	pop	{r7, pc}

08006e08 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006e08:	b580      	push	{r7, lr}
 8006e0a:	b082      	sub	sp, #8
 8006e0c:	af00      	add	r7, sp, #0
 8006e0e:	6078      	str	r0, [r7, #4]
 8006e10:	460b      	mov	r3, r1
 8006e12:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8006e1a:	78fa      	ldrb	r2, [r7, #3]
 8006e1c:	4611      	mov	r1, r2
 8006e1e:	4618      	mov	r0, r3
 8006e20:	f7fe fd93 	bl	800594a <USBD_LL_IsoINIncomplete>
}
 8006e24:	bf00      	nop
 8006e26:	3708      	adds	r7, #8
 8006e28:	46bd      	mov	sp, r7
 8006e2a:	bd80      	pop	{r7, pc}

08006e2c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006e2c:	b580      	push	{r7, lr}
 8006e2e:	b082      	sub	sp, #8
 8006e30:	af00      	add	r7, sp, #0
 8006e32:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8006e3a:	4618      	mov	r0, r3
 8006e3c:	f7fe fde9 	bl	8005a12 <USBD_LL_DevConnected>
}
 8006e40:	bf00      	nop
 8006e42:	3708      	adds	r7, #8
 8006e44:	46bd      	mov	sp, r7
 8006e46:	bd80      	pop	{r7, pc}

08006e48 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006e48:	b580      	push	{r7, lr}
 8006e4a:	b082      	sub	sp, #8
 8006e4c:	af00      	add	r7, sp, #0
 8006e4e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8006e56:	4618      	mov	r0, r3
 8006e58:	f7fe fde6 	bl	8005a28 <USBD_LL_DevDisconnected>
}
 8006e5c:	bf00      	nop
 8006e5e:	3708      	adds	r7, #8
 8006e60:	46bd      	mov	sp, r7
 8006e62:	bd80      	pop	{r7, pc}

08006e64 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8006e64:	b580      	push	{r7, lr}
 8006e66:	b082      	sub	sp, #8
 8006e68:	af00      	add	r7, sp, #0
 8006e6a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	781b      	ldrb	r3, [r3, #0]
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d13c      	bne.n	8006eee <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8006e74:	4a20      	ldr	r2, [pc, #128]	@ (8006ef8 <USBD_LL_Init+0x94>)
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	4a1e      	ldr	r2, [pc, #120]	@ (8006ef8 <USBD_LL_Init+0x94>)
 8006e80:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8006e84:	4b1c      	ldr	r3, [pc, #112]	@ (8006ef8 <USBD_LL_Init+0x94>)
 8006e86:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8006e8a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8006e8c:	4b1a      	ldr	r3, [pc, #104]	@ (8006ef8 <USBD_LL_Init+0x94>)
 8006e8e:	2204      	movs	r2, #4
 8006e90:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8006e92:	4b19      	ldr	r3, [pc, #100]	@ (8006ef8 <USBD_LL_Init+0x94>)
 8006e94:	2202      	movs	r2, #2
 8006e96:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8006e98:	4b17      	ldr	r3, [pc, #92]	@ (8006ef8 <USBD_LL_Init+0x94>)
 8006e9a:	2200      	movs	r2, #0
 8006e9c:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8006e9e:	4b16      	ldr	r3, [pc, #88]	@ (8006ef8 <USBD_LL_Init+0x94>)
 8006ea0:	2202      	movs	r2, #2
 8006ea2:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8006ea4:	4b14      	ldr	r3, [pc, #80]	@ (8006ef8 <USBD_LL_Init+0x94>)
 8006ea6:	2200      	movs	r2, #0
 8006ea8:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8006eaa:	4b13      	ldr	r3, [pc, #76]	@ (8006ef8 <USBD_LL_Init+0x94>)
 8006eac:	2200      	movs	r2, #0
 8006eae:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8006eb0:	4b11      	ldr	r3, [pc, #68]	@ (8006ef8 <USBD_LL_Init+0x94>)
 8006eb2:	2200      	movs	r2, #0
 8006eb4:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8006eb6:	4b10      	ldr	r3, [pc, #64]	@ (8006ef8 <USBD_LL_Init+0x94>)
 8006eb8:	2200      	movs	r2, #0
 8006eba:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8006ebc:	4b0e      	ldr	r3, [pc, #56]	@ (8006ef8 <USBD_LL_Init+0x94>)
 8006ebe:	2200      	movs	r2, #0
 8006ec0:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8006ec2:	480d      	ldr	r0, [pc, #52]	@ (8006ef8 <USBD_LL_Init+0x94>)
 8006ec4:	f7fa f88e 	bl	8000fe4 <HAL_PCD_Init>
 8006ec8:	4603      	mov	r3, r0
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d001      	beq.n	8006ed2 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8006ece:	f7f9 fc47 	bl	8000760 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8006ed2:	2180      	movs	r1, #128	@ 0x80
 8006ed4:	4808      	ldr	r0, [pc, #32]	@ (8006ef8 <USBD_LL_Init+0x94>)
 8006ed6:	f7fb faa2 	bl	800241e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8006eda:	2240      	movs	r2, #64	@ 0x40
 8006edc:	2100      	movs	r1, #0
 8006ede:	4806      	ldr	r0, [pc, #24]	@ (8006ef8 <USBD_LL_Init+0x94>)
 8006ee0:	f7fb fa56 	bl	8002390 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8006ee4:	2280      	movs	r2, #128	@ 0x80
 8006ee6:	2101      	movs	r1, #1
 8006ee8:	4803      	ldr	r0, [pc, #12]	@ (8006ef8 <USBD_LL_Init+0x94>)
 8006eea:	f7fb fa51 	bl	8002390 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8006eee:	2300      	movs	r3, #0
}
 8006ef0:	4618      	mov	r0, r3
 8006ef2:	3708      	adds	r7, #8
 8006ef4:	46bd      	mov	sp, r7
 8006ef6:	bd80      	pop	{r7, pc}
 8006ef8:	20000670 	.word	0x20000670

08006efc <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8006efc:	b580      	push	{r7, lr}
 8006efe:	b084      	sub	sp, #16
 8006f00:	af00      	add	r7, sp, #0
 8006f02:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006f04:	2300      	movs	r3, #0
 8006f06:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006f08:	2300      	movs	r3, #0
 8006f0a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8006f12:	4618      	mov	r0, r3
 8006f14:	f7fa f975 	bl	8001202 <HAL_PCD_Start>
 8006f18:	4603      	mov	r3, r0
 8006f1a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006f1c:	7bfb      	ldrb	r3, [r7, #15]
 8006f1e:	4618      	mov	r0, r3
 8006f20:	f000 f930 	bl	8007184 <USBD_Get_USB_Status>
 8006f24:	4603      	mov	r3, r0
 8006f26:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006f28:	7bbb      	ldrb	r3, [r7, #14]
}
 8006f2a:	4618      	mov	r0, r3
 8006f2c:	3710      	adds	r7, #16
 8006f2e:	46bd      	mov	sp, r7
 8006f30:	bd80      	pop	{r7, pc}

08006f32 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8006f32:	b580      	push	{r7, lr}
 8006f34:	b084      	sub	sp, #16
 8006f36:	af00      	add	r7, sp, #0
 8006f38:	6078      	str	r0, [r7, #4]
 8006f3a:	4608      	mov	r0, r1
 8006f3c:	4611      	mov	r1, r2
 8006f3e:	461a      	mov	r2, r3
 8006f40:	4603      	mov	r3, r0
 8006f42:	70fb      	strb	r3, [r7, #3]
 8006f44:	460b      	mov	r3, r1
 8006f46:	70bb      	strb	r3, [r7, #2]
 8006f48:	4613      	mov	r3, r2
 8006f4a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006f4c:	2300      	movs	r3, #0
 8006f4e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006f50:	2300      	movs	r3, #0
 8006f52:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8006f5a:	78bb      	ldrb	r3, [r7, #2]
 8006f5c:	883a      	ldrh	r2, [r7, #0]
 8006f5e:	78f9      	ldrb	r1, [r7, #3]
 8006f60:	f7fa fe49 	bl	8001bf6 <HAL_PCD_EP_Open>
 8006f64:	4603      	mov	r3, r0
 8006f66:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006f68:	7bfb      	ldrb	r3, [r7, #15]
 8006f6a:	4618      	mov	r0, r3
 8006f6c:	f000 f90a 	bl	8007184 <USBD_Get_USB_Status>
 8006f70:	4603      	mov	r3, r0
 8006f72:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006f74:	7bbb      	ldrb	r3, [r7, #14]
}
 8006f76:	4618      	mov	r0, r3
 8006f78:	3710      	adds	r7, #16
 8006f7a:	46bd      	mov	sp, r7
 8006f7c:	bd80      	pop	{r7, pc}

08006f7e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006f7e:	b580      	push	{r7, lr}
 8006f80:	b084      	sub	sp, #16
 8006f82:	af00      	add	r7, sp, #0
 8006f84:	6078      	str	r0, [r7, #4]
 8006f86:	460b      	mov	r3, r1
 8006f88:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006f8a:	2300      	movs	r3, #0
 8006f8c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006f8e:	2300      	movs	r3, #0
 8006f90:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8006f98:	78fa      	ldrb	r2, [r7, #3]
 8006f9a:	4611      	mov	r1, r2
 8006f9c:	4618      	mov	r0, r3
 8006f9e:	f7fa fe94 	bl	8001cca <HAL_PCD_EP_Close>
 8006fa2:	4603      	mov	r3, r0
 8006fa4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006fa6:	7bfb      	ldrb	r3, [r7, #15]
 8006fa8:	4618      	mov	r0, r3
 8006faa:	f000 f8eb 	bl	8007184 <USBD_Get_USB_Status>
 8006fae:	4603      	mov	r3, r0
 8006fb0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006fb2:	7bbb      	ldrb	r3, [r7, #14]
}
 8006fb4:	4618      	mov	r0, r3
 8006fb6:	3710      	adds	r7, #16
 8006fb8:	46bd      	mov	sp, r7
 8006fba:	bd80      	pop	{r7, pc}

08006fbc <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006fbc:	b580      	push	{r7, lr}
 8006fbe:	b084      	sub	sp, #16
 8006fc0:	af00      	add	r7, sp, #0
 8006fc2:	6078      	str	r0, [r7, #4]
 8006fc4:	460b      	mov	r3, r1
 8006fc6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006fc8:	2300      	movs	r3, #0
 8006fca:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006fcc:	2300      	movs	r3, #0
 8006fce:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8006fd6:	78fa      	ldrb	r2, [r7, #3]
 8006fd8:	4611      	mov	r1, r2
 8006fda:	4618      	mov	r0, r3
 8006fdc:	f7fa ff34 	bl	8001e48 <HAL_PCD_EP_SetStall>
 8006fe0:	4603      	mov	r3, r0
 8006fe2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006fe4:	7bfb      	ldrb	r3, [r7, #15]
 8006fe6:	4618      	mov	r0, r3
 8006fe8:	f000 f8cc 	bl	8007184 <USBD_Get_USB_Status>
 8006fec:	4603      	mov	r3, r0
 8006fee:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006ff0:	7bbb      	ldrb	r3, [r7, #14]
}
 8006ff2:	4618      	mov	r0, r3
 8006ff4:	3710      	adds	r7, #16
 8006ff6:	46bd      	mov	sp, r7
 8006ff8:	bd80      	pop	{r7, pc}

08006ffa <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006ffa:	b580      	push	{r7, lr}
 8006ffc:	b084      	sub	sp, #16
 8006ffe:	af00      	add	r7, sp, #0
 8007000:	6078      	str	r0, [r7, #4]
 8007002:	460b      	mov	r3, r1
 8007004:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007006:	2300      	movs	r3, #0
 8007008:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800700a:	2300      	movs	r3, #0
 800700c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007014:	78fa      	ldrb	r2, [r7, #3]
 8007016:	4611      	mov	r1, r2
 8007018:	4618      	mov	r0, r3
 800701a:	f7fa ff78 	bl	8001f0e <HAL_PCD_EP_ClrStall>
 800701e:	4603      	mov	r3, r0
 8007020:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007022:	7bfb      	ldrb	r3, [r7, #15]
 8007024:	4618      	mov	r0, r3
 8007026:	f000 f8ad 	bl	8007184 <USBD_Get_USB_Status>
 800702a:	4603      	mov	r3, r0
 800702c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800702e:	7bbb      	ldrb	r3, [r7, #14]
}
 8007030:	4618      	mov	r0, r3
 8007032:	3710      	adds	r7, #16
 8007034:	46bd      	mov	sp, r7
 8007036:	bd80      	pop	{r7, pc}

08007038 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007038:	b480      	push	{r7}
 800703a:	b085      	sub	sp, #20
 800703c:	af00      	add	r7, sp, #0
 800703e:	6078      	str	r0, [r7, #4]
 8007040:	460b      	mov	r3, r1
 8007042:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800704a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800704c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007050:	2b00      	cmp	r3, #0
 8007052:	da0b      	bge.n	800706c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8007054:	78fb      	ldrb	r3, [r7, #3]
 8007056:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800705a:	68f9      	ldr	r1, [r7, #12]
 800705c:	4613      	mov	r3, r2
 800705e:	00db      	lsls	r3, r3, #3
 8007060:	4413      	add	r3, r2
 8007062:	009b      	lsls	r3, r3, #2
 8007064:	440b      	add	r3, r1
 8007066:	3316      	adds	r3, #22
 8007068:	781b      	ldrb	r3, [r3, #0]
 800706a:	e00b      	b.n	8007084 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800706c:	78fb      	ldrb	r3, [r7, #3]
 800706e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007072:	68f9      	ldr	r1, [r7, #12]
 8007074:	4613      	mov	r3, r2
 8007076:	00db      	lsls	r3, r3, #3
 8007078:	4413      	add	r3, r2
 800707a:	009b      	lsls	r3, r3, #2
 800707c:	440b      	add	r3, r1
 800707e:	f203 2356 	addw	r3, r3, #598	@ 0x256
 8007082:	781b      	ldrb	r3, [r3, #0]
  }
}
 8007084:	4618      	mov	r0, r3
 8007086:	3714      	adds	r7, #20
 8007088:	46bd      	mov	sp, r7
 800708a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800708e:	4770      	bx	lr

08007090 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8007090:	b580      	push	{r7, lr}
 8007092:	b084      	sub	sp, #16
 8007094:	af00      	add	r7, sp, #0
 8007096:	6078      	str	r0, [r7, #4]
 8007098:	460b      	mov	r3, r1
 800709a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800709c:	2300      	movs	r3, #0
 800709e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80070a0:	2300      	movs	r3, #0
 80070a2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80070aa:	78fa      	ldrb	r2, [r7, #3]
 80070ac:	4611      	mov	r1, r2
 80070ae:	4618      	mov	r0, r3
 80070b0:	f7fa fd7d 	bl	8001bae <HAL_PCD_SetAddress>
 80070b4:	4603      	mov	r3, r0
 80070b6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80070b8:	7bfb      	ldrb	r3, [r7, #15]
 80070ba:	4618      	mov	r0, r3
 80070bc:	f000 f862 	bl	8007184 <USBD_Get_USB_Status>
 80070c0:	4603      	mov	r3, r0
 80070c2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80070c4:	7bbb      	ldrb	r3, [r7, #14]
}
 80070c6:	4618      	mov	r0, r3
 80070c8:	3710      	adds	r7, #16
 80070ca:	46bd      	mov	sp, r7
 80070cc:	bd80      	pop	{r7, pc}

080070ce <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80070ce:	b580      	push	{r7, lr}
 80070d0:	b086      	sub	sp, #24
 80070d2:	af00      	add	r7, sp, #0
 80070d4:	60f8      	str	r0, [r7, #12]
 80070d6:	607a      	str	r2, [r7, #4]
 80070d8:	603b      	str	r3, [r7, #0]
 80070da:	460b      	mov	r3, r1
 80070dc:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80070de:	2300      	movs	r3, #0
 80070e0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80070e2:	2300      	movs	r3, #0
 80070e4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80070ec:	7af9      	ldrb	r1, [r7, #11]
 80070ee:	683b      	ldr	r3, [r7, #0]
 80070f0:	687a      	ldr	r2, [r7, #4]
 80070f2:	f7fa fe6f 	bl	8001dd4 <HAL_PCD_EP_Transmit>
 80070f6:	4603      	mov	r3, r0
 80070f8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80070fa:	7dfb      	ldrb	r3, [r7, #23]
 80070fc:	4618      	mov	r0, r3
 80070fe:	f000 f841 	bl	8007184 <USBD_Get_USB_Status>
 8007102:	4603      	mov	r3, r0
 8007104:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007106:	7dbb      	ldrb	r3, [r7, #22]
}
 8007108:	4618      	mov	r0, r3
 800710a:	3718      	adds	r7, #24
 800710c:	46bd      	mov	sp, r7
 800710e:	bd80      	pop	{r7, pc}

08007110 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007110:	b580      	push	{r7, lr}
 8007112:	b086      	sub	sp, #24
 8007114:	af00      	add	r7, sp, #0
 8007116:	60f8      	str	r0, [r7, #12]
 8007118:	607a      	str	r2, [r7, #4]
 800711a:	603b      	str	r3, [r7, #0]
 800711c:	460b      	mov	r3, r1
 800711e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007120:	2300      	movs	r3, #0
 8007122:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007124:	2300      	movs	r3, #0
 8007126:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800712e:	7af9      	ldrb	r1, [r7, #11]
 8007130:	683b      	ldr	r3, [r7, #0]
 8007132:	687a      	ldr	r2, [r7, #4]
 8007134:	f7fa fe13 	bl	8001d5e <HAL_PCD_EP_Receive>
 8007138:	4603      	mov	r3, r0
 800713a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800713c:	7dfb      	ldrb	r3, [r7, #23]
 800713e:	4618      	mov	r0, r3
 8007140:	f000 f820 	bl	8007184 <USBD_Get_USB_Status>
 8007144:	4603      	mov	r3, r0
 8007146:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007148:	7dbb      	ldrb	r3, [r7, #22]
}
 800714a:	4618      	mov	r0, r3
 800714c:	3718      	adds	r7, #24
 800714e:	46bd      	mov	sp, r7
 8007150:	bd80      	pop	{r7, pc}
	...

08007154 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8007154:	b480      	push	{r7}
 8007156:	b083      	sub	sp, #12
 8007158:	af00      	add	r7, sp, #0
 800715a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CUSTOM_HID_HandleTypeDef)/4+1)];/* On 32-bit boundary */
  return mem;
 800715c:	4b03      	ldr	r3, [pc, #12]	@ (800716c <USBD_static_malloc+0x18>)
}
 800715e:	4618      	mov	r0, r3
 8007160:	370c      	adds	r7, #12
 8007162:	46bd      	mov	sp, r7
 8007164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007168:	4770      	bx	lr
 800716a:	bf00      	nop
 800716c:	20000b54 	.word	0x20000b54

08007170 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8007170:	b480      	push	{r7}
 8007172:	b083      	sub	sp, #12
 8007174:	af00      	add	r7, sp, #0
 8007176:	6078      	str	r0, [r7, #4]

}
 8007178:	bf00      	nop
 800717a:	370c      	adds	r7, #12
 800717c:	46bd      	mov	sp, r7
 800717e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007182:	4770      	bx	lr

08007184 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007184:	b480      	push	{r7}
 8007186:	b085      	sub	sp, #20
 8007188:	af00      	add	r7, sp, #0
 800718a:	4603      	mov	r3, r0
 800718c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800718e:	2300      	movs	r3, #0
 8007190:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8007192:	79fb      	ldrb	r3, [r7, #7]
 8007194:	2b03      	cmp	r3, #3
 8007196:	d817      	bhi.n	80071c8 <USBD_Get_USB_Status+0x44>
 8007198:	a201      	add	r2, pc, #4	@ (adr r2, 80071a0 <USBD_Get_USB_Status+0x1c>)
 800719a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800719e:	bf00      	nop
 80071a0:	080071b1 	.word	0x080071b1
 80071a4:	080071b7 	.word	0x080071b7
 80071a8:	080071bd 	.word	0x080071bd
 80071ac:	080071c3 	.word	0x080071c3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80071b0:	2300      	movs	r3, #0
 80071b2:	73fb      	strb	r3, [r7, #15]
    break;
 80071b4:	e00b      	b.n	80071ce <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80071b6:	2303      	movs	r3, #3
 80071b8:	73fb      	strb	r3, [r7, #15]
    break;
 80071ba:	e008      	b.n	80071ce <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80071bc:	2301      	movs	r3, #1
 80071be:	73fb      	strb	r3, [r7, #15]
    break;
 80071c0:	e005      	b.n	80071ce <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80071c2:	2303      	movs	r3, #3
 80071c4:	73fb      	strb	r3, [r7, #15]
    break;
 80071c6:	e002      	b.n	80071ce <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80071c8:	2303      	movs	r3, #3
 80071ca:	73fb      	strb	r3, [r7, #15]
    break;
 80071cc:	bf00      	nop
  }
  return usb_status;
 80071ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80071d0:	4618      	mov	r0, r3
 80071d2:	3714      	adds	r7, #20
 80071d4:	46bd      	mov	sp, r7
 80071d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071da:	4770      	bx	lr

080071dc <memset>:
 80071dc:	4402      	add	r2, r0
 80071de:	4603      	mov	r3, r0
 80071e0:	4293      	cmp	r3, r2
 80071e2:	d100      	bne.n	80071e6 <memset+0xa>
 80071e4:	4770      	bx	lr
 80071e6:	f803 1b01 	strb.w	r1, [r3], #1
 80071ea:	e7f9      	b.n	80071e0 <memset+0x4>

080071ec <__libc_init_array>:
 80071ec:	b570      	push	{r4, r5, r6, lr}
 80071ee:	4d0d      	ldr	r5, [pc, #52]	@ (8007224 <__libc_init_array+0x38>)
 80071f0:	4c0d      	ldr	r4, [pc, #52]	@ (8007228 <__libc_init_array+0x3c>)
 80071f2:	1b64      	subs	r4, r4, r5
 80071f4:	10a4      	asrs	r4, r4, #2
 80071f6:	2600      	movs	r6, #0
 80071f8:	42a6      	cmp	r6, r4
 80071fa:	d109      	bne.n	8007210 <__libc_init_array+0x24>
 80071fc:	4d0b      	ldr	r5, [pc, #44]	@ (800722c <__libc_init_array+0x40>)
 80071fe:	4c0c      	ldr	r4, [pc, #48]	@ (8007230 <__libc_init_array+0x44>)
 8007200:	f000 f818 	bl	8007234 <_init>
 8007204:	1b64      	subs	r4, r4, r5
 8007206:	10a4      	asrs	r4, r4, #2
 8007208:	2600      	movs	r6, #0
 800720a:	42a6      	cmp	r6, r4
 800720c:	d105      	bne.n	800721a <__libc_init_array+0x2e>
 800720e:	bd70      	pop	{r4, r5, r6, pc}
 8007210:	f855 3b04 	ldr.w	r3, [r5], #4
 8007214:	4798      	blx	r3
 8007216:	3601      	adds	r6, #1
 8007218:	e7ee      	b.n	80071f8 <__libc_init_array+0xc>
 800721a:	f855 3b04 	ldr.w	r3, [r5], #4
 800721e:	4798      	blx	r3
 8007220:	3601      	adds	r6, #1
 8007222:	e7f2      	b.n	800720a <__libc_init_array+0x1e>
 8007224:	080072c4 	.word	0x080072c4
 8007228:	080072c4 	.word	0x080072c4
 800722c:	080072c4 	.word	0x080072c4
 8007230:	080072c8 	.word	0x080072c8

08007234 <_init>:
 8007234:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007236:	bf00      	nop
 8007238:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800723a:	bc08      	pop	{r3}
 800723c:	469e      	mov	lr, r3
 800723e:	4770      	bx	lr

08007240 <_fini>:
 8007240:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007242:	bf00      	nop
 8007244:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007246:	bc08      	pop	{r3}
 8007248:	469e      	mov	lr, r3
 800724a:	4770      	bx	lr
