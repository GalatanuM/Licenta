
SimulareVolan.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007268  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ac  080073f0  080073f0  000083f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800749c  0800749c  0000952c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800749c  0800749c  0000849c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080074a4  080074a4  0000952c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080074a4  080074a4  000084a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080074a8  080074a8  000084a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000052c  20000000  080074ac  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000952c  2**0
                  CONTENTS
 10 .bss          00000aa0  2000052c  2000052c  0000952c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000fcc  20000fcc  0000952c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000952c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000125bb  00000000  00000000  0000955c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000303e  00000000  00000000  0001bb17  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001088  00000000  00000000  0001eb58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000c93  00000000  00000000  0001fbe0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002196f  00000000  00000000  00020873  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00014905  00000000  00000000  000421e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c21ca  00000000  00000000  00056ae7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00118cb1  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000044c4  00000000  00000000  00118cf4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006c  00000000  00000000  0011d1b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000052c 	.word	0x2000052c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080073d8 	.word	0x080073d8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000530 	.word	0x20000530
 80001c4:	080073d8 	.word	0x080073d8

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b988 	b.w	80004f0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	468e      	mov	lr, r1
 8000200:	4604      	mov	r4, r0
 8000202:	4688      	mov	r8, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d962      	bls.n	80002d4 <__udivmoddi4+0xdc>
 800020e:	fab2 f682 	clz	r6, r2
 8000212:	b14e      	cbz	r6, 8000228 <__udivmoddi4+0x30>
 8000214:	f1c6 0320 	rsb	r3, r6, #32
 8000218:	fa01 f806 	lsl.w	r8, r1, r6
 800021c:	fa20 f303 	lsr.w	r3, r0, r3
 8000220:	40b7      	lsls	r7, r6
 8000222:	ea43 0808 	orr.w	r8, r3, r8
 8000226:	40b4      	lsls	r4, r6
 8000228:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800022c:	fa1f fc87 	uxth.w	ip, r7
 8000230:	fbb8 f1fe 	udiv	r1, r8, lr
 8000234:	0c23      	lsrs	r3, r4, #16
 8000236:	fb0e 8811 	mls	r8, lr, r1, r8
 800023a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023e:	fb01 f20c 	mul.w	r2, r1, ip
 8000242:	429a      	cmp	r2, r3
 8000244:	d909      	bls.n	800025a <__udivmoddi4+0x62>
 8000246:	18fb      	adds	r3, r7, r3
 8000248:	f101 30ff 	add.w	r0, r1, #4294967295
 800024c:	f080 80ea 	bcs.w	8000424 <__udivmoddi4+0x22c>
 8000250:	429a      	cmp	r2, r3
 8000252:	f240 80e7 	bls.w	8000424 <__udivmoddi4+0x22c>
 8000256:	3902      	subs	r1, #2
 8000258:	443b      	add	r3, r7
 800025a:	1a9a      	subs	r2, r3, r2
 800025c:	b2a3      	uxth	r3, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800026a:	fb00 fc0c 	mul.w	ip, r0, ip
 800026e:	459c      	cmp	ip, r3
 8000270:	d909      	bls.n	8000286 <__udivmoddi4+0x8e>
 8000272:	18fb      	adds	r3, r7, r3
 8000274:	f100 32ff 	add.w	r2, r0, #4294967295
 8000278:	f080 80d6 	bcs.w	8000428 <__udivmoddi4+0x230>
 800027c:	459c      	cmp	ip, r3
 800027e:	f240 80d3 	bls.w	8000428 <__udivmoddi4+0x230>
 8000282:	443b      	add	r3, r7
 8000284:	3802      	subs	r0, #2
 8000286:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028a:	eba3 030c 	sub.w	r3, r3, ip
 800028e:	2100      	movs	r1, #0
 8000290:	b11d      	cbz	r5, 800029a <__udivmoddi4+0xa2>
 8000292:	40f3      	lsrs	r3, r6
 8000294:	2200      	movs	r2, #0
 8000296:	e9c5 3200 	strd	r3, r2, [r5]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d905      	bls.n	80002ae <__udivmoddi4+0xb6>
 80002a2:	b10d      	cbz	r5, 80002a8 <__udivmoddi4+0xb0>
 80002a4:	e9c5 0100 	strd	r0, r1, [r5]
 80002a8:	2100      	movs	r1, #0
 80002aa:	4608      	mov	r0, r1
 80002ac:	e7f5      	b.n	800029a <__udivmoddi4+0xa2>
 80002ae:	fab3 f183 	clz	r1, r3
 80002b2:	2900      	cmp	r1, #0
 80002b4:	d146      	bne.n	8000344 <__udivmoddi4+0x14c>
 80002b6:	4573      	cmp	r3, lr
 80002b8:	d302      	bcc.n	80002c0 <__udivmoddi4+0xc8>
 80002ba:	4282      	cmp	r2, r0
 80002bc:	f200 8105 	bhi.w	80004ca <__udivmoddi4+0x2d2>
 80002c0:	1a84      	subs	r4, r0, r2
 80002c2:	eb6e 0203 	sbc.w	r2, lr, r3
 80002c6:	2001      	movs	r0, #1
 80002c8:	4690      	mov	r8, r2
 80002ca:	2d00      	cmp	r5, #0
 80002cc:	d0e5      	beq.n	800029a <__udivmoddi4+0xa2>
 80002ce:	e9c5 4800 	strd	r4, r8, [r5]
 80002d2:	e7e2      	b.n	800029a <__udivmoddi4+0xa2>
 80002d4:	2a00      	cmp	r2, #0
 80002d6:	f000 8090 	beq.w	80003fa <__udivmoddi4+0x202>
 80002da:	fab2 f682 	clz	r6, r2
 80002de:	2e00      	cmp	r6, #0
 80002e0:	f040 80a4 	bne.w	800042c <__udivmoddi4+0x234>
 80002e4:	1a8a      	subs	r2, r1, r2
 80002e6:	0c03      	lsrs	r3, r0, #16
 80002e8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002ec:	b280      	uxth	r0, r0
 80002ee:	b2bc      	uxth	r4, r7
 80002f0:	2101      	movs	r1, #1
 80002f2:	fbb2 fcfe 	udiv	ip, r2, lr
 80002f6:	fb0e 221c 	mls	r2, lr, ip, r2
 80002fa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002fe:	fb04 f20c 	mul.w	r2, r4, ip
 8000302:	429a      	cmp	r2, r3
 8000304:	d907      	bls.n	8000316 <__udivmoddi4+0x11e>
 8000306:	18fb      	adds	r3, r7, r3
 8000308:	f10c 38ff 	add.w	r8, ip, #4294967295
 800030c:	d202      	bcs.n	8000314 <__udivmoddi4+0x11c>
 800030e:	429a      	cmp	r2, r3
 8000310:	f200 80e0 	bhi.w	80004d4 <__udivmoddi4+0x2dc>
 8000314:	46c4      	mov	ip, r8
 8000316:	1a9b      	subs	r3, r3, r2
 8000318:	fbb3 f2fe 	udiv	r2, r3, lr
 800031c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000320:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000324:	fb02 f404 	mul.w	r4, r2, r4
 8000328:	429c      	cmp	r4, r3
 800032a:	d907      	bls.n	800033c <__udivmoddi4+0x144>
 800032c:	18fb      	adds	r3, r7, r3
 800032e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x142>
 8000334:	429c      	cmp	r4, r3
 8000336:	f200 80ca 	bhi.w	80004ce <__udivmoddi4+0x2d6>
 800033a:	4602      	mov	r2, r0
 800033c:	1b1b      	subs	r3, r3, r4
 800033e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000342:	e7a5      	b.n	8000290 <__udivmoddi4+0x98>
 8000344:	f1c1 0620 	rsb	r6, r1, #32
 8000348:	408b      	lsls	r3, r1
 800034a:	fa22 f706 	lsr.w	r7, r2, r6
 800034e:	431f      	orrs	r7, r3
 8000350:	fa0e f401 	lsl.w	r4, lr, r1
 8000354:	fa20 f306 	lsr.w	r3, r0, r6
 8000358:	fa2e fe06 	lsr.w	lr, lr, r6
 800035c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000360:	4323      	orrs	r3, r4
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	fa1f fc87 	uxth.w	ip, r7
 800036a:	fbbe f0f9 	udiv	r0, lr, r9
 800036e:	0c1c      	lsrs	r4, r3, #16
 8000370:	fb09 ee10 	mls	lr, r9, r0, lr
 8000374:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000378:	fb00 fe0c 	mul.w	lr, r0, ip
 800037c:	45a6      	cmp	lr, r4
 800037e:	fa02 f201 	lsl.w	r2, r2, r1
 8000382:	d909      	bls.n	8000398 <__udivmoddi4+0x1a0>
 8000384:	193c      	adds	r4, r7, r4
 8000386:	f100 3aff 	add.w	sl, r0, #4294967295
 800038a:	f080 809c 	bcs.w	80004c6 <__udivmoddi4+0x2ce>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f240 8099 	bls.w	80004c6 <__udivmoddi4+0x2ce>
 8000394:	3802      	subs	r0, #2
 8000396:	443c      	add	r4, r7
 8000398:	eba4 040e 	sub.w	r4, r4, lr
 800039c:	fa1f fe83 	uxth.w	lr, r3
 80003a0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003a4:	fb09 4413 	mls	r4, r9, r3, r4
 80003a8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003ac:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b0:	45a4      	cmp	ip, r4
 80003b2:	d908      	bls.n	80003c6 <__udivmoddi4+0x1ce>
 80003b4:	193c      	adds	r4, r7, r4
 80003b6:	f103 3eff 	add.w	lr, r3, #4294967295
 80003ba:	f080 8082 	bcs.w	80004c2 <__udivmoddi4+0x2ca>
 80003be:	45a4      	cmp	ip, r4
 80003c0:	d97f      	bls.n	80004c2 <__udivmoddi4+0x2ca>
 80003c2:	3b02      	subs	r3, #2
 80003c4:	443c      	add	r4, r7
 80003c6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003ca:	eba4 040c 	sub.w	r4, r4, ip
 80003ce:	fba0 ec02 	umull	lr, ip, r0, r2
 80003d2:	4564      	cmp	r4, ip
 80003d4:	4673      	mov	r3, lr
 80003d6:	46e1      	mov	r9, ip
 80003d8:	d362      	bcc.n	80004a0 <__udivmoddi4+0x2a8>
 80003da:	d05f      	beq.n	800049c <__udivmoddi4+0x2a4>
 80003dc:	b15d      	cbz	r5, 80003f6 <__udivmoddi4+0x1fe>
 80003de:	ebb8 0203 	subs.w	r2, r8, r3
 80003e2:	eb64 0409 	sbc.w	r4, r4, r9
 80003e6:	fa04 f606 	lsl.w	r6, r4, r6
 80003ea:	fa22 f301 	lsr.w	r3, r2, r1
 80003ee:	431e      	orrs	r6, r3
 80003f0:	40cc      	lsrs	r4, r1
 80003f2:	e9c5 6400 	strd	r6, r4, [r5]
 80003f6:	2100      	movs	r1, #0
 80003f8:	e74f      	b.n	800029a <__udivmoddi4+0xa2>
 80003fa:	fbb1 fcf2 	udiv	ip, r1, r2
 80003fe:	0c01      	lsrs	r1, r0, #16
 8000400:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000404:	b280      	uxth	r0, r0
 8000406:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800040a:	463b      	mov	r3, r7
 800040c:	4638      	mov	r0, r7
 800040e:	463c      	mov	r4, r7
 8000410:	46b8      	mov	r8, r7
 8000412:	46be      	mov	lr, r7
 8000414:	2620      	movs	r6, #32
 8000416:	fbb1 f1f7 	udiv	r1, r1, r7
 800041a:	eba2 0208 	sub.w	r2, r2, r8
 800041e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000422:	e766      	b.n	80002f2 <__udivmoddi4+0xfa>
 8000424:	4601      	mov	r1, r0
 8000426:	e718      	b.n	800025a <__udivmoddi4+0x62>
 8000428:	4610      	mov	r0, r2
 800042a:	e72c      	b.n	8000286 <__udivmoddi4+0x8e>
 800042c:	f1c6 0220 	rsb	r2, r6, #32
 8000430:	fa2e f302 	lsr.w	r3, lr, r2
 8000434:	40b7      	lsls	r7, r6
 8000436:	40b1      	lsls	r1, r6
 8000438:	fa20 f202 	lsr.w	r2, r0, r2
 800043c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000440:	430a      	orrs	r2, r1
 8000442:	fbb3 f8fe 	udiv	r8, r3, lr
 8000446:	b2bc      	uxth	r4, r7
 8000448:	fb0e 3318 	mls	r3, lr, r8, r3
 800044c:	0c11      	lsrs	r1, r2, #16
 800044e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000452:	fb08 f904 	mul.w	r9, r8, r4
 8000456:	40b0      	lsls	r0, r6
 8000458:	4589      	cmp	r9, r1
 800045a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800045e:	b280      	uxth	r0, r0
 8000460:	d93e      	bls.n	80004e0 <__udivmoddi4+0x2e8>
 8000462:	1879      	adds	r1, r7, r1
 8000464:	f108 3cff 	add.w	ip, r8, #4294967295
 8000468:	d201      	bcs.n	800046e <__udivmoddi4+0x276>
 800046a:	4589      	cmp	r9, r1
 800046c:	d81f      	bhi.n	80004ae <__udivmoddi4+0x2b6>
 800046e:	eba1 0109 	sub.w	r1, r1, r9
 8000472:	fbb1 f9fe 	udiv	r9, r1, lr
 8000476:	fb09 f804 	mul.w	r8, r9, r4
 800047a:	fb0e 1119 	mls	r1, lr, r9, r1
 800047e:	b292      	uxth	r2, r2
 8000480:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000484:	4542      	cmp	r2, r8
 8000486:	d229      	bcs.n	80004dc <__udivmoddi4+0x2e4>
 8000488:	18ba      	adds	r2, r7, r2
 800048a:	f109 31ff 	add.w	r1, r9, #4294967295
 800048e:	d2c4      	bcs.n	800041a <__udivmoddi4+0x222>
 8000490:	4542      	cmp	r2, r8
 8000492:	d2c2      	bcs.n	800041a <__udivmoddi4+0x222>
 8000494:	f1a9 0102 	sub.w	r1, r9, #2
 8000498:	443a      	add	r2, r7
 800049a:	e7be      	b.n	800041a <__udivmoddi4+0x222>
 800049c:	45f0      	cmp	r8, lr
 800049e:	d29d      	bcs.n	80003dc <__udivmoddi4+0x1e4>
 80004a0:	ebbe 0302 	subs.w	r3, lr, r2
 80004a4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004a8:	3801      	subs	r0, #1
 80004aa:	46e1      	mov	r9, ip
 80004ac:	e796      	b.n	80003dc <__udivmoddi4+0x1e4>
 80004ae:	eba7 0909 	sub.w	r9, r7, r9
 80004b2:	4449      	add	r1, r9
 80004b4:	f1a8 0c02 	sub.w	ip, r8, #2
 80004b8:	fbb1 f9fe 	udiv	r9, r1, lr
 80004bc:	fb09 f804 	mul.w	r8, r9, r4
 80004c0:	e7db      	b.n	800047a <__udivmoddi4+0x282>
 80004c2:	4673      	mov	r3, lr
 80004c4:	e77f      	b.n	80003c6 <__udivmoddi4+0x1ce>
 80004c6:	4650      	mov	r0, sl
 80004c8:	e766      	b.n	8000398 <__udivmoddi4+0x1a0>
 80004ca:	4608      	mov	r0, r1
 80004cc:	e6fd      	b.n	80002ca <__udivmoddi4+0xd2>
 80004ce:	443b      	add	r3, r7
 80004d0:	3a02      	subs	r2, #2
 80004d2:	e733      	b.n	800033c <__udivmoddi4+0x144>
 80004d4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d8:	443b      	add	r3, r7
 80004da:	e71c      	b.n	8000316 <__udivmoddi4+0x11e>
 80004dc:	4649      	mov	r1, r9
 80004de:	e79c      	b.n	800041a <__udivmoddi4+0x222>
 80004e0:	eba1 0109 	sub.w	r1, r1, r9
 80004e4:	46c4      	mov	ip, r8
 80004e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004ea:	fb09 f804 	mul.w	r8, r9, r4
 80004ee:	e7c4      	b.n	800047a <__udivmoddi4+0x282>

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <HAL_TIM_IC_CaptureCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80004f4:	b480      	push	{r7}
 80004f6:	b083      	sub	sp, #12
 80004f8:	af00      	add	r7, sp, #0
 80004fa:	6078      	str	r0, [r7, #4]
	encoder = __HAL_TIM_GET_COUNTER(htim);
 80004fc:	687b      	ldr	r3, [r7, #4]
 80004fe:	681b      	ldr	r3, [r3, #0]
 8000500:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000502:	b21a      	sxth	r2, r3
 8000504:	4b03      	ldr	r3, [pc, #12]	@ (8000514 <HAL_TIM_IC_CaptureCallback+0x20>)
 8000506:	801a      	strh	r2, [r3, #0]
}
 8000508:	bf00      	nop
 800050a:	370c      	adds	r7, #12
 800050c:	46bd      	mov	sp, r7
 800050e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000512:	4770      	bx	lr
 8000514:	200005aa 	.word	0x200005aa

08000518 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800051c:	f000 fa86 	bl	8000a2c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000520:	f000 f892 	bl	8000648 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000524:	f000 f94e 	bl	80007c4 <MX_GPIO_Init>
  MX_TIM3_Init();
 8000528:	f000 f8f8 	bl	800071c <MX_TIM3_Init>
  MX_USB_DEVICE_Init();
 800052c:	f006 fa5a 	bl	80069e4 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Encoder_Start_IT(&htim3, TIM_CHANNEL_ALL);
 8000530:	213c      	movs	r1, #60	@ 0x3c
 8000532:	4841      	ldr	r0, [pc, #260]	@ (8000638 <main+0x120>)
 8000534:	f002 fd0e 	bl	8002f54 <HAL_TIM_Encoder_Start_IT>
	reportContainer.id = 0x01;
 8000538:	4b40      	ldr	r3, [pc, #256]	@ (800063c <main+0x124>)
 800053a:	2201      	movs	r2, #1
 800053c:	701a      	strb	r2, [r3, #0]
	reportContainer.buttons = 0x55555555;
 800053e:	4b3f      	ldr	r3, [pc, #252]	@ (800063c <main+0x124>)
 8000540:	3301      	adds	r3, #1
 8000542:	2200      	movs	r2, #0
 8000544:	f042 0255 	orr.w	r2, r2, #85	@ 0x55
 8000548:	701a      	strb	r2, [r3, #0]
 800054a:	2200      	movs	r2, #0
 800054c:	f042 0255 	orr.w	r2, r2, #85	@ 0x55
 8000550:	705a      	strb	r2, [r3, #1]
 8000552:	2200      	movs	r2, #0
 8000554:	f042 0255 	orr.w	r2, r2, #85	@ 0x55
 8000558:	709a      	strb	r2, [r3, #2]
 800055a:	2200      	movs	r2, #0
 800055c:	f042 0255 	orr.w	r2, r2, #85	@ 0x55
 8000560:	70da      	strb	r2, [r3, #3]
 8000562:	2200      	movs	r2, #0
 8000564:	711a      	strb	r2, [r3, #4]
 8000566:	2200      	movs	r2, #0
 8000568:	715a      	strb	r2, [r3, #5]
 800056a:	2200      	movs	r2, #0
 800056c:	719a      	strb	r2, [r3, #6]
 800056e:	2200      	movs	r2, #0
 8000570:	71da      	strb	r2, [r3, #7]
	reportContainer.X = 0;
 8000572:	4b32      	ldr	r3, [pc, #200]	@ (800063c <main+0x124>)
 8000574:	2200      	movs	r2, #0
 8000576:	725a      	strb	r2, [r3, #9]
 8000578:	2200      	movs	r2, #0
 800057a:	729a      	strb	r2, [r3, #10]
	reportContainer.Y = 0;
 800057c:	4b2f      	ldr	r3, [pc, #188]	@ (800063c <main+0x124>)
 800057e:	2200      	movs	r2, #0
 8000580:	72da      	strb	r2, [r3, #11]
 8000582:	2200      	movs	r2, #0
 8000584:	731a      	strb	r2, [r3, #12]
	reportContainer.Z = 0;
 8000586:	4b2d      	ldr	r3, [pc, #180]	@ (800063c <main+0x124>)
 8000588:	2200      	movs	r2, #0
 800058a:	735a      	strb	r2, [r3, #13]
 800058c:	2200      	movs	r2, #0
 800058e:	739a      	strb	r2, [r3, #14]
	reportContainer.RX = 0;
 8000590:	4b2a      	ldr	r3, [pc, #168]	@ (800063c <main+0x124>)
 8000592:	2200      	movs	r2, #0
 8000594:	73da      	strb	r2, [r3, #15]
 8000596:	2200      	movs	r2, #0
 8000598:	741a      	strb	r2, [r3, #16]
	reportContainer.RY = 0;
 800059a:	4b28      	ldr	r3, [pc, #160]	@ (800063c <main+0x124>)
 800059c:	2200      	movs	r2, #0
 800059e:	745a      	strb	r2, [r3, #17]
 80005a0:	2200      	movs	r2, #0
 80005a2:	749a      	strb	r2, [r3, #18]
	reportContainer.RZ = 0;
 80005a4:	4b25      	ldr	r3, [pc, #148]	@ (800063c <main+0x124>)
 80005a6:	2200      	movs	r2, #0
 80005a8:	74da      	strb	r2, [r3, #19]
 80005aa:	2200      	movs	r2, #0
 80005ac:	751a      	strb	r2, [r3, #20]
	reportContainer.Dial = 0;
 80005ae:	4b23      	ldr	r3, [pc, #140]	@ (800063c <main+0x124>)
 80005b0:	2200      	movs	r2, #0
 80005b2:	755a      	strb	r2, [r3, #21]
 80005b4:	2200      	movs	r2, #0
 80005b6:	759a      	strb	r2, [r3, #22]
	reportContainer.Slider = 0;
 80005b8:	4b20      	ldr	r3, [pc, #128]	@ (800063c <main+0x124>)
 80005ba:	2200      	movs	r2, #0
 80005bc:	75da      	strb	r2, [r3, #23]
 80005be:	2200      	movs	r2, #0
 80005c0:	761a      	strb	r2, [r3, #24]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	reportContainer.X = encoder;
 80005c2:	4b1f      	ldr	r3, [pc, #124]	@ (8000640 <main+0x128>)
 80005c4:	f9b3 2000 	ldrsh.w	r2, [r3]
 80005c8:	4b1c      	ldr	r3, [pc, #112]	@ (800063c <main+0x124>)
 80005ca:	f8a3 2009 	strh.w	r2, [r3, #9]
	reportContainer.Y = encoder;
 80005ce:	4b1c      	ldr	r3, [pc, #112]	@ (8000640 <main+0x128>)
 80005d0:	f9b3 2000 	ldrsh.w	r2, [r3]
 80005d4:	4b19      	ldr	r3, [pc, #100]	@ (800063c <main+0x124>)
 80005d6:	f8a3 200b 	strh.w	r2, [r3, #11]
	reportContainer.Z = encoder;
 80005da:	4b19      	ldr	r3, [pc, #100]	@ (8000640 <main+0x128>)
 80005dc:	f9b3 2000 	ldrsh.w	r2, [r3]
 80005e0:	4b16      	ldr	r3, [pc, #88]	@ (800063c <main+0x124>)
 80005e2:	f8a3 200d 	strh.w	r2, [r3, #13]
	reportContainer.RX = encoder;
 80005e6:	4b16      	ldr	r3, [pc, #88]	@ (8000640 <main+0x128>)
 80005e8:	f9b3 2000 	ldrsh.w	r2, [r3]
 80005ec:	4b13      	ldr	r3, [pc, #76]	@ (800063c <main+0x124>)
 80005ee:	f8a3 200f 	strh.w	r2, [r3, #15]
	reportContainer.RY = encoder;
 80005f2:	4b13      	ldr	r3, [pc, #76]	@ (8000640 <main+0x128>)
 80005f4:	f9b3 2000 	ldrsh.w	r2, [r3]
 80005f8:	4b10      	ldr	r3, [pc, #64]	@ (800063c <main+0x124>)
 80005fa:	f8a3 2011 	strh.w	r2, [r3, #17]
	reportContainer.RZ = encoder;
 80005fe:	4b10      	ldr	r3, [pc, #64]	@ (8000640 <main+0x128>)
 8000600:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000604:	4b0d      	ldr	r3, [pc, #52]	@ (800063c <main+0x124>)
 8000606:	f8a3 2013 	strh.w	r2, [r3, #19]
	reportContainer.Dial = encoder;
 800060a:	4b0d      	ldr	r3, [pc, #52]	@ (8000640 <main+0x128>)
 800060c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000610:	4b0a      	ldr	r3, [pc, #40]	@ (800063c <main+0x124>)
 8000612:	f8a3 2015 	strh.w	r2, [r3, #21]
	reportContainer.Slider = encoder;
 8000616:	4b0a      	ldr	r3, [pc, #40]	@ (8000640 <main+0x128>)
 8000618:	f9b3 2000 	ldrsh.w	r2, [r3]
 800061c:	4b07      	ldr	r3, [pc, #28]	@ (800063c <main+0x124>)
 800061e:	f8a3 2017 	strh.w	r2, [r3, #23]
	USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, (uint8_t *)&reportContainer, 25);
 8000622:	2219      	movs	r2, #25
 8000624:	4905      	ldr	r1, [pc, #20]	@ (800063c <main+0x124>)
 8000626:	4807      	ldr	r0, [pc, #28]	@ (8000644 <main+0x12c>)
 8000628:	f004 fd50 	bl	80050cc <USBD_CUSTOM_HID_SendReport>
	HAL_Delay(10);
 800062c:	200a      	movs	r0, #10
 800062e:	f000 fa6f 	bl	8000b10 <HAL_Delay>
  {
 8000632:	bf00      	nop
 8000634:	e7c5      	b.n	80005c2 <main+0xaa>
 8000636:	bf00      	nop
 8000638:	20000548 	.word	0x20000548
 800063c:	20000590 	.word	0x20000590
 8000640:	200005aa 	.word	0x200005aa
 8000644:	200005b4 	.word	0x200005b4

08000648 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b094      	sub	sp, #80	@ 0x50
 800064c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800064e:	f107 0320 	add.w	r3, r7, #32
 8000652:	2230      	movs	r2, #48	@ 0x30
 8000654:	2100      	movs	r1, #0
 8000656:	4618      	mov	r0, r3
 8000658:	f006 fe92 	bl	8007380 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800065c:	f107 030c 	add.w	r3, r7, #12
 8000660:	2200      	movs	r2, #0
 8000662:	601a      	str	r2, [r3, #0]
 8000664:	605a      	str	r2, [r3, #4]
 8000666:	609a      	str	r2, [r3, #8]
 8000668:	60da      	str	r2, [r3, #12]
 800066a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800066c:	2300      	movs	r3, #0
 800066e:	60bb      	str	r3, [r7, #8]
 8000670:	4b28      	ldr	r3, [pc, #160]	@ (8000714 <SystemClock_Config+0xcc>)
 8000672:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000674:	4a27      	ldr	r2, [pc, #156]	@ (8000714 <SystemClock_Config+0xcc>)
 8000676:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800067a:	6413      	str	r3, [r2, #64]	@ 0x40
 800067c:	4b25      	ldr	r3, [pc, #148]	@ (8000714 <SystemClock_Config+0xcc>)
 800067e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000680:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000684:	60bb      	str	r3, [r7, #8]
 8000686:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000688:	2300      	movs	r3, #0
 800068a:	607b      	str	r3, [r7, #4]
 800068c:	4b22      	ldr	r3, [pc, #136]	@ (8000718 <SystemClock_Config+0xd0>)
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	4a21      	ldr	r2, [pc, #132]	@ (8000718 <SystemClock_Config+0xd0>)
 8000692:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000696:	6013      	str	r3, [r2, #0]
 8000698:	4b1f      	ldr	r3, [pc, #124]	@ (8000718 <SystemClock_Config+0xd0>)
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80006a0:	607b      	str	r3, [r7, #4]
 80006a2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006a4:	2301      	movs	r3, #1
 80006a6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006a8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80006ac:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006ae:	2302      	movs	r3, #2
 80006b0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006b2:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80006b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80006b8:	2304      	movs	r3, #4
 80006ba:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80006bc:	23a8      	movs	r3, #168	@ 0xa8
 80006be:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006c0:	2302      	movs	r3, #2
 80006c2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80006c4:	2307      	movs	r3, #7
 80006c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006c8:	f107 0320 	add.w	r3, r7, #32
 80006cc:	4618      	mov	r0, r3
 80006ce:	f001 ff2b 	bl	8002528 <HAL_RCC_OscConfig>
 80006d2:	4603      	mov	r3, r0
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d001      	beq.n	80006dc <SystemClock_Config+0x94>
  {
    Error_Handler();
 80006d8:	f000 f8aa 	bl	8000830 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006dc:	230f      	movs	r3, #15
 80006de:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006e0:	2302      	movs	r3, #2
 80006e2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006e4:	2300      	movs	r3, #0
 80006e6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006e8:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80006ec:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006ee:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80006f2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80006f4:	f107 030c 	add.w	r3, r7, #12
 80006f8:	2105      	movs	r1, #5
 80006fa:	4618      	mov	r0, r3
 80006fc:	f002 f98c 	bl	8002a18 <HAL_RCC_ClockConfig>
 8000700:	4603      	mov	r3, r0
 8000702:	2b00      	cmp	r3, #0
 8000704:	d001      	beq.n	800070a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000706:	f000 f893 	bl	8000830 <Error_Handler>
  }
}
 800070a:	bf00      	nop
 800070c:	3750      	adds	r7, #80	@ 0x50
 800070e:	46bd      	mov	sp, r7
 8000710:	bd80      	pop	{r7, pc}
 8000712:	bf00      	nop
 8000714:	40023800 	.word	0x40023800
 8000718:	40007000 	.word	0x40007000

0800071c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b08c      	sub	sp, #48	@ 0x30
 8000720:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000722:	f107 030c 	add.w	r3, r7, #12
 8000726:	2224      	movs	r2, #36	@ 0x24
 8000728:	2100      	movs	r1, #0
 800072a:	4618      	mov	r0, r3
 800072c:	f006 fe28 	bl	8007380 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000730:	1d3b      	adds	r3, r7, #4
 8000732:	2200      	movs	r2, #0
 8000734:	601a      	str	r2, [r3, #0]
 8000736:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000738:	4b20      	ldr	r3, [pc, #128]	@ (80007bc <MX_TIM3_Init+0xa0>)
 800073a:	4a21      	ldr	r2, [pc, #132]	@ (80007c0 <MX_TIM3_Init+0xa4>)
 800073c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800073e:	4b1f      	ldr	r3, [pc, #124]	@ (80007bc <MX_TIM3_Init+0xa0>)
 8000740:	2200      	movs	r2, #0
 8000742:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000744:	4b1d      	ldr	r3, [pc, #116]	@ (80007bc <MX_TIM3_Init+0xa0>)
 8000746:	2200      	movs	r2, #0
 8000748:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800074a:	4b1c      	ldr	r3, [pc, #112]	@ (80007bc <MX_TIM3_Init+0xa0>)
 800074c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000750:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000752:	4b1a      	ldr	r3, [pc, #104]	@ (80007bc <MX_TIM3_Init+0xa0>)
 8000754:	2200      	movs	r2, #0
 8000756:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000758:	4b18      	ldr	r3, [pc, #96]	@ (80007bc <MX_TIM3_Init+0xa0>)
 800075a:	2200      	movs	r2, #0
 800075c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800075e:	2303      	movs	r3, #3
 8000760:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8000762:	2302      	movs	r3, #2
 8000764:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000766:	2301      	movs	r3, #1
 8000768:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800076a:	2300      	movs	r3, #0
 800076c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800076e:	2300      	movs	r3, #0
 8000770:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 8000772:	2302      	movs	r3, #2
 8000774:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000776:	2301      	movs	r3, #1
 8000778:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800077a:	2300      	movs	r3, #0
 800077c:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 800077e:	2300      	movs	r3, #0
 8000780:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8000782:	f107 030c 	add.w	r3, r7, #12
 8000786:	4619      	mov	r1, r3
 8000788:	480c      	ldr	r0, [pc, #48]	@ (80007bc <MX_TIM3_Init+0xa0>)
 800078a:	f002 fb3d 	bl	8002e08 <HAL_TIM_Encoder_Init>
 800078e:	4603      	mov	r3, r0
 8000790:	2b00      	cmp	r3, #0
 8000792:	d001      	beq.n	8000798 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8000794:	f000 f84c 	bl	8000830 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000798:	2300      	movs	r3, #0
 800079a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800079c:	2300      	movs	r3, #0
 800079e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80007a0:	1d3b      	adds	r3, r7, #4
 80007a2:	4619      	mov	r1, r3
 80007a4:	4805      	ldr	r0, [pc, #20]	@ (80007bc <MX_TIM3_Init+0xa0>)
 80007a6:	f002 fe6d 	bl	8003484 <HAL_TIMEx_MasterConfigSynchronization>
 80007aa:	4603      	mov	r3, r0
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d001      	beq.n	80007b4 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 80007b0:	f000 f83e 	bl	8000830 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80007b4:	bf00      	nop
 80007b6:	3730      	adds	r7, #48	@ 0x30
 80007b8:	46bd      	mov	sp, r7
 80007ba:	bd80      	pop	{r7, pc}
 80007bc:	20000548 	.word	0x20000548
 80007c0:	40000400 	.word	0x40000400

080007c4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007c4:	b480      	push	{r7}
 80007c6:	b085      	sub	sp, #20
 80007c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007ca:	2300      	movs	r3, #0
 80007cc:	60fb      	str	r3, [r7, #12]
 80007ce:	4b17      	ldr	r3, [pc, #92]	@ (800082c <MX_GPIO_Init+0x68>)
 80007d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007d2:	4a16      	ldr	r2, [pc, #88]	@ (800082c <MX_GPIO_Init+0x68>)
 80007d4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80007d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80007da:	4b14      	ldr	r3, [pc, #80]	@ (800082c <MX_GPIO_Init+0x68>)
 80007dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80007e2:	60fb      	str	r3, [r7, #12]
 80007e4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007e6:	2300      	movs	r3, #0
 80007e8:	60bb      	str	r3, [r7, #8]
 80007ea:	4b10      	ldr	r3, [pc, #64]	@ (800082c <MX_GPIO_Init+0x68>)
 80007ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ee:	4a0f      	ldr	r2, [pc, #60]	@ (800082c <MX_GPIO_Init+0x68>)
 80007f0:	f043 0301 	orr.w	r3, r3, #1
 80007f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80007f6:	4b0d      	ldr	r3, [pc, #52]	@ (800082c <MX_GPIO_Init+0x68>)
 80007f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007fa:	f003 0301 	and.w	r3, r3, #1
 80007fe:	60bb      	str	r3, [r7, #8]
 8000800:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000802:	2300      	movs	r3, #0
 8000804:	607b      	str	r3, [r7, #4]
 8000806:	4b09      	ldr	r3, [pc, #36]	@ (800082c <MX_GPIO_Init+0x68>)
 8000808:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800080a:	4a08      	ldr	r2, [pc, #32]	@ (800082c <MX_GPIO_Init+0x68>)
 800080c:	f043 0302 	orr.w	r3, r3, #2
 8000810:	6313      	str	r3, [r2, #48]	@ 0x30
 8000812:	4b06      	ldr	r3, [pc, #24]	@ (800082c <MX_GPIO_Init+0x68>)
 8000814:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000816:	f003 0302 	and.w	r3, r3, #2
 800081a:	607b      	str	r3, [r7, #4]
 800081c:	687b      	ldr	r3, [r7, #4]

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800081e:	bf00      	nop
 8000820:	3714      	adds	r7, #20
 8000822:	46bd      	mov	sp, r7
 8000824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000828:	4770      	bx	lr
 800082a:	bf00      	nop
 800082c:	40023800 	.word	0x40023800

08000830 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000830:	b480      	push	{r7}
 8000832:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000834:	b672      	cpsid	i
}
 8000836:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000838:	bf00      	nop
 800083a:	e7fd      	b.n	8000838 <Error_Handler+0x8>

0800083c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800083c:	b480      	push	{r7}
 800083e:	b083      	sub	sp, #12
 8000840:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000842:	2300      	movs	r3, #0
 8000844:	607b      	str	r3, [r7, #4]
 8000846:	4b10      	ldr	r3, [pc, #64]	@ (8000888 <HAL_MspInit+0x4c>)
 8000848:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800084a:	4a0f      	ldr	r2, [pc, #60]	@ (8000888 <HAL_MspInit+0x4c>)
 800084c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000850:	6453      	str	r3, [r2, #68]	@ 0x44
 8000852:	4b0d      	ldr	r3, [pc, #52]	@ (8000888 <HAL_MspInit+0x4c>)
 8000854:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000856:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800085a:	607b      	str	r3, [r7, #4]
 800085c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800085e:	2300      	movs	r3, #0
 8000860:	603b      	str	r3, [r7, #0]
 8000862:	4b09      	ldr	r3, [pc, #36]	@ (8000888 <HAL_MspInit+0x4c>)
 8000864:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000866:	4a08      	ldr	r2, [pc, #32]	@ (8000888 <HAL_MspInit+0x4c>)
 8000868:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800086c:	6413      	str	r3, [r2, #64]	@ 0x40
 800086e:	4b06      	ldr	r3, [pc, #24]	@ (8000888 <HAL_MspInit+0x4c>)
 8000870:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000872:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000876:	603b      	str	r3, [r7, #0]
 8000878:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800087a:	bf00      	nop
 800087c:	370c      	adds	r7, #12
 800087e:	46bd      	mov	sp, r7
 8000880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000884:	4770      	bx	lr
 8000886:	bf00      	nop
 8000888:	40023800 	.word	0x40023800

0800088c <HAL_TIM_Encoder_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_encoder: TIM_Encoder handle pointer
  * @retval None
  */
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	b08a      	sub	sp, #40	@ 0x28
 8000890:	af00      	add	r7, sp, #0
 8000892:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000894:	f107 0314 	add.w	r3, r7, #20
 8000898:	2200      	movs	r2, #0
 800089a:	601a      	str	r2, [r3, #0]
 800089c:	605a      	str	r2, [r3, #4]
 800089e:	609a      	str	r2, [r3, #8]
 80008a0:	60da      	str	r2, [r3, #12]
 80008a2:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	4a1d      	ldr	r2, [pc, #116]	@ (8000920 <HAL_TIM_Encoder_MspInit+0x94>)
 80008aa:	4293      	cmp	r3, r2
 80008ac:	d133      	bne.n	8000916 <HAL_TIM_Encoder_MspInit+0x8a>
  {
    /* USER CODE BEGIN TIM3_MspInit 0 */

    /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80008ae:	2300      	movs	r3, #0
 80008b0:	613b      	str	r3, [r7, #16]
 80008b2:	4b1c      	ldr	r3, [pc, #112]	@ (8000924 <HAL_TIM_Encoder_MspInit+0x98>)
 80008b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008b6:	4a1b      	ldr	r2, [pc, #108]	@ (8000924 <HAL_TIM_Encoder_MspInit+0x98>)
 80008b8:	f043 0302 	orr.w	r3, r3, #2
 80008bc:	6413      	str	r3, [r2, #64]	@ 0x40
 80008be:	4b19      	ldr	r3, [pc, #100]	@ (8000924 <HAL_TIM_Encoder_MspInit+0x98>)
 80008c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008c2:	f003 0302 	and.w	r3, r3, #2
 80008c6:	613b      	str	r3, [r7, #16]
 80008c8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80008ca:	2300      	movs	r3, #0
 80008cc:	60fb      	str	r3, [r7, #12]
 80008ce:	4b15      	ldr	r3, [pc, #84]	@ (8000924 <HAL_TIM_Encoder_MspInit+0x98>)
 80008d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008d2:	4a14      	ldr	r2, [pc, #80]	@ (8000924 <HAL_TIM_Encoder_MspInit+0x98>)
 80008d4:	f043 0302 	orr.w	r3, r3, #2
 80008d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80008da:	4b12      	ldr	r3, [pc, #72]	@ (8000924 <HAL_TIM_Encoder_MspInit+0x98>)
 80008dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008de:	f003 0302 	and.w	r3, r3, #2
 80008e2:	60fb      	str	r3, [r7, #12]
 80008e4:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80008e6:	2330      	movs	r3, #48	@ 0x30
 80008e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008ea:	2302      	movs	r3, #2
 80008ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ee:	2300      	movs	r3, #0
 80008f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008f2:	2300      	movs	r3, #0
 80008f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80008f6:	2302      	movs	r3, #2
 80008f8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008fa:	f107 0314 	add.w	r3, r7, #20
 80008fe:	4619      	mov	r1, r3
 8000900:	4809      	ldr	r0, [pc, #36]	@ (8000928 <HAL_TIM_Encoder_MspInit+0x9c>)
 8000902:	f000 fa3b 	bl	8000d7c <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000906:	2200      	movs	r2, #0
 8000908:	2100      	movs	r1, #0
 800090a:	201d      	movs	r0, #29
 800090c:	f000 f9ff 	bl	8000d0e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000910:	201d      	movs	r0, #29
 8000912:	f000 fa18 	bl	8000d46 <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM3_MspInit 1 */

  }

}
 8000916:	bf00      	nop
 8000918:	3728      	adds	r7, #40	@ 0x28
 800091a:	46bd      	mov	sp, r7
 800091c:	bd80      	pop	{r7, pc}
 800091e:	bf00      	nop
 8000920:	40000400 	.word	0x40000400
 8000924:	40023800 	.word	0x40023800
 8000928:	40020400 	.word	0x40020400

0800092c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800092c:	b480      	push	{r7}
 800092e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000930:	bf00      	nop
 8000932:	e7fd      	b.n	8000930 <NMI_Handler+0x4>

08000934 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000934:	b480      	push	{r7}
 8000936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000938:	bf00      	nop
 800093a:	e7fd      	b.n	8000938 <HardFault_Handler+0x4>

0800093c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800093c:	b480      	push	{r7}
 800093e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000940:	bf00      	nop
 8000942:	e7fd      	b.n	8000940 <MemManage_Handler+0x4>

08000944 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000944:	b480      	push	{r7}
 8000946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000948:	bf00      	nop
 800094a:	e7fd      	b.n	8000948 <BusFault_Handler+0x4>

0800094c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800094c:	b480      	push	{r7}
 800094e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000950:	bf00      	nop
 8000952:	e7fd      	b.n	8000950 <UsageFault_Handler+0x4>

08000954 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000954:	b480      	push	{r7}
 8000956:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000958:	bf00      	nop
 800095a:	46bd      	mov	sp, r7
 800095c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000960:	4770      	bx	lr

08000962 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000962:	b480      	push	{r7}
 8000964:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000966:	bf00      	nop
 8000968:	46bd      	mov	sp, r7
 800096a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800096e:	4770      	bx	lr

08000970 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000970:	b480      	push	{r7}
 8000972:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000974:	bf00      	nop
 8000976:	46bd      	mov	sp, r7
 8000978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097c:	4770      	bx	lr

0800097e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800097e:	b580      	push	{r7, lr}
 8000980:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000982:	f000 f8a5 	bl	8000ad0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000986:	bf00      	nop
 8000988:	bd80      	pop	{r7, pc}
	...

0800098c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000990:	4802      	ldr	r0, [pc, #8]	@ (800099c <TIM3_IRQHandler+0x10>)
 8000992:	f002 fb8d 	bl	80030b0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000996:	bf00      	nop
 8000998:	bd80      	pop	{r7, pc}
 800099a:	bf00      	nop
 800099c:	20000548 	.word	0x20000548

080009a0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80009a4:	4802      	ldr	r0, [pc, #8]	@ (80009b0 <OTG_FS_IRQHandler+0x10>)
 80009a6:	f000 fcc9 	bl	800133c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80009aa:	bf00      	nop
 80009ac:	bd80      	pop	{r7, pc}
 80009ae:	bf00      	nop
 80009b0:	20000a90 	.word	0x20000a90

080009b4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80009b4:	b480      	push	{r7}
 80009b6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80009b8:	4b06      	ldr	r3, [pc, #24]	@ (80009d4 <SystemInit+0x20>)
 80009ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80009be:	4a05      	ldr	r2, [pc, #20]	@ (80009d4 <SystemInit+0x20>)
 80009c0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80009c4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009c8:	bf00      	nop
 80009ca:	46bd      	mov	sp, r7
 80009cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d0:	4770      	bx	lr
 80009d2:	bf00      	nop
 80009d4:	e000ed00 	.word	0xe000ed00

080009d8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80009d8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000a10 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80009dc:	f7ff ffea 	bl	80009b4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80009e0:	480c      	ldr	r0, [pc, #48]	@ (8000a14 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80009e2:	490d      	ldr	r1, [pc, #52]	@ (8000a18 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80009e4:	4a0d      	ldr	r2, [pc, #52]	@ (8000a1c <LoopFillZerobss+0x1a>)
  movs r3, #0
 80009e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009e8:	e002      	b.n	80009f0 <LoopCopyDataInit>

080009ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009ee:	3304      	adds	r3, #4

080009f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009f4:	d3f9      	bcc.n	80009ea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009f6:	4a0a      	ldr	r2, [pc, #40]	@ (8000a20 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80009f8:	4c0a      	ldr	r4, [pc, #40]	@ (8000a24 <LoopFillZerobss+0x22>)
  movs r3, #0
 80009fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009fc:	e001      	b.n	8000a02 <LoopFillZerobss>

080009fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a00:	3204      	adds	r2, #4

08000a02 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a02:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a04:	d3fb      	bcc.n	80009fe <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8000a06:	f006 fcc3 	bl	8007390 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a0a:	f7ff fd85 	bl	8000518 <main>
  bx  lr    
 8000a0e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000a10:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000a14:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a18:	2000052c 	.word	0x2000052c
  ldr r2, =_sidata
 8000a1c:	080074ac 	.word	0x080074ac
  ldr r2, =_sbss
 8000a20:	2000052c 	.word	0x2000052c
  ldr r4, =_ebss
 8000a24:	20000fcc 	.word	0x20000fcc

08000a28 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a28:	e7fe      	b.n	8000a28 <ADC_IRQHandler>
	...

08000a2c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000a30:	4b0e      	ldr	r3, [pc, #56]	@ (8000a6c <HAL_Init+0x40>)
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	4a0d      	ldr	r2, [pc, #52]	@ (8000a6c <HAL_Init+0x40>)
 8000a36:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000a3a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000a3c:	4b0b      	ldr	r3, [pc, #44]	@ (8000a6c <HAL_Init+0x40>)
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	4a0a      	ldr	r2, [pc, #40]	@ (8000a6c <HAL_Init+0x40>)
 8000a42:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000a46:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a48:	4b08      	ldr	r3, [pc, #32]	@ (8000a6c <HAL_Init+0x40>)
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	4a07      	ldr	r2, [pc, #28]	@ (8000a6c <HAL_Init+0x40>)
 8000a4e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000a52:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a54:	2003      	movs	r0, #3
 8000a56:	f000 f94f 	bl	8000cf8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a5a:	200f      	movs	r0, #15
 8000a5c:	f000 f808 	bl	8000a70 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a60:	f7ff feec 	bl	800083c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a64:	2300      	movs	r3, #0
}
 8000a66:	4618      	mov	r0, r3
 8000a68:	bd80      	pop	{r7, pc}
 8000a6a:	bf00      	nop
 8000a6c:	40023c00 	.word	0x40023c00

08000a70 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b082      	sub	sp, #8
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a78:	4b12      	ldr	r3, [pc, #72]	@ (8000ac4 <HAL_InitTick+0x54>)
 8000a7a:	681a      	ldr	r2, [r3, #0]
 8000a7c:	4b12      	ldr	r3, [pc, #72]	@ (8000ac8 <HAL_InitTick+0x58>)
 8000a7e:	781b      	ldrb	r3, [r3, #0]
 8000a80:	4619      	mov	r1, r3
 8000a82:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000a86:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a8e:	4618      	mov	r0, r3
 8000a90:	f000 f967 	bl	8000d62 <HAL_SYSTICK_Config>
 8000a94:	4603      	mov	r3, r0
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d001      	beq.n	8000a9e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a9a:	2301      	movs	r3, #1
 8000a9c:	e00e      	b.n	8000abc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	2b0f      	cmp	r3, #15
 8000aa2:	d80a      	bhi.n	8000aba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	6879      	ldr	r1, [r7, #4]
 8000aa8:	f04f 30ff 	mov.w	r0, #4294967295
 8000aac:	f000 f92f 	bl	8000d0e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ab0:	4a06      	ldr	r2, [pc, #24]	@ (8000acc <HAL_InitTick+0x5c>)
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	e000      	b.n	8000abc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000aba:	2301      	movs	r3, #1
}
 8000abc:	4618      	mov	r0, r3
 8000abe:	3708      	adds	r7, #8
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	bd80      	pop	{r7, pc}
 8000ac4:	20000000 	.word	0x20000000
 8000ac8:	20000008 	.word	0x20000008
 8000acc:	20000004 	.word	0x20000004

08000ad0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ad4:	4b06      	ldr	r3, [pc, #24]	@ (8000af0 <HAL_IncTick+0x20>)
 8000ad6:	781b      	ldrb	r3, [r3, #0]
 8000ad8:	461a      	mov	r2, r3
 8000ada:	4b06      	ldr	r3, [pc, #24]	@ (8000af4 <HAL_IncTick+0x24>)
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	4413      	add	r3, r2
 8000ae0:	4a04      	ldr	r2, [pc, #16]	@ (8000af4 <HAL_IncTick+0x24>)
 8000ae2:	6013      	str	r3, [r2, #0]
}
 8000ae4:	bf00      	nop
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aec:	4770      	bx	lr
 8000aee:	bf00      	nop
 8000af0:	20000008 	.word	0x20000008
 8000af4:	200005ac 	.word	0x200005ac

08000af8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000af8:	b480      	push	{r7}
 8000afa:	af00      	add	r7, sp, #0
  return uwTick;
 8000afc:	4b03      	ldr	r3, [pc, #12]	@ (8000b0c <HAL_GetTick+0x14>)
 8000afe:	681b      	ldr	r3, [r3, #0]
}
 8000b00:	4618      	mov	r0, r3
 8000b02:	46bd      	mov	sp, r7
 8000b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b08:	4770      	bx	lr
 8000b0a:	bf00      	nop
 8000b0c:	200005ac 	.word	0x200005ac

08000b10 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b084      	sub	sp, #16
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b18:	f7ff ffee 	bl	8000af8 <HAL_GetTick>
 8000b1c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b22:	68fb      	ldr	r3, [r7, #12]
 8000b24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b28:	d005      	beq.n	8000b36 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b2a:	4b0a      	ldr	r3, [pc, #40]	@ (8000b54 <HAL_Delay+0x44>)
 8000b2c:	781b      	ldrb	r3, [r3, #0]
 8000b2e:	461a      	mov	r2, r3
 8000b30:	68fb      	ldr	r3, [r7, #12]
 8000b32:	4413      	add	r3, r2
 8000b34:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000b36:	bf00      	nop
 8000b38:	f7ff ffde 	bl	8000af8 <HAL_GetTick>
 8000b3c:	4602      	mov	r2, r0
 8000b3e:	68bb      	ldr	r3, [r7, #8]
 8000b40:	1ad3      	subs	r3, r2, r3
 8000b42:	68fa      	ldr	r2, [r7, #12]
 8000b44:	429a      	cmp	r2, r3
 8000b46:	d8f7      	bhi.n	8000b38 <HAL_Delay+0x28>
  {
  }
}
 8000b48:	bf00      	nop
 8000b4a:	bf00      	nop
 8000b4c:	3710      	adds	r7, #16
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bd80      	pop	{r7, pc}
 8000b52:	bf00      	nop
 8000b54:	20000008 	.word	0x20000008

08000b58 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	b085      	sub	sp, #20
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	f003 0307 	and.w	r3, r3, #7
 8000b66:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b68:	4b0c      	ldr	r3, [pc, #48]	@ (8000b9c <__NVIC_SetPriorityGrouping+0x44>)
 8000b6a:	68db      	ldr	r3, [r3, #12]
 8000b6c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b6e:	68ba      	ldr	r2, [r7, #8]
 8000b70:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000b74:	4013      	ands	r3, r2
 8000b76:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b78:	68fb      	ldr	r3, [r7, #12]
 8000b7a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b7c:	68bb      	ldr	r3, [r7, #8]
 8000b7e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b80:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000b84:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000b88:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b8a:	4a04      	ldr	r2, [pc, #16]	@ (8000b9c <__NVIC_SetPriorityGrouping+0x44>)
 8000b8c:	68bb      	ldr	r3, [r7, #8]
 8000b8e:	60d3      	str	r3, [r2, #12]
}
 8000b90:	bf00      	nop
 8000b92:	3714      	adds	r7, #20
 8000b94:	46bd      	mov	sp, r7
 8000b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9a:	4770      	bx	lr
 8000b9c:	e000ed00 	.word	0xe000ed00

08000ba0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ba4:	4b04      	ldr	r3, [pc, #16]	@ (8000bb8 <__NVIC_GetPriorityGrouping+0x18>)
 8000ba6:	68db      	ldr	r3, [r3, #12]
 8000ba8:	0a1b      	lsrs	r3, r3, #8
 8000baa:	f003 0307 	and.w	r3, r3, #7
}
 8000bae:	4618      	mov	r0, r3
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb6:	4770      	bx	lr
 8000bb8:	e000ed00 	.word	0xe000ed00

08000bbc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	b083      	sub	sp, #12
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	db0b      	blt.n	8000be6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000bce:	79fb      	ldrb	r3, [r7, #7]
 8000bd0:	f003 021f 	and.w	r2, r3, #31
 8000bd4:	4907      	ldr	r1, [pc, #28]	@ (8000bf4 <__NVIC_EnableIRQ+0x38>)
 8000bd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bda:	095b      	lsrs	r3, r3, #5
 8000bdc:	2001      	movs	r0, #1
 8000bde:	fa00 f202 	lsl.w	r2, r0, r2
 8000be2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000be6:	bf00      	nop
 8000be8:	370c      	adds	r7, #12
 8000bea:	46bd      	mov	sp, r7
 8000bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf0:	4770      	bx	lr
 8000bf2:	bf00      	nop
 8000bf4:	e000e100 	.word	0xe000e100

08000bf8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	b083      	sub	sp, #12
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	4603      	mov	r3, r0
 8000c00:	6039      	str	r1, [r7, #0]
 8000c02:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	db0a      	blt.n	8000c22 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c0c:	683b      	ldr	r3, [r7, #0]
 8000c0e:	b2da      	uxtb	r2, r3
 8000c10:	490c      	ldr	r1, [pc, #48]	@ (8000c44 <__NVIC_SetPriority+0x4c>)
 8000c12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c16:	0112      	lsls	r2, r2, #4
 8000c18:	b2d2      	uxtb	r2, r2
 8000c1a:	440b      	add	r3, r1
 8000c1c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c20:	e00a      	b.n	8000c38 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c22:	683b      	ldr	r3, [r7, #0]
 8000c24:	b2da      	uxtb	r2, r3
 8000c26:	4908      	ldr	r1, [pc, #32]	@ (8000c48 <__NVIC_SetPriority+0x50>)
 8000c28:	79fb      	ldrb	r3, [r7, #7]
 8000c2a:	f003 030f 	and.w	r3, r3, #15
 8000c2e:	3b04      	subs	r3, #4
 8000c30:	0112      	lsls	r2, r2, #4
 8000c32:	b2d2      	uxtb	r2, r2
 8000c34:	440b      	add	r3, r1
 8000c36:	761a      	strb	r2, [r3, #24]
}
 8000c38:	bf00      	nop
 8000c3a:	370c      	adds	r7, #12
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c42:	4770      	bx	lr
 8000c44:	e000e100 	.word	0xe000e100
 8000c48:	e000ed00 	.word	0xe000ed00

08000c4c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	b089      	sub	sp, #36	@ 0x24
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	60f8      	str	r0, [r7, #12]
 8000c54:	60b9      	str	r1, [r7, #8]
 8000c56:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c58:	68fb      	ldr	r3, [r7, #12]
 8000c5a:	f003 0307 	and.w	r3, r3, #7
 8000c5e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c60:	69fb      	ldr	r3, [r7, #28]
 8000c62:	f1c3 0307 	rsb	r3, r3, #7
 8000c66:	2b04      	cmp	r3, #4
 8000c68:	bf28      	it	cs
 8000c6a:	2304      	movcs	r3, #4
 8000c6c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c6e:	69fb      	ldr	r3, [r7, #28]
 8000c70:	3304      	adds	r3, #4
 8000c72:	2b06      	cmp	r3, #6
 8000c74:	d902      	bls.n	8000c7c <NVIC_EncodePriority+0x30>
 8000c76:	69fb      	ldr	r3, [r7, #28]
 8000c78:	3b03      	subs	r3, #3
 8000c7a:	e000      	b.n	8000c7e <NVIC_EncodePriority+0x32>
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c80:	f04f 32ff 	mov.w	r2, #4294967295
 8000c84:	69bb      	ldr	r3, [r7, #24]
 8000c86:	fa02 f303 	lsl.w	r3, r2, r3
 8000c8a:	43da      	mvns	r2, r3
 8000c8c:	68bb      	ldr	r3, [r7, #8]
 8000c8e:	401a      	ands	r2, r3
 8000c90:	697b      	ldr	r3, [r7, #20]
 8000c92:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c94:	f04f 31ff 	mov.w	r1, #4294967295
 8000c98:	697b      	ldr	r3, [r7, #20]
 8000c9a:	fa01 f303 	lsl.w	r3, r1, r3
 8000c9e:	43d9      	mvns	r1, r3
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ca4:	4313      	orrs	r3, r2
         );
}
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	3724      	adds	r7, #36	@ 0x24
 8000caa:	46bd      	mov	sp, r7
 8000cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb0:	4770      	bx	lr
	...

08000cb4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b082      	sub	sp, #8
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	3b01      	subs	r3, #1
 8000cc0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000cc4:	d301      	bcc.n	8000cca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000cc6:	2301      	movs	r3, #1
 8000cc8:	e00f      	b.n	8000cea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000cca:	4a0a      	ldr	r2, [pc, #40]	@ (8000cf4 <SysTick_Config+0x40>)
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	3b01      	subs	r3, #1
 8000cd0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000cd2:	210f      	movs	r1, #15
 8000cd4:	f04f 30ff 	mov.w	r0, #4294967295
 8000cd8:	f7ff ff8e 	bl	8000bf8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000cdc:	4b05      	ldr	r3, [pc, #20]	@ (8000cf4 <SysTick_Config+0x40>)
 8000cde:	2200      	movs	r2, #0
 8000ce0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ce2:	4b04      	ldr	r3, [pc, #16]	@ (8000cf4 <SysTick_Config+0x40>)
 8000ce4:	2207      	movs	r2, #7
 8000ce6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ce8:	2300      	movs	r3, #0
}
 8000cea:	4618      	mov	r0, r3
 8000cec:	3708      	adds	r7, #8
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bd80      	pop	{r7, pc}
 8000cf2:	bf00      	nop
 8000cf4:	e000e010 	.word	0xe000e010

08000cf8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b082      	sub	sp, #8
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d00:	6878      	ldr	r0, [r7, #4]
 8000d02:	f7ff ff29 	bl	8000b58 <__NVIC_SetPriorityGrouping>
}
 8000d06:	bf00      	nop
 8000d08:	3708      	adds	r7, #8
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	bd80      	pop	{r7, pc}

08000d0e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d0e:	b580      	push	{r7, lr}
 8000d10:	b086      	sub	sp, #24
 8000d12:	af00      	add	r7, sp, #0
 8000d14:	4603      	mov	r3, r0
 8000d16:	60b9      	str	r1, [r7, #8]
 8000d18:	607a      	str	r2, [r7, #4]
 8000d1a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d20:	f7ff ff3e 	bl	8000ba0 <__NVIC_GetPriorityGrouping>
 8000d24:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d26:	687a      	ldr	r2, [r7, #4]
 8000d28:	68b9      	ldr	r1, [r7, #8]
 8000d2a:	6978      	ldr	r0, [r7, #20]
 8000d2c:	f7ff ff8e 	bl	8000c4c <NVIC_EncodePriority>
 8000d30:	4602      	mov	r2, r0
 8000d32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d36:	4611      	mov	r1, r2
 8000d38:	4618      	mov	r0, r3
 8000d3a:	f7ff ff5d 	bl	8000bf8 <__NVIC_SetPriority>
}
 8000d3e:	bf00      	nop
 8000d40:	3718      	adds	r7, #24
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bd80      	pop	{r7, pc}

08000d46 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d46:	b580      	push	{r7, lr}
 8000d48:	b082      	sub	sp, #8
 8000d4a:	af00      	add	r7, sp, #0
 8000d4c:	4603      	mov	r3, r0
 8000d4e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d54:	4618      	mov	r0, r3
 8000d56:	f7ff ff31 	bl	8000bbc <__NVIC_EnableIRQ>
}
 8000d5a:	bf00      	nop
 8000d5c:	3708      	adds	r7, #8
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	bd80      	pop	{r7, pc}

08000d62 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d62:	b580      	push	{r7, lr}
 8000d64:	b082      	sub	sp, #8
 8000d66:	af00      	add	r7, sp, #0
 8000d68:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d6a:	6878      	ldr	r0, [r7, #4]
 8000d6c:	f7ff ffa2 	bl	8000cb4 <SysTick_Config>
 8000d70:	4603      	mov	r3, r0
}
 8000d72:	4618      	mov	r0, r3
 8000d74:	3708      	adds	r7, #8
 8000d76:	46bd      	mov	sp, r7
 8000d78:	bd80      	pop	{r7, pc}
	...

08000d7c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	b089      	sub	sp, #36	@ 0x24
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
 8000d84:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000d86:	2300      	movs	r3, #0
 8000d88:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000d92:	2300      	movs	r3, #0
 8000d94:	61fb      	str	r3, [r7, #28]
 8000d96:	e16b      	b.n	8001070 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000d98:	2201      	movs	r2, #1
 8000d9a:	69fb      	ldr	r3, [r7, #28]
 8000d9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000da0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000da2:	683b      	ldr	r3, [r7, #0]
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	697a      	ldr	r2, [r7, #20]
 8000da8:	4013      	ands	r3, r2
 8000daa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000dac:	693a      	ldr	r2, [r7, #16]
 8000dae:	697b      	ldr	r3, [r7, #20]
 8000db0:	429a      	cmp	r2, r3
 8000db2:	f040 815a 	bne.w	800106a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000db6:	683b      	ldr	r3, [r7, #0]
 8000db8:	685b      	ldr	r3, [r3, #4]
 8000dba:	f003 0303 	and.w	r3, r3, #3
 8000dbe:	2b01      	cmp	r3, #1
 8000dc0:	d005      	beq.n	8000dce <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000dc2:	683b      	ldr	r3, [r7, #0]
 8000dc4:	685b      	ldr	r3, [r3, #4]
 8000dc6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000dca:	2b02      	cmp	r3, #2
 8000dcc:	d130      	bne.n	8000e30 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	689b      	ldr	r3, [r3, #8]
 8000dd2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000dd4:	69fb      	ldr	r3, [r7, #28]
 8000dd6:	005b      	lsls	r3, r3, #1
 8000dd8:	2203      	movs	r2, #3
 8000dda:	fa02 f303 	lsl.w	r3, r2, r3
 8000dde:	43db      	mvns	r3, r3
 8000de0:	69ba      	ldr	r2, [r7, #24]
 8000de2:	4013      	ands	r3, r2
 8000de4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000de6:	683b      	ldr	r3, [r7, #0]
 8000de8:	68da      	ldr	r2, [r3, #12]
 8000dea:	69fb      	ldr	r3, [r7, #28]
 8000dec:	005b      	lsls	r3, r3, #1
 8000dee:	fa02 f303 	lsl.w	r3, r2, r3
 8000df2:	69ba      	ldr	r2, [r7, #24]
 8000df4:	4313      	orrs	r3, r2
 8000df6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	69ba      	ldr	r2, [r7, #24]
 8000dfc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	685b      	ldr	r3, [r3, #4]
 8000e02:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e04:	2201      	movs	r2, #1
 8000e06:	69fb      	ldr	r3, [r7, #28]
 8000e08:	fa02 f303 	lsl.w	r3, r2, r3
 8000e0c:	43db      	mvns	r3, r3
 8000e0e:	69ba      	ldr	r2, [r7, #24]
 8000e10:	4013      	ands	r3, r2
 8000e12:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e14:	683b      	ldr	r3, [r7, #0]
 8000e16:	685b      	ldr	r3, [r3, #4]
 8000e18:	091b      	lsrs	r3, r3, #4
 8000e1a:	f003 0201 	and.w	r2, r3, #1
 8000e1e:	69fb      	ldr	r3, [r7, #28]
 8000e20:	fa02 f303 	lsl.w	r3, r2, r3
 8000e24:	69ba      	ldr	r2, [r7, #24]
 8000e26:	4313      	orrs	r3, r2
 8000e28:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	69ba      	ldr	r2, [r7, #24]
 8000e2e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e30:	683b      	ldr	r3, [r7, #0]
 8000e32:	685b      	ldr	r3, [r3, #4]
 8000e34:	f003 0303 	and.w	r3, r3, #3
 8000e38:	2b03      	cmp	r3, #3
 8000e3a:	d017      	beq.n	8000e6c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	68db      	ldr	r3, [r3, #12]
 8000e40:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000e42:	69fb      	ldr	r3, [r7, #28]
 8000e44:	005b      	lsls	r3, r3, #1
 8000e46:	2203      	movs	r2, #3
 8000e48:	fa02 f303 	lsl.w	r3, r2, r3
 8000e4c:	43db      	mvns	r3, r3
 8000e4e:	69ba      	ldr	r2, [r7, #24]
 8000e50:	4013      	ands	r3, r2
 8000e52:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e54:	683b      	ldr	r3, [r7, #0]
 8000e56:	689a      	ldr	r2, [r3, #8]
 8000e58:	69fb      	ldr	r3, [r7, #28]
 8000e5a:	005b      	lsls	r3, r3, #1
 8000e5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e60:	69ba      	ldr	r2, [r7, #24]
 8000e62:	4313      	orrs	r3, r2
 8000e64:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	69ba      	ldr	r2, [r7, #24]
 8000e6a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e6c:	683b      	ldr	r3, [r7, #0]
 8000e6e:	685b      	ldr	r3, [r3, #4]
 8000e70:	f003 0303 	and.w	r3, r3, #3
 8000e74:	2b02      	cmp	r3, #2
 8000e76:	d123      	bne.n	8000ec0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000e78:	69fb      	ldr	r3, [r7, #28]
 8000e7a:	08da      	lsrs	r2, r3, #3
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	3208      	adds	r2, #8
 8000e80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e84:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000e86:	69fb      	ldr	r3, [r7, #28]
 8000e88:	f003 0307 	and.w	r3, r3, #7
 8000e8c:	009b      	lsls	r3, r3, #2
 8000e8e:	220f      	movs	r2, #15
 8000e90:	fa02 f303 	lsl.w	r3, r2, r3
 8000e94:	43db      	mvns	r3, r3
 8000e96:	69ba      	ldr	r2, [r7, #24]
 8000e98:	4013      	ands	r3, r2
 8000e9a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000e9c:	683b      	ldr	r3, [r7, #0]
 8000e9e:	691a      	ldr	r2, [r3, #16]
 8000ea0:	69fb      	ldr	r3, [r7, #28]
 8000ea2:	f003 0307 	and.w	r3, r3, #7
 8000ea6:	009b      	lsls	r3, r3, #2
 8000ea8:	fa02 f303 	lsl.w	r3, r2, r3
 8000eac:	69ba      	ldr	r2, [r7, #24]
 8000eae:	4313      	orrs	r3, r2
 8000eb0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000eb2:	69fb      	ldr	r3, [r7, #28]
 8000eb4:	08da      	lsrs	r2, r3, #3
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	3208      	adds	r2, #8
 8000eba:	69b9      	ldr	r1, [r7, #24]
 8000ebc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000ec6:	69fb      	ldr	r3, [r7, #28]
 8000ec8:	005b      	lsls	r3, r3, #1
 8000eca:	2203      	movs	r2, #3
 8000ecc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed0:	43db      	mvns	r3, r3
 8000ed2:	69ba      	ldr	r2, [r7, #24]
 8000ed4:	4013      	ands	r3, r2
 8000ed6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000ed8:	683b      	ldr	r3, [r7, #0]
 8000eda:	685b      	ldr	r3, [r3, #4]
 8000edc:	f003 0203 	and.w	r2, r3, #3
 8000ee0:	69fb      	ldr	r3, [r7, #28]
 8000ee2:	005b      	lsls	r3, r3, #1
 8000ee4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee8:	69ba      	ldr	r2, [r7, #24]
 8000eea:	4313      	orrs	r3, r2
 8000eec:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	69ba      	ldr	r2, [r7, #24]
 8000ef2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000ef4:	683b      	ldr	r3, [r7, #0]
 8000ef6:	685b      	ldr	r3, [r3, #4]
 8000ef8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	f000 80b4 	beq.w	800106a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f02:	2300      	movs	r3, #0
 8000f04:	60fb      	str	r3, [r7, #12]
 8000f06:	4b60      	ldr	r3, [pc, #384]	@ (8001088 <HAL_GPIO_Init+0x30c>)
 8000f08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f0a:	4a5f      	ldr	r2, [pc, #380]	@ (8001088 <HAL_GPIO_Init+0x30c>)
 8000f0c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000f10:	6453      	str	r3, [r2, #68]	@ 0x44
 8000f12:	4b5d      	ldr	r3, [pc, #372]	@ (8001088 <HAL_GPIO_Init+0x30c>)
 8000f14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f16:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000f1a:	60fb      	str	r3, [r7, #12]
 8000f1c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000f1e:	4a5b      	ldr	r2, [pc, #364]	@ (800108c <HAL_GPIO_Init+0x310>)
 8000f20:	69fb      	ldr	r3, [r7, #28]
 8000f22:	089b      	lsrs	r3, r3, #2
 8000f24:	3302      	adds	r3, #2
 8000f26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000f2c:	69fb      	ldr	r3, [r7, #28]
 8000f2e:	f003 0303 	and.w	r3, r3, #3
 8000f32:	009b      	lsls	r3, r3, #2
 8000f34:	220f      	movs	r2, #15
 8000f36:	fa02 f303 	lsl.w	r3, r2, r3
 8000f3a:	43db      	mvns	r3, r3
 8000f3c:	69ba      	ldr	r2, [r7, #24]
 8000f3e:	4013      	ands	r3, r2
 8000f40:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	4a52      	ldr	r2, [pc, #328]	@ (8001090 <HAL_GPIO_Init+0x314>)
 8000f46:	4293      	cmp	r3, r2
 8000f48:	d02b      	beq.n	8000fa2 <HAL_GPIO_Init+0x226>
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	4a51      	ldr	r2, [pc, #324]	@ (8001094 <HAL_GPIO_Init+0x318>)
 8000f4e:	4293      	cmp	r3, r2
 8000f50:	d025      	beq.n	8000f9e <HAL_GPIO_Init+0x222>
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	4a50      	ldr	r2, [pc, #320]	@ (8001098 <HAL_GPIO_Init+0x31c>)
 8000f56:	4293      	cmp	r3, r2
 8000f58:	d01f      	beq.n	8000f9a <HAL_GPIO_Init+0x21e>
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	4a4f      	ldr	r2, [pc, #316]	@ (800109c <HAL_GPIO_Init+0x320>)
 8000f5e:	4293      	cmp	r3, r2
 8000f60:	d019      	beq.n	8000f96 <HAL_GPIO_Init+0x21a>
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	4a4e      	ldr	r2, [pc, #312]	@ (80010a0 <HAL_GPIO_Init+0x324>)
 8000f66:	4293      	cmp	r3, r2
 8000f68:	d013      	beq.n	8000f92 <HAL_GPIO_Init+0x216>
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	4a4d      	ldr	r2, [pc, #308]	@ (80010a4 <HAL_GPIO_Init+0x328>)
 8000f6e:	4293      	cmp	r3, r2
 8000f70:	d00d      	beq.n	8000f8e <HAL_GPIO_Init+0x212>
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	4a4c      	ldr	r2, [pc, #304]	@ (80010a8 <HAL_GPIO_Init+0x32c>)
 8000f76:	4293      	cmp	r3, r2
 8000f78:	d007      	beq.n	8000f8a <HAL_GPIO_Init+0x20e>
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	4a4b      	ldr	r2, [pc, #300]	@ (80010ac <HAL_GPIO_Init+0x330>)
 8000f7e:	4293      	cmp	r3, r2
 8000f80:	d101      	bne.n	8000f86 <HAL_GPIO_Init+0x20a>
 8000f82:	2307      	movs	r3, #7
 8000f84:	e00e      	b.n	8000fa4 <HAL_GPIO_Init+0x228>
 8000f86:	2308      	movs	r3, #8
 8000f88:	e00c      	b.n	8000fa4 <HAL_GPIO_Init+0x228>
 8000f8a:	2306      	movs	r3, #6
 8000f8c:	e00a      	b.n	8000fa4 <HAL_GPIO_Init+0x228>
 8000f8e:	2305      	movs	r3, #5
 8000f90:	e008      	b.n	8000fa4 <HAL_GPIO_Init+0x228>
 8000f92:	2304      	movs	r3, #4
 8000f94:	e006      	b.n	8000fa4 <HAL_GPIO_Init+0x228>
 8000f96:	2303      	movs	r3, #3
 8000f98:	e004      	b.n	8000fa4 <HAL_GPIO_Init+0x228>
 8000f9a:	2302      	movs	r3, #2
 8000f9c:	e002      	b.n	8000fa4 <HAL_GPIO_Init+0x228>
 8000f9e:	2301      	movs	r3, #1
 8000fa0:	e000      	b.n	8000fa4 <HAL_GPIO_Init+0x228>
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	69fa      	ldr	r2, [r7, #28]
 8000fa6:	f002 0203 	and.w	r2, r2, #3
 8000faa:	0092      	lsls	r2, r2, #2
 8000fac:	4093      	lsls	r3, r2
 8000fae:	69ba      	ldr	r2, [r7, #24]
 8000fb0:	4313      	orrs	r3, r2
 8000fb2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000fb4:	4935      	ldr	r1, [pc, #212]	@ (800108c <HAL_GPIO_Init+0x310>)
 8000fb6:	69fb      	ldr	r3, [r7, #28]
 8000fb8:	089b      	lsrs	r3, r3, #2
 8000fba:	3302      	adds	r3, #2
 8000fbc:	69ba      	ldr	r2, [r7, #24]
 8000fbe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000fc2:	4b3b      	ldr	r3, [pc, #236]	@ (80010b0 <HAL_GPIO_Init+0x334>)
 8000fc4:	689b      	ldr	r3, [r3, #8]
 8000fc6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fc8:	693b      	ldr	r3, [r7, #16]
 8000fca:	43db      	mvns	r3, r3
 8000fcc:	69ba      	ldr	r2, [r7, #24]
 8000fce:	4013      	ands	r3, r2
 8000fd0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000fd2:	683b      	ldr	r3, [r7, #0]
 8000fd4:	685b      	ldr	r3, [r3, #4]
 8000fd6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d003      	beq.n	8000fe6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8000fde:	69ba      	ldr	r2, [r7, #24]
 8000fe0:	693b      	ldr	r3, [r7, #16]
 8000fe2:	4313      	orrs	r3, r2
 8000fe4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000fe6:	4a32      	ldr	r2, [pc, #200]	@ (80010b0 <HAL_GPIO_Init+0x334>)
 8000fe8:	69bb      	ldr	r3, [r7, #24]
 8000fea:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000fec:	4b30      	ldr	r3, [pc, #192]	@ (80010b0 <HAL_GPIO_Init+0x334>)
 8000fee:	68db      	ldr	r3, [r3, #12]
 8000ff0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ff2:	693b      	ldr	r3, [r7, #16]
 8000ff4:	43db      	mvns	r3, r3
 8000ff6:	69ba      	ldr	r2, [r7, #24]
 8000ff8:	4013      	ands	r3, r2
 8000ffa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000ffc:	683b      	ldr	r3, [r7, #0]
 8000ffe:	685b      	ldr	r3, [r3, #4]
 8001000:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001004:	2b00      	cmp	r3, #0
 8001006:	d003      	beq.n	8001010 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001008:	69ba      	ldr	r2, [r7, #24]
 800100a:	693b      	ldr	r3, [r7, #16]
 800100c:	4313      	orrs	r3, r2
 800100e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001010:	4a27      	ldr	r2, [pc, #156]	@ (80010b0 <HAL_GPIO_Init+0x334>)
 8001012:	69bb      	ldr	r3, [r7, #24]
 8001014:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001016:	4b26      	ldr	r3, [pc, #152]	@ (80010b0 <HAL_GPIO_Init+0x334>)
 8001018:	685b      	ldr	r3, [r3, #4]
 800101a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800101c:	693b      	ldr	r3, [r7, #16]
 800101e:	43db      	mvns	r3, r3
 8001020:	69ba      	ldr	r2, [r7, #24]
 8001022:	4013      	ands	r3, r2
 8001024:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001026:	683b      	ldr	r3, [r7, #0]
 8001028:	685b      	ldr	r3, [r3, #4]
 800102a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800102e:	2b00      	cmp	r3, #0
 8001030:	d003      	beq.n	800103a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001032:	69ba      	ldr	r2, [r7, #24]
 8001034:	693b      	ldr	r3, [r7, #16]
 8001036:	4313      	orrs	r3, r2
 8001038:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800103a:	4a1d      	ldr	r2, [pc, #116]	@ (80010b0 <HAL_GPIO_Init+0x334>)
 800103c:	69bb      	ldr	r3, [r7, #24]
 800103e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001040:	4b1b      	ldr	r3, [pc, #108]	@ (80010b0 <HAL_GPIO_Init+0x334>)
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001046:	693b      	ldr	r3, [r7, #16]
 8001048:	43db      	mvns	r3, r3
 800104a:	69ba      	ldr	r2, [r7, #24]
 800104c:	4013      	ands	r3, r2
 800104e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001050:	683b      	ldr	r3, [r7, #0]
 8001052:	685b      	ldr	r3, [r3, #4]
 8001054:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001058:	2b00      	cmp	r3, #0
 800105a:	d003      	beq.n	8001064 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800105c:	69ba      	ldr	r2, [r7, #24]
 800105e:	693b      	ldr	r3, [r7, #16]
 8001060:	4313      	orrs	r3, r2
 8001062:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001064:	4a12      	ldr	r2, [pc, #72]	@ (80010b0 <HAL_GPIO_Init+0x334>)
 8001066:	69bb      	ldr	r3, [r7, #24]
 8001068:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800106a:	69fb      	ldr	r3, [r7, #28]
 800106c:	3301      	adds	r3, #1
 800106e:	61fb      	str	r3, [r7, #28]
 8001070:	69fb      	ldr	r3, [r7, #28]
 8001072:	2b0f      	cmp	r3, #15
 8001074:	f67f ae90 	bls.w	8000d98 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001078:	bf00      	nop
 800107a:	bf00      	nop
 800107c:	3724      	adds	r7, #36	@ 0x24
 800107e:	46bd      	mov	sp, r7
 8001080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001084:	4770      	bx	lr
 8001086:	bf00      	nop
 8001088:	40023800 	.word	0x40023800
 800108c:	40013800 	.word	0x40013800
 8001090:	40020000 	.word	0x40020000
 8001094:	40020400 	.word	0x40020400
 8001098:	40020800 	.word	0x40020800
 800109c:	40020c00 	.word	0x40020c00
 80010a0:	40021000 	.word	0x40021000
 80010a4:	40021400 	.word	0x40021400
 80010a8:	40021800 	.word	0x40021800
 80010ac:	40021c00 	.word	0x40021c00
 80010b0:	40013c00 	.word	0x40013c00

080010b4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b086      	sub	sp, #24
 80010b8:	af02      	add	r7, sp, #8
 80010ba:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d101      	bne.n	80010c6 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80010c2:	2301      	movs	r3, #1
 80010c4:	e101      	b.n	80012ca <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 80010d2:	b2db      	uxtb	r3, r3
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d106      	bne.n	80010e6 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	2200      	movs	r2, #0
 80010dc:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80010e0:	6878      	ldr	r0, [r7, #4]
 80010e2:	f005 fe4b 	bl	8006d7c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	2203      	movs	r2, #3
 80010ea:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 80010ee:	68bb      	ldr	r3, [r7, #8]
 80010f0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80010f4:	d102      	bne.n	80010fc <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	2200      	movs	r2, #0
 80010fa:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	4618      	mov	r0, r3
 8001102:	f002 fb66 	bl	80037d2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	6818      	ldr	r0, [r3, #0]
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	7c1a      	ldrb	r2, [r3, #16]
 800110e:	f88d 2000 	strb.w	r2, [sp]
 8001112:	3304      	adds	r3, #4
 8001114:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001116:	f002 fa45 	bl	80035a4 <USB_CoreInit>
 800111a:	4603      	mov	r3, r0
 800111c:	2b00      	cmp	r3, #0
 800111e:	d005      	beq.n	800112c <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	2202      	movs	r2, #2
 8001124:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001128:	2301      	movs	r3, #1
 800112a:	e0ce      	b.n	80012ca <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	2100      	movs	r1, #0
 8001132:	4618      	mov	r0, r3
 8001134:	f002 fb5e 	bl	80037f4 <USB_SetCurrentMode>
 8001138:	4603      	mov	r3, r0
 800113a:	2b00      	cmp	r3, #0
 800113c:	d005      	beq.n	800114a <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	2202      	movs	r2, #2
 8001142:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001146:	2301      	movs	r3, #1
 8001148:	e0bf      	b.n	80012ca <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800114a:	2300      	movs	r3, #0
 800114c:	73fb      	strb	r3, [r7, #15]
 800114e:	e04a      	b.n	80011e6 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001150:	7bfa      	ldrb	r2, [r7, #15]
 8001152:	6879      	ldr	r1, [r7, #4]
 8001154:	4613      	mov	r3, r2
 8001156:	00db      	lsls	r3, r3, #3
 8001158:	4413      	add	r3, r2
 800115a:	009b      	lsls	r3, r3, #2
 800115c:	440b      	add	r3, r1
 800115e:	3315      	adds	r3, #21
 8001160:	2201      	movs	r2, #1
 8001162:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001164:	7bfa      	ldrb	r2, [r7, #15]
 8001166:	6879      	ldr	r1, [r7, #4]
 8001168:	4613      	mov	r3, r2
 800116a:	00db      	lsls	r3, r3, #3
 800116c:	4413      	add	r3, r2
 800116e:	009b      	lsls	r3, r3, #2
 8001170:	440b      	add	r3, r1
 8001172:	3314      	adds	r3, #20
 8001174:	7bfa      	ldrb	r2, [r7, #15]
 8001176:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001178:	7bfa      	ldrb	r2, [r7, #15]
 800117a:	7bfb      	ldrb	r3, [r7, #15]
 800117c:	b298      	uxth	r0, r3
 800117e:	6879      	ldr	r1, [r7, #4]
 8001180:	4613      	mov	r3, r2
 8001182:	00db      	lsls	r3, r3, #3
 8001184:	4413      	add	r3, r2
 8001186:	009b      	lsls	r3, r3, #2
 8001188:	440b      	add	r3, r1
 800118a:	332e      	adds	r3, #46	@ 0x2e
 800118c:	4602      	mov	r2, r0
 800118e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001190:	7bfa      	ldrb	r2, [r7, #15]
 8001192:	6879      	ldr	r1, [r7, #4]
 8001194:	4613      	mov	r3, r2
 8001196:	00db      	lsls	r3, r3, #3
 8001198:	4413      	add	r3, r2
 800119a:	009b      	lsls	r3, r3, #2
 800119c:	440b      	add	r3, r1
 800119e:	3318      	adds	r3, #24
 80011a0:	2200      	movs	r2, #0
 80011a2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80011a4:	7bfa      	ldrb	r2, [r7, #15]
 80011a6:	6879      	ldr	r1, [r7, #4]
 80011a8:	4613      	mov	r3, r2
 80011aa:	00db      	lsls	r3, r3, #3
 80011ac:	4413      	add	r3, r2
 80011ae:	009b      	lsls	r3, r3, #2
 80011b0:	440b      	add	r3, r1
 80011b2:	331c      	adds	r3, #28
 80011b4:	2200      	movs	r2, #0
 80011b6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80011b8:	7bfa      	ldrb	r2, [r7, #15]
 80011ba:	6879      	ldr	r1, [r7, #4]
 80011bc:	4613      	mov	r3, r2
 80011be:	00db      	lsls	r3, r3, #3
 80011c0:	4413      	add	r3, r2
 80011c2:	009b      	lsls	r3, r3, #2
 80011c4:	440b      	add	r3, r1
 80011c6:	3320      	adds	r3, #32
 80011c8:	2200      	movs	r2, #0
 80011ca:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80011cc:	7bfa      	ldrb	r2, [r7, #15]
 80011ce:	6879      	ldr	r1, [r7, #4]
 80011d0:	4613      	mov	r3, r2
 80011d2:	00db      	lsls	r3, r3, #3
 80011d4:	4413      	add	r3, r2
 80011d6:	009b      	lsls	r3, r3, #2
 80011d8:	440b      	add	r3, r1
 80011da:	3324      	adds	r3, #36	@ 0x24
 80011dc:	2200      	movs	r2, #0
 80011de:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80011e0:	7bfb      	ldrb	r3, [r7, #15]
 80011e2:	3301      	adds	r3, #1
 80011e4:	73fb      	strb	r3, [r7, #15]
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	791b      	ldrb	r3, [r3, #4]
 80011ea:	7bfa      	ldrb	r2, [r7, #15]
 80011ec:	429a      	cmp	r2, r3
 80011ee:	d3af      	bcc.n	8001150 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80011f0:	2300      	movs	r3, #0
 80011f2:	73fb      	strb	r3, [r7, #15]
 80011f4:	e044      	b.n	8001280 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80011f6:	7bfa      	ldrb	r2, [r7, #15]
 80011f8:	6879      	ldr	r1, [r7, #4]
 80011fa:	4613      	mov	r3, r2
 80011fc:	00db      	lsls	r3, r3, #3
 80011fe:	4413      	add	r3, r2
 8001200:	009b      	lsls	r3, r3, #2
 8001202:	440b      	add	r3, r1
 8001204:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8001208:	2200      	movs	r2, #0
 800120a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800120c:	7bfa      	ldrb	r2, [r7, #15]
 800120e:	6879      	ldr	r1, [r7, #4]
 8001210:	4613      	mov	r3, r2
 8001212:	00db      	lsls	r3, r3, #3
 8001214:	4413      	add	r3, r2
 8001216:	009b      	lsls	r3, r3, #2
 8001218:	440b      	add	r3, r1
 800121a:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 800121e:	7bfa      	ldrb	r2, [r7, #15]
 8001220:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001222:	7bfa      	ldrb	r2, [r7, #15]
 8001224:	6879      	ldr	r1, [r7, #4]
 8001226:	4613      	mov	r3, r2
 8001228:	00db      	lsls	r3, r3, #3
 800122a:	4413      	add	r3, r2
 800122c:	009b      	lsls	r3, r3, #2
 800122e:	440b      	add	r3, r1
 8001230:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8001234:	2200      	movs	r2, #0
 8001236:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001238:	7bfa      	ldrb	r2, [r7, #15]
 800123a:	6879      	ldr	r1, [r7, #4]
 800123c:	4613      	mov	r3, r2
 800123e:	00db      	lsls	r3, r3, #3
 8001240:	4413      	add	r3, r2
 8001242:	009b      	lsls	r3, r3, #2
 8001244:	440b      	add	r3, r1
 8001246:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 800124a:	2200      	movs	r2, #0
 800124c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800124e:	7bfa      	ldrb	r2, [r7, #15]
 8001250:	6879      	ldr	r1, [r7, #4]
 8001252:	4613      	mov	r3, r2
 8001254:	00db      	lsls	r3, r3, #3
 8001256:	4413      	add	r3, r2
 8001258:	009b      	lsls	r3, r3, #2
 800125a:	440b      	add	r3, r1
 800125c:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8001260:	2200      	movs	r2, #0
 8001262:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001264:	7bfa      	ldrb	r2, [r7, #15]
 8001266:	6879      	ldr	r1, [r7, #4]
 8001268:	4613      	mov	r3, r2
 800126a:	00db      	lsls	r3, r3, #3
 800126c:	4413      	add	r3, r2
 800126e:	009b      	lsls	r3, r3, #2
 8001270:	440b      	add	r3, r1
 8001272:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8001276:	2200      	movs	r2, #0
 8001278:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800127a:	7bfb      	ldrb	r3, [r7, #15]
 800127c:	3301      	adds	r3, #1
 800127e:	73fb      	strb	r3, [r7, #15]
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	791b      	ldrb	r3, [r3, #4]
 8001284:	7bfa      	ldrb	r2, [r7, #15]
 8001286:	429a      	cmp	r2, r3
 8001288:	d3b5      	bcc.n	80011f6 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	6818      	ldr	r0, [r3, #0]
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	7c1a      	ldrb	r2, [r3, #16]
 8001292:	f88d 2000 	strb.w	r2, [sp]
 8001296:	3304      	adds	r3, #4
 8001298:	cb0e      	ldmia	r3, {r1, r2, r3}
 800129a:	f002 faf7 	bl	800388c <USB_DevInit>
 800129e:	4603      	mov	r3, r0
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d005      	beq.n	80012b0 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	2202      	movs	r2, #2
 80012a8:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80012ac:	2301      	movs	r3, #1
 80012ae:	e00c      	b.n	80012ca <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	2200      	movs	r2, #0
 80012b4:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	2201      	movs	r2, #1
 80012ba:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	4618      	mov	r0, r3
 80012c4:	f003 fb41 	bl	800494a <USB_DevDisconnect>

  return HAL_OK;
 80012c8:	2300      	movs	r3, #0
}
 80012ca:	4618      	mov	r0, r3
 80012cc:	3710      	adds	r7, #16
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}

080012d2 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80012d2:	b580      	push	{r7, lr}
 80012d4:	b084      	sub	sp, #16
 80012d6:	af00      	add	r7, sp, #0
 80012d8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80012e6:	2b01      	cmp	r3, #1
 80012e8:	d101      	bne.n	80012ee <HAL_PCD_Start+0x1c>
 80012ea:	2302      	movs	r3, #2
 80012ec:	e022      	b.n	8001334 <HAL_PCD_Start+0x62>
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	2201      	movs	r2, #1
 80012f2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80012f6:	68fb      	ldr	r3, [r7, #12]
 80012f8:	68db      	ldr	r3, [r3, #12]
 80012fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d009      	beq.n	8001316 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8001306:	2b01      	cmp	r3, #1
 8001308:	d105      	bne.n	8001316 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800130a:	68fb      	ldr	r3, [r7, #12]
 800130c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800130e:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	4618      	mov	r0, r3
 800131c:	f002 fa48 	bl	80037b0 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	4618      	mov	r0, r3
 8001326:	f003 faef 	bl	8004908 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	2200      	movs	r2, #0
 800132e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8001332:	2300      	movs	r3, #0
}
 8001334:	4618      	mov	r0, r3
 8001336:	3710      	adds	r7, #16
 8001338:	46bd      	mov	sp, r7
 800133a:	bd80      	pop	{r7, pc}

0800133c <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800133c:	b590      	push	{r4, r7, lr}
 800133e:	b08d      	sub	sp, #52	@ 0x34
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800134a:	6a3b      	ldr	r3, [r7, #32]
 800134c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	4618      	mov	r0, r3
 8001354:	f003 fbad 	bl	8004ab2 <USB_GetMode>
 8001358:	4603      	mov	r3, r0
 800135a:	2b00      	cmp	r3, #0
 800135c:	f040 848c 	bne.w	8001c78 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	4618      	mov	r0, r3
 8001366:	f003 fb11 	bl	800498c <USB_ReadInterrupts>
 800136a:	4603      	mov	r3, r0
 800136c:	2b00      	cmp	r3, #0
 800136e:	f000 8482 	beq.w	8001c76 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8001372:	69fb      	ldr	r3, [r7, #28]
 8001374:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001378:	689b      	ldr	r3, [r3, #8]
 800137a:	0a1b      	lsrs	r3, r3, #8
 800137c:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	4618      	mov	r0, r3
 800138c:	f003 fafe 	bl	800498c <USB_ReadInterrupts>
 8001390:	4603      	mov	r3, r0
 8001392:	f003 0302 	and.w	r3, r3, #2
 8001396:	2b02      	cmp	r3, #2
 8001398:	d107      	bne.n	80013aa <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	695a      	ldr	r2, [r3, #20]
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	f002 0202 	and.w	r2, r2, #2
 80013a8:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	4618      	mov	r0, r3
 80013b0:	f003 faec 	bl	800498c <USB_ReadInterrupts>
 80013b4:	4603      	mov	r3, r0
 80013b6:	f003 0310 	and.w	r3, r3, #16
 80013ba:	2b10      	cmp	r3, #16
 80013bc:	d161      	bne.n	8001482 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	699a      	ldr	r2, [r3, #24]
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	f022 0210 	bic.w	r2, r2, #16
 80013cc:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80013ce:	6a3b      	ldr	r3, [r7, #32]
 80013d0:	6a1b      	ldr	r3, [r3, #32]
 80013d2:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80013d4:	69bb      	ldr	r3, [r7, #24]
 80013d6:	f003 020f 	and.w	r2, r3, #15
 80013da:	4613      	mov	r3, r2
 80013dc:	00db      	lsls	r3, r3, #3
 80013de:	4413      	add	r3, r2
 80013e0:	009b      	lsls	r3, r3, #2
 80013e2:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80013e6:	687a      	ldr	r2, [r7, #4]
 80013e8:	4413      	add	r3, r2
 80013ea:	3304      	adds	r3, #4
 80013ec:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80013ee:	69bb      	ldr	r3, [r7, #24]
 80013f0:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 80013f4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80013f8:	d124      	bne.n	8001444 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80013fa:	69ba      	ldr	r2, [r7, #24]
 80013fc:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8001400:	4013      	ands	r3, r2
 8001402:	2b00      	cmp	r3, #0
 8001404:	d035      	beq.n	8001472 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001406:	697b      	ldr	r3, [r7, #20]
 8001408:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800140a:	69bb      	ldr	r3, [r7, #24]
 800140c:	091b      	lsrs	r3, r3, #4
 800140e:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001410:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001414:	b29b      	uxth	r3, r3
 8001416:	461a      	mov	r2, r3
 8001418:	6a38      	ldr	r0, [r7, #32]
 800141a:	f003 f923 	bl	8004664 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800141e:	697b      	ldr	r3, [r7, #20]
 8001420:	68da      	ldr	r2, [r3, #12]
 8001422:	69bb      	ldr	r3, [r7, #24]
 8001424:	091b      	lsrs	r3, r3, #4
 8001426:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800142a:	441a      	add	r2, r3
 800142c:	697b      	ldr	r3, [r7, #20]
 800142e:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001430:	697b      	ldr	r3, [r7, #20]
 8001432:	695a      	ldr	r2, [r3, #20]
 8001434:	69bb      	ldr	r3, [r7, #24]
 8001436:	091b      	lsrs	r3, r3, #4
 8001438:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800143c:	441a      	add	r2, r3
 800143e:	697b      	ldr	r3, [r7, #20]
 8001440:	615a      	str	r2, [r3, #20]
 8001442:	e016      	b.n	8001472 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8001444:	69bb      	ldr	r3, [r7, #24]
 8001446:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 800144a:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800144e:	d110      	bne.n	8001472 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8001456:	2208      	movs	r2, #8
 8001458:	4619      	mov	r1, r3
 800145a:	6a38      	ldr	r0, [r7, #32]
 800145c:	f003 f902 	bl	8004664 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001460:	697b      	ldr	r3, [r7, #20]
 8001462:	695a      	ldr	r2, [r3, #20]
 8001464:	69bb      	ldr	r3, [r7, #24]
 8001466:	091b      	lsrs	r3, r3, #4
 8001468:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800146c:	441a      	add	r2, r3
 800146e:	697b      	ldr	r3, [r7, #20]
 8001470:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	699a      	ldr	r2, [r3, #24]
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	f042 0210 	orr.w	r2, r2, #16
 8001480:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	4618      	mov	r0, r3
 8001488:	f003 fa80 	bl	800498c <USB_ReadInterrupts>
 800148c:	4603      	mov	r3, r0
 800148e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001492:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8001496:	f040 80a7 	bne.w	80015e8 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800149a:	2300      	movs	r3, #0
 800149c:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	4618      	mov	r0, r3
 80014a4:	f003 fa85 	bl	80049b2 <USB_ReadDevAllOutEpInterrupt>
 80014a8:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 80014aa:	e099      	b.n	80015e0 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80014ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80014ae:	f003 0301 	and.w	r3, r3, #1
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	f000 808e 	beq.w	80015d4 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80014be:	b2d2      	uxtb	r2, r2
 80014c0:	4611      	mov	r1, r2
 80014c2:	4618      	mov	r0, r3
 80014c4:	f003 faa9 	bl	8004a1a <USB_ReadDevOutEPInterrupt>
 80014c8:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80014ca:	693b      	ldr	r3, [r7, #16]
 80014cc:	f003 0301 	and.w	r3, r3, #1
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d00c      	beq.n	80014ee <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80014d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014d6:	015a      	lsls	r2, r3, #5
 80014d8:	69fb      	ldr	r3, [r7, #28]
 80014da:	4413      	add	r3, r2
 80014dc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80014e0:	461a      	mov	r2, r3
 80014e2:	2301      	movs	r3, #1
 80014e4:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80014e6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80014e8:	6878      	ldr	r0, [r7, #4]
 80014ea:	f000 fe8b 	bl	8002204 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80014ee:	693b      	ldr	r3, [r7, #16]
 80014f0:	f003 0308 	and.w	r3, r3, #8
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d00c      	beq.n	8001512 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80014f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014fa:	015a      	lsls	r2, r3, #5
 80014fc:	69fb      	ldr	r3, [r7, #28]
 80014fe:	4413      	add	r3, r2
 8001500:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001504:	461a      	mov	r2, r3
 8001506:	2308      	movs	r3, #8
 8001508:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800150a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800150c:	6878      	ldr	r0, [r7, #4]
 800150e:	f000 ff61 	bl	80023d4 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001512:	693b      	ldr	r3, [r7, #16]
 8001514:	f003 0310 	and.w	r3, r3, #16
 8001518:	2b00      	cmp	r3, #0
 800151a:	d008      	beq.n	800152e <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800151c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800151e:	015a      	lsls	r2, r3, #5
 8001520:	69fb      	ldr	r3, [r7, #28]
 8001522:	4413      	add	r3, r2
 8001524:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001528:	461a      	mov	r2, r3
 800152a:	2310      	movs	r3, #16
 800152c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800152e:	693b      	ldr	r3, [r7, #16]
 8001530:	f003 0302 	and.w	r3, r3, #2
 8001534:	2b00      	cmp	r3, #0
 8001536:	d030      	beq.n	800159a <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8001538:	6a3b      	ldr	r3, [r7, #32]
 800153a:	695b      	ldr	r3, [r3, #20]
 800153c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001540:	2b80      	cmp	r3, #128	@ 0x80
 8001542:	d109      	bne.n	8001558 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8001544:	69fb      	ldr	r3, [r7, #28]
 8001546:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800154a:	685b      	ldr	r3, [r3, #4]
 800154c:	69fa      	ldr	r2, [r7, #28]
 800154e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001552:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001556:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8001558:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800155a:	4613      	mov	r3, r2
 800155c:	00db      	lsls	r3, r3, #3
 800155e:	4413      	add	r3, r2
 8001560:	009b      	lsls	r3, r3, #2
 8001562:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001566:	687a      	ldr	r2, [r7, #4]
 8001568:	4413      	add	r3, r2
 800156a:	3304      	adds	r3, #4
 800156c:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800156e:	697b      	ldr	r3, [r7, #20]
 8001570:	78db      	ldrb	r3, [r3, #3]
 8001572:	2b01      	cmp	r3, #1
 8001574:	d108      	bne.n	8001588 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8001576:	697b      	ldr	r3, [r7, #20]
 8001578:	2200      	movs	r2, #0
 800157a:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800157c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800157e:	b2db      	uxtb	r3, r3
 8001580:	4619      	mov	r1, r3
 8001582:	6878      	ldr	r0, [r7, #4]
 8001584:	f005 fd00 	bl	8006f88 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8001588:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800158a:	015a      	lsls	r2, r3, #5
 800158c:	69fb      	ldr	r3, [r7, #28]
 800158e:	4413      	add	r3, r2
 8001590:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001594:	461a      	mov	r2, r3
 8001596:	2302      	movs	r3, #2
 8001598:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800159a:	693b      	ldr	r3, [r7, #16]
 800159c:	f003 0320 	and.w	r3, r3, #32
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d008      	beq.n	80015b6 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80015a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015a6:	015a      	lsls	r2, r3, #5
 80015a8:	69fb      	ldr	r3, [r7, #28]
 80015aa:	4413      	add	r3, r2
 80015ac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80015b0:	461a      	mov	r2, r3
 80015b2:	2320      	movs	r3, #32
 80015b4:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80015b6:	693b      	ldr	r3, [r7, #16]
 80015b8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d009      	beq.n	80015d4 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80015c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015c2:	015a      	lsls	r2, r3, #5
 80015c4:	69fb      	ldr	r3, [r7, #28]
 80015c6:	4413      	add	r3, r2
 80015c8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80015cc:	461a      	mov	r2, r3
 80015ce:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80015d2:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80015d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015d6:	3301      	adds	r3, #1
 80015d8:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80015da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80015dc:	085b      	lsrs	r3, r3, #1
 80015de:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80015e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	f47f af62 	bne.w	80014ac <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	4618      	mov	r0, r3
 80015ee:	f003 f9cd 	bl	800498c <USB_ReadInterrupts>
 80015f2:	4603      	mov	r3, r0
 80015f4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80015f8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80015fc:	f040 80db 	bne.w	80017b6 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	4618      	mov	r0, r3
 8001606:	f003 f9ee 	bl	80049e6 <USB_ReadDevAllInEpInterrupt>
 800160a:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 800160c:	2300      	movs	r3, #0
 800160e:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8001610:	e0cd      	b.n	80017ae <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001612:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001614:	f003 0301 	and.w	r3, r3, #1
 8001618:	2b00      	cmp	r3, #0
 800161a:	f000 80c2 	beq.w	80017a2 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001624:	b2d2      	uxtb	r2, r2
 8001626:	4611      	mov	r1, r2
 8001628:	4618      	mov	r0, r3
 800162a:	f003 fa14 	bl	8004a56 <USB_ReadDevInEPInterrupt>
 800162e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001630:	693b      	ldr	r3, [r7, #16]
 8001632:	f003 0301 	and.w	r3, r3, #1
 8001636:	2b00      	cmp	r3, #0
 8001638:	d057      	beq.n	80016ea <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800163a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800163c:	f003 030f 	and.w	r3, r3, #15
 8001640:	2201      	movs	r2, #1
 8001642:	fa02 f303 	lsl.w	r3, r2, r3
 8001646:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001648:	69fb      	ldr	r3, [r7, #28]
 800164a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800164e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	43db      	mvns	r3, r3
 8001654:	69f9      	ldr	r1, [r7, #28]
 8001656:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800165a:	4013      	ands	r3, r2
 800165c:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800165e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001660:	015a      	lsls	r2, r3, #5
 8001662:	69fb      	ldr	r3, [r7, #28]
 8001664:	4413      	add	r3, r2
 8001666:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800166a:	461a      	mov	r2, r3
 800166c:	2301      	movs	r3, #1
 800166e:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	799b      	ldrb	r3, [r3, #6]
 8001674:	2b01      	cmp	r3, #1
 8001676:	d132      	bne.n	80016de <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8001678:	6879      	ldr	r1, [r7, #4]
 800167a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800167c:	4613      	mov	r3, r2
 800167e:	00db      	lsls	r3, r3, #3
 8001680:	4413      	add	r3, r2
 8001682:	009b      	lsls	r3, r3, #2
 8001684:	440b      	add	r3, r1
 8001686:	3320      	adds	r3, #32
 8001688:	6819      	ldr	r1, [r3, #0]
 800168a:	6878      	ldr	r0, [r7, #4]
 800168c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800168e:	4613      	mov	r3, r2
 8001690:	00db      	lsls	r3, r3, #3
 8001692:	4413      	add	r3, r2
 8001694:	009b      	lsls	r3, r3, #2
 8001696:	4403      	add	r3, r0
 8001698:	331c      	adds	r3, #28
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	4419      	add	r1, r3
 800169e:	6878      	ldr	r0, [r7, #4]
 80016a0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80016a2:	4613      	mov	r3, r2
 80016a4:	00db      	lsls	r3, r3, #3
 80016a6:	4413      	add	r3, r2
 80016a8:	009b      	lsls	r3, r3, #2
 80016aa:	4403      	add	r3, r0
 80016ac:	3320      	adds	r3, #32
 80016ae:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80016b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d113      	bne.n	80016de <HAL_PCD_IRQHandler+0x3a2>
 80016b6:	6879      	ldr	r1, [r7, #4]
 80016b8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80016ba:	4613      	mov	r3, r2
 80016bc:	00db      	lsls	r3, r3, #3
 80016be:	4413      	add	r3, r2
 80016c0:	009b      	lsls	r3, r3, #2
 80016c2:	440b      	add	r3, r1
 80016c4:	3324      	adds	r3, #36	@ 0x24
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d108      	bne.n	80016de <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	6818      	ldr	r0, [r3, #0]
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80016d6:	461a      	mov	r2, r3
 80016d8:	2101      	movs	r1, #1
 80016da:	f003 fa1b 	bl	8004b14 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80016de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016e0:	b2db      	uxtb	r3, r3
 80016e2:	4619      	mov	r1, r3
 80016e4:	6878      	ldr	r0, [r7, #4]
 80016e6:	f005 fbca 	bl	8006e7e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80016ea:	693b      	ldr	r3, [r7, #16]
 80016ec:	f003 0308 	and.w	r3, r3, #8
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d008      	beq.n	8001706 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80016f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016f6:	015a      	lsls	r2, r3, #5
 80016f8:	69fb      	ldr	r3, [r7, #28]
 80016fa:	4413      	add	r3, r2
 80016fc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001700:	461a      	mov	r2, r3
 8001702:	2308      	movs	r3, #8
 8001704:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8001706:	693b      	ldr	r3, [r7, #16]
 8001708:	f003 0310 	and.w	r3, r3, #16
 800170c:	2b00      	cmp	r3, #0
 800170e:	d008      	beq.n	8001722 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8001710:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001712:	015a      	lsls	r2, r3, #5
 8001714:	69fb      	ldr	r3, [r7, #28]
 8001716:	4413      	add	r3, r2
 8001718:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800171c:	461a      	mov	r2, r3
 800171e:	2310      	movs	r3, #16
 8001720:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8001722:	693b      	ldr	r3, [r7, #16]
 8001724:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001728:	2b00      	cmp	r3, #0
 800172a:	d008      	beq.n	800173e <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800172c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800172e:	015a      	lsls	r2, r3, #5
 8001730:	69fb      	ldr	r3, [r7, #28]
 8001732:	4413      	add	r3, r2
 8001734:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001738:	461a      	mov	r2, r3
 800173a:	2340      	movs	r3, #64	@ 0x40
 800173c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800173e:	693b      	ldr	r3, [r7, #16]
 8001740:	f003 0302 	and.w	r3, r3, #2
 8001744:	2b00      	cmp	r3, #0
 8001746:	d023      	beq.n	8001790 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8001748:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800174a:	6a38      	ldr	r0, [r7, #32]
 800174c:	f002 fa02 	bl	8003b54 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8001750:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001752:	4613      	mov	r3, r2
 8001754:	00db      	lsls	r3, r3, #3
 8001756:	4413      	add	r3, r2
 8001758:	009b      	lsls	r3, r3, #2
 800175a:	3310      	adds	r3, #16
 800175c:	687a      	ldr	r2, [r7, #4]
 800175e:	4413      	add	r3, r2
 8001760:	3304      	adds	r3, #4
 8001762:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001764:	697b      	ldr	r3, [r7, #20]
 8001766:	78db      	ldrb	r3, [r3, #3]
 8001768:	2b01      	cmp	r3, #1
 800176a:	d108      	bne.n	800177e <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800176c:	697b      	ldr	r3, [r7, #20]
 800176e:	2200      	movs	r2, #0
 8001770:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8001772:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001774:	b2db      	uxtb	r3, r3
 8001776:	4619      	mov	r1, r3
 8001778:	6878      	ldr	r0, [r7, #4]
 800177a:	f005 fc17 	bl	8006fac <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800177e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001780:	015a      	lsls	r2, r3, #5
 8001782:	69fb      	ldr	r3, [r7, #28]
 8001784:	4413      	add	r3, r2
 8001786:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800178a:	461a      	mov	r2, r3
 800178c:	2302      	movs	r3, #2
 800178e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8001790:	693b      	ldr	r3, [r7, #16]
 8001792:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001796:	2b00      	cmp	r3, #0
 8001798:	d003      	beq.n	80017a2 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800179a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800179c:	6878      	ldr	r0, [r7, #4]
 800179e:	f000 fca5 	bl	80020ec <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80017a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017a4:	3301      	adds	r3, #1
 80017a6:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80017a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80017aa:	085b      	lsrs	r3, r3, #1
 80017ac:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80017ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	f47f af2e 	bne.w	8001612 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	4618      	mov	r0, r3
 80017bc:	f003 f8e6 	bl	800498c <USB_ReadInterrupts>
 80017c0:	4603      	mov	r3, r0
 80017c2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80017c6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80017ca:	d122      	bne.n	8001812 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80017cc:	69fb      	ldr	r3, [r7, #28]
 80017ce:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80017d2:	685b      	ldr	r3, [r3, #4]
 80017d4:	69fa      	ldr	r2, [r7, #28]
 80017d6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80017da:	f023 0301 	bic.w	r3, r3, #1
 80017de:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 80017e6:	2b01      	cmp	r3, #1
 80017e8:	d108      	bne.n	80017fc <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	2200      	movs	r2, #0
 80017ee:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80017f2:	2100      	movs	r1, #0
 80017f4:	6878      	ldr	r0, [r7, #4]
 80017f6:	f000 fe8b 	bl	8002510 <HAL_PCDEx_LPM_Callback>
 80017fa:	e002      	b.n	8001802 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80017fc:	6878      	ldr	r0, [r7, #4]
 80017fe:	f005 fbb5 	bl	8006f6c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	695a      	ldr	r2, [r3, #20]
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8001810:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	4618      	mov	r0, r3
 8001818:	f003 f8b8 	bl	800498c <USB_ReadInterrupts>
 800181c:	4603      	mov	r3, r0
 800181e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001822:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001826:	d112      	bne.n	800184e <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8001828:	69fb      	ldr	r3, [r7, #28]
 800182a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800182e:	689b      	ldr	r3, [r3, #8]
 8001830:	f003 0301 	and.w	r3, r3, #1
 8001834:	2b01      	cmp	r3, #1
 8001836:	d102      	bne.n	800183e <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001838:	6878      	ldr	r0, [r7, #4]
 800183a:	f005 fb71 	bl	8006f20 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	695a      	ldr	r2, [r3, #20]
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 800184c:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	4618      	mov	r0, r3
 8001854:	f003 f89a 	bl	800498c <USB_ReadInterrupts>
 8001858:	4603      	mov	r3, r0
 800185a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800185e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001862:	f040 80b7 	bne.w	80019d4 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001866:	69fb      	ldr	r3, [r7, #28]
 8001868:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800186c:	685b      	ldr	r3, [r3, #4]
 800186e:	69fa      	ldr	r2, [r7, #28]
 8001870:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001874:	f023 0301 	bic.w	r3, r3, #1
 8001878:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	2110      	movs	r1, #16
 8001880:	4618      	mov	r0, r3
 8001882:	f002 f967 	bl	8003b54 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001886:	2300      	movs	r3, #0
 8001888:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800188a:	e046      	b.n	800191a <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800188c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800188e:	015a      	lsls	r2, r3, #5
 8001890:	69fb      	ldr	r3, [r7, #28]
 8001892:	4413      	add	r3, r2
 8001894:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001898:	461a      	mov	r2, r3
 800189a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800189e:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80018a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80018a2:	015a      	lsls	r2, r3, #5
 80018a4:	69fb      	ldr	r3, [r7, #28]
 80018a6:	4413      	add	r3, r2
 80018a8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80018b0:	0151      	lsls	r1, r2, #5
 80018b2:	69fa      	ldr	r2, [r7, #28]
 80018b4:	440a      	add	r2, r1
 80018b6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80018ba:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80018be:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80018c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80018c2:	015a      	lsls	r2, r3, #5
 80018c4:	69fb      	ldr	r3, [r7, #28]
 80018c6:	4413      	add	r3, r2
 80018c8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80018cc:	461a      	mov	r2, r3
 80018ce:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80018d2:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80018d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80018d6:	015a      	lsls	r2, r3, #5
 80018d8:	69fb      	ldr	r3, [r7, #28]
 80018da:	4413      	add	r3, r2
 80018dc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80018e4:	0151      	lsls	r1, r2, #5
 80018e6:	69fa      	ldr	r2, [r7, #28]
 80018e8:	440a      	add	r2, r1
 80018ea:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80018ee:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80018f2:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80018f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80018f6:	015a      	lsls	r2, r3, #5
 80018f8:	69fb      	ldr	r3, [r7, #28]
 80018fa:	4413      	add	r3, r2
 80018fc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001904:	0151      	lsls	r1, r2, #5
 8001906:	69fa      	ldr	r2, [r7, #28]
 8001908:	440a      	add	r2, r1
 800190a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800190e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8001912:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001914:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001916:	3301      	adds	r3, #1
 8001918:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	791b      	ldrb	r3, [r3, #4]
 800191e:	461a      	mov	r2, r3
 8001920:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001922:	4293      	cmp	r3, r2
 8001924:	d3b2      	bcc.n	800188c <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8001926:	69fb      	ldr	r3, [r7, #28]
 8001928:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800192c:	69db      	ldr	r3, [r3, #28]
 800192e:	69fa      	ldr	r2, [r7, #28]
 8001930:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001934:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8001938:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	7bdb      	ldrb	r3, [r3, #15]
 800193e:	2b00      	cmp	r3, #0
 8001940:	d016      	beq.n	8001970 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8001942:	69fb      	ldr	r3, [r7, #28]
 8001944:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001948:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800194c:	69fa      	ldr	r2, [r7, #28]
 800194e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001952:	f043 030b 	orr.w	r3, r3, #11
 8001956:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800195a:	69fb      	ldr	r3, [r7, #28]
 800195c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001960:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001962:	69fa      	ldr	r2, [r7, #28]
 8001964:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001968:	f043 030b 	orr.w	r3, r3, #11
 800196c:	6453      	str	r3, [r2, #68]	@ 0x44
 800196e:	e015      	b.n	800199c <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8001970:	69fb      	ldr	r3, [r7, #28]
 8001972:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001976:	695b      	ldr	r3, [r3, #20]
 8001978:	69fa      	ldr	r2, [r7, #28]
 800197a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800197e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001982:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8001986:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8001988:	69fb      	ldr	r3, [r7, #28]
 800198a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800198e:	691b      	ldr	r3, [r3, #16]
 8001990:	69fa      	ldr	r2, [r7, #28]
 8001992:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001996:	f043 030b 	orr.w	r3, r3, #11
 800199a:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800199c:	69fb      	ldr	r3, [r7, #28]
 800199e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	69fa      	ldr	r2, [r7, #28]
 80019a6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80019aa:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80019ae:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	6818      	ldr	r0, [r3, #0]
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80019be:	461a      	mov	r2, r3
 80019c0:	f003 f8a8 	bl	8004b14 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	695a      	ldr	r2, [r3, #20]
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 80019d2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	4618      	mov	r0, r3
 80019da:	f002 ffd7 	bl	800498c <USB_ReadInterrupts>
 80019de:	4603      	mov	r3, r0
 80019e0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80019e4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80019e8:	d123      	bne.n	8001a32 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	4618      	mov	r0, r3
 80019f0:	f003 f86d 	bl	8004ace <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	4618      	mov	r0, r3
 80019fa:	f002 f924 	bl	8003c46 <USB_GetDevSpeed>
 80019fe:	4603      	mov	r3, r0
 8001a00:	461a      	mov	r2, r3
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681c      	ldr	r4, [r3, #0]
 8001a0a:	f001 f9f1 	bl	8002df0 <HAL_RCC_GetHCLKFreq>
 8001a0e:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001a14:	461a      	mov	r2, r3
 8001a16:	4620      	mov	r0, r4
 8001a18:	f001 fe28 	bl	800366c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8001a1c:	6878      	ldr	r0, [r7, #4]
 8001a1e:	f005 fa56 	bl	8006ece <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	695a      	ldr	r2, [r3, #20]
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8001a30:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	4618      	mov	r0, r3
 8001a38:	f002 ffa8 	bl	800498c <USB_ReadInterrupts>
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	f003 0308 	and.w	r3, r3, #8
 8001a42:	2b08      	cmp	r3, #8
 8001a44:	d10a      	bne.n	8001a5c <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8001a46:	6878      	ldr	r0, [r7, #4]
 8001a48:	f005 fa33 	bl	8006eb2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	695a      	ldr	r2, [r3, #20]
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f002 0208 	and.w	r2, r2, #8
 8001a5a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	4618      	mov	r0, r3
 8001a62:	f002 ff93 	bl	800498c <USB_ReadInterrupts>
 8001a66:	4603      	mov	r3, r0
 8001a68:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001a6c:	2b80      	cmp	r3, #128	@ 0x80
 8001a6e:	d123      	bne.n	8001ab8 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8001a70:	6a3b      	ldr	r3, [r7, #32]
 8001a72:	699b      	ldr	r3, [r3, #24]
 8001a74:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8001a78:	6a3b      	ldr	r3, [r7, #32]
 8001a7a:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001a7c:	2301      	movs	r3, #1
 8001a7e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001a80:	e014      	b.n	8001aac <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8001a82:	6879      	ldr	r1, [r7, #4]
 8001a84:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001a86:	4613      	mov	r3, r2
 8001a88:	00db      	lsls	r3, r3, #3
 8001a8a:	4413      	add	r3, r2
 8001a8c:	009b      	lsls	r3, r3, #2
 8001a8e:	440b      	add	r3, r1
 8001a90:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8001a94:	781b      	ldrb	r3, [r3, #0]
 8001a96:	2b01      	cmp	r3, #1
 8001a98:	d105      	bne.n	8001aa6 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8001a9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a9c:	b2db      	uxtb	r3, r3
 8001a9e:	4619      	mov	r1, r3
 8001aa0:	6878      	ldr	r0, [r7, #4]
 8001aa2:	f000 faf2 	bl	800208a <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001aa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001aa8:	3301      	adds	r3, #1
 8001aaa:	627b      	str	r3, [r7, #36]	@ 0x24
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	791b      	ldrb	r3, [r3, #4]
 8001ab0:	461a      	mov	r2, r3
 8001ab2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ab4:	4293      	cmp	r3, r2
 8001ab6:	d3e4      	bcc.n	8001a82 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	4618      	mov	r0, r3
 8001abe:	f002 ff65 	bl	800498c <USB_ReadInterrupts>
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001ac8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8001acc:	d13c      	bne.n	8001b48 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001ace:	2301      	movs	r3, #1
 8001ad0:	627b      	str	r3, [r7, #36]	@ 0x24
 8001ad2:	e02b      	b.n	8001b2c <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8001ad4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ad6:	015a      	lsls	r2, r3, #5
 8001ad8:	69fb      	ldr	r3, [r7, #28]
 8001ada:	4413      	add	r3, r2
 8001adc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001ae4:	6879      	ldr	r1, [r7, #4]
 8001ae6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001ae8:	4613      	mov	r3, r2
 8001aea:	00db      	lsls	r3, r3, #3
 8001aec:	4413      	add	r3, r2
 8001aee:	009b      	lsls	r3, r3, #2
 8001af0:	440b      	add	r3, r1
 8001af2:	3318      	adds	r3, #24
 8001af4:	781b      	ldrb	r3, [r3, #0]
 8001af6:	2b01      	cmp	r3, #1
 8001af8:	d115      	bne.n	8001b26 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8001afa:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	da12      	bge.n	8001b26 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8001b00:	6879      	ldr	r1, [r7, #4]
 8001b02:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001b04:	4613      	mov	r3, r2
 8001b06:	00db      	lsls	r3, r3, #3
 8001b08:	4413      	add	r3, r2
 8001b0a:	009b      	lsls	r3, r3, #2
 8001b0c:	440b      	add	r3, r1
 8001b0e:	3317      	adds	r3, #23
 8001b10:	2201      	movs	r2, #1
 8001b12:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8001b14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b16:	b2db      	uxtb	r3, r3
 8001b18:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001b1c:	b2db      	uxtb	r3, r3
 8001b1e:	4619      	mov	r1, r3
 8001b20:	6878      	ldr	r0, [r7, #4]
 8001b22:	f000 fab2 	bl	800208a <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001b26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b28:	3301      	adds	r3, #1
 8001b2a:	627b      	str	r3, [r7, #36]	@ 0x24
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	791b      	ldrb	r3, [r3, #4]
 8001b30:	461a      	mov	r2, r3
 8001b32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b34:	4293      	cmp	r3, r2
 8001b36:	d3cd      	bcc.n	8001ad4 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	695a      	ldr	r2, [r3, #20]
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8001b46:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	f002 ff1d 	bl	800498c <USB_ReadInterrupts>
 8001b52:	4603      	mov	r3, r0
 8001b54:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001b58:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8001b5c:	d156      	bne.n	8001c0c <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001b5e:	2301      	movs	r3, #1
 8001b60:	627b      	str	r3, [r7, #36]	@ 0x24
 8001b62:	e045      	b.n	8001bf0 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8001b64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b66:	015a      	lsls	r2, r3, #5
 8001b68:	69fb      	ldr	r3, [r7, #28]
 8001b6a:	4413      	add	r3, r2
 8001b6c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001b74:	6879      	ldr	r1, [r7, #4]
 8001b76:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001b78:	4613      	mov	r3, r2
 8001b7a:	00db      	lsls	r3, r3, #3
 8001b7c:	4413      	add	r3, r2
 8001b7e:	009b      	lsls	r3, r3, #2
 8001b80:	440b      	add	r3, r1
 8001b82:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8001b86:	781b      	ldrb	r3, [r3, #0]
 8001b88:	2b01      	cmp	r3, #1
 8001b8a:	d12e      	bne.n	8001bea <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001b8c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	da2b      	bge.n	8001bea <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8001b92:	69bb      	ldr	r3, [r7, #24]
 8001b94:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8001b9e:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001ba2:	429a      	cmp	r2, r3
 8001ba4:	d121      	bne.n	8001bea <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8001ba6:	6879      	ldr	r1, [r7, #4]
 8001ba8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001baa:	4613      	mov	r3, r2
 8001bac:	00db      	lsls	r3, r3, #3
 8001bae:	4413      	add	r3, r2
 8001bb0:	009b      	lsls	r3, r3, #2
 8001bb2:	440b      	add	r3, r1
 8001bb4:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8001bb8:	2201      	movs	r2, #1
 8001bba:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8001bbc:	6a3b      	ldr	r3, [r7, #32]
 8001bbe:	699b      	ldr	r3, [r3, #24]
 8001bc0:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8001bc4:	6a3b      	ldr	r3, [r7, #32]
 8001bc6:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8001bc8:	6a3b      	ldr	r3, [r7, #32]
 8001bca:	695b      	ldr	r3, [r3, #20]
 8001bcc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d10a      	bne.n	8001bea <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8001bd4:	69fb      	ldr	r3, [r7, #28]
 8001bd6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001bda:	685b      	ldr	r3, [r3, #4]
 8001bdc:	69fa      	ldr	r2, [r7, #28]
 8001bde:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001be2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001be6:	6053      	str	r3, [r2, #4]
            break;
 8001be8:	e008      	b.n	8001bfc <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001bea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bec:	3301      	adds	r3, #1
 8001bee:	627b      	str	r3, [r7, #36]	@ 0x24
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	791b      	ldrb	r3, [r3, #4]
 8001bf4:	461a      	mov	r2, r3
 8001bf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bf8:	4293      	cmp	r3, r2
 8001bfa:	d3b3      	bcc.n	8001b64 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	695a      	ldr	r2, [r3, #20]
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8001c0a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	4618      	mov	r0, r3
 8001c12:	f002 febb 	bl	800498c <USB_ReadInterrupts>
 8001c16:	4603      	mov	r3, r0
 8001c18:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8001c1c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001c20:	d10a      	bne.n	8001c38 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8001c22:	6878      	ldr	r0, [r7, #4]
 8001c24:	f005 f9d4 	bl	8006fd0 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	695a      	ldr	r2, [r3, #20]
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8001c36:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	f002 fea5 	bl	800498c <USB_ReadInterrupts>
 8001c42:	4603      	mov	r3, r0
 8001c44:	f003 0304 	and.w	r3, r3, #4
 8001c48:	2b04      	cmp	r3, #4
 8001c4a:	d115      	bne.n	8001c78 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	685b      	ldr	r3, [r3, #4]
 8001c52:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8001c54:	69bb      	ldr	r3, [r7, #24]
 8001c56:	f003 0304 	and.w	r3, r3, #4
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d002      	beq.n	8001c64 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8001c5e:	6878      	ldr	r0, [r7, #4]
 8001c60:	f005 f9c4 	bl	8006fec <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	6859      	ldr	r1, [r3, #4]
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	69ba      	ldr	r2, [r7, #24]
 8001c70:	430a      	orrs	r2, r1
 8001c72:	605a      	str	r2, [r3, #4]
 8001c74:	e000      	b.n	8001c78 <HAL_PCD_IRQHandler+0x93c>
      return;
 8001c76:	bf00      	nop
    }
  }
}
 8001c78:	3734      	adds	r7, #52	@ 0x34
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	bd90      	pop	{r4, r7, pc}

08001c7e <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001c7e:	b580      	push	{r7, lr}
 8001c80:	b082      	sub	sp, #8
 8001c82:	af00      	add	r7, sp, #0
 8001c84:	6078      	str	r0, [r7, #4]
 8001c86:	460b      	mov	r3, r1
 8001c88:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001c90:	2b01      	cmp	r3, #1
 8001c92:	d101      	bne.n	8001c98 <HAL_PCD_SetAddress+0x1a>
 8001c94:	2302      	movs	r3, #2
 8001c96:	e012      	b.n	8001cbe <HAL_PCD_SetAddress+0x40>
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	2201      	movs	r2, #1
 8001c9c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	78fa      	ldrb	r2, [r7, #3]
 8001ca4:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	78fa      	ldrb	r2, [r7, #3]
 8001cac:	4611      	mov	r1, r2
 8001cae:	4618      	mov	r0, r3
 8001cb0:	f002 fe04 	bl	80048bc <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8001cbc:	2300      	movs	r3, #0
}
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	3708      	adds	r7, #8
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	bd80      	pop	{r7, pc}

08001cc6 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001cc6:	b580      	push	{r7, lr}
 8001cc8:	b084      	sub	sp, #16
 8001cca:	af00      	add	r7, sp, #0
 8001ccc:	6078      	str	r0, [r7, #4]
 8001cce:	4608      	mov	r0, r1
 8001cd0:	4611      	mov	r1, r2
 8001cd2:	461a      	mov	r2, r3
 8001cd4:	4603      	mov	r3, r0
 8001cd6:	70fb      	strb	r3, [r7, #3]
 8001cd8:	460b      	mov	r3, r1
 8001cda:	803b      	strh	r3, [r7, #0]
 8001cdc:	4613      	mov	r3, r2
 8001cde:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001ce4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	da0f      	bge.n	8001d0c <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001cec:	78fb      	ldrb	r3, [r7, #3]
 8001cee:	f003 020f 	and.w	r2, r3, #15
 8001cf2:	4613      	mov	r3, r2
 8001cf4:	00db      	lsls	r3, r3, #3
 8001cf6:	4413      	add	r3, r2
 8001cf8:	009b      	lsls	r3, r3, #2
 8001cfa:	3310      	adds	r3, #16
 8001cfc:	687a      	ldr	r2, [r7, #4]
 8001cfe:	4413      	add	r3, r2
 8001d00:	3304      	adds	r3, #4
 8001d02:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	2201      	movs	r2, #1
 8001d08:	705a      	strb	r2, [r3, #1]
 8001d0a:	e00f      	b.n	8001d2c <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001d0c:	78fb      	ldrb	r3, [r7, #3]
 8001d0e:	f003 020f 	and.w	r2, r3, #15
 8001d12:	4613      	mov	r3, r2
 8001d14:	00db      	lsls	r3, r3, #3
 8001d16:	4413      	add	r3, r2
 8001d18:	009b      	lsls	r3, r3, #2
 8001d1a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001d1e:	687a      	ldr	r2, [r7, #4]
 8001d20:	4413      	add	r3, r2
 8001d22:	3304      	adds	r3, #4
 8001d24:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	2200      	movs	r2, #0
 8001d2a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001d2c:	78fb      	ldrb	r3, [r7, #3]
 8001d2e:	f003 030f 	and.w	r3, r3, #15
 8001d32:	b2da      	uxtb	r2, r3
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8001d38:	883b      	ldrh	r3, [r7, #0]
 8001d3a:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	78ba      	ldrb	r2, [r7, #2]
 8001d46:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	785b      	ldrb	r3, [r3, #1]
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d004      	beq.n	8001d5a <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	781b      	ldrb	r3, [r3, #0]
 8001d54:	461a      	mov	r2, r3
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001d5a:	78bb      	ldrb	r3, [r7, #2]
 8001d5c:	2b02      	cmp	r3, #2
 8001d5e:	d102      	bne.n	8001d66 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	2200      	movs	r2, #0
 8001d64:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001d6c:	2b01      	cmp	r3, #1
 8001d6e:	d101      	bne.n	8001d74 <HAL_PCD_EP_Open+0xae>
 8001d70:	2302      	movs	r3, #2
 8001d72:	e00e      	b.n	8001d92 <HAL_PCD_EP_Open+0xcc>
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	2201      	movs	r2, #1
 8001d78:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	68f9      	ldr	r1, [r7, #12]
 8001d82:	4618      	mov	r0, r3
 8001d84:	f001 ff84 	bl	8003c90 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8001d90:	7afb      	ldrb	r3, [r7, #11]
}
 8001d92:	4618      	mov	r0, r3
 8001d94:	3710      	adds	r7, #16
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bd80      	pop	{r7, pc}

08001d9a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001d9a:	b580      	push	{r7, lr}
 8001d9c:	b084      	sub	sp, #16
 8001d9e:	af00      	add	r7, sp, #0
 8001da0:	6078      	str	r0, [r7, #4]
 8001da2:	460b      	mov	r3, r1
 8001da4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001da6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	da0f      	bge.n	8001dce <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001dae:	78fb      	ldrb	r3, [r7, #3]
 8001db0:	f003 020f 	and.w	r2, r3, #15
 8001db4:	4613      	mov	r3, r2
 8001db6:	00db      	lsls	r3, r3, #3
 8001db8:	4413      	add	r3, r2
 8001dba:	009b      	lsls	r3, r3, #2
 8001dbc:	3310      	adds	r3, #16
 8001dbe:	687a      	ldr	r2, [r7, #4]
 8001dc0:	4413      	add	r3, r2
 8001dc2:	3304      	adds	r3, #4
 8001dc4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	2201      	movs	r2, #1
 8001dca:	705a      	strb	r2, [r3, #1]
 8001dcc:	e00f      	b.n	8001dee <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001dce:	78fb      	ldrb	r3, [r7, #3]
 8001dd0:	f003 020f 	and.w	r2, r3, #15
 8001dd4:	4613      	mov	r3, r2
 8001dd6:	00db      	lsls	r3, r3, #3
 8001dd8:	4413      	add	r3, r2
 8001dda:	009b      	lsls	r3, r3, #2
 8001ddc:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001de0:	687a      	ldr	r2, [r7, #4]
 8001de2:	4413      	add	r3, r2
 8001de4:	3304      	adds	r3, #4
 8001de6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	2200      	movs	r2, #0
 8001dec:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8001dee:	78fb      	ldrb	r3, [r7, #3]
 8001df0:	f003 030f 	and.w	r3, r3, #15
 8001df4:	b2da      	uxtb	r2, r3
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001e00:	2b01      	cmp	r3, #1
 8001e02:	d101      	bne.n	8001e08 <HAL_PCD_EP_Close+0x6e>
 8001e04:	2302      	movs	r3, #2
 8001e06:	e00e      	b.n	8001e26 <HAL_PCD_EP_Close+0x8c>
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	2201      	movs	r2, #1
 8001e0c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	68f9      	ldr	r1, [r7, #12]
 8001e16:	4618      	mov	r0, r3
 8001e18:	f001 ffc2 	bl	8003da0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	2200      	movs	r2, #0
 8001e20:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8001e24:	2300      	movs	r3, #0
}
 8001e26:	4618      	mov	r0, r3
 8001e28:	3710      	adds	r7, #16
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	bd80      	pop	{r7, pc}

08001e2e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001e2e:	b580      	push	{r7, lr}
 8001e30:	b086      	sub	sp, #24
 8001e32:	af00      	add	r7, sp, #0
 8001e34:	60f8      	str	r0, [r7, #12]
 8001e36:	607a      	str	r2, [r7, #4]
 8001e38:	603b      	str	r3, [r7, #0]
 8001e3a:	460b      	mov	r3, r1
 8001e3c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001e3e:	7afb      	ldrb	r3, [r7, #11]
 8001e40:	f003 020f 	and.w	r2, r3, #15
 8001e44:	4613      	mov	r3, r2
 8001e46:	00db      	lsls	r3, r3, #3
 8001e48:	4413      	add	r3, r2
 8001e4a:	009b      	lsls	r3, r3, #2
 8001e4c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001e50:	68fa      	ldr	r2, [r7, #12]
 8001e52:	4413      	add	r3, r2
 8001e54:	3304      	adds	r3, #4
 8001e56:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001e58:	697b      	ldr	r3, [r7, #20]
 8001e5a:	687a      	ldr	r2, [r7, #4]
 8001e5c:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001e5e:	697b      	ldr	r3, [r7, #20]
 8001e60:	683a      	ldr	r2, [r7, #0]
 8001e62:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8001e64:	697b      	ldr	r3, [r7, #20]
 8001e66:	2200      	movs	r2, #0
 8001e68:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8001e6a:	697b      	ldr	r3, [r7, #20]
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001e70:	7afb      	ldrb	r3, [r7, #11]
 8001e72:	f003 030f 	and.w	r3, r3, #15
 8001e76:	b2da      	uxtb	r2, r3
 8001e78:	697b      	ldr	r3, [r7, #20]
 8001e7a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	799b      	ldrb	r3, [r3, #6]
 8001e80:	2b01      	cmp	r3, #1
 8001e82:	d102      	bne.n	8001e8a <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001e84:	687a      	ldr	r2, [r7, #4]
 8001e86:	697b      	ldr	r3, [r7, #20]
 8001e88:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	6818      	ldr	r0, [r3, #0]
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	799b      	ldrb	r3, [r3, #6]
 8001e92:	461a      	mov	r2, r3
 8001e94:	6979      	ldr	r1, [r7, #20]
 8001e96:	f002 f85f 	bl	8003f58 <USB_EPStartXfer>

  return HAL_OK;
 8001e9a:	2300      	movs	r3, #0
}
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	3718      	adds	r7, #24
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	bd80      	pop	{r7, pc}

08001ea4 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b086      	sub	sp, #24
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	60f8      	str	r0, [r7, #12]
 8001eac:	607a      	str	r2, [r7, #4]
 8001eae:	603b      	str	r3, [r7, #0]
 8001eb0:	460b      	mov	r3, r1
 8001eb2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001eb4:	7afb      	ldrb	r3, [r7, #11]
 8001eb6:	f003 020f 	and.w	r2, r3, #15
 8001eba:	4613      	mov	r3, r2
 8001ebc:	00db      	lsls	r3, r3, #3
 8001ebe:	4413      	add	r3, r2
 8001ec0:	009b      	lsls	r3, r3, #2
 8001ec2:	3310      	adds	r3, #16
 8001ec4:	68fa      	ldr	r2, [r7, #12]
 8001ec6:	4413      	add	r3, r2
 8001ec8:	3304      	adds	r3, #4
 8001eca:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001ecc:	697b      	ldr	r3, [r7, #20]
 8001ece:	687a      	ldr	r2, [r7, #4]
 8001ed0:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001ed2:	697b      	ldr	r3, [r7, #20]
 8001ed4:	683a      	ldr	r2, [r7, #0]
 8001ed6:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8001ed8:	697b      	ldr	r3, [r7, #20]
 8001eda:	2200      	movs	r2, #0
 8001edc:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8001ede:	697b      	ldr	r3, [r7, #20]
 8001ee0:	2201      	movs	r2, #1
 8001ee2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001ee4:	7afb      	ldrb	r3, [r7, #11]
 8001ee6:	f003 030f 	and.w	r3, r3, #15
 8001eea:	b2da      	uxtb	r2, r3
 8001eec:	697b      	ldr	r3, [r7, #20]
 8001eee:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	799b      	ldrb	r3, [r3, #6]
 8001ef4:	2b01      	cmp	r3, #1
 8001ef6:	d102      	bne.n	8001efe <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001ef8:	687a      	ldr	r2, [r7, #4]
 8001efa:	697b      	ldr	r3, [r7, #20]
 8001efc:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	6818      	ldr	r0, [r3, #0]
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	799b      	ldrb	r3, [r3, #6]
 8001f06:	461a      	mov	r2, r3
 8001f08:	6979      	ldr	r1, [r7, #20]
 8001f0a:	f002 f825 	bl	8003f58 <USB_EPStartXfer>

  return HAL_OK;
 8001f0e:	2300      	movs	r3, #0
}
 8001f10:	4618      	mov	r0, r3
 8001f12:	3718      	adds	r7, #24
 8001f14:	46bd      	mov	sp, r7
 8001f16:	bd80      	pop	{r7, pc}

08001f18 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b084      	sub	sp, #16
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
 8001f20:	460b      	mov	r3, r1
 8001f22:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001f24:	78fb      	ldrb	r3, [r7, #3]
 8001f26:	f003 030f 	and.w	r3, r3, #15
 8001f2a:	687a      	ldr	r2, [r7, #4]
 8001f2c:	7912      	ldrb	r2, [r2, #4]
 8001f2e:	4293      	cmp	r3, r2
 8001f30:	d901      	bls.n	8001f36 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001f32:	2301      	movs	r3, #1
 8001f34:	e04f      	b.n	8001fd6 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001f36:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	da0f      	bge.n	8001f5e <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001f3e:	78fb      	ldrb	r3, [r7, #3]
 8001f40:	f003 020f 	and.w	r2, r3, #15
 8001f44:	4613      	mov	r3, r2
 8001f46:	00db      	lsls	r3, r3, #3
 8001f48:	4413      	add	r3, r2
 8001f4a:	009b      	lsls	r3, r3, #2
 8001f4c:	3310      	adds	r3, #16
 8001f4e:	687a      	ldr	r2, [r7, #4]
 8001f50:	4413      	add	r3, r2
 8001f52:	3304      	adds	r3, #4
 8001f54:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	2201      	movs	r2, #1
 8001f5a:	705a      	strb	r2, [r3, #1]
 8001f5c:	e00d      	b.n	8001f7a <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001f5e:	78fa      	ldrb	r2, [r7, #3]
 8001f60:	4613      	mov	r3, r2
 8001f62:	00db      	lsls	r3, r3, #3
 8001f64:	4413      	add	r3, r2
 8001f66:	009b      	lsls	r3, r3, #2
 8001f68:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001f6c:	687a      	ldr	r2, [r7, #4]
 8001f6e:	4413      	add	r3, r2
 8001f70:	3304      	adds	r3, #4
 8001f72:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	2200      	movs	r2, #0
 8001f78:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	2201      	movs	r2, #1
 8001f7e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001f80:	78fb      	ldrb	r3, [r7, #3]
 8001f82:	f003 030f 	and.w	r3, r3, #15
 8001f86:	b2da      	uxtb	r2, r3
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001f92:	2b01      	cmp	r3, #1
 8001f94:	d101      	bne.n	8001f9a <HAL_PCD_EP_SetStall+0x82>
 8001f96:	2302      	movs	r3, #2
 8001f98:	e01d      	b.n	8001fd6 <HAL_PCD_EP_SetStall+0xbe>
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	2201      	movs	r2, #1
 8001f9e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	68f9      	ldr	r1, [r7, #12]
 8001fa8:	4618      	mov	r0, r3
 8001faa:	f002 fbb3 	bl	8004714 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001fae:	78fb      	ldrb	r3, [r7, #3]
 8001fb0:	f003 030f 	and.w	r3, r3, #15
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d109      	bne.n	8001fcc <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	6818      	ldr	r0, [r3, #0]
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	7999      	ldrb	r1, [r3, #6]
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8001fc6:	461a      	mov	r2, r3
 8001fc8:	f002 fda4 	bl	8004b14 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	2200      	movs	r2, #0
 8001fd0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8001fd4:	2300      	movs	r3, #0
}
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	3710      	adds	r7, #16
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	bd80      	pop	{r7, pc}

08001fde <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001fde:	b580      	push	{r7, lr}
 8001fe0:	b084      	sub	sp, #16
 8001fe2:	af00      	add	r7, sp, #0
 8001fe4:	6078      	str	r0, [r7, #4]
 8001fe6:	460b      	mov	r3, r1
 8001fe8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001fea:	78fb      	ldrb	r3, [r7, #3]
 8001fec:	f003 030f 	and.w	r3, r3, #15
 8001ff0:	687a      	ldr	r2, [r7, #4]
 8001ff2:	7912      	ldrb	r2, [r2, #4]
 8001ff4:	4293      	cmp	r3, r2
 8001ff6:	d901      	bls.n	8001ffc <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001ff8:	2301      	movs	r3, #1
 8001ffa:	e042      	b.n	8002082 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001ffc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002000:	2b00      	cmp	r3, #0
 8002002:	da0f      	bge.n	8002024 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002004:	78fb      	ldrb	r3, [r7, #3]
 8002006:	f003 020f 	and.w	r2, r3, #15
 800200a:	4613      	mov	r3, r2
 800200c:	00db      	lsls	r3, r3, #3
 800200e:	4413      	add	r3, r2
 8002010:	009b      	lsls	r3, r3, #2
 8002012:	3310      	adds	r3, #16
 8002014:	687a      	ldr	r2, [r7, #4]
 8002016:	4413      	add	r3, r2
 8002018:	3304      	adds	r3, #4
 800201a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	2201      	movs	r2, #1
 8002020:	705a      	strb	r2, [r3, #1]
 8002022:	e00f      	b.n	8002044 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002024:	78fb      	ldrb	r3, [r7, #3]
 8002026:	f003 020f 	and.w	r2, r3, #15
 800202a:	4613      	mov	r3, r2
 800202c:	00db      	lsls	r3, r3, #3
 800202e:	4413      	add	r3, r2
 8002030:	009b      	lsls	r3, r3, #2
 8002032:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002036:	687a      	ldr	r2, [r7, #4]
 8002038:	4413      	add	r3, r2
 800203a:	3304      	adds	r3, #4
 800203c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	2200      	movs	r2, #0
 8002042:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	2200      	movs	r2, #0
 8002048:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800204a:	78fb      	ldrb	r3, [r7, #3]
 800204c:	f003 030f 	and.w	r3, r3, #15
 8002050:	b2da      	uxtb	r2, r3
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800205c:	2b01      	cmp	r3, #1
 800205e:	d101      	bne.n	8002064 <HAL_PCD_EP_ClrStall+0x86>
 8002060:	2302      	movs	r3, #2
 8002062:	e00e      	b.n	8002082 <HAL_PCD_EP_ClrStall+0xa4>
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	2201      	movs	r2, #1
 8002068:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	68f9      	ldr	r1, [r7, #12]
 8002072:	4618      	mov	r0, r3
 8002074:	f002 fbbc 	bl	80047f0 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	2200      	movs	r2, #0
 800207c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8002080:	2300      	movs	r3, #0
}
 8002082:	4618      	mov	r0, r3
 8002084:	3710      	adds	r7, #16
 8002086:	46bd      	mov	sp, r7
 8002088:	bd80      	pop	{r7, pc}

0800208a <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800208a:	b580      	push	{r7, lr}
 800208c:	b084      	sub	sp, #16
 800208e:	af00      	add	r7, sp, #0
 8002090:	6078      	str	r0, [r7, #4]
 8002092:	460b      	mov	r3, r1
 8002094:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8002096:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800209a:	2b00      	cmp	r3, #0
 800209c:	da0c      	bge.n	80020b8 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800209e:	78fb      	ldrb	r3, [r7, #3]
 80020a0:	f003 020f 	and.w	r2, r3, #15
 80020a4:	4613      	mov	r3, r2
 80020a6:	00db      	lsls	r3, r3, #3
 80020a8:	4413      	add	r3, r2
 80020aa:	009b      	lsls	r3, r3, #2
 80020ac:	3310      	adds	r3, #16
 80020ae:	687a      	ldr	r2, [r7, #4]
 80020b0:	4413      	add	r3, r2
 80020b2:	3304      	adds	r3, #4
 80020b4:	60fb      	str	r3, [r7, #12]
 80020b6:	e00c      	b.n	80020d2 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80020b8:	78fb      	ldrb	r3, [r7, #3]
 80020ba:	f003 020f 	and.w	r2, r3, #15
 80020be:	4613      	mov	r3, r2
 80020c0:	00db      	lsls	r3, r3, #3
 80020c2:	4413      	add	r3, r2
 80020c4:	009b      	lsls	r3, r3, #2
 80020c6:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80020ca:	687a      	ldr	r2, [r7, #4]
 80020cc:	4413      	add	r3, r2
 80020ce:	3304      	adds	r3, #4
 80020d0:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	68f9      	ldr	r1, [r7, #12]
 80020d8:	4618      	mov	r0, r3
 80020da:	f002 f9db 	bl	8004494 <USB_EPStopXfer>
 80020de:	4603      	mov	r3, r0
 80020e0:	72fb      	strb	r3, [r7, #11]

  return ret;
 80020e2:	7afb      	ldrb	r3, [r7, #11]
}
 80020e4:	4618      	mov	r0, r3
 80020e6:	3710      	adds	r7, #16
 80020e8:	46bd      	mov	sp, r7
 80020ea:	bd80      	pop	{r7, pc}

080020ec <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b08a      	sub	sp, #40	@ 0x28
 80020f0:	af02      	add	r7, sp, #8
 80020f2:	6078      	str	r0, [r7, #4]
 80020f4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80020fc:	697b      	ldr	r3, [r7, #20]
 80020fe:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002100:	683a      	ldr	r2, [r7, #0]
 8002102:	4613      	mov	r3, r2
 8002104:	00db      	lsls	r3, r3, #3
 8002106:	4413      	add	r3, r2
 8002108:	009b      	lsls	r3, r3, #2
 800210a:	3310      	adds	r3, #16
 800210c:	687a      	ldr	r2, [r7, #4]
 800210e:	4413      	add	r3, r2
 8002110:	3304      	adds	r3, #4
 8002112:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	695a      	ldr	r2, [r3, #20]
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	691b      	ldr	r3, [r3, #16]
 800211c:	429a      	cmp	r2, r3
 800211e:	d901      	bls.n	8002124 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002120:	2301      	movs	r3, #1
 8002122:	e06b      	b.n	80021fc <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	691a      	ldr	r2, [r3, #16]
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	695b      	ldr	r3, [r3, #20]
 800212c:	1ad3      	subs	r3, r2, r3
 800212e:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	689b      	ldr	r3, [r3, #8]
 8002134:	69fa      	ldr	r2, [r7, #28]
 8002136:	429a      	cmp	r2, r3
 8002138:	d902      	bls.n	8002140 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	689b      	ldr	r3, [r3, #8]
 800213e:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002140:	69fb      	ldr	r3, [r7, #28]
 8002142:	3303      	adds	r3, #3
 8002144:	089b      	lsrs	r3, r3, #2
 8002146:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002148:	e02a      	b.n	80021a0 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	691a      	ldr	r2, [r3, #16]
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	695b      	ldr	r3, [r3, #20]
 8002152:	1ad3      	subs	r3, r2, r3
 8002154:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	689b      	ldr	r3, [r3, #8]
 800215a:	69fa      	ldr	r2, [r7, #28]
 800215c:	429a      	cmp	r2, r3
 800215e:	d902      	bls.n	8002166 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	689b      	ldr	r3, [r3, #8]
 8002164:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002166:	69fb      	ldr	r3, [r7, #28]
 8002168:	3303      	adds	r3, #3
 800216a:	089b      	lsrs	r3, r3, #2
 800216c:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	68d9      	ldr	r1, [r3, #12]
 8002172:	683b      	ldr	r3, [r7, #0]
 8002174:	b2da      	uxtb	r2, r3
 8002176:	69fb      	ldr	r3, [r7, #28]
 8002178:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800217e:	9300      	str	r3, [sp, #0]
 8002180:	4603      	mov	r3, r0
 8002182:	6978      	ldr	r0, [r7, #20]
 8002184:	f002 fa30 	bl	80045e8 <USB_WritePacket>

    ep->xfer_buff  += len;
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	68da      	ldr	r2, [r3, #12]
 800218c:	69fb      	ldr	r3, [r7, #28]
 800218e:	441a      	add	r2, r3
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	695a      	ldr	r2, [r3, #20]
 8002198:	69fb      	ldr	r3, [r7, #28]
 800219a:	441a      	add	r2, r3
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	015a      	lsls	r2, r3, #5
 80021a4:	693b      	ldr	r3, [r7, #16]
 80021a6:	4413      	add	r3, r2
 80021a8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80021ac:	699b      	ldr	r3, [r3, #24]
 80021ae:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80021b0:	69ba      	ldr	r2, [r7, #24]
 80021b2:	429a      	cmp	r2, r3
 80021b4:	d809      	bhi.n	80021ca <PCD_WriteEmptyTxFifo+0xde>
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	695a      	ldr	r2, [r3, #20]
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80021be:	429a      	cmp	r2, r3
 80021c0:	d203      	bcs.n	80021ca <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	691b      	ldr	r3, [r3, #16]
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d1bf      	bne.n	800214a <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	691a      	ldr	r2, [r3, #16]
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	695b      	ldr	r3, [r3, #20]
 80021d2:	429a      	cmp	r2, r3
 80021d4:	d811      	bhi.n	80021fa <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80021d6:	683b      	ldr	r3, [r7, #0]
 80021d8:	f003 030f 	and.w	r3, r3, #15
 80021dc:	2201      	movs	r2, #1
 80021de:	fa02 f303 	lsl.w	r3, r2, r3
 80021e2:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80021e4:	693b      	ldr	r3, [r7, #16]
 80021e6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80021ea:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80021ec:	68bb      	ldr	r3, [r7, #8]
 80021ee:	43db      	mvns	r3, r3
 80021f0:	6939      	ldr	r1, [r7, #16]
 80021f2:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80021f6:	4013      	ands	r3, r2
 80021f8:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 80021fa:	2300      	movs	r3, #0
}
 80021fc:	4618      	mov	r0, r3
 80021fe:	3720      	adds	r7, #32
 8002200:	46bd      	mov	sp, r7
 8002202:	bd80      	pop	{r7, pc}

08002204 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	b088      	sub	sp, #32
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
 800220c:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002214:	69fb      	ldr	r3, [r7, #28]
 8002216:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8002218:	69fb      	ldr	r3, [r7, #28]
 800221a:	333c      	adds	r3, #60	@ 0x3c
 800221c:	3304      	adds	r3, #4
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002222:	683b      	ldr	r3, [r7, #0]
 8002224:	015a      	lsls	r2, r3, #5
 8002226:	69bb      	ldr	r3, [r7, #24]
 8002228:	4413      	add	r3, r2
 800222a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800222e:	689b      	ldr	r3, [r3, #8]
 8002230:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	799b      	ldrb	r3, [r3, #6]
 8002236:	2b01      	cmp	r3, #1
 8002238:	d17b      	bne.n	8002332 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800223a:	693b      	ldr	r3, [r7, #16]
 800223c:	f003 0308 	and.w	r3, r3, #8
 8002240:	2b00      	cmp	r3, #0
 8002242:	d015      	beq.n	8002270 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002244:	697b      	ldr	r3, [r7, #20]
 8002246:	4a61      	ldr	r2, [pc, #388]	@ (80023cc <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002248:	4293      	cmp	r3, r2
 800224a:	f240 80b9 	bls.w	80023c0 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800224e:	693b      	ldr	r3, [r7, #16]
 8002250:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002254:	2b00      	cmp	r3, #0
 8002256:	f000 80b3 	beq.w	80023c0 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800225a:	683b      	ldr	r3, [r7, #0]
 800225c:	015a      	lsls	r2, r3, #5
 800225e:	69bb      	ldr	r3, [r7, #24]
 8002260:	4413      	add	r3, r2
 8002262:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002266:	461a      	mov	r2, r3
 8002268:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800226c:	6093      	str	r3, [r2, #8]
 800226e:	e0a7      	b.n	80023c0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002270:	693b      	ldr	r3, [r7, #16]
 8002272:	f003 0320 	and.w	r3, r3, #32
 8002276:	2b00      	cmp	r3, #0
 8002278:	d009      	beq.n	800228e <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800227a:	683b      	ldr	r3, [r7, #0]
 800227c:	015a      	lsls	r2, r3, #5
 800227e:	69bb      	ldr	r3, [r7, #24]
 8002280:	4413      	add	r3, r2
 8002282:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002286:	461a      	mov	r2, r3
 8002288:	2320      	movs	r3, #32
 800228a:	6093      	str	r3, [r2, #8]
 800228c:	e098      	b.n	80023c0 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800228e:	693b      	ldr	r3, [r7, #16]
 8002290:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8002294:	2b00      	cmp	r3, #0
 8002296:	f040 8093 	bne.w	80023c0 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800229a:	697b      	ldr	r3, [r7, #20]
 800229c:	4a4b      	ldr	r2, [pc, #300]	@ (80023cc <PCD_EP_OutXfrComplete_int+0x1c8>)
 800229e:	4293      	cmp	r3, r2
 80022a0:	d90f      	bls.n	80022c2 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80022a2:	693b      	ldr	r3, [r7, #16]
 80022a4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d00a      	beq.n	80022c2 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	015a      	lsls	r2, r3, #5
 80022b0:	69bb      	ldr	r3, [r7, #24]
 80022b2:	4413      	add	r3, r2
 80022b4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80022b8:	461a      	mov	r2, r3
 80022ba:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80022be:	6093      	str	r3, [r2, #8]
 80022c0:	e07e      	b.n	80023c0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80022c2:	683a      	ldr	r2, [r7, #0]
 80022c4:	4613      	mov	r3, r2
 80022c6:	00db      	lsls	r3, r3, #3
 80022c8:	4413      	add	r3, r2
 80022ca:	009b      	lsls	r3, r3, #2
 80022cc:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80022d0:	687a      	ldr	r2, [r7, #4]
 80022d2:	4413      	add	r3, r2
 80022d4:	3304      	adds	r3, #4
 80022d6:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	6a1a      	ldr	r2, [r3, #32]
 80022dc:	683b      	ldr	r3, [r7, #0]
 80022de:	0159      	lsls	r1, r3, #5
 80022e0:	69bb      	ldr	r3, [r7, #24]
 80022e2:	440b      	add	r3, r1
 80022e4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80022e8:	691b      	ldr	r3, [r3, #16]
 80022ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022ee:	1ad2      	subs	r2, r2, r3
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d114      	bne.n	8002324 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	691b      	ldr	r3, [r3, #16]
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d109      	bne.n	8002316 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	6818      	ldr	r0, [r3, #0]
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800230c:	461a      	mov	r2, r3
 800230e:	2101      	movs	r1, #1
 8002310:	f002 fc00 	bl	8004b14 <USB_EP0_OutStart>
 8002314:	e006      	b.n	8002324 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	68da      	ldr	r2, [r3, #12]
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	695b      	ldr	r3, [r3, #20]
 800231e:	441a      	add	r2, r3
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	b2db      	uxtb	r3, r3
 8002328:	4619      	mov	r1, r3
 800232a:	6878      	ldr	r0, [r7, #4]
 800232c:	f004 fd8c 	bl	8006e48 <HAL_PCD_DataOutStageCallback>
 8002330:	e046      	b.n	80023c0 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002332:	697b      	ldr	r3, [r7, #20]
 8002334:	4a26      	ldr	r2, [pc, #152]	@ (80023d0 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8002336:	4293      	cmp	r3, r2
 8002338:	d124      	bne.n	8002384 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800233a:	693b      	ldr	r3, [r7, #16]
 800233c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002340:	2b00      	cmp	r3, #0
 8002342:	d00a      	beq.n	800235a <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	015a      	lsls	r2, r3, #5
 8002348:	69bb      	ldr	r3, [r7, #24]
 800234a:	4413      	add	r3, r2
 800234c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002350:	461a      	mov	r2, r3
 8002352:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002356:	6093      	str	r3, [r2, #8]
 8002358:	e032      	b.n	80023c0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800235a:	693b      	ldr	r3, [r7, #16]
 800235c:	f003 0320 	and.w	r3, r3, #32
 8002360:	2b00      	cmp	r3, #0
 8002362:	d008      	beq.n	8002376 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	015a      	lsls	r2, r3, #5
 8002368:	69bb      	ldr	r3, [r7, #24]
 800236a:	4413      	add	r3, r2
 800236c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002370:	461a      	mov	r2, r3
 8002372:	2320      	movs	r3, #32
 8002374:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002376:	683b      	ldr	r3, [r7, #0]
 8002378:	b2db      	uxtb	r3, r3
 800237a:	4619      	mov	r1, r3
 800237c:	6878      	ldr	r0, [r7, #4]
 800237e:	f004 fd63 	bl	8006e48 <HAL_PCD_DataOutStageCallback>
 8002382:	e01d      	b.n	80023c0 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	2b00      	cmp	r3, #0
 8002388:	d114      	bne.n	80023b4 <PCD_EP_OutXfrComplete_int+0x1b0>
 800238a:	6879      	ldr	r1, [r7, #4]
 800238c:	683a      	ldr	r2, [r7, #0]
 800238e:	4613      	mov	r3, r2
 8002390:	00db      	lsls	r3, r3, #3
 8002392:	4413      	add	r3, r2
 8002394:	009b      	lsls	r3, r3, #2
 8002396:	440b      	add	r3, r1
 8002398:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d108      	bne.n	80023b4 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	6818      	ldr	r0, [r3, #0]
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80023ac:	461a      	mov	r2, r3
 80023ae:	2100      	movs	r1, #0
 80023b0:	f002 fbb0 	bl	8004b14 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80023b4:	683b      	ldr	r3, [r7, #0]
 80023b6:	b2db      	uxtb	r3, r3
 80023b8:	4619      	mov	r1, r3
 80023ba:	6878      	ldr	r0, [r7, #4]
 80023bc:	f004 fd44 	bl	8006e48 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80023c0:	2300      	movs	r3, #0
}
 80023c2:	4618      	mov	r0, r3
 80023c4:	3720      	adds	r7, #32
 80023c6:	46bd      	mov	sp, r7
 80023c8:	bd80      	pop	{r7, pc}
 80023ca:	bf00      	nop
 80023cc:	4f54300a 	.word	0x4f54300a
 80023d0:	4f54310a 	.word	0x4f54310a

080023d4 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b086      	sub	sp, #24
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
 80023dc:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80023e4:	697b      	ldr	r3, [r7, #20]
 80023e6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80023e8:	697b      	ldr	r3, [r7, #20]
 80023ea:	333c      	adds	r3, #60	@ 0x3c
 80023ec:	3304      	adds	r3, #4
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80023f2:	683b      	ldr	r3, [r7, #0]
 80023f4:	015a      	lsls	r2, r3, #5
 80023f6:	693b      	ldr	r3, [r7, #16]
 80023f8:	4413      	add	r3, r2
 80023fa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80023fe:	689b      	ldr	r3, [r3, #8]
 8002400:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	4a15      	ldr	r2, [pc, #84]	@ (800245c <PCD_EP_OutSetupPacket_int+0x88>)
 8002406:	4293      	cmp	r3, r2
 8002408:	d90e      	bls.n	8002428 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800240a:	68bb      	ldr	r3, [r7, #8]
 800240c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002410:	2b00      	cmp	r3, #0
 8002412:	d009      	beq.n	8002428 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	015a      	lsls	r2, r3, #5
 8002418:	693b      	ldr	r3, [r7, #16]
 800241a:	4413      	add	r3, r2
 800241c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002420:	461a      	mov	r2, r3
 8002422:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002426:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002428:	6878      	ldr	r0, [r7, #4]
 800242a:	f004 fcfb 	bl	8006e24 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	4a0a      	ldr	r2, [pc, #40]	@ (800245c <PCD_EP_OutSetupPacket_int+0x88>)
 8002432:	4293      	cmp	r3, r2
 8002434:	d90c      	bls.n	8002450 <PCD_EP_OutSetupPacket_int+0x7c>
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	799b      	ldrb	r3, [r3, #6]
 800243a:	2b01      	cmp	r3, #1
 800243c:	d108      	bne.n	8002450 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	6818      	ldr	r0, [r3, #0]
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002448:	461a      	mov	r2, r3
 800244a:	2101      	movs	r1, #1
 800244c:	f002 fb62 	bl	8004b14 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002450:	2300      	movs	r3, #0
}
 8002452:	4618      	mov	r0, r3
 8002454:	3718      	adds	r7, #24
 8002456:	46bd      	mov	sp, r7
 8002458:	bd80      	pop	{r7, pc}
 800245a:	bf00      	nop
 800245c:	4f54300a 	.word	0x4f54300a

08002460 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002460:	b480      	push	{r7}
 8002462:	b085      	sub	sp, #20
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
 8002468:	460b      	mov	r3, r1
 800246a:	70fb      	strb	r3, [r7, #3]
 800246c:	4613      	mov	r3, r2
 800246e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002476:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002478:	78fb      	ldrb	r3, [r7, #3]
 800247a:	2b00      	cmp	r3, #0
 800247c:	d107      	bne.n	800248e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800247e:	883b      	ldrh	r3, [r7, #0]
 8002480:	0419      	lsls	r1, r3, #16
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	68ba      	ldr	r2, [r7, #8]
 8002488:	430a      	orrs	r2, r1
 800248a:	629a      	str	r2, [r3, #40]	@ 0x28
 800248c:	e028      	b.n	80024e0 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002494:	0c1b      	lsrs	r3, r3, #16
 8002496:	68ba      	ldr	r2, [r7, #8]
 8002498:	4413      	add	r3, r2
 800249a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800249c:	2300      	movs	r3, #0
 800249e:	73fb      	strb	r3, [r7, #15]
 80024a0:	e00d      	b.n	80024be <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681a      	ldr	r2, [r3, #0]
 80024a6:	7bfb      	ldrb	r3, [r7, #15]
 80024a8:	3340      	adds	r3, #64	@ 0x40
 80024aa:	009b      	lsls	r3, r3, #2
 80024ac:	4413      	add	r3, r2
 80024ae:	685b      	ldr	r3, [r3, #4]
 80024b0:	0c1b      	lsrs	r3, r3, #16
 80024b2:	68ba      	ldr	r2, [r7, #8]
 80024b4:	4413      	add	r3, r2
 80024b6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80024b8:	7bfb      	ldrb	r3, [r7, #15]
 80024ba:	3301      	adds	r3, #1
 80024bc:	73fb      	strb	r3, [r7, #15]
 80024be:	7bfa      	ldrb	r2, [r7, #15]
 80024c0:	78fb      	ldrb	r3, [r7, #3]
 80024c2:	3b01      	subs	r3, #1
 80024c4:	429a      	cmp	r2, r3
 80024c6:	d3ec      	bcc.n	80024a2 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80024c8:	883b      	ldrh	r3, [r7, #0]
 80024ca:	0418      	lsls	r0, r3, #16
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	6819      	ldr	r1, [r3, #0]
 80024d0:	78fb      	ldrb	r3, [r7, #3]
 80024d2:	3b01      	subs	r3, #1
 80024d4:	68ba      	ldr	r2, [r7, #8]
 80024d6:	4302      	orrs	r2, r0
 80024d8:	3340      	adds	r3, #64	@ 0x40
 80024da:	009b      	lsls	r3, r3, #2
 80024dc:	440b      	add	r3, r1
 80024de:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80024e0:	2300      	movs	r3, #0
}
 80024e2:	4618      	mov	r0, r3
 80024e4:	3714      	adds	r7, #20
 80024e6:	46bd      	mov	sp, r7
 80024e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ec:	4770      	bx	lr

080024ee <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80024ee:	b480      	push	{r7}
 80024f0:	b083      	sub	sp, #12
 80024f2:	af00      	add	r7, sp, #0
 80024f4:	6078      	str	r0, [r7, #4]
 80024f6:	460b      	mov	r3, r1
 80024f8:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	887a      	ldrh	r2, [r7, #2]
 8002500:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8002502:	2300      	movs	r3, #0
}
 8002504:	4618      	mov	r0, r3
 8002506:	370c      	adds	r7, #12
 8002508:	46bd      	mov	sp, r7
 800250a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250e:	4770      	bx	lr

08002510 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8002510:	b480      	push	{r7}
 8002512:	b083      	sub	sp, #12
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
 8002518:	460b      	mov	r3, r1
 800251a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800251c:	bf00      	nop
 800251e:	370c      	adds	r7, #12
 8002520:	46bd      	mov	sp, r7
 8002522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002526:	4770      	bx	lr

08002528 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	b086      	sub	sp, #24
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	2b00      	cmp	r3, #0
 8002534:	d101      	bne.n	800253a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002536:	2301      	movs	r3, #1
 8002538:	e267      	b.n	8002a0a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f003 0301 	and.w	r3, r3, #1
 8002542:	2b00      	cmp	r3, #0
 8002544:	d075      	beq.n	8002632 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002546:	4b88      	ldr	r3, [pc, #544]	@ (8002768 <HAL_RCC_OscConfig+0x240>)
 8002548:	689b      	ldr	r3, [r3, #8]
 800254a:	f003 030c 	and.w	r3, r3, #12
 800254e:	2b04      	cmp	r3, #4
 8002550:	d00c      	beq.n	800256c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002552:	4b85      	ldr	r3, [pc, #532]	@ (8002768 <HAL_RCC_OscConfig+0x240>)
 8002554:	689b      	ldr	r3, [r3, #8]
 8002556:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800255a:	2b08      	cmp	r3, #8
 800255c:	d112      	bne.n	8002584 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800255e:	4b82      	ldr	r3, [pc, #520]	@ (8002768 <HAL_RCC_OscConfig+0x240>)
 8002560:	685b      	ldr	r3, [r3, #4]
 8002562:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002566:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800256a:	d10b      	bne.n	8002584 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800256c:	4b7e      	ldr	r3, [pc, #504]	@ (8002768 <HAL_RCC_OscConfig+0x240>)
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002574:	2b00      	cmp	r3, #0
 8002576:	d05b      	beq.n	8002630 <HAL_RCC_OscConfig+0x108>
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	685b      	ldr	r3, [r3, #4]
 800257c:	2b00      	cmp	r3, #0
 800257e:	d157      	bne.n	8002630 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002580:	2301      	movs	r3, #1
 8002582:	e242      	b.n	8002a0a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	685b      	ldr	r3, [r3, #4]
 8002588:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800258c:	d106      	bne.n	800259c <HAL_RCC_OscConfig+0x74>
 800258e:	4b76      	ldr	r3, [pc, #472]	@ (8002768 <HAL_RCC_OscConfig+0x240>)
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	4a75      	ldr	r2, [pc, #468]	@ (8002768 <HAL_RCC_OscConfig+0x240>)
 8002594:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002598:	6013      	str	r3, [r2, #0]
 800259a:	e01d      	b.n	80025d8 <HAL_RCC_OscConfig+0xb0>
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	685b      	ldr	r3, [r3, #4]
 80025a0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80025a4:	d10c      	bne.n	80025c0 <HAL_RCC_OscConfig+0x98>
 80025a6:	4b70      	ldr	r3, [pc, #448]	@ (8002768 <HAL_RCC_OscConfig+0x240>)
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	4a6f      	ldr	r2, [pc, #444]	@ (8002768 <HAL_RCC_OscConfig+0x240>)
 80025ac:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80025b0:	6013      	str	r3, [r2, #0]
 80025b2:	4b6d      	ldr	r3, [pc, #436]	@ (8002768 <HAL_RCC_OscConfig+0x240>)
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	4a6c      	ldr	r2, [pc, #432]	@ (8002768 <HAL_RCC_OscConfig+0x240>)
 80025b8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80025bc:	6013      	str	r3, [r2, #0]
 80025be:	e00b      	b.n	80025d8 <HAL_RCC_OscConfig+0xb0>
 80025c0:	4b69      	ldr	r3, [pc, #420]	@ (8002768 <HAL_RCC_OscConfig+0x240>)
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	4a68      	ldr	r2, [pc, #416]	@ (8002768 <HAL_RCC_OscConfig+0x240>)
 80025c6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80025ca:	6013      	str	r3, [r2, #0]
 80025cc:	4b66      	ldr	r3, [pc, #408]	@ (8002768 <HAL_RCC_OscConfig+0x240>)
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	4a65      	ldr	r2, [pc, #404]	@ (8002768 <HAL_RCC_OscConfig+0x240>)
 80025d2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80025d6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	685b      	ldr	r3, [r3, #4]
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d013      	beq.n	8002608 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025e0:	f7fe fa8a 	bl	8000af8 <HAL_GetTick>
 80025e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025e6:	e008      	b.n	80025fa <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80025e8:	f7fe fa86 	bl	8000af8 <HAL_GetTick>
 80025ec:	4602      	mov	r2, r0
 80025ee:	693b      	ldr	r3, [r7, #16]
 80025f0:	1ad3      	subs	r3, r2, r3
 80025f2:	2b64      	cmp	r3, #100	@ 0x64
 80025f4:	d901      	bls.n	80025fa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80025f6:	2303      	movs	r3, #3
 80025f8:	e207      	b.n	8002a0a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025fa:	4b5b      	ldr	r3, [pc, #364]	@ (8002768 <HAL_RCC_OscConfig+0x240>)
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002602:	2b00      	cmp	r3, #0
 8002604:	d0f0      	beq.n	80025e8 <HAL_RCC_OscConfig+0xc0>
 8002606:	e014      	b.n	8002632 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002608:	f7fe fa76 	bl	8000af8 <HAL_GetTick>
 800260c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800260e:	e008      	b.n	8002622 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002610:	f7fe fa72 	bl	8000af8 <HAL_GetTick>
 8002614:	4602      	mov	r2, r0
 8002616:	693b      	ldr	r3, [r7, #16]
 8002618:	1ad3      	subs	r3, r2, r3
 800261a:	2b64      	cmp	r3, #100	@ 0x64
 800261c:	d901      	bls.n	8002622 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800261e:	2303      	movs	r3, #3
 8002620:	e1f3      	b.n	8002a0a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002622:	4b51      	ldr	r3, [pc, #324]	@ (8002768 <HAL_RCC_OscConfig+0x240>)
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800262a:	2b00      	cmp	r3, #0
 800262c:	d1f0      	bne.n	8002610 <HAL_RCC_OscConfig+0xe8>
 800262e:	e000      	b.n	8002632 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002630:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f003 0302 	and.w	r3, r3, #2
 800263a:	2b00      	cmp	r3, #0
 800263c:	d063      	beq.n	8002706 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800263e:	4b4a      	ldr	r3, [pc, #296]	@ (8002768 <HAL_RCC_OscConfig+0x240>)
 8002640:	689b      	ldr	r3, [r3, #8]
 8002642:	f003 030c 	and.w	r3, r3, #12
 8002646:	2b00      	cmp	r3, #0
 8002648:	d00b      	beq.n	8002662 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800264a:	4b47      	ldr	r3, [pc, #284]	@ (8002768 <HAL_RCC_OscConfig+0x240>)
 800264c:	689b      	ldr	r3, [r3, #8]
 800264e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002652:	2b08      	cmp	r3, #8
 8002654:	d11c      	bne.n	8002690 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002656:	4b44      	ldr	r3, [pc, #272]	@ (8002768 <HAL_RCC_OscConfig+0x240>)
 8002658:	685b      	ldr	r3, [r3, #4]
 800265a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800265e:	2b00      	cmp	r3, #0
 8002660:	d116      	bne.n	8002690 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002662:	4b41      	ldr	r3, [pc, #260]	@ (8002768 <HAL_RCC_OscConfig+0x240>)
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f003 0302 	and.w	r3, r3, #2
 800266a:	2b00      	cmp	r3, #0
 800266c:	d005      	beq.n	800267a <HAL_RCC_OscConfig+0x152>
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	68db      	ldr	r3, [r3, #12]
 8002672:	2b01      	cmp	r3, #1
 8002674:	d001      	beq.n	800267a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002676:	2301      	movs	r3, #1
 8002678:	e1c7      	b.n	8002a0a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800267a:	4b3b      	ldr	r3, [pc, #236]	@ (8002768 <HAL_RCC_OscConfig+0x240>)
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	691b      	ldr	r3, [r3, #16]
 8002686:	00db      	lsls	r3, r3, #3
 8002688:	4937      	ldr	r1, [pc, #220]	@ (8002768 <HAL_RCC_OscConfig+0x240>)
 800268a:	4313      	orrs	r3, r2
 800268c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800268e:	e03a      	b.n	8002706 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	68db      	ldr	r3, [r3, #12]
 8002694:	2b00      	cmp	r3, #0
 8002696:	d020      	beq.n	80026da <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002698:	4b34      	ldr	r3, [pc, #208]	@ (800276c <HAL_RCC_OscConfig+0x244>)
 800269a:	2201      	movs	r2, #1
 800269c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800269e:	f7fe fa2b 	bl	8000af8 <HAL_GetTick>
 80026a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026a4:	e008      	b.n	80026b8 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80026a6:	f7fe fa27 	bl	8000af8 <HAL_GetTick>
 80026aa:	4602      	mov	r2, r0
 80026ac:	693b      	ldr	r3, [r7, #16]
 80026ae:	1ad3      	subs	r3, r2, r3
 80026b0:	2b02      	cmp	r3, #2
 80026b2:	d901      	bls.n	80026b8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80026b4:	2303      	movs	r3, #3
 80026b6:	e1a8      	b.n	8002a0a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026b8:	4b2b      	ldr	r3, [pc, #172]	@ (8002768 <HAL_RCC_OscConfig+0x240>)
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f003 0302 	and.w	r3, r3, #2
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d0f0      	beq.n	80026a6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026c4:	4b28      	ldr	r3, [pc, #160]	@ (8002768 <HAL_RCC_OscConfig+0x240>)
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	691b      	ldr	r3, [r3, #16]
 80026d0:	00db      	lsls	r3, r3, #3
 80026d2:	4925      	ldr	r1, [pc, #148]	@ (8002768 <HAL_RCC_OscConfig+0x240>)
 80026d4:	4313      	orrs	r3, r2
 80026d6:	600b      	str	r3, [r1, #0]
 80026d8:	e015      	b.n	8002706 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80026da:	4b24      	ldr	r3, [pc, #144]	@ (800276c <HAL_RCC_OscConfig+0x244>)
 80026dc:	2200      	movs	r2, #0
 80026de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026e0:	f7fe fa0a 	bl	8000af8 <HAL_GetTick>
 80026e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80026e6:	e008      	b.n	80026fa <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80026e8:	f7fe fa06 	bl	8000af8 <HAL_GetTick>
 80026ec:	4602      	mov	r2, r0
 80026ee:	693b      	ldr	r3, [r7, #16]
 80026f0:	1ad3      	subs	r3, r2, r3
 80026f2:	2b02      	cmp	r3, #2
 80026f4:	d901      	bls.n	80026fa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80026f6:	2303      	movs	r3, #3
 80026f8:	e187      	b.n	8002a0a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80026fa:	4b1b      	ldr	r3, [pc, #108]	@ (8002768 <HAL_RCC_OscConfig+0x240>)
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f003 0302 	and.w	r3, r3, #2
 8002702:	2b00      	cmp	r3, #0
 8002704:	d1f0      	bne.n	80026e8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f003 0308 	and.w	r3, r3, #8
 800270e:	2b00      	cmp	r3, #0
 8002710:	d036      	beq.n	8002780 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	695b      	ldr	r3, [r3, #20]
 8002716:	2b00      	cmp	r3, #0
 8002718:	d016      	beq.n	8002748 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800271a:	4b15      	ldr	r3, [pc, #84]	@ (8002770 <HAL_RCC_OscConfig+0x248>)
 800271c:	2201      	movs	r2, #1
 800271e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002720:	f7fe f9ea 	bl	8000af8 <HAL_GetTick>
 8002724:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002726:	e008      	b.n	800273a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002728:	f7fe f9e6 	bl	8000af8 <HAL_GetTick>
 800272c:	4602      	mov	r2, r0
 800272e:	693b      	ldr	r3, [r7, #16]
 8002730:	1ad3      	subs	r3, r2, r3
 8002732:	2b02      	cmp	r3, #2
 8002734:	d901      	bls.n	800273a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002736:	2303      	movs	r3, #3
 8002738:	e167      	b.n	8002a0a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800273a:	4b0b      	ldr	r3, [pc, #44]	@ (8002768 <HAL_RCC_OscConfig+0x240>)
 800273c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800273e:	f003 0302 	and.w	r3, r3, #2
 8002742:	2b00      	cmp	r3, #0
 8002744:	d0f0      	beq.n	8002728 <HAL_RCC_OscConfig+0x200>
 8002746:	e01b      	b.n	8002780 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002748:	4b09      	ldr	r3, [pc, #36]	@ (8002770 <HAL_RCC_OscConfig+0x248>)
 800274a:	2200      	movs	r2, #0
 800274c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800274e:	f7fe f9d3 	bl	8000af8 <HAL_GetTick>
 8002752:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002754:	e00e      	b.n	8002774 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002756:	f7fe f9cf 	bl	8000af8 <HAL_GetTick>
 800275a:	4602      	mov	r2, r0
 800275c:	693b      	ldr	r3, [r7, #16]
 800275e:	1ad3      	subs	r3, r2, r3
 8002760:	2b02      	cmp	r3, #2
 8002762:	d907      	bls.n	8002774 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002764:	2303      	movs	r3, #3
 8002766:	e150      	b.n	8002a0a <HAL_RCC_OscConfig+0x4e2>
 8002768:	40023800 	.word	0x40023800
 800276c:	42470000 	.word	0x42470000
 8002770:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002774:	4b88      	ldr	r3, [pc, #544]	@ (8002998 <HAL_RCC_OscConfig+0x470>)
 8002776:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002778:	f003 0302 	and.w	r3, r3, #2
 800277c:	2b00      	cmp	r3, #0
 800277e:	d1ea      	bne.n	8002756 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f003 0304 	and.w	r3, r3, #4
 8002788:	2b00      	cmp	r3, #0
 800278a:	f000 8097 	beq.w	80028bc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800278e:	2300      	movs	r3, #0
 8002790:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002792:	4b81      	ldr	r3, [pc, #516]	@ (8002998 <HAL_RCC_OscConfig+0x470>)
 8002794:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002796:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800279a:	2b00      	cmp	r3, #0
 800279c:	d10f      	bne.n	80027be <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800279e:	2300      	movs	r3, #0
 80027a0:	60bb      	str	r3, [r7, #8]
 80027a2:	4b7d      	ldr	r3, [pc, #500]	@ (8002998 <HAL_RCC_OscConfig+0x470>)
 80027a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027a6:	4a7c      	ldr	r2, [pc, #496]	@ (8002998 <HAL_RCC_OscConfig+0x470>)
 80027a8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80027ac:	6413      	str	r3, [r2, #64]	@ 0x40
 80027ae:	4b7a      	ldr	r3, [pc, #488]	@ (8002998 <HAL_RCC_OscConfig+0x470>)
 80027b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80027b6:	60bb      	str	r3, [r7, #8]
 80027b8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80027ba:	2301      	movs	r3, #1
 80027bc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027be:	4b77      	ldr	r3, [pc, #476]	@ (800299c <HAL_RCC_OscConfig+0x474>)
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d118      	bne.n	80027fc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80027ca:	4b74      	ldr	r3, [pc, #464]	@ (800299c <HAL_RCC_OscConfig+0x474>)
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	4a73      	ldr	r2, [pc, #460]	@ (800299c <HAL_RCC_OscConfig+0x474>)
 80027d0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80027d4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80027d6:	f7fe f98f 	bl	8000af8 <HAL_GetTick>
 80027da:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027dc:	e008      	b.n	80027f0 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027de:	f7fe f98b 	bl	8000af8 <HAL_GetTick>
 80027e2:	4602      	mov	r2, r0
 80027e4:	693b      	ldr	r3, [r7, #16]
 80027e6:	1ad3      	subs	r3, r2, r3
 80027e8:	2b02      	cmp	r3, #2
 80027ea:	d901      	bls.n	80027f0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80027ec:	2303      	movs	r3, #3
 80027ee:	e10c      	b.n	8002a0a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027f0:	4b6a      	ldr	r3, [pc, #424]	@ (800299c <HAL_RCC_OscConfig+0x474>)
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d0f0      	beq.n	80027de <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	689b      	ldr	r3, [r3, #8]
 8002800:	2b01      	cmp	r3, #1
 8002802:	d106      	bne.n	8002812 <HAL_RCC_OscConfig+0x2ea>
 8002804:	4b64      	ldr	r3, [pc, #400]	@ (8002998 <HAL_RCC_OscConfig+0x470>)
 8002806:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002808:	4a63      	ldr	r2, [pc, #396]	@ (8002998 <HAL_RCC_OscConfig+0x470>)
 800280a:	f043 0301 	orr.w	r3, r3, #1
 800280e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002810:	e01c      	b.n	800284c <HAL_RCC_OscConfig+0x324>
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	689b      	ldr	r3, [r3, #8]
 8002816:	2b05      	cmp	r3, #5
 8002818:	d10c      	bne.n	8002834 <HAL_RCC_OscConfig+0x30c>
 800281a:	4b5f      	ldr	r3, [pc, #380]	@ (8002998 <HAL_RCC_OscConfig+0x470>)
 800281c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800281e:	4a5e      	ldr	r2, [pc, #376]	@ (8002998 <HAL_RCC_OscConfig+0x470>)
 8002820:	f043 0304 	orr.w	r3, r3, #4
 8002824:	6713      	str	r3, [r2, #112]	@ 0x70
 8002826:	4b5c      	ldr	r3, [pc, #368]	@ (8002998 <HAL_RCC_OscConfig+0x470>)
 8002828:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800282a:	4a5b      	ldr	r2, [pc, #364]	@ (8002998 <HAL_RCC_OscConfig+0x470>)
 800282c:	f043 0301 	orr.w	r3, r3, #1
 8002830:	6713      	str	r3, [r2, #112]	@ 0x70
 8002832:	e00b      	b.n	800284c <HAL_RCC_OscConfig+0x324>
 8002834:	4b58      	ldr	r3, [pc, #352]	@ (8002998 <HAL_RCC_OscConfig+0x470>)
 8002836:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002838:	4a57      	ldr	r2, [pc, #348]	@ (8002998 <HAL_RCC_OscConfig+0x470>)
 800283a:	f023 0301 	bic.w	r3, r3, #1
 800283e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002840:	4b55      	ldr	r3, [pc, #340]	@ (8002998 <HAL_RCC_OscConfig+0x470>)
 8002842:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002844:	4a54      	ldr	r2, [pc, #336]	@ (8002998 <HAL_RCC_OscConfig+0x470>)
 8002846:	f023 0304 	bic.w	r3, r3, #4
 800284a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	689b      	ldr	r3, [r3, #8]
 8002850:	2b00      	cmp	r3, #0
 8002852:	d015      	beq.n	8002880 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002854:	f7fe f950 	bl	8000af8 <HAL_GetTick>
 8002858:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800285a:	e00a      	b.n	8002872 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800285c:	f7fe f94c 	bl	8000af8 <HAL_GetTick>
 8002860:	4602      	mov	r2, r0
 8002862:	693b      	ldr	r3, [r7, #16]
 8002864:	1ad3      	subs	r3, r2, r3
 8002866:	f241 3288 	movw	r2, #5000	@ 0x1388
 800286a:	4293      	cmp	r3, r2
 800286c:	d901      	bls.n	8002872 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800286e:	2303      	movs	r3, #3
 8002870:	e0cb      	b.n	8002a0a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002872:	4b49      	ldr	r3, [pc, #292]	@ (8002998 <HAL_RCC_OscConfig+0x470>)
 8002874:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002876:	f003 0302 	and.w	r3, r3, #2
 800287a:	2b00      	cmp	r3, #0
 800287c:	d0ee      	beq.n	800285c <HAL_RCC_OscConfig+0x334>
 800287e:	e014      	b.n	80028aa <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002880:	f7fe f93a 	bl	8000af8 <HAL_GetTick>
 8002884:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002886:	e00a      	b.n	800289e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002888:	f7fe f936 	bl	8000af8 <HAL_GetTick>
 800288c:	4602      	mov	r2, r0
 800288e:	693b      	ldr	r3, [r7, #16]
 8002890:	1ad3      	subs	r3, r2, r3
 8002892:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002896:	4293      	cmp	r3, r2
 8002898:	d901      	bls.n	800289e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800289a:	2303      	movs	r3, #3
 800289c:	e0b5      	b.n	8002a0a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800289e:	4b3e      	ldr	r3, [pc, #248]	@ (8002998 <HAL_RCC_OscConfig+0x470>)
 80028a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028a2:	f003 0302 	and.w	r3, r3, #2
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d1ee      	bne.n	8002888 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80028aa:	7dfb      	ldrb	r3, [r7, #23]
 80028ac:	2b01      	cmp	r3, #1
 80028ae:	d105      	bne.n	80028bc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80028b0:	4b39      	ldr	r3, [pc, #228]	@ (8002998 <HAL_RCC_OscConfig+0x470>)
 80028b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028b4:	4a38      	ldr	r2, [pc, #224]	@ (8002998 <HAL_RCC_OscConfig+0x470>)
 80028b6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80028ba:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	699b      	ldr	r3, [r3, #24]
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	f000 80a1 	beq.w	8002a08 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80028c6:	4b34      	ldr	r3, [pc, #208]	@ (8002998 <HAL_RCC_OscConfig+0x470>)
 80028c8:	689b      	ldr	r3, [r3, #8]
 80028ca:	f003 030c 	and.w	r3, r3, #12
 80028ce:	2b08      	cmp	r3, #8
 80028d0:	d05c      	beq.n	800298c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	699b      	ldr	r3, [r3, #24]
 80028d6:	2b02      	cmp	r3, #2
 80028d8:	d141      	bne.n	800295e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028da:	4b31      	ldr	r3, [pc, #196]	@ (80029a0 <HAL_RCC_OscConfig+0x478>)
 80028dc:	2200      	movs	r2, #0
 80028de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028e0:	f7fe f90a 	bl	8000af8 <HAL_GetTick>
 80028e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028e6:	e008      	b.n	80028fa <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028e8:	f7fe f906 	bl	8000af8 <HAL_GetTick>
 80028ec:	4602      	mov	r2, r0
 80028ee:	693b      	ldr	r3, [r7, #16]
 80028f0:	1ad3      	subs	r3, r2, r3
 80028f2:	2b02      	cmp	r3, #2
 80028f4:	d901      	bls.n	80028fa <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80028f6:	2303      	movs	r3, #3
 80028f8:	e087      	b.n	8002a0a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028fa:	4b27      	ldr	r3, [pc, #156]	@ (8002998 <HAL_RCC_OscConfig+0x470>)
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002902:	2b00      	cmp	r3, #0
 8002904:	d1f0      	bne.n	80028e8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	69da      	ldr	r2, [r3, #28]
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	6a1b      	ldr	r3, [r3, #32]
 800290e:	431a      	orrs	r2, r3
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002914:	019b      	lsls	r3, r3, #6
 8002916:	431a      	orrs	r2, r3
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800291c:	085b      	lsrs	r3, r3, #1
 800291e:	3b01      	subs	r3, #1
 8002920:	041b      	lsls	r3, r3, #16
 8002922:	431a      	orrs	r2, r3
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002928:	061b      	lsls	r3, r3, #24
 800292a:	491b      	ldr	r1, [pc, #108]	@ (8002998 <HAL_RCC_OscConfig+0x470>)
 800292c:	4313      	orrs	r3, r2
 800292e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002930:	4b1b      	ldr	r3, [pc, #108]	@ (80029a0 <HAL_RCC_OscConfig+0x478>)
 8002932:	2201      	movs	r2, #1
 8002934:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002936:	f7fe f8df 	bl	8000af8 <HAL_GetTick>
 800293a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800293c:	e008      	b.n	8002950 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800293e:	f7fe f8db 	bl	8000af8 <HAL_GetTick>
 8002942:	4602      	mov	r2, r0
 8002944:	693b      	ldr	r3, [r7, #16]
 8002946:	1ad3      	subs	r3, r2, r3
 8002948:	2b02      	cmp	r3, #2
 800294a:	d901      	bls.n	8002950 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800294c:	2303      	movs	r3, #3
 800294e:	e05c      	b.n	8002a0a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002950:	4b11      	ldr	r3, [pc, #68]	@ (8002998 <HAL_RCC_OscConfig+0x470>)
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002958:	2b00      	cmp	r3, #0
 800295a:	d0f0      	beq.n	800293e <HAL_RCC_OscConfig+0x416>
 800295c:	e054      	b.n	8002a08 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800295e:	4b10      	ldr	r3, [pc, #64]	@ (80029a0 <HAL_RCC_OscConfig+0x478>)
 8002960:	2200      	movs	r2, #0
 8002962:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002964:	f7fe f8c8 	bl	8000af8 <HAL_GetTick>
 8002968:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800296a:	e008      	b.n	800297e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800296c:	f7fe f8c4 	bl	8000af8 <HAL_GetTick>
 8002970:	4602      	mov	r2, r0
 8002972:	693b      	ldr	r3, [r7, #16]
 8002974:	1ad3      	subs	r3, r2, r3
 8002976:	2b02      	cmp	r3, #2
 8002978:	d901      	bls.n	800297e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800297a:	2303      	movs	r3, #3
 800297c:	e045      	b.n	8002a0a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800297e:	4b06      	ldr	r3, [pc, #24]	@ (8002998 <HAL_RCC_OscConfig+0x470>)
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002986:	2b00      	cmp	r3, #0
 8002988:	d1f0      	bne.n	800296c <HAL_RCC_OscConfig+0x444>
 800298a:	e03d      	b.n	8002a08 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	699b      	ldr	r3, [r3, #24]
 8002990:	2b01      	cmp	r3, #1
 8002992:	d107      	bne.n	80029a4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002994:	2301      	movs	r3, #1
 8002996:	e038      	b.n	8002a0a <HAL_RCC_OscConfig+0x4e2>
 8002998:	40023800 	.word	0x40023800
 800299c:	40007000 	.word	0x40007000
 80029a0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80029a4:	4b1b      	ldr	r3, [pc, #108]	@ (8002a14 <HAL_RCC_OscConfig+0x4ec>)
 80029a6:	685b      	ldr	r3, [r3, #4]
 80029a8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	699b      	ldr	r3, [r3, #24]
 80029ae:	2b01      	cmp	r3, #1
 80029b0:	d028      	beq.n	8002a04 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80029bc:	429a      	cmp	r2, r3
 80029be:	d121      	bne.n	8002a04 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029ca:	429a      	cmp	r2, r3
 80029cc:	d11a      	bne.n	8002a04 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80029ce:	68fa      	ldr	r2, [r7, #12]
 80029d0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80029d4:	4013      	ands	r3, r2
 80029d6:	687a      	ldr	r2, [r7, #4]
 80029d8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80029da:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80029dc:	4293      	cmp	r3, r2
 80029de:	d111      	bne.n	8002a04 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029ea:	085b      	lsrs	r3, r3, #1
 80029ec:	3b01      	subs	r3, #1
 80029ee:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80029f0:	429a      	cmp	r2, r3
 80029f2:	d107      	bne.n	8002a04 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029fe:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002a00:	429a      	cmp	r2, r3
 8002a02:	d001      	beq.n	8002a08 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002a04:	2301      	movs	r3, #1
 8002a06:	e000      	b.n	8002a0a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002a08:	2300      	movs	r3, #0
}
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	3718      	adds	r7, #24
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	bd80      	pop	{r7, pc}
 8002a12:	bf00      	nop
 8002a14:	40023800 	.word	0x40023800

08002a18 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	b084      	sub	sp, #16
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
 8002a20:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d101      	bne.n	8002a2c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002a28:	2301      	movs	r3, #1
 8002a2a:	e0cc      	b.n	8002bc6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002a2c:	4b68      	ldr	r3, [pc, #416]	@ (8002bd0 <HAL_RCC_ClockConfig+0x1b8>)
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f003 0307 	and.w	r3, r3, #7
 8002a34:	683a      	ldr	r2, [r7, #0]
 8002a36:	429a      	cmp	r2, r3
 8002a38:	d90c      	bls.n	8002a54 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a3a:	4b65      	ldr	r3, [pc, #404]	@ (8002bd0 <HAL_RCC_ClockConfig+0x1b8>)
 8002a3c:	683a      	ldr	r2, [r7, #0]
 8002a3e:	b2d2      	uxtb	r2, r2
 8002a40:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a42:	4b63      	ldr	r3, [pc, #396]	@ (8002bd0 <HAL_RCC_ClockConfig+0x1b8>)
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f003 0307 	and.w	r3, r3, #7
 8002a4a:	683a      	ldr	r2, [r7, #0]
 8002a4c:	429a      	cmp	r2, r3
 8002a4e:	d001      	beq.n	8002a54 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002a50:	2301      	movs	r3, #1
 8002a52:	e0b8      	b.n	8002bc6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f003 0302 	and.w	r3, r3, #2
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d020      	beq.n	8002aa2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f003 0304 	and.w	r3, r3, #4
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d005      	beq.n	8002a78 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002a6c:	4b59      	ldr	r3, [pc, #356]	@ (8002bd4 <HAL_RCC_ClockConfig+0x1bc>)
 8002a6e:	689b      	ldr	r3, [r3, #8]
 8002a70:	4a58      	ldr	r2, [pc, #352]	@ (8002bd4 <HAL_RCC_ClockConfig+0x1bc>)
 8002a72:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002a76:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f003 0308 	and.w	r3, r3, #8
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d005      	beq.n	8002a90 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002a84:	4b53      	ldr	r3, [pc, #332]	@ (8002bd4 <HAL_RCC_ClockConfig+0x1bc>)
 8002a86:	689b      	ldr	r3, [r3, #8]
 8002a88:	4a52      	ldr	r2, [pc, #328]	@ (8002bd4 <HAL_RCC_ClockConfig+0x1bc>)
 8002a8a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002a8e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a90:	4b50      	ldr	r3, [pc, #320]	@ (8002bd4 <HAL_RCC_ClockConfig+0x1bc>)
 8002a92:	689b      	ldr	r3, [r3, #8]
 8002a94:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	689b      	ldr	r3, [r3, #8]
 8002a9c:	494d      	ldr	r1, [pc, #308]	@ (8002bd4 <HAL_RCC_ClockConfig+0x1bc>)
 8002a9e:	4313      	orrs	r3, r2
 8002aa0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f003 0301 	and.w	r3, r3, #1
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d044      	beq.n	8002b38 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	685b      	ldr	r3, [r3, #4]
 8002ab2:	2b01      	cmp	r3, #1
 8002ab4:	d107      	bne.n	8002ac6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ab6:	4b47      	ldr	r3, [pc, #284]	@ (8002bd4 <HAL_RCC_ClockConfig+0x1bc>)
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d119      	bne.n	8002af6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ac2:	2301      	movs	r3, #1
 8002ac4:	e07f      	b.n	8002bc6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	685b      	ldr	r3, [r3, #4]
 8002aca:	2b02      	cmp	r3, #2
 8002acc:	d003      	beq.n	8002ad6 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002ad2:	2b03      	cmp	r3, #3
 8002ad4:	d107      	bne.n	8002ae6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ad6:	4b3f      	ldr	r3, [pc, #252]	@ (8002bd4 <HAL_RCC_ClockConfig+0x1bc>)
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d109      	bne.n	8002af6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ae2:	2301      	movs	r3, #1
 8002ae4:	e06f      	b.n	8002bc6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ae6:	4b3b      	ldr	r3, [pc, #236]	@ (8002bd4 <HAL_RCC_ClockConfig+0x1bc>)
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f003 0302 	and.w	r3, r3, #2
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d101      	bne.n	8002af6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002af2:	2301      	movs	r3, #1
 8002af4:	e067      	b.n	8002bc6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002af6:	4b37      	ldr	r3, [pc, #220]	@ (8002bd4 <HAL_RCC_ClockConfig+0x1bc>)
 8002af8:	689b      	ldr	r3, [r3, #8]
 8002afa:	f023 0203 	bic.w	r2, r3, #3
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	685b      	ldr	r3, [r3, #4]
 8002b02:	4934      	ldr	r1, [pc, #208]	@ (8002bd4 <HAL_RCC_ClockConfig+0x1bc>)
 8002b04:	4313      	orrs	r3, r2
 8002b06:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002b08:	f7fd fff6 	bl	8000af8 <HAL_GetTick>
 8002b0c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b0e:	e00a      	b.n	8002b26 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b10:	f7fd fff2 	bl	8000af8 <HAL_GetTick>
 8002b14:	4602      	mov	r2, r0
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	1ad3      	subs	r3, r2, r3
 8002b1a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b1e:	4293      	cmp	r3, r2
 8002b20:	d901      	bls.n	8002b26 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002b22:	2303      	movs	r3, #3
 8002b24:	e04f      	b.n	8002bc6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b26:	4b2b      	ldr	r3, [pc, #172]	@ (8002bd4 <HAL_RCC_ClockConfig+0x1bc>)
 8002b28:	689b      	ldr	r3, [r3, #8]
 8002b2a:	f003 020c 	and.w	r2, r3, #12
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	685b      	ldr	r3, [r3, #4]
 8002b32:	009b      	lsls	r3, r3, #2
 8002b34:	429a      	cmp	r2, r3
 8002b36:	d1eb      	bne.n	8002b10 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002b38:	4b25      	ldr	r3, [pc, #148]	@ (8002bd0 <HAL_RCC_ClockConfig+0x1b8>)
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f003 0307 	and.w	r3, r3, #7
 8002b40:	683a      	ldr	r2, [r7, #0]
 8002b42:	429a      	cmp	r2, r3
 8002b44:	d20c      	bcs.n	8002b60 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b46:	4b22      	ldr	r3, [pc, #136]	@ (8002bd0 <HAL_RCC_ClockConfig+0x1b8>)
 8002b48:	683a      	ldr	r2, [r7, #0]
 8002b4a:	b2d2      	uxtb	r2, r2
 8002b4c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b4e:	4b20      	ldr	r3, [pc, #128]	@ (8002bd0 <HAL_RCC_ClockConfig+0x1b8>)
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f003 0307 	and.w	r3, r3, #7
 8002b56:	683a      	ldr	r2, [r7, #0]
 8002b58:	429a      	cmp	r2, r3
 8002b5a:	d001      	beq.n	8002b60 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002b5c:	2301      	movs	r3, #1
 8002b5e:	e032      	b.n	8002bc6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f003 0304 	and.w	r3, r3, #4
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d008      	beq.n	8002b7e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b6c:	4b19      	ldr	r3, [pc, #100]	@ (8002bd4 <HAL_RCC_ClockConfig+0x1bc>)
 8002b6e:	689b      	ldr	r3, [r3, #8]
 8002b70:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	68db      	ldr	r3, [r3, #12]
 8002b78:	4916      	ldr	r1, [pc, #88]	@ (8002bd4 <HAL_RCC_ClockConfig+0x1bc>)
 8002b7a:	4313      	orrs	r3, r2
 8002b7c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f003 0308 	and.w	r3, r3, #8
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d009      	beq.n	8002b9e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002b8a:	4b12      	ldr	r3, [pc, #72]	@ (8002bd4 <HAL_RCC_ClockConfig+0x1bc>)
 8002b8c:	689b      	ldr	r3, [r3, #8]
 8002b8e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	691b      	ldr	r3, [r3, #16]
 8002b96:	00db      	lsls	r3, r3, #3
 8002b98:	490e      	ldr	r1, [pc, #56]	@ (8002bd4 <HAL_RCC_ClockConfig+0x1bc>)
 8002b9a:	4313      	orrs	r3, r2
 8002b9c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002b9e:	f000 f821 	bl	8002be4 <HAL_RCC_GetSysClockFreq>
 8002ba2:	4602      	mov	r2, r0
 8002ba4:	4b0b      	ldr	r3, [pc, #44]	@ (8002bd4 <HAL_RCC_ClockConfig+0x1bc>)
 8002ba6:	689b      	ldr	r3, [r3, #8]
 8002ba8:	091b      	lsrs	r3, r3, #4
 8002baa:	f003 030f 	and.w	r3, r3, #15
 8002bae:	490a      	ldr	r1, [pc, #40]	@ (8002bd8 <HAL_RCC_ClockConfig+0x1c0>)
 8002bb0:	5ccb      	ldrb	r3, [r1, r3]
 8002bb2:	fa22 f303 	lsr.w	r3, r2, r3
 8002bb6:	4a09      	ldr	r2, [pc, #36]	@ (8002bdc <HAL_RCC_ClockConfig+0x1c4>)
 8002bb8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002bba:	4b09      	ldr	r3, [pc, #36]	@ (8002be0 <HAL_RCC_ClockConfig+0x1c8>)
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	f7fd ff56 	bl	8000a70 <HAL_InitTick>

  return HAL_OK;
 8002bc4:	2300      	movs	r3, #0
}
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	3710      	adds	r7, #16
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	bd80      	pop	{r7, pc}
 8002bce:	bf00      	nop
 8002bd0:	40023c00 	.word	0x40023c00
 8002bd4:	40023800 	.word	0x40023800
 8002bd8:	0800748c 	.word	0x0800748c
 8002bdc:	20000000 	.word	0x20000000
 8002be0:	20000004 	.word	0x20000004

08002be4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002be4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002be8:	b094      	sub	sp, #80	@ 0x50
 8002bea:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002bec:	2300      	movs	r3, #0
 8002bee:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8002bf0:	2300      	movs	r3, #0
 8002bf2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8002bf4:	2300      	movs	r3, #0
 8002bf6:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8002bf8:	2300      	movs	r3, #0
 8002bfa:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002bfc:	4b79      	ldr	r3, [pc, #484]	@ (8002de4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002bfe:	689b      	ldr	r3, [r3, #8]
 8002c00:	f003 030c 	and.w	r3, r3, #12
 8002c04:	2b08      	cmp	r3, #8
 8002c06:	d00d      	beq.n	8002c24 <HAL_RCC_GetSysClockFreq+0x40>
 8002c08:	2b08      	cmp	r3, #8
 8002c0a:	f200 80e1 	bhi.w	8002dd0 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d002      	beq.n	8002c18 <HAL_RCC_GetSysClockFreq+0x34>
 8002c12:	2b04      	cmp	r3, #4
 8002c14:	d003      	beq.n	8002c1e <HAL_RCC_GetSysClockFreq+0x3a>
 8002c16:	e0db      	b.n	8002dd0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002c18:	4b73      	ldr	r3, [pc, #460]	@ (8002de8 <HAL_RCC_GetSysClockFreq+0x204>)
 8002c1a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002c1c:	e0db      	b.n	8002dd6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002c1e:	4b73      	ldr	r3, [pc, #460]	@ (8002dec <HAL_RCC_GetSysClockFreq+0x208>)
 8002c20:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002c22:	e0d8      	b.n	8002dd6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002c24:	4b6f      	ldr	r3, [pc, #444]	@ (8002de4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002c26:	685b      	ldr	r3, [r3, #4]
 8002c28:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002c2c:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002c2e:	4b6d      	ldr	r3, [pc, #436]	@ (8002de4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002c30:	685b      	ldr	r3, [r3, #4]
 8002c32:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d063      	beq.n	8002d02 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c3a:	4b6a      	ldr	r3, [pc, #424]	@ (8002de4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002c3c:	685b      	ldr	r3, [r3, #4]
 8002c3e:	099b      	lsrs	r3, r3, #6
 8002c40:	2200      	movs	r2, #0
 8002c42:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002c44:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002c46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c48:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002c4c:	633b      	str	r3, [r7, #48]	@ 0x30
 8002c4e:	2300      	movs	r3, #0
 8002c50:	637b      	str	r3, [r7, #52]	@ 0x34
 8002c52:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002c56:	4622      	mov	r2, r4
 8002c58:	462b      	mov	r3, r5
 8002c5a:	f04f 0000 	mov.w	r0, #0
 8002c5e:	f04f 0100 	mov.w	r1, #0
 8002c62:	0159      	lsls	r1, r3, #5
 8002c64:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002c68:	0150      	lsls	r0, r2, #5
 8002c6a:	4602      	mov	r2, r0
 8002c6c:	460b      	mov	r3, r1
 8002c6e:	4621      	mov	r1, r4
 8002c70:	1a51      	subs	r1, r2, r1
 8002c72:	6139      	str	r1, [r7, #16]
 8002c74:	4629      	mov	r1, r5
 8002c76:	eb63 0301 	sbc.w	r3, r3, r1
 8002c7a:	617b      	str	r3, [r7, #20]
 8002c7c:	f04f 0200 	mov.w	r2, #0
 8002c80:	f04f 0300 	mov.w	r3, #0
 8002c84:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002c88:	4659      	mov	r1, fp
 8002c8a:	018b      	lsls	r3, r1, #6
 8002c8c:	4651      	mov	r1, sl
 8002c8e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002c92:	4651      	mov	r1, sl
 8002c94:	018a      	lsls	r2, r1, #6
 8002c96:	4651      	mov	r1, sl
 8002c98:	ebb2 0801 	subs.w	r8, r2, r1
 8002c9c:	4659      	mov	r1, fp
 8002c9e:	eb63 0901 	sbc.w	r9, r3, r1
 8002ca2:	f04f 0200 	mov.w	r2, #0
 8002ca6:	f04f 0300 	mov.w	r3, #0
 8002caa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002cae:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002cb2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002cb6:	4690      	mov	r8, r2
 8002cb8:	4699      	mov	r9, r3
 8002cba:	4623      	mov	r3, r4
 8002cbc:	eb18 0303 	adds.w	r3, r8, r3
 8002cc0:	60bb      	str	r3, [r7, #8]
 8002cc2:	462b      	mov	r3, r5
 8002cc4:	eb49 0303 	adc.w	r3, r9, r3
 8002cc8:	60fb      	str	r3, [r7, #12]
 8002cca:	f04f 0200 	mov.w	r2, #0
 8002cce:	f04f 0300 	mov.w	r3, #0
 8002cd2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002cd6:	4629      	mov	r1, r5
 8002cd8:	024b      	lsls	r3, r1, #9
 8002cda:	4621      	mov	r1, r4
 8002cdc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002ce0:	4621      	mov	r1, r4
 8002ce2:	024a      	lsls	r2, r1, #9
 8002ce4:	4610      	mov	r0, r2
 8002ce6:	4619      	mov	r1, r3
 8002ce8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002cea:	2200      	movs	r2, #0
 8002cec:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002cee:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002cf0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002cf4:	f7fd fa68 	bl	80001c8 <__aeabi_uldivmod>
 8002cf8:	4602      	mov	r2, r0
 8002cfa:	460b      	mov	r3, r1
 8002cfc:	4613      	mov	r3, r2
 8002cfe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002d00:	e058      	b.n	8002db4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d02:	4b38      	ldr	r3, [pc, #224]	@ (8002de4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002d04:	685b      	ldr	r3, [r3, #4]
 8002d06:	099b      	lsrs	r3, r3, #6
 8002d08:	2200      	movs	r2, #0
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	4611      	mov	r1, r2
 8002d0e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002d12:	623b      	str	r3, [r7, #32]
 8002d14:	2300      	movs	r3, #0
 8002d16:	627b      	str	r3, [r7, #36]	@ 0x24
 8002d18:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002d1c:	4642      	mov	r2, r8
 8002d1e:	464b      	mov	r3, r9
 8002d20:	f04f 0000 	mov.w	r0, #0
 8002d24:	f04f 0100 	mov.w	r1, #0
 8002d28:	0159      	lsls	r1, r3, #5
 8002d2a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002d2e:	0150      	lsls	r0, r2, #5
 8002d30:	4602      	mov	r2, r0
 8002d32:	460b      	mov	r3, r1
 8002d34:	4641      	mov	r1, r8
 8002d36:	ebb2 0a01 	subs.w	sl, r2, r1
 8002d3a:	4649      	mov	r1, r9
 8002d3c:	eb63 0b01 	sbc.w	fp, r3, r1
 8002d40:	f04f 0200 	mov.w	r2, #0
 8002d44:	f04f 0300 	mov.w	r3, #0
 8002d48:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002d4c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002d50:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002d54:	ebb2 040a 	subs.w	r4, r2, sl
 8002d58:	eb63 050b 	sbc.w	r5, r3, fp
 8002d5c:	f04f 0200 	mov.w	r2, #0
 8002d60:	f04f 0300 	mov.w	r3, #0
 8002d64:	00eb      	lsls	r3, r5, #3
 8002d66:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002d6a:	00e2      	lsls	r2, r4, #3
 8002d6c:	4614      	mov	r4, r2
 8002d6e:	461d      	mov	r5, r3
 8002d70:	4643      	mov	r3, r8
 8002d72:	18e3      	adds	r3, r4, r3
 8002d74:	603b      	str	r3, [r7, #0]
 8002d76:	464b      	mov	r3, r9
 8002d78:	eb45 0303 	adc.w	r3, r5, r3
 8002d7c:	607b      	str	r3, [r7, #4]
 8002d7e:	f04f 0200 	mov.w	r2, #0
 8002d82:	f04f 0300 	mov.w	r3, #0
 8002d86:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002d8a:	4629      	mov	r1, r5
 8002d8c:	028b      	lsls	r3, r1, #10
 8002d8e:	4621      	mov	r1, r4
 8002d90:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002d94:	4621      	mov	r1, r4
 8002d96:	028a      	lsls	r2, r1, #10
 8002d98:	4610      	mov	r0, r2
 8002d9a:	4619      	mov	r1, r3
 8002d9c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002d9e:	2200      	movs	r2, #0
 8002da0:	61bb      	str	r3, [r7, #24]
 8002da2:	61fa      	str	r2, [r7, #28]
 8002da4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002da8:	f7fd fa0e 	bl	80001c8 <__aeabi_uldivmod>
 8002dac:	4602      	mov	r2, r0
 8002dae:	460b      	mov	r3, r1
 8002db0:	4613      	mov	r3, r2
 8002db2:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002db4:	4b0b      	ldr	r3, [pc, #44]	@ (8002de4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002db6:	685b      	ldr	r3, [r3, #4]
 8002db8:	0c1b      	lsrs	r3, r3, #16
 8002dba:	f003 0303 	and.w	r3, r3, #3
 8002dbe:	3301      	adds	r3, #1
 8002dc0:	005b      	lsls	r3, r3, #1
 8002dc2:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8002dc4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002dc6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002dc8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002dcc:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002dce:	e002      	b.n	8002dd6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002dd0:	4b05      	ldr	r3, [pc, #20]	@ (8002de8 <HAL_RCC_GetSysClockFreq+0x204>)
 8002dd2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002dd4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002dd6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8002dd8:	4618      	mov	r0, r3
 8002dda:	3750      	adds	r7, #80	@ 0x50
 8002ddc:	46bd      	mov	sp, r7
 8002dde:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002de2:	bf00      	nop
 8002de4:	40023800 	.word	0x40023800
 8002de8:	00f42400 	.word	0x00f42400
 8002dec:	007a1200 	.word	0x007a1200

08002df0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002df0:	b480      	push	{r7}
 8002df2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002df4:	4b03      	ldr	r3, [pc, #12]	@ (8002e04 <HAL_RCC_GetHCLKFreq+0x14>)
 8002df6:	681b      	ldr	r3, [r3, #0]
}
 8002df8:	4618      	mov	r0, r3
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e00:	4770      	bx	lr
 8002e02:	bf00      	nop
 8002e04:	20000000 	.word	0x20000000

08002e08 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	b086      	sub	sp, #24
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]
 8002e10:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d101      	bne.n	8002e1c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8002e18:	2301      	movs	r3, #1
 8002e1a:	e097      	b.n	8002f4c <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002e22:	b2db      	uxtb	r3, r3
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d106      	bne.n	8002e36 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8002e30:	6878      	ldr	r0, [r7, #4]
 8002e32:	f7fd fd2b 	bl	800088c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	2202      	movs	r2, #2
 8002e3a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	689b      	ldr	r3, [r3, #8]
 8002e44:	687a      	ldr	r2, [r7, #4]
 8002e46:	6812      	ldr	r2, [r2, #0]
 8002e48:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002e4c:	f023 0307 	bic.w	r3, r3, #7
 8002e50:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681a      	ldr	r2, [r3, #0]
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	3304      	adds	r3, #4
 8002e5a:	4619      	mov	r1, r3
 8002e5c:	4610      	mov	r0, r2
 8002e5e:	f000 fa3f 	bl	80032e0 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	689b      	ldr	r3, [r3, #8]
 8002e68:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	699b      	ldr	r3, [r3, #24]
 8002e70:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	6a1b      	ldr	r3, [r3, #32]
 8002e78:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8002e7a:	683b      	ldr	r3, [r7, #0]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	697a      	ldr	r2, [r7, #20]
 8002e80:	4313      	orrs	r3, r2
 8002e82:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8002e84:	693b      	ldr	r3, [r7, #16]
 8002e86:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002e8a:	f023 0303 	bic.w	r3, r3, #3
 8002e8e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	689a      	ldr	r2, [r3, #8]
 8002e94:	683b      	ldr	r3, [r7, #0]
 8002e96:	699b      	ldr	r3, [r3, #24]
 8002e98:	021b      	lsls	r3, r3, #8
 8002e9a:	4313      	orrs	r3, r2
 8002e9c:	693a      	ldr	r2, [r7, #16]
 8002e9e:	4313      	orrs	r3, r2
 8002ea0:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8002ea2:	693b      	ldr	r3, [r7, #16]
 8002ea4:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8002ea8:	f023 030c 	bic.w	r3, r3, #12
 8002eac:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8002eae:	693b      	ldr	r3, [r7, #16]
 8002eb0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002eb4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002eb8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8002eba:	683b      	ldr	r3, [r7, #0]
 8002ebc:	68da      	ldr	r2, [r3, #12]
 8002ebe:	683b      	ldr	r3, [r7, #0]
 8002ec0:	69db      	ldr	r3, [r3, #28]
 8002ec2:	021b      	lsls	r3, r3, #8
 8002ec4:	4313      	orrs	r3, r2
 8002ec6:	693a      	ldr	r2, [r7, #16]
 8002ec8:	4313      	orrs	r3, r2
 8002eca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8002ecc:	683b      	ldr	r3, [r7, #0]
 8002ece:	691b      	ldr	r3, [r3, #16]
 8002ed0:	011a      	lsls	r2, r3, #4
 8002ed2:	683b      	ldr	r3, [r7, #0]
 8002ed4:	6a1b      	ldr	r3, [r3, #32]
 8002ed6:	031b      	lsls	r3, r3, #12
 8002ed8:	4313      	orrs	r3, r2
 8002eda:	693a      	ldr	r2, [r7, #16]
 8002edc:	4313      	orrs	r3, r2
 8002ede:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8002ee6:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8002eee:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8002ef0:	683b      	ldr	r3, [r7, #0]
 8002ef2:	685a      	ldr	r2, [r3, #4]
 8002ef4:	683b      	ldr	r3, [r7, #0]
 8002ef6:	695b      	ldr	r3, [r3, #20]
 8002ef8:	011b      	lsls	r3, r3, #4
 8002efa:	4313      	orrs	r3, r2
 8002efc:	68fa      	ldr	r2, [r7, #12]
 8002efe:	4313      	orrs	r3, r2
 8002f00:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	697a      	ldr	r2, [r7, #20]
 8002f08:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	693a      	ldr	r2, [r7, #16]
 8002f10:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	68fa      	ldr	r2, [r7, #12]
 8002f18:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	2201      	movs	r2, #1
 8002f1e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	2201      	movs	r2, #1
 8002f26:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	2201      	movs	r2, #1
 8002f2e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	2201      	movs	r2, #1
 8002f36:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	2201      	movs	r2, #1
 8002f3e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	2201      	movs	r2, #1
 8002f46:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002f4a:	2300      	movs	r3, #0
}
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	3718      	adds	r7, #24
 8002f50:	46bd      	mov	sp, r7
 8002f52:	bd80      	pop	{r7, pc}

08002f54 <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002f54:	b580      	push	{r7, lr}
 8002f56:	b084      	sub	sp, #16
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	6078      	str	r0, [r7, #4]
 8002f5c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002f64:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002f6c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002f74:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8002f7c:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8002f7e:	683b      	ldr	r3, [r7, #0]
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d110      	bne.n	8002fa6 <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8002f84:	7bfb      	ldrb	r3, [r7, #15]
 8002f86:	2b01      	cmp	r3, #1
 8002f88:	d102      	bne.n	8002f90 <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8002f8a:	7b7b      	ldrb	r3, [r7, #13]
 8002f8c:	2b01      	cmp	r3, #1
 8002f8e:	d001      	beq.n	8002f94 <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 8002f90:	2301      	movs	r3, #1
 8002f92:	e089      	b.n	80030a8 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	2202      	movs	r2, #2
 8002f98:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	2202      	movs	r2, #2
 8002fa0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002fa4:	e031      	b.n	800300a <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8002fa6:	683b      	ldr	r3, [r7, #0]
 8002fa8:	2b04      	cmp	r3, #4
 8002faa:	d110      	bne.n	8002fce <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8002fac:	7bbb      	ldrb	r3, [r7, #14]
 8002fae:	2b01      	cmp	r3, #1
 8002fb0:	d102      	bne.n	8002fb8 <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8002fb2:	7b3b      	ldrb	r3, [r7, #12]
 8002fb4:	2b01      	cmp	r3, #1
 8002fb6:	d001      	beq.n	8002fbc <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 8002fb8:	2301      	movs	r3, #1
 8002fba:	e075      	b.n	80030a8 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2202      	movs	r2, #2
 8002fc0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	2202      	movs	r2, #2
 8002fc8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002fcc:	e01d      	b.n	800300a <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8002fce:	7bfb      	ldrb	r3, [r7, #15]
 8002fd0:	2b01      	cmp	r3, #1
 8002fd2:	d108      	bne.n	8002fe6 <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8002fd4:	7bbb      	ldrb	r3, [r7, #14]
 8002fd6:	2b01      	cmp	r3, #1
 8002fd8:	d105      	bne.n	8002fe6 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8002fda:	7b7b      	ldrb	r3, [r7, #13]
 8002fdc:	2b01      	cmp	r3, #1
 8002fde:	d102      	bne.n	8002fe6 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8002fe0:	7b3b      	ldrb	r3, [r7, #12]
 8002fe2:	2b01      	cmp	r3, #1
 8002fe4:	d001      	beq.n	8002fea <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 8002fe6:	2301      	movs	r3, #1
 8002fe8:	e05e      	b.n	80030a8 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	2202      	movs	r2, #2
 8002fee:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	2202      	movs	r2, #2
 8002ff6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	2202      	movs	r2, #2
 8002ffe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	2202      	movs	r2, #2
 8003006:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 800300a:	683b      	ldr	r3, [r7, #0]
 800300c:	2b00      	cmp	r3, #0
 800300e:	d003      	beq.n	8003018 <HAL_TIM_Encoder_Start_IT+0xc4>
 8003010:	683b      	ldr	r3, [r7, #0]
 8003012:	2b04      	cmp	r3, #4
 8003014:	d010      	beq.n	8003038 <HAL_TIM_Encoder_Start_IT+0xe4>
 8003016:	e01f      	b.n	8003058 <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	2201      	movs	r2, #1
 800301e:	2100      	movs	r1, #0
 8003020:	4618      	mov	r0, r3
 8003022:	f000 fa09 	bl	8003438 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	68da      	ldr	r2, [r3, #12]
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f042 0202 	orr.w	r2, r2, #2
 8003034:	60da      	str	r2, [r3, #12]
      break;
 8003036:	e02e      	b.n	8003096 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	2201      	movs	r2, #1
 800303e:	2104      	movs	r1, #4
 8003040:	4618      	mov	r0, r3
 8003042:	f000 f9f9 	bl	8003438 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	68da      	ldr	r2, [r3, #12]
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f042 0204 	orr.w	r2, r2, #4
 8003054:	60da      	str	r2, [r3, #12]
      break;
 8003056:	e01e      	b.n	8003096 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	2201      	movs	r2, #1
 800305e:	2100      	movs	r1, #0
 8003060:	4618      	mov	r0, r3
 8003062:	f000 f9e9 	bl	8003438 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	2201      	movs	r2, #1
 800306c:	2104      	movs	r1, #4
 800306e:	4618      	mov	r0, r3
 8003070:	f000 f9e2 	bl	8003438 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	68da      	ldr	r2, [r3, #12]
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f042 0202 	orr.w	r2, r2, #2
 8003082:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	68da      	ldr	r2, [r3, #12]
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f042 0204 	orr.w	r2, r2, #4
 8003092:	60da      	str	r2, [r3, #12]
      break;
 8003094:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	681a      	ldr	r2, [r3, #0]
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f042 0201 	orr.w	r2, r2, #1
 80030a4:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80030a6:	2300      	movs	r3, #0
}
 80030a8:	4618      	mov	r0, r3
 80030aa:	3710      	adds	r7, #16
 80030ac:	46bd      	mov	sp, r7
 80030ae:	bd80      	pop	{r7, pc}

080030b0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80030b0:	b580      	push	{r7, lr}
 80030b2:	b084      	sub	sp, #16
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	68db      	ldr	r3, [r3, #12]
 80030be:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	691b      	ldr	r3, [r3, #16]
 80030c6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80030c8:	68bb      	ldr	r3, [r7, #8]
 80030ca:	f003 0302 	and.w	r3, r3, #2
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d020      	beq.n	8003114 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	f003 0302 	and.w	r3, r3, #2
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d01b      	beq.n	8003114 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f06f 0202 	mvn.w	r2, #2
 80030e4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	2201      	movs	r2, #1
 80030ea:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	699b      	ldr	r3, [r3, #24]
 80030f2:	f003 0303 	and.w	r3, r3, #3
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d003      	beq.n	8003102 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80030fa:	6878      	ldr	r0, [r7, #4]
 80030fc:	f7fd f9fa 	bl	80004f4 <HAL_TIM_IC_CaptureCallback>
 8003100:	e005      	b.n	800310e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003102:	6878      	ldr	r0, [r7, #4]
 8003104:	f000 f8ce 	bl	80032a4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003108:	6878      	ldr	r0, [r7, #4]
 800310a:	f000 f8d5 	bl	80032b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	2200      	movs	r2, #0
 8003112:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003114:	68bb      	ldr	r3, [r7, #8]
 8003116:	f003 0304 	and.w	r3, r3, #4
 800311a:	2b00      	cmp	r3, #0
 800311c:	d020      	beq.n	8003160 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	f003 0304 	and.w	r3, r3, #4
 8003124:	2b00      	cmp	r3, #0
 8003126:	d01b      	beq.n	8003160 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f06f 0204 	mvn.w	r2, #4
 8003130:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	2202      	movs	r2, #2
 8003136:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	699b      	ldr	r3, [r3, #24]
 800313e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003142:	2b00      	cmp	r3, #0
 8003144:	d003      	beq.n	800314e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003146:	6878      	ldr	r0, [r7, #4]
 8003148:	f7fd f9d4 	bl	80004f4 <HAL_TIM_IC_CaptureCallback>
 800314c:	e005      	b.n	800315a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800314e:	6878      	ldr	r0, [r7, #4]
 8003150:	f000 f8a8 	bl	80032a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003154:	6878      	ldr	r0, [r7, #4]
 8003156:	f000 f8af 	bl	80032b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	2200      	movs	r2, #0
 800315e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003160:	68bb      	ldr	r3, [r7, #8]
 8003162:	f003 0308 	and.w	r3, r3, #8
 8003166:	2b00      	cmp	r3, #0
 8003168:	d020      	beq.n	80031ac <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	f003 0308 	and.w	r3, r3, #8
 8003170:	2b00      	cmp	r3, #0
 8003172:	d01b      	beq.n	80031ac <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f06f 0208 	mvn.w	r2, #8
 800317c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	2204      	movs	r2, #4
 8003182:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	69db      	ldr	r3, [r3, #28]
 800318a:	f003 0303 	and.w	r3, r3, #3
 800318e:	2b00      	cmp	r3, #0
 8003190:	d003      	beq.n	800319a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003192:	6878      	ldr	r0, [r7, #4]
 8003194:	f7fd f9ae 	bl	80004f4 <HAL_TIM_IC_CaptureCallback>
 8003198:	e005      	b.n	80031a6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800319a:	6878      	ldr	r0, [r7, #4]
 800319c:	f000 f882 	bl	80032a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80031a0:	6878      	ldr	r0, [r7, #4]
 80031a2:	f000 f889 	bl	80032b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	2200      	movs	r2, #0
 80031aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80031ac:	68bb      	ldr	r3, [r7, #8]
 80031ae:	f003 0310 	and.w	r3, r3, #16
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d020      	beq.n	80031f8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	f003 0310 	and.w	r3, r3, #16
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d01b      	beq.n	80031f8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f06f 0210 	mvn.w	r2, #16
 80031c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	2208      	movs	r2, #8
 80031ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	69db      	ldr	r3, [r3, #28]
 80031d6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d003      	beq.n	80031e6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80031de:	6878      	ldr	r0, [r7, #4]
 80031e0:	f7fd f988 	bl	80004f4 <HAL_TIM_IC_CaptureCallback>
 80031e4:	e005      	b.n	80031f2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80031e6:	6878      	ldr	r0, [r7, #4]
 80031e8:	f000 f85c 	bl	80032a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80031ec:	6878      	ldr	r0, [r7, #4]
 80031ee:	f000 f863 	bl	80032b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	2200      	movs	r2, #0
 80031f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80031f8:	68bb      	ldr	r3, [r7, #8]
 80031fa:	f003 0301 	and.w	r3, r3, #1
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d00c      	beq.n	800321c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	f003 0301 	and.w	r3, r3, #1
 8003208:	2b00      	cmp	r3, #0
 800320a:	d007      	beq.n	800321c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f06f 0201 	mvn.w	r2, #1
 8003214:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003216:	6878      	ldr	r0, [r7, #4]
 8003218:	f000 f83a 	bl	8003290 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800321c:	68bb      	ldr	r3, [r7, #8]
 800321e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003222:	2b00      	cmp	r3, #0
 8003224:	d00c      	beq.n	8003240 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800322c:	2b00      	cmp	r3, #0
 800322e:	d007      	beq.n	8003240 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003238:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800323a:	6878      	ldr	r0, [r7, #4]
 800323c:	f000 f9a8 	bl	8003590 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003240:	68bb      	ldr	r3, [r7, #8]
 8003242:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003246:	2b00      	cmp	r3, #0
 8003248:	d00c      	beq.n	8003264 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003250:	2b00      	cmp	r3, #0
 8003252:	d007      	beq.n	8003264 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800325c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800325e:	6878      	ldr	r0, [r7, #4]
 8003260:	f000 f834 	bl	80032cc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003264:	68bb      	ldr	r3, [r7, #8]
 8003266:	f003 0320 	and.w	r3, r3, #32
 800326a:	2b00      	cmp	r3, #0
 800326c:	d00c      	beq.n	8003288 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	f003 0320 	and.w	r3, r3, #32
 8003274:	2b00      	cmp	r3, #0
 8003276:	d007      	beq.n	8003288 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f06f 0220 	mvn.w	r2, #32
 8003280:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003282:	6878      	ldr	r0, [r7, #4]
 8003284:	f000 f97a 	bl	800357c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003288:	bf00      	nop
 800328a:	3710      	adds	r7, #16
 800328c:	46bd      	mov	sp, r7
 800328e:	bd80      	pop	{r7, pc}

08003290 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003290:	b480      	push	{r7}
 8003292:	b083      	sub	sp, #12
 8003294:	af00      	add	r7, sp, #0
 8003296:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003298:	bf00      	nop
 800329a:	370c      	adds	r7, #12
 800329c:	46bd      	mov	sp, r7
 800329e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a2:	4770      	bx	lr

080032a4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80032a4:	b480      	push	{r7}
 80032a6:	b083      	sub	sp, #12
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80032ac:	bf00      	nop
 80032ae:	370c      	adds	r7, #12
 80032b0:	46bd      	mov	sp, r7
 80032b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b6:	4770      	bx	lr

080032b8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80032b8:	b480      	push	{r7}
 80032ba:	b083      	sub	sp, #12
 80032bc:	af00      	add	r7, sp, #0
 80032be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80032c0:	bf00      	nop
 80032c2:	370c      	adds	r7, #12
 80032c4:	46bd      	mov	sp, r7
 80032c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ca:	4770      	bx	lr

080032cc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80032cc:	b480      	push	{r7}
 80032ce:	b083      	sub	sp, #12
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80032d4:	bf00      	nop
 80032d6:	370c      	adds	r7, #12
 80032d8:	46bd      	mov	sp, r7
 80032da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032de:	4770      	bx	lr

080032e0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80032e0:	b480      	push	{r7}
 80032e2:	b085      	sub	sp, #20
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]
 80032e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	4a46      	ldr	r2, [pc, #280]	@ (800340c <TIM_Base_SetConfig+0x12c>)
 80032f4:	4293      	cmp	r3, r2
 80032f6:	d013      	beq.n	8003320 <TIM_Base_SetConfig+0x40>
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80032fe:	d00f      	beq.n	8003320 <TIM_Base_SetConfig+0x40>
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	4a43      	ldr	r2, [pc, #268]	@ (8003410 <TIM_Base_SetConfig+0x130>)
 8003304:	4293      	cmp	r3, r2
 8003306:	d00b      	beq.n	8003320 <TIM_Base_SetConfig+0x40>
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	4a42      	ldr	r2, [pc, #264]	@ (8003414 <TIM_Base_SetConfig+0x134>)
 800330c:	4293      	cmp	r3, r2
 800330e:	d007      	beq.n	8003320 <TIM_Base_SetConfig+0x40>
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	4a41      	ldr	r2, [pc, #260]	@ (8003418 <TIM_Base_SetConfig+0x138>)
 8003314:	4293      	cmp	r3, r2
 8003316:	d003      	beq.n	8003320 <TIM_Base_SetConfig+0x40>
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	4a40      	ldr	r2, [pc, #256]	@ (800341c <TIM_Base_SetConfig+0x13c>)
 800331c:	4293      	cmp	r3, r2
 800331e:	d108      	bne.n	8003332 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003326:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003328:	683b      	ldr	r3, [r7, #0]
 800332a:	685b      	ldr	r3, [r3, #4]
 800332c:	68fa      	ldr	r2, [r7, #12]
 800332e:	4313      	orrs	r3, r2
 8003330:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	4a35      	ldr	r2, [pc, #212]	@ (800340c <TIM_Base_SetConfig+0x12c>)
 8003336:	4293      	cmp	r3, r2
 8003338:	d02b      	beq.n	8003392 <TIM_Base_SetConfig+0xb2>
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003340:	d027      	beq.n	8003392 <TIM_Base_SetConfig+0xb2>
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	4a32      	ldr	r2, [pc, #200]	@ (8003410 <TIM_Base_SetConfig+0x130>)
 8003346:	4293      	cmp	r3, r2
 8003348:	d023      	beq.n	8003392 <TIM_Base_SetConfig+0xb2>
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	4a31      	ldr	r2, [pc, #196]	@ (8003414 <TIM_Base_SetConfig+0x134>)
 800334e:	4293      	cmp	r3, r2
 8003350:	d01f      	beq.n	8003392 <TIM_Base_SetConfig+0xb2>
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	4a30      	ldr	r2, [pc, #192]	@ (8003418 <TIM_Base_SetConfig+0x138>)
 8003356:	4293      	cmp	r3, r2
 8003358:	d01b      	beq.n	8003392 <TIM_Base_SetConfig+0xb2>
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	4a2f      	ldr	r2, [pc, #188]	@ (800341c <TIM_Base_SetConfig+0x13c>)
 800335e:	4293      	cmp	r3, r2
 8003360:	d017      	beq.n	8003392 <TIM_Base_SetConfig+0xb2>
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	4a2e      	ldr	r2, [pc, #184]	@ (8003420 <TIM_Base_SetConfig+0x140>)
 8003366:	4293      	cmp	r3, r2
 8003368:	d013      	beq.n	8003392 <TIM_Base_SetConfig+0xb2>
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	4a2d      	ldr	r2, [pc, #180]	@ (8003424 <TIM_Base_SetConfig+0x144>)
 800336e:	4293      	cmp	r3, r2
 8003370:	d00f      	beq.n	8003392 <TIM_Base_SetConfig+0xb2>
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	4a2c      	ldr	r2, [pc, #176]	@ (8003428 <TIM_Base_SetConfig+0x148>)
 8003376:	4293      	cmp	r3, r2
 8003378:	d00b      	beq.n	8003392 <TIM_Base_SetConfig+0xb2>
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	4a2b      	ldr	r2, [pc, #172]	@ (800342c <TIM_Base_SetConfig+0x14c>)
 800337e:	4293      	cmp	r3, r2
 8003380:	d007      	beq.n	8003392 <TIM_Base_SetConfig+0xb2>
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	4a2a      	ldr	r2, [pc, #168]	@ (8003430 <TIM_Base_SetConfig+0x150>)
 8003386:	4293      	cmp	r3, r2
 8003388:	d003      	beq.n	8003392 <TIM_Base_SetConfig+0xb2>
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	4a29      	ldr	r2, [pc, #164]	@ (8003434 <TIM_Base_SetConfig+0x154>)
 800338e:	4293      	cmp	r3, r2
 8003390:	d108      	bne.n	80033a4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003398:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800339a:	683b      	ldr	r3, [r7, #0]
 800339c:	68db      	ldr	r3, [r3, #12]
 800339e:	68fa      	ldr	r2, [r7, #12]
 80033a0:	4313      	orrs	r3, r2
 80033a2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80033aa:	683b      	ldr	r3, [r7, #0]
 80033ac:	695b      	ldr	r3, [r3, #20]
 80033ae:	4313      	orrs	r3, r2
 80033b0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	68fa      	ldr	r2, [r7, #12]
 80033b6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80033b8:	683b      	ldr	r3, [r7, #0]
 80033ba:	689a      	ldr	r2, [r3, #8]
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80033c0:	683b      	ldr	r3, [r7, #0]
 80033c2:	681a      	ldr	r2, [r3, #0]
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	4a10      	ldr	r2, [pc, #64]	@ (800340c <TIM_Base_SetConfig+0x12c>)
 80033cc:	4293      	cmp	r3, r2
 80033ce:	d003      	beq.n	80033d8 <TIM_Base_SetConfig+0xf8>
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	4a12      	ldr	r2, [pc, #72]	@ (800341c <TIM_Base_SetConfig+0x13c>)
 80033d4:	4293      	cmp	r3, r2
 80033d6:	d103      	bne.n	80033e0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80033d8:	683b      	ldr	r3, [r7, #0]
 80033da:	691a      	ldr	r2, [r3, #16]
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	2201      	movs	r2, #1
 80033e4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	691b      	ldr	r3, [r3, #16]
 80033ea:	f003 0301 	and.w	r3, r3, #1
 80033ee:	2b01      	cmp	r3, #1
 80033f0:	d105      	bne.n	80033fe <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	691b      	ldr	r3, [r3, #16]
 80033f6:	f023 0201 	bic.w	r2, r3, #1
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	611a      	str	r2, [r3, #16]
  }
}
 80033fe:	bf00      	nop
 8003400:	3714      	adds	r7, #20
 8003402:	46bd      	mov	sp, r7
 8003404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003408:	4770      	bx	lr
 800340a:	bf00      	nop
 800340c:	40010000 	.word	0x40010000
 8003410:	40000400 	.word	0x40000400
 8003414:	40000800 	.word	0x40000800
 8003418:	40000c00 	.word	0x40000c00
 800341c:	40010400 	.word	0x40010400
 8003420:	40014000 	.word	0x40014000
 8003424:	40014400 	.word	0x40014400
 8003428:	40014800 	.word	0x40014800
 800342c:	40001800 	.word	0x40001800
 8003430:	40001c00 	.word	0x40001c00
 8003434:	40002000 	.word	0x40002000

08003438 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003438:	b480      	push	{r7}
 800343a:	b087      	sub	sp, #28
 800343c:	af00      	add	r7, sp, #0
 800343e:	60f8      	str	r0, [r7, #12]
 8003440:	60b9      	str	r1, [r7, #8]
 8003442:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003444:	68bb      	ldr	r3, [r7, #8]
 8003446:	f003 031f 	and.w	r3, r3, #31
 800344a:	2201      	movs	r2, #1
 800344c:	fa02 f303 	lsl.w	r3, r2, r3
 8003450:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	6a1a      	ldr	r2, [r3, #32]
 8003456:	697b      	ldr	r3, [r7, #20]
 8003458:	43db      	mvns	r3, r3
 800345a:	401a      	ands	r2, r3
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	6a1a      	ldr	r2, [r3, #32]
 8003464:	68bb      	ldr	r3, [r7, #8]
 8003466:	f003 031f 	and.w	r3, r3, #31
 800346a:	6879      	ldr	r1, [r7, #4]
 800346c:	fa01 f303 	lsl.w	r3, r1, r3
 8003470:	431a      	orrs	r2, r3
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	621a      	str	r2, [r3, #32]
}
 8003476:	bf00      	nop
 8003478:	371c      	adds	r7, #28
 800347a:	46bd      	mov	sp, r7
 800347c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003480:	4770      	bx	lr
	...

08003484 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003484:	b480      	push	{r7}
 8003486:	b085      	sub	sp, #20
 8003488:	af00      	add	r7, sp, #0
 800348a:	6078      	str	r0, [r7, #4]
 800348c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003494:	2b01      	cmp	r3, #1
 8003496:	d101      	bne.n	800349c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003498:	2302      	movs	r3, #2
 800349a:	e05a      	b.n	8003552 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	2201      	movs	r2, #1
 80034a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	2202      	movs	r2, #2
 80034a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	685b      	ldr	r3, [r3, #4]
 80034b2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	689b      	ldr	r3, [r3, #8]
 80034ba:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80034c2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80034c4:	683b      	ldr	r3, [r7, #0]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	68fa      	ldr	r2, [r7, #12]
 80034ca:	4313      	orrs	r3, r2
 80034cc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	68fa      	ldr	r2, [r7, #12]
 80034d4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	4a21      	ldr	r2, [pc, #132]	@ (8003560 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80034dc:	4293      	cmp	r3, r2
 80034de:	d022      	beq.n	8003526 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80034e8:	d01d      	beq.n	8003526 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	4a1d      	ldr	r2, [pc, #116]	@ (8003564 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80034f0:	4293      	cmp	r3, r2
 80034f2:	d018      	beq.n	8003526 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	4a1b      	ldr	r2, [pc, #108]	@ (8003568 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80034fa:	4293      	cmp	r3, r2
 80034fc:	d013      	beq.n	8003526 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	4a1a      	ldr	r2, [pc, #104]	@ (800356c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003504:	4293      	cmp	r3, r2
 8003506:	d00e      	beq.n	8003526 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	4a18      	ldr	r2, [pc, #96]	@ (8003570 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800350e:	4293      	cmp	r3, r2
 8003510:	d009      	beq.n	8003526 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	4a17      	ldr	r2, [pc, #92]	@ (8003574 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003518:	4293      	cmp	r3, r2
 800351a:	d004      	beq.n	8003526 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	4a15      	ldr	r2, [pc, #84]	@ (8003578 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003522:	4293      	cmp	r3, r2
 8003524:	d10c      	bne.n	8003540 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003526:	68bb      	ldr	r3, [r7, #8]
 8003528:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800352c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800352e:	683b      	ldr	r3, [r7, #0]
 8003530:	685b      	ldr	r3, [r3, #4]
 8003532:	68ba      	ldr	r2, [r7, #8]
 8003534:	4313      	orrs	r3, r2
 8003536:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	68ba      	ldr	r2, [r7, #8]
 800353e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	2201      	movs	r2, #1
 8003544:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	2200      	movs	r2, #0
 800354c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003550:	2300      	movs	r3, #0
}
 8003552:	4618      	mov	r0, r3
 8003554:	3714      	adds	r7, #20
 8003556:	46bd      	mov	sp, r7
 8003558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355c:	4770      	bx	lr
 800355e:	bf00      	nop
 8003560:	40010000 	.word	0x40010000
 8003564:	40000400 	.word	0x40000400
 8003568:	40000800 	.word	0x40000800
 800356c:	40000c00 	.word	0x40000c00
 8003570:	40010400 	.word	0x40010400
 8003574:	40014000 	.word	0x40014000
 8003578:	40001800 	.word	0x40001800

0800357c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800357c:	b480      	push	{r7}
 800357e:	b083      	sub	sp, #12
 8003580:	af00      	add	r7, sp, #0
 8003582:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003584:	bf00      	nop
 8003586:	370c      	adds	r7, #12
 8003588:	46bd      	mov	sp, r7
 800358a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800358e:	4770      	bx	lr

08003590 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003590:	b480      	push	{r7}
 8003592:	b083      	sub	sp, #12
 8003594:	af00      	add	r7, sp, #0
 8003596:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003598:	bf00      	nop
 800359a:	370c      	adds	r7, #12
 800359c:	46bd      	mov	sp, r7
 800359e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a2:	4770      	bx	lr

080035a4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80035a4:	b084      	sub	sp, #16
 80035a6:	b580      	push	{r7, lr}
 80035a8:	b084      	sub	sp, #16
 80035aa:	af00      	add	r7, sp, #0
 80035ac:	6078      	str	r0, [r7, #4]
 80035ae:	f107 001c 	add.w	r0, r7, #28
 80035b2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80035b6:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80035ba:	2b01      	cmp	r3, #1
 80035bc:	d123      	bne.n	8003606 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80035c2:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	68db      	ldr	r3, [r3, #12]
 80035ce:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 80035d2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80035d6:	687a      	ldr	r2, [r7, #4]
 80035d8:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	68db      	ldr	r3, [r3, #12]
 80035de:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80035e6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80035ea:	2b01      	cmp	r3, #1
 80035ec:	d105      	bne.n	80035fa <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	68db      	ldr	r3, [r3, #12]
 80035f2:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80035fa:	6878      	ldr	r0, [r7, #4]
 80035fc:	f001 fae8 	bl	8004bd0 <USB_CoreReset>
 8003600:	4603      	mov	r3, r0
 8003602:	73fb      	strb	r3, [r7, #15]
 8003604:	e01b      	b.n	800363e <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	68db      	ldr	r3, [r3, #12]
 800360a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003612:	6878      	ldr	r0, [r7, #4]
 8003614:	f001 fadc 	bl	8004bd0 <USB_CoreReset>
 8003618:	4603      	mov	r3, r0
 800361a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800361c:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8003620:	2b00      	cmp	r3, #0
 8003622:	d106      	bne.n	8003632 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003628:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	639a      	str	r2, [r3, #56]	@ 0x38
 8003630:	e005      	b.n	800363e <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003636:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800363e:	7fbb      	ldrb	r3, [r7, #30]
 8003640:	2b01      	cmp	r3, #1
 8003642:	d10b      	bne.n	800365c <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	689b      	ldr	r3, [r3, #8]
 8003648:	f043 0206 	orr.w	r2, r3, #6
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	689b      	ldr	r3, [r3, #8]
 8003654:	f043 0220 	orr.w	r2, r3, #32
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800365c:	7bfb      	ldrb	r3, [r7, #15]
}
 800365e:	4618      	mov	r0, r3
 8003660:	3710      	adds	r7, #16
 8003662:	46bd      	mov	sp, r7
 8003664:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003668:	b004      	add	sp, #16
 800366a:	4770      	bx	lr

0800366c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800366c:	b480      	push	{r7}
 800366e:	b087      	sub	sp, #28
 8003670:	af00      	add	r7, sp, #0
 8003672:	60f8      	str	r0, [r7, #12]
 8003674:	60b9      	str	r1, [r7, #8]
 8003676:	4613      	mov	r3, r2
 8003678:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800367a:	79fb      	ldrb	r3, [r7, #7]
 800367c:	2b02      	cmp	r3, #2
 800367e:	d165      	bne.n	800374c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8003680:	68bb      	ldr	r3, [r7, #8]
 8003682:	4a41      	ldr	r2, [pc, #260]	@ (8003788 <USB_SetTurnaroundTime+0x11c>)
 8003684:	4293      	cmp	r3, r2
 8003686:	d906      	bls.n	8003696 <USB_SetTurnaroundTime+0x2a>
 8003688:	68bb      	ldr	r3, [r7, #8]
 800368a:	4a40      	ldr	r2, [pc, #256]	@ (800378c <USB_SetTurnaroundTime+0x120>)
 800368c:	4293      	cmp	r3, r2
 800368e:	d202      	bcs.n	8003696 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8003690:	230f      	movs	r3, #15
 8003692:	617b      	str	r3, [r7, #20]
 8003694:	e062      	b.n	800375c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8003696:	68bb      	ldr	r3, [r7, #8]
 8003698:	4a3c      	ldr	r2, [pc, #240]	@ (800378c <USB_SetTurnaroundTime+0x120>)
 800369a:	4293      	cmp	r3, r2
 800369c:	d306      	bcc.n	80036ac <USB_SetTurnaroundTime+0x40>
 800369e:	68bb      	ldr	r3, [r7, #8]
 80036a0:	4a3b      	ldr	r2, [pc, #236]	@ (8003790 <USB_SetTurnaroundTime+0x124>)
 80036a2:	4293      	cmp	r3, r2
 80036a4:	d202      	bcs.n	80036ac <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80036a6:	230e      	movs	r3, #14
 80036a8:	617b      	str	r3, [r7, #20]
 80036aa:	e057      	b.n	800375c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80036ac:	68bb      	ldr	r3, [r7, #8]
 80036ae:	4a38      	ldr	r2, [pc, #224]	@ (8003790 <USB_SetTurnaroundTime+0x124>)
 80036b0:	4293      	cmp	r3, r2
 80036b2:	d306      	bcc.n	80036c2 <USB_SetTurnaroundTime+0x56>
 80036b4:	68bb      	ldr	r3, [r7, #8]
 80036b6:	4a37      	ldr	r2, [pc, #220]	@ (8003794 <USB_SetTurnaroundTime+0x128>)
 80036b8:	4293      	cmp	r3, r2
 80036ba:	d202      	bcs.n	80036c2 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80036bc:	230d      	movs	r3, #13
 80036be:	617b      	str	r3, [r7, #20]
 80036c0:	e04c      	b.n	800375c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80036c2:	68bb      	ldr	r3, [r7, #8]
 80036c4:	4a33      	ldr	r2, [pc, #204]	@ (8003794 <USB_SetTurnaroundTime+0x128>)
 80036c6:	4293      	cmp	r3, r2
 80036c8:	d306      	bcc.n	80036d8 <USB_SetTurnaroundTime+0x6c>
 80036ca:	68bb      	ldr	r3, [r7, #8]
 80036cc:	4a32      	ldr	r2, [pc, #200]	@ (8003798 <USB_SetTurnaroundTime+0x12c>)
 80036ce:	4293      	cmp	r3, r2
 80036d0:	d802      	bhi.n	80036d8 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80036d2:	230c      	movs	r3, #12
 80036d4:	617b      	str	r3, [r7, #20]
 80036d6:	e041      	b.n	800375c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80036d8:	68bb      	ldr	r3, [r7, #8]
 80036da:	4a2f      	ldr	r2, [pc, #188]	@ (8003798 <USB_SetTurnaroundTime+0x12c>)
 80036dc:	4293      	cmp	r3, r2
 80036de:	d906      	bls.n	80036ee <USB_SetTurnaroundTime+0x82>
 80036e0:	68bb      	ldr	r3, [r7, #8]
 80036e2:	4a2e      	ldr	r2, [pc, #184]	@ (800379c <USB_SetTurnaroundTime+0x130>)
 80036e4:	4293      	cmp	r3, r2
 80036e6:	d802      	bhi.n	80036ee <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80036e8:	230b      	movs	r3, #11
 80036ea:	617b      	str	r3, [r7, #20]
 80036ec:	e036      	b.n	800375c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80036ee:	68bb      	ldr	r3, [r7, #8]
 80036f0:	4a2a      	ldr	r2, [pc, #168]	@ (800379c <USB_SetTurnaroundTime+0x130>)
 80036f2:	4293      	cmp	r3, r2
 80036f4:	d906      	bls.n	8003704 <USB_SetTurnaroundTime+0x98>
 80036f6:	68bb      	ldr	r3, [r7, #8]
 80036f8:	4a29      	ldr	r2, [pc, #164]	@ (80037a0 <USB_SetTurnaroundTime+0x134>)
 80036fa:	4293      	cmp	r3, r2
 80036fc:	d802      	bhi.n	8003704 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80036fe:	230a      	movs	r3, #10
 8003700:	617b      	str	r3, [r7, #20]
 8003702:	e02b      	b.n	800375c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8003704:	68bb      	ldr	r3, [r7, #8]
 8003706:	4a26      	ldr	r2, [pc, #152]	@ (80037a0 <USB_SetTurnaroundTime+0x134>)
 8003708:	4293      	cmp	r3, r2
 800370a:	d906      	bls.n	800371a <USB_SetTurnaroundTime+0xae>
 800370c:	68bb      	ldr	r3, [r7, #8]
 800370e:	4a25      	ldr	r2, [pc, #148]	@ (80037a4 <USB_SetTurnaroundTime+0x138>)
 8003710:	4293      	cmp	r3, r2
 8003712:	d202      	bcs.n	800371a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8003714:	2309      	movs	r3, #9
 8003716:	617b      	str	r3, [r7, #20]
 8003718:	e020      	b.n	800375c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800371a:	68bb      	ldr	r3, [r7, #8]
 800371c:	4a21      	ldr	r2, [pc, #132]	@ (80037a4 <USB_SetTurnaroundTime+0x138>)
 800371e:	4293      	cmp	r3, r2
 8003720:	d306      	bcc.n	8003730 <USB_SetTurnaroundTime+0xc4>
 8003722:	68bb      	ldr	r3, [r7, #8]
 8003724:	4a20      	ldr	r2, [pc, #128]	@ (80037a8 <USB_SetTurnaroundTime+0x13c>)
 8003726:	4293      	cmp	r3, r2
 8003728:	d802      	bhi.n	8003730 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800372a:	2308      	movs	r3, #8
 800372c:	617b      	str	r3, [r7, #20]
 800372e:	e015      	b.n	800375c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8003730:	68bb      	ldr	r3, [r7, #8]
 8003732:	4a1d      	ldr	r2, [pc, #116]	@ (80037a8 <USB_SetTurnaroundTime+0x13c>)
 8003734:	4293      	cmp	r3, r2
 8003736:	d906      	bls.n	8003746 <USB_SetTurnaroundTime+0xda>
 8003738:	68bb      	ldr	r3, [r7, #8]
 800373a:	4a1c      	ldr	r2, [pc, #112]	@ (80037ac <USB_SetTurnaroundTime+0x140>)
 800373c:	4293      	cmp	r3, r2
 800373e:	d202      	bcs.n	8003746 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8003740:	2307      	movs	r3, #7
 8003742:	617b      	str	r3, [r7, #20]
 8003744:	e00a      	b.n	800375c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8003746:	2306      	movs	r3, #6
 8003748:	617b      	str	r3, [r7, #20]
 800374a:	e007      	b.n	800375c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800374c:	79fb      	ldrb	r3, [r7, #7]
 800374e:	2b00      	cmp	r3, #0
 8003750:	d102      	bne.n	8003758 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8003752:	2309      	movs	r3, #9
 8003754:	617b      	str	r3, [r7, #20]
 8003756:	e001      	b.n	800375c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8003758:	2309      	movs	r3, #9
 800375a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	68db      	ldr	r3, [r3, #12]
 8003760:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	68da      	ldr	r2, [r3, #12]
 800376c:	697b      	ldr	r3, [r7, #20]
 800376e:	029b      	lsls	r3, r3, #10
 8003770:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8003774:	431a      	orrs	r2, r3
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800377a:	2300      	movs	r3, #0
}
 800377c:	4618      	mov	r0, r3
 800377e:	371c      	adds	r7, #28
 8003780:	46bd      	mov	sp, r7
 8003782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003786:	4770      	bx	lr
 8003788:	00d8acbf 	.word	0x00d8acbf
 800378c:	00e4e1c0 	.word	0x00e4e1c0
 8003790:	00f42400 	.word	0x00f42400
 8003794:	01067380 	.word	0x01067380
 8003798:	011a499f 	.word	0x011a499f
 800379c:	01312cff 	.word	0x01312cff
 80037a0:	014ca43f 	.word	0x014ca43f
 80037a4:	016e3600 	.word	0x016e3600
 80037a8:	01a6ab1f 	.word	0x01a6ab1f
 80037ac:	01e84800 	.word	0x01e84800

080037b0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80037b0:	b480      	push	{r7}
 80037b2:	b083      	sub	sp, #12
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	689b      	ldr	r3, [r3, #8]
 80037bc:	f043 0201 	orr.w	r2, r3, #1
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80037c4:	2300      	movs	r3, #0
}
 80037c6:	4618      	mov	r0, r3
 80037c8:	370c      	adds	r7, #12
 80037ca:	46bd      	mov	sp, r7
 80037cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d0:	4770      	bx	lr

080037d2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80037d2:	b480      	push	{r7}
 80037d4:	b083      	sub	sp, #12
 80037d6:	af00      	add	r7, sp, #0
 80037d8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	689b      	ldr	r3, [r3, #8]
 80037de:	f023 0201 	bic.w	r2, r3, #1
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80037e6:	2300      	movs	r3, #0
}
 80037e8:	4618      	mov	r0, r3
 80037ea:	370c      	adds	r7, #12
 80037ec:	46bd      	mov	sp, r7
 80037ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f2:	4770      	bx	lr

080037f4 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80037f4:	b580      	push	{r7, lr}
 80037f6:	b084      	sub	sp, #16
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	6078      	str	r0, [r7, #4]
 80037fc:	460b      	mov	r3, r1
 80037fe:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8003800:	2300      	movs	r3, #0
 8003802:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	68db      	ldr	r3, [r3, #12]
 8003808:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003810:	78fb      	ldrb	r3, [r7, #3]
 8003812:	2b01      	cmp	r3, #1
 8003814:	d115      	bne.n	8003842 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	68db      	ldr	r3, [r3, #12]
 800381a:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8003822:	200a      	movs	r0, #10
 8003824:	f7fd f974 	bl	8000b10 <HAL_Delay>
      ms += 10U;
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	330a      	adds	r3, #10
 800382c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800382e:	6878      	ldr	r0, [r7, #4]
 8003830:	f001 f93f 	bl	8004ab2 <USB_GetMode>
 8003834:	4603      	mov	r3, r0
 8003836:	2b01      	cmp	r3, #1
 8003838:	d01e      	beq.n	8003878 <USB_SetCurrentMode+0x84>
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	2bc7      	cmp	r3, #199	@ 0xc7
 800383e:	d9f0      	bls.n	8003822 <USB_SetCurrentMode+0x2e>
 8003840:	e01a      	b.n	8003878 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8003842:	78fb      	ldrb	r3, [r7, #3]
 8003844:	2b00      	cmp	r3, #0
 8003846:	d115      	bne.n	8003874 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	68db      	ldr	r3, [r3, #12]
 800384c:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8003854:	200a      	movs	r0, #10
 8003856:	f7fd f95b 	bl	8000b10 <HAL_Delay>
      ms += 10U;
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	330a      	adds	r3, #10
 800385e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8003860:	6878      	ldr	r0, [r7, #4]
 8003862:	f001 f926 	bl	8004ab2 <USB_GetMode>
 8003866:	4603      	mov	r3, r0
 8003868:	2b00      	cmp	r3, #0
 800386a:	d005      	beq.n	8003878 <USB_SetCurrentMode+0x84>
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	2bc7      	cmp	r3, #199	@ 0xc7
 8003870:	d9f0      	bls.n	8003854 <USB_SetCurrentMode+0x60>
 8003872:	e001      	b.n	8003878 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8003874:	2301      	movs	r3, #1
 8003876:	e005      	b.n	8003884 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	2bc8      	cmp	r3, #200	@ 0xc8
 800387c:	d101      	bne.n	8003882 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800387e:	2301      	movs	r3, #1
 8003880:	e000      	b.n	8003884 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8003882:	2300      	movs	r3, #0
}
 8003884:	4618      	mov	r0, r3
 8003886:	3710      	adds	r7, #16
 8003888:	46bd      	mov	sp, r7
 800388a:	bd80      	pop	{r7, pc}

0800388c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800388c:	b084      	sub	sp, #16
 800388e:	b580      	push	{r7, lr}
 8003890:	b086      	sub	sp, #24
 8003892:	af00      	add	r7, sp, #0
 8003894:	6078      	str	r0, [r7, #4]
 8003896:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800389a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800389e:	2300      	movs	r3, #0
 80038a0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80038a6:	2300      	movs	r3, #0
 80038a8:	613b      	str	r3, [r7, #16]
 80038aa:	e009      	b.n	80038c0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80038ac:	687a      	ldr	r2, [r7, #4]
 80038ae:	693b      	ldr	r3, [r7, #16]
 80038b0:	3340      	adds	r3, #64	@ 0x40
 80038b2:	009b      	lsls	r3, r3, #2
 80038b4:	4413      	add	r3, r2
 80038b6:	2200      	movs	r2, #0
 80038b8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80038ba:	693b      	ldr	r3, [r7, #16]
 80038bc:	3301      	adds	r3, #1
 80038be:	613b      	str	r3, [r7, #16]
 80038c0:	693b      	ldr	r3, [r7, #16]
 80038c2:	2b0e      	cmp	r3, #14
 80038c4:	d9f2      	bls.n	80038ac <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80038c6:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d11c      	bne.n	8003908 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80038d4:	685b      	ldr	r3, [r3, #4]
 80038d6:	68fa      	ldr	r2, [r7, #12]
 80038d8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80038dc:	f043 0302 	orr.w	r3, r3, #2
 80038e0:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038e6:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038f2:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038fe:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	639a      	str	r2, [r3, #56]	@ 0x38
 8003906:	e00b      	b.n	8003920 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800390c:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003918:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8003926:	461a      	mov	r2, r3
 8003928:	2300      	movs	r3, #0
 800392a:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800392c:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8003930:	2b01      	cmp	r3, #1
 8003932:	d10d      	bne.n	8003950 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8003934:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003938:	2b00      	cmp	r3, #0
 800393a:	d104      	bne.n	8003946 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800393c:	2100      	movs	r1, #0
 800393e:	6878      	ldr	r0, [r7, #4]
 8003940:	f000 f968 	bl	8003c14 <USB_SetDevSpeed>
 8003944:	e008      	b.n	8003958 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003946:	2101      	movs	r1, #1
 8003948:	6878      	ldr	r0, [r7, #4]
 800394a:	f000 f963 	bl	8003c14 <USB_SetDevSpeed>
 800394e:	e003      	b.n	8003958 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8003950:	2103      	movs	r1, #3
 8003952:	6878      	ldr	r0, [r7, #4]
 8003954:	f000 f95e 	bl	8003c14 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003958:	2110      	movs	r1, #16
 800395a:	6878      	ldr	r0, [r7, #4]
 800395c:	f000 f8fa 	bl	8003b54 <USB_FlushTxFifo>
 8003960:	4603      	mov	r3, r0
 8003962:	2b00      	cmp	r3, #0
 8003964:	d001      	beq.n	800396a <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8003966:	2301      	movs	r3, #1
 8003968:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800396a:	6878      	ldr	r0, [r7, #4]
 800396c:	f000 f924 	bl	8003bb8 <USB_FlushRxFifo>
 8003970:	4603      	mov	r3, r0
 8003972:	2b00      	cmp	r3, #0
 8003974:	d001      	beq.n	800397a <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8003976:	2301      	movs	r3, #1
 8003978:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003980:	461a      	mov	r2, r3
 8003982:	2300      	movs	r3, #0
 8003984:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800398c:	461a      	mov	r2, r3
 800398e:	2300      	movs	r3, #0
 8003990:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003998:	461a      	mov	r2, r3
 800399a:	2300      	movs	r3, #0
 800399c:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800399e:	2300      	movs	r3, #0
 80039a0:	613b      	str	r3, [r7, #16]
 80039a2:	e043      	b.n	8003a2c <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80039a4:	693b      	ldr	r3, [r7, #16]
 80039a6:	015a      	lsls	r2, r3, #5
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	4413      	add	r3, r2
 80039ac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80039b6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80039ba:	d118      	bne.n	80039ee <USB_DevInit+0x162>
    {
      if (i == 0U)
 80039bc:	693b      	ldr	r3, [r7, #16]
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d10a      	bne.n	80039d8 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80039c2:	693b      	ldr	r3, [r7, #16]
 80039c4:	015a      	lsls	r2, r3, #5
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	4413      	add	r3, r2
 80039ca:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80039ce:	461a      	mov	r2, r3
 80039d0:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80039d4:	6013      	str	r3, [r2, #0]
 80039d6:	e013      	b.n	8003a00 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80039d8:	693b      	ldr	r3, [r7, #16]
 80039da:	015a      	lsls	r2, r3, #5
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	4413      	add	r3, r2
 80039e0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80039e4:	461a      	mov	r2, r3
 80039e6:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80039ea:	6013      	str	r3, [r2, #0]
 80039ec:	e008      	b.n	8003a00 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80039ee:	693b      	ldr	r3, [r7, #16]
 80039f0:	015a      	lsls	r2, r3, #5
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	4413      	add	r3, r2
 80039f6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80039fa:	461a      	mov	r2, r3
 80039fc:	2300      	movs	r3, #0
 80039fe:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8003a00:	693b      	ldr	r3, [r7, #16]
 8003a02:	015a      	lsls	r2, r3, #5
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	4413      	add	r3, r2
 8003a08:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003a0c:	461a      	mov	r2, r3
 8003a0e:	2300      	movs	r3, #0
 8003a10:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003a12:	693b      	ldr	r3, [r7, #16]
 8003a14:	015a      	lsls	r2, r3, #5
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	4413      	add	r3, r2
 8003a1a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003a1e:	461a      	mov	r2, r3
 8003a20:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003a24:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003a26:	693b      	ldr	r3, [r7, #16]
 8003a28:	3301      	adds	r3, #1
 8003a2a:	613b      	str	r3, [r7, #16]
 8003a2c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8003a30:	461a      	mov	r2, r3
 8003a32:	693b      	ldr	r3, [r7, #16]
 8003a34:	4293      	cmp	r3, r2
 8003a36:	d3b5      	bcc.n	80039a4 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003a38:	2300      	movs	r3, #0
 8003a3a:	613b      	str	r3, [r7, #16]
 8003a3c:	e043      	b.n	8003ac6 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003a3e:	693b      	ldr	r3, [r7, #16]
 8003a40:	015a      	lsls	r2, r3, #5
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	4413      	add	r3, r2
 8003a46:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003a50:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003a54:	d118      	bne.n	8003a88 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8003a56:	693b      	ldr	r3, [r7, #16]
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d10a      	bne.n	8003a72 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003a5c:	693b      	ldr	r3, [r7, #16]
 8003a5e:	015a      	lsls	r2, r3, #5
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	4413      	add	r3, r2
 8003a64:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003a68:	461a      	mov	r2, r3
 8003a6a:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8003a6e:	6013      	str	r3, [r2, #0]
 8003a70:	e013      	b.n	8003a9a <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003a72:	693b      	ldr	r3, [r7, #16]
 8003a74:	015a      	lsls	r2, r3, #5
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	4413      	add	r3, r2
 8003a7a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003a7e:	461a      	mov	r2, r3
 8003a80:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8003a84:	6013      	str	r3, [r2, #0]
 8003a86:	e008      	b.n	8003a9a <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003a88:	693b      	ldr	r3, [r7, #16]
 8003a8a:	015a      	lsls	r2, r3, #5
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	4413      	add	r3, r2
 8003a90:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003a94:	461a      	mov	r2, r3
 8003a96:	2300      	movs	r3, #0
 8003a98:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003a9a:	693b      	ldr	r3, [r7, #16]
 8003a9c:	015a      	lsls	r2, r3, #5
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	4413      	add	r3, r2
 8003aa2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003aa6:	461a      	mov	r2, r3
 8003aa8:	2300      	movs	r3, #0
 8003aaa:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003aac:	693b      	ldr	r3, [r7, #16]
 8003aae:	015a      	lsls	r2, r3, #5
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	4413      	add	r3, r2
 8003ab4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003ab8:	461a      	mov	r2, r3
 8003aba:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003abe:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003ac0:	693b      	ldr	r3, [r7, #16]
 8003ac2:	3301      	adds	r3, #1
 8003ac4:	613b      	str	r3, [r7, #16]
 8003ac6:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8003aca:	461a      	mov	r2, r3
 8003acc:	693b      	ldr	r3, [r7, #16]
 8003ace:	4293      	cmp	r3, r2
 8003ad0:	d3b5      	bcc.n	8003a3e <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003ad8:	691b      	ldr	r3, [r3, #16]
 8003ada:	68fa      	ldr	r2, [r7, #12]
 8003adc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003ae0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003ae4:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	2200      	movs	r2, #0
 8003aea:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8003af2:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8003af4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d105      	bne.n	8003b08 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	699b      	ldr	r3, [r3, #24]
 8003b00:	f043 0210 	orr.w	r2, r3, #16
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	699a      	ldr	r2, [r3, #24]
 8003b0c:	4b10      	ldr	r3, [pc, #64]	@ (8003b50 <USB_DevInit+0x2c4>)
 8003b0e:	4313      	orrs	r3, r2
 8003b10:	687a      	ldr	r2, [r7, #4]
 8003b12:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8003b14:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d005      	beq.n	8003b28 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	699b      	ldr	r3, [r3, #24]
 8003b20:	f043 0208 	orr.w	r2, r3, #8
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8003b28:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8003b2c:	2b01      	cmp	r3, #1
 8003b2e:	d107      	bne.n	8003b40 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	699b      	ldr	r3, [r3, #24]
 8003b34:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003b38:	f043 0304 	orr.w	r3, r3, #4
 8003b3c:	687a      	ldr	r2, [r7, #4]
 8003b3e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8003b40:	7dfb      	ldrb	r3, [r7, #23]
}
 8003b42:	4618      	mov	r0, r3
 8003b44:	3718      	adds	r7, #24
 8003b46:	46bd      	mov	sp, r7
 8003b48:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003b4c:	b004      	add	sp, #16
 8003b4e:	4770      	bx	lr
 8003b50:	803c3800 	.word	0x803c3800

08003b54 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003b54:	b480      	push	{r7}
 8003b56:	b085      	sub	sp, #20
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	6078      	str	r0, [r7, #4]
 8003b5c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8003b5e:	2300      	movs	r3, #0
 8003b60:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	3301      	adds	r3, #1
 8003b66:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003b6e:	d901      	bls.n	8003b74 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8003b70:	2303      	movs	r3, #3
 8003b72:	e01b      	b.n	8003bac <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	691b      	ldr	r3, [r3, #16]
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	daf2      	bge.n	8003b62 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8003b7c:	2300      	movs	r3, #0
 8003b7e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003b80:	683b      	ldr	r3, [r7, #0]
 8003b82:	019b      	lsls	r3, r3, #6
 8003b84:	f043 0220 	orr.w	r2, r3, #32
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	3301      	adds	r3, #1
 8003b90:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003b98:	d901      	bls.n	8003b9e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8003b9a:	2303      	movs	r3, #3
 8003b9c:	e006      	b.n	8003bac <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	691b      	ldr	r3, [r3, #16]
 8003ba2:	f003 0320 	and.w	r3, r3, #32
 8003ba6:	2b20      	cmp	r3, #32
 8003ba8:	d0f0      	beq.n	8003b8c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8003baa:	2300      	movs	r3, #0
}
 8003bac:	4618      	mov	r0, r3
 8003bae:	3714      	adds	r7, #20
 8003bb0:	46bd      	mov	sp, r7
 8003bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb6:	4770      	bx	lr

08003bb8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003bb8:	b480      	push	{r7}
 8003bba:	b085      	sub	sp, #20
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003bc0:	2300      	movs	r3, #0
 8003bc2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	3301      	adds	r3, #1
 8003bc8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003bd0:	d901      	bls.n	8003bd6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8003bd2:	2303      	movs	r3, #3
 8003bd4:	e018      	b.n	8003c08 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	691b      	ldr	r3, [r3, #16]
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	daf2      	bge.n	8003bc4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8003bde:	2300      	movs	r3, #0
 8003be0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	2210      	movs	r2, #16
 8003be6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	3301      	adds	r3, #1
 8003bec:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003bf4:	d901      	bls.n	8003bfa <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8003bf6:	2303      	movs	r3, #3
 8003bf8:	e006      	b.n	8003c08 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	691b      	ldr	r3, [r3, #16]
 8003bfe:	f003 0310 	and.w	r3, r3, #16
 8003c02:	2b10      	cmp	r3, #16
 8003c04:	d0f0      	beq.n	8003be8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8003c06:	2300      	movs	r3, #0
}
 8003c08:	4618      	mov	r0, r3
 8003c0a:	3714      	adds	r7, #20
 8003c0c:	46bd      	mov	sp, r7
 8003c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c12:	4770      	bx	lr

08003c14 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8003c14:	b480      	push	{r7}
 8003c16:	b085      	sub	sp, #20
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	6078      	str	r0, [r7, #4]
 8003c1c:	460b      	mov	r3, r1
 8003c1e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003c2a:	681a      	ldr	r2, [r3, #0]
 8003c2c:	78fb      	ldrb	r3, [r7, #3]
 8003c2e:	68f9      	ldr	r1, [r7, #12]
 8003c30:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003c34:	4313      	orrs	r3, r2
 8003c36:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8003c38:	2300      	movs	r3, #0
}
 8003c3a:	4618      	mov	r0, r3
 8003c3c:	3714      	adds	r7, #20
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c44:	4770      	bx	lr

08003c46 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8003c46:	b480      	push	{r7}
 8003c48:	b087      	sub	sp, #28
 8003c4a:	af00      	add	r7, sp, #0
 8003c4c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8003c52:	693b      	ldr	r3, [r7, #16]
 8003c54:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003c58:	689b      	ldr	r3, [r3, #8]
 8003c5a:	f003 0306 	and.w	r3, r3, #6
 8003c5e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d102      	bne.n	8003c6c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8003c66:	2300      	movs	r3, #0
 8003c68:	75fb      	strb	r3, [r7, #23]
 8003c6a:	e00a      	b.n	8003c82 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	2b02      	cmp	r3, #2
 8003c70:	d002      	beq.n	8003c78 <USB_GetDevSpeed+0x32>
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	2b06      	cmp	r3, #6
 8003c76:	d102      	bne.n	8003c7e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8003c78:	2302      	movs	r3, #2
 8003c7a:	75fb      	strb	r3, [r7, #23]
 8003c7c:	e001      	b.n	8003c82 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8003c7e:	230f      	movs	r3, #15
 8003c80:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8003c82:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c84:	4618      	mov	r0, r3
 8003c86:	371c      	adds	r7, #28
 8003c88:	46bd      	mov	sp, r7
 8003c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c8e:	4770      	bx	lr

08003c90 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8003c90:	b480      	push	{r7}
 8003c92:	b085      	sub	sp, #20
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	6078      	str	r0, [r7, #4]
 8003c98:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003c9e:	683b      	ldr	r3, [r7, #0]
 8003ca0:	781b      	ldrb	r3, [r3, #0]
 8003ca2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003ca4:	683b      	ldr	r3, [r7, #0]
 8003ca6:	785b      	ldrb	r3, [r3, #1]
 8003ca8:	2b01      	cmp	r3, #1
 8003caa:	d13a      	bne.n	8003d22 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003cb2:	69da      	ldr	r2, [r3, #28]
 8003cb4:	683b      	ldr	r3, [r7, #0]
 8003cb6:	781b      	ldrb	r3, [r3, #0]
 8003cb8:	f003 030f 	and.w	r3, r3, #15
 8003cbc:	2101      	movs	r1, #1
 8003cbe:	fa01 f303 	lsl.w	r3, r1, r3
 8003cc2:	b29b      	uxth	r3, r3
 8003cc4:	68f9      	ldr	r1, [r7, #12]
 8003cc6:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003cca:	4313      	orrs	r3, r2
 8003ccc:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8003cce:	68bb      	ldr	r3, [r7, #8]
 8003cd0:	015a      	lsls	r2, r3, #5
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	4413      	add	r3, r2
 8003cd6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d155      	bne.n	8003d90 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003ce4:	68bb      	ldr	r3, [r7, #8]
 8003ce6:	015a      	lsls	r2, r3, #5
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	4413      	add	r3, r2
 8003cec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003cf0:	681a      	ldr	r2, [r3, #0]
 8003cf2:	683b      	ldr	r3, [r7, #0]
 8003cf4:	689b      	ldr	r3, [r3, #8]
 8003cf6:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003cfa:	683b      	ldr	r3, [r7, #0]
 8003cfc:	791b      	ldrb	r3, [r3, #4]
 8003cfe:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003d00:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003d02:	68bb      	ldr	r3, [r7, #8]
 8003d04:	059b      	lsls	r3, r3, #22
 8003d06:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003d08:	4313      	orrs	r3, r2
 8003d0a:	68ba      	ldr	r2, [r7, #8]
 8003d0c:	0151      	lsls	r1, r2, #5
 8003d0e:	68fa      	ldr	r2, [r7, #12]
 8003d10:	440a      	add	r2, r1
 8003d12:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003d16:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003d1a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003d1e:	6013      	str	r3, [r2, #0]
 8003d20:	e036      	b.n	8003d90 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003d28:	69da      	ldr	r2, [r3, #28]
 8003d2a:	683b      	ldr	r3, [r7, #0]
 8003d2c:	781b      	ldrb	r3, [r3, #0]
 8003d2e:	f003 030f 	and.w	r3, r3, #15
 8003d32:	2101      	movs	r1, #1
 8003d34:	fa01 f303 	lsl.w	r3, r1, r3
 8003d38:	041b      	lsls	r3, r3, #16
 8003d3a:	68f9      	ldr	r1, [r7, #12]
 8003d3c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003d40:	4313      	orrs	r3, r2
 8003d42:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8003d44:	68bb      	ldr	r3, [r7, #8]
 8003d46:	015a      	lsls	r2, r3, #5
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	4413      	add	r3, r2
 8003d4c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d11a      	bne.n	8003d90 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003d5a:	68bb      	ldr	r3, [r7, #8]
 8003d5c:	015a      	lsls	r2, r3, #5
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	4413      	add	r3, r2
 8003d62:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003d66:	681a      	ldr	r2, [r3, #0]
 8003d68:	683b      	ldr	r3, [r7, #0]
 8003d6a:	689b      	ldr	r3, [r3, #8]
 8003d6c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8003d70:	683b      	ldr	r3, [r7, #0]
 8003d72:	791b      	ldrb	r3, [r3, #4]
 8003d74:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003d76:	430b      	orrs	r3, r1
 8003d78:	4313      	orrs	r3, r2
 8003d7a:	68ba      	ldr	r2, [r7, #8]
 8003d7c:	0151      	lsls	r1, r2, #5
 8003d7e:	68fa      	ldr	r2, [r7, #12]
 8003d80:	440a      	add	r2, r1
 8003d82:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003d86:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003d8a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003d8e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8003d90:	2300      	movs	r3, #0
}
 8003d92:	4618      	mov	r0, r3
 8003d94:	3714      	adds	r7, #20
 8003d96:	46bd      	mov	sp, r7
 8003d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d9c:	4770      	bx	lr
	...

08003da0 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8003da0:	b480      	push	{r7}
 8003da2:	b085      	sub	sp, #20
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	6078      	str	r0, [r7, #4]
 8003da8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003dae:	683b      	ldr	r3, [r7, #0]
 8003db0:	781b      	ldrb	r3, [r3, #0]
 8003db2:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8003db4:	683b      	ldr	r3, [r7, #0]
 8003db6:	785b      	ldrb	r3, [r3, #1]
 8003db8:	2b01      	cmp	r3, #1
 8003dba:	d161      	bne.n	8003e80 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003dbc:	68bb      	ldr	r3, [r7, #8]
 8003dbe:	015a      	lsls	r2, r3, #5
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	4413      	add	r3, r2
 8003dc4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003dce:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003dd2:	d11f      	bne.n	8003e14 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8003dd4:	68bb      	ldr	r3, [r7, #8]
 8003dd6:	015a      	lsls	r2, r3, #5
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	4413      	add	r3, r2
 8003ddc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	68ba      	ldr	r2, [r7, #8]
 8003de4:	0151      	lsls	r1, r2, #5
 8003de6:	68fa      	ldr	r2, [r7, #12]
 8003de8:	440a      	add	r2, r1
 8003dea:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003dee:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8003df2:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8003df4:	68bb      	ldr	r3, [r7, #8]
 8003df6:	015a      	lsls	r2, r3, #5
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	4413      	add	r3, r2
 8003dfc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	68ba      	ldr	r2, [r7, #8]
 8003e04:	0151      	lsls	r1, r2, #5
 8003e06:	68fa      	ldr	r2, [r7, #12]
 8003e08:	440a      	add	r2, r1
 8003e0a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003e0e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003e12:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003e1a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003e1c:	683b      	ldr	r3, [r7, #0]
 8003e1e:	781b      	ldrb	r3, [r3, #0]
 8003e20:	f003 030f 	and.w	r3, r3, #15
 8003e24:	2101      	movs	r1, #1
 8003e26:	fa01 f303 	lsl.w	r3, r1, r3
 8003e2a:	b29b      	uxth	r3, r3
 8003e2c:	43db      	mvns	r3, r3
 8003e2e:	68f9      	ldr	r1, [r7, #12]
 8003e30:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003e34:	4013      	ands	r3, r2
 8003e36:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003e3e:	69da      	ldr	r2, [r3, #28]
 8003e40:	683b      	ldr	r3, [r7, #0]
 8003e42:	781b      	ldrb	r3, [r3, #0]
 8003e44:	f003 030f 	and.w	r3, r3, #15
 8003e48:	2101      	movs	r1, #1
 8003e4a:	fa01 f303 	lsl.w	r3, r1, r3
 8003e4e:	b29b      	uxth	r3, r3
 8003e50:	43db      	mvns	r3, r3
 8003e52:	68f9      	ldr	r1, [r7, #12]
 8003e54:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003e58:	4013      	ands	r3, r2
 8003e5a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8003e5c:	68bb      	ldr	r3, [r7, #8]
 8003e5e:	015a      	lsls	r2, r3, #5
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	4413      	add	r3, r2
 8003e64:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003e68:	681a      	ldr	r2, [r3, #0]
 8003e6a:	68bb      	ldr	r3, [r7, #8]
 8003e6c:	0159      	lsls	r1, r3, #5
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	440b      	add	r3, r1
 8003e72:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003e76:	4619      	mov	r1, r3
 8003e78:	4b35      	ldr	r3, [pc, #212]	@ (8003f50 <USB_DeactivateEndpoint+0x1b0>)
 8003e7a:	4013      	ands	r3, r2
 8003e7c:	600b      	str	r3, [r1, #0]
 8003e7e:	e060      	b.n	8003f42 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003e80:	68bb      	ldr	r3, [r7, #8]
 8003e82:	015a      	lsls	r2, r3, #5
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	4413      	add	r3, r2
 8003e88:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003e92:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003e96:	d11f      	bne.n	8003ed8 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003e98:	68bb      	ldr	r3, [r7, #8]
 8003e9a:	015a      	lsls	r2, r3, #5
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	4413      	add	r3, r2
 8003ea0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	68ba      	ldr	r2, [r7, #8]
 8003ea8:	0151      	lsls	r1, r2, #5
 8003eaa:	68fa      	ldr	r2, [r7, #12]
 8003eac:	440a      	add	r2, r1
 8003eae:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003eb2:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8003eb6:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8003eb8:	68bb      	ldr	r3, [r7, #8]
 8003eba:	015a      	lsls	r2, r3, #5
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	4413      	add	r3, r2
 8003ec0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	68ba      	ldr	r2, [r7, #8]
 8003ec8:	0151      	lsls	r1, r2, #5
 8003eca:	68fa      	ldr	r2, [r7, #12]
 8003ecc:	440a      	add	r2, r1
 8003ece:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003ed2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003ed6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003ede:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003ee0:	683b      	ldr	r3, [r7, #0]
 8003ee2:	781b      	ldrb	r3, [r3, #0]
 8003ee4:	f003 030f 	and.w	r3, r3, #15
 8003ee8:	2101      	movs	r1, #1
 8003eea:	fa01 f303 	lsl.w	r3, r1, r3
 8003eee:	041b      	lsls	r3, r3, #16
 8003ef0:	43db      	mvns	r3, r3
 8003ef2:	68f9      	ldr	r1, [r7, #12]
 8003ef4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003ef8:	4013      	ands	r3, r2
 8003efa:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003f02:	69da      	ldr	r2, [r3, #28]
 8003f04:	683b      	ldr	r3, [r7, #0]
 8003f06:	781b      	ldrb	r3, [r3, #0]
 8003f08:	f003 030f 	and.w	r3, r3, #15
 8003f0c:	2101      	movs	r1, #1
 8003f0e:	fa01 f303 	lsl.w	r3, r1, r3
 8003f12:	041b      	lsls	r3, r3, #16
 8003f14:	43db      	mvns	r3, r3
 8003f16:	68f9      	ldr	r1, [r7, #12]
 8003f18:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003f1c:	4013      	ands	r3, r2
 8003f1e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8003f20:	68bb      	ldr	r3, [r7, #8]
 8003f22:	015a      	lsls	r2, r3, #5
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	4413      	add	r3, r2
 8003f28:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003f2c:	681a      	ldr	r2, [r3, #0]
 8003f2e:	68bb      	ldr	r3, [r7, #8]
 8003f30:	0159      	lsls	r1, r3, #5
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	440b      	add	r3, r1
 8003f36:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003f3a:	4619      	mov	r1, r3
 8003f3c:	4b05      	ldr	r3, [pc, #20]	@ (8003f54 <USB_DeactivateEndpoint+0x1b4>)
 8003f3e:	4013      	ands	r3, r2
 8003f40:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8003f42:	2300      	movs	r3, #0
}
 8003f44:	4618      	mov	r0, r3
 8003f46:	3714      	adds	r7, #20
 8003f48:	46bd      	mov	sp, r7
 8003f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f4e:	4770      	bx	lr
 8003f50:	ec337800 	.word	0xec337800
 8003f54:	eff37800 	.word	0xeff37800

08003f58 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8003f58:	b580      	push	{r7, lr}
 8003f5a:	b08a      	sub	sp, #40	@ 0x28
 8003f5c:	af02      	add	r7, sp, #8
 8003f5e:	60f8      	str	r0, [r7, #12]
 8003f60:	60b9      	str	r1, [r7, #8]
 8003f62:	4613      	mov	r3, r2
 8003f64:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8003f6a:	68bb      	ldr	r3, [r7, #8]
 8003f6c:	781b      	ldrb	r3, [r3, #0]
 8003f6e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003f70:	68bb      	ldr	r3, [r7, #8]
 8003f72:	785b      	ldrb	r3, [r3, #1]
 8003f74:	2b01      	cmp	r3, #1
 8003f76:	f040 817f 	bne.w	8004278 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8003f7a:	68bb      	ldr	r3, [r7, #8]
 8003f7c:	691b      	ldr	r3, [r3, #16]
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d132      	bne.n	8003fe8 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003f82:	69bb      	ldr	r3, [r7, #24]
 8003f84:	015a      	lsls	r2, r3, #5
 8003f86:	69fb      	ldr	r3, [r7, #28]
 8003f88:	4413      	add	r3, r2
 8003f8a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003f8e:	691b      	ldr	r3, [r3, #16]
 8003f90:	69ba      	ldr	r2, [r7, #24]
 8003f92:	0151      	lsls	r1, r2, #5
 8003f94:	69fa      	ldr	r2, [r7, #28]
 8003f96:	440a      	add	r2, r1
 8003f98:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003f9c:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8003fa0:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8003fa4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003fa6:	69bb      	ldr	r3, [r7, #24]
 8003fa8:	015a      	lsls	r2, r3, #5
 8003faa:	69fb      	ldr	r3, [r7, #28]
 8003fac:	4413      	add	r3, r2
 8003fae:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003fb2:	691b      	ldr	r3, [r3, #16]
 8003fb4:	69ba      	ldr	r2, [r7, #24]
 8003fb6:	0151      	lsls	r1, r2, #5
 8003fb8:	69fa      	ldr	r2, [r7, #28]
 8003fba:	440a      	add	r2, r1
 8003fbc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003fc0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8003fc4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003fc6:	69bb      	ldr	r3, [r7, #24]
 8003fc8:	015a      	lsls	r2, r3, #5
 8003fca:	69fb      	ldr	r3, [r7, #28]
 8003fcc:	4413      	add	r3, r2
 8003fce:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003fd2:	691b      	ldr	r3, [r3, #16]
 8003fd4:	69ba      	ldr	r2, [r7, #24]
 8003fd6:	0151      	lsls	r1, r2, #5
 8003fd8:	69fa      	ldr	r2, [r7, #28]
 8003fda:	440a      	add	r2, r1
 8003fdc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003fe0:	0cdb      	lsrs	r3, r3, #19
 8003fe2:	04db      	lsls	r3, r3, #19
 8003fe4:	6113      	str	r3, [r2, #16]
 8003fe6:	e097      	b.n	8004118 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003fe8:	69bb      	ldr	r3, [r7, #24]
 8003fea:	015a      	lsls	r2, r3, #5
 8003fec:	69fb      	ldr	r3, [r7, #28]
 8003fee:	4413      	add	r3, r2
 8003ff0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003ff4:	691b      	ldr	r3, [r3, #16]
 8003ff6:	69ba      	ldr	r2, [r7, #24]
 8003ff8:	0151      	lsls	r1, r2, #5
 8003ffa:	69fa      	ldr	r2, [r7, #28]
 8003ffc:	440a      	add	r2, r1
 8003ffe:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004002:	0cdb      	lsrs	r3, r3, #19
 8004004:	04db      	lsls	r3, r3, #19
 8004006:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004008:	69bb      	ldr	r3, [r7, #24]
 800400a:	015a      	lsls	r2, r3, #5
 800400c:	69fb      	ldr	r3, [r7, #28]
 800400e:	4413      	add	r3, r2
 8004010:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004014:	691b      	ldr	r3, [r3, #16]
 8004016:	69ba      	ldr	r2, [r7, #24]
 8004018:	0151      	lsls	r1, r2, #5
 800401a:	69fa      	ldr	r2, [r7, #28]
 800401c:	440a      	add	r2, r1
 800401e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004022:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8004026:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800402a:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 800402c:	69bb      	ldr	r3, [r7, #24]
 800402e:	2b00      	cmp	r3, #0
 8004030:	d11a      	bne.n	8004068 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8004032:	68bb      	ldr	r3, [r7, #8]
 8004034:	691a      	ldr	r2, [r3, #16]
 8004036:	68bb      	ldr	r3, [r7, #8]
 8004038:	689b      	ldr	r3, [r3, #8]
 800403a:	429a      	cmp	r2, r3
 800403c:	d903      	bls.n	8004046 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 800403e:	68bb      	ldr	r3, [r7, #8]
 8004040:	689a      	ldr	r2, [r3, #8]
 8004042:	68bb      	ldr	r3, [r7, #8]
 8004044:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004046:	69bb      	ldr	r3, [r7, #24]
 8004048:	015a      	lsls	r2, r3, #5
 800404a:	69fb      	ldr	r3, [r7, #28]
 800404c:	4413      	add	r3, r2
 800404e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004052:	691b      	ldr	r3, [r3, #16]
 8004054:	69ba      	ldr	r2, [r7, #24]
 8004056:	0151      	lsls	r1, r2, #5
 8004058:	69fa      	ldr	r2, [r7, #28]
 800405a:	440a      	add	r2, r1
 800405c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004060:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004064:	6113      	str	r3, [r2, #16]
 8004066:	e044      	b.n	80040f2 <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8004068:	68bb      	ldr	r3, [r7, #8]
 800406a:	691a      	ldr	r2, [r3, #16]
 800406c:	68bb      	ldr	r3, [r7, #8]
 800406e:	689b      	ldr	r3, [r3, #8]
 8004070:	4413      	add	r3, r2
 8004072:	1e5a      	subs	r2, r3, #1
 8004074:	68bb      	ldr	r3, [r7, #8]
 8004076:	689b      	ldr	r3, [r3, #8]
 8004078:	fbb2 f3f3 	udiv	r3, r2, r3
 800407c:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 800407e:	69bb      	ldr	r3, [r7, #24]
 8004080:	015a      	lsls	r2, r3, #5
 8004082:	69fb      	ldr	r3, [r7, #28]
 8004084:	4413      	add	r3, r2
 8004086:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800408a:	691a      	ldr	r2, [r3, #16]
 800408c:	8afb      	ldrh	r3, [r7, #22]
 800408e:	04d9      	lsls	r1, r3, #19
 8004090:	4ba4      	ldr	r3, [pc, #656]	@ (8004324 <USB_EPStartXfer+0x3cc>)
 8004092:	400b      	ands	r3, r1
 8004094:	69b9      	ldr	r1, [r7, #24]
 8004096:	0148      	lsls	r0, r1, #5
 8004098:	69f9      	ldr	r1, [r7, #28]
 800409a:	4401      	add	r1, r0
 800409c:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80040a0:	4313      	orrs	r3, r2
 80040a2:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 80040a4:	68bb      	ldr	r3, [r7, #8]
 80040a6:	791b      	ldrb	r3, [r3, #4]
 80040a8:	2b01      	cmp	r3, #1
 80040aa:	d122      	bne.n	80040f2 <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80040ac:	69bb      	ldr	r3, [r7, #24]
 80040ae:	015a      	lsls	r2, r3, #5
 80040b0:	69fb      	ldr	r3, [r7, #28]
 80040b2:	4413      	add	r3, r2
 80040b4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80040b8:	691b      	ldr	r3, [r3, #16]
 80040ba:	69ba      	ldr	r2, [r7, #24]
 80040bc:	0151      	lsls	r1, r2, #5
 80040be:	69fa      	ldr	r2, [r7, #28]
 80040c0:	440a      	add	r2, r1
 80040c2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80040c6:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 80040ca:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 80040cc:	69bb      	ldr	r3, [r7, #24]
 80040ce:	015a      	lsls	r2, r3, #5
 80040d0:	69fb      	ldr	r3, [r7, #28]
 80040d2:	4413      	add	r3, r2
 80040d4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80040d8:	691a      	ldr	r2, [r3, #16]
 80040da:	8afb      	ldrh	r3, [r7, #22]
 80040dc:	075b      	lsls	r3, r3, #29
 80040de:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 80040e2:	69b9      	ldr	r1, [r7, #24]
 80040e4:	0148      	lsls	r0, r1, #5
 80040e6:	69f9      	ldr	r1, [r7, #28]
 80040e8:	4401      	add	r1, r0
 80040ea:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80040ee:	4313      	orrs	r3, r2
 80040f0:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80040f2:	69bb      	ldr	r3, [r7, #24]
 80040f4:	015a      	lsls	r2, r3, #5
 80040f6:	69fb      	ldr	r3, [r7, #28]
 80040f8:	4413      	add	r3, r2
 80040fa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80040fe:	691a      	ldr	r2, [r3, #16]
 8004100:	68bb      	ldr	r3, [r7, #8]
 8004102:	691b      	ldr	r3, [r3, #16]
 8004104:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004108:	69b9      	ldr	r1, [r7, #24]
 800410a:	0148      	lsls	r0, r1, #5
 800410c:	69f9      	ldr	r1, [r7, #28]
 800410e:	4401      	add	r1, r0
 8004110:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8004114:	4313      	orrs	r3, r2
 8004116:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004118:	79fb      	ldrb	r3, [r7, #7]
 800411a:	2b01      	cmp	r3, #1
 800411c:	d14b      	bne.n	80041b6 <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800411e:	68bb      	ldr	r3, [r7, #8]
 8004120:	69db      	ldr	r3, [r3, #28]
 8004122:	2b00      	cmp	r3, #0
 8004124:	d009      	beq.n	800413a <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004126:	69bb      	ldr	r3, [r7, #24]
 8004128:	015a      	lsls	r2, r3, #5
 800412a:	69fb      	ldr	r3, [r7, #28]
 800412c:	4413      	add	r3, r2
 800412e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004132:	461a      	mov	r2, r3
 8004134:	68bb      	ldr	r3, [r7, #8]
 8004136:	69db      	ldr	r3, [r3, #28]
 8004138:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800413a:	68bb      	ldr	r3, [r7, #8]
 800413c:	791b      	ldrb	r3, [r3, #4]
 800413e:	2b01      	cmp	r3, #1
 8004140:	d128      	bne.n	8004194 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004142:	69fb      	ldr	r3, [r7, #28]
 8004144:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004148:	689b      	ldr	r3, [r3, #8]
 800414a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800414e:	2b00      	cmp	r3, #0
 8004150:	d110      	bne.n	8004174 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004152:	69bb      	ldr	r3, [r7, #24]
 8004154:	015a      	lsls	r2, r3, #5
 8004156:	69fb      	ldr	r3, [r7, #28]
 8004158:	4413      	add	r3, r2
 800415a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	69ba      	ldr	r2, [r7, #24]
 8004162:	0151      	lsls	r1, r2, #5
 8004164:	69fa      	ldr	r2, [r7, #28]
 8004166:	440a      	add	r2, r1
 8004168:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800416c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8004170:	6013      	str	r3, [r2, #0]
 8004172:	e00f      	b.n	8004194 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004174:	69bb      	ldr	r3, [r7, #24]
 8004176:	015a      	lsls	r2, r3, #5
 8004178:	69fb      	ldr	r3, [r7, #28]
 800417a:	4413      	add	r3, r2
 800417c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	69ba      	ldr	r2, [r7, #24]
 8004184:	0151      	lsls	r1, r2, #5
 8004186:	69fa      	ldr	r2, [r7, #28]
 8004188:	440a      	add	r2, r1
 800418a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800418e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004192:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004194:	69bb      	ldr	r3, [r7, #24]
 8004196:	015a      	lsls	r2, r3, #5
 8004198:	69fb      	ldr	r3, [r7, #28]
 800419a:	4413      	add	r3, r2
 800419c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	69ba      	ldr	r2, [r7, #24]
 80041a4:	0151      	lsls	r1, r2, #5
 80041a6:	69fa      	ldr	r2, [r7, #28]
 80041a8:	440a      	add	r2, r1
 80041aa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80041ae:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80041b2:	6013      	str	r3, [r2, #0]
 80041b4:	e166      	b.n	8004484 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80041b6:	69bb      	ldr	r3, [r7, #24]
 80041b8:	015a      	lsls	r2, r3, #5
 80041ba:	69fb      	ldr	r3, [r7, #28]
 80041bc:	4413      	add	r3, r2
 80041be:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	69ba      	ldr	r2, [r7, #24]
 80041c6:	0151      	lsls	r1, r2, #5
 80041c8:	69fa      	ldr	r2, [r7, #28]
 80041ca:	440a      	add	r2, r1
 80041cc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80041d0:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80041d4:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80041d6:	68bb      	ldr	r3, [r7, #8]
 80041d8:	791b      	ldrb	r3, [r3, #4]
 80041da:	2b01      	cmp	r3, #1
 80041dc:	d015      	beq.n	800420a <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80041de:	68bb      	ldr	r3, [r7, #8]
 80041e0:	691b      	ldr	r3, [r3, #16]
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	f000 814e 	beq.w	8004484 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80041e8:	69fb      	ldr	r3, [r7, #28]
 80041ea:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80041ee:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80041f0:	68bb      	ldr	r3, [r7, #8]
 80041f2:	781b      	ldrb	r3, [r3, #0]
 80041f4:	f003 030f 	and.w	r3, r3, #15
 80041f8:	2101      	movs	r1, #1
 80041fa:	fa01 f303 	lsl.w	r3, r1, r3
 80041fe:	69f9      	ldr	r1, [r7, #28]
 8004200:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004204:	4313      	orrs	r3, r2
 8004206:	634b      	str	r3, [r1, #52]	@ 0x34
 8004208:	e13c      	b.n	8004484 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800420a:	69fb      	ldr	r3, [r7, #28]
 800420c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004210:	689b      	ldr	r3, [r3, #8]
 8004212:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004216:	2b00      	cmp	r3, #0
 8004218:	d110      	bne.n	800423c <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800421a:	69bb      	ldr	r3, [r7, #24]
 800421c:	015a      	lsls	r2, r3, #5
 800421e:	69fb      	ldr	r3, [r7, #28]
 8004220:	4413      	add	r3, r2
 8004222:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	69ba      	ldr	r2, [r7, #24]
 800422a:	0151      	lsls	r1, r2, #5
 800422c:	69fa      	ldr	r2, [r7, #28]
 800422e:	440a      	add	r2, r1
 8004230:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004234:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8004238:	6013      	str	r3, [r2, #0]
 800423a:	e00f      	b.n	800425c <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800423c:	69bb      	ldr	r3, [r7, #24]
 800423e:	015a      	lsls	r2, r3, #5
 8004240:	69fb      	ldr	r3, [r7, #28]
 8004242:	4413      	add	r3, r2
 8004244:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	69ba      	ldr	r2, [r7, #24]
 800424c:	0151      	lsls	r1, r2, #5
 800424e:	69fa      	ldr	r2, [r7, #28]
 8004250:	440a      	add	r2, r1
 8004252:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004256:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800425a:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800425c:	68bb      	ldr	r3, [r7, #8]
 800425e:	68d9      	ldr	r1, [r3, #12]
 8004260:	68bb      	ldr	r3, [r7, #8]
 8004262:	781a      	ldrb	r2, [r3, #0]
 8004264:	68bb      	ldr	r3, [r7, #8]
 8004266:	691b      	ldr	r3, [r3, #16]
 8004268:	b298      	uxth	r0, r3
 800426a:	79fb      	ldrb	r3, [r7, #7]
 800426c:	9300      	str	r3, [sp, #0]
 800426e:	4603      	mov	r3, r0
 8004270:	68f8      	ldr	r0, [r7, #12]
 8004272:	f000 f9b9 	bl	80045e8 <USB_WritePacket>
 8004276:	e105      	b.n	8004484 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004278:	69bb      	ldr	r3, [r7, #24]
 800427a:	015a      	lsls	r2, r3, #5
 800427c:	69fb      	ldr	r3, [r7, #28]
 800427e:	4413      	add	r3, r2
 8004280:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004284:	691b      	ldr	r3, [r3, #16]
 8004286:	69ba      	ldr	r2, [r7, #24]
 8004288:	0151      	lsls	r1, r2, #5
 800428a:	69fa      	ldr	r2, [r7, #28]
 800428c:	440a      	add	r2, r1
 800428e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004292:	0cdb      	lsrs	r3, r3, #19
 8004294:	04db      	lsls	r3, r3, #19
 8004296:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004298:	69bb      	ldr	r3, [r7, #24]
 800429a:	015a      	lsls	r2, r3, #5
 800429c:	69fb      	ldr	r3, [r7, #28]
 800429e:	4413      	add	r3, r2
 80042a0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80042a4:	691b      	ldr	r3, [r3, #16]
 80042a6:	69ba      	ldr	r2, [r7, #24]
 80042a8:	0151      	lsls	r1, r2, #5
 80042aa:	69fa      	ldr	r2, [r7, #28]
 80042ac:	440a      	add	r2, r1
 80042ae:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80042b2:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80042b6:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80042ba:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 80042bc:	69bb      	ldr	r3, [r7, #24]
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d132      	bne.n	8004328 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 80042c2:	68bb      	ldr	r3, [r7, #8]
 80042c4:	691b      	ldr	r3, [r3, #16]
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d003      	beq.n	80042d2 <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 80042ca:	68bb      	ldr	r3, [r7, #8]
 80042cc:	689a      	ldr	r2, [r3, #8]
 80042ce:	68bb      	ldr	r3, [r7, #8]
 80042d0:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 80042d2:	68bb      	ldr	r3, [r7, #8]
 80042d4:	689a      	ldr	r2, [r3, #8]
 80042d6:	68bb      	ldr	r3, [r7, #8]
 80042d8:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80042da:	69bb      	ldr	r3, [r7, #24]
 80042dc:	015a      	lsls	r2, r3, #5
 80042de:	69fb      	ldr	r3, [r7, #28]
 80042e0:	4413      	add	r3, r2
 80042e2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80042e6:	691a      	ldr	r2, [r3, #16]
 80042e8:	68bb      	ldr	r3, [r7, #8]
 80042ea:	6a1b      	ldr	r3, [r3, #32]
 80042ec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80042f0:	69b9      	ldr	r1, [r7, #24]
 80042f2:	0148      	lsls	r0, r1, #5
 80042f4:	69f9      	ldr	r1, [r7, #28]
 80042f6:	4401      	add	r1, r0
 80042f8:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80042fc:	4313      	orrs	r3, r2
 80042fe:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004300:	69bb      	ldr	r3, [r7, #24]
 8004302:	015a      	lsls	r2, r3, #5
 8004304:	69fb      	ldr	r3, [r7, #28]
 8004306:	4413      	add	r3, r2
 8004308:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800430c:	691b      	ldr	r3, [r3, #16]
 800430e:	69ba      	ldr	r2, [r7, #24]
 8004310:	0151      	lsls	r1, r2, #5
 8004312:	69fa      	ldr	r2, [r7, #28]
 8004314:	440a      	add	r2, r1
 8004316:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800431a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800431e:	6113      	str	r3, [r2, #16]
 8004320:	e062      	b.n	80043e8 <USB_EPStartXfer+0x490>
 8004322:	bf00      	nop
 8004324:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8004328:	68bb      	ldr	r3, [r7, #8]
 800432a:	691b      	ldr	r3, [r3, #16]
 800432c:	2b00      	cmp	r3, #0
 800432e:	d123      	bne.n	8004378 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8004330:	69bb      	ldr	r3, [r7, #24]
 8004332:	015a      	lsls	r2, r3, #5
 8004334:	69fb      	ldr	r3, [r7, #28]
 8004336:	4413      	add	r3, r2
 8004338:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800433c:	691a      	ldr	r2, [r3, #16]
 800433e:	68bb      	ldr	r3, [r7, #8]
 8004340:	689b      	ldr	r3, [r3, #8]
 8004342:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004346:	69b9      	ldr	r1, [r7, #24]
 8004348:	0148      	lsls	r0, r1, #5
 800434a:	69f9      	ldr	r1, [r7, #28]
 800434c:	4401      	add	r1, r0
 800434e:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8004352:	4313      	orrs	r3, r2
 8004354:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004356:	69bb      	ldr	r3, [r7, #24]
 8004358:	015a      	lsls	r2, r3, #5
 800435a:	69fb      	ldr	r3, [r7, #28]
 800435c:	4413      	add	r3, r2
 800435e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004362:	691b      	ldr	r3, [r3, #16]
 8004364:	69ba      	ldr	r2, [r7, #24]
 8004366:	0151      	lsls	r1, r2, #5
 8004368:	69fa      	ldr	r2, [r7, #28]
 800436a:	440a      	add	r2, r1
 800436c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004370:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004374:	6113      	str	r3, [r2, #16]
 8004376:	e037      	b.n	80043e8 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8004378:	68bb      	ldr	r3, [r7, #8]
 800437a:	691a      	ldr	r2, [r3, #16]
 800437c:	68bb      	ldr	r3, [r7, #8]
 800437e:	689b      	ldr	r3, [r3, #8]
 8004380:	4413      	add	r3, r2
 8004382:	1e5a      	subs	r2, r3, #1
 8004384:	68bb      	ldr	r3, [r7, #8]
 8004386:	689b      	ldr	r3, [r3, #8]
 8004388:	fbb2 f3f3 	udiv	r3, r2, r3
 800438c:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800438e:	68bb      	ldr	r3, [r7, #8]
 8004390:	689b      	ldr	r3, [r3, #8]
 8004392:	8afa      	ldrh	r2, [r7, #22]
 8004394:	fb03 f202 	mul.w	r2, r3, r2
 8004398:	68bb      	ldr	r3, [r7, #8]
 800439a:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800439c:	69bb      	ldr	r3, [r7, #24]
 800439e:	015a      	lsls	r2, r3, #5
 80043a0:	69fb      	ldr	r3, [r7, #28]
 80043a2:	4413      	add	r3, r2
 80043a4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80043a8:	691a      	ldr	r2, [r3, #16]
 80043aa:	8afb      	ldrh	r3, [r7, #22]
 80043ac:	04d9      	lsls	r1, r3, #19
 80043ae:	4b38      	ldr	r3, [pc, #224]	@ (8004490 <USB_EPStartXfer+0x538>)
 80043b0:	400b      	ands	r3, r1
 80043b2:	69b9      	ldr	r1, [r7, #24]
 80043b4:	0148      	lsls	r0, r1, #5
 80043b6:	69f9      	ldr	r1, [r7, #28]
 80043b8:	4401      	add	r1, r0
 80043ba:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80043be:	4313      	orrs	r3, r2
 80043c0:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80043c2:	69bb      	ldr	r3, [r7, #24]
 80043c4:	015a      	lsls	r2, r3, #5
 80043c6:	69fb      	ldr	r3, [r7, #28]
 80043c8:	4413      	add	r3, r2
 80043ca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80043ce:	691a      	ldr	r2, [r3, #16]
 80043d0:	68bb      	ldr	r3, [r7, #8]
 80043d2:	6a1b      	ldr	r3, [r3, #32]
 80043d4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80043d8:	69b9      	ldr	r1, [r7, #24]
 80043da:	0148      	lsls	r0, r1, #5
 80043dc:	69f9      	ldr	r1, [r7, #28]
 80043de:	4401      	add	r1, r0
 80043e0:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80043e4:	4313      	orrs	r3, r2
 80043e6:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 80043e8:	79fb      	ldrb	r3, [r7, #7]
 80043ea:	2b01      	cmp	r3, #1
 80043ec:	d10d      	bne.n	800440a <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80043ee:	68bb      	ldr	r3, [r7, #8]
 80043f0:	68db      	ldr	r3, [r3, #12]
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d009      	beq.n	800440a <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80043f6:	68bb      	ldr	r3, [r7, #8]
 80043f8:	68d9      	ldr	r1, [r3, #12]
 80043fa:	69bb      	ldr	r3, [r7, #24]
 80043fc:	015a      	lsls	r2, r3, #5
 80043fe:	69fb      	ldr	r3, [r7, #28]
 8004400:	4413      	add	r3, r2
 8004402:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004406:	460a      	mov	r2, r1
 8004408:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800440a:	68bb      	ldr	r3, [r7, #8]
 800440c:	791b      	ldrb	r3, [r3, #4]
 800440e:	2b01      	cmp	r3, #1
 8004410:	d128      	bne.n	8004464 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004412:	69fb      	ldr	r3, [r7, #28]
 8004414:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004418:	689b      	ldr	r3, [r3, #8]
 800441a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800441e:	2b00      	cmp	r3, #0
 8004420:	d110      	bne.n	8004444 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8004422:	69bb      	ldr	r3, [r7, #24]
 8004424:	015a      	lsls	r2, r3, #5
 8004426:	69fb      	ldr	r3, [r7, #28]
 8004428:	4413      	add	r3, r2
 800442a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	69ba      	ldr	r2, [r7, #24]
 8004432:	0151      	lsls	r1, r2, #5
 8004434:	69fa      	ldr	r2, [r7, #28]
 8004436:	440a      	add	r2, r1
 8004438:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800443c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8004440:	6013      	str	r3, [r2, #0]
 8004442:	e00f      	b.n	8004464 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8004444:	69bb      	ldr	r3, [r7, #24]
 8004446:	015a      	lsls	r2, r3, #5
 8004448:	69fb      	ldr	r3, [r7, #28]
 800444a:	4413      	add	r3, r2
 800444c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	69ba      	ldr	r2, [r7, #24]
 8004454:	0151      	lsls	r1, r2, #5
 8004456:	69fa      	ldr	r2, [r7, #28]
 8004458:	440a      	add	r2, r1
 800445a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800445e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004462:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004464:	69bb      	ldr	r3, [r7, #24]
 8004466:	015a      	lsls	r2, r3, #5
 8004468:	69fb      	ldr	r3, [r7, #28]
 800446a:	4413      	add	r3, r2
 800446c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	69ba      	ldr	r2, [r7, #24]
 8004474:	0151      	lsls	r1, r2, #5
 8004476:	69fa      	ldr	r2, [r7, #28]
 8004478:	440a      	add	r2, r1
 800447a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800447e:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8004482:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004484:	2300      	movs	r3, #0
}
 8004486:	4618      	mov	r0, r3
 8004488:	3720      	adds	r7, #32
 800448a:	46bd      	mov	sp, r7
 800448c:	bd80      	pop	{r7, pc}
 800448e:	bf00      	nop
 8004490:	1ff80000 	.word	0x1ff80000

08004494 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004494:	b480      	push	{r7}
 8004496:	b087      	sub	sp, #28
 8004498:	af00      	add	r7, sp, #0
 800449a:	6078      	str	r0, [r7, #4]
 800449c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800449e:	2300      	movs	r3, #0
 80044a0:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80044a2:	2300      	movs	r3, #0
 80044a4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80044aa:	683b      	ldr	r3, [r7, #0]
 80044ac:	785b      	ldrb	r3, [r3, #1]
 80044ae:	2b01      	cmp	r3, #1
 80044b0:	d14a      	bne.n	8004548 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80044b2:	683b      	ldr	r3, [r7, #0]
 80044b4:	781b      	ldrb	r3, [r3, #0]
 80044b6:	015a      	lsls	r2, r3, #5
 80044b8:	693b      	ldr	r3, [r7, #16]
 80044ba:	4413      	add	r3, r2
 80044bc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80044c6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80044ca:	f040 8086 	bne.w	80045da <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80044ce:	683b      	ldr	r3, [r7, #0]
 80044d0:	781b      	ldrb	r3, [r3, #0]
 80044d2:	015a      	lsls	r2, r3, #5
 80044d4:	693b      	ldr	r3, [r7, #16]
 80044d6:	4413      	add	r3, r2
 80044d8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	683a      	ldr	r2, [r7, #0]
 80044e0:	7812      	ldrb	r2, [r2, #0]
 80044e2:	0151      	lsls	r1, r2, #5
 80044e4:	693a      	ldr	r2, [r7, #16]
 80044e6:	440a      	add	r2, r1
 80044e8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80044ec:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80044f0:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80044f2:	683b      	ldr	r3, [r7, #0]
 80044f4:	781b      	ldrb	r3, [r3, #0]
 80044f6:	015a      	lsls	r2, r3, #5
 80044f8:	693b      	ldr	r3, [r7, #16]
 80044fa:	4413      	add	r3, r2
 80044fc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	683a      	ldr	r2, [r7, #0]
 8004504:	7812      	ldrb	r2, [r2, #0]
 8004506:	0151      	lsls	r1, r2, #5
 8004508:	693a      	ldr	r2, [r7, #16]
 800450a:	440a      	add	r2, r1
 800450c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004510:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004514:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	3301      	adds	r3, #1
 800451a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	f242 7210 	movw	r2, #10000	@ 0x2710
 8004522:	4293      	cmp	r3, r2
 8004524:	d902      	bls.n	800452c <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8004526:	2301      	movs	r3, #1
 8004528:	75fb      	strb	r3, [r7, #23]
          break;
 800452a:	e056      	b.n	80045da <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800452c:	683b      	ldr	r3, [r7, #0]
 800452e:	781b      	ldrb	r3, [r3, #0]
 8004530:	015a      	lsls	r2, r3, #5
 8004532:	693b      	ldr	r3, [r7, #16]
 8004534:	4413      	add	r3, r2
 8004536:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004540:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004544:	d0e7      	beq.n	8004516 <USB_EPStopXfer+0x82>
 8004546:	e048      	b.n	80045da <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004548:	683b      	ldr	r3, [r7, #0]
 800454a:	781b      	ldrb	r3, [r3, #0]
 800454c:	015a      	lsls	r2, r3, #5
 800454e:	693b      	ldr	r3, [r7, #16]
 8004550:	4413      	add	r3, r2
 8004552:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800455c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004560:	d13b      	bne.n	80045da <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8004562:	683b      	ldr	r3, [r7, #0]
 8004564:	781b      	ldrb	r3, [r3, #0]
 8004566:	015a      	lsls	r2, r3, #5
 8004568:	693b      	ldr	r3, [r7, #16]
 800456a:	4413      	add	r3, r2
 800456c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	683a      	ldr	r2, [r7, #0]
 8004574:	7812      	ldrb	r2, [r2, #0]
 8004576:	0151      	lsls	r1, r2, #5
 8004578:	693a      	ldr	r2, [r7, #16]
 800457a:	440a      	add	r2, r1
 800457c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004580:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8004584:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8004586:	683b      	ldr	r3, [r7, #0]
 8004588:	781b      	ldrb	r3, [r3, #0]
 800458a:	015a      	lsls	r2, r3, #5
 800458c:	693b      	ldr	r3, [r7, #16]
 800458e:	4413      	add	r3, r2
 8004590:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	683a      	ldr	r2, [r7, #0]
 8004598:	7812      	ldrb	r2, [r2, #0]
 800459a:	0151      	lsls	r1, r2, #5
 800459c:	693a      	ldr	r2, [r7, #16]
 800459e:	440a      	add	r2, r1
 80045a0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80045a4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80045a8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	3301      	adds	r3, #1
 80045ae:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	f242 7210 	movw	r2, #10000	@ 0x2710
 80045b6:	4293      	cmp	r3, r2
 80045b8:	d902      	bls.n	80045c0 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80045ba:	2301      	movs	r3, #1
 80045bc:	75fb      	strb	r3, [r7, #23]
          break;
 80045be:	e00c      	b.n	80045da <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80045c0:	683b      	ldr	r3, [r7, #0]
 80045c2:	781b      	ldrb	r3, [r3, #0]
 80045c4:	015a      	lsls	r2, r3, #5
 80045c6:	693b      	ldr	r3, [r7, #16]
 80045c8:	4413      	add	r3, r2
 80045ca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80045d4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80045d8:	d0e7      	beq.n	80045aa <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80045da:	7dfb      	ldrb	r3, [r7, #23]
}
 80045dc:	4618      	mov	r0, r3
 80045de:	371c      	adds	r7, #28
 80045e0:	46bd      	mov	sp, r7
 80045e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e6:	4770      	bx	lr

080045e8 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80045e8:	b480      	push	{r7}
 80045ea:	b089      	sub	sp, #36	@ 0x24
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	60f8      	str	r0, [r7, #12]
 80045f0:	60b9      	str	r1, [r7, #8]
 80045f2:	4611      	mov	r1, r2
 80045f4:	461a      	mov	r2, r3
 80045f6:	460b      	mov	r3, r1
 80045f8:	71fb      	strb	r3, [r7, #7]
 80045fa:	4613      	mov	r3, r2
 80045fc:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8004602:	68bb      	ldr	r3, [r7, #8]
 8004604:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8004606:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800460a:	2b00      	cmp	r3, #0
 800460c:	d123      	bne.n	8004656 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800460e:	88bb      	ldrh	r3, [r7, #4]
 8004610:	3303      	adds	r3, #3
 8004612:	089b      	lsrs	r3, r3, #2
 8004614:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8004616:	2300      	movs	r3, #0
 8004618:	61bb      	str	r3, [r7, #24]
 800461a:	e018      	b.n	800464e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800461c:	79fb      	ldrb	r3, [r7, #7]
 800461e:	031a      	lsls	r2, r3, #12
 8004620:	697b      	ldr	r3, [r7, #20]
 8004622:	4413      	add	r3, r2
 8004624:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004628:	461a      	mov	r2, r3
 800462a:	69fb      	ldr	r3, [r7, #28]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8004630:	69fb      	ldr	r3, [r7, #28]
 8004632:	3301      	adds	r3, #1
 8004634:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004636:	69fb      	ldr	r3, [r7, #28]
 8004638:	3301      	adds	r3, #1
 800463a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800463c:	69fb      	ldr	r3, [r7, #28]
 800463e:	3301      	adds	r3, #1
 8004640:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004642:	69fb      	ldr	r3, [r7, #28]
 8004644:	3301      	adds	r3, #1
 8004646:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8004648:	69bb      	ldr	r3, [r7, #24]
 800464a:	3301      	adds	r3, #1
 800464c:	61bb      	str	r3, [r7, #24]
 800464e:	69ba      	ldr	r2, [r7, #24]
 8004650:	693b      	ldr	r3, [r7, #16]
 8004652:	429a      	cmp	r2, r3
 8004654:	d3e2      	bcc.n	800461c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8004656:	2300      	movs	r3, #0
}
 8004658:	4618      	mov	r0, r3
 800465a:	3724      	adds	r7, #36	@ 0x24
 800465c:	46bd      	mov	sp, r7
 800465e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004662:	4770      	bx	lr

08004664 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8004664:	b480      	push	{r7}
 8004666:	b08b      	sub	sp, #44	@ 0x2c
 8004668:	af00      	add	r7, sp, #0
 800466a:	60f8      	str	r0, [r7, #12]
 800466c:	60b9      	str	r1, [r7, #8]
 800466e:	4613      	mov	r3, r2
 8004670:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8004676:	68bb      	ldr	r3, [r7, #8]
 8004678:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800467a:	88fb      	ldrh	r3, [r7, #6]
 800467c:	089b      	lsrs	r3, r3, #2
 800467e:	b29b      	uxth	r3, r3
 8004680:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8004682:	88fb      	ldrh	r3, [r7, #6]
 8004684:	f003 0303 	and.w	r3, r3, #3
 8004688:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800468a:	2300      	movs	r3, #0
 800468c:	623b      	str	r3, [r7, #32]
 800468e:	e014      	b.n	80046ba <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8004690:	69bb      	ldr	r3, [r7, #24]
 8004692:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004696:	681a      	ldr	r2, [r3, #0]
 8004698:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800469a:	601a      	str	r2, [r3, #0]
    pDest++;
 800469c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800469e:	3301      	adds	r3, #1
 80046a0:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80046a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046a4:	3301      	adds	r3, #1
 80046a6:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80046a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046aa:	3301      	adds	r3, #1
 80046ac:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80046ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046b0:	3301      	adds	r3, #1
 80046b2:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 80046b4:	6a3b      	ldr	r3, [r7, #32]
 80046b6:	3301      	adds	r3, #1
 80046b8:	623b      	str	r3, [r7, #32]
 80046ba:	6a3a      	ldr	r2, [r7, #32]
 80046bc:	697b      	ldr	r3, [r7, #20]
 80046be:	429a      	cmp	r2, r3
 80046c0:	d3e6      	bcc.n	8004690 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80046c2:	8bfb      	ldrh	r3, [r7, #30]
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d01e      	beq.n	8004706 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80046c8:	2300      	movs	r3, #0
 80046ca:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80046cc:	69bb      	ldr	r3, [r7, #24]
 80046ce:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80046d2:	461a      	mov	r2, r3
 80046d4:	f107 0310 	add.w	r3, r7, #16
 80046d8:	6812      	ldr	r2, [r2, #0]
 80046da:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80046dc:	693a      	ldr	r2, [r7, #16]
 80046de:	6a3b      	ldr	r3, [r7, #32]
 80046e0:	b2db      	uxtb	r3, r3
 80046e2:	00db      	lsls	r3, r3, #3
 80046e4:	fa22 f303 	lsr.w	r3, r2, r3
 80046e8:	b2da      	uxtb	r2, r3
 80046ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046ec:	701a      	strb	r2, [r3, #0]
      i++;
 80046ee:	6a3b      	ldr	r3, [r7, #32]
 80046f0:	3301      	adds	r3, #1
 80046f2:	623b      	str	r3, [r7, #32]
      pDest++;
 80046f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046f6:	3301      	adds	r3, #1
 80046f8:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 80046fa:	8bfb      	ldrh	r3, [r7, #30]
 80046fc:	3b01      	subs	r3, #1
 80046fe:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8004700:	8bfb      	ldrh	r3, [r7, #30]
 8004702:	2b00      	cmp	r3, #0
 8004704:	d1ea      	bne.n	80046dc <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8004706:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8004708:	4618      	mov	r0, r3
 800470a:	372c      	adds	r7, #44	@ 0x2c
 800470c:	46bd      	mov	sp, r7
 800470e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004712:	4770      	bx	lr

08004714 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8004714:	b480      	push	{r7}
 8004716:	b085      	sub	sp, #20
 8004718:	af00      	add	r7, sp, #0
 800471a:	6078      	str	r0, [r7, #4]
 800471c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004722:	683b      	ldr	r3, [r7, #0]
 8004724:	781b      	ldrb	r3, [r3, #0]
 8004726:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004728:	683b      	ldr	r3, [r7, #0]
 800472a:	785b      	ldrb	r3, [r3, #1]
 800472c:	2b01      	cmp	r3, #1
 800472e:	d12c      	bne.n	800478a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004730:	68bb      	ldr	r3, [r7, #8]
 8004732:	015a      	lsls	r2, r3, #5
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	4413      	add	r3, r2
 8004738:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	2b00      	cmp	r3, #0
 8004740:	db12      	blt.n	8004768 <USB_EPSetStall+0x54>
 8004742:	68bb      	ldr	r3, [r7, #8]
 8004744:	2b00      	cmp	r3, #0
 8004746:	d00f      	beq.n	8004768 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8004748:	68bb      	ldr	r3, [r7, #8]
 800474a:	015a      	lsls	r2, r3, #5
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	4413      	add	r3, r2
 8004750:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	68ba      	ldr	r2, [r7, #8]
 8004758:	0151      	lsls	r1, r2, #5
 800475a:	68fa      	ldr	r2, [r7, #12]
 800475c:	440a      	add	r2, r1
 800475e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004762:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004766:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8004768:	68bb      	ldr	r3, [r7, #8]
 800476a:	015a      	lsls	r2, r3, #5
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	4413      	add	r3, r2
 8004770:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	68ba      	ldr	r2, [r7, #8]
 8004778:	0151      	lsls	r1, r2, #5
 800477a:	68fa      	ldr	r2, [r7, #12]
 800477c:	440a      	add	r2, r1
 800477e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004782:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004786:	6013      	str	r3, [r2, #0]
 8004788:	e02b      	b.n	80047e2 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800478a:	68bb      	ldr	r3, [r7, #8]
 800478c:	015a      	lsls	r2, r3, #5
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	4413      	add	r3, r2
 8004792:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	2b00      	cmp	r3, #0
 800479a:	db12      	blt.n	80047c2 <USB_EPSetStall+0xae>
 800479c:	68bb      	ldr	r3, [r7, #8]
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d00f      	beq.n	80047c2 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80047a2:	68bb      	ldr	r3, [r7, #8]
 80047a4:	015a      	lsls	r2, r3, #5
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	4413      	add	r3, r2
 80047aa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	68ba      	ldr	r2, [r7, #8]
 80047b2:	0151      	lsls	r1, r2, #5
 80047b4:	68fa      	ldr	r2, [r7, #12]
 80047b6:	440a      	add	r2, r1
 80047b8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80047bc:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80047c0:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80047c2:	68bb      	ldr	r3, [r7, #8]
 80047c4:	015a      	lsls	r2, r3, #5
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	4413      	add	r3, r2
 80047ca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	68ba      	ldr	r2, [r7, #8]
 80047d2:	0151      	lsls	r1, r2, #5
 80047d4:	68fa      	ldr	r2, [r7, #12]
 80047d6:	440a      	add	r2, r1
 80047d8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80047dc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80047e0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80047e2:	2300      	movs	r3, #0
}
 80047e4:	4618      	mov	r0, r3
 80047e6:	3714      	adds	r7, #20
 80047e8:	46bd      	mov	sp, r7
 80047ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ee:	4770      	bx	lr

080047f0 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80047f0:	b480      	push	{r7}
 80047f2:	b085      	sub	sp, #20
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	6078      	str	r0, [r7, #4]
 80047f8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80047fe:	683b      	ldr	r3, [r7, #0]
 8004800:	781b      	ldrb	r3, [r3, #0]
 8004802:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004804:	683b      	ldr	r3, [r7, #0]
 8004806:	785b      	ldrb	r3, [r3, #1]
 8004808:	2b01      	cmp	r3, #1
 800480a:	d128      	bne.n	800485e <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800480c:	68bb      	ldr	r3, [r7, #8]
 800480e:	015a      	lsls	r2, r3, #5
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	4413      	add	r3, r2
 8004814:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	68ba      	ldr	r2, [r7, #8]
 800481c:	0151      	lsls	r1, r2, #5
 800481e:	68fa      	ldr	r2, [r7, #12]
 8004820:	440a      	add	r2, r1
 8004822:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004826:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800482a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800482c:	683b      	ldr	r3, [r7, #0]
 800482e:	791b      	ldrb	r3, [r3, #4]
 8004830:	2b03      	cmp	r3, #3
 8004832:	d003      	beq.n	800483c <USB_EPClearStall+0x4c>
 8004834:	683b      	ldr	r3, [r7, #0]
 8004836:	791b      	ldrb	r3, [r3, #4]
 8004838:	2b02      	cmp	r3, #2
 800483a:	d138      	bne.n	80048ae <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800483c:	68bb      	ldr	r3, [r7, #8]
 800483e:	015a      	lsls	r2, r3, #5
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	4413      	add	r3, r2
 8004844:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	68ba      	ldr	r2, [r7, #8]
 800484c:	0151      	lsls	r1, r2, #5
 800484e:	68fa      	ldr	r2, [r7, #12]
 8004850:	440a      	add	r2, r1
 8004852:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004856:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800485a:	6013      	str	r3, [r2, #0]
 800485c:	e027      	b.n	80048ae <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800485e:	68bb      	ldr	r3, [r7, #8]
 8004860:	015a      	lsls	r2, r3, #5
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	4413      	add	r3, r2
 8004866:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	68ba      	ldr	r2, [r7, #8]
 800486e:	0151      	lsls	r1, r2, #5
 8004870:	68fa      	ldr	r2, [r7, #12]
 8004872:	440a      	add	r2, r1
 8004874:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004878:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800487c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800487e:	683b      	ldr	r3, [r7, #0]
 8004880:	791b      	ldrb	r3, [r3, #4]
 8004882:	2b03      	cmp	r3, #3
 8004884:	d003      	beq.n	800488e <USB_EPClearStall+0x9e>
 8004886:	683b      	ldr	r3, [r7, #0]
 8004888:	791b      	ldrb	r3, [r3, #4]
 800488a:	2b02      	cmp	r3, #2
 800488c:	d10f      	bne.n	80048ae <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800488e:	68bb      	ldr	r3, [r7, #8]
 8004890:	015a      	lsls	r2, r3, #5
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	4413      	add	r3, r2
 8004896:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	68ba      	ldr	r2, [r7, #8]
 800489e:	0151      	lsls	r1, r2, #5
 80048a0:	68fa      	ldr	r2, [r7, #12]
 80048a2:	440a      	add	r2, r1
 80048a4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80048a8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80048ac:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80048ae:	2300      	movs	r3, #0
}
 80048b0:	4618      	mov	r0, r3
 80048b2:	3714      	adds	r7, #20
 80048b4:	46bd      	mov	sp, r7
 80048b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ba:	4770      	bx	lr

080048bc <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80048bc:	b480      	push	{r7}
 80048be:	b085      	sub	sp, #20
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	6078      	str	r0, [r7, #4]
 80048c4:	460b      	mov	r3, r1
 80048c6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	68fa      	ldr	r2, [r7, #12]
 80048d6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80048da:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80048de:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80048e6:	681a      	ldr	r2, [r3, #0]
 80048e8:	78fb      	ldrb	r3, [r7, #3]
 80048ea:	011b      	lsls	r3, r3, #4
 80048ec:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 80048f0:	68f9      	ldr	r1, [r7, #12]
 80048f2:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80048f6:	4313      	orrs	r3, r2
 80048f8:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80048fa:	2300      	movs	r3, #0
}
 80048fc:	4618      	mov	r0, r3
 80048fe:	3714      	adds	r7, #20
 8004900:	46bd      	mov	sp, r7
 8004902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004906:	4770      	bx	lr

08004908 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8004908:	b480      	push	{r7}
 800490a:	b085      	sub	sp, #20
 800490c:	af00      	add	r7, sp, #0
 800490e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	68fa      	ldr	r2, [r7, #12]
 800491e:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8004922:	f023 0303 	bic.w	r3, r3, #3
 8004926:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800492e:	685b      	ldr	r3, [r3, #4]
 8004930:	68fa      	ldr	r2, [r7, #12]
 8004932:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004936:	f023 0302 	bic.w	r3, r3, #2
 800493a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800493c:	2300      	movs	r3, #0
}
 800493e:	4618      	mov	r0, r3
 8004940:	3714      	adds	r7, #20
 8004942:	46bd      	mov	sp, r7
 8004944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004948:	4770      	bx	lr

0800494a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800494a:	b480      	push	{r7}
 800494c:	b085      	sub	sp, #20
 800494e:	af00      	add	r7, sp, #0
 8004950:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	68fa      	ldr	r2, [r7, #12]
 8004960:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8004964:	f023 0303 	bic.w	r3, r3, #3
 8004968:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004970:	685b      	ldr	r3, [r3, #4]
 8004972:	68fa      	ldr	r2, [r7, #12]
 8004974:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004978:	f043 0302 	orr.w	r3, r3, #2
 800497c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800497e:	2300      	movs	r3, #0
}
 8004980:	4618      	mov	r0, r3
 8004982:	3714      	adds	r7, #20
 8004984:	46bd      	mov	sp, r7
 8004986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800498a:	4770      	bx	lr

0800498c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800498c:	b480      	push	{r7}
 800498e:	b085      	sub	sp, #20
 8004990:	af00      	add	r7, sp, #0
 8004992:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	695b      	ldr	r3, [r3, #20]
 8004998:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	699b      	ldr	r3, [r3, #24]
 800499e:	68fa      	ldr	r2, [r7, #12]
 80049a0:	4013      	ands	r3, r2
 80049a2:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80049a4:	68fb      	ldr	r3, [r7, #12]
}
 80049a6:	4618      	mov	r0, r3
 80049a8:	3714      	adds	r7, #20
 80049aa:	46bd      	mov	sp, r7
 80049ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b0:	4770      	bx	lr

080049b2 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80049b2:	b480      	push	{r7}
 80049b4:	b085      	sub	sp, #20
 80049b6:	af00      	add	r7, sp, #0
 80049b8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80049c4:	699b      	ldr	r3, [r3, #24]
 80049c6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80049ce:	69db      	ldr	r3, [r3, #28]
 80049d0:	68ba      	ldr	r2, [r7, #8]
 80049d2:	4013      	ands	r3, r2
 80049d4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80049d6:	68bb      	ldr	r3, [r7, #8]
 80049d8:	0c1b      	lsrs	r3, r3, #16
}
 80049da:	4618      	mov	r0, r3
 80049dc:	3714      	adds	r7, #20
 80049de:	46bd      	mov	sp, r7
 80049e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e4:	4770      	bx	lr

080049e6 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80049e6:	b480      	push	{r7}
 80049e8:	b085      	sub	sp, #20
 80049ea:	af00      	add	r7, sp, #0
 80049ec:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80049f8:	699b      	ldr	r3, [r3, #24]
 80049fa:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004a02:	69db      	ldr	r3, [r3, #28]
 8004a04:	68ba      	ldr	r2, [r7, #8]
 8004a06:	4013      	ands	r3, r2
 8004a08:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8004a0a:	68bb      	ldr	r3, [r7, #8]
 8004a0c:	b29b      	uxth	r3, r3
}
 8004a0e:	4618      	mov	r0, r3
 8004a10:	3714      	adds	r7, #20
 8004a12:	46bd      	mov	sp, r7
 8004a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a18:	4770      	bx	lr

08004a1a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004a1a:	b480      	push	{r7}
 8004a1c:	b085      	sub	sp, #20
 8004a1e:	af00      	add	r7, sp, #0
 8004a20:	6078      	str	r0, [r7, #4]
 8004a22:	460b      	mov	r3, r1
 8004a24:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8004a2a:	78fb      	ldrb	r3, [r7, #3]
 8004a2c:	015a      	lsls	r2, r3, #5
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	4413      	add	r3, r2
 8004a32:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004a36:	689b      	ldr	r3, [r3, #8]
 8004a38:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004a40:	695b      	ldr	r3, [r3, #20]
 8004a42:	68ba      	ldr	r2, [r7, #8]
 8004a44:	4013      	ands	r3, r2
 8004a46:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004a48:	68bb      	ldr	r3, [r7, #8]
}
 8004a4a:	4618      	mov	r0, r3
 8004a4c:	3714      	adds	r7, #20
 8004a4e:	46bd      	mov	sp, r7
 8004a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a54:	4770      	bx	lr

08004a56 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004a56:	b480      	push	{r7}
 8004a58:	b087      	sub	sp, #28
 8004a5a:	af00      	add	r7, sp, #0
 8004a5c:	6078      	str	r0, [r7, #4]
 8004a5e:	460b      	mov	r3, r1
 8004a60:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8004a66:	697b      	ldr	r3, [r7, #20]
 8004a68:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004a6c:	691b      	ldr	r3, [r3, #16]
 8004a6e:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8004a70:	697b      	ldr	r3, [r7, #20]
 8004a72:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004a76:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004a78:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8004a7a:	78fb      	ldrb	r3, [r7, #3]
 8004a7c:	f003 030f 	and.w	r3, r3, #15
 8004a80:	68fa      	ldr	r2, [r7, #12]
 8004a82:	fa22 f303 	lsr.w	r3, r2, r3
 8004a86:	01db      	lsls	r3, r3, #7
 8004a88:	b2db      	uxtb	r3, r3
 8004a8a:	693a      	ldr	r2, [r7, #16]
 8004a8c:	4313      	orrs	r3, r2
 8004a8e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8004a90:	78fb      	ldrb	r3, [r7, #3]
 8004a92:	015a      	lsls	r2, r3, #5
 8004a94:	697b      	ldr	r3, [r7, #20]
 8004a96:	4413      	add	r3, r2
 8004a98:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004a9c:	689b      	ldr	r3, [r3, #8]
 8004a9e:	693a      	ldr	r2, [r7, #16]
 8004aa0:	4013      	ands	r3, r2
 8004aa2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004aa4:	68bb      	ldr	r3, [r7, #8]
}
 8004aa6:	4618      	mov	r0, r3
 8004aa8:	371c      	adds	r7, #28
 8004aaa:	46bd      	mov	sp, r7
 8004aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab0:	4770      	bx	lr

08004ab2 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8004ab2:	b480      	push	{r7}
 8004ab4:	b083      	sub	sp, #12
 8004ab6:	af00      	add	r7, sp, #0
 8004ab8:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	695b      	ldr	r3, [r3, #20]
 8004abe:	f003 0301 	and.w	r3, r3, #1
}
 8004ac2:	4618      	mov	r0, r3
 8004ac4:	370c      	adds	r7, #12
 8004ac6:	46bd      	mov	sp, r7
 8004ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004acc:	4770      	bx	lr

08004ace <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8004ace:	b480      	push	{r7}
 8004ad0:	b085      	sub	sp, #20
 8004ad2:	af00      	add	r7, sp, #0
 8004ad4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	68fa      	ldr	r2, [r7, #12]
 8004ae4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004ae8:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8004aec:	f023 0307 	bic.w	r3, r3, #7
 8004af0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004af8:	685b      	ldr	r3, [r3, #4]
 8004afa:	68fa      	ldr	r2, [r7, #12]
 8004afc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004b00:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004b04:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004b06:	2300      	movs	r3, #0
}
 8004b08:	4618      	mov	r0, r3
 8004b0a:	3714      	adds	r7, #20
 8004b0c:	46bd      	mov	sp, r7
 8004b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b12:	4770      	bx	lr

08004b14 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8004b14:	b480      	push	{r7}
 8004b16:	b087      	sub	sp, #28
 8004b18:	af00      	add	r7, sp, #0
 8004b1a:	60f8      	str	r0, [r7, #12]
 8004b1c:	460b      	mov	r3, r1
 8004b1e:	607a      	str	r2, [r7, #4]
 8004b20:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	333c      	adds	r3, #60	@ 0x3c
 8004b2a:	3304      	adds	r3, #4
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8004b30:	693b      	ldr	r3, [r7, #16]
 8004b32:	4a26      	ldr	r2, [pc, #152]	@ (8004bcc <USB_EP0_OutStart+0xb8>)
 8004b34:	4293      	cmp	r3, r2
 8004b36:	d90a      	bls.n	8004b4e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004b38:	697b      	ldr	r3, [r7, #20]
 8004b3a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004b44:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004b48:	d101      	bne.n	8004b4e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8004b4a:	2300      	movs	r3, #0
 8004b4c:	e037      	b.n	8004bbe <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8004b4e:	697b      	ldr	r3, [r7, #20]
 8004b50:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004b54:	461a      	mov	r2, r3
 8004b56:	2300      	movs	r3, #0
 8004b58:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004b5a:	697b      	ldr	r3, [r7, #20]
 8004b5c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004b60:	691b      	ldr	r3, [r3, #16]
 8004b62:	697a      	ldr	r2, [r7, #20]
 8004b64:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004b68:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004b6c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8004b6e:	697b      	ldr	r3, [r7, #20]
 8004b70:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004b74:	691b      	ldr	r3, [r3, #16]
 8004b76:	697a      	ldr	r2, [r7, #20]
 8004b78:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004b7c:	f043 0318 	orr.w	r3, r3, #24
 8004b80:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8004b82:	697b      	ldr	r3, [r7, #20]
 8004b84:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004b88:	691b      	ldr	r3, [r3, #16]
 8004b8a:	697a      	ldr	r2, [r7, #20]
 8004b8c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004b90:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8004b94:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8004b96:	7afb      	ldrb	r3, [r7, #11]
 8004b98:	2b01      	cmp	r3, #1
 8004b9a:	d10f      	bne.n	8004bbc <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8004b9c:	697b      	ldr	r3, [r7, #20]
 8004b9e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004ba2:	461a      	mov	r2, r3
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8004ba8:	697b      	ldr	r3, [r7, #20]
 8004baa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	697a      	ldr	r2, [r7, #20]
 8004bb2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004bb6:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8004bba:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004bbc:	2300      	movs	r3, #0
}
 8004bbe:	4618      	mov	r0, r3
 8004bc0:	371c      	adds	r7, #28
 8004bc2:	46bd      	mov	sp, r7
 8004bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc8:	4770      	bx	lr
 8004bca:	bf00      	nop
 8004bcc:	4f54300a 	.word	0x4f54300a

08004bd0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004bd0:	b480      	push	{r7}
 8004bd2:	b085      	sub	sp, #20
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004bd8:	2300      	movs	r3, #0
 8004bda:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	3301      	adds	r3, #1
 8004be0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004be8:	d901      	bls.n	8004bee <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004bea:	2303      	movs	r3, #3
 8004bec:	e01b      	b.n	8004c26 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	691b      	ldr	r3, [r3, #16]
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	daf2      	bge.n	8004bdc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004bf6:	2300      	movs	r3, #0
 8004bf8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	691b      	ldr	r3, [r3, #16]
 8004bfe:	f043 0201 	orr.w	r2, r3, #1
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	3301      	adds	r3, #1
 8004c0a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004c12:	d901      	bls.n	8004c18 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004c14:	2303      	movs	r3, #3
 8004c16:	e006      	b.n	8004c26 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	691b      	ldr	r3, [r3, #16]
 8004c1c:	f003 0301 	and.w	r3, r3, #1
 8004c20:	2b01      	cmp	r3, #1
 8004c22:	d0f0      	beq.n	8004c06 <USB_CoreReset+0x36>

  return HAL_OK;
 8004c24:	2300      	movs	r3, #0
}
 8004c26:	4618      	mov	r0, r3
 8004c28:	3714      	adds	r7, #20
 8004c2a:	46bd      	mov	sp, r7
 8004c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c30:	4770      	bx	lr
	...

08004c34 <USBD_CUSTOM_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004c34:	b580      	push	{r7, lr}
 8004c36:	b084      	sub	sp, #16
 8004c38:	af00      	add	r7, sp, #0
 8004c3a:	6078      	str	r0, [r7, #4]
 8004c3c:	460b      	mov	r3, r1
 8004c3e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)USBD_malloc(sizeof(USBD_CUSTOM_HID_HandleTypeDef));
 8004c40:	2054      	movs	r0, #84	@ 0x54
 8004c42:	f002 fb59 	bl	80072f8 <USBD_static_malloc>
 8004c46:	60f8      	str	r0, [r7, #12]

  if (hhid == NULL)
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d109      	bne.n	8004c62 <USBD_CUSTOM_HID_Init+0x2e>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	32b0      	adds	r2, #176	@ 0xb0
 8004c58:	2100      	movs	r1, #0
 8004c5a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8004c5e:	2302      	movs	r3, #2
 8004c60:	e08b      	b.n	8004d7a <USBD_CUSTOM_HID_Init+0x146>
  }

  pdev->pClassDataCmsit[pdev->classId] = (void *)hhid;
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	32b0      	adds	r2, #176	@ 0xb0
 8004c6c:	68f9      	ldr	r1, [r7, #12]
 8004c6e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	32b0      	adds	r2, #176	@ 0xb0
 8004c7c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  /* Get the Endpoints addresses allocated for this class instance */
  CUSTOMHIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
  CUSTOMHIDOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	7c1b      	ldrb	r3, [r3, #16]
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d11b      	bne.n	8004cc6 <USBD_CUSTOM_HID_Init+0x92>
  {
    pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].bInterval = CUSTOM_HID_HS_BINTERVAL;
 8004c8e:	4b3d      	ldr	r3, [pc, #244]	@ (8004d84 <USBD_CUSTOM_HID_Init+0x150>)
 8004c90:	781b      	ldrb	r3, [r3, #0]
 8004c92:	f003 020f 	and.w	r2, r3, #15
 8004c96:	6879      	ldr	r1, [r7, #4]
 8004c98:	4613      	mov	r3, r2
 8004c9a:	009b      	lsls	r3, r3, #2
 8004c9c:	4413      	add	r3, r2
 8004c9e:	009b      	lsls	r3, r3, #2
 8004ca0:	440b      	add	r3, r1
 8004ca2:	3326      	adds	r3, #38	@ 0x26
 8004ca4:	2205      	movs	r2, #5
 8004ca6:	801a      	strh	r2, [r3, #0]
    pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].bInterval = CUSTOM_HID_HS_BINTERVAL;
 8004ca8:	4b37      	ldr	r3, [pc, #220]	@ (8004d88 <USBD_CUSTOM_HID_Init+0x154>)
 8004caa:	781b      	ldrb	r3, [r3, #0]
 8004cac:	f003 020f 	and.w	r2, r3, #15
 8004cb0:	6879      	ldr	r1, [r7, #4]
 8004cb2:	4613      	mov	r3, r2
 8004cb4:	009b      	lsls	r3, r3, #2
 8004cb6:	4413      	add	r3, r2
 8004cb8:	009b      	lsls	r3, r3, #2
 8004cba:	440b      	add	r3, r1
 8004cbc:	f503 73b3 	add.w	r3, r3, #358	@ 0x166
 8004cc0:	2205      	movs	r2, #5
 8004cc2:	801a      	strh	r2, [r3, #0]
 8004cc4:	e01a      	b.n	8004cfc <USBD_CUSTOM_HID_Init+0xc8>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].bInterval = CUSTOM_HID_FS_BINTERVAL;
 8004cc6:	4b2f      	ldr	r3, [pc, #188]	@ (8004d84 <USBD_CUSTOM_HID_Init+0x150>)
 8004cc8:	781b      	ldrb	r3, [r3, #0]
 8004cca:	f003 020f 	and.w	r2, r3, #15
 8004cce:	6879      	ldr	r1, [r7, #4]
 8004cd0:	4613      	mov	r3, r2
 8004cd2:	009b      	lsls	r3, r3, #2
 8004cd4:	4413      	add	r3, r2
 8004cd6:	009b      	lsls	r3, r3, #2
 8004cd8:	440b      	add	r3, r1
 8004cda:	3326      	adds	r3, #38	@ 0x26
 8004cdc:	2205      	movs	r2, #5
 8004cde:	801a      	strh	r2, [r3, #0]
    pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].bInterval = CUSTOM_HID_FS_BINTERVAL;
 8004ce0:	4b29      	ldr	r3, [pc, #164]	@ (8004d88 <USBD_CUSTOM_HID_Init+0x154>)
 8004ce2:	781b      	ldrb	r3, [r3, #0]
 8004ce4:	f003 020f 	and.w	r2, r3, #15
 8004ce8:	6879      	ldr	r1, [r7, #4]
 8004cea:	4613      	mov	r3, r2
 8004cec:	009b      	lsls	r3, r3, #2
 8004cee:	4413      	add	r3, r2
 8004cf0:	009b      	lsls	r3, r3, #2
 8004cf2:	440b      	add	r3, r1
 8004cf4:	f503 73b3 	add.w	r3, r3, #358	@ 0x166
 8004cf8:	2205      	movs	r2, #5
 8004cfa:	801a      	strh	r2, [r3, #0]
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, CUSTOMHIDInEpAdd, USBD_EP_TYPE_INTR,
 8004cfc:	4b21      	ldr	r3, [pc, #132]	@ (8004d84 <USBD_CUSTOM_HID_Init+0x150>)
 8004cfe:	7819      	ldrb	r1, [r3, #0]
 8004d00:	2302      	movs	r3, #2
 8004d02:	2203      	movs	r2, #3
 8004d04:	6878      	ldr	r0, [r7, #4]
 8004d06:	f002 f9e6 	bl	80070d6 <USBD_LL_OpenEP>
                       CUSTOM_HID_EPIN_SIZE);

  pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].is_used = 1U;
 8004d0a:	4b1e      	ldr	r3, [pc, #120]	@ (8004d84 <USBD_CUSTOM_HID_Init+0x150>)
 8004d0c:	781b      	ldrb	r3, [r3, #0]
 8004d0e:	f003 020f 	and.w	r2, r3, #15
 8004d12:	6879      	ldr	r1, [r7, #4]
 8004d14:	4613      	mov	r3, r2
 8004d16:	009b      	lsls	r3, r3, #2
 8004d18:	4413      	add	r3, r2
 8004d1a:	009b      	lsls	r3, r3, #2
 8004d1c:	440b      	add	r3, r1
 8004d1e:	3324      	adds	r3, #36	@ 0x24
 8004d20:	2201      	movs	r2, #1
 8004d22:	801a      	strh	r2, [r3, #0]

  /* Open EP OUT */
  (void)USBD_LL_OpenEP(pdev, CUSTOMHIDOutEpAdd, USBD_EP_TYPE_INTR,
 8004d24:	4b18      	ldr	r3, [pc, #96]	@ (8004d88 <USBD_CUSTOM_HID_Init+0x154>)
 8004d26:	7819      	ldrb	r1, [r3, #0]
 8004d28:	2302      	movs	r3, #2
 8004d2a:	2203      	movs	r2, #3
 8004d2c:	6878      	ldr	r0, [r7, #4]
 8004d2e:	f002 f9d2 	bl	80070d6 <USBD_LL_OpenEP>
                       CUSTOM_HID_EPOUT_SIZE);

  pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].is_used = 1U;
 8004d32:	4b15      	ldr	r3, [pc, #84]	@ (8004d88 <USBD_CUSTOM_HID_Init+0x154>)
 8004d34:	781b      	ldrb	r3, [r3, #0]
 8004d36:	f003 020f 	and.w	r2, r3, #15
 8004d3a:	6879      	ldr	r1, [r7, #4]
 8004d3c:	4613      	mov	r3, r2
 8004d3e:	009b      	lsls	r3, r3, #2
 8004d40:	4413      	add	r3, r2
 8004d42:	009b      	lsls	r3, r3, #2
 8004d44:	440b      	add	r3, r1
 8004d46:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8004d4a:	2201      	movs	r2, #1
 8004d4c:	801a      	strh	r2, [r3, #0]

  hhid->state = CUSTOM_HID_IDLE;
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	2200      	movs	r2, #0
 8004d52:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8004d5c:	687a      	ldr	r2, [r7, #4]
 8004d5e:	33b0      	adds	r3, #176	@ 0xb0
 8004d60:	009b      	lsls	r3, r3, #2
 8004d62:	4413      	add	r3, r2
 8004d64:	685b      	ldr	r3, [r3, #4]
 8004d66:	685b      	ldr	r3, [r3, #4]
 8004d68:	4798      	blx	r3

#ifndef USBD_CUSTOMHID_OUT_PREPARE_RECEIVE_DISABLED
  /* Prepare Out endpoint to receive 1st packet */
  (void)USBD_LL_PrepareReceive(pdev, CUSTOMHIDOutEpAdd, hhid->Report_buf,
 8004d6a:	4b07      	ldr	r3, [pc, #28]	@ (8004d88 <USBD_CUSTOM_HID_Init+0x154>)
 8004d6c:	7819      	ldrb	r1, [r3, #0]
 8004d6e:	68fa      	ldr	r2, [r7, #12]
 8004d70:	2340      	movs	r3, #64	@ 0x40
 8004d72:	6878      	ldr	r0, [r7, #4]
 8004d74:	f002 fa9e 	bl	80072b4 <USBD_LL_PrepareReceive>
                               USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);
#endif /* USBD_CUSTOMHID_OUT_PREPARE_RECEIVE_DISABLED */

  return (uint8_t)USBD_OK;
 8004d78:	2300      	movs	r3, #0
}
 8004d7a:	4618      	mov	r0, r3
 8004d7c:	3710      	adds	r7, #16
 8004d7e:	46bd      	mov	sp, r7
 8004d80:	bd80      	pop	{r7, pc}
 8004d82:	bf00      	nop
 8004d84:	20000086 	.word	0x20000086
 8004d88:	20000087 	.word	0x20000087

08004d8c <USBD_CUSTOM_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004d8c:	b580      	push	{r7, lr}
 8004d8e:	b082      	sub	sp, #8
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	6078      	str	r0, [r7, #4]
 8004d94:	460b      	mov	r3, r1
 8004d96:	70fb      	strb	r3, [r7, #3]
  CUSTOMHIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
  CUSTOMHIDOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close CUSTOM_HID EP IN */
  (void)USBD_LL_CloseEP(pdev, CUSTOMHIDInEpAdd);
 8004d98:	4b37      	ldr	r3, [pc, #220]	@ (8004e78 <USBD_CUSTOM_HID_DeInit+0xec>)
 8004d9a:	781b      	ldrb	r3, [r3, #0]
 8004d9c:	4619      	mov	r1, r3
 8004d9e:	6878      	ldr	r0, [r7, #4]
 8004da0:	f002 f9bf 	bl	8007122 <USBD_LL_CloseEP>
  pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].is_used = 0U;
 8004da4:	4b34      	ldr	r3, [pc, #208]	@ (8004e78 <USBD_CUSTOM_HID_DeInit+0xec>)
 8004da6:	781b      	ldrb	r3, [r3, #0]
 8004da8:	f003 020f 	and.w	r2, r3, #15
 8004dac:	6879      	ldr	r1, [r7, #4]
 8004dae:	4613      	mov	r3, r2
 8004db0:	009b      	lsls	r3, r3, #2
 8004db2:	4413      	add	r3, r2
 8004db4:	009b      	lsls	r3, r3, #2
 8004db6:	440b      	add	r3, r1
 8004db8:	3324      	adds	r3, #36	@ 0x24
 8004dba:	2200      	movs	r2, #0
 8004dbc:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].bInterval = 0U;
 8004dbe:	4b2e      	ldr	r3, [pc, #184]	@ (8004e78 <USBD_CUSTOM_HID_DeInit+0xec>)
 8004dc0:	781b      	ldrb	r3, [r3, #0]
 8004dc2:	f003 020f 	and.w	r2, r3, #15
 8004dc6:	6879      	ldr	r1, [r7, #4]
 8004dc8:	4613      	mov	r3, r2
 8004dca:	009b      	lsls	r3, r3, #2
 8004dcc:	4413      	add	r3, r2
 8004dce:	009b      	lsls	r3, r3, #2
 8004dd0:	440b      	add	r3, r1
 8004dd2:	3326      	adds	r3, #38	@ 0x26
 8004dd4:	2200      	movs	r2, #0
 8004dd6:	801a      	strh	r2, [r3, #0]

  /* Close CUSTOM_HID EP OUT */
  (void)USBD_LL_CloseEP(pdev, CUSTOMHIDOutEpAdd);
 8004dd8:	4b28      	ldr	r3, [pc, #160]	@ (8004e7c <USBD_CUSTOM_HID_DeInit+0xf0>)
 8004dda:	781b      	ldrb	r3, [r3, #0]
 8004ddc:	4619      	mov	r1, r3
 8004dde:	6878      	ldr	r0, [r7, #4]
 8004de0:	f002 f99f 	bl	8007122 <USBD_LL_CloseEP>
  pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].is_used = 0U;
 8004de4:	4b25      	ldr	r3, [pc, #148]	@ (8004e7c <USBD_CUSTOM_HID_DeInit+0xf0>)
 8004de6:	781b      	ldrb	r3, [r3, #0]
 8004de8:	f003 020f 	and.w	r2, r3, #15
 8004dec:	6879      	ldr	r1, [r7, #4]
 8004dee:	4613      	mov	r3, r2
 8004df0:	009b      	lsls	r3, r3, #2
 8004df2:	4413      	add	r3, r2
 8004df4:	009b      	lsls	r3, r3, #2
 8004df6:	440b      	add	r3, r1
 8004df8:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8004dfc:	2200      	movs	r2, #0
 8004dfe:	801a      	strh	r2, [r3, #0]
  pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].bInterval = 0U;
 8004e00:	4b1e      	ldr	r3, [pc, #120]	@ (8004e7c <USBD_CUSTOM_HID_DeInit+0xf0>)
 8004e02:	781b      	ldrb	r3, [r3, #0]
 8004e04:	f003 020f 	and.w	r2, r3, #15
 8004e08:	6879      	ldr	r1, [r7, #4]
 8004e0a:	4613      	mov	r3, r2
 8004e0c:	009b      	lsls	r3, r3, #2
 8004e0e:	4413      	add	r3, r2
 8004e10:	009b      	lsls	r3, r3, #2
 8004e12:	440b      	add	r3, r1
 8004e14:	f503 73b3 	add.w	r3, r3, #358	@ 0x166
 8004e18:	2200      	movs	r2, #0
 8004e1a:	801a      	strh	r2, [r3, #0]

  /* Free allocated memory */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	32b0      	adds	r2, #176	@ 0xb0
 8004e26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d01f      	beq.n	8004e6e <USBD_CUSTOM_HID_DeInit+0xe2>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8004e34:	687a      	ldr	r2, [r7, #4]
 8004e36:	33b0      	adds	r3, #176	@ 0xb0
 8004e38:	009b      	lsls	r3, r3, #2
 8004e3a:	4413      	add	r3, r2
 8004e3c:	685b      	ldr	r3, [r3, #4]
 8004e3e:	689b      	ldr	r3, [r3, #8]
 8004e40:	4798      	blx	r3
    USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	32b0      	adds	r2, #176	@ 0xb0
 8004e4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004e50:	4618      	mov	r0, r3
 8004e52:	f002 fa5f 	bl	8007314 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	32b0      	adds	r2, #176	@ 0xb0
 8004e60:	2100      	movs	r1, #0
 8004e62:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	2200      	movs	r2, #0
 8004e6a:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8004e6e:	2300      	movs	r3, #0
}
 8004e70:	4618      	mov	r0, r3
 8004e72:	3708      	adds	r7, #8
 8004e74:	46bd      	mov	sp, r7
 8004e76:	bd80      	pop	{r7, pc}
 8004e78:	20000086 	.word	0x20000086
 8004e7c:	20000087 	.word	0x20000087

08004e80 <USBD_CUSTOM_HID_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_Setup(USBD_HandleTypeDef *pdev,
                                     USBD_SetupReqTypedef *req)
{
 8004e80:	b580      	push	{r7, lr}
 8004e82:	b088      	sub	sp, #32
 8004e84:	af00      	add	r7, sp, #0
 8004e86:	6078      	str	r0, [r7, #4]
 8004e88:	6039      	str	r1, [r7, #0]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	32b0      	adds	r2, #176	@ 0xb0
 8004e94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004e98:	613b      	str	r3, [r7, #16]
  uint16_t len = 0U;
 8004e9a:	2300      	movs	r3, #0
 8004e9c:	83fb      	strh	r3, [r7, #30]
#ifdef USBD_CUSTOMHID_CTRL_REQ_GET_REPORT_ENABLED
  uint16_t ReportLength = 0U;
#endif /* USBD_CUSTOMHID_CTRL_REQ_GET_REPORT_ENABLED */
  uint8_t  *pbuf = NULL;
 8004e9e:	2300      	movs	r3, #0
 8004ea0:	61bb      	str	r3, [r7, #24]
  uint16_t status_info = 0U;
 8004ea2:	2300      	movs	r3, #0
 8004ea4:	81fb      	strh	r3, [r7, #14]
  USBD_StatusTypeDef ret = USBD_OK;
 8004ea6:	2300      	movs	r3, #0
 8004ea8:	75fb      	strb	r3, [r7, #23]

  if (hhid == NULL)
 8004eaa:	693b      	ldr	r3, [r7, #16]
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d101      	bne.n	8004eb4 <USBD_CUSTOM_HID_Setup+0x34>
  {
    return (uint8_t)USBD_FAIL;
 8004eb0:	2303      	movs	r3, #3
 8004eb2:	e104      	b.n	80050be <USBD_CUSTOM_HID_Setup+0x23e>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004eb4:	683b      	ldr	r3, [r7, #0]
 8004eb6:	781b      	ldrb	r3, [r3, #0]
 8004eb8:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d056      	beq.n	8004f6e <USBD_CUSTOM_HID_Setup+0xee>
 8004ec0:	2b20      	cmp	r3, #32
 8004ec2:	f040 80f4 	bne.w	80050ae <USBD_CUSTOM_HID_Setup+0x22e>
  {
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
 8004ec6:	683b      	ldr	r3, [r7, #0]
 8004ec8:	785b      	ldrb	r3, [r3, #1]
 8004eca:	3b02      	subs	r3, #2
 8004ecc:	2b09      	cmp	r3, #9
 8004ece:	d846      	bhi.n	8004f5e <USBD_CUSTOM_HID_Setup+0xde>
 8004ed0:	a201      	add	r2, pc, #4	@ (adr r2, 8004ed8 <USBD_CUSTOM_HID_Setup+0x58>)
 8004ed2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ed6:	bf00      	nop
 8004ed8:	08004f31 	.word	0x08004f31
 8004edc:	08004f0f 	.word	0x08004f0f
 8004ee0:	08004f5f 	.word	0x08004f5f
 8004ee4:	08004f5f 	.word	0x08004f5f
 8004ee8:	08004f5f 	.word	0x08004f5f
 8004eec:	08004f5f 	.word	0x08004f5f
 8004ef0:	08004f5f 	.word	0x08004f5f
 8004ef4:	08004f41 	.word	0x08004f41
 8004ef8:	08004f1f 	.word	0x08004f1f
 8004efc:	08004f01 	.word	0x08004f01
      {
        case CUSTOM_HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 8004f00:	683b      	ldr	r3, [r7, #0]
 8004f02:	885b      	ldrh	r3, [r3, #2]
 8004f04:	b2db      	uxtb	r3, r3
 8004f06:	461a      	mov	r2, r3
 8004f08:	693b      	ldr	r3, [r7, #16]
 8004f0a:	641a      	str	r2, [r3, #64]	@ 0x40
          break;
 8004f0c:	e02e      	b.n	8004f6c <USBD_CUSTOM_HID_Setup+0xec>

        case CUSTOM_HID_REQ_GET_PROTOCOL:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 8004f0e:	693b      	ldr	r3, [r7, #16]
 8004f10:	3340      	adds	r3, #64	@ 0x40
 8004f12:	2201      	movs	r2, #1
 8004f14:	4619      	mov	r1, r3
 8004f16:	6878      	ldr	r0, [r7, #4]
 8004f18:	f001 fce4 	bl	80068e4 <USBD_CtlSendData>
          break;
 8004f1c:	e026      	b.n	8004f6c <USBD_CUSTOM_HID_Setup+0xec>

        case CUSTOM_HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8004f1e:	683b      	ldr	r3, [r7, #0]
 8004f20:	885b      	ldrh	r3, [r3, #2]
 8004f22:	0a1b      	lsrs	r3, r3, #8
 8004f24:	b29b      	uxth	r3, r3
 8004f26:	b2db      	uxtb	r3, r3
 8004f28:	461a      	mov	r2, r3
 8004f2a:	693b      	ldr	r3, [r7, #16]
 8004f2c:	645a      	str	r2, [r3, #68]	@ 0x44
          break;
 8004f2e:	e01d      	b.n	8004f6c <USBD_CUSTOM_HID_Setup+0xec>

        case CUSTOM_HID_REQ_GET_IDLE:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 8004f30:	693b      	ldr	r3, [r7, #16]
 8004f32:	3344      	adds	r3, #68	@ 0x44
 8004f34:	2201      	movs	r2, #1
 8004f36:	4619      	mov	r1, r3
 8004f38:	6878      	ldr	r0, [r7, #4]
 8004f3a:	f001 fcd3 	bl	80068e4 <USBD_CtlSendData>
          break;
 8004f3e:	e015      	b.n	8004f6c <USBD_CUSTOM_HID_Setup+0xec>
            ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->CtrlReqComplete(req->bRequest,
                                                                                            req->wLength);
          }
#endif /* USBD_CUSTOMHID_CTRL_REQ_COMPLETE_CALLBACK_ENABLED */
#ifndef USBD_CUSTOMHID_EP0_OUT_PREPARE_RECEIVE_DISABLED
          hhid->IsReportAvailable = 1U;
 8004f40:	693b      	ldr	r3, [r7, #16]
 8004f42:	2201      	movs	r2, #1
 8004f44:	64da      	str	r2, [r3, #76]	@ 0x4c
          (void)USBD_CtlPrepareRx(pdev, hhid->Report_buf,
 8004f46:	6939      	ldr	r1, [r7, #16]
                                  MIN(req->wLength, USBD_CUSTOMHID_OUTREPORT_BUF_SIZE));
 8004f48:	683b      	ldr	r3, [r7, #0]
 8004f4a:	88db      	ldrh	r3, [r3, #6]
 8004f4c:	2b40      	cmp	r3, #64	@ 0x40
 8004f4e:	bf28      	it	cs
 8004f50:	2340      	movcs	r3, #64	@ 0x40
 8004f52:	b29b      	uxth	r3, r3
          (void)USBD_CtlPrepareRx(pdev, hhid->Report_buf,
 8004f54:	461a      	mov	r2, r3
 8004f56:	6878      	ldr	r0, [r7, #4]
 8004f58:	f001 fcf0 	bl	800693c <USBD_CtlPrepareRx>
#endif /* USBD_CUSTOMHID_EP0_OUT_PREPARE_RECEIVE_DISABLED */
          break;
 8004f5c:	e006      	b.n	8004f6c <USBD_CUSTOM_HID_Setup+0xec>
          }
          break;
#endif /* USBD_CUSTOMHID_CTRL_REQ_GET_REPORT_ENABLED */

        default:
          USBD_CtlError(pdev, req);
 8004f5e:	6839      	ldr	r1, [r7, #0]
 8004f60:	6878      	ldr	r0, [r7, #4]
 8004f62:	f001 fc42 	bl	80067ea <USBD_CtlError>
          ret = USBD_FAIL;
 8004f66:	2303      	movs	r3, #3
 8004f68:	75fb      	strb	r3, [r7, #23]
          break;
 8004f6a:	bf00      	nop
      }
      break;
 8004f6c:	e0a6      	b.n	80050bc <USBD_CUSTOM_HID_Setup+0x23c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8004f6e:	683b      	ldr	r3, [r7, #0]
 8004f70:	785b      	ldrb	r3, [r3, #1]
 8004f72:	2b0b      	cmp	r3, #11
 8004f74:	f200 8092 	bhi.w	800509c <USBD_CUSTOM_HID_Setup+0x21c>
 8004f78:	a201      	add	r2, pc, #4	@ (adr r2, 8004f80 <USBD_CUSTOM_HID_Setup+0x100>)
 8004f7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f7e:	bf00      	nop
 8004f80:	08004fb1 	.word	0x08004fb1
 8004f84:	080050ab 	.word	0x080050ab
 8004f88:	0800509d 	.word	0x0800509d
 8004f8c:	0800509d 	.word	0x0800509d
 8004f90:	0800509d 	.word	0x0800509d
 8004f94:	0800509d 	.word	0x0800509d
 8004f98:	08004fdb 	.word	0x08004fdb
 8004f9c:	0800509d 	.word	0x0800509d
 8004fa0:	0800509d 	.word	0x0800509d
 8004fa4:	0800509d 	.word	0x0800509d
 8004fa8:	0800504b 	.word	0x0800504b
 8004fac:	08005075 	.word	0x08005075
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8004fb6:	b2db      	uxtb	r3, r3
 8004fb8:	2b03      	cmp	r3, #3
 8004fba:	d107      	bne.n	8004fcc <USBD_CUSTOM_HID_Setup+0x14c>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8004fbc:	f107 030e 	add.w	r3, r7, #14
 8004fc0:	2202      	movs	r2, #2
 8004fc2:	4619      	mov	r1, r3
 8004fc4:	6878      	ldr	r0, [r7, #4]
 8004fc6:	f001 fc8d 	bl	80068e4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8004fca:	e06f      	b.n	80050ac <USBD_CUSTOM_HID_Setup+0x22c>
            USBD_CtlError(pdev, req);
 8004fcc:	6839      	ldr	r1, [r7, #0]
 8004fce:	6878      	ldr	r0, [r7, #4]
 8004fd0:	f001 fc0b 	bl	80067ea <USBD_CtlError>
            ret = USBD_FAIL;
 8004fd4:	2303      	movs	r3, #3
 8004fd6:	75fb      	strb	r3, [r7, #23]
          break;
 8004fd8:	e068      	b.n	80050ac <USBD_CUSTOM_HID_Setup+0x22c>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == CUSTOM_HID_REPORT_DESC)
 8004fda:	683b      	ldr	r3, [r7, #0]
 8004fdc:	885b      	ldrh	r3, [r3, #2]
 8004fde:	0a1b      	lsrs	r3, r3, #8
 8004fe0:	b29b      	uxth	r3, r3
 8004fe2:	2b22      	cmp	r3, #34	@ 0x22
 8004fe4:	d112      	bne.n	800500c <USBD_CUSTOM_HID_Setup+0x18c>
          {
            len = MIN(USBD_CUSTOM_HID_REPORT_DESC_SIZE, req->wLength);
 8004fe6:	683b      	ldr	r3, [r7, #0]
 8004fe8:	88db      	ldrh	r3, [r3, #6]
 8004fea:	f240 4242 	movw	r2, #1090	@ 0x442
 8004fee:	4293      	cmp	r3, r2
 8004ff0:	bf28      	it	cs
 8004ff2:	4613      	movcs	r3, r2
 8004ff4:	83fb      	strh	r3, [r7, #30]
            pbuf = ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->pReport;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8004ffc:	687a      	ldr	r2, [r7, #4]
 8004ffe:	33b0      	adds	r3, #176	@ 0xb0
 8005000:	009b      	lsls	r3, r3, #2
 8005002:	4413      	add	r3, r2
 8005004:	685b      	ldr	r3, [r3, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	61bb      	str	r3, [r7, #24]
 800500a:	e00d      	b.n	8005028 <USBD_CUSTOM_HID_Setup+0x1a8>
          }
          else
          {
            if ((req->wValue >> 8) == CUSTOM_HID_DESCRIPTOR_TYPE)
 800500c:	683b      	ldr	r3, [r7, #0]
 800500e:	885b      	ldrh	r3, [r3, #2]
 8005010:	0a1b      	lsrs	r3, r3, #8
 8005012:	b29b      	uxth	r3, r3
 8005014:	2b21      	cmp	r3, #33	@ 0x21
 8005016:	d107      	bne.n	8005028 <USBD_CUSTOM_HID_Setup+0x1a8>
            {
              pbuf = USBD_CUSTOM_HID_Desc;
 8005018:	4b2b      	ldr	r3, [pc, #172]	@ (80050c8 <USBD_CUSTOM_HID_Setup+0x248>)
 800501a:	61bb      	str	r3, [r7, #24]
              len = MIN(USB_CUSTOM_HID_DESC_SIZ, req->wLength);
 800501c:	683b      	ldr	r3, [r7, #0]
 800501e:	88db      	ldrh	r3, [r3, #6]
 8005020:	2b09      	cmp	r3, #9
 8005022:	bf28      	it	cs
 8005024:	2309      	movcs	r3, #9
 8005026:	83fb      	strh	r3, [r7, #30]
            }
          }

          if (pbuf != NULL)
 8005028:	69bb      	ldr	r3, [r7, #24]
 800502a:	2b00      	cmp	r3, #0
 800502c:	d006      	beq.n	800503c <USBD_CUSTOM_HID_Setup+0x1bc>
          {
            (void)USBD_CtlSendData(pdev, pbuf, len);
 800502e:	8bfb      	ldrh	r3, [r7, #30]
 8005030:	461a      	mov	r2, r3
 8005032:	69b9      	ldr	r1, [r7, #24]
 8005034:	6878      	ldr	r0, [r7, #4]
 8005036:	f001 fc55 	bl	80068e4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800503a:	e037      	b.n	80050ac <USBD_CUSTOM_HID_Setup+0x22c>
            USBD_CtlError(pdev, req);
 800503c:	6839      	ldr	r1, [r7, #0]
 800503e:	6878      	ldr	r0, [r7, #4]
 8005040:	f001 fbd3 	bl	80067ea <USBD_CtlError>
            ret = USBD_FAIL;
 8005044:	2303      	movs	r3, #3
 8005046:	75fb      	strb	r3, [r7, #23]
          break;
 8005048:	e030      	b.n	80050ac <USBD_CUSTOM_HID_Setup+0x22c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005050:	b2db      	uxtb	r3, r3
 8005052:	2b03      	cmp	r3, #3
 8005054:	d107      	bne.n	8005066 <USBD_CUSTOM_HID_Setup+0x1e6>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 8005056:	693b      	ldr	r3, [r7, #16]
 8005058:	3348      	adds	r3, #72	@ 0x48
 800505a:	2201      	movs	r2, #1
 800505c:	4619      	mov	r1, r3
 800505e:	6878      	ldr	r0, [r7, #4]
 8005060:	f001 fc40 	bl	80068e4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005064:	e022      	b.n	80050ac <USBD_CUSTOM_HID_Setup+0x22c>
            USBD_CtlError(pdev, req);
 8005066:	6839      	ldr	r1, [r7, #0]
 8005068:	6878      	ldr	r0, [r7, #4]
 800506a:	f001 fbbe 	bl	80067ea <USBD_CtlError>
            ret = USBD_FAIL;
 800506e:	2303      	movs	r3, #3
 8005070:	75fb      	strb	r3, [r7, #23]
          break;
 8005072:	e01b      	b.n	80050ac <USBD_CUSTOM_HID_Setup+0x22c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800507a:	b2db      	uxtb	r3, r3
 800507c:	2b03      	cmp	r3, #3
 800507e:	d106      	bne.n	800508e <USBD_CUSTOM_HID_Setup+0x20e>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 8005080:	683b      	ldr	r3, [r7, #0]
 8005082:	885b      	ldrh	r3, [r3, #2]
 8005084:	b2db      	uxtb	r3, r3
 8005086:	461a      	mov	r2, r3
 8005088:	693b      	ldr	r3, [r7, #16]
 800508a:	649a      	str	r2, [r3, #72]	@ 0x48
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800508c:	e00e      	b.n	80050ac <USBD_CUSTOM_HID_Setup+0x22c>
            USBD_CtlError(pdev, req);
 800508e:	6839      	ldr	r1, [r7, #0]
 8005090:	6878      	ldr	r0, [r7, #4]
 8005092:	f001 fbaa 	bl	80067ea <USBD_CtlError>
            ret = USBD_FAIL;
 8005096:	2303      	movs	r3, #3
 8005098:	75fb      	strb	r3, [r7, #23]
          break;
 800509a:	e007      	b.n	80050ac <USBD_CUSTOM_HID_Setup+0x22c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800509c:	6839      	ldr	r1, [r7, #0]
 800509e:	6878      	ldr	r0, [r7, #4]
 80050a0:	f001 fba3 	bl	80067ea <USBD_CtlError>
          ret = USBD_FAIL;
 80050a4:	2303      	movs	r3, #3
 80050a6:	75fb      	strb	r3, [r7, #23]
          break;
 80050a8:	e000      	b.n	80050ac <USBD_CUSTOM_HID_Setup+0x22c>
          break;
 80050aa:	bf00      	nop
      }
      break;
 80050ac:	e006      	b.n	80050bc <USBD_CUSTOM_HID_Setup+0x23c>

    default:
      USBD_CtlError(pdev, req);
 80050ae:	6839      	ldr	r1, [r7, #0]
 80050b0:	6878      	ldr	r0, [r7, #4]
 80050b2:	f001 fb9a 	bl	80067ea <USBD_CtlError>
      ret = USBD_FAIL;
 80050b6:	2303      	movs	r3, #3
 80050b8:	75fb      	strb	r3, [r7, #23]
      break;
 80050ba:	bf00      	nop
  }
  return (uint8_t)ret;
 80050bc:	7dfb      	ldrb	r3, [r7, #23]
}
 80050be:	4618      	mov	r0, r3
 80050c0:	3720      	adds	r7, #32
 80050c2:	46bd      	mov	sp, r7
 80050c4:	bd80      	pop	{r7, pc}
 80050c6:	bf00      	nop
 80050c8:	20000070 	.word	0x20000070

080050cc <USBD_CUSTOM_HID_SendReport>:
{
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CUSTOM_HID_SendReport(USBD_HandleTypeDef *pdev,
                                   uint8_t *report, uint16_t len)
{
 80050cc:	b580      	push	{r7, lr}
 80050ce:	b086      	sub	sp, #24
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	60f8      	str	r0, [r7, #12]
 80050d4:	60b9      	str	r1, [r7, #8]
 80050d6:	4613      	mov	r3, r2
 80050d8:	80fb      	strh	r3, [r7, #6]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	32b0      	adds	r2, #176	@ 0xb0
 80050e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80050e8:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hhid == NULL)
 80050ea:	697b      	ldr	r3, [r7, #20]
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d101      	bne.n	80050f4 <USBD_CUSTOM_HID_SendReport+0x28>
  {
    return (uint8_t)USBD_FAIL;
 80050f0:	2303      	movs	r3, #3
 80050f2:	e019      	b.n	8005128 <USBD_CUSTOM_HID_SendReport+0x5c>
#ifdef USE_USBD_COMPOSITE
  /* Get Endpoint IN address allocated for this class instance */
  CUSTOMHIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, ClassId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80050fa:	b2db      	uxtb	r3, r3
 80050fc:	2b03      	cmp	r3, #3
 80050fe:	d112      	bne.n	8005126 <USBD_CUSTOM_HID_SendReport+0x5a>
  {
    if (hhid->state == CUSTOM_HID_IDLE)
 8005100:	697b      	ldr	r3, [r7, #20]
 8005102:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8005106:	2b00      	cmp	r3, #0
 8005108:	d10b      	bne.n	8005122 <USBD_CUSTOM_HID_SendReport+0x56>
    {
      hhid->state = CUSTOM_HID_BUSY;
 800510a:	697b      	ldr	r3, [r7, #20]
 800510c:	2201      	movs	r2, #1
 800510e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      (void)USBD_LL_Transmit(pdev, CUSTOMHIDInEpAdd, report, len);
 8005112:	4b07      	ldr	r3, [pc, #28]	@ (8005130 <USBD_CUSTOM_HID_SendReport+0x64>)
 8005114:	7819      	ldrb	r1, [r3, #0]
 8005116:	88fb      	ldrh	r3, [r7, #6]
 8005118:	68ba      	ldr	r2, [r7, #8]
 800511a:	68f8      	ldr	r0, [r7, #12]
 800511c:	f002 f8a9 	bl	8007272 <USBD_LL_Transmit>
 8005120:	e001      	b.n	8005126 <USBD_CUSTOM_HID_SendReport+0x5a>
    }
    else
    {
      return (uint8_t)USBD_BUSY;
 8005122:	2301      	movs	r3, #1
 8005124:	e000      	b.n	8005128 <USBD_CUSTOM_HID_SendReport+0x5c>
    }
  }
  return (uint8_t)USBD_OK;
 8005126:	2300      	movs	r3, #0
}
 8005128:	4618      	mov	r0, r3
 800512a:	3718      	adds	r7, #24
 800512c:	46bd      	mov	sp, r7
 800512e:	bd80      	pop	{r7, pc}
 8005130:	20000086 	.word	0x20000086

08005134 <USBD_CUSTOM_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetFSCfgDesc(uint16_t *length)
{
 8005134:	b580      	push	{r7, lr}
 8005136:	b084      	sub	sp, #16
 8005138:	af00      	add	r7, sp, #0
 800513a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPIN_ADDR);
 800513c:	2181      	movs	r1, #129	@ 0x81
 800513e:	4815      	ldr	r0, [pc, #84]	@ (8005194 <USBD_CUSTOM_HID_GetFSCfgDesc+0x60>)
 8005140:	f000 fd1d 	bl	8005b7e <USBD_GetEpDesc>
 8005144:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPOUT_ADDR);
 8005146:	2101      	movs	r1, #1
 8005148:	4812      	ldr	r0, [pc, #72]	@ (8005194 <USBD_CUSTOM_HID_GetFSCfgDesc+0x60>)
 800514a:	f000 fd18 	bl	8005b7e <USBD_GetEpDesc>
 800514e:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	2b00      	cmp	r3, #0
 8005154:	d009      	beq.n	800516a <USBD_CUSTOM_HID_GetFSCfgDesc+0x36>
  {
    pEpInDesc->wMaxPacketSize = CUSTOM_HID_EPIN_SIZE;
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	2200      	movs	r2, #0
 800515a:	f042 0202 	orr.w	r2, r2, #2
 800515e:	711a      	strb	r2, [r3, #4]
 8005160:	2200      	movs	r2, #0
 8005162:	715a      	strb	r2, [r3, #5]
    pEpInDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	2205      	movs	r2, #5
 8005168:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800516a:	68bb      	ldr	r3, [r7, #8]
 800516c:	2b00      	cmp	r3, #0
 800516e:	d009      	beq.n	8005184 <USBD_CUSTOM_HID_GetFSCfgDesc+0x50>
  {
    pEpOutDesc->wMaxPacketSize = CUSTOM_HID_EPOUT_SIZE;
 8005170:	68bb      	ldr	r3, [r7, #8]
 8005172:	2200      	movs	r2, #0
 8005174:	f042 0202 	orr.w	r2, r2, #2
 8005178:	711a      	strb	r2, [r3, #4]
 800517a:	2200      	movs	r2, #0
 800517c:	715a      	strb	r2, [r3, #5]
    pEpOutDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
 800517e:	68bb      	ldr	r3, [r7, #8]
 8005180:	2205      	movs	r2, #5
 8005182:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgDesc);
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	2229      	movs	r2, #41	@ 0x29
 8005188:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgDesc;
 800518a:	4b02      	ldr	r3, [pc, #8]	@ (8005194 <USBD_CUSTOM_HID_GetFSCfgDesc+0x60>)
}
 800518c:	4618      	mov	r0, r3
 800518e:	3710      	adds	r7, #16
 8005190:	46bd      	mov	sp, r7
 8005192:	bd80      	pop	{r7, pc}
 8005194:	20000044 	.word	0x20000044

08005198 <USBD_CUSTOM_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetHSCfgDesc(uint16_t *length)
{
 8005198:	b580      	push	{r7, lr}
 800519a:	b084      	sub	sp, #16
 800519c:	af00      	add	r7, sp, #0
 800519e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPIN_ADDR);
 80051a0:	2181      	movs	r1, #129	@ 0x81
 80051a2:	4815      	ldr	r0, [pc, #84]	@ (80051f8 <USBD_CUSTOM_HID_GetHSCfgDesc+0x60>)
 80051a4:	f000 fceb 	bl	8005b7e <USBD_GetEpDesc>
 80051a8:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPOUT_ADDR);
 80051aa:	2101      	movs	r1, #1
 80051ac:	4812      	ldr	r0, [pc, #72]	@ (80051f8 <USBD_CUSTOM_HID_GetHSCfgDesc+0x60>)
 80051ae:	f000 fce6 	bl	8005b7e <USBD_GetEpDesc>
 80051b2:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d009      	beq.n	80051ce <USBD_CUSTOM_HID_GetHSCfgDesc+0x36>
  {
    pEpInDesc->wMaxPacketSize = CUSTOM_HID_EPIN_SIZE;
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	2200      	movs	r2, #0
 80051be:	f042 0202 	orr.w	r2, r2, #2
 80051c2:	711a      	strb	r2, [r3, #4]
 80051c4:	2200      	movs	r2, #0
 80051c6:	715a      	strb	r2, [r3, #5]
    pEpInDesc->bInterval = CUSTOM_HID_HS_BINTERVAL;
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	2205      	movs	r2, #5
 80051cc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80051ce:	68bb      	ldr	r3, [r7, #8]
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d009      	beq.n	80051e8 <USBD_CUSTOM_HID_GetHSCfgDesc+0x50>
  {
    pEpOutDesc->wMaxPacketSize = CUSTOM_HID_EPOUT_SIZE;
 80051d4:	68bb      	ldr	r3, [r7, #8]
 80051d6:	2200      	movs	r2, #0
 80051d8:	f042 0202 	orr.w	r2, r2, #2
 80051dc:	711a      	strb	r2, [r3, #4]
 80051de:	2200      	movs	r2, #0
 80051e0:	715a      	strb	r2, [r3, #5]
    pEpOutDesc->bInterval = CUSTOM_HID_HS_BINTERVAL;
 80051e2:	68bb      	ldr	r3, [r7, #8]
 80051e4:	2205      	movs	r2, #5
 80051e6:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgDesc);
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	2229      	movs	r2, #41	@ 0x29
 80051ec:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgDesc;
 80051ee:	4b02      	ldr	r3, [pc, #8]	@ (80051f8 <USBD_CUSTOM_HID_GetHSCfgDesc+0x60>)
}
 80051f0:	4618      	mov	r0, r3
 80051f2:	3710      	adds	r7, #16
 80051f4:	46bd      	mov	sp, r7
 80051f6:	bd80      	pop	{r7, pc}
 80051f8:	20000044 	.word	0x20000044

080051fc <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80051fc:	b580      	push	{r7, lr}
 80051fe:	b084      	sub	sp, #16
 8005200:	af00      	add	r7, sp, #0
 8005202:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPIN_ADDR);
 8005204:	2181      	movs	r1, #129	@ 0x81
 8005206:	4815      	ldr	r0, [pc, #84]	@ (800525c <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x60>)
 8005208:	f000 fcb9 	bl	8005b7e <USBD_GetEpDesc>
 800520c:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPOUT_ADDR);
 800520e:	2101      	movs	r1, #1
 8005210:	4812      	ldr	r0, [pc, #72]	@ (800525c <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x60>)
 8005212:	f000 fcb4 	bl	8005b7e <USBD_GetEpDesc>
 8005216:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	2b00      	cmp	r3, #0
 800521c:	d009      	beq.n	8005232 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x36>
  {
    pEpInDesc->wMaxPacketSize = CUSTOM_HID_EPIN_SIZE;
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	2200      	movs	r2, #0
 8005222:	f042 0202 	orr.w	r2, r2, #2
 8005226:	711a      	strb	r2, [r3, #4]
 8005228:	2200      	movs	r2, #0
 800522a:	715a      	strb	r2, [r3, #5]
    pEpInDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	2205      	movs	r2, #5
 8005230:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8005232:	68bb      	ldr	r3, [r7, #8]
 8005234:	2b00      	cmp	r3, #0
 8005236:	d009      	beq.n	800524c <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x50>
  {
    pEpOutDesc->wMaxPacketSize = CUSTOM_HID_EPOUT_SIZE;
 8005238:	68bb      	ldr	r3, [r7, #8]
 800523a:	2200      	movs	r2, #0
 800523c:	f042 0202 	orr.w	r2, r2, #2
 8005240:	711a      	strb	r2, [r3, #4]
 8005242:	2200      	movs	r2, #0
 8005244:	715a      	strb	r2, [r3, #5]
    pEpOutDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
 8005246:	68bb      	ldr	r3, [r7, #8]
 8005248:	2205      	movs	r2, #5
 800524a:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgDesc);
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	2229      	movs	r2, #41	@ 0x29
 8005250:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgDesc;
 8005252:	4b02      	ldr	r3, [pc, #8]	@ (800525c <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x60>)
}
 8005254:	4618      	mov	r0, r3
 8005256:	3710      	adds	r7, #16
 8005258:	46bd      	mov	sp, r7
 800525a:	bd80      	pop	{r7, pc}
 800525c:	20000044 	.word	0x20000044

08005260 <USBD_CUSTOM_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005260:	b480      	push	{r7}
 8005262:	b083      	sub	sp, #12
 8005264:	af00      	add	r7, sp, #0
 8005266:	6078      	str	r0, [r7, #4]
 8005268:	460b      	mov	r3, r1
 800526a:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId])->state = CUSTOM_HID_IDLE;
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	32b0      	adds	r2, #176	@ 0xb0
 8005276:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800527a:	2200      	movs	r2, #0
 800527c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  return (uint8_t)USBD_OK;
 8005280:	2300      	movs	r3, #0
}
 8005282:	4618      	mov	r0, r3
 8005284:	370c      	adds	r7, #12
 8005286:	46bd      	mov	sp, r7
 8005288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800528c:	4770      	bx	lr

0800528e <USBD_CUSTOM_HID_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800528e:	b580      	push	{r7, lr}
 8005290:	b084      	sub	sp, #16
 8005292:	af00      	add	r7, sp, #0
 8005294:	6078      	str	r0, [r7, #4]
 8005296:	460b      	mov	r3, r1
 8005298:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	32b0      	adds	r2, #176	@ 0xb0
 80052a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d101      	bne.n	80052b0 <USBD_CUSTOM_HID_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80052ac:	2303      	movs	r3, #3
 80052ae:	e017      	b.n	80052e0 <USBD_CUSTOM_HID_DataOut+0x52>
  }

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	32b0      	adds	r2, #176	@ 0xb0
 80052ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80052be:	60fb      	str	r3, [r7, #12]

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application processing */
  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->OutEvent(hhid->Report_buf[0],
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80052c6:	687a      	ldr	r2, [r7, #4]
 80052c8:	33b0      	adds	r3, #176	@ 0xb0
 80052ca:	009b      	lsls	r3, r3, #2
 80052cc:	4413      	add	r3, r2
 80052ce:	685b      	ldr	r3, [r3, #4]
 80052d0:	68db      	ldr	r3, [r3, #12]
 80052d2:	68fa      	ldr	r2, [r7, #12]
 80052d4:	7810      	ldrb	r0, [r2, #0]
 80052d6:	68fa      	ldr	r2, [r7, #12]
 80052d8:	7852      	ldrb	r2, [r2, #1]
 80052da:	4611      	mov	r1, r2
 80052dc:	4798      	blx	r3
                                                                           hhid->Report_buf[1]);

  return (uint8_t)USBD_OK;
 80052de:	2300      	movs	r3, #0
}
 80052e0:	4618      	mov	r0, r3
 80052e2:	3710      	adds	r7, #16
 80052e4:	46bd      	mov	sp, r7
 80052e6:	bd80      	pop	{r7, pc}

080052e8 <USBD_CUSTOM_HID_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80052e8:	b580      	push	{r7, lr}
 80052ea:	b084      	sub	sp, #16
 80052ec:	af00      	add	r7, sp, #0
 80052ee:	6078      	str	r0, [r7, #4]
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	32b0      	adds	r2, #176	@ 0xb0
 80052fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d101      	bne.n	8005306 <USBD_CUSTOM_HID_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8005302:	2303      	movs	r3, #3
 8005304:	e00f      	b.n	8005326 <USBD_CUSTOM_HID_ReceivePacket+0x3e>
#ifdef USE_USBD_COMPOSITE
  /* Get OUT Endpoint address allocated for this class instance */
  CUSTOMHIDOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	32b0      	adds	r2, #176	@ 0xb0
 8005310:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005314:	60fb      	str	r3, [r7, #12]

  /* Resume USB Out process */
  (void)USBD_LL_PrepareReceive(pdev, CUSTOMHIDOutEpAdd, hhid->Report_buf,
 8005316:	4b06      	ldr	r3, [pc, #24]	@ (8005330 <USBD_CUSTOM_HID_ReceivePacket+0x48>)
 8005318:	7819      	ldrb	r1, [r3, #0]
 800531a:	68fa      	ldr	r2, [r7, #12]
 800531c:	2340      	movs	r3, #64	@ 0x40
 800531e:	6878      	ldr	r0, [r7, #4]
 8005320:	f001 ffc8 	bl	80072b4 <USBD_LL_PrepareReceive>
                               USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);

  return (uint8_t)USBD_OK;
 8005324:	2300      	movs	r3, #0
}
 8005326:	4618      	mov	r0, r3
 8005328:	3710      	adds	r7, #16
 800532a:	46bd      	mov	sp, r7
 800532c:	bd80      	pop	{r7, pc}
 800532e:	bf00      	nop
 8005330:	20000087 	.word	0x20000087

08005334 <USBD_CUSTOM_HID_EP0_RxReady>:
  *         Handles control request data.
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8005334:	b580      	push	{r7, lr}
 8005336:	b084      	sub	sp, #16
 8005338:	af00      	add	r7, sp, #0
 800533a:	6078      	str	r0, [r7, #4]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	32b0      	adds	r2, #176	@ 0xb0
 8005346:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800534a:	60fb      	str	r3, [r7, #12]

  if (hhid == NULL)
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	2b00      	cmp	r3, #0
 8005350:	d101      	bne.n	8005356 <USBD_CUSTOM_HID_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8005352:	2303      	movs	r3, #3
 8005354:	e016      	b.n	8005384 <USBD_CUSTOM_HID_EP0_RxReady+0x50>
  }

  if (hhid->IsReportAvailable == 1U)
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800535a:	2b01      	cmp	r3, #1
 800535c:	d111      	bne.n	8005382 <USBD_CUSTOM_HID_EP0_RxReady+0x4e>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->OutEvent(hhid->Report_buf[0],
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005364:	687a      	ldr	r2, [r7, #4]
 8005366:	33b0      	adds	r3, #176	@ 0xb0
 8005368:	009b      	lsls	r3, r3, #2
 800536a:	4413      	add	r3, r2
 800536c:	685b      	ldr	r3, [r3, #4]
 800536e:	68db      	ldr	r3, [r3, #12]
 8005370:	68fa      	ldr	r2, [r7, #12]
 8005372:	7810      	ldrb	r0, [r2, #0]
 8005374:	68fa      	ldr	r2, [r7, #12]
 8005376:	7852      	ldrb	r2, [r2, #1]
 8005378:	4611      	mov	r1, r2
 800537a:	4798      	blx	r3
                                                                             hhid->Report_buf[1]);
    hhid->IsReportAvailable = 0U;
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	2200      	movs	r2, #0
 8005380:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  return (uint8_t)USBD_OK;
 8005382:	2300      	movs	r3, #0
}
 8005384:	4618      	mov	r0, r3
 8005386:	3710      	adds	r7, #16
 8005388:	46bd      	mov	sp, r7
 800538a:	bd80      	pop	{r7, pc}

0800538c <USBD_CUSTOM_HID_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 800538c:	b480      	push	{r7}
 800538e:	b083      	sub	sp, #12
 8005390:	af00      	add	r7, sp, #0
 8005392:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_DeviceQualifierDesc);
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	220a      	movs	r2, #10
 8005398:	801a      	strh	r2, [r3, #0]

  return USBD_CUSTOM_HID_DeviceQualifierDesc;
 800539a:	4b03      	ldr	r3, [pc, #12]	@ (80053a8 <USBD_CUSTOM_HID_GetDeviceQualifierDesc+0x1c>)
}
 800539c:	4618      	mov	r0, r3
 800539e:	370c      	adds	r7, #12
 80053a0:	46bd      	mov	sp, r7
 80053a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a6:	4770      	bx	lr
 80053a8:	2000007c 	.word	0x2000007c

080053ac <USBD_CUSTOM_HID_RegisterInterface>:
  * @param  fops: CUSTOMHID Interface callback
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_RegisterInterface(USBD_HandleTypeDef *pdev,
                                          USBD_CUSTOM_HID_ItfTypeDef *fops)
{
 80053ac:	b480      	push	{r7}
 80053ae:	b083      	sub	sp, #12
 80053b0:	af00      	add	r7, sp, #0
 80053b2:	6078      	str	r0, [r7, #4]
 80053b4:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80053b6:	683b      	ldr	r3, [r7, #0]
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d101      	bne.n	80053c0 <USBD_CUSTOM_HID_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80053bc:	2303      	movs	r3, #3
 80053be:	e009      	b.n	80053d4 <USBD_CUSTOM_HID_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80053c6:	687a      	ldr	r2, [r7, #4]
 80053c8:	33b0      	adds	r3, #176	@ 0xb0
 80053ca:	009b      	lsls	r3, r3, #2
 80053cc:	4413      	add	r3, r2
 80053ce:	683a      	ldr	r2, [r7, #0]
 80053d0:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 80053d2:	2300      	movs	r3, #0
}
 80053d4:	4618      	mov	r0, r3
 80053d6:	370c      	adds	r7, #12
 80053d8:	46bd      	mov	sp, r7
 80053da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053de:	4770      	bx	lr

080053e0 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80053e0:	b580      	push	{r7, lr}
 80053e2:	b086      	sub	sp, #24
 80053e4:	af00      	add	r7, sp, #0
 80053e6:	60f8      	str	r0, [r7, #12]
 80053e8:	60b9      	str	r1, [r7, #8]
 80053ea:	4613      	mov	r3, r2
 80053ec:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d101      	bne.n	80053f8 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80053f4:	2303      	movs	r3, #3
 80053f6:	e01f      	b.n	8005438 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	2200      	movs	r2, #0
 80053fc:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	2200      	movs	r2, #0
 8005404:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	2200      	movs	r2, #0
 800540c:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8005410:	68bb      	ldr	r3, [r7, #8]
 8005412:	2b00      	cmp	r3, #0
 8005414:	d003      	beq.n	800541e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	68ba      	ldr	r2, [r7, #8]
 800541a:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	2201      	movs	r2, #1
 8005422:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	79fa      	ldrb	r2, [r7, #7]
 800542a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800542c:	68f8      	ldr	r0, [r7, #12]
 800542e:	f001 fdeb 	bl	8007008 <USBD_LL_Init>
 8005432:	4603      	mov	r3, r0
 8005434:	75fb      	strb	r3, [r7, #23]

  return ret;
 8005436:	7dfb      	ldrb	r3, [r7, #23]
}
 8005438:	4618      	mov	r0, r3
 800543a:	3718      	adds	r7, #24
 800543c:	46bd      	mov	sp, r7
 800543e:	bd80      	pop	{r7, pc}

08005440 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8005440:	b580      	push	{r7, lr}
 8005442:	b084      	sub	sp, #16
 8005444:	af00      	add	r7, sp, #0
 8005446:	6078      	str	r0, [r7, #4]
 8005448:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800544a:	2300      	movs	r3, #0
 800544c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800544e:	683b      	ldr	r3, [r7, #0]
 8005450:	2b00      	cmp	r3, #0
 8005452:	d101      	bne.n	8005458 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8005454:	2303      	movs	r3, #3
 8005456:	e025      	b.n	80054a4 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	683a      	ldr	r2, [r7, #0]
 800545c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	32ae      	adds	r2, #174	@ 0xae
 800546a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800546e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005470:	2b00      	cmp	r3, #0
 8005472:	d00f      	beq.n	8005494 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	32ae      	adds	r2, #174	@ 0xae
 800547e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005482:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005484:	f107 020e 	add.w	r2, r7, #14
 8005488:	4610      	mov	r0, r2
 800548a:	4798      	blx	r3
 800548c:	4602      	mov	r2, r0
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800549a:	1c5a      	adds	r2, r3, #1
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 80054a2:	2300      	movs	r3, #0
}
 80054a4:	4618      	mov	r0, r3
 80054a6:	3710      	adds	r7, #16
 80054a8:	46bd      	mov	sp, r7
 80054aa:	bd80      	pop	{r7, pc}

080054ac <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80054ac:	b580      	push	{r7, lr}
 80054ae:	b082      	sub	sp, #8
 80054b0:	af00      	add	r7, sp, #0
 80054b2:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80054b4:	6878      	ldr	r0, [r7, #4]
 80054b6:	f001 fdf3 	bl	80070a0 <USBD_LL_Start>
 80054ba:	4603      	mov	r3, r0
}
 80054bc:	4618      	mov	r0, r3
 80054be:	3708      	adds	r7, #8
 80054c0:	46bd      	mov	sp, r7
 80054c2:	bd80      	pop	{r7, pc}

080054c4 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 80054c4:	b480      	push	{r7}
 80054c6:	b083      	sub	sp, #12
 80054c8:	af00      	add	r7, sp, #0
 80054ca:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80054cc:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 80054ce:	4618      	mov	r0, r3
 80054d0:	370c      	adds	r7, #12
 80054d2:	46bd      	mov	sp, r7
 80054d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d8:	4770      	bx	lr

080054da <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80054da:	b580      	push	{r7, lr}
 80054dc:	b084      	sub	sp, #16
 80054de:	af00      	add	r7, sp, #0
 80054e0:	6078      	str	r0, [r7, #4]
 80054e2:	460b      	mov	r3, r1
 80054e4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80054e6:	2300      	movs	r3, #0
 80054e8:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d009      	beq.n	8005508 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	78fa      	ldrb	r2, [r7, #3]
 80054fe:	4611      	mov	r1, r2
 8005500:	6878      	ldr	r0, [r7, #4]
 8005502:	4798      	blx	r3
 8005504:	4603      	mov	r3, r0
 8005506:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005508:	7bfb      	ldrb	r3, [r7, #15]
}
 800550a:	4618      	mov	r0, r3
 800550c:	3710      	adds	r7, #16
 800550e:	46bd      	mov	sp, r7
 8005510:	bd80      	pop	{r7, pc}

08005512 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005512:	b580      	push	{r7, lr}
 8005514:	b084      	sub	sp, #16
 8005516:	af00      	add	r7, sp, #0
 8005518:	6078      	str	r0, [r7, #4]
 800551a:	460b      	mov	r3, r1
 800551c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800551e:	2300      	movs	r3, #0
 8005520:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005528:	685b      	ldr	r3, [r3, #4]
 800552a:	78fa      	ldrb	r2, [r7, #3]
 800552c:	4611      	mov	r1, r2
 800552e:	6878      	ldr	r0, [r7, #4]
 8005530:	4798      	blx	r3
 8005532:	4603      	mov	r3, r0
 8005534:	2b00      	cmp	r3, #0
 8005536:	d001      	beq.n	800553c <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8005538:	2303      	movs	r3, #3
 800553a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800553c:	7bfb      	ldrb	r3, [r7, #15]
}
 800553e:	4618      	mov	r0, r3
 8005540:	3710      	adds	r7, #16
 8005542:	46bd      	mov	sp, r7
 8005544:	bd80      	pop	{r7, pc}

08005546 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8005546:	b580      	push	{r7, lr}
 8005548:	b084      	sub	sp, #16
 800554a:	af00      	add	r7, sp, #0
 800554c:	6078      	str	r0, [r7, #4]
 800554e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8005556:	6839      	ldr	r1, [r7, #0]
 8005558:	4618      	mov	r0, r3
 800555a:	f001 f90c 	bl	8006776 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	2201      	movs	r2, #1
 8005562:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800556c:	461a      	mov	r2, r3
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800557a:	f003 031f 	and.w	r3, r3, #31
 800557e:	2b02      	cmp	r3, #2
 8005580:	d01a      	beq.n	80055b8 <USBD_LL_SetupStage+0x72>
 8005582:	2b02      	cmp	r3, #2
 8005584:	d822      	bhi.n	80055cc <USBD_LL_SetupStage+0x86>
 8005586:	2b00      	cmp	r3, #0
 8005588:	d002      	beq.n	8005590 <USBD_LL_SetupStage+0x4a>
 800558a:	2b01      	cmp	r3, #1
 800558c:	d00a      	beq.n	80055a4 <USBD_LL_SetupStage+0x5e>
 800558e:	e01d      	b.n	80055cc <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8005596:	4619      	mov	r1, r3
 8005598:	6878      	ldr	r0, [r7, #4]
 800559a:	f000 fb63 	bl	8005c64 <USBD_StdDevReq>
 800559e:	4603      	mov	r3, r0
 80055a0:	73fb      	strb	r3, [r7, #15]
      break;
 80055a2:	e020      	b.n	80055e6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80055aa:	4619      	mov	r1, r3
 80055ac:	6878      	ldr	r0, [r7, #4]
 80055ae:	f000 fbcb 	bl	8005d48 <USBD_StdItfReq>
 80055b2:	4603      	mov	r3, r0
 80055b4:	73fb      	strb	r3, [r7, #15]
      break;
 80055b6:	e016      	b.n	80055e6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80055be:	4619      	mov	r1, r3
 80055c0:	6878      	ldr	r0, [r7, #4]
 80055c2:	f000 fc2d 	bl	8005e20 <USBD_StdEPReq>
 80055c6:	4603      	mov	r3, r0
 80055c8:	73fb      	strb	r3, [r7, #15]
      break;
 80055ca:	e00c      	b.n	80055e6 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80055d2:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80055d6:	b2db      	uxtb	r3, r3
 80055d8:	4619      	mov	r1, r3
 80055da:	6878      	ldr	r0, [r7, #4]
 80055dc:	f001 fdc0 	bl	8007160 <USBD_LL_StallEP>
 80055e0:	4603      	mov	r3, r0
 80055e2:	73fb      	strb	r3, [r7, #15]
      break;
 80055e4:	bf00      	nop
  }

  return ret;
 80055e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80055e8:	4618      	mov	r0, r3
 80055ea:	3710      	adds	r7, #16
 80055ec:	46bd      	mov	sp, r7
 80055ee:	bd80      	pop	{r7, pc}

080055f0 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80055f0:	b580      	push	{r7, lr}
 80055f2:	b086      	sub	sp, #24
 80055f4:	af00      	add	r7, sp, #0
 80055f6:	60f8      	str	r0, [r7, #12]
 80055f8:	460b      	mov	r3, r1
 80055fa:	607a      	str	r2, [r7, #4]
 80055fc:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 80055fe:	2300      	movs	r3, #0
 8005600:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8005602:	7afb      	ldrb	r3, [r7, #11]
 8005604:	2b00      	cmp	r3, #0
 8005606:	d16e      	bne.n	80056e6 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800560e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8005616:	2b03      	cmp	r3, #3
 8005618:	f040 8098 	bne.w	800574c <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800561c:	693b      	ldr	r3, [r7, #16]
 800561e:	689a      	ldr	r2, [r3, #8]
 8005620:	693b      	ldr	r3, [r7, #16]
 8005622:	68db      	ldr	r3, [r3, #12]
 8005624:	429a      	cmp	r2, r3
 8005626:	d913      	bls.n	8005650 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8005628:	693b      	ldr	r3, [r7, #16]
 800562a:	689a      	ldr	r2, [r3, #8]
 800562c:	693b      	ldr	r3, [r7, #16]
 800562e:	68db      	ldr	r3, [r3, #12]
 8005630:	1ad2      	subs	r2, r2, r3
 8005632:	693b      	ldr	r3, [r7, #16]
 8005634:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8005636:	693b      	ldr	r3, [r7, #16]
 8005638:	68da      	ldr	r2, [r3, #12]
 800563a:	693b      	ldr	r3, [r7, #16]
 800563c:	689b      	ldr	r3, [r3, #8]
 800563e:	4293      	cmp	r3, r2
 8005640:	bf28      	it	cs
 8005642:	4613      	movcs	r3, r2
 8005644:	461a      	mov	r2, r3
 8005646:	6879      	ldr	r1, [r7, #4]
 8005648:	68f8      	ldr	r0, [r7, #12]
 800564a:	f001 f994 	bl	8006976 <USBD_CtlContinueRx>
 800564e:	e07d      	b.n	800574c <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8005656:	f003 031f 	and.w	r3, r3, #31
 800565a:	2b02      	cmp	r3, #2
 800565c:	d014      	beq.n	8005688 <USBD_LL_DataOutStage+0x98>
 800565e:	2b02      	cmp	r3, #2
 8005660:	d81d      	bhi.n	800569e <USBD_LL_DataOutStage+0xae>
 8005662:	2b00      	cmp	r3, #0
 8005664:	d002      	beq.n	800566c <USBD_LL_DataOutStage+0x7c>
 8005666:	2b01      	cmp	r3, #1
 8005668:	d003      	beq.n	8005672 <USBD_LL_DataOutStage+0x82>
 800566a:	e018      	b.n	800569e <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800566c:	2300      	movs	r3, #0
 800566e:	75bb      	strb	r3, [r7, #22]
            break;
 8005670:	e018      	b.n	80056a4 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8005678:	b2db      	uxtb	r3, r3
 800567a:	4619      	mov	r1, r3
 800567c:	68f8      	ldr	r0, [r7, #12]
 800567e:	f000 fa64 	bl	8005b4a <USBD_CoreFindIF>
 8005682:	4603      	mov	r3, r0
 8005684:	75bb      	strb	r3, [r7, #22]
            break;
 8005686:	e00d      	b.n	80056a4 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800568e:	b2db      	uxtb	r3, r3
 8005690:	4619      	mov	r1, r3
 8005692:	68f8      	ldr	r0, [r7, #12]
 8005694:	f000 fa66 	bl	8005b64 <USBD_CoreFindEP>
 8005698:	4603      	mov	r3, r0
 800569a:	75bb      	strb	r3, [r7, #22]
            break;
 800569c:	e002      	b.n	80056a4 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800569e:	2300      	movs	r3, #0
 80056a0:	75bb      	strb	r3, [r7, #22]
            break;
 80056a2:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 80056a4:	7dbb      	ldrb	r3, [r7, #22]
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d119      	bne.n	80056de <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80056b0:	b2db      	uxtb	r3, r3
 80056b2:	2b03      	cmp	r3, #3
 80056b4:	d113      	bne.n	80056de <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 80056b6:	7dba      	ldrb	r2, [r7, #22]
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	32ae      	adds	r2, #174	@ 0xae
 80056bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80056c0:	691b      	ldr	r3, [r3, #16]
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d00b      	beq.n	80056de <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 80056c6:	7dba      	ldrb	r2, [r7, #22]
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 80056ce:	7dba      	ldrb	r2, [r7, #22]
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	32ae      	adds	r2, #174	@ 0xae
 80056d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80056d8:	691b      	ldr	r3, [r3, #16]
 80056da:	68f8      	ldr	r0, [r7, #12]
 80056dc:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80056de:	68f8      	ldr	r0, [r7, #12]
 80056e0:	f001 f95a 	bl	8006998 <USBD_CtlSendStatus>
 80056e4:	e032      	b.n	800574c <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 80056e6:	7afb      	ldrb	r3, [r7, #11]
 80056e8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80056ec:	b2db      	uxtb	r3, r3
 80056ee:	4619      	mov	r1, r3
 80056f0:	68f8      	ldr	r0, [r7, #12]
 80056f2:	f000 fa37 	bl	8005b64 <USBD_CoreFindEP>
 80056f6:	4603      	mov	r3, r0
 80056f8:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80056fa:	7dbb      	ldrb	r3, [r7, #22]
 80056fc:	2bff      	cmp	r3, #255	@ 0xff
 80056fe:	d025      	beq.n	800574c <USBD_LL_DataOutStage+0x15c>
 8005700:	7dbb      	ldrb	r3, [r7, #22]
 8005702:	2b00      	cmp	r3, #0
 8005704:	d122      	bne.n	800574c <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800570c:	b2db      	uxtb	r3, r3
 800570e:	2b03      	cmp	r3, #3
 8005710:	d117      	bne.n	8005742 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8005712:	7dba      	ldrb	r2, [r7, #22]
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	32ae      	adds	r2, #174	@ 0xae
 8005718:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800571c:	699b      	ldr	r3, [r3, #24]
 800571e:	2b00      	cmp	r3, #0
 8005720:	d00f      	beq.n	8005742 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8005722:	7dba      	ldrb	r2, [r7, #22]
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800572a:	7dba      	ldrb	r2, [r7, #22]
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	32ae      	adds	r2, #174	@ 0xae
 8005730:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005734:	699b      	ldr	r3, [r3, #24]
 8005736:	7afa      	ldrb	r2, [r7, #11]
 8005738:	4611      	mov	r1, r2
 800573a:	68f8      	ldr	r0, [r7, #12]
 800573c:	4798      	blx	r3
 800573e:	4603      	mov	r3, r0
 8005740:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8005742:	7dfb      	ldrb	r3, [r7, #23]
 8005744:	2b00      	cmp	r3, #0
 8005746:	d001      	beq.n	800574c <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8005748:	7dfb      	ldrb	r3, [r7, #23]
 800574a:	e000      	b.n	800574e <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800574c:	2300      	movs	r3, #0
}
 800574e:	4618      	mov	r0, r3
 8005750:	3718      	adds	r7, #24
 8005752:	46bd      	mov	sp, r7
 8005754:	bd80      	pop	{r7, pc}

08005756 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8005756:	b580      	push	{r7, lr}
 8005758:	b086      	sub	sp, #24
 800575a:	af00      	add	r7, sp, #0
 800575c:	60f8      	str	r0, [r7, #12]
 800575e:	460b      	mov	r3, r1
 8005760:	607a      	str	r2, [r7, #4]
 8005762:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8005764:	7afb      	ldrb	r3, [r7, #11]
 8005766:	2b00      	cmp	r3, #0
 8005768:	d16f      	bne.n	800584a <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	3314      	adds	r3, #20
 800576e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8005776:	2b02      	cmp	r3, #2
 8005778:	d15a      	bne.n	8005830 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800577a:	693b      	ldr	r3, [r7, #16]
 800577c:	689a      	ldr	r2, [r3, #8]
 800577e:	693b      	ldr	r3, [r7, #16]
 8005780:	68db      	ldr	r3, [r3, #12]
 8005782:	429a      	cmp	r2, r3
 8005784:	d914      	bls.n	80057b0 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8005786:	693b      	ldr	r3, [r7, #16]
 8005788:	689a      	ldr	r2, [r3, #8]
 800578a:	693b      	ldr	r3, [r7, #16]
 800578c:	68db      	ldr	r3, [r3, #12]
 800578e:	1ad2      	subs	r2, r2, r3
 8005790:	693b      	ldr	r3, [r7, #16]
 8005792:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8005794:	693b      	ldr	r3, [r7, #16]
 8005796:	689b      	ldr	r3, [r3, #8]
 8005798:	461a      	mov	r2, r3
 800579a:	6879      	ldr	r1, [r7, #4]
 800579c:	68f8      	ldr	r0, [r7, #12]
 800579e:	f001 f8bc 	bl	800691a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80057a2:	2300      	movs	r3, #0
 80057a4:	2200      	movs	r2, #0
 80057a6:	2100      	movs	r1, #0
 80057a8:	68f8      	ldr	r0, [r7, #12]
 80057aa:	f001 fd83 	bl	80072b4 <USBD_LL_PrepareReceive>
 80057ae:	e03f      	b.n	8005830 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80057b0:	693b      	ldr	r3, [r7, #16]
 80057b2:	68da      	ldr	r2, [r3, #12]
 80057b4:	693b      	ldr	r3, [r7, #16]
 80057b6:	689b      	ldr	r3, [r3, #8]
 80057b8:	429a      	cmp	r2, r3
 80057ba:	d11c      	bne.n	80057f6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80057bc:	693b      	ldr	r3, [r7, #16]
 80057be:	685a      	ldr	r2, [r3, #4]
 80057c0:	693b      	ldr	r3, [r7, #16]
 80057c2:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80057c4:	429a      	cmp	r2, r3
 80057c6:	d316      	bcc.n	80057f6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80057c8:	693b      	ldr	r3, [r7, #16]
 80057ca:	685a      	ldr	r2, [r3, #4]
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 80057d2:	429a      	cmp	r2, r3
 80057d4:	d20f      	bcs.n	80057f6 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80057d6:	2200      	movs	r2, #0
 80057d8:	2100      	movs	r1, #0
 80057da:	68f8      	ldr	r0, [r7, #12]
 80057dc:	f001 f89d 	bl	800691a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	2200      	movs	r2, #0
 80057e4:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80057e8:	2300      	movs	r3, #0
 80057ea:	2200      	movs	r2, #0
 80057ec:	2100      	movs	r1, #0
 80057ee:	68f8      	ldr	r0, [r7, #12]
 80057f0:	f001 fd60 	bl	80072b4 <USBD_LL_PrepareReceive>
 80057f4:	e01c      	b.n	8005830 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80057fc:	b2db      	uxtb	r3, r3
 80057fe:	2b03      	cmp	r3, #3
 8005800:	d10f      	bne.n	8005822 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005808:	68db      	ldr	r3, [r3, #12]
 800580a:	2b00      	cmp	r3, #0
 800580c:	d009      	beq.n	8005822 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	2200      	movs	r2, #0
 8005812:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800581c:	68db      	ldr	r3, [r3, #12]
 800581e:	68f8      	ldr	r0, [r7, #12]
 8005820:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8005822:	2180      	movs	r1, #128	@ 0x80
 8005824:	68f8      	ldr	r0, [r7, #12]
 8005826:	f001 fc9b 	bl	8007160 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800582a:	68f8      	ldr	r0, [r7, #12]
 800582c:	f001 f8c7 	bl	80069be <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8005836:	2b00      	cmp	r3, #0
 8005838:	d03a      	beq.n	80058b0 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800583a:	68f8      	ldr	r0, [r7, #12]
 800583c:	f7ff fe42 	bl	80054c4 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	2200      	movs	r2, #0
 8005844:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8005848:	e032      	b.n	80058b0 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800584a:	7afb      	ldrb	r3, [r7, #11]
 800584c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005850:	b2db      	uxtb	r3, r3
 8005852:	4619      	mov	r1, r3
 8005854:	68f8      	ldr	r0, [r7, #12]
 8005856:	f000 f985 	bl	8005b64 <USBD_CoreFindEP>
 800585a:	4603      	mov	r3, r0
 800585c:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800585e:	7dfb      	ldrb	r3, [r7, #23]
 8005860:	2bff      	cmp	r3, #255	@ 0xff
 8005862:	d025      	beq.n	80058b0 <USBD_LL_DataInStage+0x15a>
 8005864:	7dfb      	ldrb	r3, [r7, #23]
 8005866:	2b00      	cmp	r3, #0
 8005868:	d122      	bne.n	80058b0 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005870:	b2db      	uxtb	r3, r3
 8005872:	2b03      	cmp	r3, #3
 8005874:	d11c      	bne.n	80058b0 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8005876:	7dfa      	ldrb	r2, [r7, #23]
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	32ae      	adds	r2, #174	@ 0xae
 800587c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005880:	695b      	ldr	r3, [r3, #20]
 8005882:	2b00      	cmp	r3, #0
 8005884:	d014      	beq.n	80058b0 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8005886:	7dfa      	ldrb	r2, [r7, #23]
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800588e:	7dfa      	ldrb	r2, [r7, #23]
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	32ae      	adds	r2, #174	@ 0xae
 8005894:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005898:	695b      	ldr	r3, [r3, #20]
 800589a:	7afa      	ldrb	r2, [r7, #11]
 800589c:	4611      	mov	r1, r2
 800589e:	68f8      	ldr	r0, [r7, #12]
 80058a0:	4798      	blx	r3
 80058a2:	4603      	mov	r3, r0
 80058a4:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 80058a6:	7dbb      	ldrb	r3, [r7, #22]
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d001      	beq.n	80058b0 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 80058ac:	7dbb      	ldrb	r3, [r7, #22]
 80058ae:	e000      	b.n	80058b2 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 80058b0:	2300      	movs	r3, #0
}
 80058b2:	4618      	mov	r0, r3
 80058b4:	3718      	adds	r7, #24
 80058b6:	46bd      	mov	sp, r7
 80058b8:	bd80      	pop	{r7, pc}

080058ba <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80058ba:	b580      	push	{r7, lr}
 80058bc:	b084      	sub	sp, #16
 80058be:	af00      	add	r7, sp, #0
 80058c0:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 80058c2:	2300      	movs	r3, #0
 80058c4:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	2201      	movs	r2, #1
 80058ca:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	2200      	movs	r2, #0
 80058d2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	2200      	movs	r2, #0
 80058da:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	2200      	movs	r2, #0
 80058e0:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	2200      	movs	r2, #0
 80058e8:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d014      	beq.n	8005920 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80058fc:	685b      	ldr	r3, [r3, #4]
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d00e      	beq.n	8005920 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005908:	685b      	ldr	r3, [r3, #4]
 800590a:	687a      	ldr	r2, [r7, #4]
 800590c:	6852      	ldr	r2, [r2, #4]
 800590e:	b2d2      	uxtb	r2, r2
 8005910:	4611      	mov	r1, r2
 8005912:	6878      	ldr	r0, [r7, #4]
 8005914:	4798      	blx	r3
 8005916:	4603      	mov	r3, r0
 8005918:	2b00      	cmp	r3, #0
 800591a:	d001      	beq.n	8005920 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800591c:	2303      	movs	r3, #3
 800591e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005920:	2340      	movs	r3, #64	@ 0x40
 8005922:	2200      	movs	r2, #0
 8005924:	2100      	movs	r1, #0
 8005926:	6878      	ldr	r0, [r7, #4]
 8005928:	f001 fbd5 	bl	80070d6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	2201      	movs	r2, #1
 8005930:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	2240      	movs	r2, #64	@ 0x40
 8005938:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800593c:	2340      	movs	r3, #64	@ 0x40
 800593e:	2200      	movs	r2, #0
 8005940:	2180      	movs	r1, #128	@ 0x80
 8005942:	6878      	ldr	r0, [r7, #4]
 8005944:	f001 fbc7 	bl	80070d6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	2201      	movs	r2, #1
 800594c:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	2240      	movs	r2, #64	@ 0x40
 8005952:	621a      	str	r2, [r3, #32]

  return ret;
 8005954:	7bfb      	ldrb	r3, [r7, #15]
}
 8005956:	4618      	mov	r0, r3
 8005958:	3710      	adds	r7, #16
 800595a:	46bd      	mov	sp, r7
 800595c:	bd80      	pop	{r7, pc}

0800595e <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800595e:	b480      	push	{r7}
 8005960:	b083      	sub	sp, #12
 8005962:	af00      	add	r7, sp, #0
 8005964:	6078      	str	r0, [r7, #4]
 8005966:	460b      	mov	r3, r1
 8005968:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	78fa      	ldrb	r2, [r7, #3]
 800596e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8005970:	2300      	movs	r3, #0
}
 8005972:	4618      	mov	r0, r3
 8005974:	370c      	adds	r7, #12
 8005976:	46bd      	mov	sp, r7
 8005978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800597c:	4770      	bx	lr

0800597e <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800597e:	b480      	push	{r7}
 8005980:	b083      	sub	sp, #12
 8005982:	af00      	add	r7, sp, #0
 8005984:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800598c:	b2db      	uxtb	r3, r3
 800598e:	2b04      	cmp	r3, #4
 8005990:	d006      	beq.n	80059a0 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005998:	b2da      	uxtb	r2, r3
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	2204      	movs	r2, #4
 80059a4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 80059a8:	2300      	movs	r3, #0
}
 80059aa:	4618      	mov	r0, r3
 80059ac:	370c      	adds	r7, #12
 80059ae:	46bd      	mov	sp, r7
 80059b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b4:	4770      	bx	lr

080059b6 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80059b6:	b480      	push	{r7}
 80059b8:	b083      	sub	sp, #12
 80059ba:	af00      	add	r7, sp, #0
 80059bc:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80059c4:	b2db      	uxtb	r3, r3
 80059c6:	2b04      	cmp	r3, #4
 80059c8:	d106      	bne.n	80059d8 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 80059d0:	b2da      	uxtb	r2, r3
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 80059d8:	2300      	movs	r3, #0
}
 80059da:	4618      	mov	r0, r3
 80059dc:	370c      	adds	r7, #12
 80059de:	46bd      	mov	sp, r7
 80059e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e4:	4770      	bx	lr

080059e6 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80059e6:	b580      	push	{r7, lr}
 80059e8:	b082      	sub	sp, #8
 80059ea:	af00      	add	r7, sp, #0
 80059ec:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80059f4:	b2db      	uxtb	r3, r3
 80059f6:	2b03      	cmp	r3, #3
 80059f8:	d110      	bne.n	8005a1c <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d00b      	beq.n	8005a1c <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005a0a:	69db      	ldr	r3, [r3, #28]
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d005      	beq.n	8005a1c <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005a16:	69db      	ldr	r3, [r3, #28]
 8005a18:	6878      	ldr	r0, [r7, #4]
 8005a1a:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8005a1c:	2300      	movs	r3, #0
}
 8005a1e:	4618      	mov	r0, r3
 8005a20:	3708      	adds	r7, #8
 8005a22:	46bd      	mov	sp, r7
 8005a24:	bd80      	pop	{r7, pc}

08005a26 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8005a26:	b580      	push	{r7, lr}
 8005a28:	b082      	sub	sp, #8
 8005a2a:	af00      	add	r7, sp, #0
 8005a2c:	6078      	str	r0, [r7, #4]
 8005a2e:	460b      	mov	r3, r1
 8005a30:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	32ae      	adds	r2, #174	@ 0xae
 8005a3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d101      	bne.n	8005a48 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8005a44:	2303      	movs	r3, #3
 8005a46:	e01c      	b.n	8005a82 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005a4e:	b2db      	uxtb	r3, r3
 8005a50:	2b03      	cmp	r3, #3
 8005a52:	d115      	bne.n	8005a80 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	32ae      	adds	r2, #174	@ 0xae
 8005a5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a62:	6a1b      	ldr	r3, [r3, #32]
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d00b      	beq.n	8005a80 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	32ae      	adds	r2, #174	@ 0xae
 8005a72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a76:	6a1b      	ldr	r3, [r3, #32]
 8005a78:	78fa      	ldrb	r2, [r7, #3]
 8005a7a:	4611      	mov	r1, r2
 8005a7c:	6878      	ldr	r0, [r7, #4]
 8005a7e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005a80:	2300      	movs	r3, #0
}
 8005a82:	4618      	mov	r0, r3
 8005a84:	3708      	adds	r7, #8
 8005a86:	46bd      	mov	sp, r7
 8005a88:	bd80      	pop	{r7, pc}

08005a8a <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8005a8a:	b580      	push	{r7, lr}
 8005a8c:	b082      	sub	sp, #8
 8005a8e:	af00      	add	r7, sp, #0
 8005a90:	6078      	str	r0, [r7, #4]
 8005a92:	460b      	mov	r3, r1
 8005a94:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	32ae      	adds	r2, #174	@ 0xae
 8005aa0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d101      	bne.n	8005aac <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8005aa8:	2303      	movs	r3, #3
 8005aaa:	e01c      	b.n	8005ae6 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005ab2:	b2db      	uxtb	r3, r3
 8005ab4:	2b03      	cmp	r3, #3
 8005ab6:	d115      	bne.n	8005ae4 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	32ae      	adds	r2, #174	@ 0xae
 8005ac2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ac6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d00b      	beq.n	8005ae4 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	32ae      	adds	r2, #174	@ 0xae
 8005ad6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ada:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005adc:	78fa      	ldrb	r2, [r7, #3]
 8005ade:	4611      	mov	r1, r2
 8005ae0:	6878      	ldr	r0, [r7, #4]
 8005ae2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005ae4:	2300      	movs	r3, #0
}
 8005ae6:	4618      	mov	r0, r3
 8005ae8:	3708      	adds	r7, #8
 8005aea:	46bd      	mov	sp, r7
 8005aec:	bd80      	pop	{r7, pc}

08005aee <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8005aee:	b480      	push	{r7}
 8005af0:	b083      	sub	sp, #12
 8005af2:	af00      	add	r7, sp, #0
 8005af4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005af6:	2300      	movs	r3, #0
}
 8005af8:	4618      	mov	r0, r3
 8005afa:	370c      	adds	r7, #12
 8005afc:	46bd      	mov	sp, r7
 8005afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b02:	4770      	bx	lr

08005b04 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8005b04:	b580      	push	{r7, lr}
 8005b06:	b084      	sub	sp, #16
 8005b08:	af00      	add	r7, sp, #0
 8005b0a:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8005b0c:	2300      	movs	r3, #0
 8005b0e:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	2201      	movs	r2, #1
 8005b14:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d00e      	beq.n	8005b40 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005b28:	685b      	ldr	r3, [r3, #4]
 8005b2a:	687a      	ldr	r2, [r7, #4]
 8005b2c:	6852      	ldr	r2, [r2, #4]
 8005b2e:	b2d2      	uxtb	r2, r2
 8005b30:	4611      	mov	r1, r2
 8005b32:	6878      	ldr	r0, [r7, #4]
 8005b34:	4798      	blx	r3
 8005b36:	4603      	mov	r3, r0
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d001      	beq.n	8005b40 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8005b3c:	2303      	movs	r3, #3
 8005b3e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005b40:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b42:	4618      	mov	r0, r3
 8005b44:	3710      	adds	r7, #16
 8005b46:	46bd      	mov	sp, r7
 8005b48:	bd80      	pop	{r7, pc}

08005b4a <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8005b4a:	b480      	push	{r7}
 8005b4c:	b083      	sub	sp, #12
 8005b4e:	af00      	add	r7, sp, #0
 8005b50:	6078      	str	r0, [r7, #4]
 8005b52:	460b      	mov	r3, r1
 8005b54:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8005b56:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8005b58:	4618      	mov	r0, r3
 8005b5a:	370c      	adds	r7, #12
 8005b5c:	46bd      	mov	sp, r7
 8005b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b62:	4770      	bx	lr

08005b64 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8005b64:	b480      	push	{r7}
 8005b66:	b083      	sub	sp, #12
 8005b68:	af00      	add	r7, sp, #0
 8005b6a:	6078      	str	r0, [r7, #4]
 8005b6c:	460b      	mov	r3, r1
 8005b6e:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8005b70:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8005b72:	4618      	mov	r0, r3
 8005b74:	370c      	adds	r7, #12
 8005b76:	46bd      	mov	sp, r7
 8005b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b7c:	4770      	bx	lr

08005b7e <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8005b7e:	b580      	push	{r7, lr}
 8005b80:	b086      	sub	sp, #24
 8005b82:	af00      	add	r7, sp, #0
 8005b84:	6078      	str	r0, [r7, #4]
 8005b86:	460b      	mov	r3, r1
 8005b88:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8005b92:	2300      	movs	r3, #0
 8005b94:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	885b      	ldrh	r3, [r3, #2]
 8005b9a:	b29b      	uxth	r3, r3
 8005b9c:	68fa      	ldr	r2, [r7, #12]
 8005b9e:	7812      	ldrb	r2, [r2, #0]
 8005ba0:	4293      	cmp	r3, r2
 8005ba2:	d91f      	bls.n	8005be4 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	781b      	ldrb	r3, [r3, #0]
 8005ba8:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8005baa:	e013      	b.n	8005bd4 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8005bac:	f107 030a 	add.w	r3, r7, #10
 8005bb0:	4619      	mov	r1, r3
 8005bb2:	6978      	ldr	r0, [r7, #20]
 8005bb4:	f000 f81b 	bl	8005bee <USBD_GetNextDesc>
 8005bb8:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8005bba:	697b      	ldr	r3, [r7, #20]
 8005bbc:	785b      	ldrb	r3, [r3, #1]
 8005bbe:	2b05      	cmp	r3, #5
 8005bc0:	d108      	bne.n	8005bd4 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8005bc2:	697b      	ldr	r3, [r7, #20]
 8005bc4:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8005bc6:	693b      	ldr	r3, [r7, #16]
 8005bc8:	789b      	ldrb	r3, [r3, #2]
 8005bca:	78fa      	ldrb	r2, [r7, #3]
 8005bcc:	429a      	cmp	r2, r3
 8005bce:	d008      	beq.n	8005be2 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8005bd0:	2300      	movs	r3, #0
 8005bd2:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	885b      	ldrh	r3, [r3, #2]
 8005bd8:	b29a      	uxth	r2, r3
 8005bda:	897b      	ldrh	r3, [r7, #10]
 8005bdc:	429a      	cmp	r2, r3
 8005bde:	d8e5      	bhi.n	8005bac <USBD_GetEpDesc+0x2e>
 8005be0:	e000      	b.n	8005be4 <USBD_GetEpDesc+0x66>
          break;
 8005be2:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8005be4:	693b      	ldr	r3, [r7, #16]
}
 8005be6:	4618      	mov	r0, r3
 8005be8:	3718      	adds	r7, #24
 8005bea:	46bd      	mov	sp, r7
 8005bec:	bd80      	pop	{r7, pc}

08005bee <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8005bee:	b480      	push	{r7}
 8005bf0:	b085      	sub	sp, #20
 8005bf2:	af00      	add	r7, sp, #0
 8005bf4:	6078      	str	r0, [r7, #4]
 8005bf6:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8005bfc:	683b      	ldr	r3, [r7, #0]
 8005bfe:	881b      	ldrh	r3, [r3, #0]
 8005c00:	68fa      	ldr	r2, [r7, #12]
 8005c02:	7812      	ldrb	r2, [r2, #0]
 8005c04:	4413      	add	r3, r2
 8005c06:	b29a      	uxth	r2, r3
 8005c08:	683b      	ldr	r3, [r7, #0]
 8005c0a:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	781b      	ldrb	r3, [r3, #0]
 8005c10:	461a      	mov	r2, r3
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	4413      	add	r3, r2
 8005c16:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8005c18:	68fb      	ldr	r3, [r7, #12]
}
 8005c1a:	4618      	mov	r0, r3
 8005c1c:	3714      	adds	r7, #20
 8005c1e:	46bd      	mov	sp, r7
 8005c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c24:	4770      	bx	lr

08005c26 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8005c26:	b480      	push	{r7}
 8005c28:	b087      	sub	sp, #28
 8005c2a:	af00      	add	r7, sp, #0
 8005c2c:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8005c32:	697b      	ldr	r3, [r7, #20]
 8005c34:	781b      	ldrb	r3, [r3, #0]
 8005c36:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8005c38:	697b      	ldr	r3, [r7, #20]
 8005c3a:	3301      	adds	r3, #1
 8005c3c:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8005c3e:	697b      	ldr	r3, [r7, #20]
 8005c40:	781b      	ldrb	r3, [r3, #0]
 8005c42:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8005c44:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8005c48:	021b      	lsls	r3, r3, #8
 8005c4a:	b21a      	sxth	r2, r3
 8005c4c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8005c50:	4313      	orrs	r3, r2
 8005c52:	b21b      	sxth	r3, r3
 8005c54:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8005c56:	89fb      	ldrh	r3, [r7, #14]
}
 8005c58:	4618      	mov	r0, r3
 8005c5a:	371c      	adds	r7, #28
 8005c5c:	46bd      	mov	sp, r7
 8005c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c62:	4770      	bx	lr

08005c64 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005c64:	b580      	push	{r7, lr}
 8005c66:	b084      	sub	sp, #16
 8005c68:	af00      	add	r7, sp, #0
 8005c6a:	6078      	str	r0, [r7, #4]
 8005c6c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005c6e:	2300      	movs	r3, #0
 8005c70:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005c72:	683b      	ldr	r3, [r7, #0]
 8005c74:	781b      	ldrb	r3, [r3, #0]
 8005c76:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8005c7a:	2b40      	cmp	r3, #64	@ 0x40
 8005c7c:	d005      	beq.n	8005c8a <USBD_StdDevReq+0x26>
 8005c7e:	2b40      	cmp	r3, #64	@ 0x40
 8005c80:	d857      	bhi.n	8005d32 <USBD_StdDevReq+0xce>
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d00f      	beq.n	8005ca6 <USBD_StdDevReq+0x42>
 8005c86:	2b20      	cmp	r3, #32
 8005c88:	d153      	bne.n	8005d32 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	32ae      	adds	r2, #174	@ 0xae
 8005c94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c98:	689b      	ldr	r3, [r3, #8]
 8005c9a:	6839      	ldr	r1, [r7, #0]
 8005c9c:	6878      	ldr	r0, [r7, #4]
 8005c9e:	4798      	blx	r3
 8005ca0:	4603      	mov	r3, r0
 8005ca2:	73fb      	strb	r3, [r7, #15]
      break;
 8005ca4:	e04a      	b.n	8005d3c <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005ca6:	683b      	ldr	r3, [r7, #0]
 8005ca8:	785b      	ldrb	r3, [r3, #1]
 8005caa:	2b09      	cmp	r3, #9
 8005cac:	d83b      	bhi.n	8005d26 <USBD_StdDevReq+0xc2>
 8005cae:	a201      	add	r2, pc, #4	@ (adr r2, 8005cb4 <USBD_StdDevReq+0x50>)
 8005cb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cb4:	08005d09 	.word	0x08005d09
 8005cb8:	08005d1d 	.word	0x08005d1d
 8005cbc:	08005d27 	.word	0x08005d27
 8005cc0:	08005d13 	.word	0x08005d13
 8005cc4:	08005d27 	.word	0x08005d27
 8005cc8:	08005ce7 	.word	0x08005ce7
 8005ccc:	08005cdd 	.word	0x08005cdd
 8005cd0:	08005d27 	.word	0x08005d27
 8005cd4:	08005cff 	.word	0x08005cff
 8005cd8:	08005cf1 	.word	0x08005cf1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8005cdc:	6839      	ldr	r1, [r7, #0]
 8005cde:	6878      	ldr	r0, [r7, #4]
 8005ce0:	f000 fa3c 	bl	800615c <USBD_GetDescriptor>
          break;
 8005ce4:	e024      	b.n	8005d30 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8005ce6:	6839      	ldr	r1, [r7, #0]
 8005ce8:	6878      	ldr	r0, [r7, #4]
 8005cea:	f000 fba1 	bl	8006430 <USBD_SetAddress>
          break;
 8005cee:	e01f      	b.n	8005d30 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8005cf0:	6839      	ldr	r1, [r7, #0]
 8005cf2:	6878      	ldr	r0, [r7, #4]
 8005cf4:	f000 fbe0 	bl	80064b8 <USBD_SetConfig>
 8005cf8:	4603      	mov	r3, r0
 8005cfa:	73fb      	strb	r3, [r7, #15]
          break;
 8005cfc:	e018      	b.n	8005d30 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8005cfe:	6839      	ldr	r1, [r7, #0]
 8005d00:	6878      	ldr	r0, [r7, #4]
 8005d02:	f000 fc83 	bl	800660c <USBD_GetConfig>
          break;
 8005d06:	e013      	b.n	8005d30 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8005d08:	6839      	ldr	r1, [r7, #0]
 8005d0a:	6878      	ldr	r0, [r7, #4]
 8005d0c:	f000 fcb4 	bl	8006678 <USBD_GetStatus>
          break;
 8005d10:	e00e      	b.n	8005d30 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8005d12:	6839      	ldr	r1, [r7, #0]
 8005d14:	6878      	ldr	r0, [r7, #4]
 8005d16:	f000 fce3 	bl	80066e0 <USBD_SetFeature>
          break;
 8005d1a:	e009      	b.n	8005d30 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8005d1c:	6839      	ldr	r1, [r7, #0]
 8005d1e:	6878      	ldr	r0, [r7, #4]
 8005d20:	f000 fd07 	bl	8006732 <USBD_ClrFeature>
          break;
 8005d24:	e004      	b.n	8005d30 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8005d26:	6839      	ldr	r1, [r7, #0]
 8005d28:	6878      	ldr	r0, [r7, #4]
 8005d2a:	f000 fd5e 	bl	80067ea <USBD_CtlError>
          break;
 8005d2e:	bf00      	nop
      }
      break;
 8005d30:	e004      	b.n	8005d3c <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8005d32:	6839      	ldr	r1, [r7, #0]
 8005d34:	6878      	ldr	r0, [r7, #4]
 8005d36:	f000 fd58 	bl	80067ea <USBD_CtlError>
      break;
 8005d3a:	bf00      	nop
  }

  return ret;
 8005d3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d3e:	4618      	mov	r0, r3
 8005d40:	3710      	adds	r7, #16
 8005d42:	46bd      	mov	sp, r7
 8005d44:	bd80      	pop	{r7, pc}
 8005d46:	bf00      	nop

08005d48 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005d48:	b580      	push	{r7, lr}
 8005d4a:	b084      	sub	sp, #16
 8005d4c:	af00      	add	r7, sp, #0
 8005d4e:	6078      	str	r0, [r7, #4]
 8005d50:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005d52:	2300      	movs	r3, #0
 8005d54:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005d56:	683b      	ldr	r3, [r7, #0]
 8005d58:	781b      	ldrb	r3, [r3, #0]
 8005d5a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8005d5e:	2b40      	cmp	r3, #64	@ 0x40
 8005d60:	d005      	beq.n	8005d6e <USBD_StdItfReq+0x26>
 8005d62:	2b40      	cmp	r3, #64	@ 0x40
 8005d64:	d852      	bhi.n	8005e0c <USBD_StdItfReq+0xc4>
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d001      	beq.n	8005d6e <USBD_StdItfReq+0x26>
 8005d6a:	2b20      	cmp	r3, #32
 8005d6c:	d14e      	bne.n	8005e0c <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005d74:	b2db      	uxtb	r3, r3
 8005d76:	3b01      	subs	r3, #1
 8005d78:	2b02      	cmp	r3, #2
 8005d7a:	d840      	bhi.n	8005dfe <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8005d7c:	683b      	ldr	r3, [r7, #0]
 8005d7e:	889b      	ldrh	r3, [r3, #4]
 8005d80:	b2db      	uxtb	r3, r3
 8005d82:	2b01      	cmp	r3, #1
 8005d84:	d836      	bhi.n	8005df4 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8005d86:	683b      	ldr	r3, [r7, #0]
 8005d88:	889b      	ldrh	r3, [r3, #4]
 8005d8a:	b2db      	uxtb	r3, r3
 8005d8c:	4619      	mov	r1, r3
 8005d8e:	6878      	ldr	r0, [r7, #4]
 8005d90:	f7ff fedb 	bl	8005b4a <USBD_CoreFindIF>
 8005d94:	4603      	mov	r3, r0
 8005d96:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005d98:	7bbb      	ldrb	r3, [r7, #14]
 8005d9a:	2bff      	cmp	r3, #255	@ 0xff
 8005d9c:	d01d      	beq.n	8005dda <USBD_StdItfReq+0x92>
 8005d9e:	7bbb      	ldrb	r3, [r7, #14]
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d11a      	bne.n	8005dda <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8005da4:	7bba      	ldrb	r2, [r7, #14]
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	32ae      	adds	r2, #174	@ 0xae
 8005daa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005dae:	689b      	ldr	r3, [r3, #8]
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d00f      	beq.n	8005dd4 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8005db4:	7bba      	ldrb	r2, [r7, #14]
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8005dbc:	7bba      	ldrb	r2, [r7, #14]
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	32ae      	adds	r2, #174	@ 0xae
 8005dc2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005dc6:	689b      	ldr	r3, [r3, #8]
 8005dc8:	6839      	ldr	r1, [r7, #0]
 8005dca:	6878      	ldr	r0, [r7, #4]
 8005dcc:	4798      	blx	r3
 8005dce:	4603      	mov	r3, r0
 8005dd0:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8005dd2:	e004      	b.n	8005dde <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8005dd4:	2303      	movs	r3, #3
 8005dd6:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8005dd8:	e001      	b.n	8005dde <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8005dda:	2303      	movs	r3, #3
 8005ddc:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8005dde:	683b      	ldr	r3, [r7, #0]
 8005de0:	88db      	ldrh	r3, [r3, #6]
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d110      	bne.n	8005e08 <USBD_StdItfReq+0xc0>
 8005de6:	7bfb      	ldrb	r3, [r7, #15]
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d10d      	bne.n	8005e08 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8005dec:	6878      	ldr	r0, [r7, #4]
 8005dee:	f000 fdd3 	bl	8006998 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8005df2:	e009      	b.n	8005e08 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8005df4:	6839      	ldr	r1, [r7, #0]
 8005df6:	6878      	ldr	r0, [r7, #4]
 8005df8:	f000 fcf7 	bl	80067ea <USBD_CtlError>
          break;
 8005dfc:	e004      	b.n	8005e08 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8005dfe:	6839      	ldr	r1, [r7, #0]
 8005e00:	6878      	ldr	r0, [r7, #4]
 8005e02:	f000 fcf2 	bl	80067ea <USBD_CtlError>
          break;
 8005e06:	e000      	b.n	8005e0a <USBD_StdItfReq+0xc2>
          break;
 8005e08:	bf00      	nop
      }
      break;
 8005e0a:	e004      	b.n	8005e16 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8005e0c:	6839      	ldr	r1, [r7, #0]
 8005e0e:	6878      	ldr	r0, [r7, #4]
 8005e10:	f000 fceb 	bl	80067ea <USBD_CtlError>
      break;
 8005e14:	bf00      	nop
  }

  return ret;
 8005e16:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e18:	4618      	mov	r0, r3
 8005e1a:	3710      	adds	r7, #16
 8005e1c:	46bd      	mov	sp, r7
 8005e1e:	bd80      	pop	{r7, pc}

08005e20 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005e20:	b580      	push	{r7, lr}
 8005e22:	b084      	sub	sp, #16
 8005e24:	af00      	add	r7, sp, #0
 8005e26:	6078      	str	r0, [r7, #4]
 8005e28:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8005e2a:	2300      	movs	r3, #0
 8005e2c:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8005e2e:	683b      	ldr	r3, [r7, #0]
 8005e30:	889b      	ldrh	r3, [r3, #4]
 8005e32:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005e34:	683b      	ldr	r3, [r7, #0]
 8005e36:	781b      	ldrb	r3, [r3, #0]
 8005e38:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8005e3c:	2b40      	cmp	r3, #64	@ 0x40
 8005e3e:	d007      	beq.n	8005e50 <USBD_StdEPReq+0x30>
 8005e40:	2b40      	cmp	r3, #64	@ 0x40
 8005e42:	f200 817f 	bhi.w	8006144 <USBD_StdEPReq+0x324>
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d02a      	beq.n	8005ea0 <USBD_StdEPReq+0x80>
 8005e4a:	2b20      	cmp	r3, #32
 8005e4c:	f040 817a 	bne.w	8006144 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8005e50:	7bbb      	ldrb	r3, [r7, #14]
 8005e52:	4619      	mov	r1, r3
 8005e54:	6878      	ldr	r0, [r7, #4]
 8005e56:	f7ff fe85 	bl	8005b64 <USBD_CoreFindEP>
 8005e5a:	4603      	mov	r3, r0
 8005e5c:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005e5e:	7b7b      	ldrb	r3, [r7, #13]
 8005e60:	2bff      	cmp	r3, #255	@ 0xff
 8005e62:	f000 8174 	beq.w	800614e <USBD_StdEPReq+0x32e>
 8005e66:	7b7b      	ldrb	r3, [r7, #13]
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	f040 8170 	bne.w	800614e <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8005e6e:	7b7a      	ldrb	r2, [r7, #13]
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8005e76:	7b7a      	ldrb	r2, [r7, #13]
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	32ae      	adds	r2, #174	@ 0xae
 8005e7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e80:	689b      	ldr	r3, [r3, #8]
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	f000 8163 	beq.w	800614e <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8005e88:	7b7a      	ldrb	r2, [r7, #13]
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	32ae      	adds	r2, #174	@ 0xae
 8005e8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e92:	689b      	ldr	r3, [r3, #8]
 8005e94:	6839      	ldr	r1, [r7, #0]
 8005e96:	6878      	ldr	r0, [r7, #4]
 8005e98:	4798      	blx	r3
 8005e9a:	4603      	mov	r3, r0
 8005e9c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005e9e:	e156      	b.n	800614e <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005ea0:	683b      	ldr	r3, [r7, #0]
 8005ea2:	785b      	ldrb	r3, [r3, #1]
 8005ea4:	2b03      	cmp	r3, #3
 8005ea6:	d008      	beq.n	8005eba <USBD_StdEPReq+0x9a>
 8005ea8:	2b03      	cmp	r3, #3
 8005eaa:	f300 8145 	bgt.w	8006138 <USBD_StdEPReq+0x318>
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	f000 809b 	beq.w	8005fea <USBD_StdEPReq+0x1ca>
 8005eb4:	2b01      	cmp	r3, #1
 8005eb6:	d03c      	beq.n	8005f32 <USBD_StdEPReq+0x112>
 8005eb8:	e13e      	b.n	8006138 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005ec0:	b2db      	uxtb	r3, r3
 8005ec2:	2b02      	cmp	r3, #2
 8005ec4:	d002      	beq.n	8005ecc <USBD_StdEPReq+0xac>
 8005ec6:	2b03      	cmp	r3, #3
 8005ec8:	d016      	beq.n	8005ef8 <USBD_StdEPReq+0xd8>
 8005eca:	e02c      	b.n	8005f26 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005ecc:	7bbb      	ldrb	r3, [r7, #14]
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d00d      	beq.n	8005eee <USBD_StdEPReq+0xce>
 8005ed2:	7bbb      	ldrb	r3, [r7, #14]
 8005ed4:	2b80      	cmp	r3, #128	@ 0x80
 8005ed6:	d00a      	beq.n	8005eee <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8005ed8:	7bbb      	ldrb	r3, [r7, #14]
 8005eda:	4619      	mov	r1, r3
 8005edc:	6878      	ldr	r0, [r7, #4]
 8005ede:	f001 f93f 	bl	8007160 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8005ee2:	2180      	movs	r1, #128	@ 0x80
 8005ee4:	6878      	ldr	r0, [r7, #4]
 8005ee6:	f001 f93b 	bl	8007160 <USBD_LL_StallEP>
 8005eea:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8005eec:	e020      	b.n	8005f30 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8005eee:	6839      	ldr	r1, [r7, #0]
 8005ef0:	6878      	ldr	r0, [r7, #4]
 8005ef2:	f000 fc7a 	bl	80067ea <USBD_CtlError>
              break;
 8005ef6:	e01b      	b.n	8005f30 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8005ef8:	683b      	ldr	r3, [r7, #0]
 8005efa:	885b      	ldrh	r3, [r3, #2]
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d10e      	bne.n	8005f1e <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8005f00:	7bbb      	ldrb	r3, [r7, #14]
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d00b      	beq.n	8005f1e <USBD_StdEPReq+0xfe>
 8005f06:	7bbb      	ldrb	r3, [r7, #14]
 8005f08:	2b80      	cmp	r3, #128	@ 0x80
 8005f0a:	d008      	beq.n	8005f1e <USBD_StdEPReq+0xfe>
 8005f0c:	683b      	ldr	r3, [r7, #0]
 8005f0e:	88db      	ldrh	r3, [r3, #6]
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d104      	bne.n	8005f1e <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8005f14:	7bbb      	ldrb	r3, [r7, #14]
 8005f16:	4619      	mov	r1, r3
 8005f18:	6878      	ldr	r0, [r7, #4]
 8005f1a:	f001 f921 	bl	8007160 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8005f1e:	6878      	ldr	r0, [r7, #4]
 8005f20:	f000 fd3a 	bl	8006998 <USBD_CtlSendStatus>

              break;
 8005f24:	e004      	b.n	8005f30 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8005f26:	6839      	ldr	r1, [r7, #0]
 8005f28:	6878      	ldr	r0, [r7, #4]
 8005f2a:	f000 fc5e 	bl	80067ea <USBD_CtlError>
              break;
 8005f2e:	bf00      	nop
          }
          break;
 8005f30:	e107      	b.n	8006142 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005f38:	b2db      	uxtb	r3, r3
 8005f3a:	2b02      	cmp	r3, #2
 8005f3c:	d002      	beq.n	8005f44 <USBD_StdEPReq+0x124>
 8005f3e:	2b03      	cmp	r3, #3
 8005f40:	d016      	beq.n	8005f70 <USBD_StdEPReq+0x150>
 8005f42:	e04b      	b.n	8005fdc <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005f44:	7bbb      	ldrb	r3, [r7, #14]
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d00d      	beq.n	8005f66 <USBD_StdEPReq+0x146>
 8005f4a:	7bbb      	ldrb	r3, [r7, #14]
 8005f4c:	2b80      	cmp	r3, #128	@ 0x80
 8005f4e:	d00a      	beq.n	8005f66 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8005f50:	7bbb      	ldrb	r3, [r7, #14]
 8005f52:	4619      	mov	r1, r3
 8005f54:	6878      	ldr	r0, [r7, #4]
 8005f56:	f001 f903 	bl	8007160 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8005f5a:	2180      	movs	r1, #128	@ 0x80
 8005f5c:	6878      	ldr	r0, [r7, #4]
 8005f5e:	f001 f8ff 	bl	8007160 <USBD_LL_StallEP>
 8005f62:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8005f64:	e040      	b.n	8005fe8 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8005f66:	6839      	ldr	r1, [r7, #0]
 8005f68:	6878      	ldr	r0, [r7, #4]
 8005f6a:	f000 fc3e 	bl	80067ea <USBD_CtlError>
              break;
 8005f6e:	e03b      	b.n	8005fe8 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8005f70:	683b      	ldr	r3, [r7, #0]
 8005f72:	885b      	ldrh	r3, [r3, #2]
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d136      	bne.n	8005fe6 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8005f78:	7bbb      	ldrb	r3, [r7, #14]
 8005f7a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d004      	beq.n	8005f8c <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8005f82:	7bbb      	ldrb	r3, [r7, #14]
 8005f84:	4619      	mov	r1, r3
 8005f86:	6878      	ldr	r0, [r7, #4]
 8005f88:	f001 f909 	bl	800719e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8005f8c:	6878      	ldr	r0, [r7, #4]
 8005f8e:	f000 fd03 	bl	8006998 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8005f92:	7bbb      	ldrb	r3, [r7, #14]
 8005f94:	4619      	mov	r1, r3
 8005f96:	6878      	ldr	r0, [r7, #4]
 8005f98:	f7ff fde4 	bl	8005b64 <USBD_CoreFindEP>
 8005f9c:	4603      	mov	r3, r0
 8005f9e:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005fa0:	7b7b      	ldrb	r3, [r7, #13]
 8005fa2:	2bff      	cmp	r3, #255	@ 0xff
 8005fa4:	d01f      	beq.n	8005fe6 <USBD_StdEPReq+0x1c6>
 8005fa6:	7b7b      	ldrb	r3, [r7, #13]
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d11c      	bne.n	8005fe6 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8005fac:	7b7a      	ldrb	r2, [r7, #13]
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8005fb4:	7b7a      	ldrb	r2, [r7, #13]
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	32ae      	adds	r2, #174	@ 0xae
 8005fba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005fbe:	689b      	ldr	r3, [r3, #8]
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d010      	beq.n	8005fe6 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8005fc4:	7b7a      	ldrb	r2, [r7, #13]
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	32ae      	adds	r2, #174	@ 0xae
 8005fca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005fce:	689b      	ldr	r3, [r3, #8]
 8005fd0:	6839      	ldr	r1, [r7, #0]
 8005fd2:	6878      	ldr	r0, [r7, #4]
 8005fd4:	4798      	blx	r3
 8005fd6:	4603      	mov	r3, r0
 8005fd8:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8005fda:	e004      	b.n	8005fe6 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8005fdc:	6839      	ldr	r1, [r7, #0]
 8005fde:	6878      	ldr	r0, [r7, #4]
 8005fe0:	f000 fc03 	bl	80067ea <USBD_CtlError>
              break;
 8005fe4:	e000      	b.n	8005fe8 <USBD_StdEPReq+0x1c8>
              break;
 8005fe6:	bf00      	nop
          }
          break;
 8005fe8:	e0ab      	b.n	8006142 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005ff0:	b2db      	uxtb	r3, r3
 8005ff2:	2b02      	cmp	r3, #2
 8005ff4:	d002      	beq.n	8005ffc <USBD_StdEPReq+0x1dc>
 8005ff6:	2b03      	cmp	r3, #3
 8005ff8:	d032      	beq.n	8006060 <USBD_StdEPReq+0x240>
 8005ffa:	e097      	b.n	800612c <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005ffc:	7bbb      	ldrb	r3, [r7, #14]
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d007      	beq.n	8006012 <USBD_StdEPReq+0x1f2>
 8006002:	7bbb      	ldrb	r3, [r7, #14]
 8006004:	2b80      	cmp	r3, #128	@ 0x80
 8006006:	d004      	beq.n	8006012 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8006008:	6839      	ldr	r1, [r7, #0]
 800600a:	6878      	ldr	r0, [r7, #4]
 800600c:	f000 fbed 	bl	80067ea <USBD_CtlError>
                break;
 8006010:	e091      	b.n	8006136 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006012:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006016:	2b00      	cmp	r3, #0
 8006018:	da0b      	bge.n	8006032 <USBD_StdEPReq+0x212>
 800601a:	7bbb      	ldrb	r3, [r7, #14]
 800601c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006020:	4613      	mov	r3, r2
 8006022:	009b      	lsls	r3, r3, #2
 8006024:	4413      	add	r3, r2
 8006026:	009b      	lsls	r3, r3, #2
 8006028:	3310      	adds	r3, #16
 800602a:	687a      	ldr	r2, [r7, #4]
 800602c:	4413      	add	r3, r2
 800602e:	3304      	adds	r3, #4
 8006030:	e00b      	b.n	800604a <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006032:	7bbb      	ldrb	r3, [r7, #14]
 8006034:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006038:	4613      	mov	r3, r2
 800603a:	009b      	lsls	r3, r3, #2
 800603c:	4413      	add	r3, r2
 800603e:	009b      	lsls	r3, r3, #2
 8006040:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8006044:	687a      	ldr	r2, [r7, #4]
 8006046:	4413      	add	r3, r2
 8006048:	3304      	adds	r3, #4
 800604a:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800604c:	68bb      	ldr	r3, [r7, #8]
 800604e:	2200      	movs	r2, #0
 8006050:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006052:	68bb      	ldr	r3, [r7, #8]
 8006054:	2202      	movs	r2, #2
 8006056:	4619      	mov	r1, r3
 8006058:	6878      	ldr	r0, [r7, #4]
 800605a:	f000 fc43 	bl	80068e4 <USBD_CtlSendData>
              break;
 800605e:	e06a      	b.n	8006136 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8006060:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006064:	2b00      	cmp	r3, #0
 8006066:	da11      	bge.n	800608c <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006068:	7bbb      	ldrb	r3, [r7, #14]
 800606a:	f003 020f 	and.w	r2, r3, #15
 800606e:	6879      	ldr	r1, [r7, #4]
 8006070:	4613      	mov	r3, r2
 8006072:	009b      	lsls	r3, r3, #2
 8006074:	4413      	add	r3, r2
 8006076:	009b      	lsls	r3, r3, #2
 8006078:	440b      	add	r3, r1
 800607a:	3324      	adds	r3, #36	@ 0x24
 800607c:	881b      	ldrh	r3, [r3, #0]
 800607e:	2b00      	cmp	r3, #0
 8006080:	d117      	bne.n	80060b2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8006082:	6839      	ldr	r1, [r7, #0]
 8006084:	6878      	ldr	r0, [r7, #4]
 8006086:	f000 fbb0 	bl	80067ea <USBD_CtlError>
                  break;
 800608a:	e054      	b.n	8006136 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800608c:	7bbb      	ldrb	r3, [r7, #14]
 800608e:	f003 020f 	and.w	r2, r3, #15
 8006092:	6879      	ldr	r1, [r7, #4]
 8006094:	4613      	mov	r3, r2
 8006096:	009b      	lsls	r3, r3, #2
 8006098:	4413      	add	r3, r2
 800609a:	009b      	lsls	r3, r3, #2
 800609c:	440b      	add	r3, r1
 800609e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80060a2:	881b      	ldrh	r3, [r3, #0]
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d104      	bne.n	80060b2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80060a8:	6839      	ldr	r1, [r7, #0]
 80060aa:	6878      	ldr	r0, [r7, #4]
 80060ac:	f000 fb9d 	bl	80067ea <USBD_CtlError>
                  break;
 80060b0:	e041      	b.n	8006136 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80060b2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	da0b      	bge.n	80060d2 <USBD_StdEPReq+0x2b2>
 80060ba:	7bbb      	ldrb	r3, [r7, #14]
 80060bc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80060c0:	4613      	mov	r3, r2
 80060c2:	009b      	lsls	r3, r3, #2
 80060c4:	4413      	add	r3, r2
 80060c6:	009b      	lsls	r3, r3, #2
 80060c8:	3310      	adds	r3, #16
 80060ca:	687a      	ldr	r2, [r7, #4]
 80060cc:	4413      	add	r3, r2
 80060ce:	3304      	adds	r3, #4
 80060d0:	e00b      	b.n	80060ea <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80060d2:	7bbb      	ldrb	r3, [r7, #14]
 80060d4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80060d8:	4613      	mov	r3, r2
 80060da:	009b      	lsls	r3, r3, #2
 80060dc:	4413      	add	r3, r2
 80060de:	009b      	lsls	r3, r3, #2
 80060e0:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80060e4:	687a      	ldr	r2, [r7, #4]
 80060e6:	4413      	add	r3, r2
 80060e8:	3304      	adds	r3, #4
 80060ea:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80060ec:	7bbb      	ldrb	r3, [r7, #14]
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d002      	beq.n	80060f8 <USBD_StdEPReq+0x2d8>
 80060f2:	7bbb      	ldrb	r3, [r7, #14]
 80060f4:	2b80      	cmp	r3, #128	@ 0x80
 80060f6:	d103      	bne.n	8006100 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 80060f8:	68bb      	ldr	r3, [r7, #8]
 80060fa:	2200      	movs	r2, #0
 80060fc:	601a      	str	r2, [r3, #0]
 80060fe:	e00e      	b.n	800611e <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8006100:	7bbb      	ldrb	r3, [r7, #14]
 8006102:	4619      	mov	r1, r3
 8006104:	6878      	ldr	r0, [r7, #4]
 8006106:	f001 f869 	bl	80071dc <USBD_LL_IsStallEP>
 800610a:	4603      	mov	r3, r0
 800610c:	2b00      	cmp	r3, #0
 800610e:	d003      	beq.n	8006118 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8006110:	68bb      	ldr	r3, [r7, #8]
 8006112:	2201      	movs	r2, #1
 8006114:	601a      	str	r2, [r3, #0]
 8006116:	e002      	b.n	800611e <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8006118:	68bb      	ldr	r3, [r7, #8]
 800611a:	2200      	movs	r2, #0
 800611c:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800611e:	68bb      	ldr	r3, [r7, #8]
 8006120:	2202      	movs	r2, #2
 8006122:	4619      	mov	r1, r3
 8006124:	6878      	ldr	r0, [r7, #4]
 8006126:	f000 fbdd 	bl	80068e4 <USBD_CtlSendData>
              break;
 800612a:	e004      	b.n	8006136 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800612c:	6839      	ldr	r1, [r7, #0]
 800612e:	6878      	ldr	r0, [r7, #4]
 8006130:	f000 fb5b 	bl	80067ea <USBD_CtlError>
              break;
 8006134:	bf00      	nop
          }
          break;
 8006136:	e004      	b.n	8006142 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8006138:	6839      	ldr	r1, [r7, #0]
 800613a:	6878      	ldr	r0, [r7, #4]
 800613c:	f000 fb55 	bl	80067ea <USBD_CtlError>
          break;
 8006140:	bf00      	nop
      }
      break;
 8006142:	e005      	b.n	8006150 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8006144:	6839      	ldr	r1, [r7, #0]
 8006146:	6878      	ldr	r0, [r7, #4]
 8006148:	f000 fb4f 	bl	80067ea <USBD_CtlError>
      break;
 800614c:	e000      	b.n	8006150 <USBD_StdEPReq+0x330>
      break;
 800614e:	bf00      	nop
  }

  return ret;
 8006150:	7bfb      	ldrb	r3, [r7, #15]
}
 8006152:	4618      	mov	r0, r3
 8006154:	3710      	adds	r7, #16
 8006156:	46bd      	mov	sp, r7
 8006158:	bd80      	pop	{r7, pc}
	...

0800615c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800615c:	b580      	push	{r7, lr}
 800615e:	b084      	sub	sp, #16
 8006160:	af00      	add	r7, sp, #0
 8006162:	6078      	str	r0, [r7, #4]
 8006164:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006166:	2300      	movs	r3, #0
 8006168:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800616a:	2300      	movs	r3, #0
 800616c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800616e:	2300      	movs	r3, #0
 8006170:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8006172:	683b      	ldr	r3, [r7, #0]
 8006174:	885b      	ldrh	r3, [r3, #2]
 8006176:	0a1b      	lsrs	r3, r3, #8
 8006178:	b29b      	uxth	r3, r3
 800617a:	3b01      	subs	r3, #1
 800617c:	2b06      	cmp	r3, #6
 800617e:	f200 8128 	bhi.w	80063d2 <USBD_GetDescriptor+0x276>
 8006182:	a201      	add	r2, pc, #4	@ (adr r2, 8006188 <USBD_GetDescriptor+0x2c>)
 8006184:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006188:	080061a5 	.word	0x080061a5
 800618c:	080061bd 	.word	0x080061bd
 8006190:	080061fd 	.word	0x080061fd
 8006194:	080063d3 	.word	0x080063d3
 8006198:	080063d3 	.word	0x080063d3
 800619c:	08006373 	.word	0x08006373
 80061a0:	0800639f 	.word	0x0800639f
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	687a      	ldr	r2, [r7, #4]
 80061ae:	7c12      	ldrb	r2, [r2, #16]
 80061b0:	f107 0108 	add.w	r1, r7, #8
 80061b4:	4610      	mov	r0, r2
 80061b6:	4798      	blx	r3
 80061b8:	60f8      	str	r0, [r7, #12]
      break;
 80061ba:	e112      	b.n	80063e2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	7c1b      	ldrb	r3, [r3, #16]
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d10d      	bne.n	80061e0 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80061ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80061cc:	f107 0208 	add.w	r2, r7, #8
 80061d0:	4610      	mov	r0, r2
 80061d2:	4798      	blx	r3
 80061d4:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	3301      	adds	r3, #1
 80061da:	2202      	movs	r2, #2
 80061dc:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80061de:	e100      	b.n	80063e2 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80061e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061e8:	f107 0208 	add.w	r2, r7, #8
 80061ec:	4610      	mov	r0, r2
 80061ee:	4798      	blx	r3
 80061f0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	3301      	adds	r3, #1
 80061f6:	2202      	movs	r2, #2
 80061f8:	701a      	strb	r2, [r3, #0]
      break;
 80061fa:	e0f2      	b.n	80063e2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80061fc:	683b      	ldr	r3, [r7, #0]
 80061fe:	885b      	ldrh	r3, [r3, #2]
 8006200:	b2db      	uxtb	r3, r3
 8006202:	2b05      	cmp	r3, #5
 8006204:	f200 80ac 	bhi.w	8006360 <USBD_GetDescriptor+0x204>
 8006208:	a201      	add	r2, pc, #4	@ (adr r2, 8006210 <USBD_GetDescriptor+0xb4>)
 800620a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800620e:	bf00      	nop
 8006210:	08006229 	.word	0x08006229
 8006214:	0800625d 	.word	0x0800625d
 8006218:	08006291 	.word	0x08006291
 800621c:	080062c5 	.word	0x080062c5
 8006220:	080062f9 	.word	0x080062f9
 8006224:	0800632d 	.word	0x0800632d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800622e:	685b      	ldr	r3, [r3, #4]
 8006230:	2b00      	cmp	r3, #0
 8006232:	d00b      	beq.n	800624c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800623a:	685b      	ldr	r3, [r3, #4]
 800623c:	687a      	ldr	r2, [r7, #4]
 800623e:	7c12      	ldrb	r2, [r2, #16]
 8006240:	f107 0108 	add.w	r1, r7, #8
 8006244:	4610      	mov	r0, r2
 8006246:	4798      	blx	r3
 8006248:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800624a:	e091      	b.n	8006370 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800624c:	6839      	ldr	r1, [r7, #0]
 800624e:	6878      	ldr	r0, [r7, #4]
 8006250:	f000 facb 	bl	80067ea <USBD_CtlError>
            err++;
 8006254:	7afb      	ldrb	r3, [r7, #11]
 8006256:	3301      	adds	r3, #1
 8006258:	72fb      	strb	r3, [r7, #11]
          break;
 800625a:	e089      	b.n	8006370 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006262:	689b      	ldr	r3, [r3, #8]
 8006264:	2b00      	cmp	r3, #0
 8006266:	d00b      	beq.n	8006280 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800626e:	689b      	ldr	r3, [r3, #8]
 8006270:	687a      	ldr	r2, [r7, #4]
 8006272:	7c12      	ldrb	r2, [r2, #16]
 8006274:	f107 0108 	add.w	r1, r7, #8
 8006278:	4610      	mov	r0, r2
 800627a:	4798      	blx	r3
 800627c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800627e:	e077      	b.n	8006370 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006280:	6839      	ldr	r1, [r7, #0]
 8006282:	6878      	ldr	r0, [r7, #4]
 8006284:	f000 fab1 	bl	80067ea <USBD_CtlError>
            err++;
 8006288:	7afb      	ldrb	r3, [r7, #11]
 800628a:	3301      	adds	r3, #1
 800628c:	72fb      	strb	r3, [r7, #11]
          break;
 800628e:	e06f      	b.n	8006370 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006296:	68db      	ldr	r3, [r3, #12]
 8006298:	2b00      	cmp	r3, #0
 800629a:	d00b      	beq.n	80062b4 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80062a2:	68db      	ldr	r3, [r3, #12]
 80062a4:	687a      	ldr	r2, [r7, #4]
 80062a6:	7c12      	ldrb	r2, [r2, #16]
 80062a8:	f107 0108 	add.w	r1, r7, #8
 80062ac:	4610      	mov	r0, r2
 80062ae:	4798      	blx	r3
 80062b0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80062b2:	e05d      	b.n	8006370 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80062b4:	6839      	ldr	r1, [r7, #0]
 80062b6:	6878      	ldr	r0, [r7, #4]
 80062b8:	f000 fa97 	bl	80067ea <USBD_CtlError>
            err++;
 80062bc:	7afb      	ldrb	r3, [r7, #11]
 80062be:	3301      	adds	r3, #1
 80062c0:	72fb      	strb	r3, [r7, #11]
          break;
 80062c2:	e055      	b.n	8006370 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80062ca:	691b      	ldr	r3, [r3, #16]
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d00b      	beq.n	80062e8 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80062d6:	691b      	ldr	r3, [r3, #16]
 80062d8:	687a      	ldr	r2, [r7, #4]
 80062da:	7c12      	ldrb	r2, [r2, #16]
 80062dc:	f107 0108 	add.w	r1, r7, #8
 80062e0:	4610      	mov	r0, r2
 80062e2:	4798      	blx	r3
 80062e4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80062e6:	e043      	b.n	8006370 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80062e8:	6839      	ldr	r1, [r7, #0]
 80062ea:	6878      	ldr	r0, [r7, #4]
 80062ec:	f000 fa7d 	bl	80067ea <USBD_CtlError>
            err++;
 80062f0:	7afb      	ldrb	r3, [r7, #11]
 80062f2:	3301      	adds	r3, #1
 80062f4:	72fb      	strb	r3, [r7, #11]
          break;
 80062f6:	e03b      	b.n	8006370 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80062fe:	695b      	ldr	r3, [r3, #20]
 8006300:	2b00      	cmp	r3, #0
 8006302:	d00b      	beq.n	800631c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800630a:	695b      	ldr	r3, [r3, #20]
 800630c:	687a      	ldr	r2, [r7, #4]
 800630e:	7c12      	ldrb	r2, [r2, #16]
 8006310:	f107 0108 	add.w	r1, r7, #8
 8006314:	4610      	mov	r0, r2
 8006316:	4798      	blx	r3
 8006318:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800631a:	e029      	b.n	8006370 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800631c:	6839      	ldr	r1, [r7, #0]
 800631e:	6878      	ldr	r0, [r7, #4]
 8006320:	f000 fa63 	bl	80067ea <USBD_CtlError>
            err++;
 8006324:	7afb      	ldrb	r3, [r7, #11]
 8006326:	3301      	adds	r3, #1
 8006328:	72fb      	strb	r3, [r7, #11]
          break;
 800632a:	e021      	b.n	8006370 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006332:	699b      	ldr	r3, [r3, #24]
 8006334:	2b00      	cmp	r3, #0
 8006336:	d00b      	beq.n	8006350 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800633e:	699b      	ldr	r3, [r3, #24]
 8006340:	687a      	ldr	r2, [r7, #4]
 8006342:	7c12      	ldrb	r2, [r2, #16]
 8006344:	f107 0108 	add.w	r1, r7, #8
 8006348:	4610      	mov	r0, r2
 800634a:	4798      	blx	r3
 800634c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800634e:	e00f      	b.n	8006370 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006350:	6839      	ldr	r1, [r7, #0]
 8006352:	6878      	ldr	r0, [r7, #4]
 8006354:	f000 fa49 	bl	80067ea <USBD_CtlError>
            err++;
 8006358:	7afb      	ldrb	r3, [r7, #11]
 800635a:	3301      	adds	r3, #1
 800635c:	72fb      	strb	r3, [r7, #11]
          break;
 800635e:	e007      	b.n	8006370 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8006360:	6839      	ldr	r1, [r7, #0]
 8006362:	6878      	ldr	r0, [r7, #4]
 8006364:	f000 fa41 	bl	80067ea <USBD_CtlError>
          err++;
 8006368:	7afb      	ldrb	r3, [r7, #11]
 800636a:	3301      	adds	r3, #1
 800636c:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800636e:	bf00      	nop
      }
      break;
 8006370:	e037      	b.n	80063e2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	7c1b      	ldrb	r3, [r3, #16]
 8006376:	2b00      	cmp	r3, #0
 8006378:	d109      	bne.n	800638e <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006380:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006382:	f107 0208 	add.w	r2, r7, #8
 8006386:	4610      	mov	r0, r2
 8006388:	4798      	blx	r3
 800638a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800638c:	e029      	b.n	80063e2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800638e:	6839      	ldr	r1, [r7, #0]
 8006390:	6878      	ldr	r0, [r7, #4]
 8006392:	f000 fa2a 	bl	80067ea <USBD_CtlError>
        err++;
 8006396:	7afb      	ldrb	r3, [r7, #11]
 8006398:	3301      	adds	r3, #1
 800639a:	72fb      	strb	r3, [r7, #11]
      break;
 800639c:	e021      	b.n	80063e2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	7c1b      	ldrb	r3, [r3, #16]
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d10d      	bne.n	80063c2 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80063ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80063ae:	f107 0208 	add.w	r2, r7, #8
 80063b2:	4610      	mov	r0, r2
 80063b4:	4798      	blx	r3
 80063b6:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	3301      	adds	r3, #1
 80063bc:	2207      	movs	r2, #7
 80063be:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80063c0:	e00f      	b.n	80063e2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80063c2:	6839      	ldr	r1, [r7, #0]
 80063c4:	6878      	ldr	r0, [r7, #4]
 80063c6:	f000 fa10 	bl	80067ea <USBD_CtlError>
        err++;
 80063ca:	7afb      	ldrb	r3, [r7, #11]
 80063cc:	3301      	adds	r3, #1
 80063ce:	72fb      	strb	r3, [r7, #11]
      break;
 80063d0:	e007      	b.n	80063e2 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80063d2:	6839      	ldr	r1, [r7, #0]
 80063d4:	6878      	ldr	r0, [r7, #4]
 80063d6:	f000 fa08 	bl	80067ea <USBD_CtlError>
      err++;
 80063da:	7afb      	ldrb	r3, [r7, #11]
 80063dc:	3301      	adds	r3, #1
 80063de:	72fb      	strb	r3, [r7, #11]
      break;
 80063e0:	bf00      	nop
  }

  if (err != 0U)
 80063e2:	7afb      	ldrb	r3, [r7, #11]
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d11e      	bne.n	8006426 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 80063e8:	683b      	ldr	r3, [r7, #0]
 80063ea:	88db      	ldrh	r3, [r3, #6]
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d016      	beq.n	800641e <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 80063f0:	893b      	ldrh	r3, [r7, #8]
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d00e      	beq.n	8006414 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 80063f6:	683b      	ldr	r3, [r7, #0]
 80063f8:	88da      	ldrh	r2, [r3, #6]
 80063fa:	893b      	ldrh	r3, [r7, #8]
 80063fc:	4293      	cmp	r3, r2
 80063fe:	bf28      	it	cs
 8006400:	4613      	movcs	r3, r2
 8006402:	b29b      	uxth	r3, r3
 8006404:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8006406:	893b      	ldrh	r3, [r7, #8]
 8006408:	461a      	mov	r2, r3
 800640a:	68f9      	ldr	r1, [r7, #12]
 800640c:	6878      	ldr	r0, [r7, #4]
 800640e:	f000 fa69 	bl	80068e4 <USBD_CtlSendData>
 8006412:	e009      	b.n	8006428 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8006414:	6839      	ldr	r1, [r7, #0]
 8006416:	6878      	ldr	r0, [r7, #4]
 8006418:	f000 f9e7 	bl	80067ea <USBD_CtlError>
 800641c:	e004      	b.n	8006428 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800641e:	6878      	ldr	r0, [r7, #4]
 8006420:	f000 faba 	bl	8006998 <USBD_CtlSendStatus>
 8006424:	e000      	b.n	8006428 <USBD_GetDescriptor+0x2cc>
    return;
 8006426:	bf00      	nop
  }
}
 8006428:	3710      	adds	r7, #16
 800642a:	46bd      	mov	sp, r7
 800642c:	bd80      	pop	{r7, pc}
 800642e:	bf00      	nop

08006430 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006430:	b580      	push	{r7, lr}
 8006432:	b084      	sub	sp, #16
 8006434:	af00      	add	r7, sp, #0
 8006436:	6078      	str	r0, [r7, #4]
 8006438:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800643a:	683b      	ldr	r3, [r7, #0]
 800643c:	889b      	ldrh	r3, [r3, #4]
 800643e:	2b00      	cmp	r3, #0
 8006440:	d131      	bne.n	80064a6 <USBD_SetAddress+0x76>
 8006442:	683b      	ldr	r3, [r7, #0]
 8006444:	88db      	ldrh	r3, [r3, #6]
 8006446:	2b00      	cmp	r3, #0
 8006448:	d12d      	bne.n	80064a6 <USBD_SetAddress+0x76>
 800644a:	683b      	ldr	r3, [r7, #0]
 800644c:	885b      	ldrh	r3, [r3, #2]
 800644e:	2b7f      	cmp	r3, #127	@ 0x7f
 8006450:	d829      	bhi.n	80064a6 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8006452:	683b      	ldr	r3, [r7, #0]
 8006454:	885b      	ldrh	r3, [r3, #2]
 8006456:	b2db      	uxtb	r3, r3
 8006458:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800645c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006464:	b2db      	uxtb	r3, r3
 8006466:	2b03      	cmp	r3, #3
 8006468:	d104      	bne.n	8006474 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800646a:	6839      	ldr	r1, [r7, #0]
 800646c:	6878      	ldr	r0, [r7, #4]
 800646e:	f000 f9bc 	bl	80067ea <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006472:	e01d      	b.n	80064b0 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	7bfa      	ldrb	r2, [r7, #15]
 8006478:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800647c:	7bfb      	ldrb	r3, [r7, #15]
 800647e:	4619      	mov	r1, r3
 8006480:	6878      	ldr	r0, [r7, #4]
 8006482:	f000 fed7 	bl	8007234 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8006486:	6878      	ldr	r0, [r7, #4]
 8006488:	f000 fa86 	bl	8006998 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800648c:	7bfb      	ldrb	r3, [r7, #15]
 800648e:	2b00      	cmp	r3, #0
 8006490:	d004      	beq.n	800649c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	2202      	movs	r2, #2
 8006496:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800649a:	e009      	b.n	80064b0 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	2201      	movs	r2, #1
 80064a0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80064a4:	e004      	b.n	80064b0 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80064a6:	6839      	ldr	r1, [r7, #0]
 80064a8:	6878      	ldr	r0, [r7, #4]
 80064aa:	f000 f99e 	bl	80067ea <USBD_CtlError>
  }
}
 80064ae:	bf00      	nop
 80064b0:	bf00      	nop
 80064b2:	3710      	adds	r7, #16
 80064b4:	46bd      	mov	sp, r7
 80064b6:	bd80      	pop	{r7, pc}

080064b8 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80064b8:	b580      	push	{r7, lr}
 80064ba:	b084      	sub	sp, #16
 80064bc:	af00      	add	r7, sp, #0
 80064be:	6078      	str	r0, [r7, #4]
 80064c0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80064c2:	2300      	movs	r3, #0
 80064c4:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80064c6:	683b      	ldr	r3, [r7, #0]
 80064c8:	885b      	ldrh	r3, [r3, #2]
 80064ca:	b2da      	uxtb	r2, r3
 80064cc:	4b4e      	ldr	r3, [pc, #312]	@ (8006608 <USBD_SetConfig+0x150>)
 80064ce:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80064d0:	4b4d      	ldr	r3, [pc, #308]	@ (8006608 <USBD_SetConfig+0x150>)
 80064d2:	781b      	ldrb	r3, [r3, #0]
 80064d4:	2b01      	cmp	r3, #1
 80064d6:	d905      	bls.n	80064e4 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80064d8:	6839      	ldr	r1, [r7, #0]
 80064da:	6878      	ldr	r0, [r7, #4]
 80064dc:	f000 f985 	bl	80067ea <USBD_CtlError>
    return USBD_FAIL;
 80064e0:	2303      	movs	r3, #3
 80064e2:	e08c      	b.n	80065fe <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80064ea:	b2db      	uxtb	r3, r3
 80064ec:	2b02      	cmp	r3, #2
 80064ee:	d002      	beq.n	80064f6 <USBD_SetConfig+0x3e>
 80064f0:	2b03      	cmp	r3, #3
 80064f2:	d029      	beq.n	8006548 <USBD_SetConfig+0x90>
 80064f4:	e075      	b.n	80065e2 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80064f6:	4b44      	ldr	r3, [pc, #272]	@ (8006608 <USBD_SetConfig+0x150>)
 80064f8:	781b      	ldrb	r3, [r3, #0]
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d020      	beq.n	8006540 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 80064fe:	4b42      	ldr	r3, [pc, #264]	@ (8006608 <USBD_SetConfig+0x150>)
 8006500:	781b      	ldrb	r3, [r3, #0]
 8006502:	461a      	mov	r2, r3
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006508:	4b3f      	ldr	r3, [pc, #252]	@ (8006608 <USBD_SetConfig+0x150>)
 800650a:	781b      	ldrb	r3, [r3, #0]
 800650c:	4619      	mov	r1, r3
 800650e:	6878      	ldr	r0, [r7, #4]
 8006510:	f7fe ffe3 	bl	80054da <USBD_SetClassConfig>
 8006514:	4603      	mov	r3, r0
 8006516:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8006518:	7bfb      	ldrb	r3, [r7, #15]
 800651a:	2b00      	cmp	r3, #0
 800651c:	d008      	beq.n	8006530 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800651e:	6839      	ldr	r1, [r7, #0]
 8006520:	6878      	ldr	r0, [r7, #4]
 8006522:	f000 f962 	bl	80067ea <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	2202      	movs	r2, #2
 800652a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800652e:	e065      	b.n	80065fc <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8006530:	6878      	ldr	r0, [r7, #4]
 8006532:	f000 fa31 	bl	8006998 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	2203      	movs	r2, #3
 800653a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800653e:	e05d      	b.n	80065fc <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8006540:	6878      	ldr	r0, [r7, #4]
 8006542:	f000 fa29 	bl	8006998 <USBD_CtlSendStatus>
      break;
 8006546:	e059      	b.n	80065fc <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8006548:	4b2f      	ldr	r3, [pc, #188]	@ (8006608 <USBD_SetConfig+0x150>)
 800654a:	781b      	ldrb	r3, [r3, #0]
 800654c:	2b00      	cmp	r3, #0
 800654e:	d112      	bne.n	8006576 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	2202      	movs	r2, #2
 8006554:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8006558:	4b2b      	ldr	r3, [pc, #172]	@ (8006608 <USBD_SetConfig+0x150>)
 800655a:	781b      	ldrb	r3, [r3, #0]
 800655c:	461a      	mov	r2, r3
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006562:	4b29      	ldr	r3, [pc, #164]	@ (8006608 <USBD_SetConfig+0x150>)
 8006564:	781b      	ldrb	r3, [r3, #0]
 8006566:	4619      	mov	r1, r3
 8006568:	6878      	ldr	r0, [r7, #4]
 800656a:	f7fe ffd2 	bl	8005512 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800656e:	6878      	ldr	r0, [r7, #4]
 8006570:	f000 fa12 	bl	8006998 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006574:	e042      	b.n	80065fc <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8006576:	4b24      	ldr	r3, [pc, #144]	@ (8006608 <USBD_SetConfig+0x150>)
 8006578:	781b      	ldrb	r3, [r3, #0]
 800657a:	461a      	mov	r2, r3
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	685b      	ldr	r3, [r3, #4]
 8006580:	429a      	cmp	r2, r3
 8006582:	d02a      	beq.n	80065da <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	685b      	ldr	r3, [r3, #4]
 8006588:	b2db      	uxtb	r3, r3
 800658a:	4619      	mov	r1, r3
 800658c:	6878      	ldr	r0, [r7, #4]
 800658e:	f7fe ffc0 	bl	8005512 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8006592:	4b1d      	ldr	r3, [pc, #116]	@ (8006608 <USBD_SetConfig+0x150>)
 8006594:	781b      	ldrb	r3, [r3, #0]
 8006596:	461a      	mov	r2, r3
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800659c:	4b1a      	ldr	r3, [pc, #104]	@ (8006608 <USBD_SetConfig+0x150>)
 800659e:	781b      	ldrb	r3, [r3, #0]
 80065a0:	4619      	mov	r1, r3
 80065a2:	6878      	ldr	r0, [r7, #4]
 80065a4:	f7fe ff99 	bl	80054da <USBD_SetClassConfig>
 80065a8:	4603      	mov	r3, r0
 80065aa:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80065ac:	7bfb      	ldrb	r3, [r7, #15]
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d00f      	beq.n	80065d2 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 80065b2:	6839      	ldr	r1, [r7, #0]
 80065b4:	6878      	ldr	r0, [r7, #4]
 80065b6:	f000 f918 	bl	80067ea <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	685b      	ldr	r3, [r3, #4]
 80065be:	b2db      	uxtb	r3, r3
 80065c0:	4619      	mov	r1, r3
 80065c2:	6878      	ldr	r0, [r7, #4]
 80065c4:	f7fe ffa5 	bl	8005512 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	2202      	movs	r2, #2
 80065cc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 80065d0:	e014      	b.n	80065fc <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80065d2:	6878      	ldr	r0, [r7, #4]
 80065d4:	f000 f9e0 	bl	8006998 <USBD_CtlSendStatus>
      break;
 80065d8:	e010      	b.n	80065fc <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80065da:	6878      	ldr	r0, [r7, #4]
 80065dc:	f000 f9dc 	bl	8006998 <USBD_CtlSendStatus>
      break;
 80065e0:	e00c      	b.n	80065fc <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 80065e2:	6839      	ldr	r1, [r7, #0]
 80065e4:	6878      	ldr	r0, [r7, #4]
 80065e6:	f000 f900 	bl	80067ea <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80065ea:	4b07      	ldr	r3, [pc, #28]	@ (8006608 <USBD_SetConfig+0x150>)
 80065ec:	781b      	ldrb	r3, [r3, #0]
 80065ee:	4619      	mov	r1, r3
 80065f0:	6878      	ldr	r0, [r7, #4]
 80065f2:	f7fe ff8e 	bl	8005512 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80065f6:	2303      	movs	r3, #3
 80065f8:	73fb      	strb	r3, [r7, #15]
      break;
 80065fa:	bf00      	nop
  }

  return ret;
 80065fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80065fe:	4618      	mov	r0, r3
 8006600:	3710      	adds	r7, #16
 8006602:	46bd      	mov	sp, r7
 8006604:	bd80      	pop	{r7, pc}
 8006606:	bf00      	nop
 8006608:	200005b0 	.word	0x200005b0

0800660c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800660c:	b580      	push	{r7, lr}
 800660e:	b082      	sub	sp, #8
 8006610:	af00      	add	r7, sp, #0
 8006612:	6078      	str	r0, [r7, #4]
 8006614:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8006616:	683b      	ldr	r3, [r7, #0]
 8006618:	88db      	ldrh	r3, [r3, #6]
 800661a:	2b01      	cmp	r3, #1
 800661c:	d004      	beq.n	8006628 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800661e:	6839      	ldr	r1, [r7, #0]
 8006620:	6878      	ldr	r0, [r7, #4]
 8006622:	f000 f8e2 	bl	80067ea <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8006626:	e023      	b.n	8006670 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800662e:	b2db      	uxtb	r3, r3
 8006630:	2b02      	cmp	r3, #2
 8006632:	dc02      	bgt.n	800663a <USBD_GetConfig+0x2e>
 8006634:	2b00      	cmp	r3, #0
 8006636:	dc03      	bgt.n	8006640 <USBD_GetConfig+0x34>
 8006638:	e015      	b.n	8006666 <USBD_GetConfig+0x5a>
 800663a:	2b03      	cmp	r3, #3
 800663c:	d00b      	beq.n	8006656 <USBD_GetConfig+0x4a>
 800663e:	e012      	b.n	8006666 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	2200      	movs	r2, #0
 8006644:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	3308      	adds	r3, #8
 800664a:	2201      	movs	r2, #1
 800664c:	4619      	mov	r1, r3
 800664e:	6878      	ldr	r0, [r7, #4]
 8006650:	f000 f948 	bl	80068e4 <USBD_CtlSendData>
        break;
 8006654:	e00c      	b.n	8006670 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	3304      	adds	r3, #4
 800665a:	2201      	movs	r2, #1
 800665c:	4619      	mov	r1, r3
 800665e:	6878      	ldr	r0, [r7, #4]
 8006660:	f000 f940 	bl	80068e4 <USBD_CtlSendData>
        break;
 8006664:	e004      	b.n	8006670 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8006666:	6839      	ldr	r1, [r7, #0]
 8006668:	6878      	ldr	r0, [r7, #4]
 800666a:	f000 f8be 	bl	80067ea <USBD_CtlError>
        break;
 800666e:	bf00      	nop
}
 8006670:	bf00      	nop
 8006672:	3708      	adds	r7, #8
 8006674:	46bd      	mov	sp, r7
 8006676:	bd80      	pop	{r7, pc}

08006678 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006678:	b580      	push	{r7, lr}
 800667a:	b082      	sub	sp, #8
 800667c:	af00      	add	r7, sp, #0
 800667e:	6078      	str	r0, [r7, #4]
 8006680:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006688:	b2db      	uxtb	r3, r3
 800668a:	3b01      	subs	r3, #1
 800668c:	2b02      	cmp	r3, #2
 800668e:	d81e      	bhi.n	80066ce <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8006690:	683b      	ldr	r3, [r7, #0]
 8006692:	88db      	ldrh	r3, [r3, #6]
 8006694:	2b02      	cmp	r3, #2
 8006696:	d004      	beq.n	80066a2 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8006698:	6839      	ldr	r1, [r7, #0]
 800669a:	6878      	ldr	r0, [r7, #4]
 800669c:	f000 f8a5 	bl	80067ea <USBD_CtlError>
        break;
 80066a0:	e01a      	b.n	80066d8 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
#else
      pdev->dev_config_status = 0U;
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	2200      	movs	r2, #0
 80066a6:	60da      	str	r2, [r3, #12]
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d005      	beq.n	80066be <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	68db      	ldr	r3, [r3, #12]
 80066b6:	f043 0202 	orr.w	r2, r3, #2
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	330c      	adds	r3, #12
 80066c2:	2202      	movs	r2, #2
 80066c4:	4619      	mov	r1, r3
 80066c6:	6878      	ldr	r0, [r7, #4]
 80066c8:	f000 f90c 	bl	80068e4 <USBD_CtlSendData>
      break;
 80066cc:	e004      	b.n	80066d8 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80066ce:	6839      	ldr	r1, [r7, #0]
 80066d0:	6878      	ldr	r0, [r7, #4]
 80066d2:	f000 f88a 	bl	80067ea <USBD_CtlError>
      break;
 80066d6:	bf00      	nop
  }
}
 80066d8:	bf00      	nop
 80066da:	3708      	adds	r7, #8
 80066dc:	46bd      	mov	sp, r7
 80066de:	bd80      	pop	{r7, pc}

080066e0 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80066e0:	b580      	push	{r7, lr}
 80066e2:	b082      	sub	sp, #8
 80066e4:	af00      	add	r7, sp, #0
 80066e6:	6078      	str	r0, [r7, #4]
 80066e8:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80066ea:	683b      	ldr	r3, [r7, #0]
 80066ec:	885b      	ldrh	r3, [r3, #2]
 80066ee:	2b01      	cmp	r3, #1
 80066f0:	d107      	bne.n	8006702 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	2201      	movs	r2, #1
 80066f6:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80066fa:	6878      	ldr	r0, [r7, #4]
 80066fc:	f000 f94c 	bl	8006998 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8006700:	e013      	b.n	800672a <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8006702:	683b      	ldr	r3, [r7, #0]
 8006704:	885b      	ldrh	r3, [r3, #2]
 8006706:	2b02      	cmp	r3, #2
 8006708:	d10b      	bne.n	8006722 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800670a:	683b      	ldr	r3, [r7, #0]
 800670c:	889b      	ldrh	r3, [r3, #4]
 800670e:	0a1b      	lsrs	r3, r3, #8
 8006710:	b29b      	uxth	r3, r3
 8006712:	b2da      	uxtb	r2, r3
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800671a:	6878      	ldr	r0, [r7, #4]
 800671c:	f000 f93c 	bl	8006998 <USBD_CtlSendStatus>
}
 8006720:	e003      	b.n	800672a <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8006722:	6839      	ldr	r1, [r7, #0]
 8006724:	6878      	ldr	r0, [r7, #4]
 8006726:	f000 f860 	bl	80067ea <USBD_CtlError>
}
 800672a:	bf00      	nop
 800672c:	3708      	adds	r7, #8
 800672e:	46bd      	mov	sp, r7
 8006730:	bd80      	pop	{r7, pc}

08006732 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006732:	b580      	push	{r7, lr}
 8006734:	b082      	sub	sp, #8
 8006736:	af00      	add	r7, sp, #0
 8006738:	6078      	str	r0, [r7, #4]
 800673a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006742:	b2db      	uxtb	r3, r3
 8006744:	3b01      	subs	r3, #1
 8006746:	2b02      	cmp	r3, #2
 8006748:	d80b      	bhi.n	8006762 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800674a:	683b      	ldr	r3, [r7, #0]
 800674c:	885b      	ldrh	r3, [r3, #2]
 800674e:	2b01      	cmp	r3, #1
 8006750:	d10c      	bne.n	800676c <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	2200      	movs	r2, #0
 8006756:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800675a:	6878      	ldr	r0, [r7, #4]
 800675c:	f000 f91c 	bl	8006998 <USBD_CtlSendStatus>
      }
      break;
 8006760:	e004      	b.n	800676c <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8006762:	6839      	ldr	r1, [r7, #0]
 8006764:	6878      	ldr	r0, [r7, #4]
 8006766:	f000 f840 	bl	80067ea <USBD_CtlError>
      break;
 800676a:	e000      	b.n	800676e <USBD_ClrFeature+0x3c>
      break;
 800676c:	bf00      	nop
  }
}
 800676e:	bf00      	nop
 8006770:	3708      	adds	r7, #8
 8006772:	46bd      	mov	sp, r7
 8006774:	bd80      	pop	{r7, pc}

08006776 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8006776:	b580      	push	{r7, lr}
 8006778:	b084      	sub	sp, #16
 800677a:	af00      	add	r7, sp, #0
 800677c:	6078      	str	r0, [r7, #4]
 800677e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8006780:	683b      	ldr	r3, [r7, #0]
 8006782:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	781a      	ldrb	r2, [r3, #0]
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	3301      	adds	r3, #1
 8006790:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	781a      	ldrb	r2, [r3, #0]
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	3301      	adds	r3, #1
 800679e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80067a0:	68f8      	ldr	r0, [r7, #12]
 80067a2:	f7ff fa40 	bl	8005c26 <SWAPBYTE>
 80067a6:	4603      	mov	r3, r0
 80067a8:	461a      	mov	r2, r3
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	3301      	adds	r3, #1
 80067b2:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	3301      	adds	r3, #1
 80067b8:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80067ba:	68f8      	ldr	r0, [r7, #12]
 80067bc:	f7ff fa33 	bl	8005c26 <SWAPBYTE>
 80067c0:	4603      	mov	r3, r0
 80067c2:	461a      	mov	r2, r3
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	3301      	adds	r3, #1
 80067cc:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	3301      	adds	r3, #1
 80067d2:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80067d4:	68f8      	ldr	r0, [r7, #12]
 80067d6:	f7ff fa26 	bl	8005c26 <SWAPBYTE>
 80067da:	4603      	mov	r3, r0
 80067dc:	461a      	mov	r2, r3
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	80da      	strh	r2, [r3, #6]
}
 80067e2:	bf00      	nop
 80067e4:	3710      	adds	r7, #16
 80067e6:	46bd      	mov	sp, r7
 80067e8:	bd80      	pop	{r7, pc}

080067ea <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80067ea:	b580      	push	{r7, lr}
 80067ec:	b082      	sub	sp, #8
 80067ee:	af00      	add	r7, sp, #0
 80067f0:	6078      	str	r0, [r7, #4]
 80067f2:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80067f4:	2180      	movs	r1, #128	@ 0x80
 80067f6:	6878      	ldr	r0, [r7, #4]
 80067f8:	f000 fcb2 	bl	8007160 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80067fc:	2100      	movs	r1, #0
 80067fe:	6878      	ldr	r0, [r7, #4]
 8006800:	f000 fcae 	bl	8007160 <USBD_LL_StallEP>
}
 8006804:	bf00      	nop
 8006806:	3708      	adds	r7, #8
 8006808:	46bd      	mov	sp, r7
 800680a:	bd80      	pop	{r7, pc}

0800680c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800680c:	b580      	push	{r7, lr}
 800680e:	b086      	sub	sp, #24
 8006810:	af00      	add	r7, sp, #0
 8006812:	60f8      	str	r0, [r7, #12]
 8006814:	60b9      	str	r1, [r7, #8]
 8006816:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8006818:	2300      	movs	r3, #0
 800681a:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	2b00      	cmp	r3, #0
 8006820:	d042      	beq.n	80068a8 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 8006826:	6938      	ldr	r0, [r7, #16]
 8006828:	f000 f842 	bl	80068b0 <USBD_GetLen>
 800682c:	4603      	mov	r3, r0
 800682e:	3301      	adds	r3, #1
 8006830:	005b      	lsls	r3, r3, #1
 8006832:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006836:	d808      	bhi.n	800684a <USBD_GetString+0x3e>
 8006838:	6938      	ldr	r0, [r7, #16]
 800683a:	f000 f839 	bl	80068b0 <USBD_GetLen>
 800683e:	4603      	mov	r3, r0
 8006840:	3301      	adds	r3, #1
 8006842:	b29b      	uxth	r3, r3
 8006844:	005b      	lsls	r3, r3, #1
 8006846:	b29a      	uxth	r2, r3
 8006848:	e001      	b.n	800684e <USBD_GetString+0x42>
 800684a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8006852:	7dfb      	ldrb	r3, [r7, #23]
 8006854:	68ba      	ldr	r2, [r7, #8]
 8006856:	4413      	add	r3, r2
 8006858:	687a      	ldr	r2, [r7, #4]
 800685a:	7812      	ldrb	r2, [r2, #0]
 800685c:	701a      	strb	r2, [r3, #0]
  idx++;
 800685e:	7dfb      	ldrb	r3, [r7, #23]
 8006860:	3301      	adds	r3, #1
 8006862:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8006864:	7dfb      	ldrb	r3, [r7, #23]
 8006866:	68ba      	ldr	r2, [r7, #8]
 8006868:	4413      	add	r3, r2
 800686a:	2203      	movs	r2, #3
 800686c:	701a      	strb	r2, [r3, #0]
  idx++;
 800686e:	7dfb      	ldrb	r3, [r7, #23]
 8006870:	3301      	adds	r3, #1
 8006872:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8006874:	e013      	b.n	800689e <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 8006876:	7dfb      	ldrb	r3, [r7, #23]
 8006878:	68ba      	ldr	r2, [r7, #8]
 800687a:	4413      	add	r3, r2
 800687c:	693a      	ldr	r2, [r7, #16]
 800687e:	7812      	ldrb	r2, [r2, #0]
 8006880:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8006882:	693b      	ldr	r3, [r7, #16]
 8006884:	3301      	adds	r3, #1
 8006886:	613b      	str	r3, [r7, #16]
    idx++;
 8006888:	7dfb      	ldrb	r3, [r7, #23]
 800688a:	3301      	adds	r3, #1
 800688c:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800688e:	7dfb      	ldrb	r3, [r7, #23]
 8006890:	68ba      	ldr	r2, [r7, #8]
 8006892:	4413      	add	r3, r2
 8006894:	2200      	movs	r2, #0
 8006896:	701a      	strb	r2, [r3, #0]
    idx++;
 8006898:	7dfb      	ldrb	r3, [r7, #23]
 800689a:	3301      	adds	r3, #1
 800689c:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800689e:	693b      	ldr	r3, [r7, #16]
 80068a0:	781b      	ldrb	r3, [r3, #0]
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d1e7      	bne.n	8006876 <USBD_GetString+0x6a>
 80068a6:	e000      	b.n	80068aa <USBD_GetString+0x9e>
    return;
 80068a8:	bf00      	nop
  }
}
 80068aa:	3718      	adds	r7, #24
 80068ac:	46bd      	mov	sp, r7
 80068ae:	bd80      	pop	{r7, pc}

080068b0 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80068b0:	b480      	push	{r7}
 80068b2:	b085      	sub	sp, #20
 80068b4:	af00      	add	r7, sp, #0
 80068b6:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80068b8:	2300      	movs	r3, #0
 80068ba:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80068c0:	e005      	b.n	80068ce <USBD_GetLen+0x1e>
  {
    len++;
 80068c2:	7bfb      	ldrb	r3, [r7, #15]
 80068c4:	3301      	adds	r3, #1
 80068c6:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80068c8:	68bb      	ldr	r3, [r7, #8]
 80068ca:	3301      	adds	r3, #1
 80068cc:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80068ce:	68bb      	ldr	r3, [r7, #8]
 80068d0:	781b      	ldrb	r3, [r3, #0]
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d1f5      	bne.n	80068c2 <USBD_GetLen+0x12>
  }

  return len;
 80068d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80068d8:	4618      	mov	r0, r3
 80068da:	3714      	adds	r7, #20
 80068dc:	46bd      	mov	sp, r7
 80068de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e2:	4770      	bx	lr

080068e4 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80068e4:	b580      	push	{r7, lr}
 80068e6:	b084      	sub	sp, #16
 80068e8:	af00      	add	r7, sp, #0
 80068ea:	60f8      	str	r0, [r7, #12]
 80068ec:	60b9      	str	r1, [r7, #8]
 80068ee:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	2202      	movs	r2, #2
 80068f4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	687a      	ldr	r2, [r7, #4]
 80068fc:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	687a      	ldr	r2, [r7, #4]
 8006902:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	68ba      	ldr	r2, [r7, #8]
 8006908:	2100      	movs	r1, #0
 800690a:	68f8      	ldr	r0, [r7, #12]
 800690c:	f000 fcb1 	bl	8007272 <USBD_LL_Transmit>

  return USBD_OK;
 8006910:	2300      	movs	r3, #0
}
 8006912:	4618      	mov	r0, r3
 8006914:	3710      	adds	r7, #16
 8006916:	46bd      	mov	sp, r7
 8006918:	bd80      	pop	{r7, pc}

0800691a <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800691a:	b580      	push	{r7, lr}
 800691c:	b084      	sub	sp, #16
 800691e:	af00      	add	r7, sp, #0
 8006920:	60f8      	str	r0, [r7, #12]
 8006922:	60b9      	str	r1, [r7, #8]
 8006924:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	68ba      	ldr	r2, [r7, #8]
 800692a:	2100      	movs	r1, #0
 800692c:	68f8      	ldr	r0, [r7, #12]
 800692e:	f000 fca0 	bl	8007272 <USBD_LL_Transmit>

  return USBD_OK;
 8006932:	2300      	movs	r3, #0
}
 8006934:	4618      	mov	r0, r3
 8006936:	3710      	adds	r7, #16
 8006938:	46bd      	mov	sp, r7
 800693a:	bd80      	pop	{r7, pc}

0800693c <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800693c:	b580      	push	{r7, lr}
 800693e:	b084      	sub	sp, #16
 8006940:	af00      	add	r7, sp, #0
 8006942:	60f8      	str	r0, [r7, #12]
 8006944:	60b9      	str	r1, [r7, #8]
 8006946:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	2203      	movs	r2, #3
 800694c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	687a      	ldr	r2, [r7, #4]
 8006954:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	687a      	ldr	r2, [r7, #4]
 800695c:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	68ba      	ldr	r2, [r7, #8]
 8006964:	2100      	movs	r1, #0
 8006966:	68f8      	ldr	r0, [r7, #12]
 8006968:	f000 fca4 	bl	80072b4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800696c:	2300      	movs	r3, #0
}
 800696e:	4618      	mov	r0, r3
 8006970:	3710      	adds	r7, #16
 8006972:	46bd      	mov	sp, r7
 8006974:	bd80      	pop	{r7, pc}

08006976 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8006976:	b580      	push	{r7, lr}
 8006978:	b084      	sub	sp, #16
 800697a:	af00      	add	r7, sp, #0
 800697c:	60f8      	str	r0, [r7, #12]
 800697e:	60b9      	str	r1, [r7, #8]
 8006980:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	68ba      	ldr	r2, [r7, #8]
 8006986:	2100      	movs	r1, #0
 8006988:	68f8      	ldr	r0, [r7, #12]
 800698a:	f000 fc93 	bl	80072b4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800698e:	2300      	movs	r3, #0
}
 8006990:	4618      	mov	r0, r3
 8006992:	3710      	adds	r7, #16
 8006994:	46bd      	mov	sp, r7
 8006996:	bd80      	pop	{r7, pc}

08006998 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8006998:	b580      	push	{r7, lr}
 800699a:	b082      	sub	sp, #8
 800699c:	af00      	add	r7, sp, #0
 800699e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	2204      	movs	r2, #4
 80069a4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80069a8:	2300      	movs	r3, #0
 80069aa:	2200      	movs	r2, #0
 80069ac:	2100      	movs	r1, #0
 80069ae:	6878      	ldr	r0, [r7, #4]
 80069b0:	f000 fc5f 	bl	8007272 <USBD_LL_Transmit>

  return USBD_OK;
 80069b4:	2300      	movs	r3, #0
}
 80069b6:	4618      	mov	r0, r3
 80069b8:	3708      	adds	r7, #8
 80069ba:	46bd      	mov	sp, r7
 80069bc:	bd80      	pop	{r7, pc}

080069be <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80069be:	b580      	push	{r7, lr}
 80069c0:	b082      	sub	sp, #8
 80069c2:	af00      	add	r7, sp, #0
 80069c4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	2205      	movs	r2, #5
 80069ca:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80069ce:	2300      	movs	r3, #0
 80069d0:	2200      	movs	r2, #0
 80069d2:	2100      	movs	r1, #0
 80069d4:	6878      	ldr	r0, [r7, #4]
 80069d6:	f000 fc6d 	bl	80072b4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80069da:	2300      	movs	r3, #0
}
 80069dc:	4618      	mov	r0, r3
 80069de:	3708      	adds	r7, #8
 80069e0:	46bd      	mov	sp, r7
 80069e2:	bd80      	pop	{r7, pc}

080069e4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80069e4:	b580      	push	{r7, lr}
 80069e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80069e8:	2200      	movs	r2, #0
 80069ea:	4912      	ldr	r1, [pc, #72]	@ (8006a34 <MX_USB_DEVICE_Init+0x50>)
 80069ec:	4812      	ldr	r0, [pc, #72]	@ (8006a38 <MX_USB_DEVICE_Init+0x54>)
 80069ee:	f7fe fcf7 	bl	80053e0 <USBD_Init>
 80069f2:	4603      	mov	r3, r0
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d001      	beq.n	80069fc <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80069f8:	f7f9 ff1a 	bl	8000830 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CUSTOM_HID) != USBD_OK)
 80069fc:	490f      	ldr	r1, [pc, #60]	@ (8006a3c <MX_USB_DEVICE_Init+0x58>)
 80069fe:	480e      	ldr	r0, [pc, #56]	@ (8006a38 <MX_USB_DEVICE_Init+0x54>)
 8006a00:	f7fe fd1e 	bl	8005440 <USBD_RegisterClass>
 8006a04:	4603      	mov	r3, r0
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d001      	beq.n	8006a0e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8006a0a:	f7f9 ff11 	bl	8000830 <Error_Handler>
  }
  if (USBD_CUSTOM_HID_RegisterInterface(&hUsbDeviceFS, &USBD_CustomHID_fops_FS) != USBD_OK)
 8006a0e:	490c      	ldr	r1, [pc, #48]	@ (8006a40 <MX_USB_DEVICE_Init+0x5c>)
 8006a10:	4809      	ldr	r0, [pc, #36]	@ (8006a38 <MX_USB_DEVICE_Init+0x54>)
 8006a12:	f7fe fccb 	bl	80053ac <USBD_CUSTOM_HID_RegisterInterface>
 8006a16:	4603      	mov	r3, r0
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d001      	beq.n	8006a20 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8006a1c:	f7f9 ff08 	bl	8000830 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8006a20:	4805      	ldr	r0, [pc, #20]	@ (8006a38 <MX_USB_DEVICE_Init+0x54>)
 8006a22:	f7fe fd43 	bl	80054ac <USBD_Start>
 8006a26:	4603      	mov	r3, r0
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d001      	beq.n	8006a30 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8006a2c:	f7f9 ff00 	bl	8000830 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8006a30:	bf00      	nop
 8006a32:	bd80      	pop	{r7, pc}
 8006a34:	200004dc 	.word	0x200004dc
 8006a38:	200005b4 	.word	0x200005b4
 8006a3c:	2000000c 	.word	0x2000000c
 8006a40:	200004cc 	.word	0x200004cc

08006a44 <CUSTOM_HID_Init_FS>:
/**
  * @brief  Initializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_Init_FS(void)
{
 8006a44:	b480      	push	{r7}
 8006a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8006a48:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8006a4a:	4618      	mov	r0, r3
 8006a4c:	46bd      	mov	sp, r7
 8006a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a52:	4770      	bx	lr

08006a54 <CUSTOM_HID_DeInit_FS>:
/**
  * @brief  DeInitializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_DeInit_FS(void)
{
 8006a54:	b480      	push	{r7}
 8006a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 8006a58:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8006a5a:	4618      	mov	r0, r3
 8006a5c:	46bd      	mov	sp, r7
 8006a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a62:	4770      	bx	lr

08006a64 <CUSTOM_HID_OutEvent_FS>:
  * @param  event_idx: Event index
  * @param  state: Event state
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_OutEvent_FS(uint8_t event_idx, uint8_t state)
{
 8006a64:	b5b0      	push	{r4, r5, r7, lr}
 8006a66:	b092      	sub	sp, #72	@ 0x48
 8006a68:	af00      	add	r7, sp, #0
 8006a6a:	4603      	mov	r3, r0
 8006a6c:	460a      	mov	r2, r1
 8006a6e:	71fb      	strb	r3, [r7, #7]
 8006a70:	4613      	mov	r3, r2
 8006a72:	71bb      	strb	r3, [r7, #6]
	/* USER CODE BEGIN 6 */
	UNUSED(event_idx);
	UNUSED(state);

	switch(event_idx)
 8006a74:	79fb      	ldrb	r3, [r7, #7]
 8006a76:	2b11      	cmp	r3, #17
 8006a78:	d156      	bne.n	8006b28 <CUSTOM_HID_OutEvent_FS+0xc4>
	{
	case HID_ID_NEWEFREP:
		switch(state)
 8006a7a:	79bb      	ldrb	r3, [r7, #6]
 8006a7c:	3b01      	subs	r3, #1
 8006a7e:	2b0a      	cmp	r3, #10
 8006a80:	d854      	bhi.n	8006b2c <CUSTOM_HID_OutEvent_FS+0xc8>
 8006a82:	a201      	add	r2, pc, #4	@ (adr r2, 8006a88 <CUSTOM_HID_OutEvent_FS+0x24>)
 8006a84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a88:	08006b25 	.word	0x08006b25
 8006a8c:	08006b2d 	.word	0x08006b2d
 8006a90:	08006b25 	.word	0x08006b25
 8006a94:	08006b25 	.word	0x08006b25
 8006a98:	08006b25 	.word	0x08006b25
 8006a9c:	08006b25 	.word	0x08006b25
 8006aa0:	08006b2d 	.word	0x08006b2d
 8006aa4:	08006ab5 	.word	0x08006ab5
 8006aa8:	08006b25 	.word	0x08006b25
 8006aac:	08006b2d 	.word	0x08006b2d
 8006ab0:	08006b25 	.word	0x08006b25
		{
		case FFB_EFFECT_SPRING:
			// --- Send Set Effect Report (Report ID 0x01) ---
			uint8_t setEffectReport[] = {
 8006ab4:	4b25      	ldr	r3, [pc, #148]	@ (8006b4c <CUSTOM_HID_OutEvent_FS+0xe8>)
 8006ab6:	f107 0434 	add.w	r4, r7, #52	@ 0x34
 8006aba:	461d      	mov	r5, r3
 8006abc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006abe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006ac0:	682b      	ldr	r3, [r5, #0]
 8006ac2:	461a      	mov	r2, r3
 8006ac4:	8022      	strh	r2, [r4, #0]
 8006ac6:	3402      	adds	r4, #2
 8006ac8:	0c1b      	lsrs	r3, r3, #16
 8006aca:	7023      	strb	r3, [r4, #0]
				0x00,       // Direction Enable
				0x00, 0x00, // Direction
				0x00,       // Type Specific Block Offset 1
				0x01        // Type Specific Block Offset 2
			};
			USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, setEffectReport, sizeof(setEffectReport));
 8006acc:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8006ad0:	2213      	movs	r2, #19
 8006ad2:	4619      	mov	r1, r3
 8006ad4:	481e      	ldr	r0, [pc, #120]	@ (8006b50 <CUSTOM_HID_OutEvent_FS+0xec>)
 8006ad6:	f7fe faf9 	bl	80050cc <USBD_CUSTOM_HID_SendReport>
			HAL_Delay(1);
 8006ada:	2001      	movs	r0, #1
 8006adc:	f7fa f818 	bl	8000b10 <HAL_Delay>

			// --- Send Set Condition Report for X axis (Report ID 0x03) ---
			uint8_t setConditionX[] = {
 8006ae0:	4b1c      	ldr	r3, [pc, #112]	@ (8006b54 <CUSTOM_HID_OutEvent_FS+0xf0>)
 8006ae2:	f107 0420 	add.w	r4, r7, #32
 8006ae6:	461d      	mov	r5, r3
 8006ae8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006aea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006aec:	682b      	ldr	r3, [r5, #0]
 8006aee:	7023      	strb	r3, [r4, #0]
				0x60, 0x00, // Negative Coefficient
				0xFF, 0x7F, // Positive Saturation
				0xFF, 0x7F, // Negative Saturation
				0x00, 0x00  // Deadband
			};
			USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, setConditionX, sizeof(setConditionX));
 8006af0:	f107 0320 	add.w	r3, r7, #32
 8006af4:	2211      	movs	r2, #17
 8006af6:	4619      	mov	r1, r3
 8006af8:	4815      	ldr	r0, [pc, #84]	@ (8006b50 <CUSTOM_HID_OutEvent_FS+0xec>)
 8006afa:	f7fe fae7 	bl	80050cc <USBD_CUSTOM_HID_SendReport>
			HAL_Delay(1);
 8006afe:	2001      	movs	r0, #1
 8006b00:	f7fa f806 	bl	8000b10 <HAL_Delay>

			// --- Send Set Condition Report for Y axis (Report ID 0x03) ---
			uint8_t setConditionY[] = {
 8006b04:	4b14      	ldr	r3, [pc, #80]	@ (8006b58 <CUSTOM_HID_OutEvent_FS+0xf4>)
 8006b06:	f107 040c 	add.w	r4, r7, #12
 8006b0a:	461d      	mov	r5, r3
 8006b0c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006b0e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006b10:	682b      	ldr	r3, [r5, #0]
 8006b12:	7023      	strb	r3, [r4, #0]
				0x60, 0x00,
				0xFF, 0x7F,
				0xFF, 0x7F,
				0x00, 0x00
			};
			USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, setConditionY, sizeof(setConditionY));
 8006b14:	f107 030c 	add.w	r3, r7, #12
 8006b18:	2211      	movs	r2, #17
 8006b1a:	4619      	mov	r1, r3
 8006b1c:	480c      	ldr	r0, [pc, #48]	@ (8006b50 <CUSTOM_HID_OutEvent_FS+0xec>)
 8006b1e:	f7fe fad5 	bl	80050cc <USBD_CUSTOM_HID_SendReport>
				break;
 8006b22:	e000      	b.n	8006b26 <CUSTOM_HID_OutEvent_FS+0xc2>
		case FFB_EFFECT_FRICTION:
				break;
		case FFB_EFFECT_DAMPER:
				break;
		case FFB_EFFECT_CONSTANT:
				break;
 8006b24:	bf00      	nop
		case FFB_EFFECT_TRIANGLE:
				break;
		case FFB_EFFECT_SAWTOOTHUP:
				break;
		}
		break;
 8006b26:	e001      	b.n	8006b2c <CUSTOM_HID_OutEvent_FS+0xc8>
	default:
			break;
 8006b28:	bf00      	nop
 8006b2a:	e000      	b.n	8006b2e <CUSTOM_HID_OutEvent_FS+0xca>
		break;
 8006b2c:	bf00      	nop
	}

	/* Start next USB packet transfer once data processing is completed */
	if (USBD_CUSTOM_HID_ReceivePacket(&hUsbDeviceFS) != (uint8_t)USBD_OK)
 8006b2e:	4808      	ldr	r0, [pc, #32]	@ (8006b50 <CUSTOM_HID_OutEvent_FS+0xec>)
 8006b30:	f7fe fbda 	bl	80052e8 <USBD_CUSTOM_HID_ReceivePacket>
 8006b34:	4603      	mov	r3, r0
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d002      	beq.n	8006b40 <CUSTOM_HID_OutEvent_FS+0xdc>
	{
		return -1;
 8006b3a:	f04f 33ff 	mov.w	r3, #4294967295
 8006b3e:	e000      	b.n	8006b42 <CUSTOM_HID_OutEvent_FS+0xde>
	}

	return (USBD_OK);
 8006b40:	2300      	movs	r3, #0
	/* USER CODE END 6 */
}
 8006b42:	4618      	mov	r0, r3
 8006b44:	3748      	adds	r7, #72	@ 0x48
 8006b46:	46bd      	mov	sp, r7
 8006b48:	bdb0      	pop	{r4, r5, r7, pc}
 8006b4a:	bf00      	nop
 8006b4c:	080073f0 	.word	0x080073f0
 8006b50:	200005b4 	.word	0x200005b4
 8006b54:	08007404 	.word	0x08007404
 8006b58:	08007418 	.word	0x08007418

08006b5c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006b5c:	b480      	push	{r7}
 8006b5e:	b083      	sub	sp, #12
 8006b60:	af00      	add	r7, sp, #0
 8006b62:	4603      	mov	r3, r0
 8006b64:	6039      	str	r1, [r7, #0]
 8006b66:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8006b68:	683b      	ldr	r3, [r7, #0]
 8006b6a:	2212      	movs	r2, #18
 8006b6c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8006b6e:	4b03      	ldr	r3, [pc, #12]	@ (8006b7c <USBD_FS_DeviceDescriptor+0x20>)
}
 8006b70:	4618      	mov	r0, r3
 8006b72:	370c      	adds	r7, #12
 8006b74:	46bd      	mov	sp, r7
 8006b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b7a:	4770      	bx	lr
 8006b7c:	200004f8 	.word	0x200004f8

08006b80 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006b80:	b480      	push	{r7}
 8006b82:	b083      	sub	sp, #12
 8006b84:	af00      	add	r7, sp, #0
 8006b86:	4603      	mov	r3, r0
 8006b88:	6039      	str	r1, [r7, #0]
 8006b8a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8006b8c:	683b      	ldr	r3, [r7, #0]
 8006b8e:	2204      	movs	r2, #4
 8006b90:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8006b92:	4b03      	ldr	r3, [pc, #12]	@ (8006ba0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8006b94:	4618      	mov	r0, r3
 8006b96:	370c      	adds	r7, #12
 8006b98:	46bd      	mov	sp, r7
 8006b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b9e:	4770      	bx	lr
 8006ba0:	2000050c 	.word	0x2000050c

08006ba4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006ba4:	b580      	push	{r7, lr}
 8006ba6:	b082      	sub	sp, #8
 8006ba8:	af00      	add	r7, sp, #0
 8006baa:	4603      	mov	r3, r0
 8006bac:	6039      	str	r1, [r7, #0]
 8006bae:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006bb0:	79fb      	ldrb	r3, [r7, #7]
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d105      	bne.n	8006bc2 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006bb6:	683a      	ldr	r2, [r7, #0]
 8006bb8:	4907      	ldr	r1, [pc, #28]	@ (8006bd8 <USBD_FS_ProductStrDescriptor+0x34>)
 8006bba:	4808      	ldr	r0, [pc, #32]	@ (8006bdc <USBD_FS_ProductStrDescriptor+0x38>)
 8006bbc:	f7ff fe26 	bl	800680c <USBD_GetString>
 8006bc0:	e004      	b.n	8006bcc <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006bc2:	683a      	ldr	r2, [r7, #0]
 8006bc4:	4904      	ldr	r1, [pc, #16]	@ (8006bd8 <USBD_FS_ProductStrDescriptor+0x34>)
 8006bc6:	4805      	ldr	r0, [pc, #20]	@ (8006bdc <USBD_FS_ProductStrDescriptor+0x38>)
 8006bc8:	f7ff fe20 	bl	800680c <USBD_GetString>
  }
  return USBD_StrDesc;
 8006bcc:	4b02      	ldr	r3, [pc, #8]	@ (8006bd8 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8006bce:	4618      	mov	r0, r3
 8006bd0:	3708      	adds	r7, #8
 8006bd2:	46bd      	mov	sp, r7
 8006bd4:	bd80      	pop	{r7, pc}
 8006bd6:	bf00      	nop
 8006bd8:	20000890 	.word	0x20000890
 8006bdc:	0800742c 	.word	0x0800742c

08006be0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006be0:	b580      	push	{r7, lr}
 8006be2:	b082      	sub	sp, #8
 8006be4:	af00      	add	r7, sp, #0
 8006be6:	4603      	mov	r3, r0
 8006be8:	6039      	str	r1, [r7, #0]
 8006bea:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8006bec:	683a      	ldr	r2, [r7, #0]
 8006bee:	4904      	ldr	r1, [pc, #16]	@ (8006c00 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8006bf0:	4804      	ldr	r0, [pc, #16]	@ (8006c04 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8006bf2:	f7ff fe0b 	bl	800680c <USBD_GetString>
  return USBD_StrDesc;
 8006bf6:	4b02      	ldr	r3, [pc, #8]	@ (8006c00 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8006bf8:	4618      	mov	r0, r3
 8006bfa:	3708      	adds	r7, #8
 8006bfc:	46bd      	mov	sp, r7
 8006bfe:	bd80      	pop	{r7, pc}
 8006c00:	20000890 	.word	0x20000890
 8006c04:	0800744c 	.word	0x0800744c

08006c08 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006c08:	b580      	push	{r7, lr}
 8006c0a:	b082      	sub	sp, #8
 8006c0c:	af00      	add	r7, sp, #0
 8006c0e:	4603      	mov	r3, r0
 8006c10:	6039      	str	r1, [r7, #0]
 8006c12:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8006c14:	683b      	ldr	r3, [r7, #0]
 8006c16:	221a      	movs	r2, #26
 8006c18:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8006c1a:	f000 f843 	bl	8006ca4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8006c1e:	4b02      	ldr	r3, [pc, #8]	@ (8006c28 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8006c20:	4618      	mov	r0, r3
 8006c22:	3708      	adds	r7, #8
 8006c24:	46bd      	mov	sp, r7
 8006c26:	bd80      	pop	{r7, pc}
 8006c28:	20000510 	.word	0x20000510

08006c2c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006c2c:	b580      	push	{r7, lr}
 8006c2e:	b082      	sub	sp, #8
 8006c30:	af00      	add	r7, sp, #0
 8006c32:	4603      	mov	r3, r0
 8006c34:	6039      	str	r1, [r7, #0]
 8006c36:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8006c38:	79fb      	ldrb	r3, [r7, #7]
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d105      	bne.n	8006c4a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006c3e:	683a      	ldr	r2, [r7, #0]
 8006c40:	4907      	ldr	r1, [pc, #28]	@ (8006c60 <USBD_FS_ConfigStrDescriptor+0x34>)
 8006c42:	4808      	ldr	r0, [pc, #32]	@ (8006c64 <USBD_FS_ConfigStrDescriptor+0x38>)
 8006c44:	f7ff fde2 	bl	800680c <USBD_GetString>
 8006c48:	e004      	b.n	8006c54 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006c4a:	683a      	ldr	r2, [r7, #0]
 8006c4c:	4904      	ldr	r1, [pc, #16]	@ (8006c60 <USBD_FS_ConfigStrDescriptor+0x34>)
 8006c4e:	4805      	ldr	r0, [pc, #20]	@ (8006c64 <USBD_FS_ConfigStrDescriptor+0x38>)
 8006c50:	f7ff fddc 	bl	800680c <USBD_GetString>
  }
  return USBD_StrDesc;
 8006c54:	4b02      	ldr	r3, [pc, #8]	@ (8006c60 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8006c56:	4618      	mov	r0, r3
 8006c58:	3708      	adds	r7, #8
 8006c5a:	46bd      	mov	sp, r7
 8006c5c:	bd80      	pop	{r7, pc}
 8006c5e:	bf00      	nop
 8006c60:	20000890 	.word	0x20000890
 8006c64:	08007460 	.word	0x08007460

08006c68 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006c68:	b580      	push	{r7, lr}
 8006c6a:	b082      	sub	sp, #8
 8006c6c:	af00      	add	r7, sp, #0
 8006c6e:	4603      	mov	r3, r0
 8006c70:	6039      	str	r1, [r7, #0]
 8006c72:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006c74:	79fb      	ldrb	r3, [r7, #7]
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d105      	bne.n	8006c86 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006c7a:	683a      	ldr	r2, [r7, #0]
 8006c7c:	4907      	ldr	r1, [pc, #28]	@ (8006c9c <USBD_FS_InterfaceStrDescriptor+0x34>)
 8006c7e:	4808      	ldr	r0, [pc, #32]	@ (8006ca0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006c80:	f7ff fdc4 	bl	800680c <USBD_GetString>
 8006c84:	e004      	b.n	8006c90 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006c86:	683a      	ldr	r2, [r7, #0]
 8006c88:	4904      	ldr	r1, [pc, #16]	@ (8006c9c <USBD_FS_InterfaceStrDescriptor+0x34>)
 8006c8a:	4805      	ldr	r0, [pc, #20]	@ (8006ca0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006c8c:	f7ff fdbe 	bl	800680c <USBD_GetString>
  }
  return USBD_StrDesc;
 8006c90:	4b02      	ldr	r3, [pc, #8]	@ (8006c9c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8006c92:	4618      	mov	r0, r3
 8006c94:	3708      	adds	r7, #8
 8006c96:	46bd      	mov	sp, r7
 8006c98:	bd80      	pop	{r7, pc}
 8006c9a:	bf00      	nop
 8006c9c:	20000890 	.word	0x20000890
 8006ca0:	08007474 	.word	0x08007474

08006ca4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8006ca4:	b580      	push	{r7, lr}
 8006ca6:	b084      	sub	sp, #16
 8006ca8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8006caa:	4b0f      	ldr	r3, [pc, #60]	@ (8006ce8 <Get_SerialNum+0x44>)
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8006cb0:	4b0e      	ldr	r3, [pc, #56]	@ (8006cec <Get_SerialNum+0x48>)
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8006cb6:	4b0e      	ldr	r3, [pc, #56]	@ (8006cf0 <Get_SerialNum+0x4c>)
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8006cbc:	68fa      	ldr	r2, [r7, #12]
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	4413      	add	r3, r2
 8006cc2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d009      	beq.n	8006cde <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8006cca:	2208      	movs	r2, #8
 8006ccc:	4909      	ldr	r1, [pc, #36]	@ (8006cf4 <Get_SerialNum+0x50>)
 8006cce:	68f8      	ldr	r0, [r7, #12]
 8006cd0:	f000 f814 	bl	8006cfc <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8006cd4:	2204      	movs	r2, #4
 8006cd6:	4908      	ldr	r1, [pc, #32]	@ (8006cf8 <Get_SerialNum+0x54>)
 8006cd8:	68b8      	ldr	r0, [r7, #8]
 8006cda:	f000 f80f 	bl	8006cfc <IntToUnicode>
  }
}
 8006cde:	bf00      	nop
 8006ce0:	3710      	adds	r7, #16
 8006ce2:	46bd      	mov	sp, r7
 8006ce4:	bd80      	pop	{r7, pc}
 8006ce6:	bf00      	nop
 8006ce8:	1fff7a10 	.word	0x1fff7a10
 8006cec:	1fff7a14 	.word	0x1fff7a14
 8006cf0:	1fff7a18 	.word	0x1fff7a18
 8006cf4:	20000512 	.word	0x20000512
 8006cf8:	20000522 	.word	0x20000522

08006cfc <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8006cfc:	b480      	push	{r7}
 8006cfe:	b087      	sub	sp, #28
 8006d00:	af00      	add	r7, sp, #0
 8006d02:	60f8      	str	r0, [r7, #12]
 8006d04:	60b9      	str	r1, [r7, #8]
 8006d06:	4613      	mov	r3, r2
 8006d08:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8006d0a:	2300      	movs	r3, #0
 8006d0c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8006d0e:	2300      	movs	r3, #0
 8006d10:	75fb      	strb	r3, [r7, #23]
 8006d12:	e027      	b.n	8006d64 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	0f1b      	lsrs	r3, r3, #28
 8006d18:	2b09      	cmp	r3, #9
 8006d1a:	d80b      	bhi.n	8006d34 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	0f1b      	lsrs	r3, r3, #28
 8006d20:	b2da      	uxtb	r2, r3
 8006d22:	7dfb      	ldrb	r3, [r7, #23]
 8006d24:	005b      	lsls	r3, r3, #1
 8006d26:	4619      	mov	r1, r3
 8006d28:	68bb      	ldr	r3, [r7, #8]
 8006d2a:	440b      	add	r3, r1
 8006d2c:	3230      	adds	r2, #48	@ 0x30
 8006d2e:	b2d2      	uxtb	r2, r2
 8006d30:	701a      	strb	r2, [r3, #0]
 8006d32:	e00a      	b.n	8006d4a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	0f1b      	lsrs	r3, r3, #28
 8006d38:	b2da      	uxtb	r2, r3
 8006d3a:	7dfb      	ldrb	r3, [r7, #23]
 8006d3c:	005b      	lsls	r3, r3, #1
 8006d3e:	4619      	mov	r1, r3
 8006d40:	68bb      	ldr	r3, [r7, #8]
 8006d42:	440b      	add	r3, r1
 8006d44:	3237      	adds	r2, #55	@ 0x37
 8006d46:	b2d2      	uxtb	r2, r2
 8006d48:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	011b      	lsls	r3, r3, #4
 8006d4e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8006d50:	7dfb      	ldrb	r3, [r7, #23]
 8006d52:	005b      	lsls	r3, r3, #1
 8006d54:	3301      	adds	r3, #1
 8006d56:	68ba      	ldr	r2, [r7, #8]
 8006d58:	4413      	add	r3, r2
 8006d5a:	2200      	movs	r2, #0
 8006d5c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8006d5e:	7dfb      	ldrb	r3, [r7, #23]
 8006d60:	3301      	adds	r3, #1
 8006d62:	75fb      	strb	r3, [r7, #23]
 8006d64:	7dfa      	ldrb	r2, [r7, #23]
 8006d66:	79fb      	ldrb	r3, [r7, #7]
 8006d68:	429a      	cmp	r2, r3
 8006d6a:	d3d3      	bcc.n	8006d14 <IntToUnicode+0x18>
  }
}
 8006d6c:	bf00      	nop
 8006d6e:	bf00      	nop
 8006d70:	371c      	adds	r7, #28
 8006d72:	46bd      	mov	sp, r7
 8006d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d78:	4770      	bx	lr
	...

08006d7c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8006d7c:	b580      	push	{r7, lr}
 8006d7e:	b08a      	sub	sp, #40	@ 0x28
 8006d80:	af00      	add	r7, sp, #0
 8006d82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006d84:	f107 0314 	add.w	r3, r7, #20
 8006d88:	2200      	movs	r2, #0
 8006d8a:	601a      	str	r2, [r3, #0]
 8006d8c:	605a      	str	r2, [r3, #4]
 8006d8e:	609a      	str	r2, [r3, #8]
 8006d90:	60da      	str	r2, [r3, #12]
 8006d92:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006d9c:	d13a      	bne.n	8006e14 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006d9e:	2300      	movs	r3, #0
 8006da0:	613b      	str	r3, [r7, #16]
 8006da2:	4b1e      	ldr	r3, [pc, #120]	@ (8006e1c <HAL_PCD_MspInit+0xa0>)
 8006da4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006da6:	4a1d      	ldr	r2, [pc, #116]	@ (8006e1c <HAL_PCD_MspInit+0xa0>)
 8006da8:	f043 0301 	orr.w	r3, r3, #1
 8006dac:	6313      	str	r3, [r2, #48]	@ 0x30
 8006dae:	4b1b      	ldr	r3, [pc, #108]	@ (8006e1c <HAL_PCD_MspInit+0xa0>)
 8006db0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006db2:	f003 0301 	and.w	r3, r3, #1
 8006db6:	613b      	str	r3, [r7, #16]
 8006db8:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8006dba:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8006dbe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006dc0:	2302      	movs	r3, #2
 8006dc2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006dc4:	2300      	movs	r3, #0
 8006dc6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006dc8:	2303      	movs	r3, #3
 8006dca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8006dcc:	230a      	movs	r3, #10
 8006dce:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006dd0:	f107 0314 	add.w	r3, r7, #20
 8006dd4:	4619      	mov	r1, r3
 8006dd6:	4812      	ldr	r0, [pc, #72]	@ (8006e20 <HAL_PCD_MspInit+0xa4>)
 8006dd8:	f7f9 ffd0 	bl	8000d7c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8006ddc:	4b0f      	ldr	r3, [pc, #60]	@ (8006e1c <HAL_PCD_MspInit+0xa0>)
 8006dde:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006de0:	4a0e      	ldr	r2, [pc, #56]	@ (8006e1c <HAL_PCD_MspInit+0xa0>)
 8006de2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006de6:	6353      	str	r3, [r2, #52]	@ 0x34
 8006de8:	2300      	movs	r3, #0
 8006dea:	60fb      	str	r3, [r7, #12]
 8006dec:	4b0b      	ldr	r3, [pc, #44]	@ (8006e1c <HAL_PCD_MspInit+0xa0>)
 8006dee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006df0:	4a0a      	ldr	r2, [pc, #40]	@ (8006e1c <HAL_PCD_MspInit+0xa0>)
 8006df2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006df6:	6453      	str	r3, [r2, #68]	@ 0x44
 8006df8:	4b08      	ldr	r3, [pc, #32]	@ (8006e1c <HAL_PCD_MspInit+0xa0>)
 8006dfa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006dfc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006e00:	60fb      	str	r3, [r7, #12]
 8006e02:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8006e04:	2200      	movs	r2, #0
 8006e06:	2100      	movs	r1, #0
 8006e08:	2043      	movs	r0, #67	@ 0x43
 8006e0a:	f7f9 ff80 	bl	8000d0e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8006e0e:	2043      	movs	r0, #67	@ 0x43
 8006e10:	f7f9 ff99 	bl	8000d46 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8006e14:	bf00      	nop
 8006e16:	3728      	adds	r7, #40	@ 0x28
 8006e18:	46bd      	mov	sp, r7
 8006e1a:	bd80      	pop	{r7, pc}
 8006e1c:	40023800 	.word	0x40023800
 8006e20:	40020000 	.word	0x40020000

08006e24 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006e24:	b580      	push	{r7, lr}
 8006e26:	b082      	sub	sp, #8
 8006e28:	af00      	add	r7, sp, #0
 8006e2a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8006e38:	4619      	mov	r1, r3
 8006e3a:	4610      	mov	r0, r2
 8006e3c:	f7fe fb83 	bl	8005546 <USBD_LL_SetupStage>
}
 8006e40:	bf00      	nop
 8006e42:	3708      	adds	r7, #8
 8006e44:	46bd      	mov	sp, r7
 8006e46:	bd80      	pop	{r7, pc}

08006e48 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006e48:	b580      	push	{r7, lr}
 8006e4a:	b082      	sub	sp, #8
 8006e4c:	af00      	add	r7, sp, #0
 8006e4e:	6078      	str	r0, [r7, #4]
 8006e50:	460b      	mov	r3, r1
 8006e52:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8006e5a:	78fa      	ldrb	r2, [r7, #3]
 8006e5c:	6879      	ldr	r1, [r7, #4]
 8006e5e:	4613      	mov	r3, r2
 8006e60:	00db      	lsls	r3, r3, #3
 8006e62:	4413      	add	r3, r2
 8006e64:	009b      	lsls	r3, r3, #2
 8006e66:	440b      	add	r3, r1
 8006e68:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8006e6c:	681a      	ldr	r2, [r3, #0]
 8006e6e:	78fb      	ldrb	r3, [r7, #3]
 8006e70:	4619      	mov	r1, r3
 8006e72:	f7fe fbbd 	bl	80055f0 <USBD_LL_DataOutStage>
}
 8006e76:	bf00      	nop
 8006e78:	3708      	adds	r7, #8
 8006e7a:	46bd      	mov	sp, r7
 8006e7c:	bd80      	pop	{r7, pc}

08006e7e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006e7e:	b580      	push	{r7, lr}
 8006e80:	b082      	sub	sp, #8
 8006e82:	af00      	add	r7, sp, #0
 8006e84:	6078      	str	r0, [r7, #4]
 8006e86:	460b      	mov	r3, r1
 8006e88:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8006e90:	78fa      	ldrb	r2, [r7, #3]
 8006e92:	6879      	ldr	r1, [r7, #4]
 8006e94:	4613      	mov	r3, r2
 8006e96:	00db      	lsls	r3, r3, #3
 8006e98:	4413      	add	r3, r2
 8006e9a:	009b      	lsls	r3, r3, #2
 8006e9c:	440b      	add	r3, r1
 8006e9e:	3320      	adds	r3, #32
 8006ea0:	681a      	ldr	r2, [r3, #0]
 8006ea2:	78fb      	ldrb	r3, [r7, #3]
 8006ea4:	4619      	mov	r1, r3
 8006ea6:	f7fe fc56 	bl	8005756 <USBD_LL_DataInStage>
}
 8006eaa:	bf00      	nop
 8006eac:	3708      	adds	r7, #8
 8006eae:	46bd      	mov	sp, r7
 8006eb0:	bd80      	pop	{r7, pc}

08006eb2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006eb2:	b580      	push	{r7, lr}
 8006eb4:	b082      	sub	sp, #8
 8006eb6:	af00      	add	r7, sp, #0
 8006eb8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8006ec0:	4618      	mov	r0, r3
 8006ec2:	f7fe fd90 	bl	80059e6 <USBD_LL_SOF>
}
 8006ec6:	bf00      	nop
 8006ec8:	3708      	adds	r7, #8
 8006eca:	46bd      	mov	sp, r7
 8006ecc:	bd80      	pop	{r7, pc}

08006ece <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006ece:	b580      	push	{r7, lr}
 8006ed0:	b084      	sub	sp, #16
 8006ed2:	af00      	add	r7, sp, #0
 8006ed4:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8006ed6:	2301      	movs	r3, #1
 8006ed8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	79db      	ldrb	r3, [r3, #7]
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d102      	bne.n	8006ee8 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8006ee2:	2300      	movs	r3, #0
 8006ee4:	73fb      	strb	r3, [r7, #15]
 8006ee6:	e008      	b.n	8006efa <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	79db      	ldrb	r3, [r3, #7]
 8006eec:	2b02      	cmp	r3, #2
 8006eee:	d102      	bne.n	8006ef6 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8006ef0:	2301      	movs	r3, #1
 8006ef2:	73fb      	strb	r3, [r7, #15]
 8006ef4:	e001      	b.n	8006efa <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8006ef6:	f7f9 fc9b 	bl	8000830 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8006f00:	7bfa      	ldrb	r2, [r7, #15]
 8006f02:	4611      	mov	r1, r2
 8006f04:	4618      	mov	r0, r3
 8006f06:	f7fe fd2a 	bl	800595e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8006f10:	4618      	mov	r0, r3
 8006f12:	f7fe fcd2 	bl	80058ba <USBD_LL_Reset>
}
 8006f16:	bf00      	nop
 8006f18:	3710      	adds	r7, #16
 8006f1a:	46bd      	mov	sp, r7
 8006f1c:	bd80      	pop	{r7, pc}
	...

08006f20 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006f20:	b580      	push	{r7, lr}
 8006f22:	b082      	sub	sp, #8
 8006f24:	af00      	add	r7, sp, #0
 8006f26:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8006f2e:	4618      	mov	r0, r3
 8006f30:	f7fe fd25 	bl	800597e <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	687a      	ldr	r2, [r7, #4]
 8006f40:	6812      	ldr	r2, [r2, #0]
 8006f42:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8006f46:	f043 0301 	orr.w	r3, r3, #1
 8006f4a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	7adb      	ldrb	r3, [r3, #11]
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d005      	beq.n	8006f60 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8006f54:	4b04      	ldr	r3, [pc, #16]	@ (8006f68 <HAL_PCD_SuspendCallback+0x48>)
 8006f56:	691b      	ldr	r3, [r3, #16]
 8006f58:	4a03      	ldr	r2, [pc, #12]	@ (8006f68 <HAL_PCD_SuspendCallback+0x48>)
 8006f5a:	f043 0306 	orr.w	r3, r3, #6
 8006f5e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8006f60:	bf00      	nop
 8006f62:	3708      	adds	r7, #8
 8006f64:	46bd      	mov	sp, r7
 8006f66:	bd80      	pop	{r7, pc}
 8006f68:	e000ed00 	.word	0xe000ed00

08006f6c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006f6c:	b580      	push	{r7, lr}
 8006f6e:	b082      	sub	sp, #8
 8006f70:	af00      	add	r7, sp, #0
 8006f72:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8006f7a:	4618      	mov	r0, r3
 8006f7c:	f7fe fd1b 	bl	80059b6 <USBD_LL_Resume>
}
 8006f80:	bf00      	nop
 8006f82:	3708      	adds	r7, #8
 8006f84:	46bd      	mov	sp, r7
 8006f86:	bd80      	pop	{r7, pc}

08006f88 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006f88:	b580      	push	{r7, lr}
 8006f8a:	b082      	sub	sp, #8
 8006f8c:	af00      	add	r7, sp, #0
 8006f8e:	6078      	str	r0, [r7, #4]
 8006f90:	460b      	mov	r3, r1
 8006f92:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8006f9a:	78fa      	ldrb	r2, [r7, #3]
 8006f9c:	4611      	mov	r1, r2
 8006f9e:	4618      	mov	r0, r3
 8006fa0:	f7fe fd73 	bl	8005a8a <USBD_LL_IsoOUTIncomplete>
}
 8006fa4:	bf00      	nop
 8006fa6:	3708      	adds	r7, #8
 8006fa8:	46bd      	mov	sp, r7
 8006faa:	bd80      	pop	{r7, pc}

08006fac <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006fac:	b580      	push	{r7, lr}
 8006fae:	b082      	sub	sp, #8
 8006fb0:	af00      	add	r7, sp, #0
 8006fb2:	6078      	str	r0, [r7, #4]
 8006fb4:	460b      	mov	r3, r1
 8006fb6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8006fbe:	78fa      	ldrb	r2, [r7, #3]
 8006fc0:	4611      	mov	r1, r2
 8006fc2:	4618      	mov	r0, r3
 8006fc4:	f7fe fd2f 	bl	8005a26 <USBD_LL_IsoINIncomplete>
}
 8006fc8:	bf00      	nop
 8006fca:	3708      	adds	r7, #8
 8006fcc:	46bd      	mov	sp, r7
 8006fce:	bd80      	pop	{r7, pc}

08006fd0 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006fd0:	b580      	push	{r7, lr}
 8006fd2:	b082      	sub	sp, #8
 8006fd4:	af00      	add	r7, sp, #0
 8006fd6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8006fde:	4618      	mov	r0, r3
 8006fe0:	f7fe fd85 	bl	8005aee <USBD_LL_DevConnected>
}
 8006fe4:	bf00      	nop
 8006fe6:	3708      	adds	r7, #8
 8006fe8:	46bd      	mov	sp, r7
 8006fea:	bd80      	pop	{r7, pc}

08006fec <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006fec:	b580      	push	{r7, lr}
 8006fee:	b082      	sub	sp, #8
 8006ff0:	af00      	add	r7, sp, #0
 8006ff2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8006ffa:	4618      	mov	r0, r3
 8006ffc:	f7fe fd82 	bl	8005b04 <USBD_LL_DevDisconnected>
}
 8007000:	bf00      	nop
 8007002:	3708      	adds	r7, #8
 8007004:	46bd      	mov	sp, r7
 8007006:	bd80      	pop	{r7, pc}

08007008 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007008:	b580      	push	{r7, lr}
 800700a:	b082      	sub	sp, #8
 800700c:	af00      	add	r7, sp, #0
 800700e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	781b      	ldrb	r3, [r3, #0]
 8007014:	2b00      	cmp	r3, #0
 8007016:	d13c      	bne.n	8007092 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8007018:	4a20      	ldr	r2, [pc, #128]	@ (800709c <USBD_LL_Init+0x94>)
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	4a1e      	ldr	r2, [pc, #120]	@ (800709c <USBD_LL_Init+0x94>)
 8007024:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8007028:	4b1c      	ldr	r3, [pc, #112]	@ (800709c <USBD_LL_Init+0x94>)
 800702a:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800702e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8007030:	4b1a      	ldr	r3, [pc, #104]	@ (800709c <USBD_LL_Init+0x94>)
 8007032:	2204      	movs	r2, #4
 8007034:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8007036:	4b19      	ldr	r3, [pc, #100]	@ (800709c <USBD_LL_Init+0x94>)
 8007038:	2202      	movs	r2, #2
 800703a:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800703c:	4b17      	ldr	r3, [pc, #92]	@ (800709c <USBD_LL_Init+0x94>)
 800703e:	2200      	movs	r2, #0
 8007040:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8007042:	4b16      	ldr	r3, [pc, #88]	@ (800709c <USBD_LL_Init+0x94>)
 8007044:	2202      	movs	r2, #2
 8007046:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8007048:	4b14      	ldr	r3, [pc, #80]	@ (800709c <USBD_LL_Init+0x94>)
 800704a:	2200      	movs	r2, #0
 800704c:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800704e:	4b13      	ldr	r3, [pc, #76]	@ (800709c <USBD_LL_Init+0x94>)
 8007050:	2200      	movs	r2, #0
 8007052:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8007054:	4b11      	ldr	r3, [pc, #68]	@ (800709c <USBD_LL_Init+0x94>)
 8007056:	2200      	movs	r2, #0
 8007058:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800705a:	4b10      	ldr	r3, [pc, #64]	@ (800709c <USBD_LL_Init+0x94>)
 800705c:	2200      	movs	r2, #0
 800705e:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8007060:	4b0e      	ldr	r3, [pc, #56]	@ (800709c <USBD_LL_Init+0x94>)
 8007062:	2200      	movs	r2, #0
 8007064:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8007066:	480d      	ldr	r0, [pc, #52]	@ (800709c <USBD_LL_Init+0x94>)
 8007068:	f7fa f824 	bl	80010b4 <HAL_PCD_Init>
 800706c:	4603      	mov	r3, r0
 800706e:	2b00      	cmp	r3, #0
 8007070:	d001      	beq.n	8007076 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8007072:	f7f9 fbdd 	bl	8000830 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8007076:	2180      	movs	r1, #128	@ 0x80
 8007078:	4808      	ldr	r0, [pc, #32]	@ (800709c <USBD_LL_Init+0x94>)
 800707a:	f7fb fa38 	bl	80024ee <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800707e:	2240      	movs	r2, #64	@ 0x40
 8007080:	2100      	movs	r1, #0
 8007082:	4806      	ldr	r0, [pc, #24]	@ (800709c <USBD_LL_Init+0x94>)
 8007084:	f7fb f9ec 	bl	8002460 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8007088:	2280      	movs	r2, #128	@ 0x80
 800708a:	2101      	movs	r1, #1
 800708c:	4803      	ldr	r0, [pc, #12]	@ (800709c <USBD_LL_Init+0x94>)
 800708e:	f7fb f9e7 	bl	8002460 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8007092:	2300      	movs	r3, #0
}
 8007094:	4618      	mov	r0, r3
 8007096:	3708      	adds	r7, #8
 8007098:	46bd      	mov	sp, r7
 800709a:	bd80      	pop	{r7, pc}
 800709c:	20000a90 	.word	0x20000a90

080070a0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80070a0:	b580      	push	{r7, lr}
 80070a2:	b084      	sub	sp, #16
 80070a4:	af00      	add	r7, sp, #0
 80070a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80070a8:	2300      	movs	r3, #0
 80070aa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80070ac:	2300      	movs	r3, #0
 80070ae:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80070b6:	4618      	mov	r0, r3
 80070b8:	f7fa f90b 	bl	80012d2 <HAL_PCD_Start>
 80070bc:	4603      	mov	r3, r0
 80070be:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80070c0:	7bfb      	ldrb	r3, [r7, #15]
 80070c2:	4618      	mov	r0, r3
 80070c4:	f000 f930 	bl	8007328 <USBD_Get_USB_Status>
 80070c8:	4603      	mov	r3, r0
 80070ca:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80070cc:	7bbb      	ldrb	r3, [r7, #14]
}
 80070ce:	4618      	mov	r0, r3
 80070d0:	3710      	adds	r7, #16
 80070d2:	46bd      	mov	sp, r7
 80070d4:	bd80      	pop	{r7, pc}

080070d6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80070d6:	b580      	push	{r7, lr}
 80070d8:	b084      	sub	sp, #16
 80070da:	af00      	add	r7, sp, #0
 80070dc:	6078      	str	r0, [r7, #4]
 80070de:	4608      	mov	r0, r1
 80070e0:	4611      	mov	r1, r2
 80070e2:	461a      	mov	r2, r3
 80070e4:	4603      	mov	r3, r0
 80070e6:	70fb      	strb	r3, [r7, #3]
 80070e8:	460b      	mov	r3, r1
 80070ea:	70bb      	strb	r3, [r7, #2]
 80070ec:	4613      	mov	r3, r2
 80070ee:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80070f0:	2300      	movs	r3, #0
 80070f2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80070f4:	2300      	movs	r3, #0
 80070f6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80070fe:	78bb      	ldrb	r3, [r7, #2]
 8007100:	883a      	ldrh	r2, [r7, #0]
 8007102:	78f9      	ldrb	r1, [r7, #3]
 8007104:	f7fa fddf 	bl	8001cc6 <HAL_PCD_EP_Open>
 8007108:	4603      	mov	r3, r0
 800710a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800710c:	7bfb      	ldrb	r3, [r7, #15]
 800710e:	4618      	mov	r0, r3
 8007110:	f000 f90a 	bl	8007328 <USBD_Get_USB_Status>
 8007114:	4603      	mov	r3, r0
 8007116:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007118:	7bbb      	ldrb	r3, [r7, #14]
}
 800711a:	4618      	mov	r0, r3
 800711c:	3710      	adds	r7, #16
 800711e:	46bd      	mov	sp, r7
 8007120:	bd80      	pop	{r7, pc}

08007122 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007122:	b580      	push	{r7, lr}
 8007124:	b084      	sub	sp, #16
 8007126:	af00      	add	r7, sp, #0
 8007128:	6078      	str	r0, [r7, #4]
 800712a:	460b      	mov	r3, r1
 800712c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800712e:	2300      	movs	r3, #0
 8007130:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007132:	2300      	movs	r3, #0
 8007134:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800713c:	78fa      	ldrb	r2, [r7, #3]
 800713e:	4611      	mov	r1, r2
 8007140:	4618      	mov	r0, r3
 8007142:	f7fa fe2a 	bl	8001d9a <HAL_PCD_EP_Close>
 8007146:	4603      	mov	r3, r0
 8007148:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800714a:	7bfb      	ldrb	r3, [r7, #15]
 800714c:	4618      	mov	r0, r3
 800714e:	f000 f8eb 	bl	8007328 <USBD_Get_USB_Status>
 8007152:	4603      	mov	r3, r0
 8007154:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007156:	7bbb      	ldrb	r3, [r7, #14]
}
 8007158:	4618      	mov	r0, r3
 800715a:	3710      	adds	r7, #16
 800715c:	46bd      	mov	sp, r7
 800715e:	bd80      	pop	{r7, pc}

08007160 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007160:	b580      	push	{r7, lr}
 8007162:	b084      	sub	sp, #16
 8007164:	af00      	add	r7, sp, #0
 8007166:	6078      	str	r0, [r7, #4]
 8007168:	460b      	mov	r3, r1
 800716a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800716c:	2300      	movs	r3, #0
 800716e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007170:	2300      	movs	r3, #0
 8007172:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800717a:	78fa      	ldrb	r2, [r7, #3]
 800717c:	4611      	mov	r1, r2
 800717e:	4618      	mov	r0, r3
 8007180:	f7fa feca 	bl	8001f18 <HAL_PCD_EP_SetStall>
 8007184:	4603      	mov	r3, r0
 8007186:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007188:	7bfb      	ldrb	r3, [r7, #15]
 800718a:	4618      	mov	r0, r3
 800718c:	f000 f8cc 	bl	8007328 <USBD_Get_USB_Status>
 8007190:	4603      	mov	r3, r0
 8007192:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007194:	7bbb      	ldrb	r3, [r7, #14]
}
 8007196:	4618      	mov	r0, r3
 8007198:	3710      	adds	r7, #16
 800719a:	46bd      	mov	sp, r7
 800719c:	bd80      	pop	{r7, pc}

0800719e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800719e:	b580      	push	{r7, lr}
 80071a0:	b084      	sub	sp, #16
 80071a2:	af00      	add	r7, sp, #0
 80071a4:	6078      	str	r0, [r7, #4]
 80071a6:	460b      	mov	r3, r1
 80071a8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80071aa:	2300      	movs	r3, #0
 80071ac:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80071ae:	2300      	movs	r3, #0
 80071b0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80071b8:	78fa      	ldrb	r2, [r7, #3]
 80071ba:	4611      	mov	r1, r2
 80071bc:	4618      	mov	r0, r3
 80071be:	f7fa ff0e 	bl	8001fde <HAL_PCD_EP_ClrStall>
 80071c2:	4603      	mov	r3, r0
 80071c4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80071c6:	7bfb      	ldrb	r3, [r7, #15]
 80071c8:	4618      	mov	r0, r3
 80071ca:	f000 f8ad 	bl	8007328 <USBD_Get_USB_Status>
 80071ce:	4603      	mov	r3, r0
 80071d0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80071d2:	7bbb      	ldrb	r3, [r7, #14]
}
 80071d4:	4618      	mov	r0, r3
 80071d6:	3710      	adds	r7, #16
 80071d8:	46bd      	mov	sp, r7
 80071da:	bd80      	pop	{r7, pc}

080071dc <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80071dc:	b480      	push	{r7}
 80071de:	b085      	sub	sp, #20
 80071e0:	af00      	add	r7, sp, #0
 80071e2:	6078      	str	r0, [r7, #4]
 80071e4:	460b      	mov	r3, r1
 80071e6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80071ee:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80071f0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	da0b      	bge.n	8007210 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80071f8:	78fb      	ldrb	r3, [r7, #3]
 80071fa:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80071fe:	68f9      	ldr	r1, [r7, #12]
 8007200:	4613      	mov	r3, r2
 8007202:	00db      	lsls	r3, r3, #3
 8007204:	4413      	add	r3, r2
 8007206:	009b      	lsls	r3, r3, #2
 8007208:	440b      	add	r3, r1
 800720a:	3316      	adds	r3, #22
 800720c:	781b      	ldrb	r3, [r3, #0]
 800720e:	e00b      	b.n	8007228 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8007210:	78fb      	ldrb	r3, [r7, #3]
 8007212:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007216:	68f9      	ldr	r1, [r7, #12]
 8007218:	4613      	mov	r3, r2
 800721a:	00db      	lsls	r3, r3, #3
 800721c:	4413      	add	r3, r2
 800721e:	009b      	lsls	r3, r3, #2
 8007220:	440b      	add	r3, r1
 8007222:	f203 2356 	addw	r3, r3, #598	@ 0x256
 8007226:	781b      	ldrb	r3, [r3, #0]
  }
}
 8007228:	4618      	mov	r0, r3
 800722a:	3714      	adds	r7, #20
 800722c:	46bd      	mov	sp, r7
 800722e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007232:	4770      	bx	lr

08007234 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8007234:	b580      	push	{r7, lr}
 8007236:	b084      	sub	sp, #16
 8007238:	af00      	add	r7, sp, #0
 800723a:	6078      	str	r0, [r7, #4]
 800723c:	460b      	mov	r3, r1
 800723e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007240:	2300      	movs	r3, #0
 8007242:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007244:	2300      	movs	r3, #0
 8007246:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800724e:	78fa      	ldrb	r2, [r7, #3]
 8007250:	4611      	mov	r1, r2
 8007252:	4618      	mov	r0, r3
 8007254:	f7fa fd13 	bl	8001c7e <HAL_PCD_SetAddress>
 8007258:	4603      	mov	r3, r0
 800725a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800725c:	7bfb      	ldrb	r3, [r7, #15]
 800725e:	4618      	mov	r0, r3
 8007260:	f000 f862 	bl	8007328 <USBD_Get_USB_Status>
 8007264:	4603      	mov	r3, r0
 8007266:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007268:	7bbb      	ldrb	r3, [r7, #14]
}
 800726a:	4618      	mov	r0, r3
 800726c:	3710      	adds	r7, #16
 800726e:	46bd      	mov	sp, r7
 8007270:	bd80      	pop	{r7, pc}

08007272 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007272:	b580      	push	{r7, lr}
 8007274:	b086      	sub	sp, #24
 8007276:	af00      	add	r7, sp, #0
 8007278:	60f8      	str	r0, [r7, #12]
 800727a:	607a      	str	r2, [r7, #4]
 800727c:	603b      	str	r3, [r7, #0]
 800727e:	460b      	mov	r3, r1
 8007280:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007282:	2300      	movs	r3, #0
 8007284:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007286:	2300      	movs	r3, #0
 8007288:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8007290:	7af9      	ldrb	r1, [r7, #11]
 8007292:	683b      	ldr	r3, [r7, #0]
 8007294:	687a      	ldr	r2, [r7, #4]
 8007296:	f7fa fe05 	bl	8001ea4 <HAL_PCD_EP_Transmit>
 800729a:	4603      	mov	r3, r0
 800729c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800729e:	7dfb      	ldrb	r3, [r7, #23]
 80072a0:	4618      	mov	r0, r3
 80072a2:	f000 f841 	bl	8007328 <USBD_Get_USB_Status>
 80072a6:	4603      	mov	r3, r0
 80072a8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80072aa:	7dbb      	ldrb	r3, [r7, #22]
}
 80072ac:	4618      	mov	r0, r3
 80072ae:	3718      	adds	r7, #24
 80072b0:	46bd      	mov	sp, r7
 80072b2:	bd80      	pop	{r7, pc}

080072b4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80072b4:	b580      	push	{r7, lr}
 80072b6:	b086      	sub	sp, #24
 80072b8:	af00      	add	r7, sp, #0
 80072ba:	60f8      	str	r0, [r7, #12]
 80072bc:	607a      	str	r2, [r7, #4]
 80072be:	603b      	str	r3, [r7, #0]
 80072c0:	460b      	mov	r3, r1
 80072c2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80072c4:	2300      	movs	r3, #0
 80072c6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80072c8:	2300      	movs	r3, #0
 80072ca:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80072d2:	7af9      	ldrb	r1, [r7, #11]
 80072d4:	683b      	ldr	r3, [r7, #0]
 80072d6:	687a      	ldr	r2, [r7, #4]
 80072d8:	f7fa fda9 	bl	8001e2e <HAL_PCD_EP_Receive>
 80072dc:	4603      	mov	r3, r0
 80072de:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80072e0:	7dfb      	ldrb	r3, [r7, #23]
 80072e2:	4618      	mov	r0, r3
 80072e4:	f000 f820 	bl	8007328 <USBD_Get_USB_Status>
 80072e8:	4603      	mov	r3, r0
 80072ea:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80072ec:	7dbb      	ldrb	r3, [r7, #22]
}
 80072ee:	4618      	mov	r0, r3
 80072f0:	3718      	adds	r7, #24
 80072f2:	46bd      	mov	sp, r7
 80072f4:	bd80      	pop	{r7, pc}
	...

080072f8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80072f8:	b480      	push	{r7}
 80072fa:	b083      	sub	sp, #12
 80072fc:	af00      	add	r7, sp, #0
 80072fe:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CUSTOM_HID_HandleTypeDef)/4+1)];/* On 32-bit boundary */
  return mem;
 8007300:	4b03      	ldr	r3, [pc, #12]	@ (8007310 <USBD_static_malloc+0x18>)
}
 8007302:	4618      	mov	r0, r3
 8007304:	370c      	adds	r7, #12
 8007306:	46bd      	mov	sp, r7
 8007308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800730c:	4770      	bx	lr
 800730e:	bf00      	nop
 8007310:	20000f74 	.word	0x20000f74

08007314 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8007314:	b480      	push	{r7}
 8007316:	b083      	sub	sp, #12
 8007318:	af00      	add	r7, sp, #0
 800731a:	6078      	str	r0, [r7, #4]

}
 800731c:	bf00      	nop
 800731e:	370c      	adds	r7, #12
 8007320:	46bd      	mov	sp, r7
 8007322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007326:	4770      	bx	lr

08007328 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007328:	b480      	push	{r7}
 800732a:	b085      	sub	sp, #20
 800732c:	af00      	add	r7, sp, #0
 800732e:	4603      	mov	r3, r0
 8007330:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007332:	2300      	movs	r3, #0
 8007334:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8007336:	79fb      	ldrb	r3, [r7, #7]
 8007338:	2b03      	cmp	r3, #3
 800733a:	d817      	bhi.n	800736c <USBD_Get_USB_Status+0x44>
 800733c:	a201      	add	r2, pc, #4	@ (adr r2, 8007344 <USBD_Get_USB_Status+0x1c>)
 800733e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007342:	bf00      	nop
 8007344:	08007355 	.word	0x08007355
 8007348:	0800735b 	.word	0x0800735b
 800734c:	08007361 	.word	0x08007361
 8007350:	08007367 	.word	0x08007367
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8007354:	2300      	movs	r3, #0
 8007356:	73fb      	strb	r3, [r7, #15]
    break;
 8007358:	e00b      	b.n	8007372 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800735a:	2303      	movs	r3, #3
 800735c:	73fb      	strb	r3, [r7, #15]
    break;
 800735e:	e008      	b.n	8007372 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007360:	2301      	movs	r3, #1
 8007362:	73fb      	strb	r3, [r7, #15]
    break;
 8007364:	e005      	b.n	8007372 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007366:	2303      	movs	r3, #3
 8007368:	73fb      	strb	r3, [r7, #15]
    break;
 800736a:	e002      	b.n	8007372 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800736c:	2303      	movs	r3, #3
 800736e:	73fb      	strb	r3, [r7, #15]
    break;
 8007370:	bf00      	nop
  }
  return usb_status;
 8007372:	7bfb      	ldrb	r3, [r7, #15]
}
 8007374:	4618      	mov	r0, r3
 8007376:	3714      	adds	r7, #20
 8007378:	46bd      	mov	sp, r7
 800737a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800737e:	4770      	bx	lr

08007380 <memset>:
 8007380:	4402      	add	r2, r0
 8007382:	4603      	mov	r3, r0
 8007384:	4293      	cmp	r3, r2
 8007386:	d100      	bne.n	800738a <memset+0xa>
 8007388:	4770      	bx	lr
 800738a:	f803 1b01 	strb.w	r1, [r3], #1
 800738e:	e7f9      	b.n	8007384 <memset+0x4>

08007390 <__libc_init_array>:
 8007390:	b570      	push	{r4, r5, r6, lr}
 8007392:	4d0d      	ldr	r5, [pc, #52]	@ (80073c8 <__libc_init_array+0x38>)
 8007394:	4c0d      	ldr	r4, [pc, #52]	@ (80073cc <__libc_init_array+0x3c>)
 8007396:	1b64      	subs	r4, r4, r5
 8007398:	10a4      	asrs	r4, r4, #2
 800739a:	2600      	movs	r6, #0
 800739c:	42a6      	cmp	r6, r4
 800739e:	d109      	bne.n	80073b4 <__libc_init_array+0x24>
 80073a0:	4d0b      	ldr	r5, [pc, #44]	@ (80073d0 <__libc_init_array+0x40>)
 80073a2:	4c0c      	ldr	r4, [pc, #48]	@ (80073d4 <__libc_init_array+0x44>)
 80073a4:	f000 f818 	bl	80073d8 <_init>
 80073a8:	1b64      	subs	r4, r4, r5
 80073aa:	10a4      	asrs	r4, r4, #2
 80073ac:	2600      	movs	r6, #0
 80073ae:	42a6      	cmp	r6, r4
 80073b0:	d105      	bne.n	80073be <__libc_init_array+0x2e>
 80073b2:	bd70      	pop	{r4, r5, r6, pc}
 80073b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80073b8:	4798      	blx	r3
 80073ba:	3601      	adds	r6, #1
 80073bc:	e7ee      	b.n	800739c <__libc_init_array+0xc>
 80073be:	f855 3b04 	ldr.w	r3, [r5], #4
 80073c2:	4798      	blx	r3
 80073c4:	3601      	adds	r6, #1
 80073c6:	e7f2      	b.n	80073ae <__libc_init_array+0x1e>
 80073c8:	080074a4 	.word	0x080074a4
 80073cc:	080074a4 	.word	0x080074a4
 80073d0:	080074a4 	.word	0x080074a4
 80073d4:	080074a8 	.word	0x080074a8

080073d8 <_init>:
 80073d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073da:	bf00      	nop
 80073dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80073de:	bc08      	pop	{r3}
 80073e0:	469e      	mov	lr, r3
 80073e2:	4770      	bx	lr

080073e4 <_fini>:
 80073e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073e6:	bf00      	nop
 80073e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80073ea:	bc08      	pop	{r3}
 80073ec:	469e      	mov	lr, r3
 80073ee:	4770      	bx	lr
