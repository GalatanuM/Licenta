
SimulareVolan.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000828c  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b8  0800841c  0800841c  0000941c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080084d4  080084d4  0000a66c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080084d4  080084d4  000094d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080084dc  080084dc  0000a66c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080084dc  080084dc  000094dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080084e0  080084e0  000094e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000066c  20000000  080084e4  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000a66c  2**0
                  CONTENTS
 10 .bss          00000cd0  2000066c  2000066c  0000a66c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000133c  2000133c  0000a66c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000a66c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00012f30  00000000  00000000  0000a69c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000032e7  00000000  00000000  0001d5cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001158  00000000  00000000  000208b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000d4c  00000000  00000000  00021a10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022768  00000000  00000000  0002275c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000157ab  00000000  00000000  00044ec4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c3cc3  00000000  00000000  0005a66f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0011e332  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004f4c  00000000  00000000  0011e378  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006c  00000000  00000000  001232c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000066c 	.word	0x2000066c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008404 	.word	0x08008404

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000670 	.word	0x20000670
 80001cc:	08008404 	.word	0x08008404

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b988 	b.w	8000598 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	468e      	mov	lr, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	4688      	mov	r8, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14a      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4617      	mov	r7, r2
 80002b4:	d962      	bls.n	800037c <__udivmoddi4+0xdc>
 80002b6:	fab2 f682 	clz	r6, r2
 80002ba:	b14e      	cbz	r6, 80002d0 <__udivmoddi4+0x30>
 80002bc:	f1c6 0320 	rsb	r3, r6, #32
 80002c0:	fa01 f806 	lsl.w	r8, r1, r6
 80002c4:	fa20 f303 	lsr.w	r3, r0, r3
 80002c8:	40b7      	lsls	r7, r6
 80002ca:	ea43 0808 	orr.w	r8, r3, r8
 80002ce:	40b4      	lsls	r4, r6
 80002d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002d4:	fa1f fc87 	uxth.w	ip, r7
 80002d8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002dc:	0c23      	lsrs	r3, r4, #16
 80002de:	fb0e 8811 	mls	r8, lr, r1, r8
 80002e2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002e6:	fb01 f20c 	mul.w	r2, r1, ip
 80002ea:	429a      	cmp	r2, r3
 80002ec:	d909      	bls.n	8000302 <__udivmoddi4+0x62>
 80002ee:	18fb      	adds	r3, r7, r3
 80002f0:	f101 30ff 	add.w	r0, r1, #4294967295
 80002f4:	f080 80ea 	bcs.w	80004cc <__udivmoddi4+0x22c>
 80002f8:	429a      	cmp	r2, r3
 80002fa:	f240 80e7 	bls.w	80004cc <__udivmoddi4+0x22c>
 80002fe:	3902      	subs	r1, #2
 8000300:	443b      	add	r3, r7
 8000302:	1a9a      	subs	r2, r3, r2
 8000304:	b2a3      	uxth	r3, r4
 8000306:	fbb2 f0fe 	udiv	r0, r2, lr
 800030a:	fb0e 2210 	mls	r2, lr, r0, r2
 800030e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000312:	fb00 fc0c 	mul.w	ip, r0, ip
 8000316:	459c      	cmp	ip, r3
 8000318:	d909      	bls.n	800032e <__udivmoddi4+0x8e>
 800031a:	18fb      	adds	r3, r7, r3
 800031c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000320:	f080 80d6 	bcs.w	80004d0 <__udivmoddi4+0x230>
 8000324:	459c      	cmp	ip, r3
 8000326:	f240 80d3 	bls.w	80004d0 <__udivmoddi4+0x230>
 800032a:	443b      	add	r3, r7
 800032c:	3802      	subs	r0, #2
 800032e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000332:	eba3 030c 	sub.w	r3, r3, ip
 8000336:	2100      	movs	r1, #0
 8000338:	b11d      	cbz	r5, 8000342 <__udivmoddi4+0xa2>
 800033a:	40f3      	lsrs	r3, r6
 800033c:	2200      	movs	r2, #0
 800033e:	e9c5 3200 	strd	r3, r2, [r5]
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d905      	bls.n	8000356 <__udivmoddi4+0xb6>
 800034a:	b10d      	cbz	r5, 8000350 <__udivmoddi4+0xb0>
 800034c:	e9c5 0100 	strd	r0, r1, [r5]
 8000350:	2100      	movs	r1, #0
 8000352:	4608      	mov	r0, r1
 8000354:	e7f5      	b.n	8000342 <__udivmoddi4+0xa2>
 8000356:	fab3 f183 	clz	r1, r3
 800035a:	2900      	cmp	r1, #0
 800035c:	d146      	bne.n	80003ec <__udivmoddi4+0x14c>
 800035e:	4573      	cmp	r3, lr
 8000360:	d302      	bcc.n	8000368 <__udivmoddi4+0xc8>
 8000362:	4282      	cmp	r2, r0
 8000364:	f200 8105 	bhi.w	8000572 <__udivmoddi4+0x2d2>
 8000368:	1a84      	subs	r4, r0, r2
 800036a:	eb6e 0203 	sbc.w	r2, lr, r3
 800036e:	2001      	movs	r0, #1
 8000370:	4690      	mov	r8, r2
 8000372:	2d00      	cmp	r5, #0
 8000374:	d0e5      	beq.n	8000342 <__udivmoddi4+0xa2>
 8000376:	e9c5 4800 	strd	r4, r8, [r5]
 800037a:	e7e2      	b.n	8000342 <__udivmoddi4+0xa2>
 800037c:	2a00      	cmp	r2, #0
 800037e:	f000 8090 	beq.w	80004a2 <__udivmoddi4+0x202>
 8000382:	fab2 f682 	clz	r6, r2
 8000386:	2e00      	cmp	r6, #0
 8000388:	f040 80a4 	bne.w	80004d4 <__udivmoddi4+0x234>
 800038c:	1a8a      	subs	r2, r1, r2
 800038e:	0c03      	lsrs	r3, r0, #16
 8000390:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000394:	b280      	uxth	r0, r0
 8000396:	b2bc      	uxth	r4, r7
 8000398:	2101      	movs	r1, #1
 800039a:	fbb2 fcfe 	udiv	ip, r2, lr
 800039e:	fb0e 221c 	mls	r2, lr, ip, r2
 80003a2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003a6:	fb04 f20c 	mul.w	r2, r4, ip
 80003aa:	429a      	cmp	r2, r3
 80003ac:	d907      	bls.n	80003be <__udivmoddi4+0x11e>
 80003ae:	18fb      	adds	r3, r7, r3
 80003b0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003b4:	d202      	bcs.n	80003bc <__udivmoddi4+0x11c>
 80003b6:	429a      	cmp	r2, r3
 80003b8:	f200 80e0 	bhi.w	800057c <__udivmoddi4+0x2dc>
 80003bc:	46c4      	mov	ip, r8
 80003be:	1a9b      	subs	r3, r3, r2
 80003c0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003c4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003c8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003cc:	fb02 f404 	mul.w	r4, r2, r4
 80003d0:	429c      	cmp	r4, r3
 80003d2:	d907      	bls.n	80003e4 <__udivmoddi4+0x144>
 80003d4:	18fb      	adds	r3, r7, r3
 80003d6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x142>
 80003dc:	429c      	cmp	r4, r3
 80003de:	f200 80ca 	bhi.w	8000576 <__udivmoddi4+0x2d6>
 80003e2:	4602      	mov	r2, r0
 80003e4:	1b1b      	subs	r3, r3, r4
 80003e6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003ea:	e7a5      	b.n	8000338 <__udivmoddi4+0x98>
 80003ec:	f1c1 0620 	rsb	r6, r1, #32
 80003f0:	408b      	lsls	r3, r1
 80003f2:	fa22 f706 	lsr.w	r7, r2, r6
 80003f6:	431f      	orrs	r7, r3
 80003f8:	fa0e f401 	lsl.w	r4, lr, r1
 80003fc:	fa20 f306 	lsr.w	r3, r0, r6
 8000400:	fa2e fe06 	lsr.w	lr, lr, r6
 8000404:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000408:	4323      	orrs	r3, r4
 800040a:	fa00 f801 	lsl.w	r8, r0, r1
 800040e:	fa1f fc87 	uxth.w	ip, r7
 8000412:	fbbe f0f9 	udiv	r0, lr, r9
 8000416:	0c1c      	lsrs	r4, r3, #16
 8000418:	fb09 ee10 	mls	lr, r9, r0, lr
 800041c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000420:	fb00 fe0c 	mul.w	lr, r0, ip
 8000424:	45a6      	cmp	lr, r4
 8000426:	fa02 f201 	lsl.w	r2, r2, r1
 800042a:	d909      	bls.n	8000440 <__udivmoddi4+0x1a0>
 800042c:	193c      	adds	r4, r7, r4
 800042e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000432:	f080 809c 	bcs.w	800056e <__udivmoddi4+0x2ce>
 8000436:	45a6      	cmp	lr, r4
 8000438:	f240 8099 	bls.w	800056e <__udivmoddi4+0x2ce>
 800043c:	3802      	subs	r0, #2
 800043e:	443c      	add	r4, r7
 8000440:	eba4 040e 	sub.w	r4, r4, lr
 8000444:	fa1f fe83 	uxth.w	lr, r3
 8000448:	fbb4 f3f9 	udiv	r3, r4, r9
 800044c:	fb09 4413 	mls	r4, r9, r3, r4
 8000450:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000454:	fb03 fc0c 	mul.w	ip, r3, ip
 8000458:	45a4      	cmp	ip, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x1ce>
 800045c:	193c      	adds	r4, r7, r4
 800045e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000462:	f080 8082 	bcs.w	800056a <__udivmoddi4+0x2ca>
 8000466:	45a4      	cmp	ip, r4
 8000468:	d97f      	bls.n	800056a <__udivmoddi4+0x2ca>
 800046a:	3b02      	subs	r3, #2
 800046c:	443c      	add	r4, r7
 800046e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000472:	eba4 040c 	sub.w	r4, r4, ip
 8000476:	fba0 ec02 	umull	lr, ip, r0, r2
 800047a:	4564      	cmp	r4, ip
 800047c:	4673      	mov	r3, lr
 800047e:	46e1      	mov	r9, ip
 8000480:	d362      	bcc.n	8000548 <__udivmoddi4+0x2a8>
 8000482:	d05f      	beq.n	8000544 <__udivmoddi4+0x2a4>
 8000484:	b15d      	cbz	r5, 800049e <__udivmoddi4+0x1fe>
 8000486:	ebb8 0203 	subs.w	r2, r8, r3
 800048a:	eb64 0409 	sbc.w	r4, r4, r9
 800048e:	fa04 f606 	lsl.w	r6, r4, r6
 8000492:	fa22 f301 	lsr.w	r3, r2, r1
 8000496:	431e      	orrs	r6, r3
 8000498:	40cc      	lsrs	r4, r1
 800049a:	e9c5 6400 	strd	r6, r4, [r5]
 800049e:	2100      	movs	r1, #0
 80004a0:	e74f      	b.n	8000342 <__udivmoddi4+0xa2>
 80004a2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004a6:	0c01      	lsrs	r1, r0, #16
 80004a8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004ac:	b280      	uxth	r0, r0
 80004ae:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004b2:	463b      	mov	r3, r7
 80004b4:	4638      	mov	r0, r7
 80004b6:	463c      	mov	r4, r7
 80004b8:	46b8      	mov	r8, r7
 80004ba:	46be      	mov	lr, r7
 80004bc:	2620      	movs	r6, #32
 80004be:	fbb1 f1f7 	udiv	r1, r1, r7
 80004c2:	eba2 0208 	sub.w	r2, r2, r8
 80004c6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004ca:	e766      	b.n	800039a <__udivmoddi4+0xfa>
 80004cc:	4601      	mov	r1, r0
 80004ce:	e718      	b.n	8000302 <__udivmoddi4+0x62>
 80004d0:	4610      	mov	r0, r2
 80004d2:	e72c      	b.n	800032e <__udivmoddi4+0x8e>
 80004d4:	f1c6 0220 	rsb	r2, r6, #32
 80004d8:	fa2e f302 	lsr.w	r3, lr, r2
 80004dc:	40b7      	lsls	r7, r6
 80004de:	40b1      	lsls	r1, r6
 80004e0:	fa20 f202 	lsr.w	r2, r0, r2
 80004e4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004e8:	430a      	orrs	r2, r1
 80004ea:	fbb3 f8fe 	udiv	r8, r3, lr
 80004ee:	b2bc      	uxth	r4, r7
 80004f0:	fb0e 3318 	mls	r3, lr, r8, r3
 80004f4:	0c11      	lsrs	r1, r2, #16
 80004f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004fa:	fb08 f904 	mul.w	r9, r8, r4
 80004fe:	40b0      	lsls	r0, r6
 8000500:	4589      	cmp	r9, r1
 8000502:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000506:	b280      	uxth	r0, r0
 8000508:	d93e      	bls.n	8000588 <__udivmoddi4+0x2e8>
 800050a:	1879      	adds	r1, r7, r1
 800050c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000510:	d201      	bcs.n	8000516 <__udivmoddi4+0x276>
 8000512:	4589      	cmp	r9, r1
 8000514:	d81f      	bhi.n	8000556 <__udivmoddi4+0x2b6>
 8000516:	eba1 0109 	sub.w	r1, r1, r9
 800051a:	fbb1 f9fe 	udiv	r9, r1, lr
 800051e:	fb09 f804 	mul.w	r8, r9, r4
 8000522:	fb0e 1119 	mls	r1, lr, r9, r1
 8000526:	b292      	uxth	r2, r2
 8000528:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800052c:	4542      	cmp	r2, r8
 800052e:	d229      	bcs.n	8000584 <__udivmoddi4+0x2e4>
 8000530:	18ba      	adds	r2, r7, r2
 8000532:	f109 31ff 	add.w	r1, r9, #4294967295
 8000536:	d2c4      	bcs.n	80004c2 <__udivmoddi4+0x222>
 8000538:	4542      	cmp	r2, r8
 800053a:	d2c2      	bcs.n	80004c2 <__udivmoddi4+0x222>
 800053c:	f1a9 0102 	sub.w	r1, r9, #2
 8000540:	443a      	add	r2, r7
 8000542:	e7be      	b.n	80004c2 <__udivmoddi4+0x222>
 8000544:	45f0      	cmp	r8, lr
 8000546:	d29d      	bcs.n	8000484 <__udivmoddi4+0x1e4>
 8000548:	ebbe 0302 	subs.w	r3, lr, r2
 800054c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000550:	3801      	subs	r0, #1
 8000552:	46e1      	mov	r9, ip
 8000554:	e796      	b.n	8000484 <__udivmoddi4+0x1e4>
 8000556:	eba7 0909 	sub.w	r9, r7, r9
 800055a:	4449      	add	r1, r9
 800055c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000560:	fbb1 f9fe 	udiv	r9, r1, lr
 8000564:	fb09 f804 	mul.w	r8, r9, r4
 8000568:	e7db      	b.n	8000522 <__udivmoddi4+0x282>
 800056a:	4673      	mov	r3, lr
 800056c:	e77f      	b.n	800046e <__udivmoddi4+0x1ce>
 800056e:	4650      	mov	r0, sl
 8000570:	e766      	b.n	8000440 <__udivmoddi4+0x1a0>
 8000572:	4608      	mov	r0, r1
 8000574:	e6fd      	b.n	8000372 <__udivmoddi4+0xd2>
 8000576:	443b      	add	r3, r7
 8000578:	3a02      	subs	r2, #2
 800057a:	e733      	b.n	80003e4 <__udivmoddi4+0x144>
 800057c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000580:	443b      	add	r3, r7
 8000582:	e71c      	b.n	80003be <__udivmoddi4+0x11e>
 8000584:	4649      	mov	r1, r9
 8000586:	e79c      	b.n	80004c2 <__udivmoddi4+0x222>
 8000588:	eba1 0109 	sub.w	r1, r1, r9
 800058c:	46c4      	mov	ip, r8
 800058e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000592:	fb09 f804 	mul.w	r8, r9, r4
 8000596:	e7c4      	b.n	8000522 <__udivmoddi4+0x282>

08000598 <__aeabi_idiv0>:
 8000598:	4770      	bx	lr
 800059a:	bf00      	nop

0800059c <HAL_TIM_IC_CaptureCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800059c:	b480      	push	{r7}
 800059e:	b083      	sub	sp, #12
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	6078      	str	r0, [r7, #4]
	reportContainer.steering = __HAL_TIM_GET_COUNTER(htim);
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80005aa:	b21a      	sxth	r2, r3
 80005ac:	4b0c      	ldr	r3, [pc, #48]	@ (80005e0 <HAL_TIM_IC_CaptureCallback+0x44>)
 80005ae:	809a      	strh	r2, [r3, #4]
	reportContainer.throttle = __HAL_TIM_GET_COUNTER(htim);
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	681b      	ldr	r3, [r3, #0]
 80005b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80005b6:	b29a      	uxth	r2, r3
 80005b8:	4b09      	ldr	r3, [pc, #36]	@ (80005e0 <HAL_TIM_IC_CaptureCallback+0x44>)
 80005ba:	80da      	strh	r2, [r3, #6]
	reportContainer.brake = __HAL_TIM_GET_COUNTER(htim);
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80005c2:	b29a      	uxth	r2, r3
 80005c4:	4b06      	ldr	r3, [pc, #24]	@ (80005e0 <HAL_TIM_IC_CaptureCallback+0x44>)
 80005c6:	811a      	strh	r2, [r3, #8]
	reportContainer.clutch = __HAL_TIM_GET_COUNTER(htim);
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80005ce:	b29a      	uxth	r2, r3
 80005d0:	4b03      	ldr	r3, [pc, #12]	@ (80005e0 <HAL_TIM_IC_CaptureCallback+0x44>)
 80005d2:	815a      	strh	r2, [r3, #10]
}
 80005d4:	bf00      	nop
 80005d6:	370c      	adds	r7, #12
 80005d8:	46bd      	mov	sp, r7
 80005da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005de:	4770      	bx	lr
 80005e0:	200006d0 	.word	0x200006d0

080005e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005e8:	f000 fabe 	bl	8000b68 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005ec:	f000 f826 	bl	800063c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005f0:	f000 f8e2 	bl	80007b8 <MX_GPIO_Init>
  MX_TIM3_Init();
 80005f4:	f000 f88c 	bl	8000710 <MX_TIM3_Init>
  MX_USB_DEVICE_Init();
 80005f8:	f006 fa92 	bl	8006b20 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Encoder_Start_IT(&htim3, TIM_CHANNEL_ALL);
 80005fc:	213c      	movs	r1, #60	@ 0x3c
 80005fe:	480c      	ldr	r0, [pc, #48]	@ (8000630 <main+0x4c>)
 8000600:	f002 fd46 	bl	8003090 <HAL_TIM_Encoder_Start_IT>
  reportContainer.report_id = 0x10;
 8000604:	4b0b      	ldr	r3, [pc, #44]	@ (8000634 <main+0x50>)
 8000606:	2210      	movs	r2, #16
 8000608:	701a      	strb	r2, [r3, #0]
  reportContainer.buttons = 0x55;
 800060a:	4b0a      	ldr	r3, [pc, #40]	@ (8000634 <main+0x50>)
 800060c:	2255      	movs	r2, #85	@ 0x55
 800060e:	709a      	strb	r2, [r3, #2]
  reportContainer.padding1 = 0;
 8000610:	4b08      	ldr	r3, [pc, #32]	@ (8000634 <main+0x50>)
 8000612:	2200      	movs	r2, #0
 8000614:	705a      	strb	r2, [r3, #1]
  reportContainer.padding2 = 0;
 8000616:	4b07      	ldr	r3, [pc, #28]	@ (8000634 <main+0x50>)
 8000618:	2200      	movs	r2, #0
 800061a:	70da      	strb	r2, [r3, #3]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, (uint8_t *)&reportContainer, 12);
 800061c:	220c      	movs	r2, #12
 800061e:	4905      	ldr	r1, [pc, #20]	@ (8000634 <main+0x50>)
 8000620:	4805      	ldr	r0, [pc, #20]	@ (8000638 <main+0x54>)
 8000622:	f004 fdf1 	bl	8005208 <USBD_CUSTOM_HID_SendReport>
	  HAL_Delay(10);
 8000626:	200a      	movs	r0, #10
 8000628:	f000 fb10 	bl	8000c4c <HAL_Delay>
  {
 800062c:	bf00      	nop
 800062e:	e7f5      	b.n	800061c <main+0x38>
 8000630:	20000688 	.word	0x20000688
 8000634:	200006d0 	.word	0x200006d0
 8000638:	200006e8 	.word	0x200006e8

0800063c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	b094      	sub	sp, #80	@ 0x50
 8000640:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000642:	f107 0320 	add.w	r3, r7, #32
 8000646:	2230      	movs	r2, #48	@ 0x30
 8000648:	2100      	movs	r1, #0
 800064a:	4618      	mov	r0, r3
 800064c:	f007 f8c3 	bl	80077d6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000650:	f107 030c 	add.w	r3, r7, #12
 8000654:	2200      	movs	r2, #0
 8000656:	601a      	str	r2, [r3, #0]
 8000658:	605a      	str	r2, [r3, #4]
 800065a:	609a      	str	r2, [r3, #8]
 800065c:	60da      	str	r2, [r3, #12]
 800065e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000660:	2300      	movs	r3, #0
 8000662:	60bb      	str	r3, [r7, #8]
 8000664:	4b28      	ldr	r3, [pc, #160]	@ (8000708 <SystemClock_Config+0xcc>)
 8000666:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000668:	4a27      	ldr	r2, [pc, #156]	@ (8000708 <SystemClock_Config+0xcc>)
 800066a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800066e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000670:	4b25      	ldr	r3, [pc, #148]	@ (8000708 <SystemClock_Config+0xcc>)
 8000672:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000674:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000678:	60bb      	str	r3, [r7, #8]
 800067a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800067c:	2300      	movs	r3, #0
 800067e:	607b      	str	r3, [r7, #4]
 8000680:	4b22      	ldr	r3, [pc, #136]	@ (800070c <SystemClock_Config+0xd0>)
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	4a21      	ldr	r2, [pc, #132]	@ (800070c <SystemClock_Config+0xd0>)
 8000686:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800068a:	6013      	str	r3, [r2, #0]
 800068c:	4b1f      	ldr	r3, [pc, #124]	@ (800070c <SystemClock_Config+0xd0>)
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000694:	607b      	str	r3, [r7, #4]
 8000696:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000698:	2301      	movs	r3, #1
 800069a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800069c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80006a0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006a2:	2302      	movs	r3, #2
 80006a4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006a6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80006aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80006ac:	2304      	movs	r3, #4
 80006ae:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80006b0:	23a8      	movs	r3, #168	@ 0xa8
 80006b2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006b4:	2302      	movs	r3, #2
 80006b6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80006b8:	2307      	movs	r3, #7
 80006ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006bc:	f107 0320 	add.w	r3, r7, #32
 80006c0:	4618      	mov	r0, r3
 80006c2:	f001 ffcf 	bl	8002664 <HAL_RCC_OscConfig>
 80006c6:	4603      	mov	r3, r0
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	d001      	beq.n	80006d0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80006cc:	f000 f8aa 	bl	8000824 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006d0:	230f      	movs	r3, #15
 80006d2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006d4:	2302      	movs	r3, #2
 80006d6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006d8:	2300      	movs	r3, #0
 80006da:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006dc:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80006e0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006e2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80006e6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80006e8:	f107 030c 	add.w	r3, r7, #12
 80006ec:	2105      	movs	r1, #5
 80006ee:	4618      	mov	r0, r3
 80006f0:	f002 fa30 	bl	8002b54 <HAL_RCC_ClockConfig>
 80006f4:	4603      	mov	r3, r0
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d001      	beq.n	80006fe <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80006fa:	f000 f893 	bl	8000824 <Error_Handler>
  }
}
 80006fe:	bf00      	nop
 8000700:	3750      	adds	r7, #80	@ 0x50
 8000702:	46bd      	mov	sp, r7
 8000704:	bd80      	pop	{r7, pc}
 8000706:	bf00      	nop
 8000708:	40023800 	.word	0x40023800
 800070c:	40007000 	.word	0x40007000

08000710 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	b08c      	sub	sp, #48	@ 0x30
 8000714:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000716:	f107 030c 	add.w	r3, r7, #12
 800071a:	2224      	movs	r2, #36	@ 0x24
 800071c:	2100      	movs	r1, #0
 800071e:	4618      	mov	r0, r3
 8000720:	f007 f859 	bl	80077d6 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000724:	1d3b      	adds	r3, r7, #4
 8000726:	2200      	movs	r2, #0
 8000728:	601a      	str	r2, [r3, #0]
 800072a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800072c:	4b20      	ldr	r3, [pc, #128]	@ (80007b0 <MX_TIM3_Init+0xa0>)
 800072e:	4a21      	ldr	r2, [pc, #132]	@ (80007b4 <MX_TIM3_Init+0xa4>)
 8000730:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000732:	4b1f      	ldr	r3, [pc, #124]	@ (80007b0 <MX_TIM3_Init+0xa0>)
 8000734:	2200      	movs	r2, #0
 8000736:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000738:	4b1d      	ldr	r3, [pc, #116]	@ (80007b0 <MX_TIM3_Init+0xa0>)
 800073a:	2200      	movs	r2, #0
 800073c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800073e:	4b1c      	ldr	r3, [pc, #112]	@ (80007b0 <MX_TIM3_Init+0xa0>)
 8000740:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000744:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000746:	4b1a      	ldr	r3, [pc, #104]	@ (80007b0 <MX_TIM3_Init+0xa0>)
 8000748:	2200      	movs	r2, #0
 800074a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800074c:	4b18      	ldr	r3, [pc, #96]	@ (80007b0 <MX_TIM3_Init+0xa0>)
 800074e:	2200      	movs	r2, #0
 8000750:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000752:	2303      	movs	r3, #3
 8000754:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8000756:	2302      	movs	r3, #2
 8000758:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800075a:	2301      	movs	r3, #1
 800075c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800075e:	2300      	movs	r3, #0
 8000760:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000762:	2300      	movs	r3, #0
 8000764:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 8000766:	2302      	movs	r3, #2
 8000768:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800076a:	2301      	movs	r3, #1
 800076c:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800076e:	2300      	movs	r3, #0
 8000770:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8000772:	2300      	movs	r3, #0
 8000774:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8000776:	f107 030c 	add.w	r3, r7, #12
 800077a:	4619      	mov	r1, r3
 800077c:	480c      	ldr	r0, [pc, #48]	@ (80007b0 <MX_TIM3_Init+0xa0>)
 800077e:	f002 fbe1 	bl	8002f44 <HAL_TIM_Encoder_Init>
 8000782:	4603      	mov	r3, r0
 8000784:	2b00      	cmp	r3, #0
 8000786:	d001      	beq.n	800078c <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8000788:	f000 f84c 	bl	8000824 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800078c:	2300      	movs	r3, #0
 800078e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000790:	2300      	movs	r3, #0
 8000792:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000794:	1d3b      	adds	r3, r7, #4
 8000796:	4619      	mov	r1, r3
 8000798:	4805      	ldr	r0, [pc, #20]	@ (80007b0 <MX_TIM3_Init+0xa0>)
 800079a:	f002 ff11 	bl	80035c0 <HAL_TIMEx_MasterConfigSynchronization>
 800079e:	4603      	mov	r3, r0
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d001      	beq.n	80007a8 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 80007a4:	f000 f83e 	bl	8000824 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80007a8:	bf00      	nop
 80007aa:	3730      	adds	r7, #48	@ 0x30
 80007ac:	46bd      	mov	sp, r7
 80007ae:	bd80      	pop	{r7, pc}
 80007b0:	20000688 	.word	0x20000688
 80007b4:	40000400 	.word	0x40000400

080007b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007b8:	b480      	push	{r7}
 80007ba:	b085      	sub	sp, #20
 80007bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007be:	2300      	movs	r3, #0
 80007c0:	60fb      	str	r3, [r7, #12]
 80007c2:	4b17      	ldr	r3, [pc, #92]	@ (8000820 <MX_GPIO_Init+0x68>)
 80007c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007c6:	4a16      	ldr	r2, [pc, #88]	@ (8000820 <MX_GPIO_Init+0x68>)
 80007c8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80007cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80007ce:	4b14      	ldr	r3, [pc, #80]	@ (8000820 <MX_GPIO_Init+0x68>)
 80007d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80007d6:	60fb      	str	r3, [r7, #12]
 80007d8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007da:	2300      	movs	r3, #0
 80007dc:	60bb      	str	r3, [r7, #8]
 80007de:	4b10      	ldr	r3, [pc, #64]	@ (8000820 <MX_GPIO_Init+0x68>)
 80007e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007e2:	4a0f      	ldr	r2, [pc, #60]	@ (8000820 <MX_GPIO_Init+0x68>)
 80007e4:	f043 0301 	orr.w	r3, r3, #1
 80007e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80007ea:	4b0d      	ldr	r3, [pc, #52]	@ (8000820 <MX_GPIO_Init+0x68>)
 80007ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ee:	f003 0301 	and.w	r3, r3, #1
 80007f2:	60bb      	str	r3, [r7, #8]
 80007f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007f6:	2300      	movs	r3, #0
 80007f8:	607b      	str	r3, [r7, #4]
 80007fa:	4b09      	ldr	r3, [pc, #36]	@ (8000820 <MX_GPIO_Init+0x68>)
 80007fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007fe:	4a08      	ldr	r2, [pc, #32]	@ (8000820 <MX_GPIO_Init+0x68>)
 8000800:	f043 0302 	orr.w	r3, r3, #2
 8000804:	6313      	str	r3, [r2, #48]	@ 0x30
 8000806:	4b06      	ldr	r3, [pc, #24]	@ (8000820 <MX_GPIO_Init+0x68>)
 8000808:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800080a:	f003 0302 	and.w	r3, r3, #2
 800080e:	607b      	str	r3, [r7, #4]
 8000810:	687b      	ldr	r3, [r7, #4]

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000812:	bf00      	nop
 8000814:	3714      	adds	r7, #20
 8000816:	46bd      	mov	sp, r7
 8000818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800081c:	4770      	bx	lr
 800081e:	bf00      	nop
 8000820:	40023800 	.word	0x40023800

08000824 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000824:	b480      	push	{r7}
 8000826:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000828:	b672      	cpsid	i
}
 800082a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800082c:	bf00      	nop
 800082e:	e7fd      	b.n	800082c <Error_Handler+0x8>

08000830 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000830:	b480      	push	{r7}
 8000832:	b083      	sub	sp, #12
 8000834:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000836:	2300      	movs	r3, #0
 8000838:	607b      	str	r3, [r7, #4]
 800083a:	4b10      	ldr	r3, [pc, #64]	@ (800087c <HAL_MspInit+0x4c>)
 800083c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800083e:	4a0f      	ldr	r2, [pc, #60]	@ (800087c <HAL_MspInit+0x4c>)
 8000840:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000844:	6453      	str	r3, [r2, #68]	@ 0x44
 8000846:	4b0d      	ldr	r3, [pc, #52]	@ (800087c <HAL_MspInit+0x4c>)
 8000848:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800084a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800084e:	607b      	str	r3, [r7, #4]
 8000850:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000852:	2300      	movs	r3, #0
 8000854:	603b      	str	r3, [r7, #0]
 8000856:	4b09      	ldr	r3, [pc, #36]	@ (800087c <HAL_MspInit+0x4c>)
 8000858:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800085a:	4a08      	ldr	r2, [pc, #32]	@ (800087c <HAL_MspInit+0x4c>)
 800085c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000860:	6413      	str	r3, [r2, #64]	@ 0x40
 8000862:	4b06      	ldr	r3, [pc, #24]	@ (800087c <HAL_MspInit+0x4c>)
 8000864:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000866:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800086a:	603b      	str	r3, [r7, #0]
 800086c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800086e:	bf00      	nop
 8000870:	370c      	adds	r7, #12
 8000872:	46bd      	mov	sp, r7
 8000874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000878:	4770      	bx	lr
 800087a:	bf00      	nop
 800087c:	40023800 	.word	0x40023800

08000880 <HAL_TIM_Encoder_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_encoder: TIM_Encoder handle pointer
  * @retval None
  */
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	b08a      	sub	sp, #40	@ 0x28
 8000884:	af00      	add	r7, sp, #0
 8000886:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000888:	f107 0314 	add.w	r3, r7, #20
 800088c:	2200      	movs	r2, #0
 800088e:	601a      	str	r2, [r3, #0]
 8000890:	605a      	str	r2, [r3, #4]
 8000892:	609a      	str	r2, [r3, #8]
 8000894:	60da      	str	r2, [r3, #12]
 8000896:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	4a1d      	ldr	r2, [pc, #116]	@ (8000914 <HAL_TIM_Encoder_MspInit+0x94>)
 800089e:	4293      	cmp	r3, r2
 80008a0:	d133      	bne.n	800090a <HAL_TIM_Encoder_MspInit+0x8a>
  {
    /* USER CODE BEGIN TIM3_MspInit 0 */

    /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80008a2:	2300      	movs	r3, #0
 80008a4:	613b      	str	r3, [r7, #16]
 80008a6:	4b1c      	ldr	r3, [pc, #112]	@ (8000918 <HAL_TIM_Encoder_MspInit+0x98>)
 80008a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008aa:	4a1b      	ldr	r2, [pc, #108]	@ (8000918 <HAL_TIM_Encoder_MspInit+0x98>)
 80008ac:	f043 0302 	orr.w	r3, r3, #2
 80008b0:	6413      	str	r3, [r2, #64]	@ 0x40
 80008b2:	4b19      	ldr	r3, [pc, #100]	@ (8000918 <HAL_TIM_Encoder_MspInit+0x98>)
 80008b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008b6:	f003 0302 	and.w	r3, r3, #2
 80008ba:	613b      	str	r3, [r7, #16]
 80008bc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80008be:	2300      	movs	r3, #0
 80008c0:	60fb      	str	r3, [r7, #12]
 80008c2:	4b15      	ldr	r3, [pc, #84]	@ (8000918 <HAL_TIM_Encoder_MspInit+0x98>)
 80008c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008c6:	4a14      	ldr	r2, [pc, #80]	@ (8000918 <HAL_TIM_Encoder_MspInit+0x98>)
 80008c8:	f043 0302 	orr.w	r3, r3, #2
 80008cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80008ce:	4b12      	ldr	r3, [pc, #72]	@ (8000918 <HAL_TIM_Encoder_MspInit+0x98>)
 80008d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008d2:	f003 0302 	and.w	r3, r3, #2
 80008d6:	60fb      	str	r3, [r7, #12]
 80008d8:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80008da:	2330      	movs	r3, #48	@ 0x30
 80008dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008de:	2302      	movs	r3, #2
 80008e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e2:	2300      	movs	r3, #0
 80008e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008e6:	2300      	movs	r3, #0
 80008e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80008ea:	2302      	movs	r3, #2
 80008ec:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008ee:	f107 0314 	add.w	r3, r7, #20
 80008f2:	4619      	mov	r1, r3
 80008f4:	4809      	ldr	r0, [pc, #36]	@ (800091c <HAL_TIM_Encoder_MspInit+0x9c>)
 80008f6:	f000 fadf 	bl	8000eb8 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80008fa:	2200      	movs	r2, #0
 80008fc:	2100      	movs	r1, #0
 80008fe:	201d      	movs	r0, #29
 8000900:	f000 faa3 	bl	8000e4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000904:	201d      	movs	r0, #29
 8000906:	f000 fabc 	bl	8000e82 <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM3_MspInit 1 */

  }

}
 800090a:	bf00      	nop
 800090c:	3728      	adds	r7, #40	@ 0x28
 800090e:	46bd      	mov	sp, r7
 8000910:	bd80      	pop	{r7, pc}
 8000912:	bf00      	nop
 8000914:	40000400 	.word	0x40000400
 8000918:	40023800 	.word	0x40023800
 800091c:	40020400 	.word	0x40020400

08000920 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000920:	b480      	push	{r7}
 8000922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000924:	bf00      	nop
 8000926:	e7fd      	b.n	8000924 <NMI_Handler+0x4>

08000928 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000928:	b480      	push	{r7}
 800092a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800092c:	bf00      	nop
 800092e:	e7fd      	b.n	800092c <HardFault_Handler+0x4>

08000930 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000930:	b480      	push	{r7}
 8000932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000934:	bf00      	nop
 8000936:	e7fd      	b.n	8000934 <MemManage_Handler+0x4>

08000938 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000938:	b480      	push	{r7}
 800093a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800093c:	bf00      	nop
 800093e:	e7fd      	b.n	800093c <BusFault_Handler+0x4>

08000940 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000940:	b480      	push	{r7}
 8000942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000944:	bf00      	nop
 8000946:	e7fd      	b.n	8000944 <UsageFault_Handler+0x4>

08000948 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000948:	b480      	push	{r7}
 800094a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800094c:	bf00      	nop
 800094e:	46bd      	mov	sp, r7
 8000950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000954:	4770      	bx	lr

08000956 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000956:	b480      	push	{r7}
 8000958:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800095a:	bf00      	nop
 800095c:	46bd      	mov	sp, r7
 800095e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000962:	4770      	bx	lr

08000964 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000964:	b480      	push	{r7}
 8000966:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000968:	bf00      	nop
 800096a:	46bd      	mov	sp, r7
 800096c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000970:	4770      	bx	lr

08000972 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000972:	b580      	push	{r7, lr}
 8000974:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000976:	f000 f949 	bl	8000c0c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800097a:	bf00      	nop
 800097c:	bd80      	pop	{r7, pc}
	...

08000980 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000984:	4802      	ldr	r0, [pc, #8]	@ (8000990 <TIM3_IRQHandler+0x10>)
 8000986:	f002 fc31 	bl	80031ec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800098a:	bf00      	nop
 800098c:	bd80      	pop	{r7, pc}
 800098e:	bf00      	nop
 8000990:	20000688 	.word	0x20000688

08000994 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000998:	4802      	ldr	r0, [pc, #8]	@ (80009a4 <OTG_FS_IRQHandler+0x10>)
 800099a:	f000 fd6d 	bl	8001478 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800099e:	bf00      	nop
 80009a0:	bd80      	pop	{r7, pc}
 80009a2:	bf00      	nop
 80009a4:	20000cb4 	.word	0x20000cb4

080009a8 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b086      	sub	sp, #24
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	60f8      	str	r0, [r7, #12]
 80009b0:	60b9      	str	r1, [r7, #8]
 80009b2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009b4:	2300      	movs	r3, #0
 80009b6:	617b      	str	r3, [r7, #20]
 80009b8:	e00a      	b.n	80009d0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80009ba:	f3af 8000 	nop.w
 80009be:	4601      	mov	r1, r0
 80009c0:	68bb      	ldr	r3, [r7, #8]
 80009c2:	1c5a      	adds	r2, r3, #1
 80009c4:	60ba      	str	r2, [r7, #8]
 80009c6:	b2ca      	uxtb	r2, r1
 80009c8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009ca:	697b      	ldr	r3, [r7, #20]
 80009cc:	3301      	adds	r3, #1
 80009ce:	617b      	str	r3, [r7, #20]
 80009d0:	697a      	ldr	r2, [r7, #20]
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	429a      	cmp	r2, r3
 80009d6:	dbf0      	blt.n	80009ba <_read+0x12>
  }

  return len;
 80009d8:	687b      	ldr	r3, [r7, #4]
}
 80009da:	4618      	mov	r0, r3
 80009dc:	3718      	adds	r7, #24
 80009de:	46bd      	mov	sp, r7
 80009e0:	bd80      	pop	{r7, pc}

080009e2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80009e2:	b580      	push	{r7, lr}
 80009e4:	b086      	sub	sp, #24
 80009e6:	af00      	add	r7, sp, #0
 80009e8:	60f8      	str	r0, [r7, #12]
 80009ea:	60b9      	str	r1, [r7, #8]
 80009ec:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009ee:	2300      	movs	r3, #0
 80009f0:	617b      	str	r3, [r7, #20]
 80009f2:	e009      	b.n	8000a08 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80009f4:	68bb      	ldr	r3, [r7, #8]
 80009f6:	1c5a      	adds	r2, r3, #1
 80009f8:	60ba      	str	r2, [r7, #8]
 80009fa:	781b      	ldrb	r3, [r3, #0]
 80009fc:	4618      	mov	r0, r3
 80009fe:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a02:	697b      	ldr	r3, [r7, #20]
 8000a04:	3301      	adds	r3, #1
 8000a06:	617b      	str	r3, [r7, #20]
 8000a08:	697a      	ldr	r2, [r7, #20]
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	429a      	cmp	r2, r3
 8000a0e:	dbf1      	blt.n	80009f4 <_write+0x12>
  }
  return len;
 8000a10:	687b      	ldr	r3, [r7, #4]
}
 8000a12:	4618      	mov	r0, r3
 8000a14:	3718      	adds	r7, #24
 8000a16:	46bd      	mov	sp, r7
 8000a18:	bd80      	pop	{r7, pc}

08000a1a <_close>:

int _close(int file)
{
 8000a1a:	b480      	push	{r7}
 8000a1c:	b083      	sub	sp, #12
 8000a1e:	af00      	add	r7, sp, #0
 8000a20:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000a22:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000a26:	4618      	mov	r0, r3
 8000a28:	370c      	adds	r7, #12
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a30:	4770      	bx	lr

08000a32 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000a32:	b480      	push	{r7}
 8000a34:	b083      	sub	sp, #12
 8000a36:	af00      	add	r7, sp, #0
 8000a38:	6078      	str	r0, [r7, #4]
 8000a3a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000a3c:	683b      	ldr	r3, [r7, #0]
 8000a3e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000a42:	605a      	str	r2, [r3, #4]
  return 0;
 8000a44:	2300      	movs	r3, #0
}
 8000a46:	4618      	mov	r0, r3
 8000a48:	370c      	adds	r7, #12
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a50:	4770      	bx	lr

08000a52 <_isatty>:

int _isatty(int file)
{
 8000a52:	b480      	push	{r7}
 8000a54:	b083      	sub	sp, #12
 8000a56:	af00      	add	r7, sp, #0
 8000a58:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000a5a:	2301      	movs	r3, #1
}
 8000a5c:	4618      	mov	r0, r3
 8000a5e:	370c      	adds	r7, #12
 8000a60:	46bd      	mov	sp, r7
 8000a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a66:	4770      	bx	lr

08000a68 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000a68:	b480      	push	{r7}
 8000a6a:	b085      	sub	sp, #20
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	60f8      	str	r0, [r7, #12]
 8000a70:	60b9      	str	r1, [r7, #8]
 8000a72:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000a74:	2300      	movs	r3, #0
}
 8000a76:	4618      	mov	r0, r3
 8000a78:	3714      	adds	r7, #20
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a80:	4770      	bx	lr
	...

08000a84 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b086      	sub	sp, #24
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a8c:	4a14      	ldr	r2, [pc, #80]	@ (8000ae0 <_sbrk+0x5c>)
 8000a8e:	4b15      	ldr	r3, [pc, #84]	@ (8000ae4 <_sbrk+0x60>)
 8000a90:	1ad3      	subs	r3, r2, r3
 8000a92:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a94:	697b      	ldr	r3, [r7, #20]
 8000a96:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a98:	4b13      	ldr	r3, [pc, #76]	@ (8000ae8 <_sbrk+0x64>)
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d102      	bne.n	8000aa6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000aa0:	4b11      	ldr	r3, [pc, #68]	@ (8000ae8 <_sbrk+0x64>)
 8000aa2:	4a12      	ldr	r2, [pc, #72]	@ (8000aec <_sbrk+0x68>)
 8000aa4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000aa6:	4b10      	ldr	r3, [pc, #64]	@ (8000ae8 <_sbrk+0x64>)
 8000aa8:	681a      	ldr	r2, [r3, #0]
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	4413      	add	r3, r2
 8000aae:	693a      	ldr	r2, [r7, #16]
 8000ab0:	429a      	cmp	r2, r3
 8000ab2:	d207      	bcs.n	8000ac4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ab4:	f006 fede 	bl	8007874 <__errno>
 8000ab8:	4603      	mov	r3, r0
 8000aba:	220c      	movs	r2, #12
 8000abc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000abe:	f04f 33ff 	mov.w	r3, #4294967295
 8000ac2:	e009      	b.n	8000ad8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ac4:	4b08      	ldr	r3, [pc, #32]	@ (8000ae8 <_sbrk+0x64>)
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000aca:	4b07      	ldr	r3, [pc, #28]	@ (8000ae8 <_sbrk+0x64>)
 8000acc:	681a      	ldr	r2, [r3, #0]
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	4413      	add	r3, r2
 8000ad2:	4a05      	ldr	r2, [pc, #20]	@ (8000ae8 <_sbrk+0x64>)
 8000ad4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ad6:	68fb      	ldr	r3, [r7, #12]
}
 8000ad8:	4618      	mov	r0, r3
 8000ada:	3718      	adds	r7, #24
 8000adc:	46bd      	mov	sp, r7
 8000ade:	bd80      	pop	{r7, pc}
 8000ae0:	20020000 	.word	0x20020000
 8000ae4:	00000400 	.word	0x00000400
 8000ae8:	200006dc 	.word	0x200006dc
 8000aec:	20001340 	.word	0x20001340

08000af0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000af0:	b480      	push	{r7}
 8000af2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000af4:	4b06      	ldr	r3, [pc, #24]	@ (8000b10 <SystemInit+0x20>)
 8000af6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000afa:	4a05      	ldr	r2, [pc, #20]	@ (8000b10 <SystemInit+0x20>)
 8000afc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000b00:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b04:	bf00      	nop
 8000b06:	46bd      	mov	sp, r7
 8000b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0c:	4770      	bx	lr
 8000b0e:	bf00      	nop
 8000b10:	e000ed00 	.word	0xe000ed00

08000b14 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000b14:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000b4c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000b18:	f7ff ffea 	bl	8000af0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000b1c:	480c      	ldr	r0, [pc, #48]	@ (8000b50 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000b1e:	490d      	ldr	r1, [pc, #52]	@ (8000b54 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000b20:	4a0d      	ldr	r2, [pc, #52]	@ (8000b58 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000b22:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b24:	e002      	b.n	8000b2c <LoopCopyDataInit>

08000b26 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b26:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b28:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b2a:	3304      	adds	r3, #4

08000b2c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b2c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b2e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b30:	d3f9      	bcc.n	8000b26 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b32:	4a0a      	ldr	r2, [pc, #40]	@ (8000b5c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000b34:	4c0a      	ldr	r4, [pc, #40]	@ (8000b60 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000b36:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b38:	e001      	b.n	8000b3e <LoopFillZerobss>

08000b3a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b3a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b3c:	3204      	adds	r2, #4

08000b3e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b3e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b40:	d3fb      	bcc.n	8000b3a <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8000b42:	f006 fe9d 	bl	8007880 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b46:	f7ff fd4d 	bl	80005e4 <main>
  bx  lr    
 8000b4a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000b4c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000b50:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b54:	2000066c 	.word	0x2000066c
  ldr r2, =_sidata
 8000b58:	080084e4 	.word	0x080084e4
  ldr r2, =_sbss
 8000b5c:	2000066c 	.word	0x2000066c
  ldr r4, =_ebss
 8000b60:	2000133c 	.word	0x2000133c

08000b64 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b64:	e7fe      	b.n	8000b64 <ADC_IRQHandler>
	...

08000b68 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000b6c:	4b0e      	ldr	r3, [pc, #56]	@ (8000ba8 <HAL_Init+0x40>)
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	4a0d      	ldr	r2, [pc, #52]	@ (8000ba8 <HAL_Init+0x40>)
 8000b72:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000b76:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000b78:	4b0b      	ldr	r3, [pc, #44]	@ (8000ba8 <HAL_Init+0x40>)
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	4a0a      	ldr	r2, [pc, #40]	@ (8000ba8 <HAL_Init+0x40>)
 8000b7e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000b82:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b84:	4b08      	ldr	r3, [pc, #32]	@ (8000ba8 <HAL_Init+0x40>)
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	4a07      	ldr	r2, [pc, #28]	@ (8000ba8 <HAL_Init+0x40>)
 8000b8a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000b8e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b90:	2003      	movs	r0, #3
 8000b92:	f000 f94f 	bl	8000e34 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b96:	200f      	movs	r0, #15
 8000b98:	f000 f808 	bl	8000bac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b9c:	f7ff fe48 	bl	8000830 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ba0:	2300      	movs	r3, #0
}
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	bd80      	pop	{r7, pc}
 8000ba6:	bf00      	nop
 8000ba8:	40023c00 	.word	0x40023c00

08000bac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b082      	sub	sp, #8
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000bb4:	4b12      	ldr	r3, [pc, #72]	@ (8000c00 <HAL_InitTick+0x54>)
 8000bb6:	681a      	ldr	r2, [r3, #0]
 8000bb8:	4b12      	ldr	r3, [pc, #72]	@ (8000c04 <HAL_InitTick+0x58>)
 8000bba:	781b      	ldrb	r3, [r3, #0]
 8000bbc:	4619      	mov	r1, r3
 8000bbe:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000bc2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000bc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bca:	4618      	mov	r0, r3
 8000bcc:	f000 f967 	bl	8000e9e <HAL_SYSTICK_Config>
 8000bd0:	4603      	mov	r3, r0
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d001      	beq.n	8000bda <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000bd6:	2301      	movs	r3, #1
 8000bd8:	e00e      	b.n	8000bf8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	2b0f      	cmp	r3, #15
 8000bde:	d80a      	bhi.n	8000bf6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000be0:	2200      	movs	r2, #0
 8000be2:	6879      	ldr	r1, [r7, #4]
 8000be4:	f04f 30ff 	mov.w	r0, #4294967295
 8000be8:	f000 f92f 	bl	8000e4a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000bec:	4a06      	ldr	r2, [pc, #24]	@ (8000c08 <HAL_InitTick+0x5c>)
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	e000      	b.n	8000bf8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000bf6:	2301      	movs	r3, #1
}
 8000bf8:	4618      	mov	r0, r3
 8000bfa:	3708      	adds	r7, #8
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	bd80      	pop	{r7, pc}
 8000c00:	20000000 	.word	0x20000000
 8000c04:	20000008 	.word	0x20000008
 8000c08:	20000004 	.word	0x20000004

08000c0c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c10:	4b06      	ldr	r3, [pc, #24]	@ (8000c2c <HAL_IncTick+0x20>)
 8000c12:	781b      	ldrb	r3, [r3, #0]
 8000c14:	461a      	mov	r2, r3
 8000c16:	4b06      	ldr	r3, [pc, #24]	@ (8000c30 <HAL_IncTick+0x24>)
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	4413      	add	r3, r2
 8000c1c:	4a04      	ldr	r2, [pc, #16]	@ (8000c30 <HAL_IncTick+0x24>)
 8000c1e:	6013      	str	r3, [r2, #0]
}
 8000c20:	bf00      	nop
 8000c22:	46bd      	mov	sp, r7
 8000c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c28:	4770      	bx	lr
 8000c2a:	bf00      	nop
 8000c2c:	20000008 	.word	0x20000008
 8000c30:	200006e0 	.word	0x200006e0

08000c34 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c34:	b480      	push	{r7}
 8000c36:	af00      	add	r7, sp, #0
  return uwTick;
 8000c38:	4b03      	ldr	r3, [pc, #12]	@ (8000c48 <HAL_GetTick+0x14>)
 8000c3a:	681b      	ldr	r3, [r3, #0]
}
 8000c3c:	4618      	mov	r0, r3
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop
 8000c48:	200006e0 	.word	0x200006e0

08000c4c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b084      	sub	sp, #16
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c54:	f7ff ffee 	bl	8000c34 <HAL_GetTick>
 8000c58:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c5e:	68fb      	ldr	r3, [r7, #12]
 8000c60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c64:	d005      	beq.n	8000c72 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c66:	4b0a      	ldr	r3, [pc, #40]	@ (8000c90 <HAL_Delay+0x44>)
 8000c68:	781b      	ldrb	r3, [r3, #0]
 8000c6a:	461a      	mov	r2, r3
 8000c6c:	68fb      	ldr	r3, [r7, #12]
 8000c6e:	4413      	add	r3, r2
 8000c70:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000c72:	bf00      	nop
 8000c74:	f7ff ffde 	bl	8000c34 <HAL_GetTick>
 8000c78:	4602      	mov	r2, r0
 8000c7a:	68bb      	ldr	r3, [r7, #8]
 8000c7c:	1ad3      	subs	r3, r2, r3
 8000c7e:	68fa      	ldr	r2, [r7, #12]
 8000c80:	429a      	cmp	r2, r3
 8000c82:	d8f7      	bhi.n	8000c74 <HAL_Delay+0x28>
  {
  }
}
 8000c84:	bf00      	nop
 8000c86:	bf00      	nop
 8000c88:	3710      	adds	r7, #16
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	bd80      	pop	{r7, pc}
 8000c8e:	bf00      	nop
 8000c90:	20000008 	.word	0x20000008

08000c94 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c94:	b480      	push	{r7}
 8000c96:	b085      	sub	sp, #20
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	f003 0307 	and.w	r3, r3, #7
 8000ca2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ca4:	4b0c      	ldr	r3, [pc, #48]	@ (8000cd8 <__NVIC_SetPriorityGrouping+0x44>)
 8000ca6:	68db      	ldr	r3, [r3, #12]
 8000ca8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000caa:	68ba      	ldr	r2, [r7, #8]
 8000cac:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000cb0:	4013      	ands	r3, r2
 8000cb2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000cb4:	68fb      	ldr	r3, [r7, #12]
 8000cb6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000cb8:	68bb      	ldr	r3, [r7, #8]
 8000cba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000cbc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000cc0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000cc4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000cc6:	4a04      	ldr	r2, [pc, #16]	@ (8000cd8 <__NVIC_SetPriorityGrouping+0x44>)
 8000cc8:	68bb      	ldr	r3, [r7, #8]
 8000cca:	60d3      	str	r3, [r2, #12]
}
 8000ccc:	bf00      	nop
 8000cce:	3714      	adds	r7, #20
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd6:	4770      	bx	lr
 8000cd8:	e000ed00 	.word	0xe000ed00

08000cdc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ce0:	4b04      	ldr	r3, [pc, #16]	@ (8000cf4 <__NVIC_GetPriorityGrouping+0x18>)
 8000ce2:	68db      	ldr	r3, [r3, #12]
 8000ce4:	0a1b      	lsrs	r3, r3, #8
 8000ce6:	f003 0307 	and.w	r3, r3, #7
}
 8000cea:	4618      	mov	r0, r3
 8000cec:	46bd      	mov	sp, r7
 8000cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf2:	4770      	bx	lr
 8000cf4:	e000ed00 	.word	0xe000ed00

08000cf8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	b083      	sub	sp, #12
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	4603      	mov	r3, r0
 8000d00:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	db0b      	blt.n	8000d22 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d0a:	79fb      	ldrb	r3, [r7, #7]
 8000d0c:	f003 021f 	and.w	r2, r3, #31
 8000d10:	4907      	ldr	r1, [pc, #28]	@ (8000d30 <__NVIC_EnableIRQ+0x38>)
 8000d12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d16:	095b      	lsrs	r3, r3, #5
 8000d18:	2001      	movs	r0, #1
 8000d1a:	fa00 f202 	lsl.w	r2, r0, r2
 8000d1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000d22:	bf00      	nop
 8000d24:	370c      	adds	r7, #12
 8000d26:	46bd      	mov	sp, r7
 8000d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2c:	4770      	bx	lr
 8000d2e:	bf00      	nop
 8000d30:	e000e100 	.word	0xe000e100

08000d34 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d34:	b480      	push	{r7}
 8000d36:	b083      	sub	sp, #12
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	6039      	str	r1, [r7, #0]
 8000d3e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	db0a      	blt.n	8000d5e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d48:	683b      	ldr	r3, [r7, #0]
 8000d4a:	b2da      	uxtb	r2, r3
 8000d4c:	490c      	ldr	r1, [pc, #48]	@ (8000d80 <__NVIC_SetPriority+0x4c>)
 8000d4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d52:	0112      	lsls	r2, r2, #4
 8000d54:	b2d2      	uxtb	r2, r2
 8000d56:	440b      	add	r3, r1
 8000d58:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d5c:	e00a      	b.n	8000d74 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d5e:	683b      	ldr	r3, [r7, #0]
 8000d60:	b2da      	uxtb	r2, r3
 8000d62:	4908      	ldr	r1, [pc, #32]	@ (8000d84 <__NVIC_SetPriority+0x50>)
 8000d64:	79fb      	ldrb	r3, [r7, #7]
 8000d66:	f003 030f 	and.w	r3, r3, #15
 8000d6a:	3b04      	subs	r3, #4
 8000d6c:	0112      	lsls	r2, r2, #4
 8000d6e:	b2d2      	uxtb	r2, r2
 8000d70:	440b      	add	r3, r1
 8000d72:	761a      	strb	r2, [r3, #24]
}
 8000d74:	bf00      	nop
 8000d76:	370c      	adds	r7, #12
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7e:	4770      	bx	lr
 8000d80:	e000e100 	.word	0xe000e100
 8000d84:	e000ed00 	.word	0xe000ed00

08000d88 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	b089      	sub	sp, #36	@ 0x24
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	60f8      	str	r0, [r7, #12]
 8000d90:	60b9      	str	r1, [r7, #8]
 8000d92:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d94:	68fb      	ldr	r3, [r7, #12]
 8000d96:	f003 0307 	and.w	r3, r3, #7
 8000d9a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d9c:	69fb      	ldr	r3, [r7, #28]
 8000d9e:	f1c3 0307 	rsb	r3, r3, #7
 8000da2:	2b04      	cmp	r3, #4
 8000da4:	bf28      	it	cs
 8000da6:	2304      	movcs	r3, #4
 8000da8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000daa:	69fb      	ldr	r3, [r7, #28]
 8000dac:	3304      	adds	r3, #4
 8000dae:	2b06      	cmp	r3, #6
 8000db0:	d902      	bls.n	8000db8 <NVIC_EncodePriority+0x30>
 8000db2:	69fb      	ldr	r3, [r7, #28]
 8000db4:	3b03      	subs	r3, #3
 8000db6:	e000      	b.n	8000dba <NVIC_EncodePriority+0x32>
 8000db8:	2300      	movs	r3, #0
 8000dba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dbc:	f04f 32ff 	mov.w	r2, #4294967295
 8000dc0:	69bb      	ldr	r3, [r7, #24]
 8000dc2:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc6:	43da      	mvns	r2, r3
 8000dc8:	68bb      	ldr	r3, [r7, #8]
 8000dca:	401a      	ands	r2, r3
 8000dcc:	697b      	ldr	r3, [r7, #20]
 8000dce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000dd0:	f04f 31ff 	mov.w	r1, #4294967295
 8000dd4:	697b      	ldr	r3, [r7, #20]
 8000dd6:	fa01 f303 	lsl.w	r3, r1, r3
 8000dda:	43d9      	mvns	r1, r3
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000de0:	4313      	orrs	r3, r2
         );
}
 8000de2:	4618      	mov	r0, r3
 8000de4:	3724      	adds	r7, #36	@ 0x24
 8000de6:	46bd      	mov	sp, r7
 8000de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dec:	4770      	bx	lr
	...

08000df0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b082      	sub	sp, #8
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	3b01      	subs	r3, #1
 8000dfc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000e00:	d301      	bcc.n	8000e06 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e02:	2301      	movs	r3, #1
 8000e04:	e00f      	b.n	8000e26 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e06:	4a0a      	ldr	r2, [pc, #40]	@ (8000e30 <SysTick_Config+0x40>)
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	3b01      	subs	r3, #1
 8000e0c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e0e:	210f      	movs	r1, #15
 8000e10:	f04f 30ff 	mov.w	r0, #4294967295
 8000e14:	f7ff ff8e 	bl	8000d34 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e18:	4b05      	ldr	r3, [pc, #20]	@ (8000e30 <SysTick_Config+0x40>)
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e1e:	4b04      	ldr	r3, [pc, #16]	@ (8000e30 <SysTick_Config+0x40>)
 8000e20:	2207      	movs	r2, #7
 8000e22:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e24:	2300      	movs	r3, #0
}
 8000e26:	4618      	mov	r0, r3
 8000e28:	3708      	adds	r7, #8
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	bd80      	pop	{r7, pc}
 8000e2e:	bf00      	nop
 8000e30:	e000e010 	.word	0xe000e010

08000e34 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b082      	sub	sp, #8
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e3c:	6878      	ldr	r0, [r7, #4]
 8000e3e:	f7ff ff29 	bl	8000c94 <__NVIC_SetPriorityGrouping>
}
 8000e42:	bf00      	nop
 8000e44:	3708      	adds	r7, #8
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bd80      	pop	{r7, pc}

08000e4a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e4a:	b580      	push	{r7, lr}
 8000e4c:	b086      	sub	sp, #24
 8000e4e:	af00      	add	r7, sp, #0
 8000e50:	4603      	mov	r3, r0
 8000e52:	60b9      	str	r1, [r7, #8]
 8000e54:	607a      	str	r2, [r7, #4]
 8000e56:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e5c:	f7ff ff3e 	bl	8000cdc <__NVIC_GetPriorityGrouping>
 8000e60:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e62:	687a      	ldr	r2, [r7, #4]
 8000e64:	68b9      	ldr	r1, [r7, #8]
 8000e66:	6978      	ldr	r0, [r7, #20]
 8000e68:	f7ff ff8e 	bl	8000d88 <NVIC_EncodePriority>
 8000e6c:	4602      	mov	r2, r0
 8000e6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e72:	4611      	mov	r1, r2
 8000e74:	4618      	mov	r0, r3
 8000e76:	f7ff ff5d 	bl	8000d34 <__NVIC_SetPriority>
}
 8000e7a:	bf00      	nop
 8000e7c:	3718      	adds	r7, #24
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	bd80      	pop	{r7, pc}

08000e82 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e82:	b580      	push	{r7, lr}
 8000e84:	b082      	sub	sp, #8
 8000e86:	af00      	add	r7, sp, #0
 8000e88:	4603      	mov	r3, r0
 8000e8a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e90:	4618      	mov	r0, r3
 8000e92:	f7ff ff31 	bl	8000cf8 <__NVIC_EnableIRQ>
}
 8000e96:	bf00      	nop
 8000e98:	3708      	adds	r7, #8
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	bd80      	pop	{r7, pc}

08000e9e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e9e:	b580      	push	{r7, lr}
 8000ea0:	b082      	sub	sp, #8
 8000ea2:	af00      	add	r7, sp, #0
 8000ea4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ea6:	6878      	ldr	r0, [r7, #4]
 8000ea8:	f7ff ffa2 	bl	8000df0 <SysTick_Config>
 8000eac:	4603      	mov	r3, r0
}
 8000eae:	4618      	mov	r0, r3
 8000eb0:	3708      	adds	r7, #8
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	bd80      	pop	{r7, pc}
	...

08000eb8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	b089      	sub	sp, #36	@ 0x24
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
 8000ec0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000ece:	2300      	movs	r3, #0
 8000ed0:	61fb      	str	r3, [r7, #28]
 8000ed2:	e16b      	b.n	80011ac <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000ed4:	2201      	movs	r2, #1
 8000ed6:	69fb      	ldr	r3, [r7, #28]
 8000ed8:	fa02 f303 	lsl.w	r3, r2, r3
 8000edc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000ede:	683b      	ldr	r3, [r7, #0]
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	697a      	ldr	r2, [r7, #20]
 8000ee4:	4013      	ands	r3, r2
 8000ee6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000ee8:	693a      	ldr	r2, [r7, #16]
 8000eea:	697b      	ldr	r3, [r7, #20]
 8000eec:	429a      	cmp	r2, r3
 8000eee:	f040 815a 	bne.w	80011a6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000ef2:	683b      	ldr	r3, [r7, #0]
 8000ef4:	685b      	ldr	r3, [r3, #4]
 8000ef6:	f003 0303 	and.w	r3, r3, #3
 8000efa:	2b01      	cmp	r3, #1
 8000efc:	d005      	beq.n	8000f0a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000efe:	683b      	ldr	r3, [r7, #0]
 8000f00:	685b      	ldr	r3, [r3, #4]
 8000f02:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f06:	2b02      	cmp	r3, #2
 8000f08:	d130      	bne.n	8000f6c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	689b      	ldr	r3, [r3, #8]
 8000f0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000f10:	69fb      	ldr	r3, [r7, #28]
 8000f12:	005b      	lsls	r3, r3, #1
 8000f14:	2203      	movs	r2, #3
 8000f16:	fa02 f303 	lsl.w	r3, r2, r3
 8000f1a:	43db      	mvns	r3, r3
 8000f1c:	69ba      	ldr	r2, [r7, #24]
 8000f1e:	4013      	ands	r3, r2
 8000f20:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f22:	683b      	ldr	r3, [r7, #0]
 8000f24:	68da      	ldr	r2, [r3, #12]
 8000f26:	69fb      	ldr	r3, [r7, #28]
 8000f28:	005b      	lsls	r3, r3, #1
 8000f2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f2e:	69ba      	ldr	r2, [r7, #24]
 8000f30:	4313      	orrs	r3, r2
 8000f32:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	69ba      	ldr	r2, [r7, #24]
 8000f38:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	685b      	ldr	r3, [r3, #4]
 8000f3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f40:	2201      	movs	r2, #1
 8000f42:	69fb      	ldr	r3, [r7, #28]
 8000f44:	fa02 f303 	lsl.w	r3, r2, r3
 8000f48:	43db      	mvns	r3, r3
 8000f4a:	69ba      	ldr	r2, [r7, #24]
 8000f4c:	4013      	ands	r3, r2
 8000f4e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f50:	683b      	ldr	r3, [r7, #0]
 8000f52:	685b      	ldr	r3, [r3, #4]
 8000f54:	091b      	lsrs	r3, r3, #4
 8000f56:	f003 0201 	and.w	r2, r3, #1
 8000f5a:	69fb      	ldr	r3, [r7, #28]
 8000f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f60:	69ba      	ldr	r2, [r7, #24]
 8000f62:	4313      	orrs	r3, r2
 8000f64:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	69ba      	ldr	r2, [r7, #24]
 8000f6a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f6c:	683b      	ldr	r3, [r7, #0]
 8000f6e:	685b      	ldr	r3, [r3, #4]
 8000f70:	f003 0303 	and.w	r3, r3, #3
 8000f74:	2b03      	cmp	r3, #3
 8000f76:	d017      	beq.n	8000fa8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	68db      	ldr	r3, [r3, #12]
 8000f7c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000f7e:	69fb      	ldr	r3, [r7, #28]
 8000f80:	005b      	lsls	r3, r3, #1
 8000f82:	2203      	movs	r2, #3
 8000f84:	fa02 f303 	lsl.w	r3, r2, r3
 8000f88:	43db      	mvns	r3, r3
 8000f8a:	69ba      	ldr	r2, [r7, #24]
 8000f8c:	4013      	ands	r3, r2
 8000f8e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f90:	683b      	ldr	r3, [r7, #0]
 8000f92:	689a      	ldr	r2, [r3, #8]
 8000f94:	69fb      	ldr	r3, [r7, #28]
 8000f96:	005b      	lsls	r3, r3, #1
 8000f98:	fa02 f303 	lsl.w	r3, r2, r3
 8000f9c:	69ba      	ldr	r2, [r7, #24]
 8000f9e:	4313      	orrs	r3, r2
 8000fa0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	69ba      	ldr	r2, [r7, #24]
 8000fa6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000fa8:	683b      	ldr	r3, [r7, #0]
 8000faa:	685b      	ldr	r3, [r3, #4]
 8000fac:	f003 0303 	and.w	r3, r3, #3
 8000fb0:	2b02      	cmp	r3, #2
 8000fb2:	d123      	bne.n	8000ffc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000fb4:	69fb      	ldr	r3, [r7, #28]
 8000fb6:	08da      	lsrs	r2, r3, #3
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	3208      	adds	r2, #8
 8000fbc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000fc0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000fc2:	69fb      	ldr	r3, [r7, #28]
 8000fc4:	f003 0307 	and.w	r3, r3, #7
 8000fc8:	009b      	lsls	r3, r3, #2
 8000fca:	220f      	movs	r2, #15
 8000fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd0:	43db      	mvns	r3, r3
 8000fd2:	69ba      	ldr	r2, [r7, #24]
 8000fd4:	4013      	ands	r3, r2
 8000fd6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000fd8:	683b      	ldr	r3, [r7, #0]
 8000fda:	691a      	ldr	r2, [r3, #16]
 8000fdc:	69fb      	ldr	r3, [r7, #28]
 8000fde:	f003 0307 	and.w	r3, r3, #7
 8000fe2:	009b      	lsls	r3, r3, #2
 8000fe4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe8:	69ba      	ldr	r2, [r7, #24]
 8000fea:	4313      	orrs	r3, r2
 8000fec:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000fee:	69fb      	ldr	r3, [r7, #28]
 8000ff0:	08da      	lsrs	r2, r3, #3
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	3208      	adds	r2, #8
 8000ff6:	69b9      	ldr	r1, [r7, #24]
 8000ff8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001002:	69fb      	ldr	r3, [r7, #28]
 8001004:	005b      	lsls	r3, r3, #1
 8001006:	2203      	movs	r2, #3
 8001008:	fa02 f303 	lsl.w	r3, r2, r3
 800100c:	43db      	mvns	r3, r3
 800100e:	69ba      	ldr	r2, [r7, #24]
 8001010:	4013      	ands	r3, r2
 8001012:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001014:	683b      	ldr	r3, [r7, #0]
 8001016:	685b      	ldr	r3, [r3, #4]
 8001018:	f003 0203 	and.w	r2, r3, #3
 800101c:	69fb      	ldr	r3, [r7, #28]
 800101e:	005b      	lsls	r3, r3, #1
 8001020:	fa02 f303 	lsl.w	r3, r2, r3
 8001024:	69ba      	ldr	r2, [r7, #24]
 8001026:	4313      	orrs	r3, r2
 8001028:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	69ba      	ldr	r2, [r7, #24]
 800102e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001030:	683b      	ldr	r3, [r7, #0]
 8001032:	685b      	ldr	r3, [r3, #4]
 8001034:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001038:	2b00      	cmp	r3, #0
 800103a:	f000 80b4 	beq.w	80011a6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800103e:	2300      	movs	r3, #0
 8001040:	60fb      	str	r3, [r7, #12]
 8001042:	4b60      	ldr	r3, [pc, #384]	@ (80011c4 <HAL_GPIO_Init+0x30c>)
 8001044:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001046:	4a5f      	ldr	r2, [pc, #380]	@ (80011c4 <HAL_GPIO_Init+0x30c>)
 8001048:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800104c:	6453      	str	r3, [r2, #68]	@ 0x44
 800104e:	4b5d      	ldr	r3, [pc, #372]	@ (80011c4 <HAL_GPIO_Init+0x30c>)
 8001050:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001052:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001056:	60fb      	str	r3, [r7, #12]
 8001058:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800105a:	4a5b      	ldr	r2, [pc, #364]	@ (80011c8 <HAL_GPIO_Init+0x310>)
 800105c:	69fb      	ldr	r3, [r7, #28]
 800105e:	089b      	lsrs	r3, r3, #2
 8001060:	3302      	adds	r3, #2
 8001062:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001066:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001068:	69fb      	ldr	r3, [r7, #28]
 800106a:	f003 0303 	and.w	r3, r3, #3
 800106e:	009b      	lsls	r3, r3, #2
 8001070:	220f      	movs	r2, #15
 8001072:	fa02 f303 	lsl.w	r3, r2, r3
 8001076:	43db      	mvns	r3, r3
 8001078:	69ba      	ldr	r2, [r7, #24]
 800107a:	4013      	ands	r3, r2
 800107c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	4a52      	ldr	r2, [pc, #328]	@ (80011cc <HAL_GPIO_Init+0x314>)
 8001082:	4293      	cmp	r3, r2
 8001084:	d02b      	beq.n	80010de <HAL_GPIO_Init+0x226>
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	4a51      	ldr	r2, [pc, #324]	@ (80011d0 <HAL_GPIO_Init+0x318>)
 800108a:	4293      	cmp	r3, r2
 800108c:	d025      	beq.n	80010da <HAL_GPIO_Init+0x222>
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	4a50      	ldr	r2, [pc, #320]	@ (80011d4 <HAL_GPIO_Init+0x31c>)
 8001092:	4293      	cmp	r3, r2
 8001094:	d01f      	beq.n	80010d6 <HAL_GPIO_Init+0x21e>
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	4a4f      	ldr	r2, [pc, #316]	@ (80011d8 <HAL_GPIO_Init+0x320>)
 800109a:	4293      	cmp	r3, r2
 800109c:	d019      	beq.n	80010d2 <HAL_GPIO_Init+0x21a>
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	4a4e      	ldr	r2, [pc, #312]	@ (80011dc <HAL_GPIO_Init+0x324>)
 80010a2:	4293      	cmp	r3, r2
 80010a4:	d013      	beq.n	80010ce <HAL_GPIO_Init+0x216>
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	4a4d      	ldr	r2, [pc, #308]	@ (80011e0 <HAL_GPIO_Init+0x328>)
 80010aa:	4293      	cmp	r3, r2
 80010ac:	d00d      	beq.n	80010ca <HAL_GPIO_Init+0x212>
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	4a4c      	ldr	r2, [pc, #304]	@ (80011e4 <HAL_GPIO_Init+0x32c>)
 80010b2:	4293      	cmp	r3, r2
 80010b4:	d007      	beq.n	80010c6 <HAL_GPIO_Init+0x20e>
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	4a4b      	ldr	r2, [pc, #300]	@ (80011e8 <HAL_GPIO_Init+0x330>)
 80010ba:	4293      	cmp	r3, r2
 80010bc:	d101      	bne.n	80010c2 <HAL_GPIO_Init+0x20a>
 80010be:	2307      	movs	r3, #7
 80010c0:	e00e      	b.n	80010e0 <HAL_GPIO_Init+0x228>
 80010c2:	2308      	movs	r3, #8
 80010c4:	e00c      	b.n	80010e0 <HAL_GPIO_Init+0x228>
 80010c6:	2306      	movs	r3, #6
 80010c8:	e00a      	b.n	80010e0 <HAL_GPIO_Init+0x228>
 80010ca:	2305      	movs	r3, #5
 80010cc:	e008      	b.n	80010e0 <HAL_GPIO_Init+0x228>
 80010ce:	2304      	movs	r3, #4
 80010d0:	e006      	b.n	80010e0 <HAL_GPIO_Init+0x228>
 80010d2:	2303      	movs	r3, #3
 80010d4:	e004      	b.n	80010e0 <HAL_GPIO_Init+0x228>
 80010d6:	2302      	movs	r3, #2
 80010d8:	e002      	b.n	80010e0 <HAL_GPIO_Init+0x228>
 80010da:	2301      	movs	r3, #1
 80010dc:	e000      	b.n	80010e0 <HAL_GPIO_Init+0x228>
 80010de:	2300      	movs	r3, #0
 80010e0:	69fa      	ldr	r2, [r7, #28]
 80010e2:	f002 0203 	and.w	r2, r2, #3
 80010e6:	0092      	lsls	r2, r2, #2
 80010e8:	4093      	lsls	r3, r2
 80010ea:	69ba      	ldr	r2, [r7, #24]
 80010ec:	4313      	orrs	r3, r2
 80010ee:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80010f0:	4935      	ldr	r1, [pc, #212]	@ (80011c8 <HAL_GPIO_Init+0x310>)
 80010f2:	69fb      	ldr	r3, [r7, #28]
 80010f4:	089b      	lsrs	r3, r3, #2
 80010f6:	3302      	adds	r3, #2
 80010f8:	69ba      	ldr	r2, [r7, #24]
 80010fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80010fe:	4b3b      	ldr	r3, [pc, #236]	@ (80011ec <HAL_GPIO_Init+0x334>)
 8001100:	689b      	ldr	r3, [r3, #8]
 8001102:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001104:	693b      	ldr	r3, [r7, #16]
 8001106:	43db      	mvns	r3, r3
 8001108:	69ba      	ldr	r2, [r7, #24]
 800110a:	4013      	ands	r3, r2
 800110c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800110e:	683b      	ldr	r3, [r7, #0]
 8001110:	685b      	ldr	r3, [r3, #4]
 8001112:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001116:	2b00      	cmp	r3, #0
 8001118:	d003      	beq.n	8001122 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800111a:	69ba      	ldr	r2, [r7, #24]
 800111c:	693b      	ldr	r3, [r7, #16]
 800111e:	4313      	orrs	r3, r2
 8001120:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001122:	4a32      	ldr	r2, [pc, #200]	@ (80011ec <HAL_GPIO_Init+0x334>)
 8001124:	69bb      	ldr	r3, [r7, #24]
 8001126:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001128:	4b30      	ldr	r3, [pc, #192]	@ (80011ec <HAL_GPIO_Init+0x334>)
 800112a:	68db      	ldr	r3, [r3, #12]
 800112c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800112e:	693b      	ldr	r3, [r7, #16]
 8001130:	43db      	mvns	r3, r3
 8001132:	69ba      	ldr	r2, [r7, #24]
 8001134:	4013      	ands	r3, r2
 8001136:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001138:	683b      	ldr	r3, [r7, #0]
 800113a:	685b      	ldr	r3, [r3, #4]
 800113c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001140:	2b00      	cmp	r3, #0
 8001142:	d003      	beq.n	800114c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001144:	69ba      	ldr	r2, [r7, #24]
 8001146:	693b      	ldr	r3, [r7, #16]
 8001148:	4313      	orrs	r3, r2
 800114a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800114c:	4a27      	ldr	r2, [pc, #156]	@ (80011ec <HAL_GPIO_Init+0x334>)
 800114e:	69bb      	ldr	r3, [r7, #24]
 8001150:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001152:	4b26      	ldr	r3, [pc, #152]	@ (80011ec <HAL_GPIO_Init+0x334>)
 8001154:	685b      	ldr	r3, [r3, #4]
 8001156:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001158:	693b      	ldr	r3, [r7, #16]
 800115a:	43db      	mvns	r3, r3
 800115c:	69ba      	ldr	r2, [r7, #24]
 800115e:	4013      	ands	r3, r2
 8001160:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001162:	683b      	ldr	r3, [r7, #0]
 8001164:	685b      	ldr	r3, [r3, #4]
 8001166:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800116a:	2b00      	cmp	r3, #0
 800116c:	d003      	beq.n	8001176 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800116e:	69ba      	ldr	r2, [r7, #24]
 8001170:	693b      	ldr	r3, [r7, #16]
 8001172:	4313      	orrs	r3, r2
 8001174:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001176:	4a1d      	ldr	r2, [pc, #116]	@ (80011ec <HAL_GPIO_Init+0x334>)
 8001178:	69bb      	ldr	r3, [r7, #24]
 800117a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800117c:	4b1b      	ldr	r3, [pc, #108]	@ (80011ec <HAL_GPIO_Init+0x334>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001182:	693b      	ldr	r3, [r7, #16]
 8001184:	43db      	mvns	r3, r3
 8001186:	69ba      	ldr	r2, [r7, #24]
 8001188:	4013      	ands	r3, r2
 800118a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800118c:	683b      	ldr	r3, [r7, #0]
 800118e:	685b      	ldr	r3, [r3, #4]
 8001190:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001194:	2b00      	cmp	r3, #0
 8001196:	d003      	beq.n	80011a0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001198:	69ba      	ldr	r2, [r7, #24]
 800119a:	693b      	ldr	r3, [r7, #16]
 800119c:	4313      	orrs	r3, r2
 800119e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80011a0:	4a12      	ldr	r2, [pc, #72]	@ (80011ec <HAL_GPIO_Init+0x334>)
 80011a2:	69bb      	ldr	r3, [r7, #24]
 80011a4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80011a6:	69fb      	ldr	r3, [r7, #28]
 80011a8:	3301      	adds	r3, #1
 80011aa:	61fb      	str	r3, [r7, #28]
 80011ac:	69fb      	ldr	r3, [r7, #28]
 80011ae:	2b0f      	cmp	r3, #15
 80011b0:	f67f ae90 	bls.w	8000ed4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80011b4:	bf00      	nop
 80011b6:	bf00      	nop
 80011b8:	3724      	adds	r7, #36	@ 0x24
 80011ba:	46bd      	mov	sp, r7
 80011bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c0:	4770      	bx	lr
 80011c2:	bf00      	nop
 80011c4:	40023800 	.word	0x40023800
 80011c8:	40013800 	.word	0x40013800
 80011cc:	40020000 	.word	0x40020000
 80011d0:	40020400 	.word	0x40020400
 80011d4:	40020800 	.word	0x40020800
 80011d8:	40020c00 	.word	0x40020c00
 80011dc:	40021000 	.word	0x40021000
 80011e0:	40021400 	.word	0x40021400
 80011e4:	40021800 	.word	0x40021800
 80011e8:	40021c00 	.word	0x40021c00
 80011ec:	40013c00 	.word	0x40013c00

080011f0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b086      	sub	sp, #24
 80011f4:	af02      	add	r7, sp, #8
 80011f6:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d101      	bne.n	8001202 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80011fe:	2301      	movs	r3, #1
 8001200:	e101      	b.n	8001406 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 800120e:	b2db      	uxtb	r3, r3
 8001210:	2b00      	cmp	r3, #0
 8001212:	d106      	bne.n	8001222 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	2200      	movs	r2, #0
 8001218:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800121c:	6878      	ldr	r0, [r7, #4]
 800121e:	f005 fec1 	bl	8006fa4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	2203      	movs	r2, #3
 8001226:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 800122a:	68bb      	ldr	r3, [r7, #8]
 800122c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001230:	d102      	bne.n	8001238 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	2200      	movs	r2, #0
 8001236:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	4618      	mov	r0, r3
 800123e:	f002 fb66 	bl	800390e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	6818      	ldr	r0, [r3, #0]
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	7c1a      	ldrb	r2, [r3, #16]
 800124a:	f88d 2000 	strb.w	r2, [sp]
 800124e:	3304      	adds	r3, #4
 8001250:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001252:	f002 fa45 	bl	80036e0 <USB_CoreInit>
 8001256:	4603      	mov	r3, r0
 8001258:	2b00      	cmp	r3, #0
 800125a:	d005      	beq.n	8001268 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	2202      	movs	r2, #2
 8001260:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001264:	2301      	movs	r3, #1
 8001266:	e0ce      	b.n	8001406 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	2100      	movs	r1, #0
 800126e:	4618      	mov	r0, r3
 8001270:	f002 fb5e 	bl	8003930 <USB_SetCurrentMode>
 8001274:	4603      	mov	r3, r0
 8001276:	2b00      	cmp	r3, #0
 8001278:	d005      	beq.n	8001286 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	2202      	movs	r2, #2
 800127e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001282:	2301      	movs	r3, #1
 8001284:	e0bf      	b.n	8001406 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001286:	2300      	movs	r3, #0
 8001288:	73fb      	strb	r3, [r7, #15]
 800128a:	e04a      	b.n	8001322 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800128c:	7bfa      	ldrb	r2, [r7, #15]
 800128e:	6879      	ldr	r1, [r7, #4]
 8001290:	4613      	mov	r3, r2
 8001292:	00db      	lsls	r3, r3, #3
 8001294:	4413      	add	r3, r2
 8001296:	009b      	lsls	r3, r3, #2
 8001298:	440b      	add	r3, r1
 800129a:	3315      	adds	r3, #21
 800129c:	2201      	movs	r2, #1
 800129e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80012a0:	7bfa      	ldrb	r2, [r7, #15]
 80012a2:	6879      	ldr	r1, [r7, #4]
 80012a4:	4613      	mov	r3, r2
 80012a6:	00db      	lsls	r3, r3, #3
 80012a8:	4413      	add	r3, r2
 80012aa:	009b      	lsls	r3, r3, #2
 80012ac:	440b      	add	r3, r1
 80012ae:	3314      	adds	r3, #20
 80012b0:	7bfa      	ldrb	r2, [r7, #15]
 80012b2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80012b4:	7bfa      	ldrb	r2, [r7, #15]
 80012b6:	7bfb      	ldrb	r3, [r7, #15]
 80012b8:	b298      	uxth	r0, r3
 80012ba:	6879      	ldr	r1, [r7, #4]
 80012bc:	4613      	mov	r3, r2
 80012be:	00db      	lsls	r3, r3, #3
 80012c0:	4413      	add	r3, r2
 80012c2:	009b      	lsls	r3, r3, #2
 80012c4:	440b      	add	r3, r1
 80012c6:	332e      	adds	r3, #46	@ 0x2e
 80012c8:	4602      	mov	r2, r0
 80012ca:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80012cc:	7bfa      	ldrb	r2, [r7, #15]
 80012ce:	6879      	ldr	r1, [r7, #4]
 80012d0:	4613      	mov	r3, r2
 80012d2:	00db      	lsls	r3, r3, #3
 80012d4:	4413      	add	r3, r2
 80012d6:	009b      	lsls	r3, r3, #2
 80012d8:	440b      	add	r3, r1
 80012da:	3318      	adds	r3, #24
 80012dc:	2200      	movs	r2, #0
 80012de:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80012e0:	7bfa      	ldrb	r2, [r7, #15]
 80012e2:	6879      	ldr	r1, [r7, #4]
 80012e4:	4613      	mov	r3, r2
 80012e6:	00db      	lsls	r3, r3, #3
 80012e8:	4413      	add	r3, r2
 80012ea:	009b      	lsls	r3, r3, #2
 80012ec:	440b      	add	r3, r1
 80012ee:	331c      	adds	r3, #28
 80012f0:	2200      	movs	r2, #0
 80012f2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80012f4:	7bfa      	ldrb	r2, [r7, #15]
 80012f6:	6879      	ldr	r1, [r7, #4]
 80012f8:	4613      	mov	r3, r2
 80012fa:	00db      	lsls	r3, r3, #3
 80012fc:	4413      	add	r3, r2
 80012fe:	009b      	lsls	r3, r3, #2
 8001300:	440b      	add	r3, r1
 8001302:	3320      	adds	r3, #32
 8001304:	2200      	movs	r2, #0
 8001306:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001308:	7bfa      	ldrb	r2, [r7, #15]
 800130a:	6879      	ldr	r1, [r7, #4]
 800130c:	4613      	mov	r3, r2
 800130e:	00db      	lsls	r3, r3, #3
 8001310:	4413      	add	r3, r2
 8001312:	009b      	lsls	r3, r3, #2
 8001314:	440b      	add	r3, r1
 8001316:	3324      	adds	r3, #36	@ 0x24
 8001318:	2200      	movs	r2, #0
 800131a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800131c:	7bfb      	ldrb	r3, [r7, #15]
 800131e:	3301      	adds	r3, #1
 8001320:	73fb      	strb	r3, [r7, #15]
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	791b      	ldrb	r3, [r3, #4]
 8001326:	7bfa      	ldrb	r2, [r7, #15]
 8001328:	429a      	cmp	r2, r3
 800132a:	d3af      	bcc.n	800128c <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800132c:	2300      	movs	r3, #0
 800132e:	73fb      	strb	r3, [r7, #15]
 8001330:	e044      	b.n	80013bc <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001332:	7bfa      	ldrb	r2, [r7, #15]
 8001334:	6879      	ldr	r1, [r7, #4]
 8001336:	4613      	mov	r3, r2
 8001338:	00db      	lsls	r3, r3, #3
 800133a:	4413      	add	r3, r2
 800133c:	009b      	lsls	r3, r3, #2
 800133e:	440b      	add	r3, r1
 8001340:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8001344:	2200      	movs	r2, #0
 8001346:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001348:	7bfa      	ldrb	r2, [r7, #15]
 800134a:	6879      	ldr	r1, [r7, #4]
 800134c:	4613      	mov	r3, r2
 800134e:	00db      	lsls	r3, r3, #3
 8001350:	4413      	add	r3, r2
 8001352:	009b      	lsls	r3, r3, #2
 8001354:	440b      	add	r3, r1
 8001356:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 800135a:	7bfa      	ldrb	r2, [r7, #15]
 800135c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800135e:	7bfa      	ldrb	r2, [r7, #15]
 8001360:	6879      	ldr	r1, [r7, #4]
 8001362:	4613      	mov	r3, r2
 8001364:	00db      	lsls	r3, r3, #3
 8001366:	4413      	add	r3, r2
 8001368:	009b      	lsls	r3, r3, #2
 800136a:	440b      	add	r3, r1
 800136c:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8001370:	2200      	movs	r2, #0
 8001372:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001374:	7bfa      	ldrb	r2, [r7, #15]
 8001376:	6879      	ldr	r1, [r7, #4]
 8001378:	4613      	mov	r3, r2
 800137a:	00db      	lsls	r3, r3, #3
 800137c:	4413      	add	r3, r2
 800137e:	009b      	lsls	r3, r3, #2
 8001380:	440b      	add	r3, r1
 8001382:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8001386:	2200      	movs	r2, #0
 8001388:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800138a:	7bfa      	ldrb	r2, [r7, #15]
 800138c:	6879      	ldr	r1, [r7, #4]
 800138e:	4613      	mov	r3, r2
 8001390:	00db      	lsls	r3, r3, #3
 8001392:	4413      	add	r3, r2
 8001394:	009b      	lsls	r3, r3, #2
 8001396:	440b      	add	r3, r1
 8001398:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800139c:	2200      	movs	r2, #0
 800139e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80013a0:	7bfa      	ldrb	r2, [r7, #15]
 80013a2:	6879      	ldr	r1, [r7, #4]
 80013a4:	4613      	mov	r3, r2
 80013a6:	00db      	lsls	r3, r3, #3
 80013a8:	4413      	add	r3, r2
 80013aa:	009b      	lsls	r3, r3, #2
 80013ac:	440b      	add	r3, r1
 80013ae:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80013b2:	2200      	movs	r2, #0
 80013b4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80013b6:	7bfb      	ldrb	r3, [r7, #15]
 80013b8:	3301      	adds	r3, #1
 80013ba:	73fb      	strb	r3, [r7, #15]
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	791b      	ldrb	r3, [r3, #4]
 80013c0:	7bfa      	ldrb	r2, [r7, #15]
 80013c2:	429a      	cmp	r2, r3
 80013c4:	d3b5      	bcc.n	8001332 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	6818      	ldr	r0, [r3, #0]
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	7c1a      	ldrb	r2, [r3, #16]
 80013ce:	f88d 2000 	strb.w	r2, [sp]
 80013d2:	3304      	adds	r3, #4
 80013d4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80013d6:	f002 faf7 	bl	80039c8 <USB_DevInit>
 80013da:	4603      	mov	r3, r0
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d005      	beq.n	80013ec <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	2202      	movs	r2, #2
 80013e4:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80013e8:	2301      	movs	r3, #1
 80013ea:	e00c      	b.n	8001406 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	2200      	movs	r2, #0
 80013f0:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	2201      	movs	r2, #1
 80013f6:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	4618      	mov	r0, r3
 8001400:	f003 fb41 	bl	8004a86 <USB_DevDisconnect>

  return HAL_OK;
 8001404:	2300      	movs	r3, #0
}
 8001406:	4618      	mov	r0, r3
 8001408:	3710      	adds	r7, #16
 800140a:	46bd      	mov	sp, r7
 800140c:	bd80      	pop	{r7, pc}

0800140e <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800140e:	b580      	push	{r7, lr}
 8001410:	b084      	sub	sp, #16
 8001412:	af00      	add	r7, sp, #0
 8001414:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001422:	2b01      	cmp	r3, #1
 8001424:	d101      	bne.n	800142a <HAL_PCD_Start+0x1c>
 8001426:	2302      	movs	r3, #2
 8001428:	e022      	b.n	8001470 <HAL_PCD_Start+0x62>
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	2201      	movs	r2, #1
 800142e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	68db      	ldr	r3, [r3, #12]
 8001436:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800143a:	2b00      	cmp	r3, #0
 800143c:	d009      	beq.n	8001452 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8001442:	2b01      	cmp	r3, #1
 8001444:	d105      	bne.n	8001452 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800144a:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	4618      	mov	r0, r3
 8001458:	f002 fa48 	bl	80038ec <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	4618      	mov	r0, r3
 8001462:	f003 faef 	bl	8004a44 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	2200      	movs	r2, #0
 800146a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800146e:	2300      	movs	r3, #0
}
 8001470:	4618      	mov	r0, r3
 8001472:	3710      	adds	r7, #16
 8001474:	46bd      	mov	sp, r7
 8001476:	bd80      	pop	{r7, pc}

08001478 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001478:	b590      	push	{r4, r7, lr}
 800147a:	b08d      	sub	sp, #52	@ 0x34
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001486:	6a3b      	ldr	r3, [r7, #32]
 8001488:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	4618      	mov	r0, r3
 8001490:	f003 fbad 	bl	8004bee <USB_GetMode>
 8001494:	4603      	mov	r3, r0
 8001496:	2b00      	cmp	r3, #0
 8001498:	f040 848c 	bne.w	8001db4 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	4618      	mov	r0, r3
 80014a2:	f003 fb11 	bl	8004ac8 <USB_ReadInterrupts>
 80014a6:	4603      	mov	r3, r0
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	f000 8482 	beq.w	8001db2 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80014ae:	69fb      	ldr	r3, [r7, #28]
 80014b0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80014b4:	689b      	ldr	r3, [r3, #8]
 80014b6:	0a1b      	lsrs	r3, r3, #8
 80014b8:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	4618      	mov	r0, r3
 80014c8:	f003 fafe 	bl	8004ac8 <USB_ReadInterrupts>
 80014cc:	4603      	mov	r3, r0
 80014ce:	f003 0302 	and.w	r3, r3, #2
 80014d2:	2b02      	cmp	r3, #2
 80014d4:	d107      	bne.n	80014e6 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	695a      	ldr	r2, [r3, #20]
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	f002 0202 	and.w	r2, r2, #2
 80014e4:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	4618      	mov	r0, r3
 80014ec:	f003 faec 	bl	8004ac8 <USB_ReadInterrupts>
 80014f0:	4603      	mov	r3, r0
 80014f2:	f003 0310 	and.w	r3, r3, #16
 80014f6:	2b10      	cmp	r3, #16
 80014f8:	d161      	bne.n	80015be <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	699a      	ldr	r2, [r3, #24]
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	f022 0210 	bic.w	r2, r2, #16
 8001508:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800150a:	6a3b      	ldr	r3, [r7, #32]
 800150c:	6a1b      	ldr	r3, [r3, #32]
 800150e:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8001510:	69bb      	ldr	r3, [r7, #24]
 8001512:	f003 020f 	and.w	r2, r3, #15
 8001516:	4613      	mov	r3, r2
 8001518:	00db      	lsls	r3, r3, #3
 800151a:	4413      	add	r3, r2
 800151c:	009b      	lsls	r3, r3, #2
 800151e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001522:	687a      	ldr	r2, [r7, #4]
 8001524:	4413      	add	r3, r2
 8001526:	3304      	adds	r3, #4
 8001528:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800152a:	69bb      	ldr	r3, [r7, #24]
 800152c:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8001530:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8001534:	d124      	bne.n	8001580 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001536:	69ba      	ldr	r2, [r7, #24]
 8001538:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 800153c:	4013      	ands	r3, r2
 800153e:	2b00      	cmp	r3, #0
 8001540:	d035      	beq.n	80015ae <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001542:	697b      	ldr	r3, [r7, #20]
 8001544:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001546:	69bb      	ldr	r3, [r7, #24]
 8001548:	091b      	lsrs	r3, r3, #4
 800154a:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800154c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001550:	b29b      	uxth	r3, r3
 8001552:	461a      	mov	r2, r3
 8001554:	6a38      	ldr	r0, [r7, #32]
 8001556:	f003 f923 	bl	80047a0 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800155a:	697b      	ldr	r3, [r7, #20]
 800155c:	68da      	ldr	r2, [r3, #12]
 800155e:	69bb      	ldr	r3, [r7, #24]
 8001560:	091b      	lsrs	r3, r3, #4
 8001562:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001566:	441a      	add	r2, r3
 8001568:	697b      	ldr	r3, [r7, #20]
 800156a:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800156c:	697b      	ldr	r3, [r7, #20]
 800156e:	695a      	ldr	r2, [r3, #20]
 8001570:	69bb      	ldr	r3, [r7, #24]
 8001572:	091b      	lsrs	r3, r3, #4
 8001574:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001578:	441a      	add	r2, r3
 800157a:	697b      	ldr	r3, [r7, #20]
 800157c:	615a      	str	r2, [r3, #20]
 800157e:	e016      	b.n	80015ae <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8001580:	69bb      	ldr	r3, [r7, #24]
 8001582:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8001586:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800158a:	d110      	bne.n	80015ae <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8001592:	2208      	movs	r2, #8
 8001594:	4619      	mov	r1, r3
 8001596:	6a38      	ldr	r0, [r7, #32]
 8001598:	f003 f902 	bl	80047a0 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800159c:	697b      	ldr	r3, [r7, #20]
 800159e:	695a      	ldr	r2, [r3, #20]
 80015a0:	69bb      	ldr	r3, [r7, #24]
 80015a2:	091b      	lsrs	r3, r3, #4
 80015a4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80015a8:	441a      	add	r2, r3
 80015aa:	697b      	ldr	r3, [r7, #20]
 80015ac:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	699a      	ldr	r2, [r3, #24]
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	f042 0210 	orr.w	r2, r2, #16
 80015bc:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	4618      	mov	r0, r3
 80015c4:	f003 fa80 	bl	8004ac8 <USB_ReadInterrupts>
 80015c8:	4603      	mov	r3, r0
 80015ca:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80015ce:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80015d2:	f040 80a7 	bne.w	8001724 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80015d6:	2300      	movs	r3, #0
 80015d8:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	4618      	mov	r0, r3
 80015e0:	f003 fa85 	bl	8004aee <USB_ReadDevAllOutEpInterrupt>
 80015e4:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 80015e6:	e099      	b.n	800171c <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80015e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80015ea:	f003 0301 	and.w	r3, r3, #1
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	f000 808e 	beq.w	8001710 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80015fa:	b2d2      	uxtb	r2, r2
 80015fc:	4611      	mov	r1, r2
 80015fe:	4618      	mov	r0, r3
 8001600:	f003 faa9 	bl	8004b56 <USB_ReadDevOutEPInterrupt>
 8001604:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001606:	693b      	ldr	r3, [r7, #16]
 8001608:	f003 0301 	and.w	r3, r3, #1
 800160c:	2b00      	cmp	r3, #0
 800160e:	d00c      	beq.n	800162a <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001610:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001612:	015a      	lsls	r2, r3, #5
 8001614:	69fb      	ldr	r3, [r7, #28]
 8001616:	4413      	add	r3, r2
 8001618:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800161c:	461a      	mov	r2, r3
 800161e:	2301      	movs	r3, #1
 8001620:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001622:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001624:	6878      	ldr	r0, [r7, #4]
 8001626:	f000 fe8b 	bl	8002340 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800162a:	693b      	ldr	r3, [r7, #16]
 800162c:	f003 0308 	and.w	r3, r3, #8
 8001630:	2b00      	cmp	r3, #0
 8001632:	d00c      	beq.n	800164e <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001634:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001636:	015a      	lsls	r2, r3, #5
 8001638:	69fb      	ldr	r3, [r7, #28]
 800163a:	4413      	add	r3, r2
 800163c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001640:	461a      	mov	r2, r3
 8001642:	2308      	movs	r3, #8
 8001644:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8001646:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001648:	6878      	ldr	r0, [r7, #4]
 800164a:	f000 ff61 	bl	8002510 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800164e:	693b      	ldr	r3, [r7, #16]
 8001650:	f003 0310 	and.w	r3, r3, #16
 8001654:	2b00      	cmp	r3, #0
 8001656:	d008      	beq.n	800166a <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001658:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800165a:	015a      	lsls	r2, r3, #5
 800165c:	69fb      	ldr	r3, [r7, #28]
 800165e:	4413      	add	r3, r2
 8001660:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001664:	461a      	mov	r2, r3
 8001666:	2310      	movs	r3, #16
 8001668:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800166a:	693b      	ldr	r3, [r7, #16]
 800166c:	f003 0302 	and.w	r3, r3, #2
 8001670:	2b00      	cmp	r3, #0
 8001672:	d030      	beq.n	80016d6 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8001674:	6a3b      	ldr	r3, [r7, #32]
 8001676:	695b      	ldr	r3, [r3, #20]
 8001678:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800167c:	2b80      	cmp	r3, #128	@ 0x80
 800167e:	d109      	bne.n	8001694 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8001680:	69fb      	ldr	r3, [r7, #28]
 8001682:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001686:	685b      	ldr	r3, [r3, #4]
 8001688:	69fa      	ldr	r2, [r7, #28]
 800168a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800168e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001692:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8001694:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001696:	4613      	mov	r3, r2
 8001698:	00db      	lsls	r3, r3, #3
 800169a:	4413      	add	r3, r2
 800169c:	009b      	lsls	r3, r3, #2
 800169e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80016a2:	687a      	ldr	r2, [r7, #4]
 80016a4:	4413      	add	r3, r2
 80016a6:	3304      	adds	r3, #4
 80016a8:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80016aa:	697b      	ldr	r3, [r7, #20]
 80016ac:	78db      	ldrb	r3, [r3, #3]
 80016ae:	2b01      	cmp	r3, #1
 80016b0:	d108      	bne.n	80016c4 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80016b2:	697b      	ldr	r3, [r7, #20]
 80016b4:	2200      	movs	r2, #0
 80016b6:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80016b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016ba:	b2db      	uxtb	r3, r3
 80016bc:	4619      	mov	r1, r3
 80016be:	6878      	ldr	r0, [r7, #4]
 80016c0:	f005 fd76 	bl	80071b0 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80016c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016c6:	015a      	lsls	r2, r3, #5
 80016c8:	69fb      	ldr	r3, [r7, #28]
 80016ca:	4413      	add	r3, r2
 80016cc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80016d0:	461a      	mov	r2, r3
 80016d2:	2302      	movs	r3, #2
 80016d4:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80016d6:	693b      	ldr	r3, [r7, #16]
 80016d8:	f003 0320 	and.w	r3, r3, #32
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d008      	beq.n	80016f2 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80016e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016e2:	015a      	lsls	r2, r3, #5
 80016e4:	69fb      	ldr	r3, [r7, #28]
 80016e6:	4413      	add	r3, r2
 80016e8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80016ec:	461a      	mov	r2, r3
 80016ee:	2320      	movs	r3, #32
 80016f0:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80016f2:	693b      	ldr	r3, [r7, #16]
 80016f4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d009      	beq.n	8001710 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80016fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016fe:	015a      	lsls	r2, r3, #5
 8001700:	69fb      	ldr	r3, [r7, #28]
 8001702:	4413      	add	r3, r2
 8001704:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001708:	461a      	mov	r2, r3
 800170a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800170e:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8001710:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001712:	3301      	adds	r3, #1
 8001714:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8001716:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001718:	085b      	lsrs	r3, r3, #1
 800171a:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800171c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800171e:	2b00      	cmp	r3, #0
 8001720:	f47f af62 	bne.w	80015e8 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	4618      	mov	r0, r3
 800172a:	f003 f9cd 	bl	8004ac8 <USB_ReadInterrupts>
 800172e:	4603      	mov	r3, r0
 8001730:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001734:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8001738:	f040 80db 	bne.w	80018f2 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	4618      	mov	r0, r3
 8001742:	f003 f9ee 	bl	8004b22 <USB_ReadDevAllInEpInterrupt>
 8001746:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8001748:	2300      	movs	r3, #0
 800174a:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 800174c:	e0cd      	b.n	80018ea <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800174e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001750:	f003 0301 	and.w	r3, r3, #1
 8001754:	2b00      	cmp	r3, #0
 8001756:	f000 80c2 	beq.w	80018de <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001760:	b2d2      	uxtb	r2, r2
 8001762:	4611      	mov	r1, r2
 8001764:	4618      	mov	r0, r3
 8001766:	f003 fa14 	bl	8004b92 <USB_ReadDevInEPInterrupt>
 800176a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800176c:	693b      	ldr	r3, [r7, #16]
 800176e:	f003 0301 	and.w	r3, r3, #1
 8001772:	2b00      	cmp	r3, #0
 8001774:	d057      	beq.n	8001826 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001776:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001778:	f003 030f 	and.w	r3, r3, #15
 800177c:	2201      	movs	r2, #1
 800177e:	fa02 f303 	lsl.w	r3, r2, r3
 8001782:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001784:	69fb      	ldr	r3, [r7, #28]
 8001786:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800178a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	43db      	mvns	r3, r3
 8001790:	69f9      	ldr	r1, [r7, #28]
 8001792:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8001796:	4013      	ands	r3, r2
 8001798:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800179a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800179c:	015a      	lsls	r2, r3, #5
 800179e:	69fb      	ldr	r3, [r7, #28]
 80017a0:	4413      	add	r3, r2
 80017a2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80017a6:	461a      	mov	r2, r3
 80017a8:	2301      	movs	r3, #1
 80017aa:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	799b      	ldrb	r3, [r3, #6]
 80017b0:	2b01      	cmp	r3, #1
 80017b2:	d132      	bne.n	800181a <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80017b4:	6879      	ldr	r1, [r7, #4]
 80017b6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80017b8:	4613      	mov	r3, r2
 80017ba:	00db      	lsls	r3, r3, #3
 80017bc:	4413      	add	r3, r2
 80017be:	009b      	lsls	r3, r3, #2
 80017c0:	440b      	add	r3, r1
 80017c2:	3320      	adds	r3, #32
 80017c4:	6819      	ldr	r1, [r3, #0]
 80017c6:	6878      	ldr	r0, [r7, #4]
 80017c8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80017ca:	4613      	mov	r3, r2
 80017cc:	00db      	lsls	r3, r3, #3
 80017ce:	4413      	add	r3, r2
 80017d0:	009b      	lsls	r3, r3, #2
 80017d2:	4403      	add	r3, r0
 80017d4:	331c      	adds	r3, #28
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	4419      	add	r1, r3
 80017da:	6878      	ldr	r0, [r7, #4]
 80017dc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80017de:	4613      	mov	r3, r2
 80017e0:	00db      	lsls	r3, r3, #3
 80017e2:	4413      	add	r3, r2
 80017e4:	009b      	lsls	r3, r3, #2
 80017e6:	4403      	add	r3, r0
 80017e8:	3320      	adds	r3, #32
 80017ea:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80017ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d113      	bne.n	800181a <HAL_PCD_IRQHandler+0x3a2>
 80017f2:	6879      	ldr	r1, [r7, #4]
 80017f4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80017f6:	4613      	mov	r3, r2
 80017f8:	00db      	lsls	r3, r3, #3
 80017fa:	4413      	add	r3, r2
 80017fc:	009b      	lsls	r3, r3, #2
 80017fe:	440b      	add	r3, r1
 8001800:	3324      	adds	r3, #36	@ 0x24
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	2b00      	cmp	r3, #0
 8001806:	d108      	bne.n	800181a <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	6818      	ldr	r0, [r3, #0]
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8001812:	461a      	mov	r2, r3
 8001814:	2101      	movs	r1, #1
 8001816:	f003 fa1b 	bl	8004c50 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800181a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800181c:	b2db      	uxtb	r3, r3
 800181e:	4619      	mov	r1, r3
 8001820:	6878      	ldr	r0, [r7, #4]
 8001822:	f005 fc40 	bl	80070a6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8001826:	693b      	ldr	r3, [r7, #16]
 8001828:	f003 0308 	and.w	r3, r3, #8
 800182c:	2b00      	cmp	r3, #0
 800182e:	d008      	beq.n	8001842 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001830:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001832:	015a      	lsls	r2, r3, #5
 8001834:	69fb      	ldr	r3, [r7, #28]
 8001836:	4413      	add	r3, r2
 8001838:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800183c:	461a      	mov	r2, r3
 800183e:	2308      	movs	r3, #8
 8001840:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8001842:	693b      	ldr	r3, [r7, #16]
 8001844:	f003 0310 	and.w	r3, r3, #16
 8001848:	2b00      	cmp	r3, #0
 800184a:	d008      	beq.n	800185e <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800184c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800184e:	015a      	lsls	r2, r3, #5
 8001850:	69fb      	ldr	r3, [r7, #28]
 8001852:	4413      	add	r3, r2
 8001854:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001858:	461a      	mov	r2, r3
 800185a:	2310      	movs	r3, #16
 800185c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800185e:	693b      	ldr	r3, [r7, #16]
 8001860:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001864:	2b00      	cmp	r3, #0
 8001866:	d008      	beq.n	800187a <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8001868:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800186a:	015a      	lsls	r2, r3, #5
 800186c:	69fb      	ldr	r3, [r7, #28]
 800186e:	4413      	add	r3, r2
 8001870:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001874:	461a      	mov	r2, r3
 8001876:	2340      	movs	r3, #64	@ 0x40
 8001878:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800187a:	693b      	ldr	r3, [r7, #16]
 800187c:	f003 0302 	and.w	r3, r3, #2
 8001880:	2b00      	cmp	r3, #0
 8001882:	d023      	beq.n	80018cc <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8001884:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001886:	6a38      	ldr	r0, [r7, #32]
 8001888:	f002 fa02 	bl	8003c90 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800188c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800188e:	4613      	mov	r3, r2
 8001890:	00db      	lsls	r3, r3, #3
 8001892:	4413      	add	r3, r2
 8001894:	009b      	lsls	r3, r3, #2
 8001896:	3310      	adds	r3, #16
 8001898:	687a      	ldr	r2, [r7, #4]
 800189a:	4413      	add	r3, r2
 800189c:	3304      	adds	r3, #4
 800189e:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80018a0:	697b      	ldr	r3, [r7, #20]
 80018a2:	78db      	ldrb	r3, [r3, #3]
 80018a4:	2b01      	cmp	r3, #1
 80018a6:	d108      	bne.n	80018ba <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80018a8:	697b      	ldr	r3, [r7, #20]
 80018aa:	2200      	movs	r2, #0
 80018ac:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80018ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018b0:	b2db      	uxtb	r3, r3
 80018b2:	4619      	mov	r1, r3
 80018b4:	6878      	ldr	r0, [r7, #4]
 80018b6:	f005 fc8d 	bl	80071d4 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80018ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018bc:	015a      	lsls	r2, r3, #5
 80018be:	69fb      	ldr	r3, [r7, #28]
 80018c0:	4413      	add	r3, r2
 80018c2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80018c6:	461a      	mov	r2, r3
 80018c8:	2302      	movs	r3, #2
 80018ca:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80018cc:	693b      	ldr	r3, [r7, #16]
 80018ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d003      	beq.n	80018de <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80018d6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80018d8:	6878      	ldr	r0, [r7, #4]
 80018da:	f000 fca5 	bl	8002228 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80018de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018e0:	3301      	adds	r3, #1
 80018e2:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80018e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80018e6:	085b      	lsrs	r3, r3, #1
 80018e8:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80018ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	f47f af2e 	bne.w	800174e <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	4618      	mov	r0, r3
 80018f8:	f003 f8e6 	bl	8004ac8 <USB_ReadInterrupts>
 80018fc:	4603      	mov	r3, r0
 80018fe:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8001902:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8001906:	d122      	bne.n	800194e <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001908:	69fb      	ldr	r3, [r7, #28]
 800190a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800190e:	685b      	ldr	r3, [r3, #4]
 8001910:	69fa      	ldr	r2, [r7, #28]
 8001912:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001916:	f023 0301 	bic.w	r3, r3, #1
 800191a:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8001922:	2b01      	cmp	r3, #1
 8001924:	d108      	bne.n	8001938 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	2200      	movs	r2, #0
 800192a:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800192e:	2100      	movs	r1, #0
 8001930:	6878      	ldr	r0, [r7, #4]
 8001932:	f000 fe8b 	bl	800264c <HAL_PCDEx_LPM_Callback>
 8001936:	e002      	b.n	800193e <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8001938:	6878      	ldr	r0, [r7, #4]
 800193a:	f005 fc2b 	bl	8007194 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	695a      	ldr	r2, [r3, #20]
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 800194c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	4618      	mov	r0, r3
 8001954:	f003 f8b8 	bl	8004ac8 <USB_ReadInterrupts>
 8001958:	4603      	mov	r3, r0
 800195a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800195e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001962:	d112      	bne.n	800198a <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8001964:	69fb      	ldr	r3, [r7, #28]
 8001966:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800196a:	689b      	ldr	r3, [r3, #8]
 800196c:	f003 0301 	and.w	r3, r3, #1
 8001970:	2b01      	cmp	r3, #1
 8001972:	d102      	bne.n	800197a <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001974:	6878      	ldr	r0, [r7, #4]
 8001976:	f005 fbe7 	bl	8007148 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	695a      	ldr	r2, [r3, #20]
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8001988:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	4618      	mov	r0, r3
 8001990:	f003 f89a 	bl	8004ac8 <USB_ReadInterrupts>
 8001994:	4603      	mov	r3, r0
 8001996:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800199a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800199e:	f040 80b7 	bne.w	8001b10 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80019a2:	69fb      	ldr	r3, [r7, #28]
 80019a4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80019a8:	685b      	ldr	r3, [r3, #4]
 80019aa:	69fa      	ldr	r2, [r7, #28]
 80019ac:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80019b0:	f023 0301 	bic.w	r3, r3, #1
 80019b4:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	2110      	movs	r1, #16
 80019bc:	4618      	mov	r0, r3
 80019be:	f002 f967 	bl	8003c90 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80019c2:	2300      	movs	r3, #0
 80019c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80019c6:	e046      	b.n	8001a56 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80019c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80019ca:	015a      	lsls	r2, r3, #5
 80019cc:	69fb      	ldr	r3, [r7, #28]
 80019ce:	4413      	add	r3, r2
 80019d0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80019d4:	461a      	mov	r2, r3
 80019d6:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80019da:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80019dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80019de:	015a      	lsls	r2, r3, #5
 80019e0:	69fb      	ldr	r3, [r7, #28]
 80019e2:	4413      	add	r3, r2
 80019e4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80019ec:	0151      	lsls	r1, r2, #5
 80019ee:	69fa      	ldr	r2, [r7, #28]
 80019f0:	440a      	add	r2, r1
 80019f2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80019f6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80019fa:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80019fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80019fe:	015a      	lsls	r2, r3, #5
 8001a00:	69fb      	ldr	r3, [r7, #28]
 8001a02:	4413      	add	r3, r2
 8001a04:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001a08:	461a      	mov	r2, r3
 8001a0a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8001a0e:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8001a10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001a12:	015a      	lsls	r2, r3, #5
 8001a14:	69fb      	ldr	r3, [r7, #28]
 8001a16:	4413      	add	r3, r2
 8001a18:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001a20:	0151      	lsls	r1, r2, #5
 8001a22:	69fa      	ldr	r2, [r7, #28]
 8001a24:	440a      	add	r2, r1
 8001a26:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8001a2a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8001a2e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8001a30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001a32:	015a      	lsls	r2, r3, #5
 8001a34:	69fb      	ldr	r3, [r7, #28]
 8001a36:	4413      	add	r3, r2
 8001a38:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001a40:	0151      	lsls	r1, r2, #5
 8001a42:	69fa      	ldr	r2, [r7, #28]
 8001a44:	440a      	add	r2, r1
 8001a46:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8001a4a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8001a4e:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001a50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001a52:	3301      	adds	r3, #1
 8001a54:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	791b      	ldrb	r3, [r3, #4]
 8001a5a:	461a      	mov	r2, r3
 8001a5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001a5e:	4293      	cmp	r3, r2
 8001a60:	d3b2      	bcc.n	80019c8 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8001a62:	69fb      	ldr	r3, [r7, #28]
 8001a64:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001a68:	69db      	ldr	r3, [r3, #28]
 8001a6a:	69fa      	ldr	r2, [r7, #28]
 8001a6c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001a70:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8001a74:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	7bdb      	ldrb	r3, [r3, #15]
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d016      	beq.n	8001aac <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8001a7e:	69fb      	ldr	r3, [r7, #28]
 8001a80:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001a84:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001a88:	69fa      	ldr	r2, [r7, #28]
 8001a8a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001a8e:	f043 030b 	orr.w	r3, r3, #11
 8001a92:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8001a96:	69fb      	ldr	r3, [r7, #28]
 8001a98:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001a9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a9e:	69fa      	ldr	r2, [r7, #28]
 8001aa0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001aa4:	f043 030b 	orr.w	r3, r3, #11
 8001aa8:	6453      	str	r3, [r2, #68]	@ 0x44
 8001aaa:	e015      	b.n	8001ad8 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8001aac:	69fb      	ldr	r3, [r7, #28]
 8001aae:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001ab2:	695b      	ldr	r3, [r3, #20]
 8001ab4:	69fa      	ldr	r2, [r7, #28]
 8001ab6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001aba:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001abe:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8001ac2:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8001ac4:	69fb      	ldr	r3, [r7, #28]
 8001ac6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001aca:	691b      	ldr	r3, [r3, #16]
 8001acc:	69fa      	ldr	r2, [r7, #28]
 8001ace:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001ad2:	f043 030b 	orr.w	r3, r3, #11
 8001ad6:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8001ad8:	69fb      	ldr	r3, [r7, #28]
 8001ada:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	69fa      	ldr	r2, [r7, #28]
 8001ae2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001ae6:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8001aea:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	6818      	ldr	r0, [r3, #0]
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001afa:	461a      	mov	r2, r3
 8001afc:	f003 f8a8 	bl	8004c50 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	695a      	ldr	r2, [r3, #20]
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8001b0e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	4618      	mov	r0, r3
 8001b16:	f002 ffd7 	bl	8004ac8 <USB_ReadInterrupts>
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001b20:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001b24:	d123      	bne.n	8001b6e <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	f003 f86d 	bl	8004c0a <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	4618      	mov	r0, r3
 8001b36:	f002 f924 	bl	8003d82 <USB_GetDevSpeed>
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	461a      	mov	r2, r3
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681c      	ldr	r4, [r3, #0]
 8001b46:	f001 f9f1 	bl	8002f2c <HAL_RCC_GetHCLKFreq>
 8001b4a:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001b50:	461a      	mov	r2, r3
 8001b52:	4620      	mov	r0, r4
 8001b54:	f001 fe28 	bl	80037a8 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8001b58:	6878      	ldr	r0, [r7, #4]
 8001b5a:	f005 facc 	bl	80070f6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	695a      	ldr	r2, [r3, #20]
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8001b6c:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	4618      	mov	r0, r3
 8001b74:	f002 ffa8 	bl	8004ac8 <USB_ReadInterrupts>
 8001b78:	4603      	mov	r3, r0
 8001b7a:	f003 0308 	and.w	r3, r3, #8
 8001b7e:	2b08      	cmp	r3, #8
 8001b80:	d10a      	bne.n	8001b98 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8001b82:	6878      	ldr	r0, [r7, #4]
 8001b84:	f005 faa9 	bl	80070da <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	695a      	ldr	r2, [r3, #20]
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f002 0208 	and.w	r2, r2, #8
 8001b96:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	f002 ff93 	bl	8004ac8 <USB_ReadInterrupts>
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001ba8:	2b80      	cmp	r3, #128	@ 0x80
 8001baa:	d123      	bne.n	8001bf4 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8001bac:	6a3b      	ldr	r3, [r7, #32]
 8001bae:	699b      	ldr	r3, [r3, #24]
 8001bb0:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8001bb4:	6a3b      	ldr	r3, [r7, #32]
 8001bb6:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001bb8:	2301      	movs	r3, #1
 8001bba:	627b      	str	r3, [r7, #36]	@ 0x24
 8001bbc:	e014      	b.n	8001be8 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8001bbe:	6879      	ldr	r1, [r7, #4]
 8001bc0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001bc2:	4613      	mov	r3, r2
 8001bc4:	00db      	lsls	r3, r3, #3
 8001bc6:	4413      	add	r3, r2
 8001bc8:	009b      	lsls	r3, r3, #2
 8001bca:	440b      	add	r3, r1
 8001bcc:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8001bd0:	781b      	ldrb	r3, [r3, #0]
 8001bd2:	2b01      	cmp	r3, #1
 8001bd4:	d105      	bne.n	8001be2 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8001bd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bd8:	b2db      	uxtb	r3, r3
 8001bda:	4619      	mov	r1, r3
 8001bdc:	6878      	ldr	r0, [r7, #4]
 8001bde:	f000 faf2 	bl	80021c6 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001be2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001be4:	3301      	adds	r3, #1
 8001be6:	627b      	str	r3, [r7, #36]	@ 0x24
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	791b      	ldrb	r3, [r3, #4]
 8001bec:	461a      	mov	r2, r3
 8001bee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bf0:	4293      	cmp	r3, r2
 8001bf2:	d3e4      	bcc.n	8001bbe <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	f002 ff65 	bl	8004ac8 <USB_ReadInterrupts>
 8001bfe:	4603      	mov	r3, r0
 8001c00:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001c04:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8001c08:	d13c      	bne.n	8001c84 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001c0a:	2301      	movs	r3, #1
 8001c0c:	627b      	str	r3, [r7, #36]	@ 0x24
 8001c0e:	e02b      	b.n	8001c68 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8001c10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c12:	015a      	lsls	r2, r3, #5
 8001c14:	69fb      	ldr	r3, [r7, #28]
 8001c16:	4413      	add	r3, r2
 8001c18:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001c20:	6879      	ldr	r1, [r7, #4]
 8001c22:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001c24:	4613      	mov	r3, r2
 8001c26:	00db      	lsls	r3, r3, #3
 8001c28:	4413      	add	r3, r2
 8001c2a:	009b      	lsls	r3, r3, #2
 8001c2c:	440b      	add	r3, r1
 8001c2e:	3318      	adds	r3, #24
 8001c30:	781b      	ldrb	r3, [r3, #0]
 8001c32:	2b01      	cmp	r3, #1
 8001c34:	d115      	bne.n	8001c62 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8001c36:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	da12      	bge.n	8001c62 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8001c3c:	6879      	ldr	r1, [r7, #4]
 8001c3e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001c40:	4613      	mov	r3, r2
 8001c42:	00db      	lsls	r3, r3, #3
 8001c44:	4413      	add	r3, r2
 8001c46:	009b      	lsls	r3, r3, #2
 8001c48:	440b      	add	r3, r1
 8001c4a:	3317      	adds	r3, #23
 8001c4c:	2201      	movs	r2, #1
 8001c4e:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8001c50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c52:	b2db      	uxtb	r3, r3
 8001c54:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001c58:	b2db      	uxtb	r3, r3
 8001c5a:	4619      	mov	r1, r3
 8001c5c:	6878      	ldr	r0, [r7, #4]
 8001c5e:	f000 fab2 	bl	80021c6 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001c62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c64:	3301      	adds	r3, #1
 8001c66:	627b      	str	r3, [r7, #36]	@ 0x24
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	791b      	ldrb	r3, [r3, #4]
 8001c6c:	461a      	mov	r2, r3
 8001c6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c70:	4293      	cmp	r3, r2
 8001c72:	d3cd      	bcc.n	8001c10 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	695a      	ldr	r2, [r3, #20]
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8001c82:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	4618      	mov	r0, r3
 8001c8a:	f002 ff1d 	bl	8004ac8 <USB_ReadInterrupts>
 8001c8e:	4603      	mov	r3, r0
 8001c90:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001c94:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8001c98:	d156      	bne.n	8001d48 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001c9a:	2301      	movs	r3, #1
 8001c9c:	627b      	str	r3, [r7, #36]	@ 0x24
 8001c9e:	e045      	b.n	8001d2c <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8001ca0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ca2:	015a      	lsls	r2, r3, #5
 8001ca4:	69fb      	ldr	r3, [r7, #28]
 8001ca6:	4413      	add	r3, r2
 8001ca8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001cb0:	6879      	ldr	r1, [r7, #4]
 8001cb2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001cb4:	4613      	mov	r3, r2
 8001cb6:	00db      	lsls	r3, r3, #3
 8001cb8:	4413      	add	r3, r2
 8001cba:	009b      	lsls	r3, r3, #2
 8001cbc:	440b      	add	r3, r1
 8001cbe:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8001cc2:	781b      	ldrb	r3, [r3, #0]
 8001cc4:	2b01      	cmp	r3, #1
 8001cc6:	d12e      	bne.n	8001d26 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001cc8:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	da2b      	bge.n	8001d26 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8001cce:	69bb      	ldr	r3, [r7, #24]
 8001cd0:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8001cda:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001cde:	429a      	cmp	r2, r3
 8001ce0:	d121      	bne.n	8001d26 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8001ce2:	6879      	ldr	r1, [r7, #4]
 8001ce4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001ce6:	4613      	mov	r3, r2
 8001ce8:	00db      	lsls	r3, r3, #3
 8001cea:	4413      	add	r3, r2
 8001cec:	009b      	lsls	r3, r3, #2
 8001cee:	440b      	add	r3, r1
 8001cf0:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8001cf4:	2201      	movs	r2, #1
 8001cf6:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8001cf8:	6a3b      	ldr	r3, [r7, #32]
 8001cfa:	699b      	ldr	r3, [r3, #24]
 8001cfc:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8001d00:	6a3b      	ldr	r3, [r7, #32]
 8001d02:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8001d04:	6a3b      	ldr	r3, [r7, #32]
 8001d06:	695b      	ldr	r3, [r3, #20]
 8001d08:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d10a      	bne.n	8001d26 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8001d10:	69fb      	ldr	r3, [r7, #28]
 8001d12:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001d16:	685b      	ldr	r3, [r3, #4]
 8001d18:	69fa      	ldr	r2, [r7, #28]
 8001d1a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001d1e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001d22:	6053      	str	r3, [r2, #4]
            break;
 8001d24:	e008      	b.n	8001d38 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001d26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d28:	3301      	adds	r3, #1
 8001d2a:	627b      	str	r3, [r7, #36]	@ 0x24
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	791b      	ldrb	r3, [r3, #4]
 8001d30:	461a      	mov	r2, r3
 8001d32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d34:	4293      	cmp	r3, r2
 8001d36:	d3b3      	bcc.n	8001ca0 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	695a      	ldr	r2, [r3, #20]
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8001d46:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	f002 febb 	bl	8004ac8 <USB_ReadInterrupts>
 8001d52:	4603      	mov	r3, r0
 8001d54:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8001d58:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001d5c:	d10a      	bne.n	8001d74 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8001d5e:	6878      	ldr	r0, [r7, #4]
 8001d60:	f005 fa4a 	bl	80071f8 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	695a      	ldr	r2, [r3, #20]
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8001d72:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	4618      	mov	r0, r3
 8001d7a:	f002 fea5 	bl	8004ac8 <USB_ReadInterrupts>
 8001d7e:	4603      	mov	r3, r0
 8001d80:	f003 0304 	and.w	r3, r3, #4
 8001d84:	2b04      	cmp	r3, #4
 8001d86:	d115      	bne.n	8001db4 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	685b      	ldr	r3, [r3, #4]
 8001d8e:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8001d90:	69bb      	ldr	r3, [r7, #24]
 8001d92:	f003 0304 	and.w	r3, r3, #4
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d002      	beq.n	8001da0 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8001d9a:	6878      	ldr	r0, [r7, #4]
 8001d9c:	f005 fa3a 	bl	8007214 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	6859      	ldr	r1, [r3, #4]
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	69ba      	ldr	r2, [r7, #24]
 8001dac:	430a      	orrs	r2, r1
 8001dae:	605a      	str	r2, [r3, #4]
 8001db0:	e000      	b.n	8001db4 <HAL_PCD_IRQHandler+0x93c>
      return;
 8001db2:	bf00      	nop
    }
  }
}
 8001db4:	3734      	adds	r7, #52	@ 0x34
 8001db6:	46bd      	mov	sp, r7
 8001db8:	bd90      	pop	{r4, r7, pc}

08001dba <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001dba:	b580      	push	{r7, lr}
 8001dbc:	b082      	sub	sp, #8
 8001dbe:	af00      	add	r7, sp, #0
 8001dc0:	6078      	str	r0, [r7, #4]
 8001dc2:	460b      	mov	r3, r1
 8001dc4:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001dcc:	2b01      	cmp	r3, #1
 8001dce:	d101      	bne.n	8001dd4 <HAL_PCD_SetAddress+0x1a>
 8001dd0:	2302      	movs	r3, #2
 8001dd2:	e012      	b.n	8001dfa <HAL_PCD_SetAddress+0x40>
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	2201      	movs	r2, #1
 8001dd8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	78fa      	ldrb	r2, [r7, #3]
 8001de0:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	78fa      	ldrb	r2, [r7, #3]
 8001de8:	4611      	mov	r1, r2
 8001dea:	4618      	mov	r0, r3
 8001dec:	f002 fe04 	bl	80049f8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	2200      	movs	r2, #0
 8001df4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8001df8:	2300      	movs	r3, #0
}
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	3708      	adds	r7, #8
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	bd80      	pop	{r7, pc}

08001e02 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001e02:	b580      	push	{r7, lr}
 8001e04:	b084      	sub	sp, #16
 8001e06:	af00      	add	r7, sp, #0
 8001e08:	6078      	str	r0, [r7, #4]
 8001e0a:	4608      	mov	r0, r1
 8001e0c:	4611      	mov	r1, r2
 8001e0e:	461a      	mov	r2, r3
 8001e10:	4603      	mov	r3, r0
 8001e12:	70fb      	strb	r3, [r7, #3]
 8001e14:	460b      	mov	r3, r1
 8001e16:	803b      	strh	r3, [r7, #0]
 8001e18:	4613      	mov	r3, r2
 8001e1a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001e20:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	da0f      	bge.n	8001e48 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001e28:	78fb      	ldrb	r3, [r7, #3]
 8001e2a:	f003 020f 	and.w	r2, r3, #15
 8001e2e:	4613      	mov	r3, r2
 8001e30:	00db      	lsls	r3, r3, #3
 8001e32:	4413      	add	r3, r2
 8001e34:	009b      	lsls	r3, r3, #2
 8001e36:	3310      	adds	r3, #16
 8001e38:	687a      	ldr	r2, [r7, #4]
 8001e3a:	4413      	add	r3, r2
 8001e3c:	3304      	adds	r3, #4
 8001e3e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	2201      	movs	r2, #1
 8001e44:	705a      	strb	r2, [r3, #1]
 8001e46:	e00f      	b.n	8001e68 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001e48:	78fb      	ldrb	r3, [r7, #3]
 8001e4a:	f003 020f 	and.w	r2, r3, #15
 8001e4e:	4613      	mov	r3, r2
 8001e50:	00db      	lsls	r3, r3, #3
 8001e52:	4413      	add	r3, r2
 8001e54:	009b      	lsls	r3, r3, #2
 8001e56:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001e5a:	687a      	ldr	r2, [r7, #4]
 8001e5c:	4413      	add	r3, r2
 8001e5e:	3304      	adds	r3, #4
 8001e60:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	2200      	movs	r2, #0
 8001e66:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001e68:	78fb      	ldrb	r3, [r7, #3]
 8001e6a:	f003 030f 	and.w	r3, r3, #15
 8001e6e:	b2da      	uxtb	r2, r3
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8001e74:	883b      	ldrh	r3, [r7, #0]
 8001e76:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	78ba      	ldrb	r2, [r7, #2]
 8001e82:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	785b      	ldrb	r3, [r3, #1]
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d004      	beq.n	8001e96 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	781b      	ldrb	r3, [r3, #0]
 8001e90:	461a      	mov	r2, r3
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001e96:	78bb      	ldrb	r3, [r7, #2]
 8001e98:	2b02      	cmp	r3, #2
 8001e9a:	d102      	bne.n	8001ea2 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001ea8:	2b01      	cmp	r3, #1
 8001eaa:	d101      	bne.n	8001eb0 <HAL_PCD_EP_Open+0xae>
 8001eac:	2302      	movs	r3, #2
 8001eae:	e00e      	b.n	8001ece <HAL_PCD_EP_Open+0xcc>
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	2201      	movs	r2, #1
 8001eb4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	68f9      	ldr	r1, [r7, #12]
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	f001 ff84 	bl	8003dcc <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8001ecc:	7afb      	ldrb	r3, [r7, #11]
}
 8001ece:	4618      	mov	r0, r3
 8001ed0:	3710      	adds	r7, #16
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	bd80      	pop	{r7, pc}

08001ed6 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001ed6:	b580      	push	{r7, lr}
 8001ed8:	b084      	sub	sp, #16
 8001eda:	af00      	add	r7, sp, #0
 8001edc:	6078      	str	r0, [r7, #4]
 8001ede:	460b      	mov	r3, r1
 8001ee0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001ee2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	da0f      	bge.n	8001f0a <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001eea:	78fb      	ldrb	r3, [r7, #3]
 8001eec:	f003 020f 	and.w	r2, r3, #15
 8001ef0:	4613      	mov	r3, r2
 8001ef2:	00db      	lsls	r3, r3, #3
 8001ef4:	4413      	add	r3, r2
 8001ef6:	009b      	lsls	r3, r3, #2
 8001ef8:	3310      	adds	r3, #16
 8001efa:	687a      	ldr	r2, [r7, #4]
 8001efc:	4413      	add	r3, r2
 8001efe:	3304      	adds	r3, #4
 8001f00:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	2201      	movs	r2, #1
 8001f06:	705a      	strb	r2, [r3, #1]
 8001f08:	e00f      	b.n	8001f2a <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001f0a:	78fb      	ldrb	r3, [r7, #3]
 8001f0c:	f003 020f 	and.w	r2, r3, #15
 8001f10:	4613      	mov	r3, r2
 8001f12:	00db      	lsls	r3, r3, #3
 8001f14:	4413      	add	r3, r2
 8001f16:	009b      	lsls	r3, r3, #2
 8001f18:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001f1c:	687a      	ldr	r2, [r7, #4]
 8001f1e:	4413      	add	r3, r2
 8001f20:	3304      	adds	r3, #4
 8001f22:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	2200      	movs	r2, #0
 8001f28:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8001f2a:	78fb      	ldrb	r3, [r7, #3]
 8001f2c:	f003 030f 	and.w	r3, r3, #15
 8001f30:	b2da      	uxtb	r2, r3
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001f3c:	2b01      	cmp	r3, #1
 8001f3e:	d101      	bne.n	8001f44 <HAL_PCD_EP_Close+0x6e>
 8001f40:	2302      	movs	r3, #2
 8001f42:	e00e      	b.n	8001f62 <HAL_PCD_EP_Close+0x8c>
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	2201      	movs	r2, #1
 8001f48:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	68f9      	ldr	r1, [r7, #12]
 8001f52:	4618      	mov	r0, r3
 8001f54:	f001 ffc2 	bl	8003edc <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8001f60:	2300      	movs	r3, #0
}
 8001f62:	4618      	mov	r0, r3
 8001f64:	3710      	adds	r7, #16
 8001f66:	46bd      	mov	sp, r7
 8001f68:	bd80      	pop	{r7, pc}

08001f6a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001f6a:	b580      	push	{r7, lr}
 8001f6c:	b086      	sub	sp, #24
 8001f6e:	af00      	add	r7, sp, #0
 8001f70:	60f8      	str	r0, [r7, #12]
 8001f72:	607a      	str	r2, [r7, #4]
 8001f74:	603b      	str	r3, [r7, #0]
 8001f76:	460b      	mov	r3, r1
 8001f78:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001f7a:	7afb      	ldrb	r3, [r7, #11]
 8001f7c:	f003 020f 	and.w	r2, r3, #15
 8001f80:	4613      	mov	r3, r2
 8001f82:	00db      	lsls	r3, r3, #3
 8001f84:	4413      	add	r3, r2
 8001f86:	009b      	lsls	r3, r3, #2
 8001f88:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001f8c:	68fa      	ldr	r2, [r7, #12]
 8001f8e:	4413      	add	r3, r2
 8001f90:	3304      	adds	r3, #4
 8001f92:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001f94:	697b      	ldr	r3, [r7, #20]
 8001f96:	687a      	ldr	r2, [r7, #4]
 8001f98:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001f9a:	697b      	ldr	r3, [r7, #20]
 8001f9c:	683a      	ldr	r2, [r7, #0]
 8001f9e:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8001fa0:	697b      	ldr	r3, [r7, #20]
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8001fa6:	697b      	ldr	r3, [r7, #20]
 8001fa8:	2200      	movs	r2, #0
 8001faa:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001fac:	7afb      	ldrb	r3, [r7, #11]
 8001fae:	f003 030f 	and.w	r3, r3, #15
 8001fb2:	b2da      	uxtb	r2, r3
 8001fb4:	697b      	ldr	r3, [r7, #20]
 8001fb6:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	799b      	ldrb	r3, [r3, #6]
 8001fbc:	2b01      	cmp	r3, #1
 8001fbe:	d102      	bne.n	8001fc6 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001fc0:	687a      	ldr	r2, [r7, #4]
 8001fc2:	697b      	ldr	r3, [r7, #20]
 8001fc4:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	6818      	ldr	r0, [r3, #0]
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	799b      	ldrb	r3, [r3, #6]
 8001fce:	461a      	mov	r2, r3
 8001fd0:	6979      	ldr	r1, [r7, #20]
 8001fd2:	f002 f85f 	bl	8004094 <USB_EPStartXfer>

  return HAL_OK;
 8001fd6:	2300      	movs	r3, #0
}
 8001fd8:	4618      	mov	r0, r3
 8001fda:	3718      	adds	r7, #24
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	bd80      	pop	{r7, pc}

08001fe0 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b086      	sub	sp, #24
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	60f8      	str	r0, [r7, #12]
 8001fe8:	607a      	str	r2, [r7, #4]
 8001fea:	603b      	str	r3, [r7, #0]
 8001fec:	460b      	mov	r3, r1
 8001fee:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001ff0:	7afb      	ldrb	r3, [r7, #11]
 8001ff2:	f003 020f 	and.w	r2, r3, #15
 8001ff6:	4613      	mov	r3, r2
 8001ff8:	00db      	lsls	r3, r3, #3
 8001ffa:	4413      	add	r3, r2
 8001ffc:	009b      	lsls	r3, r3, #2
 8001ffe:	3310      	adds	r3, #16
 8002000:	68fa      	ldr	r2, [r7, #12]
 8002002:	4413      	add	r3, r2
 8002004:	3304      	adds	r3, #4
 8002006:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002008:	697b      	ldr	r3, [r7, #20]
 800200a:	687a      	ldr	r2, [r7, #4]
 800200c:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800200e:	697b      	ldr	r3, [r7, #20]
 8002010:	683a      	ldr	r2, [r7, #0]
 8002012:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8002014:	697b      	ldr	r3, [r7, #20]
 8002016:	2200      	movs	r2, #0
 8002018:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 800201a:	697b      	ldr	r3, [r7, #20]
 800201c:	2201      	movs	r2, #1
 800201e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002020:	7afb      	ldrb	r3, [r7, #11]
 8002022:	f003 030f 	and.w	r3, r3, #15
 8002026:	b2da      	uxtb	r2, r3
 8002028:	697b      	ldr	r3, [r7, #20]
 800202a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	799b      	ldrb	r3, [r3, #6]
 8002030:	2b01      	cmp	r3, #1
 8002032:	d102      	bne.n	800203a <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002034:	687a      	ldr	r2, [r7, #4]
 8002036:	697b      	ldr	r3, [r7, #20]
 8002038:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	6818      	ldr	r0, [r3, #0]
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	799b      	ldrb	r3, [r3, #6]
 8002042:	461a      	mov	r2, r3
 8002044:	6979      	ldr	r1, [r7, #20]
 8002046:	f002 f825 	bl	8004094 <USB_EPStartXfer>

  return HAL_OK;
 800204a:	2300      	movs	r3, #0
}
 800204c:	4618      	mov	r0, r3
 800204e:	3718      	adds	r7, #24
 8002050:	46bd      	mov	sp, r7
 8002052:	bd80      	pop	{r7, pc}

08002054 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	b084      	sub	sp, #16
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
 800205c:	460b      	mov	r3, r1
 800205e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002060:	78fb      	ldrb	r3, [r7, #3]
 8002062:	f003 030f 	and.w	r3, r3, #15
 8002066:	687a      	ldr	r2, [r7, #4]
 8002068:	7912      	ldrb	r2, [r2, #4]
 800206a:	4293      	cmp	r3, r2
 800206c:	d901      	bls.n	8002072 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800206e:	2301      	movs	r3, #1
 8002070:	e04f      	b.n	8002112 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002072:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002076:	2b00      	cmp	r3, #0
 8002078:	da0f      	bge.n	800209a <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800207a:	78fb      	ldrb	r3, [r7, #3]
 800207c:	f003 020f 	and.w	r2, r3, #15
 8002080:	4613      	mov	r3, r2
 8002082:	00db      	lsls	r3, r3, #3
 8002084:	4413      	add	r3, r2
 8002086:	009b      	lsls	r3, r3, #2
 8002088:	3310      	adds	r3, #16
 800208a:	687a      	ldr	r2, [r7, #4]
 800208c:	4413      	add	r3, r2
 800208e:	3304      	adds	r3, #4
 8002090:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	2201      	movs	r2, #1
 8002096:	705a      	strb	r2, [r3, #1]
 8002098:	e00d      	b.n	80020b6 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800209a:	78fa      	ldrb	r2, [r7, #3]
 800209c:	4613      	mov	r3, r2
 800209e:	00db      	lsls	r3, r3, #3
 80020a0:	4413      	add	r3, r2
 80020a2:	009b      	lsls	r3, r3, #2
 80020a4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80020a8:	687a      	ldr	r2, [r7, #4]
 80020aa:	4413      	add	r3, r2
 80020ac:	3304      	adds	r3, #4
 80020ae:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	2200      	movs	r2, #0
 80020b4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	2201      	movs	r2, #1
 80020ba:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80020bc:	78fb      	ldrb	r3, [r7, #3]
 80020be:	f003 030f 	and.w	r3, r3, #15
 80020c2:	b2da      	uxtb	r2, r3
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80020ce:	2b01      	cmp	r3, #1
 80020d0:	d101      	bne.n	80020d6 <HAL_PCD_EP_SetStall+0x82>
 80020d2:	2302      	movs	r3, #2
 80020d4:	e01d      	b.n	8002112 <HAL_PCD_EP_SetStall+0xbe>
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	2201      	movs	r2, #1
 80020da:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	68f9      	ldr	r1, [r7, #12]
 80020e4:	4618      	mov	r0, r3
 80020e6:	f002 fbb3 	bl	8004850 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80020ea:	78fb      	ldrb	r3, [r7, #3]
 80020ec:	f003 030f 	and.w	r3, r3, #15
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d109      	bne.n	8002108 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	6818      	ldr	r0, [r3, #0]
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	7999      	ldrb	r1, [r3, #6]
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002102:	461a      	mov	r2, r3
 8002104:	f002 fda4 	bl	8004c50 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	2200      	movs	r2, #0
 800210c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8002110:	2300      	movs	r3, #0
}
 8002112:	4618      	mov	r0, r3
 8002114:	3710      	adds	r7, #16
 8002116:	46bd      	mov	sp, r7
 8002118:	bd80      	pop	{r7, pc}

0800211a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800211a:	b580      	push	{r7, lr}
 800211c:	b084      	sub	sp, #16
 800211e:	af00      	add	r7, sp, #0
 8002120:	6078      	str	r0, [r7, #4]
 8002122:	460b      	mov	r3, r1
 8002124:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002126:	78fb      	ldrb	r3, [r7, #3]
 8002128:	f003 030f 	and.w	r3, r3, #15
 800212c:	687a      	ldr	r2, [r7, #4]
 800212e:	7912      	ldrb	r2, [r2, #4]
 8002130:	4293      	cmp	r3, r2
 8002132:	d901      	bls.n	8002138 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002134:	2301      	movs	r3, #1
 8002136:	e042      	b.n	80021be <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002138:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800213c:	2b00      	cmp	r3, #0
 800213e:	da0f      	bge.n	8002160 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002140:	78fb      	ldrb	r3, [r7, #3]
 8002142:	f003 020f 	and.w	r2, r3, #15
 8002146:	4613      	mov	r3, r2
 8002148:	00db      	lsls	r3, r3, #3
 800214a:	4413      	add	r3, r2
 800214c:	009b      	lsls	r3, r3, #2
 800214e:	3310      	adds	r3, #16
 8002150:	687a      	ldr	r2, [r7, #4]
 8002152:	4413      	add	r3, r2
 8002154:	3304      	adds	r3, #4
 8002156:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	2201      	movs	r2, #1
 800215c:	705a      	strb	r2, [r3, #1]
 800215e:	e00f      	b.n	8002180 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002160:	78fb      	ldrb	r3, [r7, #3]
 8002162:	f003 020f 	and.w	r2, r3, #15
 8002166:	4613      	mov	r3, r2
 8002168:	00db      	lsls	r3, r3, #3
 800216a:	4413      	add	r3, r2
 800216c:	009b      	lsls	r3, r3, #2
 800216e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002172:	687a      	ldr	r2, [r7, #4]
 8002174:	4413      	add	r3, r2
 8002176:	3304      	adds	r3, #4
 8002178:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	2200      	movs	r2, #0
 800217e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	2200      	movs	r2, #0
 8002184:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002186:	78fb      	ldrb	r3, [r7, #3]
 8002188:	f003 030f 	and.w	r3, r3, #15
 800218c:	b2da      	uxtb	r2, r3
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002198:	2b01      	cmp	r3, #1
 800219a:	d101      	bne.n	80021a0 <HAL_PCD_EP_ClrStall+0x86>
 800219c:	2302      	movs	r3, #2
 800219e:	e00e      	b.n	80021be <HAL_PCD_EP_ClrStall+0xa4>
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	2201      	movs	r2, #1
 80021a4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	68f9      	ldr	r1, [r7, #12]
 80021ae:	4618      	mov	r0, r3
 80021b0:	f002 fbbc 	bl	800492c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	2200      	movs	r2, #0
 80021b8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80021bc:	2300      	movs	r3, #0
}
 80021be:	4618      	mov	r0, r3
 80021c0:	3710      	adds	r7, #16
 80021c2:	46bd      	mov	sp, r7
 80021c4:	bd80      	pop	{r7, pc}

080021c6 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80021c6:	b580      	push	{r7, lr}
 80021c8:	b084      	sub	sp, #16
 80021ca:	af00      	add	r7, sp, #0
 80021cc:	6078      	str	r0, [r7, #4]
 80021ce:	460b      	mov	r3, r1
 80021d0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80021d2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	da0c      	bge.n	80021f4 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80021da:	78fb      	ldrb	r3, [r7, #3]
 80021dc:	f003 020f 	and.w	r2, r3, #15
 80021e0:	4613      	mov	r3, r2
 80021e2:	00db      	lsls	r3, r3, #3
 80021e4:	4413      	add	r3, r2
 80021e6:	009b      	lsls	r3, r3, #2
 80021e8:	3310      	adds	r3, #16
 80021ea:	687a      	ldr	r2, [r7, #4]
 80021ec:	4413      	add	r3, r2
 80021ee:	3304      	adds	r3, #4
 80021f0:	60fb      	str	r3, [r7, #12]
 80021f2:	e00c      	b.n	800220e <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80021f4:	78fb      	ldrb	r3, [r7, #3]
 80021f6:	f003 020f 	and.w	r2, r3, #15
 80021fa:	4613      	mov	r3, r2
 80021fc:	00db      	lsls	r3, r3, #3
 80021fe:	4413      	add	r3, r2
 8002200:	009b      	lsls	r3, r3, #2
 8002202:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002206:	687a      	ldr	r2, [r7, #4]
 8002208:	4413      	add	r3, r2
 800220a:	3304      	adds	r3, #4
 800220c:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	68f9      	ldr	r1, [r7, #12]
 8002214:	4618      	mov	r0, r3
 8002216:	f002 f9db 	bl	80045d0 <USB_EPStopXfer>
 800221a:	4603      	mov	r3, r0
 800221c:	72fb      	strb	r3, [r7, #11]

  return ret;
 800221e:	7afb      	ldrb	r3, [r7, #11]
}
 8002220:	4618      	mov	r0, r3
 8002222:	3710      	adds	r7, #16
 8002224:	46bd      	mov	sp, r7
 8002226:	bd80      	pop	{r7, pc}

08002228 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	b08a      	sub	sp, #40	@ 0x28
 800222c:	af02      	add	r7, sp, #8
 800222e:	6078      	str	r0, [r7, #4]
 8002230:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002238:	697b      	ldr	r3, [r7, #20]
 800223a:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800223c:	683a      	ldr	r2, [r7, #0]
 800223e:	4613      	mov	r3, r2
 8002240:	00db      	lsls	r3, r3, #3
 8002242:	4413      	add	r3, r2
 8002244:	009b      	lsls	r3, r3, #2
 8002246:	3310      	adds	r3, #16
 8002248:	687a      	ldr	r2, [r7, #4]
 800224a:	4413      	add	r3, r2
 800224c:	3304      	adds	r3, #4
 800224e:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	695a      	ldr	r2, [r3, #20]
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	691b      	ldr	r3, [r3, #16]
 8002258:	429a      	cmp	r2, r3
 800225a:	d901      	bls.n	8002260 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800225c:	2301      	movs	r3, #1
 800225e:	e06b      	b.n	8002338 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	691a      	ldr	r2, [r3, #16]
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	695b      	ldr	r3, [r3, #20]
 8002268:	1ad3      	subs	r3, r2, r3
 800226a:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	689b      	ldr	r3, [r3, #8]
 8002270:	69fa      	ldr	r2, [r7, #28]
 8002272:	429a      	cmp	r2, r3
 8002274:	d902      	bls.n	800227c <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	689b      	ldr	r3, [r3, #8]
 800227a:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800227c:	69fb      	ldr	r3, [r7, #28]
 800227e:	3303      	adds	r3, #3
 8002280:	089b      	lsrs	r3, r3, #2
 8002282:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002284:	e02a      	b.n	80022dc <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	691a      	ldr	r2, [r3, #16]
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	695b      	ldr	r3, [r3, #20]
 800228e:	1ad3      	subs	r3, r2, r3
 8002290:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	689b      	ldr	r3, [r3, #8]
 8002296:	69fa      	ldr	r2, [r7, #28]
 8002298:	429a      	cmp	r2, r3
 800229a:	d902      	bls.n	80022a2 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	689b      	ldr	r3, [r3, #8]
 80022a0:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80022a2:	69fb      	ldr	r3, [r7, #28]
 80022a4:	3303      	adds	r3, #3
 80022a6:	089b      	lsrs	r3, r3, #2
 80022a8:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	68d9      	ldr	r1, [r3, #12]
 80022ae:	683b      	ldr	r3, [r7, #0]
 80022b0:	b2da      	uxtb	r2, r3
 80022b2:	69fb      	ldr	r3, [r7, #28]
 80022b4:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80022ba:	9300      	str	r3, [sp, #0]
 80022bc:	4603      	mov	r3, r0
 80022be:	6978      	ldr	r0, [r7, #20]
 80022c0:	f002 fa30 	bl	8004724 <USB_WritePacket>

    ep->xfer_buff  += len;
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	68da      	ldr	r2, [r3, #12]
 80022c8:	69fb      	ldr	r3, [r7, #28]
 80022ca:	441a      	add	r2, r3
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	695a      	ldr	r2, [r3, #20]
 80022d4:	69fb      	ldr	r3, [r7, #28]
 80022d6:	441a      	add	r2, r3
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80022dc:	683b      	ldr	r3, [r7, #0]
 80022de:	015a      	lsls	r2, r3, #5
 80022e0:	693b      	ldr	r3, [r7, #16]
 80022e2:	4413      	add	r3, r2
 80022e4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80022e8:	699b      	ldr	r3, [r3, #24]
 80022ea:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80022ec:	69ba      	ldr	r2, [r7, #24]
 80022ee:	429a      	cmp	r2, r3
 80022f0:	d809      	bhi.n	8002306 <PCD_WriteEmptyTxFifo+0xde>
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	695a      	ldr	r2, [r3, #20]
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80022fa:	429a      	cmp	r2, r3
 80022fc:	d203      	bcs.n	8002306 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	691b      	ldr	r3, [r3, #16]
 8002302:	2b00      	cmp	r3, #0
 8002304:	d1bf      	bne.n	8002286 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	691a      	ldr	r2, [r3, #16]
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	695b      	ldr	r3, [r3, #20]
 800230e:	429a      	cmp	r2, r3
 8002310:	d811      	bhi.n	8002336 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002312:	683b      	ldr	r3, [r7, #0]
 8002314:	f003 030f 	and.w	r3, r3, #15
 8002318:	2201      	movs	r2, #1
 800231a:	fa02 f303 	lsl.w	r3, r2, r3
 800231e:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002320:	693b      	ldr	r3, [r7, #16]
 8002322:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002326:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002328:	68bb      	ldr	r3, [r7, #8]
 800232a:	43db      	mvns	r3, r3
 800232c:	6939      	ldr	r1, [r7, #16]
 800232e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8002332:	4013      	ands	r3, r2
 8002334:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8002336:	2300      	movs	r3, #0
}
 8002338:	4618      	mov	r0, r3
 800233a:	3720      	adds	r7, #32
 800233c:	46bd      	mov	sp, r7
 800233e:	bd80      	pop	{r7, pc}

08002340 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	b088      	sub	sp, #32
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
 8002348:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002350:	69fb      	ldr	r3, [r7, #28]
 8002352:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8002354:	69fb      	ldr	r3, [r7, #28]
 8002356:	333c      	adds	r3, #60	@ 0x3c
 8002358:	3304      	adds	r3, #4
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800235e:	683b      	ldr	r3, [r7, #0]
 8002360:	015a      	lsls	r2, r3, #5
 8002362:	69bb      	ldr	r3, [r7, #24]
 8002364:	4413      	add	r3, r2
 8002366:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800236a:	689b      	ldr	r3, [r3, #8]
 800236c:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	799b      	ldrb	r3, [r3, #6]
 8002372:	2b01      	cmp	r3, #1
 8002374:	d17b      	bne.n	800246e <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8002376:	693b      	ldr	r3, [r7, #16]
 8002378:	f003 0308 	and.w	r3, r3, #8
 800237c:	2b00      	cmp	r3, #0
 800237e:	d015      	beq.n	80023ac <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002380:	697b      	ldr	r3, [r7, #20]
 8002382:	4a61      	ldr	r2, [pc, #388]	@ (8002508 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002384:	4293      	cmp	r3, r2
 8002386:	f240 80b9 	bls.w	80024fc <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800238a:	693b      	ldr	r3, [r7, #16]
 800238c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002390:	2b00      	cmp	r3, #0
 8002392:	f000 80b3 	beq.w	80024fc <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002396:	683b      	ldr	r3, [r7, #0]
 8002398:	015a      	lsls	r2, r3, #5
 800239a:	69bb      	ldr	r3, [r7, #24]
 800239c:	4413      	add	r3, r2
 800239e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80023a2:	461a      	mov	r2, r3
 80023a4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80023a8:	6093      	str	r3, [r2, #8]
 80023aa:	e0a7      	b.n	80024fc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80023ac:	693b      	ldr	r3, [r7, #16]
 80023ae:	f003 0320 	and.w	r3, r3, #32
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d009      	beq.n	80023ca <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80023b6:	683b      	ldr	r3, [r7, #0]
 80023b8:	015a      	lsls	r2, r3, #5
 80023ba:	69bb      	ldr	r3, [r7, #24]
 80023bc:	4413      	add	r3, r2
 80023be:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80023c2:	461a      	mov	r2, r3
 80023c4:	2320      	movs	r3, #32
 80023c6:	6093      	str	r3, [r2, #8]
 80023c8:	e098      	b.n	80024fc <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80023ca:	693b      	ldr	r3, [r7, #16]
 80023cc:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	f040 8093 	bne.w	80024fc <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80023d6:	697b      	ldr	r3, [r7, #20]
 80023d8:	4a4b      	ldr	r2, [pc, #300]	@ (8002508 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80023da:	4293      	cmp	r3, r2
 80023dc:	d90f      	bls.n	80023fe <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80023de:	693b      	ldr	r3, [r7, #16]
 80023e0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d00a      	beq.n	80023fe <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	015a      	lsls	r2, r3, #5
 80023ec:	69bb      	ldr	r3, [r7, #24]
 80023ee:	4413      	add	r3, r2
 80023f0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80023f4:	461a      	mov	r2, r3
 80023f6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80023fa:	6093      	str	r3, [r2, #8]
 80023fc:	e07e      	b.n	80024fc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80023fe:	683a      	ldr	r2, [r7, #0]
 8002400:	4613      	mov	r3, r2
 8002402:	00db      	lsls	r3, r3, #3
 8002404:	4413      	add	r3, r2
 8002406:	009b      	lsls	r3, r3, #2
 8002408:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800240c:	687a      	ldr	r2, [r7, #4]
 800240e:	4413      	add	r3, r2
 8002410:	3304      	adds	r3, #4
 8002412:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	6a1a      	ldr	r2, [r3, #32]
 8002418:	683b      	ldr	r3, [r7, #0]
 800241a:	0159      	lsls	r1, r3, #5
 800241c:	69bb      	ldr	r3, [r7, #24]
 800241e:	440b      	add	r3, r1
 8002420:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002424:	691b      	ldr	r3, [r3, #16]
 8002426:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800242a:	1ad2      	subs	r2, r2, r3
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8002430:	683b      	ldr	r3, [r7, #0]
 8002432:	2b00      	cmp	r3, #0
 8002434:	d114      	bne.n	8002460 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	691b      	ldr	r3, [r3, #16]
 800243a:	2b00      	cmp	r3, #0
 800243c:	d109      	bne.n	8002452 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	6818      	ldr	r0, [r3, #0]
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002448:	461a      	mov	r2, r3
 800244a:	2101      	movs	r1, #1
 800244c:	f002 fc00 	bl	8004c50 <USB_EP0_OutStart>
 8002450:	e006      	b.n	8002460 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	68da      	ldr	r2, [r3, #12]
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	695b      	ldr	r3, [r3, #20]
 800245a:	441a      	add	r2, r3
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002460:	683b      	ldr	r3, [r7, #0]
 8002462:	b2db      	uxtb	r3, r3
 8002464:	4619      	mov	r1, r3
 8002466:	6878      	ldr	r0, [r7, #4]
 8002468:	f004 fe02 	bl	8007070 <HAL_PCD_DataOutStageCallback>
 800246c:	e046      	b.n	80024fc <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800246e:	697b      	ldr	r3, [r7, #20]
 8002470:	4a26      	ldr	r2, [pc, #152]	@ (800250c <PCD_EP_OutXfrComplete_int+0x1cc>)
 8002472:	4293      	cmp	r3, r2
 8002474:	d124      	bne.n	80024c0 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002476:	693b      	ldr	r3, [r7, #16]
 8002478:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800247c:	2b00      	cmp	r3, #0
 800247e:	d00a      	beq.n	8002496 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	015a      	lsls	r2, r3, #5
 8002484:	69bb      	ldr	r3, [r7, #24]
 8002486:	4413      	add	r3, r2
 8002488:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800248c:	461a      	mov	r2, r3
 800248e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002492:	6093      	str	r3, [r2, #8]
 8002494:	e032      	b.n	80024fc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002496:	693b      	ldr	r3, [r7, #16]
 8002498:	f003 0320 	and.w	r3, r3, #32
 800249c:	2b00      	cmp	r3, #0
 800249e:	d008      	beq.n	80024b2 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80024a0:	683b      	ldr	r3, [r7, #0]
 80024a2:	015a      	lsls	r2, r3, #5
 80024a4:	69bb      	ldr	r3, [r7, #24]
 80024a6:	4413      	add	r3, r2
 80024a8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80024ac:	461a      	mov	r2, r3
 80024ae:	2320      	movs	r3, #32
 80024b0:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80024b2:	683b      	ldr	r3, [r7, #0]
 80024b4:	b2db      	uxtb	r3, r3
 80024b6:	4619      	mov	r1, r3
 80024b8:	6878      	ldr	r0, [r7, #4]
 80024ba:	f004 fdd9 	bl	8007070 <HAL_PCD_DataOutStageCallback>
 80024be:	e01d      	b.n	80024fc <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d114      	bne.n	80024f0 <PCD_EP_OutXfrComplete_int+0x1b0>
 80024c6:	6879      	ldr	r1, [r7, #4]
 80024c8:	683a      	ldr	r2, [r7, #0]
 80024ca:	4613      	mov	r3, r2
 80024cc:	00db      	lsls	r3, r3, #3
 80024ce:	4413      	add	r3, r2
 80024d0:	009b      	lsls	r3, r3, #2
 80024d2:	440b      	add	r3, r1
 80024d4:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d108      	bne.n	80024f0 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	6818      	ldr	r0, [r3, #0]
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80024e8:	461a      	mov	r2, r3
 80024ea:	2100      	movs	r1, #0
 80024ec:	f002 fbb0 	bl	8004c50 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	b2db      	uxtb	r3, r3
 80024f4:	4619      	mov	r1, r3
 80024f6:	6878      	ldr	r0, [r7, #4]
 80024f8:	f004 fdba 	bl	8007070 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80024fc:	2300      	movs	r3, #0
}
 80024fe:	4618      	mov	r0, r3
 8002500:	3720      	adds	r7, #32
 8002502:	46bd      	mov	sp, r7
 8002504:	bd80      	pop	{r7, pc}
 8002506:	bf00      	nop
 8002508:	4f54300a 	.word	0x4f54300a
 800250c:	4f54310a 	.word	0x4f54310a

08002510 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	b086      	sub	sp, #24
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
 8002518:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002520:	697b      	ldr	r3, [r7, #20]
 8002522:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8002524:	697b      	ldr	r3, [r7, #20]
 8002526:	333c      	adds	r3, #60	@ 0x3c
 8002528:	3304      	adds	r3, #4
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800252e:	683b      	ldr	r3, [r7, #0]
 8002530:	015a      	lsls	r2, r3, #5
 8002532:	693b      	ldr	r3, [r7, #16]
 8002534:	4413      	add	r3, r2
 8002536:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800253a:	689b      	ldr	r3, [r3, #8]
 800253c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	4a15      	ldr	r2, [pc, #84]	@ (8002598 <PCD_EP_OutSetupPacket_int+0x88>)
 8002542:	4293      	cmp	r3, r2
 8002544:	d90e      	bls.n	8002564 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002546:	68bb      	ldr	r3, [r7, #8]
 8002548:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800254c:	2b00      	cmp	r3, #0
 800254e:	d009      	beq.n	8002564 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002550:	683b      	ldr	r3, [r7, #0]
 8002552:	015a      	lsls	r2, r3, #5
 8002554:	693b      	ldr	r3, [r7, #16]
 8002556:	4413      	add	r3, r2
 8002558:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800255c:	461a      	mov	r2, r3
 800255e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002562:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002564:	6878      	ldr	r0, [r7, #4]
 8002566:	f004 fd71 	bl	800704c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	4a0a      	ldr	r2, [pc, #40]	@ (8002598 <PCD_EP_OutSetupPacket_int+0x88>)
 800256e:	4293      	cmp	r3, r2
 8002570:	d90c      	bls.n	800258c <PCD_EP_OutSetupPacket_int+0x7c>
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	799b      	ldrb	r3, [r3, #6]
 8002576:	2b01      	cmp	r3, #1
 8002578:	d108      	bne.n	800258c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	6818      	ldr	r0, [r3, #0]
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002584:	461a      	mov	r2, r3
 8002586:	2101      	movs	r1, #1
 8002588:	f002 fb62 	bl	8004c50 <USB_EP0_OutStart>
  }

  return HAL_OK;
 800258c:	2300      	movs	r3, #0
}
 800258e:	4618      	mov	r0, r3
 8002590:	3718      	adds	r7, #24
 8002592:	46bd      	mov	sp, r7
 8002594:	bd80      	pop	{r7, pc}
 8002596:	bf00      	nop
 8002598:	4f54300a 	.word	0x4f54300a

0800259c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800259c:	b480      	push	{r7}
 800259e:	b085      	sub	sp, #20
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
 80025a4:	460b      	mov	r3, r1
 80025a6:	70fb      	strb	r3, [r7, #3]
 80025a8:	4613      	mov	r3, r2
 80025aa:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025b2:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80025b4:	78fb      	ldrb	r3, [r7, #3]
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d107      	bne.n	80025ca <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80025ba:	883b      	ldrh	r3, [r7, #0]
 80025bc:	0419      	lsls	r1, r3, #16
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	68ba      	ldr	r2, [r7, #8]
 80025c4:	430a      	orrs	r2, r1
 80025c6:	629a      	str	r2, [r3, #40]	@ 0x28
 80025c8:	e028      	b.n	800261c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025d0:	0c1b      	lsrs	r3, r3, #16
 80025d2:	68ba      	ldr	r2, [r7, #8]
 80025d4:	4413      	add	r3, r2
 80025d6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80025d8:	2300      	movs	r3, #0
 80025da:	73fb      	strb	r3, [r7, #15]
 80025dc:	e00d      	b.n	80025fa <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681a      	ldr	r2, [r3, #0]
 80025e2:	7bfb      	ldrb	r3, [r7, #15]
 80025e4:	3340      	adds	r3, #64	@ 0x40
 80025e6:	009b      	lsls	r3, r3, #2
 80025e8:	4413      	add	r3, r2
 80025ea:	685b      	ldr	r3, [r3, #4]
 80025ec:	0c1b      	lsrs	r3, r3, #16
 80025ee:	68ba      	ldr	r2, [r7, #8]
 80025f0:	4413      	add	r3, r2
 80025f2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80025f4:	7bfb      	ldrb	r3, [r7, #15]
 80025f6:	3301      	adds	r3, #1
 80025f8:	73fb      	strb	r3, [r7, #15]
 80025fa:	7bfa      	ldrb	r2, [r7, #15]
 80025fc:	78fb      	ldrb	r3, [r7, #3]
 80025fe:	3b01      	subs	r3, #1
 8002600:	429a      	cmp	r2, r3
 8002602:	d3ec      	bcc.n	80025de <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002604:	883b      	ldrh	r3, [r7, #0]
 8002606:	0418      	lsls	r0, r3, #16
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	6819      	ldr	r1, [r3, #0]
 800260c:	78fb      	ldrb	r3, [r7, #3]
 800260e:	3b01      	subs	r3, #1
 8002610:	68ba      	ldr	r2, [r7, #8]
 8002612:	4302      	orrs	r2, r0
 8002614:	3340      	adds	r3, #64	@ 0x40
 8002616:	009b      	lsls	r3, r3, #2
 8002618:	440b      	add	r3, r1
 800261a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800261c:	2300      	movs	r3, #0
}
 800261e:	4618      	mov	r0, r3
 8002620:	3714      	adds	r7, #20
 8002622:	46bd      	mov	sp, r7
 8002624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002628:	4770      	bx	lr

0800262a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800262a:	b480      	push	{r7}
 800262c:	b083      	sub	sp, #12
 800262e:	af00      	add	r7, sp, #0
 8002630:	6078      	str	r0, [r7, #4]
 8002632:	460b      	mov	r3, r1
 8002634:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	887a      	ldrh	r2, [r7, #2]
 800263c:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800263e:	2300      	movs	r3, #0
}
 8002640:	4618      	mov	r0, r3
 8002642:	370c      	adds	r7, #12
 8002644:	46bd      	mov	sp, r7
 8002646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264a:	4770      	bx	lr

0800264c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800264c:	b480      	push	{r7}
 800264e:	b083      	sub	sp, #12
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
 8002654:	460b      	mov	r3, r1
 8002656:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8002658:	bf00      	nop
 800265a:	370c      	adds	r7, #12
 800265c:	46bd      	mov	sp, r7
 800265e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002662:	4770      	bx	lr

08002664 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	b086      	sub	sp, #24
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	2b00      	cmp	r3, #0
 8002670:	d101      	bne.n	8002676 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002672:	2301      	movs	r3, #1
 8002674:	e267      	b.n	8002b46 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f003 0301 	and.w	r3, r3, #1
 800267e:	2b00      	cmp	r3, #0
 8002680:	d075      	beq.n	800276e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002682:	4b88      	ldr	r3, [pc, #544]	@ (80028a4 <HAL_RCC_OscConfig+0x240>)
 8002684:	689b      	ldr	r3, [r3, #8]
 8002686:	f003 030c 	and.w	r3, r3, #12
 800268a:	2b04      	cmp	r3, #4
 800268c:	d00c      	beq.n	80026a8 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800268e:	4b85      	ldr	r3, [pc, #532]	@ (80028a4 <HAL_RCC_OscConfig+0x240>)
 8002690:	689b      	ldr	r3, [r3, #8]
 8002692:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002696:	2b08      	cmp	r3, #8
 8002698:	d112      	bne.n	80026c0 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800269a:	4b82      	ldr	r3, [pc, #520]	@ (80028a4 <HAL_RCC_OscConfig+0x240>)
 800269c:	685b      	ldr	r3, [r3, #4]
 800269e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80026a2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80026a6:	d10b      	bne.n	80026c0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026a8:	4b7e      	ldr	r3, [pc, #504]	@ (80028a4 <HAL_RCC_OscConfig+0x240>)
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d05b      	beq.n	800276c <HAL_RCC_OscConfig+0x108>
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	685b      	ldr	r3, [r3, #4]
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d157      	bne.n	800276c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80026bc:	2301      	movs	r3, #1
 80026be:	e242      	b.n	8002b46 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	685b      	ldr	r3, [r3, #4]
 80026c4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80026c8:	d106      	bne.n	80026d8 <HAL_RCC_OscConfig+0x74>
 80026ca:	4b76      	ldr	r3, [pc, #472]	@ (80028a4 <HAL_RCC_OscConfig+0x240>)
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	4a75      	ldr	r2, [pc, #468]	@ (80028a4 <HAL_RCC_OscConfig+0x240>)
 80026d0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80026d4:	6013      	str	r3, [r2, #0]
 80026d6:	e01d      	b.n	8002714 <HAL_RCC_OscConfig+0xb0>
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	685b      	ldr	r3, [r3, #4]
 80026dc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80026e0:	d10c      	bne.n	80026fc <HAL_RCC_OscConfig+0x98>
 80026e2:	4b70      	ldr	r3, [pc, #448]	@ (80028a4 <HAL_RCC_OscConfig+0x240>)
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	4a6f      	ldr	r2, [pc, #444]	@ (80028a4 <HAL_RCC_OscConfig+0x240>)
 80026e8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80026ec:	6013      	str	r3, [r2, #0]
 80026ee:	4b6d      	ldr	r3, [pc, #436]	@ (80028a4 <HAL_RCC_OscConfig+0x240>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	4a6c      	ldr	r2, [pc, #432]	@ (80028a4 <HAL_RCC_OscConfig+0x240>)
 80026f4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80026f8:	6013      	str	r3, [r2, #0]
 80026fa:	e00b      	b.n	8002714 <HAL_RCC_OscConfig+0xb0>
 80026fc:	4b69      	ldr	r3, [pc, #420]	@ (80028a4 <HAL_RCC_OscConfig+0x240>)
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	4a68      	ldr	r2, [pc, #416]	@ (80028a4 <HAL_RCC_OscConfig+0x240>)
 8002702:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002706:	6013      	str	r3, [r2, #0]
 8002708:	4b66      	ldr	r3, [pc, #408]	@ (80028a4 <HAL_RCC_OscConfig+0x240>)
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	4a65      	ldr	r2, [pc, #404]	@ (80028a4 <HAL_RCC_OscConfig+0x240>)
 800270e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002712:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	685b      	ldr	r3, [r3, #4]
 8002718:	2b00      	cmp	r3, #0
 800271a:	d013      	beq.n	8002744 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800271c:	f7fe fa8a 	bl	8000c34 <HAL_GetTick>
 8002720:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002722:	e008      	b.n	8002736 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002724:	f7fe fa86 	bl	8000c34 <HAL_GetTick>
 8002728:	4602      	mov	r2, r0
 800272a:	693b      	ldr	r3, [r7, #16]
 800272c:	1ad3      	subs	r3, r2, r3
 800272e:	2b64      	cmp	r3, #100	@ 0x64
 8002730:	d901      	bls.n	8002736 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002732:	2303      	movs	r3, #3
 8002734:	e207      	b.n	8002b46 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002736:	4b5b      	ldr	r3, [pc, #364]	@ (80028a4 <HAL_RCC_OscConfig+0x240>)
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800273e:	2b00      	cmp	r3, #0
 8002740:	d0f0      	beq.n	8002724 <HAL_RCC_OscConfig+0xc0>
 8002742:	e014      	b.n	800276e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002744:	f7fe fa76 	bl	8000c34 <HAL_GetTick>
 8002748:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800274a:	e008      	b.n	800275e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800274c:	f7fe fa72 	bl	8000c34 <HAL_GetTick>
 8002750:	4602      	mov	r2, r0
 8002752:	693b      	ldr	r3, [r7, #16]
 8002754:	1ad3      	subs	r3, r2, r3
 8002756:	2b64      	cmp	r3, #100	@ 0x64
 8002758:	d901      	bls.n	800275e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800275a:	2303      	movs	r3, #3
 800275c:	e1f3      	b.n	8002b46 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800275e:	4b51      	ldr	r3, [pc, #324]	@ (80028a4 <HAL_RCC_OscConfig+0x240>)
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002766:	2b00      	cmp	r3, #0
 8002768:	d1f0      	bne.n	800274c <HAL_RCC_OscConfig+0xe8>
 800276a:	e000      	b.n	800276e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800276c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f003 0302 	and.w	r3, r3, #2
 8002776:	2b00      	cmp	r3, #0
 8002778:	d063      	beq.n	8002842 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800277a:	4b4a      	ldr	r3, [pc, #296]	@ (80028a4 <HAL_RCC_OscConfig+0x240>)
 800277c:	689b      	ldr	r3, [r3, #8]
 800277e:	f003 030c 	and.w	r3, r3, #12
 8002782:	2b00      	cmp	r3, #0
 8002784:	d00b      	beq.n	800279e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002786:	4b47      	ldr	r3, [pc, #284]	@ (80028a4 <HAL_RCC_OscConfig+0x240>)
 8002788:	689b      	ldr	r3, [r3, #8]
 800278a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800278e:	2b08      	cmp	r3, #8
 8002790:	d11c      	bne.n	80027cc <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002792:	4b44      	ldr	r3, [pc, #272]	@ (80028a4 <HAL_RCC_OscConfig+0x240>)
 8002794:	685b      	ldr	r3, [r3, #4]
 8002796:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800279a:	2b00      	cmp	r3, #0
 800279c:	d116      	bne.n	80027cc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800279e:	4b41      	ldr	r3, [pc, #260]	@ (80028a4 <HAL_RCC_OscConfig+0x240>)
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f003 0302 	and.w	r3, r3, #2
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d005      	beq.n	80027b6 <HAL_RCC_OscConfig+0x152>
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	68db      	ldr	r3, [r3, #12]
 80027ae:	2b01      	cmp	r3, #1
 80027b0:	d001      	beq.n	80027b6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80027b2:	2301      	movs	r3, #1
 80027b4:	e1c7      	b.n	8002b46 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027b6:	4b3b      	ldr	r3, [pc, #236]	@ (80028a4 <HAL_RCC_OscConfig+0x240>)
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	691b      	ldr	r3, [r3, #16]
 80027c2:	00db      	lsls	r3, r3, #3
 80027c4:	4937      	ldr	r1, [pc, #220]	@ (80028a4 <HAL_RCC_OscConfig+0x240>)
 80027c6:	4313      	orrs	r3, r2
 80027c8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80027ca:	e03a      	b.n	8002842 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	68db      	ldr	r3, [r3, #12]
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d020      	beq.n	8002816 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80027d4:	4b34      	ldr	r3, [pc, #208]	@ (80028a8 <HAL_RCC_OscConfig+0x244>)
 80027d6:	2201      	movs	r2, #1
 80027d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027da:	f7fe fa2b 	bl	8000c34 <HAL_GetTick>
 80027de:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027e0:	e008      	b.n	80027f4 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80027e2:	f7fe fa27 	bl	8000c34 <HAL_GetTick>
 80027e6:	4602      	mov	r2, r0
 80027e8:	693b      	ldr	r3, [r7, #16]
 80027ea:	1ad3      	subs	r3, r2, r3
 80027ec:	2b02      	cmp	r3, #2
 80027ee:	d901      	bls.n	80027f4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80027f0:	2303      	movs	r3, #3
 80027f2:	e1a8      	b.n	8002b46 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027f4:	4b2b      	ldr	r3, [pc, #172]	@ (80028a4 <HAL_RCC_OscConfig+0x240>)
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f003 0302 	and.w	r3, r3, #2
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d0f0      	beq.n	80027e2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002800:	4b28      	ldr	r3, [pc, #160]	@ (80028a4 <HAL_RCC_OscConfig+0x240>)
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	691b      	ldr	r3, [r3, #16]
 800280c:	00db      	lsls	r3, r3, #3
 800280e:	4925      	ldr	r1, [pc, #148]	@ (80028a4 <HAL_RCC_OscConfig+0x240>)
 8002810:	4313      	orrs	r3, r2
 8002812:	600b      	str	r3, [r1, #0]
 8002814:	e015      	b.n	8002842 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002816:	4b24      	ldr	r3, [pc, #144]	@ (80028a8 <HAL_RCC_OscConfig+0x244>)
 8002818:	2200      	movs	r2, #0
 800281a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800281c:	f7fe fa0a 	bl	8000c34 <HAL_GetTick>
 8002820:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002822:	e008      	b.n	8002836 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002824:	f7fe fa06 	bl	8000c34 <HAL_GetTick>
 8002828:	4602      	mov	r2, r0
 800282a:	693b      	ldr	r3, [r7, #16]
 800282c:	1ad3      	subs	r3, r2, r3
 800282e:	2b02      	cmp	r3, #2
 8002830:	d901      	bls.n	8002836 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002832:	2303      	movs	r3, #3
 8002834:	e187      	b.n	8002b46 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002836:	4b1b      	ldr	r3, [pc, #108]	@ (80028a4 <HAL_RCC_OscConfig+0x240>)
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f003 0302 	and.w	r3, r3, #2
 800283e:	2b00      	cmp	r3, #0
 8002840:	d1f0      	bne.n	8002824 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f003 0308 	and.w	r3, r3, #8
 800284a:	2b00      	cmp	r3, #0
 800284c:	d036      	beq.n	80028bc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	695b      	ldr	r3, [r3, #20]
 8002852:	2b00      	cmp	r3, #0
 8002854:	d016      	beq.n	8002884 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002856:	4b15      	ldr	r3, [pc, #84]	@ (80028ac <HAL_RCC_OscConfig+0x248>)
 8002858:	2201      	movs	r2, #1
 800285a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800285c:	f7fe f9ea 	bl	8000c34 <HAL_GetTick>
 8002860:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002862:	e008      	b.n	8002876 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002864:	f7fe f9e6 	bl	8000c34 <HAL_GetTick>
 8002868:	4602      	mov	r2, r0
 800286a:	693b      	ldr	r3, [r7, #16]
 800286c:	1ad3      	subs	r3, r2, r3
 800286e:	2b02      	cmp	r3, #2
 8002870:	d901      	bls.n	8002876 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002872:	2303      	movs	r3, #3
 8002874:	e167      	b.n	8002b46 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002876:	4b0b      	ldr	r3, [pc, #44]	@ (80028a4 <HAL_RCC_OscConfig+0x240>)
 8002878:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800287a:	f003 0302 	and.w	r3, r3, #2
 800287e:	2b00      	cmp	r3, #0
 8002880:	d0f0      	beq.n	8002864 <HAL_RCC_OscConfig+0x200>
 8002882:	e01b      	b.n	80028bc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002884:	4b09      	ldr	r3, [pc, #36]	@ (80028ac <HAL_RCC_OscConfig+0x248>)
 8002886:	2200      	movs	r2, #0
 8002888:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800288a:	f7fe f9d3 	bl	8000c34 <HAL_GetTick>
 800288e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002890:	e00e      	b.n	80028b0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002892:	f7fe f9cf 	bl	8000c34 <HAL_GetTick>
 8002896:	4602      	mov	r2, r0
 8002898:	693b      	ldr	r3, [r7, #16]
 800289a:	1ad3      	subs	r3, r2, r3
 800289c:	2b02      	cmp	r3, #2
 800289e:	d907      	bls.n	80028b0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80028a0:	2303      	movs	r3, #3
 80028a2:	e150      	b.n	8002b46 <HAL_RCC_OscConfig+0x4e2>
 80028a4:	40023800 	.word	0x40023800
 80028a8:	42470000 	.word	0x42470000
 80028ac:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80028b0:	4b88      	ldr	r3, [pc, #544]	@ (8002ad4 <HAL_RCC_OscConfig+0x470>)
 80028b2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80028b4:	f003 0302 	and.w	r3, r3, #2
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d1ea      	bne.n	8002892 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f003 0304 	and.w	r3, r3, #4
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	f000 8097 	beq.w	80029f8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80028ca:	2300      	movs	r3, #0
 80028cc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80028ce:	4b81      	ldr	r3, [pc, #516]	@ (8002ad4 <HAL_RCC_OscConfig+0x470>)
 80028d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d10f      	bne.n	80028fa <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80028da:	2300      	movs	r3, #0
 80028dc:	60bb      	str	r3, [r7, #8]
 80028de:	4b7d      	ldr	r3, [pc, #500]	@ (8002ad4 <HAL_RCC_OscConfig+0x470>)
 80028e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028e2:	4a7c      	ldr	r2, [pc, #496]	@ (8002ad4 <HAL_RCC_OscConfig+0x470>)
 80028e4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80028e8:	6413      	str	r3, [r2, #64]	@ 0x40
 80028ea:	4b7a      	ldr	r3, [pc, #488]	@ (8002ad4 <HAL_RCC_OscConfig+0x470>)
 80028ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80028f2:	60bb      	str	r3, [r7, #8]
 80028f4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80028f6:	2301      	movs	r3, #1
 80028f8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028fa:	4b77      	ldr	r3, [pc, #476]	@ (8002ad8 <HAL_RCC_OscConfig+0x474>)
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002902:	2b00      	cmp	r3, #0
 8002904:	d118      	bne.n	8002938 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002906:	4b74      	ldr	r3, [pc, #464]	@ (8002ad8 <HAL_RCC_OscConfig+0x474>)
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	4a73      	ldr	r2, [pc, #460]	@ (8002ad8 <HAL_RCC_OscConfig+0x474>)
 800290c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002910:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002912:	f7fe f98f 	bl	8000c34 <HAL_GetTick>
 8002916:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002918:	e008      	b.n	800292c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800291a:	f7fe f98b 	bl	8000c34 <HAL_GetTick>
 800291e:	4602      	mov	r2, r0
 8002920:	693b      	ldr	r3, [r7, #16]
 8002922:	1ad3      	subs	r3, r2, r3
 8002924:	2b02      	cmp	r3, #2
 8002926:	d901      	bls.n	800292c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002928:	2303      	movs	r3, #3
 800292a:	e10c      	b.n	8002b46 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800292c:	4b6a      	ldr	r3, [pc, #424]	@ (8002ad8 <HAL_RCC_OscConfig+0x474>)
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002934:	2b00      	cmp	r3, #0
 8002936:	d0f0      	beq.n	800291a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	689b      	ldr	r3, [r3, #8]
 800293c:	2b01      	cmp	r3, #1
 800293e:	d106      	bne.n	800294e <HAL_RCC_OscConfig+0x2ea>
 8002940:	4b64      	ldr	r3, [pc, #400]	@ (8002ad4 <HAL_RCC_OscConfig+0x470>)
 8002942:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002944:	4a63      	ldr	r2, [pc, #396]	@ (8002ad4 <HAL_RCC_OscConfig+0x470>)
 8002946:	f043 0301 	orr.w	r3, r3, #1
 800294a:	6713      	str	r3, [r2, #112]	@ 0x70
 800294c:	e01c      	b.n	8002988 <HAL_RCC_OscConfig+0x324>
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	689b      	ldr	r3, [r3, #8]
 8002952:	2b05      	cmp	r3, #5
 8002954:	d10c      	bne.n	8002970 <HAL_RCC_OscConfig+0x30c>
 8002956:	4b5f      	ldr	r3, [pc, #380]	@ (8002ad4 <HAL_RCC_OscConfig+0x470>)
 8002958:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800295a:	4a5e      	ldr	r2, [pc, #376]	@ (8002ad4 <HAL_RCC_OscConfig+0x470>)
 800295c:	f043 0304 	orr.w	r3, r3, #4
 8002960:	6713      	str	r3, [r2, #112]	@ 0x70
 8002962:	4b5c      	ldr	r3, [pc, #368]	@ (8002ad4 <HAL_RCC_OscConfig+0x470>)
 8002964:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002966:	4a5b      	ldr	r2, [pc, #364]	@ (8002ad4 <HAL_RCC_OscConfig+0x470>)
 8002968:	f043 0301 	orr.w	r3, r3, #1
 800296c:	6713      	str	r3, [r2, #112]	@ 0x70
 800296e:	e00b      	b.n	8002988 <HAL_RCC_OscConfig+0x324>
 8002970:	4b58      	ldr	r3, [pc, #352]	@ (8002ad4 <HAL_RCC_OscConfig+0x470>)
 8002972:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002974:	4a57      	ldr	r2, [pc, #348]	@ (8002ad4 <HAL_RCC_OscConfig+0x470>)
 8002976:	f023 0301 	bic.w	r3, r3, #1
 800297a:	6713      	str	r3, [r2, #112]	@ 0x70
 800297c:	4b55      	ldr	r3, [pc, #340]	@ (8002ad4 <HAL_RCC_OscConfig+0x470>)
 800297e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002980:	4a54      	ldr	r2, [pc, #336]	@ (8002ad4 <HAL_RCC_OscConfig+0x470>)
 8002982:	f023 0304 	bic.w	r3, r3, #4
 8002986:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	689b      	ldr	r3, [r3, #8]
 800298c:	2b00      	cmp	r3, #0
 800298e:	d015      	beq.n	80029bc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002990:	f7fe f950 	bl	8000c34 <HAL_GetTick>
 8002994:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002996:	e00a      	b.n	80029ae <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002998:	f7fe f94c 	bl	8000c34 <HAL_GetTick>
 800299c:	4602      	mov	r2, r0
 800299e:	693b      	ldr	r3, [r7, #16]
 80029a0:	1ad3      	subs	r3, r2, r3
 80029a2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80029a6:	4293      	cmp	r3, r2
 80029a8:	d901      	bls.n	80029ae <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80029aa:	2303      	movs	r3, #3
 80029ac:	e0cb      	b.n	8002b46 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029ae:	4b49      	ldr	r3, [pc, #292]	@ (8002ad4 <HAL_RCC_OscConfig+0x470>)
 80029b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029b2:	f003 0302 	and.w	r3, r3, #2
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d0ee      	beq.n	8002998 <HAL_RCC_OscConfig+0x334>
 80029ba:	e014      	b.n	80029e6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029bc:	f7fe f93a 	bl	8000c34 <HAL_GetTick>
 80029c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80029c2:	e00a      	b.n	80029da <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029c4:	f7fe f936 	bl	8000c34 <HAL_GetTick>
 80029c8:	4602      	mov	r2, r0
 80029ca:	693b      	ldr	r3, [r7, #16]
 80029cc:	1ad3      	subs	r3, r2, r3
 80029ce:	f241 3288 	movw	r2, #5000	@ 0x1388
 80029d2:	4293      	cmp	r3, r2
 80029d4:	d901      	bls.n	80029da <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80029d6:	2303      	movs	r3, #3
 80029d8:	e0b5      	b.n	8002b46 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80029da:	4b3e      	ldr	r3, [pc, #248]	@ (8002ad4 <HAL_RCC_OscConfig+0x470>)
 80029dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029de:	f003 0302 	and.w	r3, r3, #2
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d1ee      	bne.n	80029c4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80029e6:	7dfb      	ldrb	r3, [r7, #23]
 80029e8:	2b01      	cmp	r3, #1
 80029ea:	d105      	bne.n	80029f8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80029ec:	4b39      	ldr	r3, [pc, #228]	@ (8002ad4 <HAL_RCC_OscConfig+0x470>)
 80029ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029f0:	4a38      	ldr	r2, [pc, #224]	@ (8002ad4 <HAL_RCC_OscConfig+0x470>)
 80029f2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80029f6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	699b      	ldr	r3, [r3, #24]
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	f000 80a1 	beq.w	8002b44 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002a02:	4b34      	ldr	r3, [pc, #208]	@ (8002ad4 <HAL_RCC_OscConfig+0x470>)
 8002a04:	689b      	ldr	r3, [r3, #8]
 8002a06:	f003 030c 	and.w	r3, r3, #12
 8002a0a:	2b08      	cmp	r3, #8
 8002a0c:	d05c      	beq.n	8002ac8 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	699b      	ldr	r3, [r3, #24]
 8002a12:	2b02      	cmp	r3, #2
 8002a14:	d141      	bne.n	8002a9a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a16:	4b31      	ldr	r3, [pc, #196]	@ (8002adc <HAL_RCC_OscConfig+0x478>)
 8002a18:	2200      	movs	r2, #0
 8002a1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a1c:	f7fe f90a 	bl	8000c34 <HAL_GetTick>
 8002a20:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a22:	e008      	b.n	8002a36 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a24:	f7fe f906 	bl	8000c34 <HAL_GetTick>
 8002a28:	4602      	mov	r2, r0
 8002a2a:	693b      	ldr	r3, [r7, #16]
 8002a2c:	1ad3      	subs	r3, r2, r3
 8002a2e:	2b02      	cmp	r3, #2
 8002a30:	d901      	bls.n	8002a36 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002a32:	2303      	movs	r3, #3
 8002a34:	e087      	b.n	8002b46 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a36:	4b27      	ldr	r3, [pc, #156]	@ (8002ad4 <HAL_RCC_OscConfig+0x470>)
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d1f0      	bne.n	8002a24 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	69da      	ldr	r2, [r3, #28]
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	6a1b      	ldr	r3, [r3, #32]
 8002a4a:	431a      	orrs	r2, r3
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a50:	019b      	lsls	r3, r3, #6
 8002a52:	431a      	orrs	r2, r3
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a58:	085b      	lsrs	r3, r3, #1
 8002a5a:	3b01      	subs	r3, #1
 8002a5c:	041b      	lsls	r3, r3, #16
 8002a5e:	431a      	orrs	r2, r3
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a64:	061b      	lsls	r3, r3, #24
 8002a66:	491b      	ldr	r1, [pc, #108]	@ (8002ad4 <HAL_RCC_OscConfig+0x470>)
 8002a68:	4313      	orrs	r3, r2
 8002a6a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002a6c:	4b1b      	ldr	r3, [pc, #108]	@ (8002adc <HAL_RCC_OscConfig+0x478>)
 8002a6e:	2201      	movs	r2, #1
 8002a70:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a72:	f7fe f8df 	bl	8000c34 <HAL_GetTick>
 8002a76:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a78:	e008      	b.n	8002a8c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a7a:	f7fe f8db 	bl	8000c34 <HAL_GetTick>
 8002a7e:	4602      	mov	r2, r0
 8002a80:	693b      	ldr	r3, [r7, #16]
 8002a82:	1ad3      	subs	r3, r2, r3
 8002a84:	2b02      	cmp	r3, #2
 8002a86:	d901      	bls.n	8002a8c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002a88:	2303      	movs	r3, #3
 8002a8a:	e05c      	b.n	8002b46 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a8c:	4b11      	ldr	r3, [pc, #68]	@ (8002ad4 <HAL_RCC_OscConfig+0x470>)
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d0f0      	beq.n	8002a7a <HAL_RCC_OscConfig+0x416>
 8002a98:	e054      	b.n	8002b44 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a9a:	4b10      	ldr	r3, [pc, #64]	@ (8002adc <HAL_RCC_OscConfig+0x478>)
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002aa0:	f7fe f8c8 	bl	8000c34 <HAL_GetTick>
 8002aa4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002aa6:	e008      	b.n	8002aba <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002aa8:	f7fe f8c4 	bl	8000c34 <HAL_GetTick>
 8002aac:	4602      	mov	r2, r0
 8002aae:	693b      	ldr	r3, [r7, #16]
 8002ab0:	1ad3      	subs	r3, r2, r3
 8002ab2:	2b02      	cmp	r3, #2
 8002ab4:	d901      	bls.n	8002aba <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002ab6:	2303      	movs	r3, #3
 8002ab8:	e045      	b.n	8002b46 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002aba:	4b06      	ldr	r3, [pc, #24]	@ (8002ad4 <HAL_RCC_OscConfig+0x470>)
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d1f0      	bne.n	8002aa8 <HAL_RCC_OscConfig+0x444>
 8002ac6:	e03d      	b.n	8002b44 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	699b      	ldr	r3, [r3, #24]
 8002acc:	2b01      	cmp	r3, #1
 8002ace:	d107      	bne.n	8002ae0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002ad0:	2301      	movs	r3, #1
 8002ad2:	e038      	b.n	8002b46 <HAL_RCC_OscConfig+0x4e2>
 8002ad4:	40023800 	.word	0x40023800
 8002ad8:	40007000 	.word	0x40007000
 8002adc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002ae0:	4b1b      	ldr	r3, [pc, #108]	@ (8002b50 <HAL_RCC_OscConfig+0x4ec>)
 8002ae2:	685b      	ldr	r3, [r3, #4]
 8002ae4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	699b      	ldr	r3, [r3, #24]
 8002aea:	2b01      	cmp	r3, #1
 8002aec:	d028      	beq.n	8002b40 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002af8:	429a      	cmp	r2, r3
 8002afa:	d121      	bne.n	8002b40 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b06:	429a      	cmp	r2, r3
 8002b08:	d11a      	bne.n	8002b40 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002b0a:	68fa      	ldr	r2, [r7, #12]
 8002b0c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002b10:	4013      	ands	r3, r2
 8002b12:	687a      	ldr	r2, [r7, #4]
 8002b14:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002b16:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002b18:	4293      	cmp	r3, r2
 8002b1a:	d111      	bne.n	8002b40 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b26:	085b      	lsrs	r3, r3, #1
 8002b28:	3b01      	subs	r3, #1
 8002b2a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002b2c:	429a      	cmp	r2, r3
 8002b2e:	d107      	bne.n	8002b40 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b3a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002b3c:	429a      	cmp	r2, r3
 8002b3e:	d001      	beq.n	8002b44 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002b40:	2301      	movs	r3, #1
 8002b42:	e000      	b.n	8002b46 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002b44:	2300      	movs	r3, #0
}
 8002b46:	4618      	mov	r0, r3
 8002b48:	3718      	adds	r7, #24
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	bd80      	pop	{r7, pc}
 8002b4e:	bf00      	nop
 8002b50:	40023800 	.word	0x40023800

08002b54 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	b084      	sub	sp, #16
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
 8002b5c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d101      	bne.n	8002b68 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002b64:	2301      	movs	r3, #1
 8002b66:	e0cc      	b.n	8002d02 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002b68:	4b68      	ldr	r3, [pc, #416]	@ (8002d0c <HAL_RCC_ClockConfig+0x1b8>)
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f003 0307 	and.w	r3, r3, #7
 8002b70:	683a      	ldr	r2, [r7, #0]
 8002b72:	429a      	cmp	r2, r3
 8002b74:	d90c      	bls.n	8002b90 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b76:	4b65      	ldr	r3, [pc, #404]	@ (8002d0c <HAL_RCC_ClockConfig+0x1b8>)
 8002b78:	683a      	ldr	r2, [r7, #0]
 8002b7a:	b2d2      	uxtb	r2, r2
 8002b7c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b7e:	4b63      	ldr	r3, [pc, #396]	@ (8002d0c <HAL_RCC_ClockConfig+0x1b8>)
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f003 0307 	and.w	r3, r3, #7
 8002b86:	683a      	ldr	r2, [r7, #0]
 8002b88:	429a      	cmp	r2, r3
 8002b8a:	d001      	beq.n	8002b90 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002b8c:	2301      	movs	r3, #1
 8002b8e:	e0b8      	b.n	8002d02 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f003 0302 	and.w	r3, r3, #2
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d020      	beq.n	8002bde <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f003 0304 	and.w	r3, r3, #4
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d005      	beq.n	8002bb4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002ba8:	4b59      	ldr	r3, [pc, #356]	@ (8002d10 <HAL_RCC_ClockConfig+0x1bc>)
 8002baa:	689b      	ldr	r3, [r3, #8]
 8002bac:	4a58      	ldr	r2, [pc, #352]	@ (8002d10 <HAL_RCC_ClockConfig+0x1bc>)
 8002bae:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002bb2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f003 0308 	and.w	r3, r3, #8
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d005      	beq.n	8002bcc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002bc0:	4b53      	ldr	r3, [pc, #332]	@ (8002d10 <HAL_RCC_ClockConfig+0x1bc>)
 8002bc2:	689b      	ldr	r3, [r3, #8]
 8002bc4:	4a52      	ldr	r2, [pc, #328]	@ (8002d10 <HAL_RCC_ClockConfig+0x1bc>)
 8002bc6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002bca:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002bcc:	4b50      	ldr	r3, [pc, #320]	@ (8002d10 <HAL_RCC_ClockConfig+0x1bc>)
 8002bce:	689b      	ldr	r3, [r3, #8]
 8002bd0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	689b      	ldr	r3, [r3, #8]
 8002bd8:	494d      	ldr	r1, [pc, #308]	@ (8002d10 <HAL_RCC_ClockConfig+0x1bc>)
 8002bda:	4313      	orrs	r3, r2
 8002bdc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f003 0301 	and.w	r3, r3, #1
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d044      	beq.n	8002c74 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	685b      	ldr	r3, [r3, #4]
 8002bee:	2b01      	cmp	r3, #1
 8002bf0:	d107      	bne.n	8002c02 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bf2:	4b47      	ldr	r3, [pc, #284]	@ (8002d10 <HAL_RCC_ClockConfig+0x1bc>)
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d119      	bne.n	8002c32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002bfe:	2301      	movs	r3, #1
 8002c00:	e07f      	b.n	8002d02 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	685b      	ldr	r3, [r3, #4]
 8002c06:	2b02      	cmp	r3, #2
 8002c08:	d003      	beq.n	8002c12 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002c0e:	2b03      	cmp	r3, #3
 8002c10:	d107      	bne.n	8002c22 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c12:	4b3f      	ldr	r3, [pc, #252]	@ (8002d10 <HAL_RCC_ClockConfig+0x1bc>)
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d109      	bne.n	8002c32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c1e:	2301      	movs	r3, #1
 8002c20:	e06f      	b.n	8002d02 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c22:	4b3b      	ldr	r3, [pc, #236]	@ (8002d10 <HAL_RCC_ClockConfig+0x1bc>)
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f003 0302 	and.w	r3, r3, #2
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d101      	bne.n	8002c32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c2e:	2301      	movs	r3, #1
 8002c30:	e067      	b.n	8002d02 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002c32:	4b37      	ldr	r3, [pc, #220]	@ (8002d10 <HAL_RCC_ClockConfig+0x1bc>)
 8002c34:	689b      	ldr	r3, [r3, #8]
 8002c36:	f023 0203 	bic.w	r2, r3, #3
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	685b      	ldr	r3, [r3, #4]
 8002c3e:	4934      	ldr	r1, [pc, #208]	@ (8002d10 <HAL_RCC_ClockConfig+0x1bc>)
 8002c40:	4313      	orrs	r3, r2
 8002c42:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002c44:	f7fd fff6 	bl	8000c34 <HAL_GetTick>
 8002c48:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c4a:	e00a      	b.n	8002c62 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c4c:	f7fd fff2 	bl	8000c34 <HAL_GetTick>
 8002c50:	4602      	mov	r2, r0
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	1ad3      	subs	r3, r2, r3
 8002c56:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c5a:	4293      	cmp	r3, r2
 8002c5c:	d901      	bls.n	8002c62 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002c5e:	2303      	movs	r3, #3
 8002c60:	e04f      	b.n	8002d02 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c62:	4b2b      	ldr	r3, [pc, #172]	@ (8002d10 <HAL_RCC_ClockConfig+0x1bc>)
 8002c64:	689b      	ldr	r3, [r3, #8]
 8002c66:	f003 020c 	and.w	r2, r3, #12
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	685b      	ldr	r3, [r3, #4]
 8002c6e:	009b      	lsls	r3, r3, #2
 8002c70:	429a      	cmp	r2, r3
 8002c72:	d1eb      	bne.n	8002c4c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002c74:	4b25      	ldr	r3, [pc, #148]	@ (8002d0c <HAL_RCC_ClockConfig+0x1b8>)
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f003 0307 	and.w	r3, r3, #7
 8002c7c:	683a      	ldr	r2, [r7, #0]
 8002c7e:	429a      	cmp	r2, r3
 8002c80:	d20c      	bcs.n	8002c9c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c82:	4b22      	ldr	r3, [pc, #136]	@ (8002d0c <HAL_RCC_ClockConfig+0x1b8>)
 8002c84:	683a      	ldr	r2, [r7, #0]
 8002c86:	b2d2      	uxtb	r2, r2
 8002c88:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c8a:	4b20      	ldr	r3, [pc, #128]	@ (8002d0c <HAL_RCC_ClockConfig+0x1b8>)
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f003 0307 	and.w	r3, r3, #7
 8002c92:	683a      	ldr	r2, [r7, #0]
 8002c94:	429a      	cmp	r2, r3
 8002c96:	d001      	beq.n	8002c9c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002c98:	2301      	movs	r3, #1
 8002c9a:	e032      	b.n	8002d02 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f003 0304 	and.w	r3, r3, #4
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d008      	beq.n	8002cba <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ca8:	4b19      	ldr	r3, [pc, #100]	@ (8002d10 <HAL_RCC_ClockConfig+0x1bc>)
 8002caa:	689b      	ldr	r3, [r3, #8]
 8002cac:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	68db      	ldr	r3, [r3, #12]
 8002cb4:	4916      	ldr	r1, [pc, #88]	@ (8002d10 <HAL_RCC_ClockConfig+0x1bc>)
 8002cb6:	4313      	orrs	r3, r2
 8002cb8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f003 0308 	and.w	r3, r3, #8
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d009      	beq.n	8002cda <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002cc6:	4b12      	ldr	r3, [pc, #72]	@ (8002d10 <HAL_RCC_ClockConfig+0x1bc>)
 8002cc8:	689b      	ldr	r3, [r3, #8]
 8002cca:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	691b      	ldr	r3, [r3, #16]
 8002cd2:	00db      	lsls	r3, r3, #3
 8002cd4:	490e      	ldr	r1, [pc, #56]	@ (8002d10 <HAL_RCC_ClockConfig+0x1bc>)
 8002cd6:	4313      	orrs	r3, r2
 8002cd8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002cda:	f000 f821 	bl	8002d20 <HAL_RCC_GetSysClockFreq>
 8002cde:	4602      	mov	r2, r0
 8002ce0:	4b0b      	ldr	r3, [pc, #44]	@ (8002d10 <HAL_RCC_ClockConfig+0x1bc>)
 8002ce2:	689b      	ldr	r3, [r3, #8]
 8002ce4:	091b      	lsrs	r3, r3, #4
 8002ce6:	f003 030f 	and.w	r3, r3, #15
 8002cea:	490a      	ldr	r1, [pc, #40]	@ (8002d14 <HAL_RCC_ClockConfig+0x1c0>)
 8002cec:	5ccb      	ldrb	r3, [r1, r3]
 8002cee:	fa22 f303 	lsr.w	r3, r2, r3
 8002cf2:	4a09      	ldr	r2, [pc, #36]	@ (8002d18 <HAL_RCC_ClockConfig+0x1c4>)
 8002cf4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002cf6:	4b09      	ldr	r3, [pc, #36]	@ (8002d1c <HAL_RCC_ClockConfig+0x1c8>)
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	f7fd ff56 	bl	8000bac <HAL_InitTick>

  return HAL_OK;
 8002d00:	2300      	movs	r3, #0
}
 8002d02:	4618      	mov	r0, r3
 8002d04:	3710      	adds	r7, #16
 8002d06:	46bd      	mov	sp, r7
 8002d08:	bd80      	pop	{r7, pc}
 8002d0a:	bf00      	nop
 8002d0c:	40023c00 	.word	0x40023c00
 8002d10:	40023800 	.word	0x40023800
 8002d14:	08008490 	.word	0x08008490
 8002d18:	20000000 	.word	0x20000000
 8002d1c:	20000004 	.word	0x20000004

08002d20 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d20:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002d24:	b094      	sub	sp, #80	@ 0x50
 8002d26:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002d28:	2300      	movs	r3, #0
 8002d2a:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8002d30:	2300      	movs	r3, #0
 8002d32:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8002d34:	2300      	movs	r3, #0
 8002d36:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002d38:	4b79      	ldr	r3, [pc, #484]	@ (8002f20 <HAL_RCC_GetSysClockFreq+0x200>)
 8002d3a:	689b      	ldr	r3, [r3, #8]
 8002d3c:	f003 030c 	and.w	r3, r3, #12
 8002d40:	2b08      	cmp	r3, #8
 8002d42:	d00d      	beq.n	8002d60 <HAL_RCC_GetSysClockFreq+0x40>
 8002d44:	2b08      	cmp	r3, #8
 8002d46:	f200 80e1 	bhi.w	8002f0c <HAL_RCC_GetSysClockFreq+0x1ec>
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d002      	beq.n	8002d54 <HAL_RCC_GetSysClockFreq+0x34>
 8002d4e:	2b04      	cmp	r3, #4
 8002d50:	d003      	beq.n	8002d5a <HAL_RCC_GetSysClockFreq+0x3a>
 8002d52:	e0db      	b.n	8002f0c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002d54:	4b73      	ldr	r3, [pc, #460]	@ (8002f24 <HAL_RCC_GetSysClockFreq+0x204>)
 8002d56:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002d58:	e0db      	b.n	8002f12 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002d5a:	4b73      	ldr	r3, [pc, #460]	@ (8002f28 <HAL_RCC_GetSysClockFreq+0x208>)
 8002d5c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002d5e:	e0d8      	b.n	8002f12 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002d60:	4b6f      	ldr	r3, [pc, #444]	@ (8002f20 <HAL_RCC_GetSysClockFreq+0x200>)
 8002d62:	685b      	ldr	r3, [r3, #4]
 8002d64:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002d68:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002d6a:	4b6d      	ldr	r3, [pc, #436]	@ (8002f20 <HAL_RCC_GetSysClockFreq+0x200>)
 8002d6c:	685b      	ldr	r3, [r3, #4]
 8002d6e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d063      	beq.n	8002e3e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d76:	4b6a      	ldr	r3, [pc, #424]	@ (8002f20 <HAL_RCC_GetSysClockFreq+0x200>)
 8002d78:	685b      	ldr	r3, [r3, #4]
 8002d7a:	099b      	lsrs	r3, r3, #6
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002d80:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002d82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d84:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002d88:	633b      	str	r3, [r7, #48]	@ 0x30
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	637b      	str	r3, [r7, #52]	@ 0x34
 8002d8e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002d92:	4622      	mov	r2, r4
 8002d94:	462b      	mov	r3, r5
 8002d96:	f04f 0000 	mov.w	r0, #0
 8002d9a:	f04f 0100 	mov.w	r1, #0
 8002d9e:	0159      	lsls	r1, r3, #5
 8002da0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002da4:	0150      	lsls	r0, r2, #5
 8002da6:	4602      	mov	r2, r0
 8002da8:	460b      	mov	r3, r1
 8002daa:	4621      	mov	r1, r4
 8002dac:	1a51      	subs	r1, r2, r1
 8002dae:	6139      	str	r1, [r7, #16]
 8002db0:	4629      	mov	r1, r5
 8002db2:	eb63 0301 	sbc.w	r3, r3, r1
 8002db6:	617b      	str	r3, [r7, #20]
 8002db8:	f04f 0200 	mov.w	r2, #0
 8002dbc:	f04f 0300 	mov.w	r3, #0
 8002dc0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002dc4:	4659      	mov	r1, fp
 8002dc6:	018b      	lsls	r3, r1, #6
 8002dc8:	4651      	mov	r1, sl
 8002dca:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002dce:	4651      	mov	r1, sl
 8002dd0:	018a      	lsls	r2, r1, #6
 8002dd2:	4651      	mov	r1, sl
 8002dd4:	ebb2 0801 	subs.w	r8, r2, r1
 8002dd8:	4659      	mov	r1, fp
 8002dda:	eb63 0901 	sbc.w	r9, r3, r1
 8002dde:	f04f 0200 	mov.w	r2, #0
 8002de2:	f04f 0300 	mov.w	r3, #0
 8002de6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002dea:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002dee:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002df2:	4690      	mov	r8, r2
 8002df4:	4699      	mov	r9, r3
 8002df6:	4623      	mov	r3, r4
 8002df8:	eb18 0303 	adds.w	r3, r8, r3
 8002dfc:	60bb      	str	r3, [r7, #8]
 8002dfe:	462b      	mov	r3, r5
 8002e00:	eb49 0303 	adc.w	r3, r9, r3
 8002e04:	60fb      	str	r3, [r7, #12]
 8002e06:	f04f 0200 	mov.w	r2, #0
 8002e0a:	f04f 0300 	mov.w	r3, #0
 8002e0e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002e12:	4629      	mov	r1, r5
 8002e14:	024b      	lsls	r3, r1, #9
 8002e16:	4621      	mov	r1, r4
 8002e18:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002e1c:	4621      	mov	r1, r4
 8002e1e:	024a      	lsls	r2, r1, #9
 8002e20:	4610      	mov	r0, r2
 8002e22:	4619      	mov	r1, r3
 8002e24:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002e26:	2200      	movs	r2, #0
 8002e28:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002e2a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002e2c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002e30:	f7fd fa1e 	bl	8000270 <__aeabi_uldivmod>
 8002e34:	4602      	mov	r2, r0
 8002e36:	460b      	mov	r3, r1
 8002e38:	4613      	mov	r3, r2
 8002e3a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002e3c:	e058      	b.n	8002ef0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e3e:	4b38      	ldr	r3, [pc, #224]	@ (8002f20 <HAL_RCC_GetSysClockFreq+0x200>)
 8002e40:	685b      	ldr	r3, [r3, #4]
 8002e42:	099b      	lsrs	r3, r3, #6
 8002e44:	2200      	movs	r2, #0
 8002e46:	4618      	mov	r0, r3
 8002e48:	4611      	mov	r1, r2
 8002e4a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002e4e:	623b      	str	r3, [r7, #32]
 8002e50:	2300      	movs	r3, #0
 8002e52:	627b      	str	r3, [r7, #36]	@ 0x24
 8002e54:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002e58:	4642      	mov	r2, r8
 8002e5a:	464b      	mov	r3, r9
 8002e5c:	f04f 0000 	mov.w	r0, #0
 8002e60:	f04f 0100 	mov.w	r1, #0
 8002e64:	0159      	lsls	r1, r3, #5
 8002e66:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002e6a:	0150      	lsls	r0, r2, #5
 8002e6c:	4602      	mov	r2, r0
 8002e6e:	460b      	mov	r3, r1
 8002e70:	4641      	mov	r1, r8
 8002e72:	ebb2 0a01 	subs.w	sl, r2, r1
 8002e76:	4649      	mov	r1, r9
 8002e78:	eb63 0b01 	sbc.w	fp, r3, r1
 8002e7c:	f04f 0200 	mov.w	r2, #0
 8002e80:	f04f 0300 	mov.w	r3, #0
 8002e84:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002e88:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002e8c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002e90:	ebb2 040a 	subs.w	r4, r2, sl
 8002e94:	eb63 050b 	sbc.w	r5, r3, fp
 8002e98:	f04f 0200 	mov.w	r2, #0
 8002e9c:	f04f 0300 	mov.w	r3, #0
 8002ea0:	00eb      	lsls	r3, r5, #3
 8002ea2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002ea6:	00e2      	lsls	r2, r4, #3
 8002ea8:	4614      	mov	r4, r2
 8002eaa:	461d      	mov	r5, r3
 8002eac:	4643      	mov	r3, r8
 8002eae:	18e3      	adds	r3, r4, r3
 8002eb0:	603b      	str	r3, [r7, #0]
 8002eb2:	464b      	mov	r3, r9
 8002eb4:	eb45 0303 	adc.w	r3, r5, r3
 8002eb8:	607b      	str	r3, [r7, #4]
 8002eba:	f04f 0200 	mov.w	r2, #0
 8002ebe:	f04f 0300 	mov.w	r3, #0
 8002ec2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002ec6:	4629      	mov	r1, r5
 8002ec8:	028b      	lsls	r3, r1, #10
 8002eca:	4621      	mov	r1, r4
 8002ecc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002ed0:	4621      	mov	r1, r4
 8002ed2:	028a      	lsls	r2, r1, #10
 8002ed4:	4610      	mov	r0, r2
 8002ed6:	4619      	mov	r1, r3
 8002ed8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002eda:	2200      	movs	r2, #0
 8002edc:	61bb      	str	r3, [r7, #24]
 8002ede:	61fa      	str	r2, [r7, #28]
 8002ee0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002ee4:	f7fd f9c4 	bl	8000270 <__aeabi_uldivmod>
 8002ee8:	4602      	mov	r2, r0
 8002eea:	460b      	mov	r3, r1
 8002eec:	4613      	mov	r3, r2
 8002eee:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002ef0:	4b0b      	ldr	r3, [pc, #44]	@ (8002f20 <HAL_RCC_GetSysClockFreq+0x200>)
 8002ef2:	685b      	ldr	r3, [r3, #4]
 8002ef4:	0c1b      	lsrs	r3, r3, #16
 8002ef6:	f003 0303 	and.w	r3, r3, #3
 8002efa:	3301      	adds	r3, #1
 8002efc:	005b      	lsls	r3, r3, #1
 8002efe:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8002f00:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002f02:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002f04:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f08:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002f0a:	e002      	b.n	8002f12 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002f0c:	4b05      	ldr	r3, [pc, #20]	@ (8002f24 <HAL_RCC_GetSysClockFreq+0x204>)
 8002f0e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002f10:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002f12:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8002f14:	4618      	mov	r0, r3
 8002f16:	3750      	adds	r7, #80	@ 0x50
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002f1e:	bf00      	nop
 8002f20:	40023800 	.word	0x40023800
 8002f24:	00f42400 	.word	0x00f42400
 8002f28:	007a1200 	.word	0x007a1200

08002f2c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002f2c:	b480      	push	{r7}
 8002f2e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002f30:	4b03      	ldr	r3, [pc, #12]	@ (8002f40 <HAL_RCC_GetHCLKFreq+0x14>)
 8002f32:	681b      	ldr	r3, [r3, #0]
}
 8002f34:	4618      	mov	r0, r3
 8002f36:	46bd      	mov	sp, r7
 8002f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3c:	4770      	bx	lr
 8002f3e:	bf00      	nop
 8002f40:	20000000 	.word	0x20000000

08002f44 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8002f44:	b580      	push	{r7, lr}
 8002f46:	b086      	sub	sp, #24
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
 8002f4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d101      	bne.n	8002f58 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8002f54:	2301      	movs	r3, #1
 8002f56:	e097      	b.n	8003088 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002f5e:	b2db      	uxtb	r3, r3
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d106      	bne.n	8002f72 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	2200      	movs	r2, #0
 8002f68:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8002f6c:	6878      	ldr	r0, [r7, #4]
 8002f6e:	f7fd fc87 	bl	8000880 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	2202      	movs	r2, #2
 8002f76:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	689b      	ldr	r3, [r3, #8]
 8002f80:	687a      	ldr	r2, [r7, #4]
 8002f82:	6812      	ldr	r2, [r2, #0]
 8002f84:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002f88:	f023 0307 	bic.w	r3, r3, #7
 8002f8c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681a      	ldr	r2, [r3, #0]
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	3304      	adds	r3, #4
 8002f96:	4619      	mov	r1, r3
 8002f98:	4610      	mov	r0, r2
 8002f9a:	f000 fa3f 	bl	800341c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	689b      	ldr	r3, [r3, #8]
 8002fa4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	699b      	ldr	r3, [r3, #24]
 8002fac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	6a1b      	ldr	r3, [r3, #32]
 8002fb4:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8002fb6:	683b      	ldr	r3, [r7, #0]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	697a      	ldr	r2, [r7, #20]
 8002fbc:	4313      	orrs	r3, r2
 8002fbe:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8002fc0:	693b      	ldr	r3, [r7, #16]
 8002fc2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002fc6:	f023 0303 	bic.w	r3, r3, #3
 8002fca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8002fcc:	683b      	ldr	r3, [r7, #0]
 8002fce:	689a      	ldr	r2, [r3, #8]
 8002fd0:	683b      	ldr	r3, [r7, #0]
 8002fd2:	699b      	ldr	r3, [r3, #24]
 8002fd4:	021b      	lsls	r3, r3, #8
 8002fd6:	4313      	orrs	r3, r2
 8002fd8:	693a      	ldr	r2, [r7, #16]
 8002fda:	4313      	orrs	r3, r2
 8002fdc:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8002fde:	693b      	ldr	r3, [r7, #16]
 8002fe0:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8002fe4:	f023 030c 	bic.w	r3, r3, #12
 8002fe8:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8002fea:	693b      	ldr	r3, [r7, #16]
 8002fec:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002ff0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002ff4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8002ff6:	683b      	ldr	r3, [r7, #0]
 8002ff8:	68da      	ldr	r2, [r3, #12]
 8002ffa:	683b      	ldr	r3, [r7, #0]
 8002ffc:	69db      	ldr	r3, [r3, #28]
 8002ffe:	021b      	lsls	r3, r3, #8
 8003000:	4313      	orrs	r3, r2
 8003002:	693a      	ldr	r2, [r7, #16]
 8003004:	4313      	orrs	r3, r2
 8003006:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8003008:	683b      	ldr	r3, [r7, #0]
 800300a:	691b      	ldr	r3, [r3, #16]
 800300c:	011a      	lsls	r2, r3, #4
 800300e:	683b      	ldr	r3, [r7, #0]
 8003010:	6a1b      	ldr	r3, [r3, #32]
 8003012:	031b      	lsls	r3, r3, #12
 8003014:	4313      	orrs	r3, r2
 8003016:	693a      	ldr	r2, [r7, #16]
 8003018:	4313      	orrs	r3, r2
 800301a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8003022:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 800302a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800302c:	683b      	ldr	r3, [r7, #0]
 800302e:	685a      	ldr	r2, [r3, #4]
 8003030:	683b      	ldr	r3, [r7, #0]
 8003032:	695b      	ldr	r3, [r3, #20]
 8003034:	011b      	lsls	r3, r3, #4
 8003036:	4313      	orrs	r3, r2
 8003038:	68fa      	ldr	r2, [r7, #12]
 800303a:	4313      	orrs	r3, r2
 800303c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	697a      	ldr	r2, [r7, #20]
 8003044:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	693a      	ldr	r2, [r7, #16]
 800304c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	68fa      	ldr	r2, [r7, #12]
 8003054:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	2201      	movs	r2, #1
 800305a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	2201      	movs	r2, #1
 8003062:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	2201      	movs	r2, #1
 800306a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	2201      	movs	r2, #1
 8003072:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	2201      	movs	r2, #1
 800307a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	2201      	movs	r2, #1
 8003082:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003086:	2300      	movs	r3, #0
}
 8003088:	4618      	mov	r0, r3
 800308a:	3718      	adds	r7, #24
 800308c:	46bd      	mov	sp, r7
 800308e:	bd80      	pop	{r7, pc}

08003090 <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003090:	b580      	push	{r7, lr}
 8003092:	b084      	sub	sp, #16
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]
 8003098:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80030a0:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80030a8:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80030b0:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80030b8:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80030ba:	683b      	ldr	r3, [r7, #0]
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d110      	bne.n	80030e2 <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80030c0:	7bfb      	ldrb	r3, [r7, #15]
 80030c2:	2b01      	cmp	r3, #1
 80030c4:	d102      	bne.n	80030cc <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80030c6:	7b7b      	ldrb	r3, [r7, #13]
 80030c8:	2b01      	cmp	r3, #1
 80030ca:	d001      	beq.n	80030d0 <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 80030cc:	2301      	movs	r3, #1
 80030ce:	e089      	b.n	80031e4 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2202      	movs	r2, #2
 80030d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	2202      	movs	r2, #2
 80030dc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80030e0:	e031      	b.n	8003146 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80030e2:	683b      	ldr	r3, [r7, #0]
 80030e4:	2b04      	cmp	r3, #4
 80030e6:	d110      	bne.n	800310a <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80030e8:	7bbb      	ldrb	r3, [r7, #14]
 80030ea:	2b01      	cmp	r3, #1
 80030ec:	d102      	bne.n	80030f4 <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80030ee:	7b3b      	ldrb	r3, [r7, #12]
 80030f0:	2b01      	cmp	r3, #1
 80030f2:	d001      	beq.n	80030f8 <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 80030f4:	2301      	movs	r3, #1
 80030f6:	e075      	b.n	80031e4 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	2202      	movs	r2, #2
 80030fc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	2202      	movs	r2, #2
 8003104:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003108:	e01d      	b.n	8003146 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800310a:	7bfb      	ldrb	r3, [r7, #15]
 800310c:	2b01      	cmp	r3, #1
 800310e:	d108      	bne.n	8003122 <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003110:	7bbb      	ldrb	r3, [r7, #14]
 8003112:	2b01      	cmp	r3, #1
 8003114:	d105      	bne.n	8003122 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003116:	7b7b      	ldrb	r3, [r7, #13]
 8003118:	2b01      	cmp	r3, #1
 800311a:	d102      	bne.n	8003122 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800311c:	7b3b      	ldrb	r3, [r7, #12]
 800311e:	2b01      	cmp	r3, #1
 8003120:	d001      	beq.n	8003126 <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 8003122:	2301      	movs	r3, #1
 8003124:	e05e      	b.n	80031e4 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	2202      	movs	r2, #2
 800312a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	2202      	movs	r2, #2
 8003132:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	2202      	movs	r2, #2
 800313a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	2202      	movs	r2, #2
 8003142:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 8003146:	683b      	ldr	r3, [r7, #0]
 8003148:	2b00      	cmp	r3, #0
 800314a:	d003      	beq.n	8003154 <HAL_TIM_Encoder_Start_IT+0xc4>
 800314c:	683b      	ldr	r3, [r7, #0]
 800314e:	2b04      	cmp	r3, #4
 8003150:	d010      	beq.n	8003174 <HAL_TIM_Encoder_Start_IT+0xe4>
 8003152:	e01f      	b.n	8003194 <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	2201      	movs	r2, #1
 800315a:	2100      	movs	r1, #0
 800315c:	4618      	mov	r0, r3
 800315e:	f000 fa09 	bl	8003574 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	68da      	ldr	r2, [r3, #12]
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f042 0202 	orr.w	r2, r2, #2
 8003170:	60da      	str	r2, [r3, #12]
      break;
 8003172:	e02e      	b.n	80031d2 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	2201      	movs	r2, #1
 800317a:	2104      	movs	r1, #4
 800317c:	4618      	mov	r0, r3
 800317e:	f000 f9f9 	bl	8003574 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	68da      	ldr	r2, [r3, #12]
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f042 0204 	orr.w	r2, r2, #4
 8003190:	60da      	str	r2, [r3, #12]
      break;
 8003192:	e01e      	b.n	80031d2 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	2201      	movs	r2, #1
 800319a:	2100      	movs	r1, #0
 800319c:	4618      	mov	r0, r3
 800319e:	f000 f9e9 	bl	8003574 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	2201      	movs	r2, #1
 80031a8:	2104      	movs	r1, #4
 80031aa:	4618      	mov	r0, r3
 80031ac:	f000 f9e2 	bl	8003574 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	68da      	ldr	r2, [r3, #12]
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f042 0202 	orr.w	r2, r2, #2
 80031be:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	68da      	ldr	r2, [r3, #12]
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f042 0204 	orr.w	r2, r2, #4
 80031ce:	60da      	str	r2, [r3, #12]
      break;
 80031d0:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	681a      	ldr	r2, [r3, #0]
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f042 0201 	orr.w	r2, r2, #1
 80031e0:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80031e2:	2300      	movs	r3, #0
}
 80031e4:	4618      	mov	r0, r3
 80031e6:	3710      	adds	r7, #16
 80031e8:	46bd      	mov	sp, r7
 80031ea:	bd80      	pop	{r7, pc}

080031ec <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80031ec:	b580      	push	{r7, lr}
 80031ee:	b084      	sub	sp, #16
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	68db      	ldr	r3, [r3, #12]
 80031fa:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	691b      	ldr	r3, [r3, #16]
 8003202:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003204:	68bb      	ldr	r3, [r7, #8]
 8003206:	f003 0302 	and.w	r3, r3, #2
 800320a:	2b00      	cmp	r3, #0
 800320c:	d020      	beq.n	8003250 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	f003 0302 	and.w	r3, r3, #2
 8003214:	2b00      	cmp	r3, #0
 8003216:	d01b      	beq.n	8003250 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f06f 0202 	mvn.w	r2, #2
 8003220:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	2201      	movs	r2, #1
 8003226:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	699b      	ldr	r3, [r3, #24]
 800322e:	f003 0303 	and.w	r3, r3, #3
 8003232:	2b00      	cmp	r3, #0
 8003234:	d003      	beq.n	800323e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003236:	6878      	ldr	r0, [r7, #4]
 8003238:	f7fd f9b0 	bl	800059c <HAL_TIM_IC_CaptureCallback>
 800323c:	e005      	b.n	800324a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800323e:	6878      	ldr	r0, [r7, #4]
 8003240:	f000 f8ce 	bl	80033e0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003244:	6878      	ldr	r0, [r7, #4]
 8003246:	f000 f8d5 	bl	80033f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	2200      	movs	r2, #0
 800324e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003250:	68bb      	ldr	r3, [r7, #8]
 8003252:	f003 0304 	and.w	r3, r3, #4
 8003256:	2b00      	cmp	r3, #0
 8003258:	d020      	beq.n	800329c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	f003 0304 	and.w	r3, r3, #4
 8003260:	2b00      	cmp	r3, #0
 8003262:	d01b      	beq.n	800329c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f06f 0204 	mvn.w	r2, #4
 800326c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	2202      	movs	r2, #2
 8003272:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	699b      	ldr	r3, [r3, #24]
 800327a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800327e:	2b00      	cmp	r3, #0
 8003280:	d003      	beq.n	800328a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003282:	6878      	ldr	r0, [r7, #4]
 8003284:	f7fd f98a 	bl	800059c <HAL_TIM_IC_CaptureCallback>
 8003288:	e005      	b.n	8003296 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800328a:	6878      	ldr	r0, [r7, #4]
 800328c:	f000 f8a8 	bl	80033e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003290:	6878      	ldr	r0, [r7, #4]
 8003292:	f000 f8af 	bl	80033f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	2200      	movs	r2, #0
 800329a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800329c:	68bb      	ldr	r3, [r7, #8]
 800329e:	f003 0308 	and.w	r3, r3, #8
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d020      	beq.n	80032e8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	f003 0308 	and.w	r3, r3, #8
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d01b      	beq.n	80032e8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f06f 0208 	mvn.w	r2, #8
 80032b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	2204      	movs	r2, #4
 80032be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	69db      	ldr	r3, [r3, #28]
 80032c6:	f003 0303 	and.w	r3, r3, #3
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d003      	beq.n	80032d6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80032ce:	6878      	ldr	r0, [r7, #4]
 80032d0:	f7fd f964 	bl	800059c <HAL_TIM_IC_CaptureCallback>
 80032d4:	e005      	b.n	80032e2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80032d6:	6878      	ldr	r0, [r7, #4]
 80032d8:	f000 f882 	bl	80033e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80032dc:	6878      	ldr	r0, [r7, #4]
 80032de:	f000 f889 	bl	80033f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	2200      	movs	r2, #0
 80032e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80032e8:	68bb      	ldr	r3, [r7, #8]
 80032ea:	f003 0310 	and.w	r3, r3, #16
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d020      	beq.n	8003334 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	f003 0310 	and.w	r3, r3, #16
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d01b      	beq.n	8003334 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f06f 0210 	mvn.w	r2, #16
 8003304:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	2208      	movs	r2, #8
 800330a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	69db      	ldr	r3, [r3, #28]
 8003312:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003316:	2b00      	cmp	r3, #0
 8003318:	d003      	beq.n	8003322 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800331a:	6878      	ldr	r0, [r7, #4]
 800331c:	f7fd f93e 	bl	800059c <HAL_TIM_IC_CaptureCallback>
 8003320:	e005      	b.n	800332e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003322:	6878      	ldr	r0, [r7, #4]
 8003324:	f000 f85c 	bl	80033e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003328:	6878      	ldr	r0, [r7, #4]
 800332a:	f000 f863 	bl	80033f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	2200      	movs	r2, #0
 8003332:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003334:	68bb      	ldr	r3, [r7, #8]
 8003336:	f003 0301 	and.w	r3, r3, #1
 800333a:	2b00      	cmp	r3, #0
 800333c:	d00c      	beq.n	8003358 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	f003 0301 	and.w	r3, r3, #1
 8003344:	2b00      	cmp	r3, #0
 8003346:	d007      	beq.n	8003358 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f06f 0201 	mvn.w	r2, #1
 8003350:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003352:	6878      	ldr	r0, [r7, #4]
 8003354:	f000 f83a 	bl	80033cc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003358:	68bb      	ldr	r3, [r7, #8]
 800335a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800335e:	2b00      	cmp	r3, #0
 8003360:	d00c      	beq.n	800337c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003368:	2b00      	cmp	r3, #0
 800336a:	d007      	beq.n	800337c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003374:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003376:	6878      	ldr	r0, [r7, #4]
 8003378:	f000 f9a8 	bl	80036cc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800337c:	68bb      	ldr	r3, [r7, #8]
 800337e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003382:	2b00      	cmp	r3, #0
 8003384:	d00c      	beq.n	80033a0 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800338c:	2b00      	cmp	r3, #0
 800338e:	d007      	beq.n	80033a0 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003398:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800339a:	6878      	ldr	r0, [r7, #4]
 800339c:	f000 f834 	bl	8003408 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80033a0:	68bb      	ldr	r3, [r7, #8]
 80033a2:	f003 0320 	and.w	r3, r3, #32
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d00c      	beq.n	80033c4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	f003 0320 	and.w	r3, r3, #32
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d007      	beq.n	80033c4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f06f 0220 	mvn.w	r2, #32
 80033bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80033be:	6878      	ldr	r0, [r7, #4]
 80033c0:	f000 f97a 	bl	80036b8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80033c4:	bf00      	nop
 80033c6:	3710      	adds	r7, #16
 80033c8:	46bd      	mov	sp, r7
 80033ca:	bd80      	pop	{r7, pc}

080033cc <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80033cc:	b480      	push	{r7}
 80033ce:	b083      	sub	sp, #12
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80033d4:	bf00      	nop
 80033d6:	370c      	adds	r7, #12
 80033d8:	46bd      	mov	sp, r7
 80033da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033de:	4770      	bx	lr

080033e0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80033e0:	b480      	push	{r7}
 80033e2:	b083      	sub	sp, #12
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80033e8:	bf00      	nop
 80033ea:	370c      	adds	r7, #12
 80033ec:	46bd      	mov	sp, r7
 80033ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f2:	4770      	bx	lr

080033f4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80033f4:	b480      	push	{r7}
 80033f6:	b083      	sub	sp, #12
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80033fc:	bf00      	nop
 80033fe:	370c      	adds	r7, #12
 8003400:	46bd      	mov	sp, r7
 8003402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003406:	4770      	bx	lr

08003408 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003408:	b480      	push	{r7}
 800340a:	b083      	sub	sp, #12
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003410:	bf00      	nop
 8003412:	370c      	adds	r7, #12
 8003414:	46bd      	mov	sp, r7
 8003416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341a:	4770      	bx	lr

0800341c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800341c:	b480      	push	{r7}
 800341e:	b085      	sub	sp, #20
 8003420:	af00      	add	r7, sp, #0
 8003422:	6078      	str	r0, [r7, #4]
 8003424:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	4a46      	ldr	r2, [pc, #280]	@ (8003548 <TIM_Base_SetConfig+0x12c>)
 8003430:	4293      	cmp	r3, r2
 8003432:	d013      	beq.n	800345c <TIM_Base_SetConfig+0x40>
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800343a:	d00f      	beq.n	800345c <TIM_Base_SetConfig+0x40>
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	4a43      	ldr	r2, [pc, #268]	@ (800354c <TIM_Base_SetConfig+0x130>)
 8003440:	4293      	cmp	r3, r2
 8003442:	d00b      	beq.n	800345c <TIM_Base_SetConfig+0x40>
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	4a42      	ldr	r2, [pc, #264]	@ (8003550 <TIM_Base_SetConfig+0x134>)
 8003448:	4293      	cmp	r3, r2
 800344a:	d007      	beq.n	800345c <TIM_Base_SetConfig+0x40>
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	4a41      	ldr	r2, [pc, #260]	@ (8003554 <TIM_Base_SetConfig+0x138>)
 8003450:	4293      	cmp	r3, r2
 8003452:	d003      	beq.n	800345c <TIM_Base_SetConfig+0x40>
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	4a40      	ldr	r2, [pc, #256]	@ (8003558 <TIM_Base_SetConfig+0x13c>)
 8003458:	4293      	cmp	r3, r2
 800345a:	d108      	bne.n	800346e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003462:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003464:	683b      	ldr	r3, [r7, #0]
 8003466:	685b      	ldr	r3, [r3, #4]
 8003468:	68fa      	ldr	r2, [r7, #12]
 800346a:	4313      	orrs	r3, r2
 800346c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	4a35      	ldr	r2, [pc, #212]	@ (8003548 <TIM_Base_SetConfig+0x12c>)
 8003472:	4293      	cmp	r3, r2
 8003474:	d02b      	beq.n	80034ce <TIM_Base_SetConfig+0xb2>
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800347c:	d027      	beq.n	80034ce <TIM_Base_SetConfig+0xb2>
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	4a32      	ldr	r2, [pc, #200]	@ (800354c <TIM_Base_SetConfig+0x130>)
 8003482:	4293      	cmp	r3, r2
 8003484:	d023      	beq.n	80034ce <TIM_Base_SetConfig+0xb2>
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	4a31      	ldr	r2, [pc, #196]	@ (8003550 <TIM_Base_SetConfig+0x134>)
 800348a:	4293      	cmp	r3, r2
 800348c:	d01f      	beq.n	80034ce <TIM_Base_SetConfig+0xb2>
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	4a30      	ldr	r2, [pc, #192]	@ (8003554 <TIM_Base_SetConfig+0x138>)
 8003492:	4293      	cmp	r3, r2
 8003494:	d01b      	beq.n	80034ce <TIM_Base_SetConfig+0xb2>
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	4a2f      	ldr	r2, [pc, #188]	@ (8003558 <TIM_Base_SetConfig+0x13c>)
 800349a:	4293      	cmp	r3, r2
 800349c:	d017      	beq.n	80034ce <TIM_Base_SetConfig+0xb2>
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	4a2e      	ldr	r2, [pc, #184]	@ (800355c <TIM_Base_SetConfig+0x140>)
 80034a2:	4293      	cmp	r3, r2
 80034a4:	d013      	beq.n	80034ce <TIM_Base_SetConfig+0xb2>
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	4a2d      	ldr	r2, [pc, #180]	@ (8003560 <TIM_Base_SetConfig+0x144>)
 80034aa:	4293      	cmp	r3, r2
 80034ac:	d00f      	beq.n	80034ce <TIM_Base_SetConfig+0xb2>
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	4a2c      	ldr	r2, [pc, #176]	@ (8003564 <TIM_Base_SetConfig+0x148>)
 80034b2:	4293      	cmp	r3, r2
 80034b4:	d00b      	beq.n	80034ce <TIM_Base_SetConfig+0xb2>
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	4a2b      	ldr	r2, [pc, #172]	@ (8003568 <TIM_Base_SetConfig+0x14c>)
 80034ba:	4293      	cmp	r3, r2
 80034bc:	d007      	beq.n	80034ce <TIM_Base_SetConfig+0xb2>
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	4a2a      	ldr	r2, [pc, #168]	@ (800356c <TIM_Base_SetConfig+0x150>)
 80034c2:	4293      	cmp	r3, r2
 80034c4:	d003      	beq.n	80034ce <TIM_Base_SetConfig+0xb2>
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	4a29      	ldr	r2, [pc, #164]	@ (8003570 <TIM_Base_SetConfig+0x154>)
 80034ca:	4293      	cmp	r3, r2
 80034cc:	d108      	bne.n	80034e0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80034d4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80034d6:	683b      	ldr	r3, [r7, #0]
 80034d8:	68db      	ldr	r3, [r3, #12]
 80034da:	68fa      	ldr	r2, [r7, #12]
 80034dc:	4313      	orrs	r3, r2
 80034de:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80034e6:	683b      	ldr	r3, [r7, #0]
 80034e8:	695b      	ldr	r3, [r3, #20]
 80034ea:	4313      	orrs	r3, r2
 80034ec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	68fa      	ldr	r2, [r7, #12]
 80034f2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80034f4:	683b      	ldr	r3, [r7, #0]
 80034f6:	689a      	ldr	r2, [r3, #8]
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80034fc:	683b      	ldr	r3, [r7, #0]
 80034fe:	681a      	ldr	r2, [r3, #0]
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	4a10      	ldr	r2, [pc, #64]	@ (8003548 <TIM_Base_SetConfig+0x12c>)
 8003508:	4293      	cmp	r3, r2
 800350a:	d003      	beq.n	8003514 <TIM_Base_SetConfig+0xf8>
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	4a12      	ldr	r2, [pc, #72]	@ (8003558 <TIM_Base_SetConfig+0x13c>)
 8003510:	4293      	cmp	r3, r2
 8003512:	d103      	bne.n	800351c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003514:	683b      	ldr	r3, [r7, #0]
 8003516:	691a      	ldr	r2, [r3, #16]
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2201      	movs	r2, #1
 8003520:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	691b      	ldr	r3, [r3, #16]
 8003526:	f003 0301 	and.w	r3, r3, #1
 800352a:	2b01      	cmp	r3, #1
 800352c:	d105      	bne.n	800353a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	691b      	ldr	r3, [r3, #16]
 8003532:	f023 0201 	bic.w	r2, r3, #1
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	611a      	str	r2, [r3, #16]
  }
}
 800353a:	bf00      	nop
 800353c:	3714      	adds	r7, #20
 800353e:	46bd      	mov	sp, r7
 8003540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003544:	4770      	bx	lr
 8003546:	bf00      	nop
 8003548:	40010000 	.word	0x40010000
 800354c:	40000400 	.word	0x40000400
 8003550:	40000800 	.word	0x40000800
 8003554:	40000c00 	.word	0x40000c00
 8003558:	40010400 	.word	0x40010400
 800355c:	40014000 	.word	0x40014000
 8003560:	40014400 	.word	0x40014400
 8003564:	40014800 	.word	0x40014800
 8003568:	40001800 	.word	0x40001800
 800356c:	40001c00 	.word	0x40001c00
 8003570:	40002000 	.word	0x40002000

08003574 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003574:	b480      	push	{r7}
 8003576:	b087      	sub	sp, #28
 8003578:	af00      	add	r7, sp, #0
 800357a:	60f8      	str	r0, [r7, #12]
 800357c:	60b9      	str	r1, [r7, #8]
 800357e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003580:	68bb      	ldr	r3, [r7, #8]
 8003582:	f003 031f 	and.w	r3, r3, #31
 8003586:	2201      	movs	r2, #1
 8003588:	fa02 f303 	lsl.w	r3, r2, r3
 800358c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	6a1a      	ldr	r2, [r3, #32]
 8003592:	697b      	ldr	r3, [r7, #20]
 8003594:	43db      	mvns	r3, r3
 8003596:	401a      	ands	r2, r3
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	6a1a      	ldr	r2, [r3, #32]
 80035a0:	68bb      	ldr	r3, [r7, #8]
 80035a2:	f003 031f 	and.w	r3, r3, #31
 80035a6:	6879      	ldr	r1, [r7, #4]
 80035a8:	fa01 f303 	lsl.w	r3, r1, r3
 80035ac:	431a      	orrs	r2, r3
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	621a      	str	r2, [r3, #32]
}
 80035b2:	bf00      	nop
 80035b4:	371c      	adds	r7, #28
 80035b6:	46bd      	mov	sp, r7
 80035b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035bc:	4770      	bx	lr
	...

080035c0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80035c0:	b480      	push	{r7}
 80035c2:	b085      	sub	sp, #20
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	6078      	str	r0, [r7, #4]
 80035c8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80035d0:	2b01      	cmp	r3, #1
 80035d2:	d101      	bne.n	80035d8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80035d4:	2302      	movs	r3, #2
 80035d6:	e05a      	b.n	800368e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	2201      	movs	r2, #1
 80035dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2202      	movs	r2, #2
 80035e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	685b      	ldr	r3, [r3, #4]
 80035ee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	689b      	ldr	r3, [r3, #8]
 80035f6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80035fe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003600:	683b      	ldr	r3, [r7, #0]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	68fa      	ldr	r2, [r7, #12]
 8003606:	4313      	orrs	r3, r2
 8003608:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	68fa      	ldr	r2, [r7, #12]
 8003610:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	4a21      	ldr	r2, [pc, #132]	@ (800369c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003618:	4293      	cmp	r3, r2
 800361a:	d022      	beq.n	8003662 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003624:	d01d      	beq.n	8003662 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	4a1d      	ldr	r2, [pc, #116]	@ (80036a0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800362c:	4293      	cmp	r3, r2
 800362e:	d018      	beq.n	8003662 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	4a1b      	ldr	r2, [pc, #108]	@ (80036a4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003636:	4293      	cmp	r3, r2
 8003638:	d013      	beq.n	8003662 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	4a1a      	ldr	r2, [pc, #104]	@ (80036a8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003640:	4293      	cmp	r3, r2
 8003642:	d00e      	beq.n	8003662 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	4a18      	ldr	r2, [pc, #96]	@ (80036ac <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800364a:	4293      	cmp	r3, r2
 800364c:	d009      	beq.n	8003662 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	4a17      	ldr	r2, [pc, #92]	@ (80036b0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003654:	4293      	cmp	r3, r2
 8003656:	d004      	beq.n	8003662 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	4a15      	ldr	r2, [pc, #84]	@ (80036b4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800365e:	4293      	cmp	r3, r2
 8003660:	d10c      	bne.n	800367c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003662:	68bb      	ldr	r3, [r7, #8]
 8003664:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003668:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800366a:	683b      	ldr	r3, [r7, #0]
 800366c:	685b      	ldr	r3, [r3, #4]
 800366e:	68ba      	ldr	r2, [r7, #8]
 8003670:	4313      	orrs	r3, r2
 8003672:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	68ba      	ldr	r2, [r7, #8]
 800367a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	2201      	movs	r2, #1
 8003680:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	2200      	movs	r2, #0
 8003688:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800368c:	2300      	movs	r3, #0
}
 800368e:	4618      	mov	r0, r3
 8003690:	3714      	adds	r7, #20
 8003692:	46bd      	mov	sp, r7
 8003694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003698:	4770      	bx	lr
 800369a:	bf00      	nop
 800369c:	40010000 	.word	0x40010000
 80036a0:	40000400 	.word	0x40000400
 80036a4:	40000800 	.word	0x40000800
 80036a8:	40000c00 	.word	0x40000c00
 80036ac:	40010400 	.word	0x40010400
 80036b0:	40014000 	.word	0x40014000
 80036b4:	40001800 	.word	0x40001800

080036b8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80036b8:	b480      	push	{r7}
 80036ba:	b083      	sub	sp, #12
 80036bc:	af00      	add	r7, sp, #0
 80036be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80036c0:	bf00      	nop
 80036c2:	370c      	adds	r7, #12
 80036c4:	46bd      	mov	sp, r7
 80036c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ca:	4770      	bx	lr

080036cc <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80036cc:	b480      	push	{r7}
 80036ce:	b083      	sub	sp, #12
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80036d4:	bf00      	nop
 80036d6:	370c      	adds	r7, #12
 80036d8:	46bd      	mov	sp, r7
 80036da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036de:	4770      	bx	lr

080036e0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80036e0:	b084      	sub	sp, #16
 80036e2:	b580      	push	{r7, lr}
 80036e4:	b084      	sub	sp, #16
 80036e6:	af00      	add	r7, sp, #0
 80036e8:	6078      	str	r0, [r7, #4]
 80036ea:	f107 001c 	add.w	r0, r7, #28
 80036ee:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80036f2:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80036f6:	2b01      	cmp	r3, #1
 80036f8:	d123      	bne.n	8003742 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036fe:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	68db      	ldr	r3, [r3, #12]
 800370a:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 800370e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003712:	687a      	ldr	r2, [r7, #4]
 8003714:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	68db      	ldr	r3, [r3, #12]
 800371a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003722:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8003726:	2b01      	cmp	r3, #1
 8003728:	d105      	bne.n	8003736 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	68db      	ldr	r3, [r3, #12]
 800372e:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003736:	6878      	ldr	r0, [r7, #4]
 8003738:	f001 fae8 	bl	8004d0c <USB_CoreReset>
 800373c:	4603      	mov	r3, r0
 800373e:	73fb      	strb	r3, [r7, #15]
 8003740:	e01b      	b.n	800377a <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	68db      	ldr	r3, [r3, #12]
 8003746:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800374e:	6878      	ldr	r0, [r7, #4]
 8003750:	f001 fadc 	bl	8004d0c <USB_CoreReset>
 8003754:	4603      	mov	r3, r0
 8003756:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8003758:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800375c:	2b00      	cmp	r3, #0
 800375e:	d106      	bne.n	800376e <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003764:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	639a      	str	r2, [r3, #56]	@ 0x38
 800376c:	e005      	b.n	800377a <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003772:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800377a:	7fbb      	ldrb	r3, [r7, #30]
 800377c:	2b01      	cmp	r3, #1
 800377e:	d10b      	bne.n	8003798 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	689b      	ldr	r3, [r3, #8]
 8003784:	f043 0206 	orr.w	r2, r3, #6
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	689b      	ldr	r3, [r3, #8]
 8003790:	f043 0220 	orr.w	r2, r3, #32
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8003798:	7bfb      	ldrb	r3, [r7, #15]
}
 800379a:	4618      	mov	r0, r3
 800379c:	3710      	adds	r7, #16
 800379e:	46bd      	mov	sp, r7
 80037a0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80037a4:	b004      	add	sp, #16
 80037a6:	4770      	bx	lr

080037a8 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80037a8:	b480      	push	{r7}
 80037aa:	b087      	sub	sp, #28
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	60f8      	str	r0, [r7, #12]
 80037b0:	60b9      	str	r1, [r7, #8]
 80037b2:	4613      	mov	r3, r2
 80037b4:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80037b6:	79fb      	ldrb	r3, [r7, #7]
 80037b8:	2b02      	cmp	r3, #2
 80037ba:	d165      	bne.n	8003888 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80037bc:	68bb      	ldr	r3, [r7, #8]
 80037be:	4a41      	ldr	r2, [pc, #260]	@ (80038c4 <USB_SetTurnaroundTime+0x11c>)
 80037c0:	4293      	cmp	r3, r2
 80037c2:	d906      	bls.n	80037d2 <USB_SetTurnaroundTime+0x2a>
 80037c4:	68bb      	ldr	r3, [r7, #8]
 80037c6:	4a40      	ldr	r2, [pc, #256]	@ (80038c8 <USB_SetTurnaroundTime+0x120>)
 80037c8:	4293      	cmp	r3, r2
 80037ca:	d202      	bcs.n	80037d2 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80037cc:	230f      	movs	r3, #15
 80037ce:	617b      	str	r3, [r7, #20]
 80037d0:	e062      	b.n	8003898 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80037d2:	68bb      	ldr	r3, [r7, #8]
 80037d4:	4a3c      	ldr	r2, [pc, #240]	@ (80038c8 <USB_SetTurnaroundTime+0x120>)
 80037d6:	4293      	cmp	r3, r2
 80037d8:	d306      	bcc.n	80037e8 <USB_SetTurnaroundTime+0x40>
 80037da:	68bb      	ldr	r3, [r7, #8]
 80037dc:	4a3b      	ldr	r2, [pc, #236]	@ (80038cc <USB_SetTurnaroundTime+0x124>)
 80037de:	4293      	cmp	r3, r2
 80037e0:	d202      	bcs.n	80037e8 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80037e2:	230e      	movs	r3, #14
 80037e4:	617b      	str	r3, [r7, #20]
 80037e6:	e057      	b.n	8003898 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80037e8:	68bb      	ldr	r3, [r7, #8]
 80037ea:	4a38      	ldr	r2, [pc, #224]	@ (80038cc <USB_SetTurnaroundTime+0x124>)
 80037ec:	4293      	cmp	r3, r2
 80037ee:	d306      	bcc.n	80037fe <USB_SetTurnaroundTime+0x56>
 80037f0:	68bb      	ldr	r3, [r7, #8]
 80037f2:	4a37      	ldr	r2, [pc, #220]	@ (80038d0 <USB_SetTurnaroundTime+0x128>)
 80037f4:	4293      	cmp	r3, r2
 80037f6:	d202      	bcs.n	80037fe <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80037f8:	230d      	movs	r3, #13
 80037fa:	617b      	str	r3, [r7, #20]
 80037fc:	e04c      	b.n	8003898 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80037fe:	68bb      	ldr	r3, [r7, #8]
 8003800:	4a33      	ldr	r2, [pc, #204]	@ (80038d0 <USB_SetTurnaroundTime+0x128>)
 8003802:	4293      	cmp	r3, r2
 8003804:	d306      	bcc.n	8003814 <USB_SetTurnaroundTime+0x6c>
 8003806:	68bb      	ldr	r3, [r7, #8]
 8003808:	4a32      	ldr	r2, [pc, #200]	@ (80038d4 <USB_SetTurnaroundTime+0x12c>)
 800380a:	4293      	cmp	r3, r2
 800380c:	d802      	bhi.n	8003814 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800380e:	230c      	movs	r3, #12
 8003810:	617b      	str	r3, [r7, #20]
 8003812:	e041      	b.n	8003898 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8003814:	68bb      	ldr	r3, [r7, #8]
 8003816:	4a2f      	ldr	r2, [pc, #188]	@ (80038d4 <USB_SetTurnaroundTime+0x12c>)
 8003818:	4293      	cmp	r3, r2
 800381a:	d906      	bls.n	800382a <USB_SetTurnaroundTime+0x82>
 800381c:	68bb      	ldr	r3, [r7, #8]
 800381e:	4a2e      	ldr	r2, [pc, #184]	@ (80038d8 <USB_SetTurnaroundTime+0x130>)
 8003820:	4293      	cmp	r3, r2
 8003822:	d802      	bhi.n	800382a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8003824:	230b      	movs	r3, #11
 8003826:	617b      	str	r3, [r7, #20]
 8003828:	e036      	b.n	8003898 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800382a:	68bb      	ldr	r3, [r7, #8]
 800382c:	4a2a      	ldr	r2, [pc, #168]	@ (80038d8 <USB_SetTurnaroundTime+0x130>)
 800382e:	4293      	cmp	r3, r2
 8003830:	d906      	bls.n	8003840 <USB_SetTurnaroundTime+0x98>
 8003832:	68bb      	ldr	r3, [r7, #8]
 8003834:	4a29      	ldr	r2, [pc, #164]	@ (80038dc <USB_SetTurnaroundTime+0x134>)
 8003836:	4293      	cmp	r3, r2
 8003838:	d802      	bhi.n	8003840 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800383a:	230a      	movs	r3, #10
 800383c:	617b      	str	r3, [r7, #20]
 800383e:	e02b      	b.n	8003898 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8003840:	68bb      	ldr	r3, [r7, #8]
 8003842:	4a26      	ldr	r2, [pc, #152]	@ (80038dc <USB_SetTurnaroundTime+0x134>)
 8003844:	4293      	cmp	r3, r2
 8003846:	d906      	bls.n	8003856 <USB_SetTurnaroundTime+0xae>
 8003848:	68bb      	ldr	r3, [r7, #8]
 800384a:	4a25      	ldr	r2, [pc, #148]	@ (80038e0 <USB_SetTurnaroundTime+0x138>)
 800384c:	4293      	cmp	r3, r2
 800384e:	d202      	bcs.n	8003856 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8003850:	2309      	movs	r3, #9
 8003852:	617b      	str	r3, [r7, #20]
 8003854:	e020      	b.n	8003898 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8003856:	68bb      	ldr	r3, [r7, #8]
 8003858:	4a21      	ldr	r2, [pc, #132]	@ (80038e0 <USB_SetTurnaroundTime+0x138>)
 800385a:	4293      	cmp	r3, r2
 800385c:	d306      	bcc.n	800386c <USB_SetTurnaroundTime+0xc4>
 800385e:	68bb      	ldr	r3, [r7, #8]
 8003860:	4a20      	ldr	r2, [pc, #128]	@ (80038e4 <USB_SetTurnaroundTime+0x13c>)
 8003862:	4293      	cmp	r3, r2
 8003864:	d802      	bhi.n	800386c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8003866:	2308      	movs	r3, #8
 8003868:	617b      	str	r3, [r7, #20]
 800386a:	e015      	b.n	8003898 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800386c:	68bb      	ldr	r3, [r7, #8]
 800386e:	4a1d      	ldr	r2, [pc, #116]	@ (80038e4 <USB_SetTurnaroundTime+0x13c>)
 8003870:	4293      	cmp	r3, r2
 8003872:	d906      	bls.n	8003882 <USB_SetTurnaroundTime+0xda>
 8003874:	68bb      	ldr	r3, [r7, #8]
 8003876:	4a1c      	ldr	r2, [pc, #112]	@ (80038e8 <USB_SetTurnaroundTime+0x140>)
 8003878:	4293      	cmp	r3, r2
 800387a:	d202      	bcs.n	8003882 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800387c:	2307      	movs	r3, #7
 800387e:	617b      	str	r3, [r7, #20]
 8003880:	e00a      	b.n	8003898 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8003882:	2306      	movs	r3, #6
 8003884:	617b      	str	r3, [r7, #20]
 8003886:	e007      	b.n	8003898 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8003888:	79fb      	ldrb	r3, [r7, #7]
 800388a:	2b00      	cmp	r3, #0
 800388c:	d102      	bne.n	8003894 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800388e:	2309      	movs	r3, #9
 8003890:	617b      	str	r3, [r7, #20]
 8003892:	e001      	b.n	8003898 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8003894:	2309      	movs	r3, #9
 8003896:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	68db      	ldr	r3, [r3, #12]
 800389c:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	68da      	ldr	r2, [r3, #12]
 80038a8:	697b      	ldr	r3, [r7, #20]
 80038aa:	029b      	lsls	r3, r3, #10
 80038ac:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 80038b0:	431a      	orrs	r2, r3
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80038b6:	2300      	movs	r3, #0
}
 80038b8:	4618      	mov	r0, r3
 80038ba:	371c      	adds	r7, #28
 80038bc:	46bd      	mov	sp, r7
 80038be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c2:	4770      	bx	lr
 80038c4:	00d8acbf 	.word	0x00d8acbf
 80038c8:	00e4e1c0 	.word	0x00e4e1c0
 80038cc:	00f42400 	.word	0x00f42400
 80038d0:	01067380 	.word	0x01067380
 80038d4:	011a499f 	.word	0x011a499f
 80038d8:	01312cff 	.word	0x01312cff
 80038dc:	014ca43f 	.word	0x014ca43f
 80038e0:	016e3600 	.word	0x016e3600
 80038e4:	01a6ab1f 	.word	0x01a6ab1f
 80038e8:	01e84800 	.word	0x01e84800

080038ec <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80038ec:	b480      	push	{r7}
 80038ee:	b083      	sub	sp, #12
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	689b      	ldr	r3, [r3, #8]
 80038f8:	f043 0201 	orr.w	r2, r3, #1
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003900:	2300      	movs	r3, #0
}
 8003902:	4618      	mov	r0, r3
 8003904:	370c      	adds	r7, #12
 8003906:	46bd      	mov	sp, r7
 8003908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390c:	4770      	bx	lr

0800390e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800390e:	b480      	push	{r7}
 8003910:	b083      	sub	sp, #12
 8003912:	af00      	add	r7, sp, #0
 8003914:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	689b      	ldr	r3, [r3, #8]
 800391a:	f023 0201 	bic.w	r2, r3, #1
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003922:	2300      	movs	r3, #0
}
 8003924:	4618      	mov	r0, r3
 8003926:	370c      	adds	r7, #12
 8003928:	46bd      	mov	sp, r7
 800392a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800392e:	4770      	bx	lr

08003930 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8003930:	b580      	push	{r7, lr}
 8003932:	b084      	sub	sp, #16
 8003934:	af00      	add	r7, sp, #0
 8003936:	6078      	str	r0, [r7, #4]
 8003938:	460b      	mov	r3, r1
 800393a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800393c:	2300      	movs	r3, #0
 800393e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	68db      	ldr	r3, [r3, #12]
 8003944:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800394c:	78fb      	ldrb	r3, [r7, #3]
 800394e:	2b01      	cmp	r3, #1
 8003950:	d115      	bne.n	800397e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	68db      	ldr	r3, [r3, #12]
 8003956:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800395e:	200a      	movs	r0, #10
 8003960:	f7fd f974 	bl	8000c4c <HAL_Delay>
      ms += 10U;
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	330a      	adds	r3, #10
 8003968:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800396a:	6878      	ldr	r0, [r7, #4]
 800396c:	f001 f93f 	bl	8004bee <USB_GetMode>
 8003970:	4603      	mov	r3, r0
 8003972:	2b01      	cmp	r3, #1
 8003974:	d01e      	beq.n	80039b4 <USB_SetCurrentMode+0x84>
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	2bc7      	cmp	r3, #199	@ 0xc7
 800397a:	d9f0      	bls.n	800395e <USB_SetCurrentMode+0x2e>
 800397c:	e01a      	b.n	80039b4 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800397e:	78fb      	ldrb	r3, [r7, #3]
 8003980:	2b00      	cmp	r3, #0
 8003982:	d115      	bne.n	80039b0 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	68db      	ldr	r3, [r3, #12]
 8003988:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8003990:	200a      	movs	r0, #10
 8003992:	f7fd f95b 	bl	8000c4c <HAL_Delay>
      ms += 10U;
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	330a      	adds	r3, #10
 800399a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800399c:	6878      	ldr	r0, [r7, #4]
 800399e:	f001 f926 	bl	8004bee <USB_GetMode>
 80039a2:	4603      	mov	r3, r0
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d005      	beq.n	80039b4 <USB_SetCurrentMode+0x84>
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	2bc7      	cmp	r3, #199	@ 0xc7
 80039ac:	d9f0      	bls.n	8003990 <USB_SetCurrentMode+0x60>
 80039ae:	e001      	b.n	80039b4 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80039b0:	2301      	movs	r3, #1
 80039b2:	e005      	b.n	80039c0 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	2bc8      	cmp	r3, #200	@ 0xc8
 80039b8:	d101      	bne.n	80039be <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80039ba:	2301      	movs	r3, #1
 80039bc:	e000      	b.n	80039c0 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80039be:	2300      	movs	r3, #0
}
 80039c0:	4618      	mov	r0, r3
 80039c2:	3710      	adds	r7, #16
 80039c4:	46bd      	mov	sp, r7
 80039c6:	bd80      	pop	{r7, pc}

080039c8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80039c8:	b084      	sub	sp, #16
 80039ca:	b580      	push	{r7, lr}
 80039cc:	b086      	sub	sp, #24
 80039ce:	af00      	add	r7, sp, #0
 80039d0:	6078      	str	r0, [r7, #4]
 80039d2:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80039d6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80039da:	2300      	movs	r3, #0
 80039dc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80039e2:	2300      	movs	r3, #0
 80039e4:	613b      	str	r3, [r7, #16]
 80039e6:	e009      	b.n	80039fc <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80039e8:	687a      	ldr	r2, [r7, #4]
 80039ea:	693b      	ldr	r3, [r7, #16]
 80039ec:	3340      	adds	r3, #64	@ 0x40
 80039ee:	009b      	lsls	r3, r3, #2
 80039f0:	4413      	add	r3, r2
 80039f2:	2200      	movs	r2, #0
 80039f4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80039f6:	693b      	ldr	r3, [r7, #16]
 80039f8:	3301      	adds	r3, #1
 80039fa:	613b      	str	r3, [r7, #16]
 80039fc:	693b      	ldr	r3, [r7, #16]
 80039fe:	2b0e      	cmp	r3, #14
 8003a00:	d9f2      	bls.n	80039e8 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8003a02:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d11c      	bne.n	8003a44 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003a10:	685b      	ldr	r3, [r3, #4]
 8003a12:	68fa      	ldr	r2, [r7, #12]
 8003a14:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003a18:	f043 0302 	orr.w	r3, r3, #2
 8003a1c:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a22:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a2e:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a3a:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	639a      	str	r2, [r3, #56]	@ 0x38
 8003a42:	e00b      	b.n	8003a5c <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a48:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a54:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8003a62:	461a      	mov	r2, r3
 8003a64:	2300      	movs	r3, #0
 8003a66:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003a68:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8003a6c:	2b01      	cmp	r3, #1
 8003a6e:	d10d      	bne.n	8003a8c <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8003a70:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d104      	bne.n	8003a82 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8003a78:	2100      	movs	r1, #0
 8003a7a:	6878      	ldr	r0, [r7, #4]
 8003a7c:	f000 f968 	bl	8003d50 <USB_SetDevSpeed>
 8003a80:	e008      	b.n	8003a94 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003a82:	2101      	movs	r1, #1
 8003a84:	6878      	ldr	r0, [r7, #4]
 8003a86:	f000 f963 	bl	8003d50 <USB_SetDevSpeed>
 8003a8a:	e003      	b.n	8003a94 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8003a8c:	2103      	movs	r1, #3
 8003a8e:	6878      	ldr	r0, [r7, #4]
 8003a90:	f000 f95e 	bl	8003d50 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003a94:	2110      	movs	r1, #16
 8003a96:	6878      	ldr	r0, [r7, #4]
 8003a98:	f000 f8fa 	bl	8003c90 <USB_FlushTxFifo>
 8003a9c:	4603      	mov	r3, r0
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d001      	beq.n	8003aa6 <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8003aa2:	2301      	movs	r3, #1
 8003aa4:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003aa6:	6878      	ldr	r0, [r7, #4]
 8003aa8:	f000 f924 	bl	8003cf4 <USB_FlushRxFifo>
 8003aac:	4603      	mov	r3, r0
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d001      	beq.n	8003ab6 <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8003ab2:	2301      	movs	r3, #1
 8003ab4:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003abc:	461a      	mov	r2, r3
 8003abe:	2300      	movs	r3, #0
 8003ac0:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003ac8:	461a      	mov	r2, r3
 8003aca:	2300      	movs	r3, #0
 8003acc:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003ad4:	461a      	mov	r2, r3
 8003ad6:	2300      	movs	r3, #0
 8003ad8:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003ada:	2300      	movs	r3, #0
 8003adc:	613b      	str	r3, [r7, #16]
 8003ade:	e043      	b.n	8003b68 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003ae0:	693b      	ldr	r3, [r7, #16]
 8003ae2:	015a      	lsls	r2, r3, #5
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	4413      	add	r3, r2
 8003ae8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003af2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003af6:	d118      	bne.n	8003b2a <USB_DevInit+0x162>
    {
      if (i == 0U)
 8003af8:	693b      	ldr	r3, [r7, #16]
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d10a      	bne.n	8003b14 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003afe:	693b      	ldr	r3, [r7, #16]
 8003b00:	015a      	lsls	r2, r3, #5
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	4413      	add	r3, r2
 8003b06:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003b0a:	461a      	mov	r2, r3
 8003b0c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8003b10:	6013      	str	r3, [r2, #0]
 8003b12:	e013      	b.n	8003b3c <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003b14:	693b      	ldr	r3, [r7, #16]
 8003b16:	015a      	lsls	r2, r3, #5
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	4413      	add	r3, r2
 8003b1c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003b20:	461a      	mov	r2, r3
 8003b22:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8003b26:	6013      	str	r3, [r2, #0]
 8003b28:	e008      	b.n	8003b3c <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8003b2a:	693b      	ldr	r3, [r7, #16]
 8003b2c:	015a      	lsls	r2, r3, #5
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	4413      	add	r3, r2
 8003b32:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003b36:	461a      	mov	r2, r3
 8003b38:	2300      	movs	r3, #0
 8003b3a:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8003b3c:	693b      	ldr	r3, [r7, #16]
 8003b3e:	015a      	lsls	r2, r3, #5
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	4413      	add	r3, r2
 8003b44:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003b48:	461a      	mov	r2, r3
 8003b4a:	2300      	movs	r3, #0
 8003b4c:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003b4e:	693b      	ldr	r3, [r7, #16]
 8003b50:	015a      	lsls	r2, r3, #5
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	4413      	add	r3, r2
 8003b56:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003b5a:	461a      	mov	r2, r3
 8003b5c:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003b60:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003b62:	693b      	ldr	r3, [r7, #16]
 8003b64:	3301      	adds	r3, #1
 8003b66:	613b      	str	r3, [r7, #16]
 8003b68:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8003b6c:	461a      	mov	r2, r3
 8003b6e:	693b      	ldr	r3, [r7, #16]
 8003b70:	4293      	cmp	r3, r2
 8003b72:	d3b5      	bcc.n	8003ae0 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003b74:	2300      	movs	r3, #0
 8003b76:	613b      	str	r3, [r7, #16]
 8003b78:	e043      	b.n	8003c02 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003b7a:	693b      	ldr	r3, [r7, #16]
 8003b7c:	015a      	lsls	r2, r3, #5
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	4413      	add	r3, r2
 8003b82:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003b8c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003b90:	d118      	bne.n	8003bc4 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8003b92:	693b      	ldr	r3, [r7, #16]
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d10a      	bne.n	8003bae <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003b98:	693b      	ldr	r3, [r7, #16]
 8003b9a:	015a      	lsls	r2, r3, #5
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	4413      	add	r3, r2
 8003ba0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003ba4:	461a      	mov	r2, r3
 8003ba6:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8003baa:	6013      	str	r3, [r2, #0]
 8003bac:	e013      	b.n	8003bd6 <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003bae:	693b      	ldr	r3, [r7, #16]
 8003bb0:	015a      	lsls	r2, r3, #5
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	4413      	add	r3, r2
 8003bb6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003bba:	461a      	mov	r2, r3
 8003bbc:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8003bc0:	6013      	str	r3, [r2, #0]
 8003bc2:	e008      	b.n	8003bd6 <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003bc4:	693b      	ldr	r3, [r7, #16]
 8003bc6:	015a      	lsls	r2, r3, #5
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	4413      	add	r3, r2
 8003bcc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003bd0:	461a      	mov	r2, r3
 8003bd2:	2300      	movs	r3, #0
 8003bd4:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003bd6:	693b      	ldr	r3, [r7, #16]
 8003bd8:	015a      	lsls	r2, r3, #5
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	4413      	add	r3, r2
 8003bde:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003be2:	461a      	mov	r2, r3
 8003be4:	2300      	movs	r3, #0
 8003be6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003be8:	693b      	ldr	r3, [r7, #16]
 8003bea:	015a      	lsls	r2, r3, #5
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	4413      	add	r3, r2
 8003bf0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003bf4:	461a      	mov	r2, r3
 8003bf6:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003bfa:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003bfc:	693b      	ldr	r3, [r7, #16]
 8003bfe:	3301      	adds	r3, #1
 8003c00:	613b      	str	r3, [r7, #16]
 8003c02:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8003c06:	461a      	mov	r2, r3
 8003c08:	693b      	ldr	r3, [r7, #16]
 8003c0a:	4293      	cmp	r3, r2
 8003c0c:	d3b5      	bcc.n	8003b7a <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003c14:	691b      	ldr	r3, [r3, #16]
 8003c16:	68fa      	ldr	r2, [r7, #12]
 8003c18:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003c1c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003c20:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	2200      	movs	r2, #0
 8003c26:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8003c2e:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8003c30:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d105      	bne.n	8003c44 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	699b      	ldr	r3, [r3, #24]
 8003c3c:	f043 0210 	orr.w	r2, r3, #16
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	699a      	ldr	r2, [r3, #24]
 8003c48:	4b10      	ldr	r3, [pc, #64]	@ (8003c8c <USB_DevInit+0x2c4>)
 8003c4a:	4313      	orrs	r3, r2
 8003c4c:	687a      	ldr	r2, [r7, #4]
 8003c4e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8003c50:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d005      	beq.n	8003c64 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	699b      	ldr	r3, [r3, #24]
 8003c5c:	f043 0208 	orr.w	r2, r3, #8
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8003c64:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8003c68:	2b01      	cmp	r3, #1
 8003c6a:	d107      	bne.n	8003c7c <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	699b      	ldr	r3, [r3, #24]
 8003c70:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003c74:	f043 0304 	orr.w	r3, r3, #4
 8003c78:	687a      	ldr	r2, [r7, #4]
 8003c7a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8003c7c:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c7e:	4618      	mov	r0, r3
 8003c80:	3718      	adds	r7, #24
 8003c82:	46bd      	mov	sp, r7
 8003c84:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003c88:	b004      	add	sp, #16
 8003c8a:	4770      	bx	lr
 8003c8c:	803c3800 	.word	0x803c3800

08003c90 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003c90:	b480      	push	{r7}
 8003c92:	b085      	sub	sp, #20
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	6078      	str	r0, [r7, #4]
 8003c98:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8003c9a:	2300      	movs	r3, #0
 8003c9c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	3301      	adds	r3, #1
 8003ca2:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003caa:	d901      	bls.n	8003cb0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8003cac:	2303      	movs	r3, #3
 8003cae:	e01b      	b.n	8003ce8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	691b      	ldr	r3, [r3, #16]
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	daf2      	bge.n	8003c9e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8003cb8:	2300      	movs	r3, #0
 8003cba:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003cbc:	683b      	ldr	r3, [r7, #0]
 8003cbe:	019b      	lsls	r3, r3, #6
 8003cc0:	f043 0220 	orr.w	r2, r3, #32
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	3301      	adds	r3, #1
 8003ccc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003cd4:	d901      	bls.n	8003cda <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8003cd6:	2303      	movs	r3, #3
 8003cd8:	e006      	b.n	8003ce8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	691b      	ldr	r3, [r3, #16]
 8003cde:	f003 0320 	and.w	r3, r3, #32
 8003ce2:	2b20      	cmp	r3, #32
 8003ce4:	d0f0      	beq.n	8003cc8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8003ce6:	2300      	movs	r3, #0
}
 8003ce8:	4618      	mov	r0, r3
 8003cea:	3714      	adds	r7, #20
 8003cec:	46bd      	mov	sp, r7
 8003cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf2:	4770      	bx	lr

08003cf4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003cf4:	b480      	push	{r7}
 8003cf6:	b085      	sub	sp, #20
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003cfc:	2300      	movs	r3, #0
 8003cfe:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	3301      	adds	r3, #1
 8003d04:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003d0c:	d901      	bls.n	8003d12 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8003d0e:	2303      	movs	r3, #3
 8003d10:	e018      	b.n	8003d44 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	691b      	ldr	r3, [r3, #16]
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	daf2      	bge.n	8003d00 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8003d1a:	2300      	movs	r3, #0
 8003d1c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	2210      	movs	r2, #16
 8003d22:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	3301      	adds	r3, #1
 8003d28:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003d30:	d901      	bls.n	8003d36 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8003d32:	2303      	movs	r3, #3
 8003d34:	e006      	b.n	8003d44 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	691b      	ldr	r3, [r3, #16]
 8003d3a:	f003 0310 	and.w	r3, r3, #16
 8003d3e:	2b10      	cmp	r3, #16
 8003d40:	d0f0      	beq.n	8003d24 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8003d42:	2300      	movs	r3, #0
}
 8003d44:	4618      	mov	r0, r3
 8003d46:	3714      	adds	r7, #20
 8003d48:	46bd      	mov	sp, r7
 8003d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4e:	4770      	bx	lr

08003d50 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8003d50:	b480      	push	{r7}
 8003d52:	b085      	sub	sp, #20
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	6078      	str	r0, [r7, #4]
 8003d58:	460b      	mov	r3, r1
 8003d5a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003d66:	681a      	ldr	r2, [r3, #0]
 8003d68:	78fb      	ldrb	r3, [r7, #3]
 8003d6a:	68f9      	ldr	r1, [r7, #12]
 8003d6c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003d70:	4313      	orrs	r3, r2
 8003d72:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8003d74:	2300      	movs	r3, #0
}
 8003d76:	4618      	mov	r0, r3
 8003d78:	3714      	adds	r7, #20
 8003d7a:	46bd      	mov	sp, r7
 8003d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d80:	4770      	bx	lr

08003d82 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8003d82:	b480      	push	{r7}
 8003d84:	b087      	sub	sp, #28
 8003d86:	af00      	add	r7, sp, #0
 8003d88:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8003d8e:	693b      	ldr	r3, [r7, #16]
 8003d90:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003d94:	689b      	ldr	r3, [r3, #8]
 8003d96:	f003 0306 	and.w	r3, r3, #6
 8003d9a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d102      	bne.n	8003da8 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8003da2:	2300      	movs	r3, #0
 8003da4:	75fb      	strb	r3, [r7, #23]
 8003da6:	e00a      	b.n	8003dbe <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	2b02      	cmp	r3, #2
 8003dac:	d002      	beq.n	8003db4 <USB_GetDevSpeed+0x32>
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	2b06      	cmp	r3, #6
 8003db2:	d102      	bne.n	8003dba <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8003db4:	2302      	movs	r3, #2
 8003db6:	75fb      	strb	r3, [r7, #23]
 8003db8:	e001      	b.n	8003dbe <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8003dba:	230f      	movs	r3, #15
 8003dbc:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8003dbe:	7dfb      	ldrb	r3, [r7, #23]
}
 8003dc0:	4618      	mov	r0, r3
 8003dc2:	371c      	adds	r7, #28
 8003dc4:	46bd      	mov	sp, r7
 8003dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dca:	4770      	bx	lr

08003dcc <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8003dcc:	b480      	push	{r7}
 8003dce:	b085      	sub	sp, #20
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	6078      	str	r0, [r7, #4]
 8003dd4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003dda:	683b      	ldr	r3, [r7, #0]
 8003ddc:	781b      	ldrb	r3, [r3, #0]
 8003dde:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003de0:	683b      	ldr	r3, [r7, #0]
 8003de2:	785b      	ldrb	r3, [r3, #1]
 8003de4:	2b01      	cmp	r3, #1
 8003de6:	d13a      	bne.n	8003e5e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003dee:	69da      	ldr	r2, [r3, #28]
 8003df0:	683b      	ldr	r3, [r7, #0]
 8003df2:	781b      	ldrb	r3, [r3, #0]
 8003df4:	f003 030f 	and.w	r3, r3, #15
 8003df8:	2101      	movs	r1, #1
 8003dfa:	fa01 f303 	lsl.w	r3, r1, r3
 8003dfe:	b29b      	uxth	r3, r3
 8003e00:	68f9      	ldr	r1, [r7, #12]
 8003e02:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003e06:	4313      	orrs	r3, r2
 8003e08:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8003e0a:	68bb      	ldr	r3, [r7, #8]
 8003e0c:	015a      	lsls	r2, r3, #5
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	4413      	add	r3, r2
 8003e12:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d155      	bne.n	8003ecc <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003e20:	68bb      	ldr	r3, [r7, #8]
 8003e22:	015a      	lsls	r2, r3, #5
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	4413      	add	r3, r2
 8003e28:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003e2c:	681a      	ldr	r2, [r3, #0]
 8003e2e:	683b      	ldr	r3, [r7, #0]
 8003e30:	689b      	ldr	r3, [r3, #8]
 8003e32:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003e36:	683b      	ldr	r3, [r7, #0]
 8003e38:	791b      	ldrb	r3, [r3, #4]
 8003e3a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003e3c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003e3e:	68bb      	ldr	r3, [r7, #8]
 8003e40:	059b      	lsls	r3, r3, #22
 8003e42:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003e44:	4313      	orrs	r3, r2
 8003e46:	68ba      	ldr	r2, [r7, #8]
 8003e48:	0151      	lsls	r1, r2, #5
 8003e4a:	68fa      	ldr	r2, [r7, #12]
 8003e4c:	440a      	add	r2, r1
 8003e4e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003e52:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003e56:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003e5a:	6013      	str	r3, [r2, #0]
 8003e5c:	e036      	b.n	8003ecc <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003e64:	69da      	ldr	r2, [r3, #28]
 8003e66:	683b      	ldr	r3, [r7, #0]
 8003e68:	781b      	ldrb	r3, [r3, #0]
 8003e6a:	f003 030f 	and.w	r3, r3, #15
 8003e6e:	2101      	movs	r1, #1
 8003e70:	fa01 f303 	lsl.w	r3, r1, r3
 8003e74:	041b      	lsls	r3, r3, #16
 8003e76:	68f9      	ldr	r1, [r7, #12]
 8003e78:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003e7c:	4313      	orrs	r3, r2
 8003e7e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8003e80:	68bb      	ldr	r3, [r7, #8]
 8003e82:	015a      	lsls	r2, r3, #5
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	4413      	add	r3, r2
 8003e88:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d11a      	bne.n	8003ecc <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003e96:	68bb      	ldr	r3, [r7, #8]
 8003e98:	015a      	lsls	r2, r3, #5
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	4413      	add	r3, r2
 8003e9e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003ea2:	681a      	ldr	r2, [r3, #0]
 8003ea4:	683b      	ldr	r3, [r7, #0]
 8003ea6:	689b      	ldr	r3, [r3, #8]
 8003ea8:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8003eac:	683b      	ldr	r3, [r7, #0]
 8003eae:	791b      	ldrb	r3, [r3, #4]
 8003eb0:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003eb2:	430b      	orrs	r3, r1
 8003eb4:	4313      	orrs	r3, r2
 8003eb6:	68ba      	ldr	r2, [r7, #8]
 8003eb8:	0151      	lsls	r1, r2, #5
 8003eba:	68fa      	ldr	r2, [r7, #12]
 8003ebc:	440a      	add	r2, r1
 8003ebe:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003ec2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003ec6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003eca:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8003ecc:	2300      	movs	r3, #0
}
 8003ece:	4618      	mov	r0, r3
 8003ed0:	3714      	adds	r7, #20
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed8:	4770      	bx	lr
	...

08003edc <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8003edc:	b480      	push	{r7}
 8003ede:	b085      	sub	sp, #20
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	6078      	str	r0, [r7, #4]
 8003ee4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003eea:	683b      	ldr	r3, [r7, #0]
 8003eec:	781b      	ldrb	r3, [r3, #0]
 8003eee:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8003ef0:	683b      	ldr	r3, [r7, #0]
 8003ef2:	785b      	ldrb	r3, [r3, #1]
 8003ef4:	2b01      	cmp	r3, #1
 8003ef6:	d161      	bne.n	8003fbc <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003ef8:	68bb      	ldr	r3, [r7, #8]
 8003efa:	015a      	lsls	r2, r3, #5
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	4413      	add	r3, r2
 8003f00:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003f0a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003f0e:	d11f      	bne.n	8003f50 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8003f10:	68bb      	ldr	r3, [r7, #8]
 8003f12:	015a      	lsls	r2, r3, #5
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	4413      	add	r3, r2
 8003f18:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	68ba      	ldr	r2, [r7, #8]
 8003f20:	0151      	lsls	r1, r2, #5
 8003f22:	68fa      	ldr	r2, [r7, #12]
 8003f24:	440a      	add	r2, r1
 8003f26:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003f2a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8003f2e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8003f30:	68bb      	ldr	r3, [r7, #8]
 8003f32:	015a      	lsls	r2, r3, #5
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	4413      	add	r3, r2
 8003f38:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	68ba      	ldr	r2, [r7, #8]
 8003f40:	0151      	lsls	r1, r2, #5
 8003f42:	68fa      	ldr	r2, [r7, #12]
 8003f44:	440a      	add	r2, r1
 8003f46:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003f4a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003f4e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003f56:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003f58:	683b      	ldr	r3, [r7, #0]
 8003f5a:	781b      	ldrb	r3, [r3, #0]
 8003f5c:	f003 030f 	and.w	r3, r3, #15
 8003f60:	2101      	movs	r1, #1
 8003f62:	fa01 f303 	lsl.w	r3, r1, r3
 8003f66:	b29b      	uxth	r3, r3
 8003f68:	43db      	mvns	r3, r3
 8003f6a:	68f9      	ldr	r1, [r7, #12]
 8003f6c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003f70:	4013      	ands	r3, r2
 8003f72:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003f7a:	69da      	ldr	r2, [r3, #28]
 8003f7c:	683b      	ldr	r3, [r7, #0]
 8003f7e:	781b      	ldrb	r3, [r3, #0]
 8003f80:	f003 030f 	and.w	r3, r3, #15
 8003f84:	2101      	movs	r1, #1
 8003f86:	fa01 f303 	lsl.w	r3, r1, r3
 8003f8a:	b29b      	uxth	r3, r3
 8003f8c:	43db      	mvns	r3, r3
 8003f8e:	68f9      	ldr	r1, [r7, #12]
 8003f90:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003f94:	4013      	ands	r3, r2
 8003f96:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8003f98:	68bb      	ldr	r3, [r7, #8]
 8003f9a:	015a      	lsls	r2, r3, #5
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	4413      	add	r3, r2
 8003fa0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003fa4:	681a      	ldr	r2, [r3, #0]
 8003fa6:	68bb      	ldr	r3, [r7, #8]
 8003fa8:	0159      	lsls	r1, r3, #5
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	440b      	add	r3, r1
 8003fae:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003fb2:	4619      	mov	r1, r3
 8003fb4:	4b35      	ldr	r3, [pc, #212]	@ (800408c <USB_DeactivateEndpoint+0x1b0>)
 8003fb6:	4013      	ands	r3, r2
 8003fb8:	600b      	str	r3, [r1, #0]
 8003fba:	e060      	b.n	800407e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003fbc:	68bb      	ldr	r3, [r7, #8]
 8003fbe:	015a      	lsls	r2, r3, #5
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	4413      	add	r3, r2
 8003fc4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003fce:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003fd2:	d11f      	bne.n	8004014 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003fd4:	68bb      	ldr	r3, [r7, #8]
 8003fd6:	015a      	lsls	r2, r3, #5
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	4413      	add	r3, r2
 8003fdc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	68ba      	ldr	r2, [r7, #8]
 8003fe4:	0151      	lsls	r1, r2, #5
 8003fe6:	68fa      	ldr	r2, [r7, #12]
 8003fe8:	440a      	add	r2, r1
 8003fea:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003fee:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8003ff2:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8003ff4:	68bb      	ldr	r3, [r7, #8]
 8003ff6:	015a      	lsls	r2, r3, #5
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	4413      	add	r3, r2
 8003ffc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	68ba      	ldr	r2, [r7, #8]
 8004004:	0151      	lsls	r1, r2, #5
 8004006:	68fa      	ldr	r2, [r7, #12]
 8004008:	440a      	add	r2, r1
 800400a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800400e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004012:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800401a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800401c:	683b      	ldr	r3, [r7, #0]
 800401e:	781b      	ldrb	r3, [r3, #0]
 8004020:	f003 030f 	and.w	r3, r3, #15
 8004024:	2101      	movs	r1, #1
 8004026:	fa01 f303 	lsl.w	r3, r1, r3
 800402a:	041b      	lsls	r3, r3, #16
 800402c:	43db      	mvns	r3, r3
 800402e:	68f9      	ldr	r1, [r7, #12]
 8004030:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004034:	4013      	ands	r3, r2
 8004036:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800403e:	69da      	ldr	r2, [r3, #28]
 8004040:	683b      	ldr	r3, [r7, #0]
 8004042:	781b      	ldrb	r3, [r3, #0]
 8004044:	f003 030f 	and.w	r3, r3, #15
 8004048:	2101      	movs	r1, #1
 800404a:	fa01 f303 	lsl.w	r3, r1, r3
 800404e:	041b      	lsls	r3, r3, #16
 8004050:	43db      	mvns	r3, r3
 8004052:	68f9      	ldr	r1, [r7, #12]
 8004054:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004058:	4013      	ands	r3, r2
 800405a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800405c:	68bb      	ldr	r3, [r7, #8]
 800405e:	015a      	lsls	r2, r3, #5
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	4413      	add	r3, r2
 8004064:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004068:	681a      	ldr	r2, [r3, #0]
 800406a:	68bb      	ldr	r3, [r7, #8]
 800406c:	0159      	lsls	r1, r3, #5
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	440b      	add	r3, r1
 8004072:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004076:	4619      	mov	r1, r3
 8004078:	4b05      	ldr	r3, [pc, #20]	@ (8004090 <USB_DeactivateEndpoint+0x1b4>)
 800407a:	4013      	ands	r3, r2
 800407c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800407e:	2300      	movs	r3, #0
}
 8004080:	4618      	mov	r0, r3
 8004082:	3714      	adds	r7, #20
 8004084:	46bd      	mov	sp, r7
 8004086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800408a:	4770      	bx	lr
 800408c:	ec337800 	.word	0xec337800
 8004090:	eff37800 	.word	0xeff37800

08004094 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004094:	b580      	push	{r7, lr}
 8004096:	b08a      	sub	sp, #40	@ 0x28
 8004098:	af02      	add	r7, sp, #8
 800409a:	60f8      	str	r0, [r7, #12]
 800409c:	60b9      	str	r1, [r7, #8]
 800409e:	4613      	mov	r3, r2
 80040a0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80040a6:	68bb      	ldr	r3, [r7, #8]
 80040a8:	781b      	ldrb	r3, [r3, #0]
 80040aa:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80040ac:	68bb      	ldr	r3, [r7, #8]
 80040ae:	785b      	ldrb	r3, [r3, #1]
 80040b0:	2b01      	cmp	r3, #1
 80040b2:	f040 817f 	bne.w	80043b4 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80040b6:	68bb      	ldr	r3, [r7, #8]
 80040b8:	691b      	ldr	r3, [r3, #16]
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d132      	bne.n	8004124 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80040be:	69bb      	ldr	r3, [r7, #24]
 80040c0:	015a      	lsls	r2, r3, #5
 80040c2:	69fb      	ldr	r3, [r7, #28]
 80040c4:	4413      	add	r3, r2
 80040c6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80040ca:	691b      	ldr	r3, [r3, #16]
 80040cc:	69ba      	ldr	r2, [r7, #24]
 80040ce:	0151      	lsls	r1, r2, #5
 80040d0:	69fa      	ldr	r2, [r7, #28]
 80040d2:	440a      	add	r2, r1
 80040d4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80040d8:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80040dc:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80040e0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80040e2:	69bb      	ldr	r3, [r7, #24]
 80040e4:	015a      	lsls	r2, r3, #5
 80040e6:	69fb      	ldr	r3, [r7, #28]
 80040e8:	4413      	add	r3, r2
 80040ea:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80040ee:	691b      	ldr	r3, [r3, #16]
 80040f0:	69ba      	ldr	r2, [r7, #24]
 80040f2:	0151      	lsls	r1, r2, #5
 80040f4:	69fa      	ldr	r2, [r7, #28]
 80040f6:	440a      	add	r2, r1
 80040f8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80040fc:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004100:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004102:	69bb      	ldr	r3, [r7, #24]
 8004104:	015a      	lsls	r2, r3, #5
 8004106:	69fb      	ldr	r3, [r7, #28]
 8004108:	4413      	add	r3, r2
 800410a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800410e:	691b      	ldr	r3, [r3, #16]
 8004110:	69ba      	ldr	r2, [r7, #24]
 8004112:	0151      	lsls	r1, r2, #5
 8004114:	69fa      	ldr	r2, [r7, #28]
 8004116:	440a      	add	r2, r1
 8004118:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800411c:	0cdb      	lsrs	r3, r3, #19
 800411e:	04db      	lsls	r3, r3, #19
 8004120:	6113      	str	r3, [r2, #16]
 8004122:	e097      	b.n	8004254 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004124:	69bb      	ldr	r3, [r7, #24]
 8004126:	015a      	lsls	r2, r3, #5
 8004128:	69fb      	ldr	r3, [r7, #28]
 800412a:	4413      	add	r3, r2
 800412c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004130:	691b      	ldr	r3, [r3, #16]
 8004132:	69ba      	ldr	r2, [r7, #24]
 8004134:	0151      	lsls	r1, r2, #5
 8004136:	69fa      	ldr	r2, [r7, #28]
 8004138:	440a      	add	r2, r1
 800413a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800413e:	0cdb      	lsrs	r3, r3, #19
 8004140:	04db      	lsls	r3, r3, #19
 8004142:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004144:	69bb      	ldr	r3, [r7, #24]
 8004146:	015a      	lsls	r2, r3, #5
 8004148:	69fb      	ldr	r3, [r7, #28]
 800414a:	4413      	add	r3, r2
 800414c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004150:	691b      	ldr	r3, [r3, #16]
 8004152:	69ba      	ldr	r2, [r7, #24]
 8004154:	0151      	lsls	r1, r2, #5
 8004156:	69fa      	ldr	r2, [r7, #28]
 8004158:	440a      	add	r2, r1
 800415a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800415e:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8004162:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8004166:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8004168:	69bb      	ldr	r3, [r7, #24]
 800416a:	2b00      	cmp	r3, #0
 800416c:	d11a      	bne.n	80041a4 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 800416e:	68bb      	ldr	r3, [r7, #8]
 8004170:	691a      	ldr	r2, [r3, #16]
 8004172:	68bb      	ldr	r3, [r7, #8]
 8004174:	689b      	ldr	r3, [r3, #8]
 8004176:	429a      	cmp	r2, r3
 8004178:	d903      	bls.n	8004182 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 800417a:	68bb      	ldr	r3, [r7, #8]
 800417c:	689a      	ldr	r2, [r3, #8]
 800417e:	68bb      	ldr	r3, [r7, #8]
 8004180:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004182:	69bb      	ldr	r3, [r7, #24]
 8004184:	015a      	lsls	r2, r3, #5
 8004186:	69fb      	ldr	r3, [r7, #28]
 8004188:	4413      	add	r3, r2
 800418a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800418e:	691b      	ldr	r3, [r3, #16]
 8004190:	69ba      	ldr	r2, [r7, #24]
 8004192:	0151      	lsls	r1, r2, #5
 8004194:	69fa      	ldr	r2, [r7, #28]
 8004196:	440a      	add	r2, r1
 8004198:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800419c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80041a0:	6113      	str	r3, [r2, #16]
 80041a2:	e044      	b.n	800422e <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80041a4:	68bb      	ldr	r3, [r7, #8]
 80041a6:	691a      	ldr	r2, [r3, #16]
 80041a8:	68bb      	ldr	r3, [r7, #8]
 80041aa:	689b      	ldr	r3, [r3, #8]
 80041ac:	4413      	add	r3, r2
 80041ae:	1e5a      	subs	r2, r3, #1
 80041b0:	68bb      	ldr	r3, [r7, #8]
 80041b2:	689b      	ldr	r3, [r3, #8]
 80041b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80041b8:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 80041ba:	69bb      	ldr	r3, [r7, #24]
 80041bc:	015a      	lsls	r2, r3, #5
 80041be:	69fb      	ldr	r3, [r7, #28]
 80041c0:	4413      	add	r3, r2
 80041c2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80041c6:	691a      	ldr	r2, [r3, #16]
 80041c8:	8afb      	ldrh	r3, [r7, #22]
 80041ca:	04d9      	lsls	r1, r3, #19
 80041cc:	4ba4      	ldr	r3, [pc, #656]	@ (8004460 <USB_EPStartXfer+0x3cc>)
 80041ce:	400b      	ands	r3, r1
 80041d0:	69b9      	ldr	r1, [r7, #24]
 80041d2:	0148      	lsls	r0, r1, #5
 80041d4:	69f9      	ldr	r1, [r7, #28]
 80041d6:	4401      	add	r1, r0
 80041d8:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80041dc:	4313      	orrs	r3, r2
 80041de:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 80041e0:	68bb      	ldr	r3, [r7, #8]
 80041e2:	791b      	ldrb	r3, [r3, #4]
 80041e4:	2b01      	cmp	r3, #1
 80041e6:	d122      	bne.n	800422e <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80041e8:	69bb      	ldr	r3, [r7, #24]
 80041ea:	015a      	lsls	r2, r3, #5
 80041ec:	69fb      	ldr	r3, [r7, #28]
 80041ee:	4413      	add	r3, r2
 80041f0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80041f4:	691b      	ldr	r3, [r3, #16]
 80041f6:	69ba      	ldr	r2, [r7, #24]
 80041f8:	0151      	lsls	r1, r2, #5
 80041fa:	69fa      	ldr	r2, [r7, #28]
 80041fc:	440a      	add	r2, r1
 80041fe:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004202:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8004206:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 8004208:	69bb      	ldr	r3, [r7, #24]
 800420a:	015a      	lsls	r2, r3, #5
 800420c:	69fb      	ldr	r3, [r7, #28]
 800420e:	4413      	add	r3, r2
 8004210:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004214:	691a      	ldr	r2, [r3, #16]
 8004216:	8afb      	ldrh	r3, [r7, #22]
 8004218:	075b      	lsls	r3, r3, #29
 800421a:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 800421e:	69b9      	ldr	r1, [r7, #24]
 8004220:	0148      	lsls	r0, r1, #5
 8004222:	69f9      	ldr	r1, [r7, #28]
 8004224:	4401      	add	r1, r0
 8004226:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800422a:	4313      	orrs	r3, r2
 800422c:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800422e:	69bb      	ldr	r3, [r7, #24]
 8004230:	015a      	lsls	r2, r3, #5
 8004232:	69fb      	ldr	r3, [r7, #28]
 8004234:	4413      	add	r3, r2
 8004236:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800423a:	691a      	ldr	r2, [r3, #16]
 800423c:	68bb      	ldr	r3, [r7, #8]
 800423e:	691b      	ldr	r3, [r3, #16]
 8004240:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004244:	69b9      	ldr	r1, [r7, #24]
 8004246:	0148      	lsls	r0, r1, #5
 8004248:	69f9      	ldr	r1, [r7, #28]
 800424a:	4401      	add	r1, r0
 800424c:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8004250:	4313      	orrs	r3, r2
 8004252:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004254:	79fb      	ldrb	r3, [r7, #7]
 8004256:	2b01      	cmp	r3, #1
 8004258:	d14b      	bne.n	80042f2 <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800425a:	68bb      	ldr	r3, [r7, #8]
 800425c:	69db      	ldr	r3, [r3, #28]
 800425e:	2b00      	cmp	r3, #0
 8004260:	d009      	beq.n	8004276 <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004262:	69bb      	ldr	r3, [r7, #24]
 8004264:	015a      	lsls	r2, r3, #5
 8004266:	69fb      	ldr	r3, [r7, #28]
 8004268:	4413      	add	r3, r2
 800426a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800426e:	461a      	mov	r2, r3
 8004270:	68bb      	ldr	r3, [r7, #8]
 8004272:	69db      	ldr	r3, [r3, #28]
 8004274:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8004276:	68bb      	ldr	r3, [r7, #8]
 8004278:	791b      	ldrb	r3, [r3, #4]
 800427a:	2b01      	cmp	r3, #1
 800427c:	d128      	bne.n	80042d0 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800427e:	69fb      	ldr	r3, [r7, #28]
 8004280:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004284:	689b      	ldr	r3, [r3, #8]
 8004286:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800428a:	2b00      	cmp	r3, #0
 800428c:	d110      	bne.n	80042b0 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800428e:	69bb      	ldr	r3, [r7, #24]
 8004290:	015a      	lsls	r2, r3, #5
 8004292:	69fb      	ldr	r3, [r7, #28]
 8004294:	4413      	add	r3, r2
 8004296:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	69ba      	ldr	r2, [r7, #24]
 800429e:	0151      	lsls	r1, r2, #5
 80042a0:	69fa      	ldr	r2, [r7, #28]
 80042a2:	440a      	add	r2, r1
 80042a4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80042a8:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80042ac:	6013      	str	r3, [r2, #0]
 80042ae:	e00f      	b.n	80042d0 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80042b0:	69bb      	ldr	r3, [r7, #24]
 80042b2:	015a      	lsls	r2, r3, #5
 80042b4:	69fb      	ldr	r3, [r7, #28]
 80042b6:	4413      	add	r3, r2
 80042b8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	69ba      	ldr	r2, [r7, #24]
 80042c0:	0151      	lsls	r1, r2, #5
 80042c2:	69fa      	ldr	r2, [r7, #28]
 80042c4:	440a      	add	r2, r1
 80042c6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80042ca:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80042ce:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80042d0:	69bb      	ldr	r3, [r7, #24]
 80042d2:	015a      	lsls	r2, r3, #5
 80042d4:	69fb      	ldr	r3, [r7, #28]
 80042d6:	4413      	add	r3, r2
 80042d8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	69ba      	ldr	r2, [r7, #24]
 80042e0:	0151      	lsls	r1, r2, #5
 80042e2:	69fa      	ldr	r2, [r7, #28]
 80042e4:	440a      	add	r2, r1
 80042e6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80042ea:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80042ee:	6013      	str	r3, [r2, #0]
 80042f0:	e166      	b.n	80045c0 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80042f2:	69bb      	ldr	r3, [r7, #24]
 80042f4:	015a      	lsls	r2, r3, #5
 80042f6:	69fb      	ldr	r3, [r7, #28]
 80042f8:	4413      	add	r3, r2
 80042fa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	69ba      	ldr	r2, [r7, #24]
 8004302:	0151      	lsls	r1, r2, #5
 8004304:	69fa      	ldr	r2, [r7, #28]
 8004306:	440a      	add	r2, r1
 8004308:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800430c:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8004310:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004312:	68bb      	ldr	r3, [r7, #8]
 8004314:	791b      	ldrb	r3, [r3, #4]
 8004316:	2b01      	cmp	r3, #1
 8004318:	d015      	beq.n	8004346 <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800431a:	68bb      	ldr	r3, [r7, #8]
 800431c:	691b      	ldr	r3, [r3, #16]
 800431e:	2b00      	cmp	r3, #0
 8004320:	f000 814e 	beq.w	80045c0 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004324:	69fb      	ldr	r3, [r7, #28]
 8004326:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800432a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800432c:	68bb      	ldr	r3, [r7, #8]
 800432e:	781b      	ldrb	r3, [r3, #0]
 8004330:	f003 030f 	and.w	r3, r3, #15
 8004334:	2101      	movs	r1, #1
 8004336:	fa01 f303 	lsl.w	r3, r1, r3
 800433a:	69f9      	ldr	r1, [r7, #28]
 800433c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004340:	4313      	orrs	r3, r2
 8004342:	634b      	str	r3, [r1, #52]	@ 0x34
 8004344:	e13c      	b.n	80045c0 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004346:	69fb      	ldr	r3, [r7, #28]
 8004348:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800434c:	689b      	ldr	r3, [r3, #8]
 800434e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004352:	2b00      	cmp	r3, #0
 8004354:	d110      	bne.n	8004378 <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004356:	69bb      	ldr	r3, [r7, #24]
 8004358:	015a      	lsls	r2, r3, #5
 800435a:	69fb      	ldr	r3, [r7, #28]
 800435c:	4413      	add	r3, r2
 800435e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	69ba      	ldr	r2, [r7, #24]
 8004366:	0151      	lsls	r1, r2, #5
 8004368:	69fa      	ldr	r2, [r7, #28]
 800436a:	440a      	add	r2, r1
 800436c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004370:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8004374:	6013      	str	r3, [r2, #0]
 8004376:	e00f      	b.n	8004398 <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004378:	69bb      	ldr	r3, [r7, #24]
 800437a:	015a      	lsls	r2, r3, #5
 800437c:	69fb      	ldr	r3, [r7, #28]
 800437e:	4413      	add	r3, r2
 8004380:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	69ba      	ldr	r2, [r7, #24]
 8004388:	0151      	lsls	r1, r2, #5
 800438a:	69fa      	ldr	r2, [r7, #28]
 800438c:	440a      	add	r2, r1
 800438e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004392:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004396:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8004398:	68bb      	ldr	r3, [r7, #8]
 800439a:	68d9      	ldr	r1, [r3, #12]
 800439c:	68bb      	ldr	r3, [r7, #8]
 800439e:	781a      	ldrb	r2, [r3, #0]
 80043a0:	68bb      	ldr	r3, [r7, #8]
 80043a2:	691b      	ldr	r3, [r3, #16]
 80043a4:	b298      	uxth	r0, r3
 80043a6:	79fb      	ldrb	r3, [r7, #7]
 80043a8:	9300      	str	r3, [sp, #0]
 80043aa:	4603      	mov	r3, r0
 80043ac:	68f8      	ldr	r0, [r7, #12]
 80043ae:	f000 f9b9 	bl	8004724 <USB_WritePacket>
 80043b2:	e105      	b.n	80045c0 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80043b4:	69bb      	ldr	r3, [r7, #24]
 80043b6:	015a      	lsls	r2, r3, #5
 80043b8:	69fb      	ldr	r3, [r7, #28]
 80043ba:	4413      	add	r3, r2
 80043bc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80043c0:	691b      	ldr	r3, [r3, #16]
 80043c2:	69ba      	ldr	r2, [r7, #24]
 80043c4:	0151      	lsls	r1, r2, #5
 80043c6:	69fa      	ldr	r2, [r7, #28]
 80043c8:	440a      	add	r2, r1
 80043ca:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80043ce:	0cdb      	lsrs	r3, r3, #19
 80043d0:	04db      	lsls	r3, r3, #19
 80043d2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80043d4:	69bb      	ldr	r3, [r7, #24]
 80043d6:	015a      	lsls	r2, r3, #5
 80043d8:	69fb      	ldr	r3, [r7, #28]
 80043da:	4413      	add	r3, r2
 80043dc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80043e0:	691b      	ldr	r3, [r3, #16]
 80043e2:	69ba      	ldr	r2, [r7, #24]
 80043e4:	0151      	lsls	r1, r2, #5
 80043e6:	69fa      	ldr	r2, [r7, #28]
 80043e8:	440a      	add	r2, r1
 80043ea:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80043ee:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80043f2:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80043f6:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 80043f8:	69bb      	ldr	r3, [r7, #24]
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d132      	bne.n	8004464 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 80043fe:	68bb      	ldr	r3, [r7, #8]
 8004400:	691b      	ldr	r3, [r3, #16]
 8004402:	2b00      	cmp	r3, #0
 8004404:	d003      	beq.n	800440e <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 8004406:	68bb      	ldr	r3, [r7, #8]
 8004408:	689a      	ldr	r2, [r3, #8]
 800440a:	68bb      	ldr	r3, [r7, #8]
 800440c:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 800440e:	68bb      	ldr	r3, [r7, #8]
 8004410:	689a      	ldr	r2, [r3, #8]
 8004412:	68bb      	ldr	r3, [r7, #8]
 8004414:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8004416:	69bb      	ldr	r3, [r7, #24]
 8004418:	015a      	lsls	r2, r3, #5
 800441a:	69fb      	ldr	r3, [r7, #28]
 800441c:	4413      	add	r3, r2
 800441e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004422:	691a      	ldr	r2, [r3, #16]
 8004424:	68bb      	ldr	r3, [r7, #8]
 8004426:	6a1b      	ldr	r3, [r3, #32]
 8004428:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800442c:	69b9      	ldr	r1, [r7, #24]
 800442e:	0148      	lsls	r0, r1, #5
 8004430:	69f9      	ldr	r1, [r7, #28]
 8004432:	4401      	add	r1, r0
 8004434:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8004438:	4313      	orrs	r3, r2
 800443a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800443c:	69bb      	ldr	r3, [r7, #24]
 800443e:	015a      	lsls	r2, r3, #5
 8004440:	69fb      	ldr	r3, [r7, #28]
 8004442:	4413      	add	r3, r2
 8004444:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004448:	691b      	ldr	r3, [r3, #16]
 800444a:	69ba      	ldr	r2, [r7, #24]
 800444c:	0151      	lsls	r1, r2, #5
 800444e:	69fa      	ldr	r2, [r7, #28]
 8004450:	440a      	add	r2, r1
 8004452:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004456:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800445a:	6113      	str	r3, [r2, #16]
 800445c:	e062      	b.n	8004524 <USB_EPStartXfer+0x490>
 800445e:	bf00      	nop
 8004460:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8004464:	68bb      	ldr	r3, [r7, #8]
 8004466:	691b      	ldr	r3, [r3, #16]
 8004468:	2b00      	cmp	r3, #0
 800446a:	d123      	bne.n	80044b4 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800446c:	69bb      	ldr	r3, [r7, #24]
 800446e:	015a      	lsls	r2, r3, #5
 8004470:	69fb      	ldr	r3, [r7, #28]
 8004472:	4413      	add	r3, r2
 8004474:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004478:	691a      	ldr	r2, [r3, #16]
 800447a:	68bb      	ldr	r3, [r7, #8]
 800447c:	689b      	ldr	r3, [r3, #8]
 800447e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004482:	69b9      	ldr	r1, [r7, #24]
 8004484:	0148      	lsls	r0, r1, #5
 8004486:	69f9      	ldr	r1, [r7, #28]
 8004488:	4401      	add	r1, r0
 800448a:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800448e:	4313      	orrs	r3, r2
 8004490:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004492:	69bb      	ldr	r3, [r7, #24]
 8004494:	015a      	lsls	r2, r3, #5
 8004496:	69fb      	ldr	r3, [r7, #28]
 8004498:	4413      	add	r3, r2
 800449a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800449e:	691b      	ldr	r3, [r3, #16]
 80044a0:	69ba      	ldr	r2, [r7, #24]
 80044a2:	0151      	lsls	r1, r2, #5
 80044a4:	69fa      	ldr	r2, [r7, #28]
 80044a6:	440a      	add	r2, r1
 80044a8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80044ac:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80044b0:	6113      	str	r3, [r2, #16]
 80044b2:	e037      	b.n	8004524 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80044b4:	68bb      	ldr	r3, [r7, #8]
 80044b6:	691a      	ldr	r2, [r3, #16]
 80044b8:	68bb      	ldr	r3, [r7, #8]
 80044ba:	689b      	ldr	r3, [r3, #8]
 80044bc:	4413      	add	r3, r2
 80044be:	1e5a      	subs	r2, r3, #1
 80044c0:	68bb      	ldr	r3, [r7, #8]
 80044c2:	689b      	ldr	r3, [r3, #8]
 80044c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80044c8:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 80044ca:	68bb      	ldr	r3, [r7, #8]
 80044cc:	689b      	ldr	r3, [r3, #8]
 80044ce:	8afa      	ldrh	r2, [r7, #22]
 80044d0:	fb03 f202 	mul.w	r2, r3, r2
 80044d4:	68bb      	ldr	r3, [r7, #8]
 80044d6:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80044d8:	69bb      	ldr	r3, [r7, #24]
 80044da:	015a      	lsls	r2, r3, #5
 80044dc:	69fb      	ldr	r3, [r7, #28]
 80044de:	4413      	add	r3, r2
 80044e0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80044e4:	691a      	ldr	r2, [r3, #16]
 80044e6:	8afb      	ldrh	r3, [r7, #22]
 80044e8:	04d9      	lsls	r1, r3, #19
 80044ea:	4b38      	ldr	r3, [pc, #224]	@ (80045cc <USB_EPStartXfer+0x538>)
 80044ec:	400b      	ands	r3, r1
 80044ee:	69b9      	ldr	r1, [r7, #24]
 80044f0:	0148      	lsls	r0, r1, #5
 80044f2:	69f9      	ldr	r1, [r7, #28]
 80044f4:	4401      	add	r1, r0
 80044f6:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80044fa:	4313      	orrs	r3, r2
 80044fc:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80044fe:	69bb      	ldr	r3, [r7, #24]
 8004500:	015a      	lsls	r2, r3, #5
 8004502:	69fb      	ldr	r3, [r7, #28]
 8004504:	4413      	add	r3, r2
 8004506:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800450a:	691a      	ldr	r2, [r3, #16]
 800450c:	68bb      	ldr	r3, [r7, #8]
 800450e:	6a1b      	ldr	r3, [r3, #32]
 8004510:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004514:	69b9      	ldr	r1, [r7, #24]
 8004516:	0148      	lsls	r0, r1, #5
 8004518:	69f9      	ldr	r1, [r7, #28]
 800451a:	4401      	add	r1, r0
 800451c:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8004520:	4313      	orrs	r3, r2
 8004522:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8004524:	79fb      	ldrb	r3, [r7, #7]
 8004526:	2b01      	cmp	r3, #1
 8004528:	d10d      	bne.n	8004546 <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800452a:	68bb      	ldr	r3, [r7, #8]
 800452c:	68db      	ldr	r3, [r3, #12]
 800452e:	2b00      	cmp	r3, #0
 8004530:	d009      	beq.n	8004546 <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004532:	68bb      	ldr	r3, [r7, #8]
 8004534:	68d9      	ldr	r1, [r3, #12]
 8004536:	69bb      	ldr	r3, [r7, #24]
 8004538:	015a      	lsls	r2, r3, #5
 800453a:	69fb      	ldr	r3, [r7, #28]
 800453c:	4413      	add	r3, r2
 800453e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004542:	460a      	mov	r2, r1
 8004544:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8004546:	68bb      	ldr	r3, [r7, #8]
 8004548:	791b      	ldrb	r3, [r3, #4]
 800454a:	2b01      	cmp	r3, #1
 800454c:	d128      	bne.n	80045a0 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800454e:	69fb      	ldr	r3, [r7, #28]
 8004550:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004554:	689b      	ldr	r3, [r3, #8]
 8004556:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800455a:	2b00      	cmp	r3, #0
 800455c:	d110      	bne.n	8004580 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800455e:	69bb      	ldr	r3, [r7, #24]
 8004560:	015a      	lsls	r2, r3, #5
 8004562:	69fb      	ldr	r3, [r7, #28]
 8004564:	4413      	add	r3, r2
 8004566:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	69ba      	ldr	r2, [r7, #24]
 800456e:	0151      	lsls	r1, r2, #5
 8004570:	69fa      	ldr	r2, [r7, #28]
 8004572:	440a      	add	r2, r1
 8004574:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004578:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800457c:	6013      	str	r3, [r2, #0]
 800457e:	e00f      	b.n	80045a0 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8004580:	69bb      	ldr	r3, [r7, #24]
 8004582:	015a      	lsls	r2, r3, #5
 8004584:	69fb      	ldr	r3, [r7, #28]
 8004586:	4413      	add	r3, r2
 8004588:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	69ba      	ldr	r2, [r7, #24]
 8004590:	0151      	lsls	r1, r2, #5
 8004592:	69fa      	ldr	r2, [r7, #28]
 8004594:	440a      	add	r2, r1
 8004596:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800459a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800459e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80045a0:	69bb      	ldr	r3, [r7, #24]
 80045a2:	015a      	lsls	r2, r3, #5
 80045a4:	69fb      	ldr	r3, [r7, #28]
 80045a6:	4413      	add	r3, r2
 80045a8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	69ba      	ldr	r2, [r7, #24]
 80045b0:	0151      	lsls	r1, r2, #5
 80045b2:	69fa      	ldr	r2, [r7, #28]
 80045b4:	440a      	add	r2, r1
 80045b6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80045ba:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80045be:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80045c0:	2300      	movs	r3, #0
}
 80045c2:	4618      	mov	r0, r3
 80045c4:	3720      	adds	r7, #32
 80045c6:	46bd      	mov	sp, r7
 80045c8:	bd80      	pop	{r7, pc}
 80045ca:	bf00      	nop
 80045cc:	1ff80000 	.word	0x1ff80000

080045d0 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80045d0:	b480      	push	{r7}
 80045d2:	b087      	sub	sp, #28
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	6078      	str	r0, [r7, #4]
 80045d8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80045da:	2300      	movs	r3, #0
 80045dc:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80045de:	2300      	movs	r3, #0
 80045e0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80045e6:	683b      	ldr	r3, [r7, #0]
 80045e8:	785b      	ldrb	r3, [r3, #1]
 80045ea:	2b01      	cmp	r3, #1
 80045ec:	d14a      	bne.n	8004684 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80045ee:	683b      	ldr	r3, [r7, #0]
 80045f0:	781b      	ldrb	r3, [r3, #0]
 80045f2:	015a      	lsls	r2, r3, #5
 80045f4:	693b      	ldr	r3, [r7, #16]
 80045f6:	4413      	add	r3, r2
 80045f8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004602:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004606:	f040 8086 	bne.w	8004716 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800460a:	683b      	ldr	r3, [r7, #0]
 800460c:	781b      	ldrb	r3, [r3, #0]
 800460e:	015a      	lsls	r2, r3, #5
 8004610:	693b      	ldr	r3, [r7, #16]
 8004612:	4413      	add	r3, r2
 8004614:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	683a      	ldr	r2, [r7, #0]
 800461c:	7812      	ldrb	r2, [r2, #0]
 800461e:	0151      	lsls	r1, r2, #5
 8004620:	693a      	ldr	r2, [r7, #16]
 8004622:	440a      	add	r2, r1
 8004624:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004628:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800462c:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800462e:	683b      	ldr	r3, [r7, #0]
 8004630:	781b      	ldrb	r3, [r3, #0]
 8004632:	015a      	lsls	r2, r3, #5
 8004634:	693b      	ldr	r3, [r7, #16]
 8004636:	4413      	add	r3, r2
 8004638:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	683a      	ldr	r2, [r7, #0]
 8004640:	7812      	ldrb	r2, [r2, #0]
 8004642:	0151      	lsls	r1, r2, #5
 8004644:	693a      	ldr	r2, [r7, #16]
 8004646:	440a      	add	r2, r1
 8004648:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800464c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004650:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	3301      	adds	r3, #1
 8004656:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	f242 7210 	movw	r2, #10000	@ 0x2710
 800465e:	4293      	cmp	r3, r2
 8004660:	d902      	bls.n	8004668 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8004662:	2301      	movs	r3, #1
 8004664:	75fb      	strb	r3, [r7, #23]
          break;
 8004666:	e056      	b.n	8004716 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8004668:	683b      	ldr	r3, [r7, #0]
 800466a:	781b      	ldrb	r3, [r3, #0]
 800466c:	015a      	lsls	r2, r3, #5
 800466e:	693b      	ldr	r3, [r7, #16]
 8004670:	4413      	add	r3, r2
 8004672:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800467c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004680:	d0e7      	beq.n	8004652 <USB_EPStopXfer+0x82>
 8004682:	e048      	b.n	8004716 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004684:	683b      	ldr	r3, [r7, #0]
 8004686:	781b      	ldrb	r3, [r3, #0]
 8004688:	015a      	lsls	r2, r3, #5
 800468a:	693b      	ldr	r3, [r7, #16]
 800468c:	4413      	add	r3, r2
 800468e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004698:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800469c:	d13b      	bne.n	8004716 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800469e:	683b      	ldr	r3, [r7, #0]
 80046a0:	781b      	ldrb	r3, [r3, #0]
 80046a2:	015a      	lsls	r2, r3, #5
 80046a4:	693b      	ldr	r3, [r7, #16]
 80046a6:	4413      	add	r3, r2
 80046a8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	683a      	ldr	r2, [r7, #0]
 80046b0:	7812      	ldrb	r2, [r2, #0]
 80046b2:	0151      	lsls	r1, r2, #5
 80046b4:	693a      	ldr	r2, [r7, #16]
 80046b6:	440a      	add	r2, r1
 80046b8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80046bc:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80046c0:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80046c2:	683b      	ldr	r3, [r7, #0]
 80046c4:	781b      	ldrb	r3, [r3, #0]
 80046c6:	015a      	lsls	r2, r3, #5
 80046c8:	693b      	ldr	r3, [r7, #16]
 80046ca:	4413      	add	r3, r2
 80046cc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	683a      	ldr	r2, [r7, #0]
 80046d4:	7812      	ldrb	r2, [r2, #0]
 80046d6:	0151      	lsls	r1, r2, #5
 80046d8:	693a      	ldr	r2, [r7, #16]
 80046da:	440a      	add	r2, r1
 80046dc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80046e0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80046e4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	3301      	adds	r3, #1
 80046ea:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	f242 7210 	movw	r2, #10000	@ 0x2710
 80046f2:	4293      	cmp	r3, r2
 80046f4:	d902      	bls.n	80046fc <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80046f6:	2301      	movs	r3, #1
 80046f8:	75fb      	strb	r3, [r7, #23]
          break;
 80046fa:	e00c      	b.n	8004716 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80046fc:	683b      	ldr	r3, [r7, #0]
 80046fe:	781b      	ldrb	r3, [r3, #0]
 8004700:	015a      	lsls	r2, r3, #5
 8004702:	693b      	ldr	r3, [r7, #16]
 8004704:	4413      	add	r3, r2
 8004706:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004710:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004714:	d0e7      	beq.n	80046e6 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8004716:	7dfb      	ldrb	r3, [r7, #23]
}
 8004718:	4618      	mov	r0, r3
 800471a:	371c      	adds	r7, #28
 800471c:	46bd      	mov	sp, r7
 800471e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004722:	4770      	bx	lr

08004724 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8004724:	b480      	push	{r7}
 8004726:	b089      	sub	sp, #36	@ 0x24
 8004728:	af00      	add	r7, sp, #0
 800472a:	60f8      	str	r0, [r7, #12]
 800472c:	60b9      	str	r1, [r7, #8]
 800472e:	4611      	mov	r1, r2
 8004730:	461a      	mov	r2, r3
 8004732:	460b      	mov	r3, r1
 8004734:	71fb      	strb	r3, [r7, #7]
 8004736:	4613      	mov	r3, r2
 8004738:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800473e:	68bb      	ldr	r3, [r7, #8]
 8004740:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8004742:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8004746:	2b00      	cmp	r3, #0
 8004748:	d123      	bne.n	8004792 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800474a:	88bb      	ldrh	r3, [r7, #4]
 800474c:	3303      	adds	r3, #3
 800474e:	089b      	lsrs	r3, r3, #2
 8004750:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8004752:	2300      	movs	r3, #0
 8004754:	61bb      	str	r3, [r7, #24]
 8004756:	e018      	b.n	800478a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8004758:	79fb      	ldrb	r3, [r7, #7]
 800475a:	031a      	lsls	r2, r3, #12
 800475c:	697b      	ldr	r3, [r7, #20]
 800475e:	4413      	add	r3, r2
 8004760:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004764:	461a      	mov	r2, r3
 8004766:	69fb      	ldr	r3, [r7, #28]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	6013      	str	r3, [r2, #0]
      pSrc++;
 800476c:	69fb      	ldr	r3, [r7, #28]
 800476e:	3301      	adds	r3, #1
 8004770:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004772:	69fb      	ldr	r3, [r7, #28]
 8004774:	3301      	adds	r3, #1
 8004776:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004778:	69fb      	ldr	r3, [r7, #28]
 800477a:	3301      	adds	r3, #1
 800477c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800477e:	69fb      	ldr	r3, [r7, #28]
 8004780:	3301      	adds	r3, #1
 8004782:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8004784:	69bb      	ldr	r3, [r7, #24]
 8004786:	3301      	adds	r3, #1
 8004788:	61bb      	str	r3, [r7, #24]
 800478a:	69ba      	ldr	r2, [r7, #24]
 800478c:	693b      	ldr	r3, [r7, #16]
 800478e:	429a      	cmp	r2, r3
 8004790:	d3e2      	bcc.n	8004758 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8004792:	2300      	movs	r3, #0
}
 8004794:	4618      	mov	r0, r3
 8004796:	3724      	adds	r7, #36	@ 0x24
 8004798:	46bd      	mov	sp, r7
 800479a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800479e:	4770      	bx	lr

080047a0 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80047a0:	b480      	push	{r7}
 80047a2:	b08b      	sub	sp, #44	@ 0x2c
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	60f8      	str	r0, [r7, #12]
 80047a8:	60b9      	str	r1, [r7, #8]
 80047aa:	4613      	mov	r3, r2
 80047ac:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80047b2:	68bb      	ldr	r3, [r7, #8]
 80047b4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80047b6:	88fb      	ldrh	r3, [r7, #6]
 80047b8:	089b      	lsrs	r3, r3, #2
 80047ba:	b29b      	uxth	r3, r3
 80047bc:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80047be:	88fb      	ldrh	r3, [r7, #6]
 80047c0:	f003 0303 	and.w	r3, r3, #3
 80047c4:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80047c6:	2300      	movs	r3, #0
 80047c8:	623b      	str	r3, [r7, #32]
 80047ca:	e014      	b.n	80047f6 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80047cc:	69bb      	ldr	r3, [r7, #24]
 80047ce:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80047d2:	681a      	ldr	r2, [r3, #0]
 80047d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047d6:	601a      	str	r2, [r3, #0]
    pDest++;
 80047d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047da:	3301      	adds	r3, #1
 80047dc:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80047de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047e0:	3301      	adds	r3, #1
 80047e2:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80047e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047e6:	3301      	adds	r3, #1
 80047e8:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80047ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047ec:	3301      	adds	r3, #1
 80047ee:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 80047f0:	6a3b      	ldr	r3, [r7, #32]
 80047f2:	3301      	adds	r3, #1
 80047f4:	623b      	str	r3, [r7, #32]
 80047f6:	6a3a      	ldr	r2, [r7, #32]
 80047f8:	697b      	ldr	r3, [r7, #20]
 80047fa:	429a      	cmp	r2, r3
 80047fc:	d3e6      	bcc.n	80047cc <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80047fe:	8bfb      	ldrh	r3, [r7, #30]
 8004800:	2b00      	cmp	r3, #0
 8004802:	d01e      	beq.n	8004842 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8004804:	2300      	movs	r3, #0
 8004806:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8004808:	69bb      	ldr	r3, [r7, #24]
 800480a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800480e:	461a      	mov	r2, r3
 8004810:	f107 0310 	add.w	r3, r7, #16
 8004814:	6812      	ldr	r2, [r2, #0]
 8004816:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8004818:	693a      	ldr	r2, [r7, #16]
 800481a:	6a3b      	ldr	r3, [r7, #32]
 800481c:	b2db      	uxtb	r3, r3
 800481e:	00db      	lsls	r3, r3, #3
 8004820:	fa22 f303 	lsr.w	r3, r2, r3
 8004824:	b2da      	uxtb	r2, r3
 8004826:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004828:	701a      	strb	r2, [r3, #0]
      i++;
 800482a:	6a3b      	ldr	r3, [r7, #32]
 800482c:	3301      	adds	r3, #1
 800482e:	623b      	str	r3, [r7, #32]
      pDest++;
 8004830:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004832:	3301      	adds	r3, #1
 8004834:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8004836:	8bfb      	ldrh	r3, [r7, #30]
 8004838:	3b01      	subs	r3, #1
 800483a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800483c:	8bfb      	ldrh	r3, [r7, #30]
 800483e:	2b00      	cmp	r3, #0
 8004840:	d1ea      	bne.n	8004818 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8004842:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8004844:	4618      	mov	r0, r3
 8004846:	372c      	adds	r7, #44	@ 0x2c
 8004848:	46bd      	mov	sp, r7
 800484a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800484e:	4770      	bx	lr

08004850 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8004850:	b480      	push	{r7}
 8004852:	b085      	sub	sp, #20
 8004854:	af00      	add	r7, sp, #0
 8004856:	6078      	str	r0, [r7, #4]
 8004858:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800485e:	683b      	ldr	r3, [r7, #0]
 8004860:	781b      	ldrb	r3, [r3, #0]
 8004862:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004864:	683b      	ldr	r3, [r7, #0]
 8004866:	785b      	ldrb	r3, [r3, #1]
 8004868:	2b01      	cmp	r3, #1
 800486a:	d12c      	bne.n	80048c6 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800486c:	68bb      	ldr	r3, [r7, #8]
 800486e:	015a      	lsls	r2, r3, #5
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	4413      	add	r3, r2
 8004874:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	2b00      	cmp	r3, #0
 800487c:	db12      	blt.n	80048a4 <USB_EPSetStall+0x54>
 800487e:	68bb      	ldr	r3, [r7, #8]
 8004880:	2b00      	cmp	r3, #0
 8004882:	d00f      	beq.n	80048a4 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8004884:	68bb      	ldr	r3, [r7, #8]
 8004886:	015a      	lsls	r2, r3, #5
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	4413      	add	r3, r2
 800488c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	68ba      	ldr	r2, [r7, #8]
 8004894:	0151      	lsls	r1, r2, #5
 8004896:	68fa      	ldr	r2, [r7, #12]
 8004898:	440a      	add	r2, r1
 800489a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800489e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80048a2:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80048a4:	68bb      	ldr	r3, [r7, #8]
 80048a6:	015a      	lsls	r2, r3, #5
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	4413      	add	r3, r2
 80048ac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	68ba      	ldr	r2, [r7, #8]
 80048b4:	0151      	lsls	r1, r2, #5
 80048b6:	68fa      	ldr	r2, [r7, #12]
 80048b8:	440a      	add	r2, r1
 80048ba:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80048be:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80048c2:	6013      	str	r3, [r2, #0]
 80048c4:	e02b      	b.n	800491e <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80048c6:	68bb      	ldr	r3, [r7, #8]
 80048c8:	015a      	lsls	r2, r3, #5
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	4413      	add	r3, r2
 80048ce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	db12      	blt.n	80048fe <USB_EPSetStall+0xae>
 80048d8:	68bb      	ldr	r3, [r7, #8]
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d00f      	beq.n	80048fe <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80048de:	68bb      	ldr	r3, [r7, #8]
 80048e0:	015a      	lsls	r2, r3, #5
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	4413      	add	r3, r2
 80048e6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	68ba      	ldr	r2, [r7, #8]
 80048ee:	0151      	lsls	r1, r2, #5
 80048f0:	68fa      	ldr	r2, [r7, #12]
 80048f2:	440a      	add	r2, r1
 80048f4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80048f8:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80048fc:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80048fe:	68bb      	ldr	r3, [r7, #8]
 8004900:	015a      	lsls	r2, r3, #5
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	4413      	add	r3, r2
 8004906:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	68ba      	ldr	r2, [r7, #8]
 800490e:	0151      	lsls	r1, r2, #5
 8004910:	68fa      	ldr	r2, [r7, #12]
 8004912:	440a      	add	r2, r1
 8004914:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004918:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800491c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800491e:	2300      	movs	r3, #0
}
 8004920:	4618      	mov	r0, r3
 8004922:	3714      	adds	r7, #20
 8004924:	46bd      	mov	sp, r7
 8004926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800492a:	4770      	bx	lr

0800492c <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800492c:	b480      	push	{r7}
 800492e:	b085      	sub	sp, #20
 8004930:	af00      	add	r7, sp, #0
 8004932:	6078      	str	r0, [r7, #4]
 8004934:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800493a:	683b      	ldr	r3, [r7, #0]
 800493c:	781b      	ldrb	r3, [r3, #0]
 800493e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004940:	683b      	ldr	r3, [r7, #0]
 8004942:	785b      	ldrb	r3, [r3, #1]
 8004944:	2b01      	cmp	r3, #1
 8004946:	d128      	bne.n	800499a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004948:	68bb      	ldr	r3, [r7, #8]
 800494a:	015a      	lsls	r2, r3, #5
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	4413      	add	r3, r2
 8004950:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	68ba      	ldr	r2, [r7, #8]
 8004958:	0151      	lsls	r1, r2, #5
 800495a:	68fa      	ldr	r2, [r7, #12]
 800495c:	440a      	add	r2, r1
 800495e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004962:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004966:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004968:	683b      	ldr	r3, [r7, #0]
 800496a:	791b      	ldrb	r3, [r3, #4]
 800496c:	2b03      	cmp	r3, #3
 800496e:	d003      	beq.n	8004978 <USB_EPClearStall+0x4c>
 8004970:	683b      	ldr	r3, [r7, #0]
 8004972:	791b      	ldrb	r3, [r3, #4]
 8004974:	2b02      	cmp	r3, #2
 8004976:	d138      	bne.n	80049ea <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004978:	68bb      	ldr	r3, [r7, #8]
 800497a:	015a      	lsls	r2, r3, #5
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	4413      	add	r3, r2
 8004980:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	68ba      	ldr	r2, [r7, #8]
 8004988:	0151      	lsls	r1, r2, #5
 800498a:	68fa      	ldr	r2, [r7, #12]
 800498c:	440a      	add	r2, r1
 800498e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004992:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004996:	6013      	str	r3, [r2, #0]
 8004998:	e027      	b.n	80049ea <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800499a:	68bb      	ldr	r3, [r7, #8]
 800499c:	015a      	lsls	r2, r3, #5
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	4413      	add	r3, r2
 80049a2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	68ba      	ldr	r2, [r7, #8]
 80049aa:	0151      	lsls	r1, r2, #5
 80049ac:	68fa      	ldr	r2, [r7, #12]
 80049ae:	440a      	add	r2, r1
 80049b0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80049b4:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80049b8:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80049ba:	683b      	ldr	r3, [r7, #0]
 80049bc:	791b      	ldrb	r3, [r3, #4]
 80049be:	2b03      	cmp	r3, #3
 80049c0:	d003      	beq.n	80049ca <USB_EPClearStall+0x9e>
 80049c2:	683b      	ldr	r3, [r7, #0]
 80049c4:	791b      	ldrb	r3, [r3, #4]
 80049c6:	2b02      	cmp	r3, #2
 80049c8:	d10f      	bne.n	80049ea <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80049ca:	68bb      	ldr	r3, [r7, #8]
 80049cc:	015a      	lsls	r2, r3, #5
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	4413      	add	r3, r2
 80049d2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	68ba      	ldr	r2, [r7, #8]
 80049da:	0151      	lsls	r1, r2, #5
 80049dc:	68fa      	ldr	r2, [r7, #12]
 80049de:	440a      	add	r2, r1
 80049e0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80049e4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80049e8:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80049ea:	2300      	movs	r3, #0
}
 80049ec:	4618      	mov	r0, r3
 80049ee:	3714      	adds	r7, #20
 80049f0:	46bd      	mov	sp, r7
 80049f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f6:	4770      	bx	lr

080049f8 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80049f8:	b480      	push	{r7}
 80049fa:	b085      	sub	sp, #20
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	6078      	str	r0, [r7, #4]
 8004a00:	460b      	mov	r3, r1
 8004a02:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	68fa      	ldr	r2, [r7, #12]
 8004a12:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004a16:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8004a1a:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004a22:	681a      	ldr	r2, [r3, #0]
 8004a24:	78fb      	ldrb	r3, [r7, #3]
 8004a26:	011b      	lsls	r3, r3, #4
 8004a28:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8004a2c:	68f9      	ldr	r1, [r7, #12]
 8004a2e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004a32:	4313      	orrs	r3, r2
 8004a34:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8004a36:	2300      	movs	r3, #0
}
 8004a38:	4618      	mov	r0, r3
 8004a3a:	3714      	adds	r7, #20
 8004a3c:	46bd      	mov	sp, r7
 8004a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a42:	4770      	bx	lr

08004a44 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8004a44:	b480      	push	{r7}
 8004a46:	b085      	sub	sp, #20
 8004a48:	af00      	add	r7, sp, #0
 8004a4a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	68fa      	ldr	r2, [r7, #12]
 8004a5a:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8004a5e:	f023 0303 	bic.w	r3, r3, #3
 8004a62:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004a6a:	685b      	ldr	r3, [r3, #4]
 8004a6c:	68fa      	ldr	r2, [r7, #12]
 8004a6e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004a72:	f023 0302 	bic.w	r3, r3, #2
 8004a76:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004a78:	2300      	movs	r3, #0
}
 8004a7a:	4618      	mov	r0, r3
 8004a7c:	3714      	adds	r7, #20
 8004a7e:	46bd      	mov	sp, r7
 8004a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a84:	4770      	bx	lr

08004a86 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8004a86:	b480      	push	{r7}
 8004a88:	b085      	sub	sp, #20
 8004a8a:	af00      	add	r7, sp, #0
 8004a8c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	68fa      	ldr	r2, [r7, #12]
 8004a9c:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8004aa0:	f023 0303 	bic.w	r3, r3, #3
 8004aa4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004aac:	685b      	ldr	r3, [r3, #4]
 8004aae:	68fa      	ldr	r2, [r7, #12]
 8004ab0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004ab4:	f043 0302 	orr.w	r3, r3, #2
 8004ab8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004aba:	2300      	movs	r3, #0
}
 8004abc:	4618      	mov	r0, r3
 8004abe:	3714      	adds	r7, #20
 8004ac0:	46bd      	mov	sp, r7
 8004ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac6:	4770      	bx	lr

08004ac8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8004ac8:	b480      	push	{r7}
 8004aca:	b085      	sub	sp, #20
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	695b      	ldr	r3, [r3, #20]
 8004ad4:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	699b      	ldr	r3, [r3, #24]
 8004ada:	68fa      	ldr	r2, [r7, #12]
 8004adc:	4013      	ands	r3, r2
 8004ade:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8004ae0:	68fb      	ldr	r3, [r7, #12]
}
 8004ae2:	4618      	mov	r0, r3
 8004ae4:	3714      	adds	r7, #20
 8004ae6:	46bd      	mov	sp, r7
 8004ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aec:	4770      	bx	lr

08004aee <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8004aee:	b480      	push	{r7}
 8004af0:	b085      	sub	sp, #20
 8004af2:	af00      	add	r7, sp, #0
 8004af4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004b00:	699b      	ldr	r3, [r3, #24]
 8004b02:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004b0a:	69db      	ldr	r3, [r3, #28]
 8004b0c:	68ba      	ldr	r2, [r7, #8]
 8004b0e:	4013      	ands	r3, r2
 8004b10:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8004b12:	68bb      	ldr	r3, [r7, #8]
 8004b14:	0c1b      	lsrs	r3, r3, #16
}
 8004b16:	4618      	mov	r0, r3
 8004b18:	3714      	adds	r7, #20
 8004b1a:	46bd      	mov	sp, r7
 8004b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b20:	4770      	bx	lr

08004b22 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8004b22:	b480      	push	{r7}
 8004b24:	b085      	sub	sp, #20
 8004b26:	af00      	add	r7, sp, #0
 8004b28:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004b34:	699b      	ldr	r3, [r3, #24]
 8004b36:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004b3e:	69db      	ldr	r3, [r3, #28]
 8004b40:	68ba      	ldr	r2, [r7, #8]
 8004b42:	4013      	ands	r3, r2
 8004b44:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8004b46:	68bb      	ldr	r3, [r7, #8]
 8004b48:	b29b      	uxth	r3, r3
}
 8004b4a:	4618      	mov	r0, r3
 8004b4c:	3714      	adds	r7, #20
 8004b4e:	46bd      	mov	sp, r7
 8004b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b54:	4770      	bx	lr

08004b56 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004b56:	b480      	push	{r7}
 8004b58:	b085      	sub	sp, #20
 8004b5a:	af00      	add	r7, sp, #0
 8004b5c:	6078      	str	r0, [r7, #4]
 8004b5e:	460b      	mov	r3, r1
 8004b60:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8004b66:	78fb      	ldrb	r3, [r7, #3]
 8004b68:	015a      	lsls	r2, r3, #5
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	4413      	add	r3, r2
 8004b6e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004b72:	689b      	ldr	r3, [r3, #8]
 8004b74:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004b7c:	695b      	ldr	r3, [r3, #20]
 8004b7e:	68ba      	ldr	r2, [r7, #8]
 8004b80:	4013      	ands	r3, r2
 8004b82:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004b84:	68bb      	ldr	r3, [r7, #8]
}
 8004b86:	4618      	mov	r0, r3
 8004b88:	3714      	adds	r7, #20
 8004b8a:	46bd      	mov	sp, r7
 8004b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b90:	4770      	bx	lr

08004b92 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004b92:	b480      	push	{r7}
 8004b94:	b087      	sub	sp, #28
 8004b96:	af00      	add	r7, sp, #0
 8004b98:	6078      	str	r0, [r7, #4]
 8004b9a:	460b      	mov	r3, r1
 8004b9c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8004ba2:	697b      	ldr	r3, [r7, #20]
 8004ba4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004ba8:	691b      	ldr	r3, [r3, #16]
 8004baa:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8004bac:	697b      	ldr	r3, [r7, #20]
 8004bae:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004bb2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004bb4:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8004bb6:	78fb      	ldrb	r3, [r7, #3]
 8004bb8:	f003 030f 	and.w	r3, r3, #15
 8004bbc:	68fa      	ldr	r2, [r7, #12]
 8004bbe:	fa22 f303 	lsr.w	r3, r2, r3
 8004bc2:	01db      	lsls	r3, r3, #7
 8004bc4:	b2db      	uxtb	r3, r3
 8004bc6:	693a      	ldr	r2, [r7, #16]
 8004bc8:	4313      	orrs	r3, r2
 8004bca:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8004bcc:	78fb      	ldrb	r3, [r7, #3]
 8004bce:	015a      	lsls	r2, r3, #5
 8004bd0:	697b      	ldr	r3, [r7, #20]
 8004bd2:	4413      	add	r3, r2
 8004bd4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004bd8:	689b      	ldr	r3, [r3, #8]
 8004bda:	693a      	ldr	r2, [r7, #16]
 8004bdc:	4013      	ands	r3, r2
 8004bde:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004be0:	68bb      	ldr	r3, [r7, #8]
}
 8004be2:	4618      	mov	r0, r3
 8004be4:	371c      	adds	r7, #28
 8004be6:	46bd      	mov	sp, r7
 8004be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bec:	4770      	bx	lr

08004bee <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8004bee:	b480      	push	{r7}
 8004bf0:	b083      	sub	sp, #12
 8004bf2:	af00      	add	r7, sp, #0
 8004bf4:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	695b      	ldr	r3, [r3, #20]
 8004bfa:	f003 0301 	and.w	r3, r3, #1
}
 8004bfe:	4618      	mov	r0, r3
 8004c00:	370c      	adds	r7, #12
 8004c02:	46bd      	mov	sp, r7
 8004c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c08:	4770      	bx	lr

08004c0a <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8004c0a:	b480      	push	{r7}
 8004c0c:	b085      	sub	sp, #20
 8004c0e:	af00      	add	r7, sp, #0
 8004c10:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	68fa      	ldr	r2, [r7, #12]
 8004c20:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004c24:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8004c28:	f023 0307 	bic.w	r3, r3, #7
 8004c2c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004c34:	685b      	ldr	r3, [r3, #4]
 8004c36:	68fa      	ldr	r2, [r7, #12]
 8004c38:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004c3c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004c40:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004c42:	2300      	movs	r3, #0
}
 8004c44:	4618      	mov	r0, r3
 8004c46:	3714      	adds	r7, #20
 8004c48:	46bd      	mov	sp, r7
 8004c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c4e:	4770      	bx	lr

08004c50 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8004c50:	b480      	push	{r7}
 8004c52:	b087      	sub	sp, #28
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	60f8      	str	r0, [r7, #12]
 8004c58:	460b      	mov	r3, r1
 8004c5a:	607a      	str	r2, [r7, #4]
 8004c5c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	333c      	adds	r3, #60	@ 0x3c
 8004c66:	3304      	adds	r3, #4
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8004c6c:	693b      	ldr	r3, [r7, #16]
 8004c6e:	4a26      	ldr	r2, [pc, #152]	@ (8004d08 <USB_EP0_OutStart+0xb8>)
 8004c70:	4293      	cmp	r3, r2
 8004c72:	d90a      	bls.n	8004c8a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004c74:	697b      	ldr	r3, [r7, #20]
 8004c76:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004c80:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004c84:	d101      	bne.n	8004c8a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8004c86:	2300      	movs	r3, #0
 8004c88:	e037      	b.n	8004cfa <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8004c8a:	697b      	ldr	r3, [r7, #20]
 8004c8c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004c90:	461a      	mov	r2, r3
 8004c92:	2300      	movs	r3, #0
 8004c94:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004c96:	697b      	ldr	r3, [r7, #20]
 8004c98:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004c9c:	691b      	ldr	r3, [r3, #16]
 8004c9e:	697a      	ldr	r2, [r7, #20]
 8004ca0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004ca4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004ca8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8004caa:	697b      	ldr	r3, [r7, #20]
 8004cac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004cb0:	691b      	ldr	r3, [r3, #16]
 8004cb2:	697a      	ldr	r2, [r7, #20]
 8004cb4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004cb8:	f043 0318 	orr.w	r3, r3, #24
 8004cbc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8004cbe:	697b      	ldr	r3, [r7, #20]
 8004cc0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004cc4:	691b      	ldr	r3, [r3, #16]
 8004cc6:	697a      	ldr	r2, [r7, #20]
 8004cc8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004ccc:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8004cd0:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8004cd2:	7afb      	ldrb	r3, [r7, #11]
 8004cd4:	2b01      	cmp	r3, #1
 8004cd6:	d10f      	bne.n	8004cf8 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8004cd8:	697b      	ldr	r3, [r7, #20]
 8004cda:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004cde:	461a      	mov	r2, r3
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8004ce4:	697b      	ldr	r3, [r7, #20]
 8004ce6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	697a      	ldr	r2, [r7, #20]
 8004cee:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004cf2:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8004cf6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004cf8:	2300      	movs	r3, #0
}
 8004cfa:	4618      	mov	r0, r3
 8004cfc:	371c      	adds	r7, #28
 8004cfe:	46bd      	mov	sp, r7
 8004d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d04:	4770      	bx	lr
 8004d06:	bf00      	nop
 8004d08:	4f54300a 	.word	0x4f54300a

08004d0c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004d0c:	b480      	push	{r7}
 8004d0e:	b085      	sub	sp, #20
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004d14:	2300      	movs	r3, #0
 8004d16:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	3301      	adds	r3, #1
 8004d1c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004d24:	d901      	bls.n	8004d2a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004d26:	2303      	movs	r3, #3
 8004d28:	e01b      	b.n	8004d62 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	691b      	ldr	r3, [r3, #16]
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	daf2      	bge.n	8004d18 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004d32:	2300      	movs	r3, #0
 8004d34:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	691b      	ldr	r3, [r3, #16]
 8004d3a:	f043 0201 	orr.w	r2, r3, #1
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	3301      	adds	r3, #1
 8004d46:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004d4e:	d901      	bls.n	8004d54 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004d50:	2303      	movs	r3, #3
 8004d52:	e006      	b.n	8004d62 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	691b      	ldr	r3, [r3, #16]
 8004d58:	f003 0301 	and.w	r3, r3, #1
 8004d5c:	2b01      	cmp	r3, #1
 8004d5e:	d0f0      	beq.n	8004d42 <USB_CoreReset+0x36>

  return HAL_OK;
 8004d60:	2300      	movs	r3, #0
}
 8004d62:	4618      	mov	r0, r3
 8004d64:	3714      	adds	r7, #20
 8004d66:	46bd      	mov	sp, r7
 8004d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d6c:	4770      	bx	lr
	...

08004d70 <USBD_CUSTOM_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004d70:	b580      	push	{r7, lr}
 8004d72:	b084      	sub	sp, #16
 8004d74:	af00      	add	r7, sp, #0
 8004d76:	6078      	str	r0, [r7, #4]
 8004d78:	460b      	mov	r3, r1
 8004d7a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)USBD_malloc(sizeof(USBD_CUSTOM_HID_HandleTypeDef));
 8004d7c:	2054      	movs	r0, #84	@ 0x54
 8004d7e:	f002 fbcf 	bl	8007520 <USBD_static_malloc>
 8004d82:	60f8      	str	r0, [r7, #12]

  if (hhid == NULL)
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d109      	bne.n	8004d9e <USBD_CUSTOM_HID_Init+0x2e>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	32b0      	adds	r2, #176	@ 0xb0
 8004d94:	2100      	movs	r1, #0
 8004d96:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8004d9a:	2302      	movs	r3, #2
 8004d9c:	e08b      	b.n	8004eb6 <USBD_CUSTOM_HID_Init+0x146>
  }

  pdev->pClassDataCmsit[pdev->classId] = (void *)hhid;
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	32b0      	adds	r2, #176	@ 0xb0
 8004da8:	68f9      	ldr	r1, [r7, #12]
 8004daa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	32b0      	adds	r2, #176	@ 0xb0
 8004db8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  /* Get the Endpoints addresses allocated for this class instance */
  CUSTOMHIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
  CUSTOMHIDOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	7c1b      	ldrb	r3, [r3, #16]
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d11b      	bne.n	8004e02 <USBD_CUSTOM_HID_Init+0x92>
  {
    pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].bInterval = CUSTOM_HID_HS_BINTERVAL;
 8004dca:	4b3d      	ldr	r3, [pc, #244]	@ (8004ec0 <USBD_CUSTOM_HID_Init+0x150>)
 8004dcc:	781b      	ldrb	r3, [r3, #0]
 8004dce:	f003 020f 	and.w	r2, r3, #15
 8004dd2:	6879      	ldr	r1, [r7, #4]
 8004dd4:	4613      	mov	r3, r2
 8004dd6:	009b      	lsls	r3, r3, #2
 8004dd8:	4413      	add	r3, r2
 8004dda:	009b      	lsls	r3, r3, #2
 8004ddc:	440b      	add	r3, r1
 8004dde:	3326      	adds	r3, #38	@ 0x26
 8004de0:	2205      	movs	r2, #5
 8004de2:	801a      	strh	r2, [r3, #0]
    pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].bInterval = CUSTOM_HID_HS_BINTERVAL;
 8004de4:	4b37      	ldr	r3, [pc, #220]	@ (8004ec4 <USBD_CUSTOM_HID_Init+0x154>)
 8004de6:	781b      	ldrb	r3, [r3, #0]
 8004de8:	f003 020f 	and.w	r2, r3, #15
 8004dec:	6879      	ldr	r1, [r7, #4]
 8004dee:	4613      	mov	r3, r2
 8004df0:	009b      	lsls	r3, r3, #2
 8004df2:	4413      	add	r3, r2
 8004df4:	009b      	lsls	r3, r3, #2
 8004df6:	440b      	add	r3, r1
 8004df8:	f503 73b3 	add.w	r3, r3, #358	@ 0x166
 8004dfc:	2205      	movs	r2, #5
 8004dfe:	801a      	strh	r2, [r3, #0]
 8004e00:	e01a      	b.n	8004e38 <USBD_CUSTOM_HID_Init+0xc8>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].bInterval = CUSTOM_HID_FS_BINTERVAL;
 8004e02:	4b2f      	ldr	r3, [pc, #188]	@ (8004ec0 <USBD_CUSTOM_HID_Init+0x150>)
 8004e04:	781b      	ldrb	r3, [r3, #0]
 8004e06:	f003 020f 	and.w	r2, r3, #15
 8004e0a:	6879      	ldr	r1, [r7, #4]
 8004e0c:	4613      	mov	r3, r2
 8004e0e:	009b      	lsls	r3, r3, #2
 8004e10:	4413      	add	r3, r2
 8004e12:	009b      	lsls	r3, r3, #2
 8004e14:	440b      	add	r3, r1
 8004e16:	3326      	adds	r3, #38	@ 0x26
 8004e18:	2205      	movs	r2, #5
 8004e1a:	801a      	strh	r2, [r3, #0]
    pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].bInterval = CUSTOM_HID_FS_BINTERVAL;
 8004e1c:	4b29      	ldr	r3, [pc, #164]	@ (8004ec4 <USBD_CUSTOM_HID_Init+0x154>)
 8004e1e:	781b      	ldrb	r3, [r3, #0]
 8004e20:	f003 020f 	and.w	r2, r3, #15
 8004e24:	6879      	ldr	r1, [r7, #4]
 8004e26:	4613      	mov	r3, r2
 8004e28:	009b      	lsls	r3, r3, #2
 8004e2a:	4413      	add	r3, r2
 8004e2c:	009b      	lsls	r3, r3, #2
 8004e2e:	440b      	add	r3, r1
 8004e30:	f503 73b3 	add.w	r3, r3, #358	@ 0x166
 8004e34:	2205      	movs	r2, #5
 8004e36:	801a      	strh	r2, [r3, #0]
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, CUSTOMHIDInEpAdd, USBD_EP_TYPE_INTR,
 8004e38:	4b21      	ldr	r3, [pc, #132]	@ (8004ec0 <USBD_CUSTOM_HID_Init+0x150>)
 8004e3a:	7819      	ldrb	r1, [r3, #0]
 8004e3c:	2302      	movs	r3, #2
 8004e3e:	2203      	movs	r2, #3
 8004e40:	6878      	ldr	r0, [r7, #4]
 8004e42:	f002 fa5c 	bl	80072fe <USBD_LL_OpenEP>
                       CUSTOM_HID_EPIN_SIZE);

  pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].is_used = 1U;
 8004e46:	4b1e      	ldr	r3, [pc, #120]	@ (8004ec0 <USBD_CUSTOM_HID_Init+0x150>)
 8004e48:	781b      	ldrb	r3, [r3, #0]
 8004e4a:	f003 020f 	and.w	r2, r3, #15
 8004e4e:	6879      	ldr	r1, [r7, #4]
 8004e50:	4613      	mov	r3, r2
 8004e52:	009b      	lsls	r3, r3, #2
 8004e54:	4413      	add	r3, r2
 8004e56:	009b      	lsls	r3, r3, #2
 8004e58:	440b      	add	r3, r1
 8004e5a:	3324      	adds	r3, #36	@ 0x24
 8004e5c:	2201      	movs	r2, #1
 8004e5e:	801a      	strh	r2, [r3, #0]

  /* Open EP OUT */
  (void)USBD_LL_OpenEP(pdev, CUSTOMHIDOutEpAdd, USBD_EP_TYPE_INTR,
 8004e60:	4b18      	ldr	r3, [pc, #96]	@ (8004ec4 <USBD_CUSTOM_HID_Init+0x154>)
 8004e62:	7819      	ldrb	r1, [r3, #0]
 8004e64:	2302      	movs	r3, #2
 8004e66:	2203      	movs	r2, #3
 8004e68:	6878      	ldr	r0, [r7, #4]
 8004e6a:	f002 fa48 	bl	80072fe <USBD_LL_OpenEP>
                       CUSTOM_HID_EPOUT_SIZE);

  pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].is_used = 1U;
 8004e6e:	4b15      	ldr	r3, [pc, #84]	@ (8004ec4 <USBD_CUSTOM_HID_Init+0x154>)
 8004e70:	781b      	ldrb	r3, [r3, #0]
 8004e72:	f003 020f 	and.w	r2, r3, #15
 8004e76:	6879      	ldr	r1, [r7, #4]
 8004e78:	4613      	mov	r3, r2
 8004e7a:	009b      	lsls	r3, r3, #2
 8004e7c:	4413      	add	r3, r2
 8004e7e:	009b      	lsls	r3, r3, #2
 8004e80:	440b      	add	r3, r1
 8004e82:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8004e86:	2201      	movs	r2, #1
 8004e88:	801a      	strh	r2, [r3, #0]

  hhid->state = CUSTOM_HID_IDLE;
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	2200      	movs	r2, #0
 8004e8e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8004e98:	687a      	ldr	r2, [r7, #4]
 8004e9a:	33b0      	adds	r3, #176	@ 0xb0
 8004e9c:	009b      	lsls	r3, r3, #2
 8004e9e:	4413      	add	r3, r2
 8004ea0:	685b      	ldr	r3, [r3, #4]
 8004ea2:	685b      	ldr	r3, [r3, #4]
 8004ea4:	4798      	blx	r3

#ifndef USBD_CUSTOMHID_OUT_PREPARE_RECEIVE_DISABLED
  /* Prepare Out endpoint to receive 1st packet */
  (void)USBD_LL_PrepareReceive(pdev, CUSTOMHIDOutEpAdd, hhid->Report_buf,
 8004ea6:	4b07      	ldr	r3, [pc, #28]	@ (8004ec4 <USBD_CUSTOM_HID_Init+0x154>)
 8004ea8:	7819      	ldrb	r1, [r3, #0]
 8004eaa:	68fa      	ldr	r2, [r7, #12]
 8004eac:	2340      	movs	r3, #64	@ 0x40
 8004eae:	6878      	ldr	r0, [r7, #4]
 8004eb0:	f002 fb14 	bl	80074dc <USBD_LL_PrepareReceive>
                               USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);
#endif /* USBD_CUSTOMHID_OUT_PREPARE_RECEIVE_DISABLED */

  return (uint8_t)USBD_OK;
 8004eb4:	2300      	movs	r3, #0
}
 8004eb6:	4618      	mov	r0, r3
 8004eb8:	3710      	adds	r7, #16
 8004eba:	46bd      	mov	sp, r7
 8004ebc:	bd80      	pop	{r7, pc}
 8004ebe:	bf00      	nop
 8004ec0:	20000086 	.word	0x20000086
 8004ec4:	20000087 	.word	0x20000087

08004ec8 <USBD_CUSTOM_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004ec8:	b580      	push	{r7, lr}
 8004eca:	b082      	sub	sp, #8
 8004ecc:	af00      	add	r7, sp, #0
 8004ece:	6078      	str	r0, [r7, #4]
 8004ed0:	460b      	mov	r3, r1
 8004ed2:	70fb      	strb	r3, [r7, #3]
  CUSTOMHIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
  CUSTOMHIDOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close CUSTOM_HID EP IN */
  (void)USBD_LL_CloseEP(pdev, CUSTOMHIDInEpAdd);
 8004ed4:	4b37      	ldr	r3, [pc, #220]	@ (8004fb4 <USBD_CUSTOM_HID_DeInit+0xec>)
 8004ed6:	781b      	ldrb	r3, [r3, #0]
 8004ed8:	4619      	mov	r1, r3
 8004eda:	6878      	ldr	r0, [r7, #4]
 8004edc:	f002 fa35 	bl	800734a <USBD_LL_CloseEP>
  pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].is_used = 0U;
 8004ee0:	4b34      	ldr	r3, [pc, #208]	@ (8004fb4 <USBD_CUSTOM_HID_DeInit+0xec>)
 8004ee2:	781b      	ldrb	r3, [r3, #0]
 8004ee4:	f003 020f 	and.w	r2, r3, #15
 8004ee8:	6879      	ldr	r1, [r7, #4]
 8004eea:	4613      	mov	r3, r2
 8004eec:	009b      	lsls	r3, r3, #2
 8004eee:	4413      	add	r3, r2
 8004ef0:	009b      	lsls	r3, r3, #2
 8004ef2:	440b      	add	r3, r1
 8004ef4:	3324      	adds	r3, #36	@ 0x24
 8004ef6:	2200      	movs	r2, #0
 8004ef8:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].bInterval = 0U;
 8004efa:	4b2e      	ldr	r3, [pc, #184]	@ (8004fb4 <USBD_CUSTOM_HID_DeInit+0xec>)
 8004efc:	781b      	ldrb	r3, [r3, #0]
 8004efe:	f003 020f 	and.w	r2, r3, #15
 8004f02:	6879      	ldr	r1, [r7, #4]
 8004f04:	4613      	mov	r3, r2
 8004f06:	009b      	lsls	r3, r3, #2
 8004f08:	4413      	add	r3, r2
 8004f0a:	009b      	lsls	r3, r3, #2
 8004f0c:	440b      	add	r3, r1
 8004f0e:	3326      	adds	r3, #38	@ 0x26
 8004f10:	2200      	movs	r2, #0
 8004f12:	801a      	strh	r2, [r3, #0]

  /* Close CUSTOM_HID EP OUT */
  (void)USBD_LL_CloseEP(pdev, CUSTOMHIDOutEpAdd);
 8004f14:	4b28      	ldr	r3, [pc, #160]	@ (8004fb8 <USBD_CUSTOM_HID_DeInit+0xf0>)
 8004f16:	781b      	ldrb	r3, [r3, #0]
 8004f18:	4619      	mov	r1, r3
 8004f1a:	6878      	ldr	r0, [r7, #4]
 8004f1c:	f002 fa15 	bl	800734a <USBD_LL_CloseEP>
  pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].is_used = 0U;
 8004f20:	4b25      	ldr	r3, [pc, #148]	@ (8004fb8 <USBD_CUSTOM_HID_DeInit+0xf0>)
 8004f22:	781b      	ldrb	r3, [r3, #0]
 8004f24:	f003 020f 	and.w	r2, r3, #15
 8004f28:	6879      	ldr	r1, [r7, #4]
 8004f2a:	4613      	mov	r3, r2
 8004f2c:	009b      	lsls	r3, r3, #2
 8004f2e:	4413      	add	r3, r2
 8004f30:	009b      	lsls	r3, r3, #2
 8004f32:	440b      	add	r3, r1
 8004f34:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8004f38:	2200      	movs	r2, #0
 8004f3a:	801a      	strh	r2, [r3, #0]
  pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].bInterval = 0U;
 8004f3c:	4b1e      	ldr	r3, [pc, #120]	@ (8004fb8 <USBD_CUSTOM_HID_DeInit+0xf0>)
 8004f3e:	781b      	ldrb	r3, [r3, #0]
 8004f40:	f003 020f 	and.w	r2, r3, #15
 8004f44:	6879      	ldr	r1, [r7, #4]
 8004f46:	4613      	mov	r3, r2
 8004f48:	009b      	lsls	r3, r3, #2
 8004f4a:	4413      	add	r3, r2
 8004f4c:	009b      	lsls	r3, r3, #2
 8004f4e:	440b      	add	r3, r1
 8004f50:	f503 73b3 	add.w	r3, r3, #358	@ 0x166
 8004f54:	2200      	movs	r2, #0
 8004f56:	801a      	strh	r2, [r3, #0]

  /* Free allocated memory */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	32b0      	adds	r2, #176	@ 0xb0
 8004f62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d01f      	beq.n	8004faa <USBD_CUSTOM_HID_DeInit+0xe2>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8004f70:	687a      	ldr	r2, [r7, #4]
 8004f72:	33b0      	adds	r3, #176	@ 0xb0
 8004f74:	009b      	lsls	r3, r3, #2
 8004f76:	4413      	add	r3, r2
 8004f78:	685b      	ldr	r3, [r3, #4]
 8004f7a:	689b      	ldr	r3, [r3, #8]
 8004f7c:	4798      	blx	r3
    USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	32b0      	adds	r2, #176	@ 0xb0
 8004f88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004f8c:	4618      	mov	r0, r3
 8004f8e:	f002 fad5 	bl	800753c <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	32b0      	adds	r2, #176	@ 0xb0
 8004f9c:	2100      	movs	r1, #0
 8004f9e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	2200      	movs	r2, #0
 8004fa6:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8004faa:	2300      	movs	r3, #0
}
 8004fac:	4618      	mov	r0, r3
 8004fae:	3708      	adds	r7, #8
 8004fb0:	46bd      	mov	sp, r7
 8004fb2:	bd80      	pop	{r7, pc}
 8004fb4:	20000086 	.word	0x20000086
 8004fb8:	20000087 	.word	0x20000087

08004fbc <USBD_CUSTOM_HID_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_Setup(USBD_HandleTypeDef *pdev,
                                     USBD_SetupReqTypedef *req)
{
 8004fbc:	b580      	push	{r7, lr}
 8004fbe:	b088      	sub	sp, #32
 8004fc0:	af00      	add	r7, sp, #0
 8004fc2:	6078      	str	r0, [r7, #4]
 8004fc4:	6039      	str	r1, [r7, #0]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	32b0      	adds	r2, #176	@ 0xb0
 8004fd0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004fd4:	613b      	str	r3, [r7, #16]
  uint16_t len = 0U;
 8004fd6:	2300      	movs	r3, #0
 8004fd8:	83fb      	strh	r3, [r7, #30]
#ifdef USBD_CUSTOMHID_CTRL_REQ_GET_REPORT_ENABLED
  uint16_t ReportLength = 0U;
#endif /* USBD_CUSTOMHID_CTRL_REQ_GET_REPORT_ENABLED */
  uint8_t  *pbuf = NULL;
 8004fda:	2300      	movs	r3, #0
 8004fdc:	61bb      	str	r3, [r7, #24]
  uint16_t status_info = 0U;
 8004fde:	2300      	movs	r3, #0
 8004fe0:	81fb      	strh	r3, [r7, #14]
  USBD_StatusTypeDef ret = USBD_OK;
 8004fe2:	2300      	movs	r3, #0
 8004fe4:	75fb      	strb	r3, [r7, #23]

  if (hhid == NULL)
 8004fe6:	693b      	ldr	r3, [r7, #16]
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d101      	bne.n	8004ff0 <USBD_CUSTOM_HID_Setup+0x34>
  {
    return (uint8_t)USBD_FAIL;
 8004fec:	2303      	movs	r3, #3
 8004fee:	e104      	b.n	80051fa <USBD_CUSTOM_HID_Setup+0x23e>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004ff0:	683b      	ldr	r3, [r7, #0]
 8004ff2:	781b      	ldrb	r3, [r3, #0]
 8004ff4:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d056      	beq.n	80050aa <USBD_CUSTOM_HID_Setup+0xee>
 8004ffc:	2b20      	cmp	r3, #32
 8004ffe:	f040 80f4 	bne.w	80051ea <USBD_CUSTOM_HID_Setup+0x22e>
  {
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
 8005002:	683b      	ldr	r3, [r7, #0]
 8005004:	785b      	ldrb	r3, [r3, #1]
 8005006:	3b02      	subs	r3, #2
 8005008:	2b09      	cmp	r3, #9
 800500a:	d846      	bhi.n	800509a <USBD_CUSTOM_HID_Setup+0xde>
 800500c:	a201      	add	r2, pc, #4	@ (adr r2, 8005014 <USBD_CUSTOM_HID_Setup+0x58>)
 800500e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005012:	bf00      	nop
 8005014:	0800506d 	.word	0x0800506d
 8005018:	0800504b 	.word	0x0800504b
 800501c:	0800509b 	.word	0x0800509b
 8005020:	0800509b 	.word	0x0800509b
 8005024:	0800509b 	.word	0x0800509b
 8005028:	0800509b 	.word	0x0800509b
 800502c:	0800509b 	.word	0x0800509b
 8005030:	0800507d 	.word	0x0800507d
 8005034:	0800505b 	.word	0x0800505b
 8005038:	0800503d 	.word	0x0800503d
      {
        case CUSTOM_HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 800503c:	683b      	ldr	r3, [r7, #0]
 800503e:	885b      	ldrh	r3, [r3, #2]
 8005040:	b2db      	uxtb	r3, r3
 8005042:	461a      	mov	r2, r3
 8005044:	693b      	ldr	r3, [r7, #16]
 8005046:	641a      	str	r2, [r3, #64]	@ 0x40
          break;
 8005048:	e02e      	b.n	80050a8 <USBD_CUSTOM_HID_Setup+0xec>

        case CUSTOM_HID_REQ_GET_PROTOCOL:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 800504a:	693b      	ldr	r3, [r7, #16]
 800504c:	3340      	adds	r3, #64	@ 0x40
 800504e:	2201      	movs	r2, #1
 8005050:	4619      	mov	r1, r3
 8005052:	6878      	ldr	r0, [r7, #4]
 8005054:	f001 fce4 	bl	8006a20 <USBD_CtlSendData>
          break;
 8005058:	e026      	b.n	80050a8 <USBD_CUSTOM_HID_Setup+0xec>

        case CUSTOM_HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 800505a:	683b      	ldr	r3, [r7, #0]
 800505c:	885b      	ldrh	r3, [r3, #2]
 800505e:	0a1b      	lsrs	r3, r3, #8
 8005060:	b29b      	uxth	r3, r3
 8005062:	b2db      	uxtb	r3, r3
 8005064:	461a      	mov	r2, r3
 8005066:	693b      	ldr	r3, [r7, #16]
 8005068:	645a      	str	r2, [r3, #68]	@ 0x44
          break;
 800506a:	e01d      	b.n	80050a8 <USBD_CUSTOM_HID_Setup+0xec>

        case CUSTOM_HID_REQ_GET_IDLE:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 800506c:	693b      	ldr	r3, [r7, #16]
 800506e:	3344      	adds	r3, #68	@ 0x44
 8005070:	2201      	movs	r2, #1
 8005072:	4619      	mov	r1, r3
 8005074:	6878      	ldr	r0, [r7, #4]
 8005076:	f001 fcd3 	bl	8006a20 <USBD_CtlSendData>
          break;
 800507a:	e015      	b.n	80050a8 <USBD_CUSTOM_HID_Setup+0xec>
            ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->CtrlReqComplete(req->bRequest,
                                                                                            req->wLength);
          }
#endif /* USBD_CUSTOMHID_CTRL_REQ_COMPLETE_CALLBACK_ENABLED */
#ifndef USBD_CUSTOMHID_EP0_OUT_PREPARE_RECEIVE_DISABLED
          hhid->IsReportAvailable = 1U;
 800507c:	693b      	ldr	r3, [r7, #16]
 800507e:	2201      	movs	r2, #1
 8005080:	64da      	str	r2, [r3, #76]	@ 0x4c
          (void)USBD_CtlPrepareRx(pdev, hhid->Report_buf,
 8005082:	6939      	ldr	r1, [r7, #16]
                                  MIN(req->wLength, USBD_CUSTOMHID_OUTREPORT_BUF_SIZE));
 8005084:	683b      	ldr	r3, [r7, #0]
 8005086:	88db      	ldrh	r3, [r3, #6]
 8005088:	2b40      	cmp	r3, #64	@ 0x40
 800508a:	bf28      	it	cs
 800508c:	2340      	movcs	r3, #64	@ 0x40
 800508e:	b29b      	uxth	r3, r3
          (void)USBD_CtlPrepareRx(pdev, hhid->Report_buf,
 8005090:	461a      	mov	r2, r3
 8005092:	6878      	ldr	r0, [r7, #4]
 8005094:	f001 fcf0 	bl	8006a78 <USBD_CtlPrepareRx>
#endif /* USBD_CUSTOMHID_EP0_OUT_PREPARE_RECEIVE_DISABLED */
          break;
 8005098:	e006      	b.n	80050a8 <USBD_CUSTOM_HID_Setup+0xec>
          }
          break;
#endif /* USBD_CUSTOMHID_CTRL_REQ_GET_REPORT_ENABLED */

        default:
          USBD_CtlError(pdev, req);
 800509a:	6839      	ldr	r1, [r7, #0]
 800509c:	6878      	ldr	r0, [r7, #4]
 800509e:	f001 fc42 	bl	8006926 <USBD_CtlError>
          ret = USBD_FAIL;
 80050a2:	2303      	movs	r3, #3
 80050a4:	75fb      	strb	r3, [r7, #23]
          break;
 80050a6:	bf00      	nop
      }
      break;
 80050a8:	e0a6      	b.n	80051f8 <USBD_CUSTOM_HID_Setup+0x23c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80050aa:	683b      	ldr	r3, [r7, #0]
 80050ac:	785b      	ldrb	r3, [r3, #1]
 80050ae:	2b0b      	cmp	r3, #11
 80050b0:	f200 8092 	bhi.w	80051d8 <USBD_CUSTOM_HID_Setup+0x21c>
 80050b4:	a201      	add	r2, pc, #4	@ (adr r2, 80050bc <USBD_CUSTOM_HID_Setup+0x100>)
 80050b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050ba:	bf00      	nop
 80050bc:	080050ed 	.word	0x080050ed
 80050c0:	080051e7 	.word	0x080051e7
 80050c4:	080051d9 	.word	0x080051d9
 80050c8:	080051d9 	.word	0x080051d9
 80050cc:	080051d9 	.word	0x080051d9
 80050d0:	080051d9 	.word	0x080051d9
 80050d4:	08005117 	.word	0x08005117
 80050d8:	080051d9 	.word	0x080051d9
 80050dc:	080051d9 	.word	0x080051d9
 80050e0:	080051d9 	.word	0x080051d9
 80050e4:	08005187 	.word	0x08005187
 80050e8:	080051b1 	.word	0x080051b1
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80050f2:	b2db      	uxtb	r3, r3
 80050f4:	2b03      	cmp	r3, #3
 80050f6:	d107      	bne.n	8005108 <USBD_CUSTOM_HID_Setup+0x14c>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80050f8:	f107 030e 	add.w	r3, r7, #14
 80050fc:	2202      	movs	r2, #2
 80050fe:	4619      	mov	r1, r3
 8005100:	6878      	ldr	r0, [r7, #4]
 8005102:	f001 fc8d 	bl	8006a20 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005106:	e06f      	b.n	80051e8 <USBD_CUSTOM_HID_Setup+0x22c>
            USBD_CtlError(pdev, req);
 8005108:	6839      	ldr	r1, [r7, #0]
 800510a:	6878      	ldr	r0, [r7, #4]
 800510c:	f001 fc0b 	bl	8006926 <USBD_CtlError>
            ret = USBD_FAIL;
 8005110:	2303      	movs	r3, #3
 8005112:	75fb      	strb	r3, [r7, #23]
          break;
 8005114:	e068      	b.n	80051e8 <USBD_CUSTOM_HID_Setup+0x22c>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == CUSTOM_HID_REPORT_DESC)
 8005116:	683b      	ldr	r3, [r7, #0]
 8005118:	885b      	ldrh	r3, [r3, #2]
 800511a:	0a1b      	lsrs	r3, r3, #8
 800511c:	b29b      	uxth	r3, r3
 800511e:	2b22      	cmp	r3, #34	@ 0x22
 8005120:	d112      	bne.n	8005148 <USBD_CUSTOM_HID_Setup+0x18c>
          {
            len = MIN(USBD_CUSTOM_HID_REPORT_DESC_SIZE, req->wLength);
 8005122:	683b      	ldr	r3, [r7, #0]
 8005124:	88db      	ldrh	r3, [r3, #6]
 8005126:	f240 5226 	movw	r2, #1318	@ 0x526
 800512a:	4293      	cmp	r3, r2
 800512c:	bf28      	it	cs
 800512e:	4613      	movcs	r3, r2
 8005130:	83fb      	strh	r3, [r7, #30]
            pbuf = ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->pReport;
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005138:	687a      	ldr	r2, [r7, #4]
 800513a:	33b0      	adds	r3, #176	@ 0xb0
 800513c:	009b      	lsls	r3, r3, #2
 800513e:	4413      	add	r3, r2
 8005140:	685b      	ldr	r3, [r3, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	61bb      	str	r3, [r7, #24]
 8005146:	e00d      	b.n	8005164 <USBD_CUSTOM_HID_Setup+0x1a8>
          }
          else
          {
            if ((req->wValue >> 8) == CUSTOM_HID_DESCRIPTOR_TYPE)
 8005148:	683b      	ldr	r3, [r7, #0]
 800514a:	885b      	ldrh	r3, [r3, #2]
 800514c:	0a1b      	lsrs	r3, r3, #8
 800514e:	b29b      	uxth	r3, r3
 8005150:	2b21      	cmp	r3, #33	@ 0x21
 8005152:	d107      	bne.n	8005164 <USBD_CUSTOM_HID_Setup+0x1a8>
            {
              pbuf = USBD_CUSTOM_HID_Desc;
 8005154:	4b2b      	ldr	r3, [pc, #172]	@ (8005204 <USBD_CUSTOM_HID_Setup+0x248>)
 8005156:	61bb      	str	r3, [r7, #24]
              len = MIN(USB_CUSTOM_HID_DESC_SIZ, req->wLength);
 8005158:	683b      	ldr	r3, [r7, #0]
 800515a:	88db      	ldrh	r3, [r3, #6]
 800515c:	2b09      	cmp	r3, #9
 800515e:	bf28      	it	cs
 8005160:	2309      	movcs	r3, #9
 8005162:	83fb      	strh	r3, [r7, #30]
            }
          }

          if (pbuf != NULL)
 8005164:	69bb      	ldr	r3, [r7, #24]
 8005166:	2b00      	cmp	r3, #0
 8005168:	d006      	beq.n	8005178 <USBD_CUSTOM_HID_Setup+0x1bc>
          {
            (void)USBD_CtlSendData(pdev, pbuf, len);
 800516a:	8bfb      	ldrh	r3, [r7, #30]
 800516c:	461a      	mov	r2, r3
 800516e:	69b9      	ldr	r1, [r7, #24]
 8005170:	6878      	ldr	r0, [r7, #4]
 8005172:	f001 fc55 	bl	8006a20 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005176:	e037      	b.n	80051e8 <USBD_CUSTOM_HID_Setup+0x22c>
            USBD_CtlError(pdev, req);
 8005178:	6839      	ldr	r1, [r7, #0]
 800517a:	6878      	ldr	r0, [r7, #4]
 800517c:	f001 fbd3 	bl	8006926 <USBD_CtlError>
            ret = USBD_FAIL;
 8005180:	2303      	movs	r3, #3
 8005182:	75fb      	strb	r3, [r7, #23]
          break;
 8005184:	e030      	b.n	80051e8 <USBD_CUSTOM_HID_Setup+0x22c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800518c:	b2db      	uxtb	r3, r3
 800518e:	2b03      	cmp	r3, #3
 8005190:	d107      	bne.n	80051a2 <USBD_CUSTOM_HID_Setup+0x1e6>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 8005192:	693b      	ldr	r3, [r7, #16]
 8005194:	3348      	adds	r3, #72	@ 0x48
 8005196:	2201      	movs	r2, #1
 8005198:	4619      	mov	r1, r3
 800519a:	6878      	ldr	r0, [r7, #4]
 800519c:	f001 fc40 	bl	8006a20 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80051a0:	e022      	b.n	80051e8 <USBD_CUSTOM_HID_Setup+0x22c>
            USBD_CtlError(pdev, req);
 80051a2:	6839      	ldr	r1, [r7, #0]
 80051a4:	6878      	ldr	r0, [r7, #4]
 80051a6:	f001 fbbe 	bl	8006926 <USBD_CtlError>
            ret = USBD_FAIL;
 80051aa:	2303      	movs	r3, #3
 80051ac:	75fb      	strb	r3, [r7, #23]
          break;
 80051ae:	e01b      	b.n	80051e8 <USBD_CUSTOM_HID_Setup+0x22c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80051b6:	b2db      	uxtb	r3, r3
 80051b8:	2b03      	cmp	r3, #3
 80051ba:	d106      	bne.n	80051ca <USBD_CUSTOM_HID_Setup+0x20e>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 80051bc:	683b      	ldr	r3, [r7, #0]
 80051be:	885b      	ldrh	r3, [r3, #2]
 80051c0:	b2db      	uxtb	r3, r3
 80051c2:	461a      	mov	r2, r3
 80051c4:	693b      	ldr	r3, [r7, #16]
 80051c6:	649a      	str	r2, [r3, #72]	@ 0x48
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80051c8:	e00e      	b.n	80051e8 <USBD_CUSTOM_HID_Setup+0x22c>
            USBD_CtlError(pdev, req);
 80051ca:	6839      	ldr	r1, [r7, #0]
 80051cc:	6878      	ldr	r0, [r7, #4]
 80051ce:	f001 fbaa 	bl	8006926 <USBD_CtlError>
            ret = USBD_FAIL;
 80051d2:	2303      	movs	r3, #3
 80051d4:	75fb      	strb	r3, [r7, #23]
          break;
 80051d6:	e007      	b.n	80051e8 <USBD_CUSTOM_HID_Setup+0x22c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80051d8:	6839      	ldr	r1, [r7, #0]
 80051da:	6878      	ldr	r0, [r7, #4]
 80051dc:	f001 fba3 	bl	8006926 <USBD_CtlError>
          ret = USBD_FAIL;
 80051e0:	2303      	movs	r3, #3
 80051e2:	75fb      	strb	r3, [r7, #23]
          break;
 80051e4:	e000      	b.n	80051e8 <USBD_CUSTOM_HID_Setup+0x22c>
          break;
 80051e6:	bf00      	nop
      }
      break;
 80051e8:	e006      	b.n	80051f8 <USBD_CUSTOM_HID_Setup+0x23c>

    default:
      USBD_CtlError(pdev, req);
 80051ea:	6839      	ldr	r1, [r7, #0]
 80051ec:	6878      	ldr	r0, [r7, #4]
 80051ee:	f001 fb9a 	bl	8006926 <USBD_CtlError>
      ret = USBD_FAIL;
 80051f2:	2303      	movs	r3, #3
 80051f4:	75fb      	strb	r3, [r7, #23]
      break;
 80051f6:	bf00      	nop
  }
  return (uint8_t)ret;
 80051f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80051fa:	4618      	mov	r0, r3
 80051fc:	3720      	adds	r7, #32
 80051fe:	46bd      	mov	sp, r7
 8005200:	bd80      	pop	{r7, pc}
 8005202:	bf00      	nop
 8005204:	20000070 	.word	0x20000070

08005208 <USBD_CUSTOM_HID_SendReport>:
{
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CUSTOM_HID_SendReport(USBD_HandleTypeDef *pdev,
                                   uint8_t *report, uint16_t len)
{
 8005208:	b580      	push	{r7, lr}
 800520a:	b086      	sub	sp, #24
 800520c:	af00      	add	r7, sp, #0
 800520e:	60f8      	str	r0, [r7, #12]
 8005210:	60b9      	str	r1, [r7, #8]
 8005212:	4613      	mov	r3, r2
 8005214:	80fb      	strh	r3, [r7, #6]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	32b0      	adds	r2, #176	@ 0xb0
 8005220:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005224:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hhid == NULL)
 8005226:	697b      	ldr	r3, [r7, #20]
 8005228:	2b00      	cmp	r3, #0
 800522a:	d101      	bne.n	8005230 <USBD_CUSTOM_HID_SendReport+0x28>
  {
    return (uint8_t)USBD_FAIL;
 800522c:	2303      	movs	r3, #3
 800522e:	e019      	b.n	8005264 <USBD_CUSTOM_HID_SendReport+0x5c>
#ifdef USE_USBD_COMPOSITE
  /* Get Endpoint IN address allocated for this class instance */
  CUSTOMHIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, ClassId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005236:	b2db      	uxtb	r3, r3
 8005238:	2b03      	cmp	r3, #3
 800523a:	d112      	bne.n	8005262 <USBD_CUSTOM_HID_SendReport+0x5a>
  {
    if (hhid->state == CUSTOM_HID_IDLE)
 800523c:	697b      	ldr	r3, [r7, #20]
 800523e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8005242:	2b00      	cmp	r3, #0
 8005244:	d10b      	bne.n	800525e <USBD_CUSTOM_HID_SendReport+0x56>
    {
      hhid->state = CUSTOM_HID_BUSY;
 8005246:	697b      	ldr	r3, [r7, #20]
 8005248:	2201      	movs	r2, #1
 800524a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      (void)USBD_LL_Transmit(pdev, CUSTOMHIDInEpAdd, report, len);
 800524e:	4b07      	ldr	r3, [pc, #28]	@ (800526c <USBD_CUSTOM_HID_SendReport+0x64>)
 8005250:	7819      	ldrb	r1, [r3, #0]
 8005252:	88fb      	ldrh	r3, [r7, #6]
 8005254:	68ba      	ldr	r2, [r7, #8]
 8005256:	68f8      	ldr	r0, [r7, #12]
 8005258:	f002 f91f 	bl	800749a <USBD_LL_Transmit>
 800525c:	e001      	b.n	8005262 <USBD_CUSTOM_HID_SendReport+0x5a>
    }
    else
    {
      return (uint8_t)USBD_BUSY;
 800525e:	2301      	movs	r3, #1
 8005260:	e000      	b.n	8005264 <USBD_CUSTOM_HID_SendReport+0x5c>
    }
  }
  return (uint8_t)USBD_OK;
 8005262:	2300      	movs	r3, #0
}
 8005264:	4618      	mov	r0, r3
 8005266:	3718      	adds	r7, #24
 8005268:	46bd      	mov	sp, r7
 800526a:	bd80      	pop	{r7, pc}
 800526c:	20000086 	.word	0x20000086

08005270 <USBD_CUSTOM_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetFSCfgDesc(uint16_t *length)
{
 8005270:	b580      	push	{r7, lr}
 8005272:	b084      	sub	sp, #16
 8005274:	af00      	add	r7, sp, #0
 8005276:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPIN_ADDR);
 8005278:	2181      	movs	r1, #129	@ 0x81
 800527a:	4815      	ldr	r0, [pc, #84]	@ (80052d0 <USBD_CUSTOM_HID_GetFSCfgDesc+0x60>)
 800527c:	f000 fd1d 	bl	8005cba <USBD_GetEpDesc>
 8005280:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPOUT_ADDR);
 8005282:	2101      	movs	r1, #1
 8005284:	4812      	ldr	r0, [pc, #72]	@ (80052d0 <USBD_CUSTOM_HID_GetFSCfgDesc+0x60>)
 8005286:	f000 fd18 	bl	8005cba <USBD_GetEpDesc>
 800528a:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	2b00      	cmp	r3, #0
 8005290:	d009      	beq.n	80052a6 <USBD_CUSTOM_HID_GetFSCfgDesc+0x36>
  {
    pEpInDesc->wMaxPacketSize = CUSTOM_HID_EPIN_SIZE;
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	2200      	movs	r2, #0
 8005296:	f042 0202 	orr.w	r2, r2, #2
 800529a:	711a      	strb	r2, [r3, #4]
 800529c:	2200      	movs	r2, #0
 800529e:	715a      	strb	r2, [r3, #5]
    pEpInDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	2205      	movs	r2, #5
 80052a4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80052a6:	68bb      	ldr	r3, [r7, #8]
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d009      	beq.n	80052c0 <USBD_CUSTOM_HID_GetFSCfgDesc+0x50>
  {
    pEpOutDesc->wMaxPacketSize = CUSTOM_HID_EPOUT_SIZE;
 80052ac:	68bb      	ldr	r3, [r7, #8]
 80052ae:	2200      	movs	r2, #0
 80052b0:	f042 0202 	orr.w	r2, r2, #2
 80052b4:	711a      	strb	r2, [r3, #4]
 80052b6:	2200      	movs	r2, #0
 80052b8:	715a      	strb	r2, [r3, #5]
    pEpOutDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
 80052ba:	68bb      	ldr	r3, [r7, #8]
 80052bc:	2205      	movs	r2, #5
 80052be:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgDesc);
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	2229      	movs	r2, #41	@ 0x29
 80052c4:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgDesc;
 80052c6:	4b02      	ldr	r3, [pc, #8]	@ (80052d0 <USBD_CUSTOM_HID_GetFSCfgDesc+0x60>)
}
 80052c8:	4618      	mov	r0, r3
 80052ca:	3710      	adds	r7, #16
 80052cc:	46bd      	mov	sp, r7
 80052ce:	bd80      	pop	{r7, pc}
 80052d0:	20000044 	.word	0x20000044

080052d4 <USBD_CUSTOM_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetHSCfgDesc(uint16_t *length)
{
 80052d4:	b580      	push	{r7, lr}
 80052d6:	b084      	sub	sp, #16
 80052d8:	af00      	add	r7, sp, #0
 80052da:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPIN_ADDR);
 80052dc:	2181      	movs	r1, #129	@ 0x81
 80052de:	4815      	ldr	r0, [pc, #84]	@ (8005334 <USBD_CUSTOM_HID_GetHSCfgDesc+0x60>)
 80052e0:	f000 fceb 	bl	8005cba <USBD_GetEpDesc>
 80052e4:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPOUT_ADDR);
 80052e6:	2101      	movs	r1, #1
 80052e8:	4812      	ldr	r0, [pc, #72]	@ (8005334 <USBD_CUSTOM_HID_GetHSCfgDesc+0x60>)
 80052ea:	f000 fce6 	bl	8005cba <USBD_GetEpDesc>
 80052ee:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d009      	beq.n	800530a <USBD_CUSTOM_HID_GetHSCfgDesc+0x36>
  {
    pEpInDesc->wMaxPacketSize = CUSTOM_HID_EPIN_SIZE;
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	2200      	movs	r2, #0
 80052fa:	f042 0202 	orr.w	r2, r2, #2
 80052fe:	711a      	strb	r2, [r3, #4]
 8005300:	2200      	movs	r2, #0
 8005302:	715a      	strb	r2, [r3, #5]
    pEpInDesc->bInterval = CUSTOM_HID_HS_BINTERVAL;
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	2205      	movs	r2, #5
 8005308:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800530a:	68bb      	ldr	r3, [r7, #8]
 800530c:	2b00      	cmp	r3, #0
 800530e:	d009      	beq.n	8005324 <USBD_CUSTOM_HID_GetHSCfgDesc+0x50>
  {
    pEpOutDesc->wMaxPacketSize = CUSTOM_HID_EPOUT_SIZE;
 8005310:	68bb      	ldr	r3, [r7, #8]
 8005312:	2200      	movs	r2, #0
 8005314:	f042 0202 	orr.w	r2, r2, #2
 8005318:	711a      	strb	r2, [r3, #4]
 800531a:	2200      	movs	r2, #0
 800531c:	715a      	strb	r2, [r3, #5]
    pEpOutDesc->bInterval = CUSTOM_HID_HS_BINTERVAL;
 800531e:	68bb      	ldr	r3, [r7, #8]
 8005320:	2205      	movs	r2, #5
 8005322:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgDesc);
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	2229      	movs	r2, #41	@ 0x29
 8005328:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgDesc;
 800532a:	4b02      	ldr	r3, [pc, #8]	@ (8005334 <USBD_CUSTOM_HID_GetHSCfgDesc+0x60>)
}
 800532c:	4618      	mov	r0, r3
 800532e:	3710      	adds	r7, #16
 8005330:	46bd      	mov	sp, r7
 8005332:	bd80      	pop	{r7, pc}
 8005334:	20000044 	.word	0x20000044

08005338 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8005338:	b580      	push	{r7, lr}
 800533a:	b084      	sub	sp, #16
 800533c:	af00      	add	r7, sp, #0
 800533e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPIN_ADDR);
 8005340:	2181      	movs	r1, #129	@ 0x81
 8005342:	4815      	ldr	r0, [pc, #84]	@ (8005398 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x60>)
 8005344:	f000 fcb9 	bl	8005cba <USBD_GetEpDesc>
 8005348:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPOUT_ADDR);
 800534a:	2101      	movs	r1, #1
 800534c:	4812      	ldr	r0, [pc, #72]	@ (8005398 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x60>)
 800534e:	f000 fcb4 	bl	8005cba <USBD_GetEpDesc>
 8005352:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	2b00      	cmp	r3, #0
 8005358:	d009      	beq.n	800536e <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x36>
  {
    pEpInDesc->wMaxPacketSize = CUSTOM_HID_EPIN_SIZE;
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	2200      	movs	r2, #0
 800535e:	f042 0202 	orr.w	r2, r2, #2
 8005362:	711a      	strb	r2, [r3, #4]
 8005364:	2200      	movs	r2, #0
 8005366:	715a      	strb	r2, [r3, #5]
    pEpInDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	2205      	movs	r2, #5
 800536c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800536e:	68bb      	ldr	r3, [r7, #8]
 8005370:	2b00      	cmp	r3, #0
 8005372:	d009      	beq.n	8005388 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x50>
  {
    pEpOutDesc->wMaxPacketSize = CUSTOM_HID_EPOUT_SIZE;
 8005374:	68bb      	ldr	r3, [r7, #8]
 8005376:	2200      	movs	r2, #0
 8005378:	f042 0202 	orr.w	r2, r2, #2
 800537c:	711a      	strb	r2, [r3, #4]
 800537e:	2200      	movs	r2, #0
 8005380:	715a      	strb	r2, [r3, #5]
    pEpOutDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
 8005382:	68bb      	ldr	r3, [r7, #8]
 8005384:	2205      	movs	r2, #5
 8005386:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgDesc);
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	2229      	movs	r2, #41	@ 0x29
 800538c:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgDesc;
 800538e:	4b02      	ldr	r3, [pc, #8]	@ (8005398 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x60>)
}
 8005390:	4618      	mov	r0, r3
 8005392:	3710      	adds	r7, #16
 8005394:	46bd      	mov	sp, r7
 8005396:	bd80      	pop	{r7, pc}
 8005398:	20000044 	.word	0x20000044

0800539c <USBD_CUSTOM_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800539c:	b480      	push	{r7}
 800539e:	b083      	sub	sp, #12
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	6078      	str	r0, [r7, #4]
 80053a4:	460b      	mov	r3, r1
 80053a6:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId])->state = CUSTOM_HID_IDLE;
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	32b0      	adds	r2, #176	@ 0xb0
 80053b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80053b6:	2200      	movs	r2, #0
 80053b8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  return (uint8_t)USBD_OK;
 80053bc:	2300      	movs	r3, #0
}
 80053be:	4618      	mov	r0, r3
 80053c0:	370c      	adds	r7, #12
 80053c2:	46bd      	mov	sp, r7
 80053c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c8:	4770      	bx	lr

080053ca <USBD_CUSTOM_HID_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80053ca:	b580      	push	{r7, lr}
 80053cc:	b084      	sub	sp, #16
 80053ce:	af00      	add	r7, sp, #0
 80053d0:	6078      	str	r0, [r7, #4]
 80053d2:	460b      	mov	r3, r1
 80053d4:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	32b0      	adds	r2, #176	@ 0xb0
 80053e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d101      	bne.n	80053ec <USBD_CUSTOM_HID_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80053e8:	2303      	movs	r3, #3
 80053ea:	e017      	b.n	800541c <USBD_CUSTOM_HID_DataOut+0x52>
  }

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	32b0      	adds	r2, #176	@ 0xb0
 80053f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80053fa:	60fb      	str	r3, [r7, #12]

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application processing */
  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->OutEvent(hhid->Report_buf[0],
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005402:	687a      	ldr	r2, [r7, #4]
 8005404:	33b0      	adds	r3, #176	@ 0xb0
 8005406:	009b      	lsls	r3, r3, #2
 8005408:	4413      	add	r3, r2
 800540a:	685b      	ldr	r3, [r3, #4]
 800540c:	68db      	ldr	r3, [r3, #12]
 800540e:	68fa      	ldr	r2, [r7, #12]
 8005410:	7810      	ldrb	r0, [r2, #0]
 8005412:	68fa      	ldr	r2, [r7, #12]
 8005414:	7852      	ldrb	r2, [r2, #1]
 8005416:	4611      	mov	r1, r2
 8005418:	4798      	blx	r3
                                                                           hhid->Report_buf[1]);

  return (uint8_t)USBD_OK;
 800541a:	2300      	movs	r3, #0
}
 800541c:	4618      	mov	r0, r3
 800541e:	3710      	adds	r7, #16
 8005420:	46bd      	mov	sp, r7
 8005422:	bd80      	pop	{r7, pc}

08005424 <USBD_CUSTOM_HID_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8005424:	b580      	push	{r7, lr}
 8005426:	b084      	sub	sp, #16
 8005428:	af00      	add	r7, sp, #0
 800542a:	6078      	str	r0, [r7, #4]
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	32b0      	adds	r2, #176	@ 0xb0
 8005436:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800543a:	2b00      	cmp	r3, #0
 800543c:	d101      	bne.n	8005442 <USBD_CUSTOM_HID_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800543e:	2303      	movs	r3, #3
 8005440:	e00f      	b.n	8005462 <USBD_CUSTOM_HID_ReceivePacket+0x3e>
#ifdef USE_USBD_COMPOSITE
  /* Get OUT Endpoint address allocated for this class instance */
  CUSTOMHIDOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	32b0      	adds	r2, #176	@ 0xb0
 800544c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005450:	60fb      	str	r3, [r7, #12]

  /* Resume USB Out process */
  (void)USBD_LL_PrepareReceive(pdev, CUSTOMHIDOutEpAdd, hhid->Report_buf,
 8005452:	4b06      	ldr	r3, [pc, #24]	@ (800546c <USBD_CUSTOM_HID_ReceivePacket+0x48>)
 8005454:	7819      	ldrb	r1, [r3, #0]
 8005456:	68fa      	ldr	r2, [r7, #12]
 8005458:	2340      	movs	r3, #64	@ 0x40
 800545a:	6878      	ldr	r0, [r7, #4]
 800545c:	f002 f83e 	bl	80074dc <USBD_LL_PrepareReceive>
                               USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);

  return (uint8_t)USBD_OK;
 8005460:	2300      	movs	r3, #0
}
 8005462:	4618      	mov	r0, r3
 8005464:	3710      	adds	r7, #16
 8005466:	46bd      	mov	sp, r7
 8005468:	bd80      	pop	{r7, pc}
 800546a:	bf00      	nop
 800546c:	20000087 	.word	0x20000087

08005470 <USBD_CUSTOM_HID_EP0_RxReady>:
  *         Handles control request data.
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8005470:	b580      	push	{r7, lr}
 8005472:	b084      	sub	sp, #16
 8005474:	af00      	add	r7, sp, #0
 8005476:	6078      	str	r0, [r7, #4]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	32b0      	adds	r2, #176	@ 0xb0
 8005482:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005486:	60fb      	str	r3, [r7, #12]

  if (hhid == NULL)
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	2b00      	cmp	r3, #0
 800548c:	d101      	bne.n	8005492 <USBD_CUSTOM_HID_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800548e:	2303      	movs	r3, #3
 8005490:	e016      	b.n	80054c0 <USBD_CUSTOM_HID_EP0_RxReady+0x50>
  }

  if (hhid->IsReportAvailable == 1U)
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005496:	2b01      	cmp	r3, #1
 8005498:	d111      	bne.n	80054be <USBD_CUSTOM_HID_EP0_RxReady+0x4e>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->OutEvent(hhid->Report_buf[0],
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80054a0:	687a      	ldr	r2, [r7, #4]
 80054a2:	33b0      	adds	r3, #176	@ 0xb0
 80054a4:	009b      	lsls	r3, r3, #2
 80054a6:	4413      	add	r3, r2
 80054a8:	685b      	ldr	r3, [r3, #4]
 80054aa:	68db      	ldr	r3, [r3, #12]
 80054ac:	68fa      	ldr	r2, [r7, #12]
 80054ae:	7810      	ldrb	r0, [r2, #0]
 80054b0:	68fa      	ldr	r2, [r7, #12]
 80054b2:	7852      	ldrb	r2, [r2, #1]
 80054b4:	4611      	mov	r1, r2
 80054b6:	4798      	blx	r3
                                                                             hhid->Report_buf[1]);
    hhid->IsReportAvailable = 0U;
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	2200      	movs	r2, #0
 80054bc:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  return (uint8_t)USBD_OK;
 80054be:	2300      	movs	r3, #0
}
 80054c0:	4618      	mov	r0, r3
 80054c2:	3710      	adds	r7, #16
 80054c4:	46bd      	mov	sp, r7
 80054c6:	bd80      	pop	{r7, pc}

080054c8 <USBD_CUSTOM_HID_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 80054c8:	b480      	push	{r7}
 80054ca:	b083      	sub	sp, #12
 80054cc:	af00      	add	r7, sp, #0
 80054ce:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_DeviceQualifierDesc);
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	220a      	movs	r2, #10
 80054d4:	801a      	strh	r2, [r3, #0]

  return USBD_CUSTOM_HID_DeviceQualifierDesc;
 80054d6:	4b03      	ldr	r3, [pc, #12]	@ (80054e4 <USBD_CUSTOM_HID_GetDeviceQualifierDesc+0x1c>)
}
 80054d8:	4618      	mov	r0, r3
 80054da:	370c      	adds	r7, #12
 80054dc:	46bd      	mov	sp, r7
 80054de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e2:	4770      	bx	lr
 80054e4:	2000007c 	.word	0x2000007c

080054e8 <USBD_CUSTOM_HID_RegisterInterface>:
  * @param  fops: CUSTOMHID Interface callback
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_RegisterInterface(USBD_HandleTypeDef *pdev,
                                          USBD_CUSTOM_HID_ItfTypeDef *fops)
{
 80054e8:	b480      	push	{r7}
 80054ea:	b083      	sub	sp, #12
 80054ec:	af00      	add	r7, sp, #0
 80054ee:	6078      	str	r0, [r7, #4]
 80054f0:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80054f2:	683b      	ldr	r3, [r7, #0]
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d101      	bne.n	80054fc <USBD_CUSTOM_HID_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80054f8:	2303      	movs	r3, #3
 80054fa:	e009      	b.n	8005510 <USBD_CUSTOM_HID_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005502:	687a      	ldr	r2, [r7, #4]
 8005504:	33b0      	adds	r3, #176	@ 0xb0
 8005506:	009b      	lsls	r3, r3, #2
 8005508:	4413      	add	r3, r2
 800550a:	683a      	ldr	r2, [r7, #0]
 800550c:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800550e:	2300      	movs	r3, #0
}
 8005510:	4618      	mov	r0, r3
 8005512:	370c      	adds	r7, #12
 8005514:	46bd      	mov	sp, r7
 8005516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800551a:	4770      	bx	lr

0800551c <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800551c:	b580      	push	{r7, lr}
 800551e:	b086      	sub	sp, #24
 8005520:	af00      	add	r7, sp, #0
 8005522:	60f8      	str	r0, [r7, #12]
 8005524:	60b9      	str	r1, [r7, #8]
 8005526:	4613      	mov	r3, r2
 8005528:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	2b00      	cmp	r3, #0
 800552e:	d101      	bne.n	8005534 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8005530:	2303      	movs	r3, #3
 8005532:	e01f      	b.n	8005574 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	2200      	movs	r2, #0
 8005538:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	2200      	movs	r2, #0
 8005540:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	2200      	movs	r2, #0
 8005548:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800554c:	68bb      	ldr	r3, [r7, #8]
 800554e:	2b00      	cmp	r3, #0
 8005550:	d003      	beq.n	800555a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	68ba      	ldr	r2, [r7, #8]
 8005556:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	2201      	movs	r2, #1
 800555e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	79fa      	ldrb	r2, [r7, #7]
 8005566:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8005568:	68f8      	ldr	r0, [r7, #12]
 800556a:	f001 fe61 	bl	8007230 <USBD_LL_Init>
 800556e:	4603      	mov	r3, r0
 8005570:	75fb      	strb	r3, [r7, #23]

  return ret;
 8005572:	7dfb      	ldrb	r3, [r7, #23]
}
 8005574:	4618      	mov	r0, r3
 8005576:	3718      	adds	r7, #24
 8005578:	46bd      	mov	sp, r7
 800557a:	bd80      	pop	{r7, pc}

0800557c <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800557c:	b580      	push	{r7, lr}
 800557e:	b084      	sub	sp, #16
 8005580:	af00      	add	r7, sp, #0
 8005582:	6078      	str	r0, [r7, #4]
 8005584:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005586:	2300      	movs	r3, #0
 8005588:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800558a:	683b      	ldr	r3, [r7, #0]
 800558c:	2b00      	cmp	r3, #0
 800558e:	d101      	bne.n	8005594 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8005590:	2303      	movs	r3, #3
 8005592:	e025      	b.n	80055e0 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	683a      	ldr	r2, [r7, #0]
 8005598:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	32ae      	adds	r2, #174	@ 0xae
 80055a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80055aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d00f      	beq.n	80055d0 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	32ae      	adds	r2, #174	@ 0xae
 80055ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80055be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055c0:	f107 020e 	add.w	r2, r7, #14
 80055c4:	4610      	mov	r0, r2
 80055c6:	4798      	blx	r3
 80055c8:	4602      	mov	r2, r0
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 80055d6:	1c5a      	adds	r2, r3, #1
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 80055de:	2300      	movs	r3, #0
}
 80055e0:	4618      	mov	r0, r3
 80055e2:	3710      	adds	r7, #16
 80055e4:	46bd      	mov	sp, r7
 80055e6:	bd80      	pop	{r7, pc}

080055e8 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80055e8:	b580      	push	{r7, lr}
 80055ea:	b082      	sub	sp, #8
 80055ec:	af00      	add	r7, sp, #0
 80055ee:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80055f0:	6878      	ldr	r0, [r7, #4]
 80055f2:	f001 fe69 	bl	80072c8 <USBD_LL_Start>
 80055f6:	4603      	mov	r3, r0
}
 80055f8:	4618      	mov	r0, r3
 80055fa:	3708      	adds	r7, #8
 80055fc:	46bd      	mov	sp, r7
 80055fe:	bd80      	pop	{r7, pc}

08005600 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8005600:	b480      	push	{r7}
 8005602:	b083      	sub	sp, #12
 8005604:	af00      	add	r7, sp, #0
 8005606:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005608:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800560a:	4618      	mov	r0, r3
 800560c:	370c      	adds	r7, #12
 800560e:	46bd      	mov	sp, r7
 8005610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005614:	4770      	bx	lr

08005616 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005616:	b580      	push	{r7, lr}
 8005618:	b084      	sub	sp, #16
 800561a:	af00      	add	r7, sp, #0
 800561c:	6078      	str	r0, [r7, #4]
 800561e:	460b      	mov	r3, r1
 8005620:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8005622:	2300      	movs	r3, #0
 8005624:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800562c:	2b00      	cmp	r3, #0
 800562e:	d009      	beq.n	8005644 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	78fa      	ldrb	r2, [r7, #3]
 800563a:	4611      	mov	r1, r2
 800563c:	6878      	ldr	r0, [r7, #4]
 800563e:	4798      	blx	r3
 8005640:	4603      	mov	r3, r0
 8005642:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005644:	7bfb      	ldrb	r3, [r7, #15]
}
 8005646:	4618      	mov	r0, r3
 8005648:	3710      	adds	r7, #16
 800564a:	46bd      	mov	sp, r7
 800564c:	bd80      	pop	{r7, pc}

0800564e <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800564e:	b580      	push	{r7, lr}
 8005650:	b084      	sub	sp, #16
 8005652:	af00      	add	r7, sp, #0
 8005654:	6078      	str	r0, [r7, #4]
 8005656:	460b      	mov	r3, r1
 8005658:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800565a:	2300      	movs	r3, #0
 800565c:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005664:	685b      	ldr	r3, [r3, #4]
 8005666:	78fa      	ldrb	r2, [r7, #3]
 8005668:	4611      	mov	r1, r2
 800566a:	6878      	ldr	r0, [r7, #4]
 800566c:	4798      	blx	r3
 800566e:	4603      	mov	r3, r0
 8005670:	2b00      	cmp	r3, #0
 8005672:	d001      	beq.n	8005678 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8005674:	2303      	movs	r3, #3
 8005676:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005678:	7bfb      	ldrb	r3, [r7, #15]
}
 800567a:	4618      	mov	r0, r3
 800567c:	3710      	adds	r7, #16
 800567e:	46bd      	mov	sp, r7
 8005680:	bd80      	pop	{r7, pc}

08005682 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8005682:	b580      	push	{r7, lr}
 8005684:	b084      	sub	sp, #16
 8005686:	af00      	add	r7, sp, #0
 8005688:	6078      	str	r0, [r7, #4]
 800568a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8005692:	6839      	ldr	r1, [r7, #0]
 8005694:	4618      	mov	r0, r3
 8005696:	f001 f90c 	bl	80068b2 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	2201      	movs	r2, #1
 800569e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 80056a8:	461a      	mov	r2, r3
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80056b6:	f003 031f 	and.w	r3, r3, #31
 80056ba:	2b02      	cmp	r3, #2
 80056bc:	d01a      	beq.n	80056f4 <USBD_LL_SetupStage+0x72>
 80056be:	2b02      	cmp	r3, #2
 80056c0:	d822      	bhi.n	8005708 <USBD_LL_SetupStage+0x86>
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d002      	beq.n	80056cc <USBD_LL_SetupStage+0x4a>
 80056c6:	2b01      	cmp	r3, #1
 80056c8:	d00a      	beq.n	80056e0 <USBD_LL_SetupStage+0x5e>
 80056ca:	e01d      	b.n	8005708 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80056d2:	4619      	mov	r1, r3
 80056d4:	6878      	ldr	r0, [r7, #4]
 80056d6:	f000 fb63 	bl	8005da0 <USBD_StdDevReq>
 80056da:	4603      	mov	r3, r0
 80056dc:	73fb      	strb	r3, [r7, #15]
      break;
 80056de:	e020      	b.n	8005722 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80056e6:	4619      	mov	r1, r3
 80056e8:	6878      	ldr	r0, [r7, #4]
 80056ea:	f000 fbcb 	bl	8005e84 <USBD_StdItfReq>
 80056ee:	4603      	mov	r3, r0
 80056f0:	73fb      	strb	r3, [r7, #15]
      break;
 80056f2:	e016      	b.n	8005722 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80056fa:	4619      	mov	r1, r3
 80056fc:	6878      	ldr	r0, [r7, #4]
 80056fe:	f000 fc2d 	bl	8005f5c <USBD_StdEPReq>
 8005702:	4603      	mov	r3, r0
 8005704:	73fb      	strb	r3, [r7, #15]
      break;
 8005706:	e00c      	b.n	8005722 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800570e:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8005712:	b2db      	uxtb	r3, r3
 8005714:	4619      	mov	r1, r3
 8005716:	6878      	ldr	r0, [r7, #4]
 8005718:	f001 fe36 	bl	8007388 <USBD_LL_StallEP>
 800571c:	4603      	mov	r3, r0
 800571e:	73fb      	strb	r3, [r7, #15]
      break;
 8005720:	bf00      	nop
  }

  return ret;
 8005722:	7bfb      	ldrb	r3, [r7, #15]
}
 8005724:	4618      	mov	r0, r3
 8005726:	3710      	adds	r7, #16
 8005728:	46bd      	mov	sp, r7
 800572a:	bd80      	pop	{r7, pc}

0800572c <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800572c:	b580      	push	{r7, lr}
 800572e:	b086      	sub	sp, #24
 8005730:	af00      	add	r7, sp, #0
 8005732:	60f8      	str	r0, [r7, #12]
 8005734:	460b      	mov	r3, r1
 8005736:	607a      	str	r2, [r7, #4]
 8005738:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800573a:	2300      	movs	r3, #0
 800573c:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800573e:	7afb      	ldrb	r3, [r7, #11]
 8005740:	2b00      	cmp	r3, #0
 8005742:	d16e      	bne.n	8005822 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800574a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8005752:	2b03      	cmp	r3, #3
 8005754:	f040 8098 	bne.w	8005888 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8005758:	693b      	ldr	r3, [r7, #16]
 800575a:	689a      	ldr	r2, [r3, #8]
 800575c:	693b      	ldr	r3, [r7, #16]
 800575e:	68db      	ldr	r3, [r3, #12]
 8005760:	429a      	cmp	r2, r3
 8005762:	d913      	bls.n	800578c <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8005764:	693b      	ldr	r3, [r7, #16]
 8005766:	689a      	ldr	r2, [r3, #8]
 8005768:	693b      	ldr	r3, [r7, #16]
 800576a:	68db      	ldr	r3, [r3, #12]
 800576c:	1ad2      	subs	r2, r2, r3
 800576e:	693b      	ldr	r3, [r7, #16]
 8005770:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8005772:	693b      	ldr	r3, [r7, #16]
 8005774:	68da      	ldr	r2, [r3, #12]
 8005776:	693b      	ldr	r3, [r7, #16]
 8005778:	689b      	ldr	r3, [r3, #8]
 800577a:	4293      	cmp	r3, r2
 800577c:	bf28      	it	cs
 800577e:	4613      	movcs	r3, r2
 8005780:	461a      	mov	r2, r3
 8005782:	6879      	ldr	r1, [r7, #4]
 8005784:	68f8      	ldr	r0, [r7, #12]
 8005786:	f001 f994 	bl	8006ab2 <USBD_CtlContinueRx>
 800578a:	e07d      	b.n	8005888 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8005792:	f003 031f 	and.w	r3, r3, #31
 8005796:	2b02      	cmp	r3, #2
 8005798:	d014      	beq.n	80057c4 <USBD_LL_DataOutStage+0x98>
 800579a:	2b02      	cmp	r3, #2
 800579c:	d81d      	bhi.n	80057da <USBD_LL_DataOutStage+0xae>
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d002      	beq.n	80057a8 <USBD_LL_DataOutStage+0x7c>
 80057a2:	2b01      	cmp	r3, #1
 80057a4:	d003      	beq.n	80057ae <USBD_LL_DataOutStage+0x82>
 80057a6:	e018      	b.n	80057da <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 80057a8:	2300      	movs	r3, #0
 80057aa:	75bb      	strb	r3, [r7, #22]
            break;
 80057ac:	e018      	b.n	80057e0 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 80057b4:	b2db      	uxtb	r3, r3
 80057b6:	4619      	mov	r1, r3
 80057b8:	68f8      	ldr	r0, [r7, #12]
 80057ba:	f000 fa64 	bl	8005c86 <USBD_CoreFindIF>
 80057be:	4603      	mov	r3, r0
 80057c0:	75bb      	strb	r3, [r7, #22]
            break;
 80057c2:	e00d      	b.n	80057e0 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 80057ca:	b2db      	uxtb	r3, r3
 80057cc:	4619      	mov	r1, r3
 80057ce:	68f8      	ldr	r0, [r7, #12]
 80057d0:	f000 fa66 	bl	8005ca0 <USBD_CoreFindEP>
 80057d4:	4603      	mov	r3, r0
 80057d6:	75bb      	strb	r3, [r7, #22]
            break;
 80057d8:	e002      	b.n	80057e0 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 80057da:	2300      	movs	r3, #0
 80057dc:	75bb      	strb	r3, [r7, #22]
            break;
 80057de:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 80057e0:	7dbb      	ldrb	r3, [r7, #22]
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d119      	bne.n	800581a <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80057ec:	b2db      	uxtb	r3, r3
 80057ee:	2b03      	cmp	r3, #3
 80057f0:	d113      	bne.n	800581a <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 80057f2:	7dba      	ldrb	r2, [r7, #22]
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	32ae      	adds	r2, #174	@ 0xae
 80057f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80057fc:	691b      	ldr	r3, [r3, #16]
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d00b      	beq.n	800581a <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8005802:	7dba      	ldrb	r2, [r7, #22]
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800580a:	7dba      	ldrb	r2, [r7, #22]
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	32ae      	adds	r2, #174	@ 0xae
 8005810:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005814:	691b      	ldr	r3, [r3, #16]
 8005816:	68f8      	ldr	r0, [r7, #12]
 8005818:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800581a:	68f8      	ldr	r0, [r7, #12]
 800581c:	f001 f95a 	bl	8006ad4 <USBD_CtlSendStatus>
 8005820:	e032      	b.n	8005888 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8005822:	7afb      	ldrb	r3, [r7, #11]
 8005824:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005828:	b2db      	uxtb	r3, r3
 800582a:	4619      	mov	r1, r3
 800582c:	68f8      	ldr	r0, [r7, #12]
 800582e:	f000 fa37 	bl	8005ca0 <USBD_CoreFindEP>
 8005832:	4603      	mov	r3, r0
 8005834:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005836:	7dbb      	ldrb	r3, [r7, #22]
 8005838:	2bff      	cmp	r3, #255	@ 0xff
 800583a:	d025      	beq.n	8005888 <USBD_LL_DataOutStage+0x15c>
 800583c:	7dbb      	ldrb	r3, [r7, #22]
 800583e:	2b00      	cmp	r3, #0
 8005840:	d122      	bne.n	8005888 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005848:	b2db      	uxtb	r3, r3
 800584a:	2b03      	cmp	r3, #3
 800584c:	d117      	bne.n	800587e <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800584e:	7dba      	ldrb	r2, [r7, #22]
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	32ae      	adds	r2, #174	@ 0xae
 8005854:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005858:	699b      	ldr	r3, [r3, #24]
 800585a:	2b00      	cmp	r3, #0
 800585c:	d00f      	beq.n	800587e <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800585e:	7dba      	ldrb	r2, [r7, #22]
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8005866:	7dba      	ldrb	r2, [r7, #22]
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	32ae      	adds	r2, #174	@ 0xae
 800586c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005870:	699b      	ldr	r3, [r3, #24]
 8005872:	7afa      	ldrb	r2, [r7, #11]
 8005874:	4611      	mov	r1, r2
 8005876:	68f8      	ldr	r0, [r7, #12]
 8005878:	4798      	blx	r3
 800587a:	4603      	mov	r3, r0
 800587c:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800587e:	7dfb      	ldrb	r3, [r7, #23]
 8005880:	2b00      	cmp	r3, #0
 8005882:	d001      	beq.n	8005888 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8005884:	7dfb      	ldrb	r3, [r7, #23]
 8005886:	e000      	b.n	800588a <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8005888:	2300      	movs	r3, #0
}
 800588a:	4618      	mov	r0, r3
 800588c:	3718      	adds	r7, #24
 800588e:	46bd      	mov	sp, r7
 8005890:	bd80      	pop	{r7, pc}

08005892 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8005892:	b580      	push	{r7, lr}
 8005894:	b086      	sub	sp, #24
 8005896:	af00      	add	r7, sp, #0
 8005898:	60f8      	str	r0, [r7, #12]
 800589a:	460b      	mov	r3, r1
 800589c:	607a      	str	r2, [r7, #4]
 800589e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 80058a0:	7afb      	ldrb	r3, [r7, #11]
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d16f      	bne.n	8005986 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	3314      	adds	r3, #20
 80058aa:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80058b2:	2b02      	cmp	r3, #2
 80058b4:	d15a      	bne.n	800596c <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 80058b6:	693b      	ldr	r3, [r7, #16]
 80058b8:	689a      	ldr	r2, [r3, #8]
 80058ba:	693b      	ldr	r3, [r7, #16]
 80058bc:	68db      	ldr	r3, [r3, #12]
 80058be:	429a      	cmp	r2, r3
 80058c0:	d914      	bls.n	80058ec <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80058c2:	693b      	ldr	r3, [r7, #16]
 80058c4:	689a      	ldr	r2, [r3, #8]
 80058c6:	693b      	ldr	r3, [r7, #16]
 80058c8:	68db      	ldr	r3, [r3, #12]
 80058ca:	1ad2      	subs	r2, r2, r3
 80058cc:	693b      	ldr	r3, [r7, #16]
 80058ce:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80058d0:	693b      	ldr	r3, [r7, #16]
 80058d2:	689b      	ldr	r3, [r3, #8]
 80058d4:	461a      	mov	r2, r3
 80058d6:	6879      	ldr	r1, [r7, #4]
 80058d8:	68f8      	ldr	r0, [r7, #12]
 80058da:	f001 f8bc 	bl	8006a56 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80058de:	2300      	movs	r3, #0
 80058e0:	2200      	movs	r2, #0
 80058e2:	2100      	movs	r1, #0
 80058e4:	68f8      	ldr	r0, [r7, #12]
 80058e6:	f001 fdf9 	bl	80074dc <USBD_LL_PrepareReceive>
 80058ea:	e03f      	b.n	800596c <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80058ec:	693b      	ldr	r3, [r7, #16]
 80058ee:	68da      	ldr	r2, [r3, #12]
 80058f0:	693b      	ldr	r3, [r7, #16]
 80058f2:	689b      	ldr	r3, [r3, #8]
 80058f4:	429a      	cmp	r2, r3
 80058f6:	d11c      	bne.n	8005932 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80058f8:	693b      	ldr	r3, [r7, #16]
 80058fa:	685a      	ldr	r2, [r3, #4]
 80058fc:	693b      	ldr	r3, [r7, #16]
 80058fe:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8005900:	429a      	cmp	r2, r3
 8005902:	d316      	bcc.n	8005932 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8005904:	693b      	ldr	r3, [r7, #16]
 8005906:	685a      	ldr	r2, [r3, #4]
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800590e:	429a      	cmp	r2, r3
 8005910:	d20f      	bcs.n	8005932 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8005912:	2200      	movs	r2, #0
 8005914:	2100      	movs	r1, #0
 8005916:	68f8      	ldr	r0, [r7, #12]
 8005918:	f001 f89d 	bl	8006a56 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	2200      	movs	r2, #0
 8005920:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005924:	2300      	movs	r3, #0
 8005926:	2200      	movs	r2, #0
 8005928:	2100      	movs	r1, #0
 800592a:	68f8      	ldr	r0, [r7, #12]
 800592c:	f001 fdd6 	bl	80074dc <USBD_LL_PrepareReceive>
 8005930:	e01c      	b.n	800596c <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005938:	b2db      	uxtb	r3, r3
 800593a:	2b03      	cmp	r3, #3
 800593c:	d10f      	bne.n	800595e <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005944:	68db      	ldr	r3, [r3, #12]
 8005946:	2b00      	cmp	r3, #0
 8005948:	d009      	beq.n	800595e <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	2200      	movs	r2, #0
 800594e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005958:	68db      	ldr	r3, [r3, #12]
 800595a:	68f8      	ldr	r0, [r7, #12]
 800595c:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800595e:	2180      	movs	r1, #128	@ 0x80
 8005960:	68f8      	ldr	r0, [r7, #12]
 8005962:	f001 fd11 	bl	8007388 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8005966:	68f8      	ldr	r0, [r7, #12]
 8005968:	f001 f8c7 	bl	8006afa <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8005972:	2b00      	cmp	r3, #0
 8005974:	d03a      	beq.n	80059ec <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8005976:	68f8      	ldr	r0, [r7, #12]
 8005978:	f7ff fe42 	bl	8005600 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	2200      	movs	r2, #0
 8005980:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8005984:	e032      	b.n	80059ec <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8005986:	7afb      	ldrb	r3, [r7, #11]
 8005988:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800598c:	b2db      	uxtb	r3, r3
 800598e:	4619      	mov	r1, r3
 8005990:	68f8      	ldr	r0, [r7, #12]
 8005992:	f000 f985 	bl	8005ca0 <USBD_CoreFindEP>
 8005996:	4603      	mov	r3, r0
 8005998:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800599a:	7dfb      	ldrb	r3, [r7, #23]
 800599c:	2bff      	cmp	r3, #255	@ 0xff
 800599e:	d025      	beq.n	80059ec <USBD_LL_DataInStage+0x15a>
 80059a0:	7dfb      	ldrb	r3, [r7, #23]
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d122      	bne.n	80059ec <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80059ac:	b2db      	uxtb	r3, r3
 80059ae:	2b03      	cmp	r3, #3
 80059b0:	d11c      	bne.n	80059ec <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 80059b2:	7dfa      	ldrb	r2, [r7, #23]
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	32ae      	adds	r2, #174	@ 0xae
 80059b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80059bc:	695b      	ldr	r3, [r3, #20]
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d014      	beq.n	80059ec <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 80059c2:	7dfa      	ldrb	r2, [r7, #23]
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 80059ca:	7dfa      	ldrb	r2, [r7, #23]
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	32ae      	adds	r2, #174	@ 0xae
 80059d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80059d4:	695b      	ldr	r3, [r3, #20]
 80059d6:	7afa      	ldrb	r2, [r7, #11]
 80059d8:	4611      	mov	r1, r2
 80059da:	68f8      	ldr	r0, [r7, #12]
 80059dc:	4798      	blx	r3
 80059de:	4603      	mov	r3, r0
 80059e0:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 80059e2:	7dbb      	ldrb	r3, [r7, #22]
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d001      	beq.n	80059ec <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 80059e8:	7dbb      	ldrb	r3, [r7, #22]
 80059ea:	e000      	b.n	80059ee <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 80059ec:	2300      	movs	r3, #0
}
 80059ee:	4618      	mov	r0, r3
 80059f0:	3718      	adds	r7, #24
 80059f2:	46bd      	mov	sp, r7
 80059f4:	bd80      	pop	{r7, pc}

080059f6 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80059f6:	b580      	push	{r7, lr}
 80059f8:	b084      	sub	sp, #16
 80059fa:	af00      	add	r7, sp, #0
 80059fc:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 80059fe:	2300      	movs	r3, #0
 8005a00:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	2201      	movs	r2, #1
 8005a06:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	2200      	movs	r2, #0
 8005a0e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	2200      	movs	r2, #0
 8005a16:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	2200      	movs	r2, #0
 8005a1c:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	2200      	movs	r2, #0
 8005a24:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d014      	beq.n	8005a5c <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005a38:	685b      	ldr	r3, [r3, #4]
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d00e      	beq.n	8005a5c <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005a44:	685b      	ldr	r3, [r3, #4]
 8005a46:	687a      	ldr	r2, [r7, #4]
 8005a48:	6852      	ldr	r2, [r2, #4]
 8005a4a:	b2d2      	uxtb	r2, r2
 8005a4c:	4611      	mov	r1, r2
 8005a4e:	6878      	ldr	r0, [r7, #4]
 8005a50:	4798      	blx	r3
 8005a52:	4603      	mov	r3, r0
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d001      	beq.n	8005a5c <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8005a58:	2303      	movs	r3, #3
 8005a5a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005a5c:	2340      	movs	r3, #64	@ 0x40
 8005a5e:	2200      	movs	r2, #0
 8005a60:	2100      	movs	r1, #0
 8005a62:	6878      	ldr	r0, [r7, #4]
 8005a64:	f001 fc4b 	bl	80072fe <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	2201      	movs	r2, #1
 8005a6c:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	2240      	movs	r2, #64	@ 0x40
 8005a74:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005a78:	2340      	movs	r3, #64	@ 0x40
 8005a7a:	2200      	movs	r2, #0
 8005a7c:	2180      	movs	r1, #128	@ 0x80
 8005a7e:	6878      	ldr	r0, [r7, #4]
 8005a80:	f001 fc3d 	bl	80072fe <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	2201      	movs	r2, #1
 8005a88:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	2240      	movs	r2, #64	@ 0x40
 8005a8e:	621a      	str	r2, [r3, #32]

  return ret;
 8005a90:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a92:	4618      	mov	r0, r3
 8005a94:	3710      	adds	r7, #16
 8005a96:	46bd      	mov	sp, r7
 8005a98:	bd80      	pop	{r7, pc}

08005a9a <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8005a9a:	b480      	push	{r7}
 8005a9c:	b083      	sub	sp, #12
 8005a9e:	af00      	add	r7, sp, #0
 8005aa0:	6078      	str	r0, [r7, #4]
 8005aa2:	460b      	mov	r3, r1
 8005aa4:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	78fa      	ldrb	r2, [r7, #3]
 8005aaa:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8005aac:	2300      	movs	r3, #0
}
 8005aae:	4618      	mov	r0, r3
 8005ab0:	370c      	adds	r7, #12
 8005ab2:	46bd      	mov	sp, r7
 8005ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab8:	4770      	bx	lr

08005aba <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8005aba:	b480      	push	{r7}
 8005abc:	b083      	sub	sp, #12
 8005abe:	af00      	add	r7, sp, #0
 8005ac0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005ac8:	b2db      	uxtb	r3, r3
 8005aca:	2b04      	cmp	r3, #4
 8005acc:	d006      	beq.n	8005adc <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005ad4:	b2da      	uxtb	r2, r3
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	2204      	movs	r2, #4
 8005ae0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8005ae4:	2300      	movs	r3, #0
}
 8005ae6:	4618      	mov	r0, r3
 8005ae8:	370c      	adds	r7, #12
 8005aea:	46bd      	mov	sp, r7
 8005aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af0:	4770      	bx	lr

08005af2 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8005af2:	b480      	push	{r7}
 8005af4:	b083      	sub	sp, #12
 8005af6:	af00      	add	r7, sp, #0
 8005af8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005b00:	b2db      	uxtb	r3, r3
 8005b02:	2b04      	cmp	r3, #4
 8005b04:	d106      	bne.n	8005b14 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8005b0c:	b2da      	uxtb	r2, r3
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8005b14:	2300      	movs	r3, #0
}
 8005b16:	4618      	mov	r0, r3
 8005b18:	370c      	adds	r7, #12
 8005b1a:	46bd      	mov	sp, r7
 8005b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b20:	4770      	bx	lr

08005b22 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8005b22:	b580      	push	{r7, lr}
 8005b24:	b082      	sub	sp, #8
 8005b26:	af00      	add	r7, sp, #0
 8005b28:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005b30:	b2db      	uxtb	r3, r3
 8005b32:	2b03      	cmp	r3, #3
 8005b34:	d110      	bne.n	8005b58 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d00b      	beq.n	8005b58 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005b46:	69db      	ldr	r3, [r3, #28]
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d005      	beq.n	8005b58 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005b52:	69db      	ldr	r3, [r3, #28]
 8005b54:	6878      	ldr	r0, [r7, #4]
 8005b56:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8005b58:	2300      	movs	r3, #0
}
 8005b5a:	4618      	mov	r0, r3
 8005b5c:	3708      	adds	r7, #8
 8005b5e:	46bd      	mov	sp, r7
 8005b60:	bd80      	pop	{r7, pc}

08005b62 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8005b62:	b580      	push	{r7, lr}
 8005b64:	b082      	sub	sp, #8
 8005b66:	af00      	add	r7, sp, #0
 8005b68:	6078      	str	r0, [r7, #4]
 8005b6a:	460b      	mov	r3, r1
 8005b6c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	32ae      	adds	r2, #174	@ 0xae
 8005b78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d101      	bne.n	8005b84 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8005b80:	2303      	movs	r3, #3
 8005b82:	e01c      	b.n	8005bbe <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005b8a:	b2db      	uxtb	r3, r3
 8005b8c:	2b03      	cmp	r3, #3
 8005b8e:	d115      	bne.n	8005bbc <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	32ae      	adds	r2, #174	@ 0xae
 8005b9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b9e:	6a1b      	ldr	r3, [r3, #32]
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d00b      	beq.n	8005bbc <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	32ae      	adds	r2, #174	@ 0xae
 8005bae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005bb2:	6a1b      	ldr	r3, [r3, #32]
 8005bb4:	78fa      	ldrb	r2, [r7, #3]
 8005bb6:	4611      	mov	r1, r2
 8005bb8:	6878      	ldr	r0, [r7, #4]
 8005bba:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005bbc:	2300      	movs	r3, #0
}
 8005bbe:	4618      	mov	r0, r3
 8005bc0:	3708      	adds	r7, #8
 8005bc2:	46bd      	mov	sp, r7
 8005bc4:	bd80      	pop	{r7, pc}

08005bc6 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8005bc6:	b580      	push	{r7, lr}
 8005bc8:	b082      	sub	sp, #8
 8005bca:	af00      	add	r7, sp, #0
 8005bcc:	6078      	str	r0, [r7, #4]
 8005bce:	460b      	mov	r3, r1
 8005bd0:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	32ae      	adds	r2, #174	@ 0xae
 8005bdc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d101      	bne.n	8005be8 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8005be4:	2303      	movs	r3, #3
 8005be6:	e01c      	b.n	8005c22 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005bee:	b2db      	uxtb	r3, r3
 8005bf0:	2b03      	cmp	r3, #3
 8005bf2:	d115      	bne.n	8005c20 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	32ae      	adds	r2, #174	@ 0xae
 8005bfe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d00b      	beq.n	8005c20 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	32ae      	adds	r2, #174	@ 0xae
 8005c12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c18:	78fa      	ldrb	r2, [r7, #3]
 8005c1a:	4611      	mov	r1, r2
 8005c1c:	6878      	ldr	r0, [r7, #4]
 8005c1e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005c20:	2300      	movs	r3, #0
}
 8005c22:	4618      	mov	r0, r3
 8005c24:	3708      	adds	r7, #8
 8005c26:	46bd      	mov	sp, r7
 8005c28:	bd80      	pop	{r7, pc}

08005c2a <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8005c2a:	b480      	push	{r7}
 8005c2c:	b083      	sub	sp, #12
 8005c2e:	af00      	add	r7, sp, #0
 8005c30:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005c32:	2300      	movs	r3, #0
}
 8005c34:	4618      	mov	r0, r3
 8005c36:	370c      	adds	r7, #12
 8005c38:	46bd      	mov	sp, r7
 8005c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c3e:	4770      	bx	lr

08005c40 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8005c40:	b580      	push	{r7, lr}
 8005c42:	b084      	sub	sp, #16
 8005c44:	af00      	add	r7, sp, #0
 8005c46:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8005c48:	2300      	movs	r3, #0
 8005c4a:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	2201      	movs	r2, #1
 8005c50:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d00e      	beq.n	8005c7c <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005c64:	685b      	ldr	r3, [r3, #4]
 8005c66:	687a      	ldr	r2, [r7, #4]
 8005c68:	6852      	ldr	r2, [r2, #4]
 8005c6a:	b2d2      	uxtb	r2, r2
 8005c6c:	4611      	mov	r1, r2
 8005c6e:	6878      	ldr	r0, [r7, #4]
 8005c70:	4798      	blx	r3
 8005c72:	4603      	mov	r3, r0
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d001      	beq.n	8005c7c <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8005c78:	2303      	movs	r3, #3
 8005c7a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005c7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c7e:	4618      	mov	r0, r3
 8005c80:	3710      	adds	r7, #16
 8005c82:	46bd      	mov	sp, r7
 8005c84:	bd80      	pop	{r7, pc}

08005c86 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8005c86:	b480      	push	{r7}
 8005c88:	b083      	sub	sp, #12
 8005c8a:	af00      	add	r7, sp, #0
 8005c8c:	6078      	str	r0, [r7, #4]
 8005c8e:	460b      	mov	r3, r1
 8005c90:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8005c92:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8005c94:	4618      	mov	r0, r3
 8005c96:	370c      	adds	r7, #12
 8005c98:	46bd      	mov	sp, r7
 8005c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c9e:	4770      	bx	lr

08005ca0 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8005ca0:	b480      	push	{r7}
 8005ca2:	b083      	sub	sp, #12
 8005ca4:	af00      	add	r7, sp, #0
 8005ca6:	6078      	str	r0, [r7, #4]
 8005ca8:	460b      	mov	r3, r1
 8005caa:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8005cac:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8005cae:	4618      	mov	r0, r3
 8005cb0:	370c      	adds	r7, #12
 8005cb2:	46bd      	mov	sp, r7
 8005cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb8:	4770      	bx	lr

08005cba <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8005cba:	b580      	push	{r7, lr}
 8005cbc:	b086      	sub	sp, #24
 8005cbe:	af00      	add	r7, sp, #0
 8005cc0:	6078      	str	r0, [r7, #4]
 8005cc2:	460b      	mov	r3, r1
 8005cc4:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8005cce:	2300      	movs	r3, #0
 8005cd0:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	885b      	ldrh	r3, [r3, #2]
 8005cd6:	b29b      	uxth	r3, r3
 8005cd8:	68fa      	ldr	r2, [r7, #12]
 8005cda:	7812      	ldrb	r2, [r2, #0]
 8005cdc:	4293      	cmp	r3, r2
 8005cde:	d91f      	bls.n	8005d20 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	781b      	ldrb	r3, [r3, #0]
 8005ce4:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8005ce6:	e013      	b.n	8005d10 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8005ce8:	f107 030a 	add.w	r3, r7, #10
 8005cec:	4619      	mov	r1, r3
 8005cee:	6978      	ldr	r0, [r7, #20]
 8005cf0:	f000 f81b 	bl	8005d2a <USBD_GetNextDesc>
 8005cf4:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8005cf6:	697b      	ldr	r3, [r7, #20]
 8005cf8:	785b      	ldrb	r3, [r3, #1]
 8005cfa:	2b05      	cmp	r3, #5
 8005cfc:	d108      	bne.n	8005d10 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8005cfe:	697b      	ldr	r3, [r7, #20]
 8005d00:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8005d02:	693b      	ldr	r3, [r7, #16]
 8005d04:	789b      	ldrb	r3, [r3, #2]
 8005d06:	78fa      	ldrb	r2, [r7, #3]
 8005d08:	429a      	cmp	r2, r3
 8005d0a:	d008      	beq.n	8005d1e <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8005d0c:	2300      	movs	r3, #0
 8005d0e:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	885b      	ldrh	r3, [r3, #2]
 8005d14:	b29a      	uxth	r2, r3
 8005d16:	897b      	ldrh	r3, [r7, #10]
 8005d18:	429a      	cmp	r2, r3
 8005d1a:	d8e5      	bhi.n	8005ce8 <USBD_GetEpDesc+0x2e>
 8005d1c:	e000      	b.n	8005d20 <USBD_GetEpDesc+0x66>
          break;
 8005d1e:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8005d20:	693b      	ldr	r3, [r7, #16]
}
 8005d22:	4618      	mov	r0, r3
 8005d24:	3718      	adds	r7, #24
 8005d26:	46bd      	mov	sp, r7
 8005d28:	bd80      	pop	{r7, pc}

08005d2a <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8005d2a:	b480      	push	{r7}
 8005d2c:	b085      	sub	sp, #20
 8005d2e:	af00      	add	r7, sp, #0
 8005d30:	6078      	str	r0, [r7, #4]
 8005d32:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8005d38:	683b      	ldr	r3, [r7, #0]
 8005d3a:	881b      	ldrh	r3, [r3, #0]
 8005d3c:	68fa      	ldr	r2, [r7, #12]
 8005d3e:	7812      	ldrb	r2, [r2, #0]
 8005d40:	4413      	add	r3, r2
 8005d42:	b29a      	uxth	r2, r3
 8005d44:	683b      	ldr	r3, [r7, #0]
 8005d46:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	781b      	ldrb	r3, [r3, #0]
 8005d4c:	461a      	mov	r2, r3
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	4413      	add	r3, r2
 8005d52:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8005d54:	68fb      	ldr	r3, [r7, #12]
}
 8005d56:	4618      	mov	r0, r3
 8005d58:	3714      	adds	r7, #20
 8005d5a:	46bd      	mov	sp, r7
 8005d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d60:	4770      	bx	lr

08005d62 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8005d62:	b480      	push	{r7}
 8005d64:	b087      	sub	sp, #28
 8005d66:	af00      	add	r7, sp, #0
 8005d68:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8005d6e:	697b      	ldr	r3, [r7, #20]
 8005d70:	781b      	ldrb	r3, [r3, #0]
 8005d72:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8005d74:	697b      	ldr	r3, [r7, #20]
 8005d76:	3301      	adds	r3, #1
 8005d78:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8005d7a:	697b      	ldr	r3, [r7, #20]
 8005d7c:	781b      	ldrb	r3, [r3, #0]
 8005d7e:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8005d80:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8005d84:	021b      	lsls	r3, r3, #8
 8005d86:	b21a      	sxth	r2, r3
 8005d88:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8005d8c:	4313      	orrs	r3, r2
 8005d8e:	b21b      	sxth	r3, r3
 8005d90:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8005d92:	89fb      	ldrh	r3, [r7, #14]
}
 8005d94:	4618      	mov	r0, r3
 8005d96:	371c      	adds	r7, #28
 8005d98:	46bd      	mov	sp, r7
 8005d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d9e:	4770      	bx	lr

08005da0 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005da0:	b580      	push	{r7, lr}
 8005da2:	b084      	sub	sp, #16
 8005da4:	af00      	add	r7, sp, #0
 8005da6:	6078      	str	r0, [r7, #4]
 8005da8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005daa:	2300      	movs	r3, #0
 8005dac:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005dae:	683b      	ldr	r3, [r7, #0]
 8005db0:	781b      	ldrb	r3, [r3, #0]
 8005db2:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8005db6:	2b40      	cmp	r3, #64	@ 0x40
 8005db8:	d005      	beq.n	8005dc6 <USBD_StdDevReq+0x26>
 8005dba:	2b40      	cmp	r3, #64	@ 0x40
 8005dbc:	d857      	bhi.n	8005e6e <USBD_StdDevReq+0xce>
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d00f      	beq.n	8005de2 <USBD_StdDevReq+0x42>
 8005dc2:	2b20      	cmp	r3, #32
 8005dc4:	d153      	bne.n	8005e6e <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	32ae      	adds	r2, #174	@ 0xae
 8005dd0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005dd4:	689b      	ldr	r3, [r3, #8]
 8005dd6:	6839      	ldr	r1, [r7, #0]
 8005dd8:	6878      	ldr	r0, [r7, #4]
 8005dda:	4798      	blx	r3
 8005ddc:	4603      	mov	r3, r0
 8005dde:	73fb      	strb	r3, [r7, #15]
      break;
 8005de0:	e04a      	b.n	8005e78 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005de2:	683b      	ldr	r3, [r7, #0]
 8005de4:	785b      	ldrb	r3, [r3, #1]
 8005de6:	2b09      	cmp	r3, #9
 8005de8:	d83b      	bhi.n	8005e62 <USBD_StdDevReq+0xc2>
 8005dea:	a201      	add	r2, pc, #4	@ (adr r2, 8005df0 <USBD_StdDevReq+0x50>)
 8005dec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005df0:	08005e45 	.word	0x08005e45
 8005df4:	08005e59 	.word	0x08005e59
 8005df8:	08005e63 	.word	0x08005e63
 8005dfc:	08005e4f 	.word	0x08005e4f
 8005e00:	08005e63 	.word	0x08005e63
 8005e04:	08005e23 	.word	0x08005e23
 8005e08:	08005e19 	.word	0x08005e19
 8005e0c:	08005e63 	.word	0x08005e63
 8005e10:	08005e3b 	.word	0x08005e3b
 8005e14:	08005e2d 	.word	0x08005e2d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8005e18:	6839      	ldr	r1, [r7, #0]
 8005e1a:	6878      	ldr	r0, [r7, #4]
 8005e1c:	f000 fa3c 	bl	8006298 <USBD_GetDescriptor>
          break;
 8005e20:	e024      	b.n	8005e6c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8005e22:	6839      	ldr	r1, [r7, #0]
 8005e24:	6878      	ldr	r0, [r7, #4]
 8005e26:	f000 fba1 	bl	800656c <USBD_SetAddress>
          break;
 8005e2a:	e01f      	b.n	8005e6c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8005e2c:	6839      	ldr	r1, [r7, #0]
 8005e2e:	6878      	ldr	r0, [r7, #4]
 8005e30:	f000 fbe0 	bl	80065f4 <USBD_SetConfig>
 8005e34:	4603      	mov	r3, r0
 8005e36:	73fb      	strb	r3, [r7, #15]
          break;
 8005e38:	e018      	b.n	8005e6c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8005e3a:	6839      	ldr	r1, [r7, #0]
 8005e3c:	6878      	ldr	r0, [r7, #4]
 8005e3e:	f000 fc83 	bl	8006748 <USBD_GetConfig>
          break;
 8005e42:	e013      	b.n	8005e6c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8005e44:	6839      	ldr	r1, [r7, #0]
 8005e46:	6878      	ldr	r0, [r7, #4]
 8005e48:	f000 fcb4 	bl	80067b4 <USBD_GetStatus>
          break;
 8005e4c:	e00e      	b.n	8005e6c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8005e4e:	6839      	ldr	r1, [r7, #0]
 8005e50:	6878      	ldr	r0, [r7, #4]
 8005e52:	f000 fce3 	bl	800681c <USBD_SetFeature>
          break;
 8005e56:	e009      	b.n	8005e6c <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8005e58:	6839      	ldr	r1, [r7, #0]
 8005e5a:	6878      	ldr	r0, [r7, #4]
 8005e5c:	f000 fd07 	bl	800686e <USBD_ClrFeature>
          break;
 8005e60:	e004      	b.n	8005e6c <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8005e62:	6839      	ldr	r1, [r7, #0]
 8005e64:	6878      	ldr	r0, [r7, #4]
 8005e66:	f000 fd5e 	bl	8006926 <USBD_CtlError>
          break;
 8005e6a:	bf00      	nop
      }
      break;
 8005e6c:	e004      	b.n	8005e78 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8005e6e:	6839      	ldr	r1, [r7, #0]
 8005e70:	6878      	ldr	r0, [r7, #4]
 8005e72:	f000 fd58 	bl	8006926 <USBD_CtlError>
      break;
 8005e76:	bf00      	nop
  }

  return ret;
 8005e78:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e7a:	4618      	mov	r0, r3
 8005e7c:	3710      	adds	r7, #16
 8005e7e:	46bd      	mov	sp, r7
 8005e80:	bd80      	pop	{r7, pc}
 8005e82:	bf00      	nop

08005e84 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005e84:	b580      	push	{r7, lr}
 8005e86:	b084      	sub	sp, #16
 8005e88:	af00      	add	r7, sp, #0
 8005e8a:	6078      	str	r0, [r7, #4]
 8005e8c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005e8e:	2300      	movs	r3, #0
 8005e90:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005e92:	683b      	ldr	r3, [r7, #0]
 8005e94:	781b      	ldrb	r3, [r3, #0]
 8005e96:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8005e9a:	2b40      	cmp	r3, #64	@ 0x40
 8005e9c:	d005      	beq.n	8005eaa <USBD_StdItfReq+0x26>
 8005e9e:	2b40      	cmp	r3, #64	@ 0x40
 8005ea0:	d852      	bhi.n	8005f48 <USBD_StdItfReq+0xc4>
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d001      	beq.n	8005eaa <USBD_StdItfReq+0x26>
 8005ea6:	2b20      	cmp	r3, #32
 8005ea8:	d14e      	bne.n	8005f48 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005eb0:	b2db      	uxtb	r3, r3
 8005eb2:	3b01      	subs	r3, #1
 8005eb4:	2b02      	cmp	r3, #2
 8005eb6:	d840      	bhi.n	8005f3a <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8005eb8:	683b      	ldr	r3, [r7, #0]
 8005eba:	889b      	ldrh	r3, [r3, #4]
 8005ebc:	b2db      	uxtb	r3, r3
 8005ebe:	2b01      	cmp	r3, #1
 8005ec0:	d836      	bhi.n	8005f30 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8005ec2:	683b      	ldr	r3, [r7, #0]
 8005ec4:	889b      	ldrh	r3, [r3, #4]
 8005ec6:	b2db      	uxtb	r3, r3
 8005ec8:	4619      	mov	r1, r3
 8005eca:	6878      	ldr	r0, [r7, #4]
 8005ecc:	f7ff fedb 	bl	8005c86 <USBD_CoreFindIF>
 8005ed0:	4603      	mov	r3, r0
 8005ed2:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005ed4:	7bbb      	ldrb	r3, [r7, #14]
 8005ed6:	2bff      	cmp	r3, #255	@ 0xff
 8005ed8:	d01d      	beq.n	8005f16 <USBD_StdItfReq+0x92>
 8005eda:	7bbb      	ldrb	r3, [r7, #14]
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d11a      	bne.n	8005f16 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8005ee0:	7bba      	ldrb	r2, [r7, #14]
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	32ae      	adds	r2, #174	@ 0xae
 8005ee6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005eea:	689b      	ldr	r3, [r3, #8]
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d00f      	beq.n	8005f10 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8005ef0:	7bba      	ldrb	r2, [r7, #14]
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8005ef8:	7bba      	ldrb	r2, [r7, #14]
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	32ae      	adds	r2, #174	@ 0xae
 8005efe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f02:	689b      	ldr	r3, [r3, #8]
 8005f04:	6839      	ldr	r1, [r7, #0]
 8005f06:	6878      	ldr	r0, [r7, #4]
 8005f08:	4798      	blx	r3
 8005f0a:	4603      	mov	r3, r0
 8005f0c:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8005f0e:	e004      	b.n	8005f1a <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8005f10:	2303      	movs	r3, #3
 8005f12:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8005f14:	e001      	b.n	8005f1a <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8005f16:	2303      	movs	r3, #3
 8005f18:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8005f1a:	683b      	ldr	r3, [r7, #0]
 8005f1c:	88db      	ldrh	r3, [r3, #6]
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d110      	bne.n	8005f44 <USBD_StdItfReq+0xc0>
 8005f22:	7bfb      	ldrb	r3, [r7, #15]
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d10d      	bne.n	8005f44 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8005f28:	6878      	ldr	r0, [r7, #4]
 8005f2a:	f000 fdd3 	bl	8006ad4 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8005f2e:	e009      	b.n	8005f44 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8005f30:	6839      	ldr	r1, [r7, #0]
 8005f32:	6878      	ldr	r0, [r7, #4]
 8005f34:	f000 fcf7 	bl	8006926 <USBD_CtlError>
          break;
 8005f38:	e004      	b.n	8005f44 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8005f3a:	6839      	ldr	r1, [r7, #0]
 8005f3c:	6878      	ldr	r0, [r7, #4]
 8005f3e:	f000 fcf2 	bl	8006926 <USBD_CtlError>
          break;
 8005f42:	e000      	b.n	8005f46 <USBD_StdItfReq+0xc2>
          break;
 8005f44:	bf00      	nop
      }
      break;
 8005f46:	e004      	b.n	8005f52 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8005f48:	6839      	ldr	r1, [r7, #0]
 8005f4a:	6878      	ldr	r0, [r7, #4]
 8005f4c:	f000 fceb 	bl	8006926 <USBD_CtlError>
      break;
 8005f50:	bf00      	nop
  }

  return ret;
 8005f52:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f54:	4618      	mov	r0, r3
 8005f56:	3710      	adds	r7, #16
 8005f58:	46bd      	mov	sp, r7
 8005f5a:	bd80      	pop	{r7, pc}

08005f5c <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005f5c:	b580      	push	{r7, lr}
 8005f5e:	b084      	sub	sp, #16
 8005f60:	af00      	add	r7, sp, #0
 8005f62:	6078      	str	r0, [r7, #4]
 8005f64:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8005f66:	2300      	movs	r3, #0
 8005f68:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8005f6a:	683b      	ldr	r3, [r7, #0]
 8005f6c:	889b      	ldrh	r3, [r3, #4]
 8005f6e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005f70:	683b      	ldr	r3, [r7, #0]
 8005f72:	781b      	ldrb	r3, [r3, #0]
 8005f74:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8005f78:	2b40      	cmp	r3, #64	@ 0x40
 8005f7a:	d007      	beq.n	8005f8c <USBD_StdEPReq+0x30>
 8005f7c:	2b40      	cmp	r3, #64	@ 0x40
 8005f7e:	f200 817f 	bhi.w	8006280 <USBD_StdEPReq+0x324>
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d02a      	beq.n	8005fdc <USBD_StdEPReq+0x80>
 8005f86:	2b20      	cmp	r3, #32
 8005f88:	f040 817a 	bne.w	8006280 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8005f8c:	7bbb      	ldrb	r3, [r7, #14]
 8005f8e:	4619      	mov	r1, r3
 8005f90:	6878      	ldr	r0, [r7, #4]
 8005f92:	f7ff fe85 	bl	8005ca0 <USBD_CoreFindEP>
 8005f96:	4603      	mov	r3, r0
 8005f98:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005f9a:	7b7b      	ldrb	r3, [r7, #13]
 8005f9c:	2bff      	cmp	r3, #255	@ 0xff
 8005f9e:	f000 8174 	beq.w	800628a <USBD_StdEPReq+0x32e>
 8005fa2:	7b7b      	ldrb	r3, [r7, #13]
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	f040 8170 	bne.w	800628a <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8005faa:	7b7a      	ldrb	r2, [r7, #13]
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8005fb2:	7b7a      	ldrb	r2, [r7, #13]
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	32ae      	adds	r2, #174	@ 0xae
 8005fb8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005fbc:	689b      	ldr	r3, [r3, #8]
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	f000 8163 	beq.w	800628a <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8005fc4:	7b7a      	ldrb	r2, [r7, #13]
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	32ae      	adds	r2, #174	@ 0xae
 8005fca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005fce:	689b      	ldr	r3, [r3, #8]
 8005fd0:	6839      	ldr	r1, [r7, #0]
 8005fd2:	6878      	ldr	r0, [r7, #4]
 8005fd4:	4798      	blx	r3
 8005fd6:	4603      	mov	r3, r0
 8005fd8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005fda:	e156      	b.n	800628a <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005fdc:	683b      	ldr	r3, [r7, #0]
 8005fde:	785b      	ldrb	r3, [r3, #1]
 8005fe0:	2b03      	cmp	r3, #3
 8005fe2:	d008      	beq.n	8005ff6 <USBD_StdEPReq+0x9a>
 8005fe4:	2b03      	cmp	r3, #3
 8005fe6:	f300 8145 	bgt.w	8006274 <USBD_StdEPReq+0x318>
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	f000 809b 	beq.w	8006126 <USBD_StdEPReq+0x1ca>
 8005ff0:	2b01      	cmp	r3, #1
 8005ff2:	d03c      	beq.n	800606e <USBD_StdEPReq+0x112>
 8005ff4:	e13e      	b.n	8006274 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005ffc:	b2db      	uxtb	r3, r3
 8005ffe:	2b02      	cmp	r3, #2
 8006000:	d002      	beq.n	8006008 <USBD_StdEPReq+0xac>
 8006002:	2b03      	cmp	r3, #3
 8006004:	d016      	beq.n	8006034 <USBD_StdEPReq+0xd8>
 8006006:	e02c      	b.n	8006062 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006008:	7bbb      	ldrb	r3, [r7, #14]
 800600a:	2b00      	cmp	r3, #0
 800600c:	d00d      	beq.n	800602a <USBD_StdEPReq+0xce>
 800600e:	7bbb      	ldrb	r3, [r7, #14]
 8006010:	2b80      	cmp	r3, #128	@ 0x80
 8006012:	d00a      	beq.n	800602a <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006014:	7bbb      	ldrb	r3, [r7, #14]
 8006016:	4619      	mov	r1, r3
 8006018:	6878      	ldr	r0, [r7, #4]
 800601a:	f001 f9b5 	bl	8007388 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800601e:	2180      	movs	r1, #128	@ 0x80
 8006020:	6878      	ldr	r0, [r7, #4]
 8006022:	f001 f9b1 	bl	8007388 <USBD_LL_StallEP>
 8006026:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006028:	e020      	b.n	800606c <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800602a:	6839      	ldr	r1, [r7, #0]
 800602c:	6878      	ldr	r0, [r7, #4]
 800602e:	f000 fc7a 	bl	8006926 <USBD_CtlError>
              break;
 8006032:	e01b      	b.n	800606c <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006034:	683b      	ldr	r3, [r7, #0]
 8006036:	885b      	ldrh	r3, [r3, #2]
 8006038:	2b00      	cmp	r3, #0
 800603a:	d10e      	bne.n	800605a <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800603c:	7bbb      	ldrb	r3, [r7, #14]
 800603e:	2b00      	cmp	r3, #0
 8006040:	d00b      	beq.n	800605a <USBD_StdEPReq+0xfe>
 8006042:	7bbb      	ldrb	r3, [r7, #14]
 8006044:	2b80      	cmp	r3, #128	@ 0x80
 8006046:	d008      	beq.n	800605a <USBD_StdEPReq+0xfe>
 8006048:	683b      	ldr	r3, [r7, #0]
 800604a:	88db      	ldrh	r3, [r3, #6]
 800604c:	2b00      	cmp	r3, #0
 800604e:	d104      	bne.n	800605a <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8006050:	7bbb      	ldrb	r3, [r7, #14]
 8006052:	4619      	mov	r1, r3
 8006054:	6878      	ldr	r0, [r7, #4]
 8006056:	f001 f997 	bl	8007388 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800605a:	6878      	ldr	r0, [r7, #4]
 800605c:	f000 fd3a 	bl	8006ad4 <USBD_CtlSendStatus>

              break;
 8006060:	e004      	b.n	800606c <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8006062:	6839      	ldr	r1, [r7, #0]
 8006064:	6878      	ldr	r0, [r7, #4]
 8006066:	f000 fc5e 	bl	8006926 <USBD_CtlError>
              break;
 800606a:	bf00      	nop
          }
          break;
 800606c:	e107      	b.n	800627e <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006074:	b2db      	uxtb	r3, r3
 8006076:	2b02      	cmp	r3, #2
 8006078:	d002      	beq.n	8006080 <USBD_StdEPReq+0x124>
 800607a:	2b03      	cmp	r3, #3
 800607c:	d016      	beq.n	80060ac <USBD_StdEPReq+0x150>
 800607e:	e04b      	b.n	8006118 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006080:	7bbb      	ldrb	r3, [r7, #14]
 8006082:	2b00      	cmp	r3, #0
 8006084:	d00d      	beq.n	80060a2 <USBD_StdEPReq+0x146>
 8006086:	7bbb      	ldrb	r3, [r7, #14]
 8006088:	2b80      	cmp	r3, #128	@ 0x80
 800608a:	d00a      	beq.n	80060a2 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800608c:	7bbb      	ldrb	r3, [r7, #14]
 800608e:	4619      	mov	r1, r3
 8006090:	6878      	ldr	r0, [r7, #4]
 8006092:	f001 f979 	bl	8007388 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006096:	2180      	movs	r1, #128	@ 0x80
 8006098:	6878      	ldr	r0, [r7, #4]
 800609a:	f001 f975 	bl	8007388 <USBD_LL_StallEP>
 800609e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80060a0:	e040      	b.n	8006124 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 80060a2:	6839      	ldr	r1, [r7, #0]
 80060a4:	6878      	ldr	r0, [r7, #4]
 80060a6:	f000 fc3e 	bl	8006926 <USBD_CtlError>
              break;
 80060aa:	e03b      	b.n	8006124 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80060ac:	683b      	ldr	r3, [r7, #0]
 80060ae:	885b      	ldrh	r3, [r3, #2]
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d136      	bne.n	8006122 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80060b4:	7bbb      	ldrb	r3, [r7, #14]
 80060b6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d004      	beq.n	80060c8 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80060be:	7bbb      	ldrb	r3, [r7, #14]
 80060c0:	4619      	mov	r1, r3
 80060c2:	6878      	ldr	r0, [r7, #4]
 80060c4:	f001 f97f 	bl	80073c6 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80060c8:	6878      	ldr	r0, [r7, #4]
 80060ca:	f000 fd03 	bl	8006ad4 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 80060ce:	7bbb      	ldrb	r3, [r7, #14]
 80060d0:	4619      	mov	r1, r3
 80060d2:	6878      	ldr	r0, [r7, #4]
 80060d4:	f7ff fde4 	bl	8005ca0 <USBD_CoreFindEP>
 80060d8:	4603      	mov	r3, r0
 80060da:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80060dc:	7b7b      	ldrb	r3, [r7, #13]
 80060de:	2bff      	cmp	r3, #255	@ 0xff
 80060e0:	d01f      	beq.n	8006122 <USBD_StdEPReq+0x1c6>
 80060e2:	7b7b      	ldrb	r3, [r7, #13]
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d11c      	bne.n	8006122 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 80060e8:	7b7a      	ldrb	r2, [r7, #13]
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 80060f0:	7b7a      	ldrb	r2, [r7, #13]
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	32ae      	adds	r2, #174	@ 0xae
 80060f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80060fa:	689b      	ldr	r3, [r3, #8]
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d010      	beq.n	8006122 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8006100:	7b7a      	ldrb	r2, [r7, #13]
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	32ae      	adds	r2, #174	@ 0xae
 8006106:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800610a:	689b      	ldr	r3, [r3, #8]
 800610c:	6839      	ldr	r1, [r7, #0]
 800610e:	6878      	ldr	r0, [r7, #4]
 8006110:	4798      	blx	r3
 8006112:	4603      	mov	r3, r0
 8006114:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8006116:	e004      	b.n	8006122 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8006118:	6839      	ldr	r1, [r7, #0]
 800611a:	6878      	ldr	r0, [r7, #4]
 800611c:	f000 fc03 	bl	8006926 <USBD_CtlError>
              break;
 8006120:	e000      	b.n	8006124 <USBD_StdEPReq+0x1c8>
              break;
 8006122:	bf00      	nop
          }
          break;
 8006124:	e0ab      	b.n	800627e <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800612c:	b2db      	uxtb	r3, r3
 800612e:	2b02      	cmp	r3, #2
 8006130:	d002      	beq.n	8006138 <USBD_StdEPReq+0x1dc>
 8006132:	2b03      	cmp	r3, #3
 8006134:	d032      	beq.n	800619c <USBD_StdEPReq+0x240>
 8006136:	e097      	b.n	8006268 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006138:	7bbb      	ldrb	r3, [r7, #14]
 800613a:	2b00      	cmp	r3, #0
 800613c:	d007      	beq.n	800614e <USBD_StdEPReq+0x1f2>
 800613e:	7bbb      	ldrb	r3, [r7, #14]
 8006140:	2b80      	cmp	r3, #128	@ 0x80
 8006142:	d004      	beq.n	800614e <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8006144:	6839      	ldr	r1, [r7, #0]
 8006146:	6878      	ldr	r0, [r7, #4]
 8006148:	f000 fbed 	bl	8006926 <USBD_CtlError>
                break;
 800614c:	e091      	b.n	8006272 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800614e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006152:	2b00      	cmp	r3, #0
 8006154:	da0b      	bge.n	800616e <USBD_StdEPReq+0x212>
 8006156:	7bbb      	ldrb	r3, [r7, #14]
 8006158:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800615c:	4613      	mov	r3, r2
 800615e:	009b      	lsls	r3, r3, #2
 8006160:	4413      	add	r3, r2
 8006162:	009b      	lsls	r3, r3, #2
 8006164:	3310      	adds	r3, #16
 8006166:	687a      	ldr	r2, [r7, #4]
 8006168:	4413      	add	r3, r2
 800616a:	3304      	adds	r3, #4
 800616c:	e00b      	b.n	8006186 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800616e:	7bbb      	ldrb	r3, [r7, #14]
 8006170:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006174:	4613      	mov	r3, r2
 8006176:	009b      	lsls	r3, r3, #2
 8006178:	4413      	add	r3, r2
 800617a:	009b      	lsls	r3, r3, #2
 800617c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8006180:	687a      	ldr	r2, [r7, #4]
 8006182:	4413      	add	r3, r2
 8006184:	3304      	adds	r3, #4
 8006186:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8006188:	68bb      	ldr	r3, [r7, #8]
 800618a:	2200      	movs	r2, #0
 800618c:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800618e:	68bb      	ldr	r3, [r7, #8]
 8006190:	2202      	movs	r2, #2
 8006192:	4619      	mov	r1, r3
 8006194:	6878      	ldr	r0, [r7, #4]
 8006196:	f000 fc43 	bl	8006a20 <USBD_CtlSendData>
              break;
 800619a:	e06a      	b.n	8006272 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800619c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	da11      	bge.n	80061c8 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80061a4:	7bbb      	ldrb	r3, [r7, #14]
 80061a6:	f003 020f 	and.w	r2, r3, #15
 80061aa:	6879      	ldr	r1, [r7, #4]
 80061ac:	4613      	mov	r3, r2
 80061ae:	009b      	lsls	r3, r3, #2
 80061b0:	4413      	add	r3, r2
 80061b2:	009b      	lsls	r3, r3, #2
 80061b4:	440b      	add	r3, r1
 80061b6:	3324      	adds	r3, #36	@ 0x24
 80061b8:	881b      	ldrh	r3, [r3, #0]
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d117      	bne.n	80061ee <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80061be:	6839      	ldr	r1, [r7, #0]
 80061c0:	6878      	ldr	r0, [r7, #4]
 80061c2:	f000 fbb0 	bl	8006926 <USBD_CtlError>
                  break;
 80061c6:	e054      	b.n	8006272 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80061c8:	7bbb      	ldrb	r3, [r7, #14]
 80061ca:	f003 020f 	and.w	r2, r3, #15
 80061ce:	6879      	ldr	r1, [r7, #4]
 80061d0:	4613      	mov	r3, r2
 80061d2:	009b      	lsls	r3, r3, #2
 80061d4:	4413      	add	r3, r2
 80061d6:	009b      	lsls	r3, r3, #2
 80061d8:	440b      	add	r3, r1
 80061da:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80061de:	881b      	ldrh	r3, [r3, #0]
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d104      	bne.n	80061ee <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80061e4:	6839      	ldr	r1, [r7, #0]
 80061e6:	6878      	ldr	r0, [r7, #4]
 80061e8:	f000 fb9d 	bl	8006926 <USBD_CtlError>
                  break;
 80061ec:	e041      	b.n	8006272 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80061ee:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	da0b      	bge.n	800620e <USBD_StdEPReq+0x2b2>
 80061f6:	7bbb      	ldrb	r3, [r7, #14]
 80061f8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80061fc:	4613      	mov	r3, r2
 80061fe:	009b      	lsls	r3, r3, #2
 8006200:	4413      	add	r3, r2
 8006202:	009b      	lsls	r3, r3, #2
 8006204:	3310      	adds	r3, #16
 8006206:	687a      	ldr	r2, [r7, #4]
 8006208:	4413      	add	r3, r2
 800620a:	3304      	adds	r3, #4
 800620c:	e00b      	b.n	8006226 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800620e:	7bbb      	ldrb	r3, [r7, #14]
 8006210:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006214:	4613      	mov	r3, r2
 8006216:	009b      	lsls	r3, r3, #2
 8006218:	4413      	add	r3, r2
 800621a:	009b      	lsls	r3, r3, #2
 800621c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8006220:	687a      	ldr	r2, [r7, #4]
 8006222:	4413      	add	r3, r2
 8006224:	3304      	adds	r3, #4
 8006226:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006228:	7bbb      	ldrb	r3, [r7, #14]
 800622a:	2b00      	cmp	r3, #0
 800622c:	d002      	beq.n	8006234 <USBD_StdEPReq+0x2d8>
 800622e:	7bbb      	ldrb	r3, [r7, #14]
 8006230:	2b80      	cmp	r3, #128	@ 0x80
 8006232:	d103      	bne.n	800623c <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8006234:	68bb      	ldr	r3, [r7, #8]
 8006236:	2200      	movs	r2, #0
 8006238:	601a      	str	r2, [r3, #0]
 800623a:	e00e      	b.n	800625a <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800623c:	7bbb      	ldrb	r3, [r7, #14]
 800623e:	4619      	mov	r1, r3
 8006240:	6878      	ldr	r0, [r7, #4]
 8006242:	f001 f8df 	bl	8007404 <USBD_LL_IsStallEP>
 8006246:	4603      	mov	r3, r0
 8006248:	2b00      	cmp	r3, #0
 800624a:	d003      	beq.n	8006254 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800624c:	68bb      	ldr	r3, [r7, #8]
 800624e:	2201      	movs	r2, #1
 8006250:	601a      	str	r2, [r3, #0]
 8006252:	e002      	b.n	800625a <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8006254:	68bb      	ldr	r3, [r7, #8]
 8006256:	2200      	movs	r2, #0
 8006258:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800625a:	68bb      	ldr	r3, [r7, #8]
 800625c:	2202      	movs	r2, #2
 800625e:	4619      	mov	r1, r3
 8006260:	6878      	ldr	r0, [r7, #4]
 8006262:	f000 fbdd 	bl	8006a20 <USBD_CtlSendData>
              break;
 8006266:	e004      	b.n	8006272 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8006268:	6839      	ldr	r1, [r7, #0]
 800626a:	6878      	ldr	r0, [r7, #4]
 800626c:	f000 fb5b 	bl	8006926 <USBD_CtlError>
              break;
 8006270:	bf00      	nop
          }
          break;
 8006272:	e004      	b.n	800627e <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8006274:	6839      	ldr	r1, [r7, #0]
 8006276:	6878      	ldr	r0, [r7, #4]
 8006278:	f000 fb55 	bl	8006926 <USBD_CtlError>
          break;
 800627c:	bf00      	nop
      }
      break;
 800627e:	e005      	b.n	800628c <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8006280:	6839      	ldr	r1, [r7, #0]
 8006282:	6878      	ldr	r0, [r7, #4]
 8006284:	f000 fb4f 	bl	8006926 <USBD_CtlError>
      break;
 8006288:	e000      	b.n	800628c <USBD_StdEPReq+0x330>
      break;
 800628a:	bf00      	nop
  }

  return ret;
 800628c:	7bfb      	ldrb	r3, [r7, #15]
}
 800628e:	4618      	mov	r0, r3
 8006290:	3710      	adds	r7, #16
 8006292:	46bd      	mov	sp, r7
 8006294:	bd80      	pop	{r7, pc}
	...

08006298 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006298:	b580      	push	{r7, lr}
 800629a:	b084      	sub	sp, #16
 800629c:	af00      	add	r7, sp, #0
 800629e:	6078      	str	r0, [r7, #4]
 80062a0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80062a2:	2300      	movs	r3, #0
 80062a4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80062a6:	2300      	movs	r3, #0
 80062a8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80062aa:	2300      	movs	r3, #0
 80062ac:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80062ae:	683b      	ldr	r3, [r7, #0]
 80062b0:	885b      	ldrh	r3, [r3, #2]
 80062b2:	0a1b      	lsrs	r3, r3, #8
 80062b4:	b29b      	uxth	r3, r3
 80062b6:	3b01      	subs	r3, #1
 80062b8:	2b06      	cmp	r3, #6
 80062ba:	f200 8128 	bhi.w	800650e <USBD_GetDescriptor+0x276>
 80062be:	a201      	add	r2, pc, #4	@ (adr r2, 80062c4 <USBD_GetDescriptor+0x2c>)
 80062c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062c4:	080062e1 	.word	0x080062e1
 80062c8:	080062f9 	.word	0x080062f9
 80062cc:	08006339 	.word	0x08006339
 80062d0:	0800650f 	.word	0x0800650f
 80062d4:	0800650f 	.word	0x0800650f
 80062d8:	080064af 	.word	0x080064af
 80062dc:	080064db 	.word	0x080064db
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	687a      	ldr	r2, [r7, #4]
 80062ea:	7c12      	ldrb	r2, [r2, #16]
 80062ec:	f107 0108 	add.w	r1, r7, #8
 80062f0:	4610      	mov	r0, r2
 80062f2:	4798      	blx	r3
 80062f4:	60f8      	str	r0, [r7, #12]
      break;
 80062f6:	e112      	b.n	800651e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	7c1b      	ldrb	r3, [r3, #16]
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d10d      	bne.n	800631c <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006306:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006308:	f107 0208 	add.w	r2, r7, #8
 800630c:	4610      	mov	r0, r2
 800630e:	4798      	blx	r3
 8006310:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	3301      	adds	r3, #1
 8006316:	2202      	movs	r2, #2
 8006318:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800631a:	e100      	b.n	800651e <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006322:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006324:	f107 0208 	add.w	r2, r7, #8
 8006328:	4610      	mov	r0, r2
 800632a:	4798      	blx	r3
 800632c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	3301      	adds	r3, #1
 8006332:	2202      	movs	r2, #2
 8006334:	701a      	strb	r2, [r3, #0]
      break;
 8006336:	e0f2      	b.n	800651e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8006338:	683b      	ldr	r3, [r7, #0]
 800633a:	885b      	ldrh	r3, [r3, #2]
 800633c:	b2db      	uxtb	r3, r3
 800633e:	2b05      	cmp	r3, #5
 8006340:	f200 80ac 	bhi.w	800649c <USBD_GetDescriptor+0x204>
 8006344:	a201      	add	r2, pc, #4	@ (adr r2, 800634c <USBD_GetDescriptor+0xb4>)
 8006346:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800634a:	bf00      	nop
 800634c:	08006365 	.word	0x08006365
 8006350:	08006399 	.word	0x08006399
 8006354:	080063cd 	.word	0x080063cd
 8006358:	08006401 	.word	0x08006401
 800635c:	08006435 	.word	0x08006435
 8006360:	08006469 	.word	0x08006469
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800636a:	685b      	ldr	r3, [r3, #4]
 800636c:	2b00      	cmp	r3, #0
 800636e:	d00b      	beq.n	8006388 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006376:	685b      	ldr	r3, [r3, #4]
 8006378:	687a      	ldr	r2, [r7, #4]
 800637a:	7c12      	ldrb	r2, [r2, #16]
 800637c:	f107 0108 	add.w	r1, r7, #8
 8006380:	4610      	mov	r0, r2
 8006382:	4798      	blx	r3
 8006384:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006386:	e091      	b.n	80064ac <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006388:	6839      	ldr	r1, [r7, #0]
 800638a:	6878      	ldr	r0, [r7, #4]
 800638c:	f000 facb 	bl	8006926 <USBD_CtlError>
            err++;
 8006390:	7afb      	ldrb	r3, [r7, #11]
 8006392:	3301      	adds	r3, #1
 8006394:	72fb      	strb	r3, [r7, #11]
          break;
 8006396:	e089      	b.n	80064ac <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800639e:	689b      	ldr	r3, [r3, #8]
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d00b      	beq.n	80063bc <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80063aa:	689b      	ldr	r3, [r3, #8]
 80063ac:	687a      	ldr	r2, [r7, #4]
 80063ae:	7c12      	ldrb	r2, [r2, #16]
 80063b0:	f107 0108 	add.w	r1, r7, #8
 80063b4:	4610      	mov	r0, r2
 80063b6:	4798      	blx	r3
 80063b8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80063ba:	e077      	b.n	80064ac <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80063bc:	6839      	ldr	r1, [r7, #0]
 80063be:	6878      	ldr	r0, [r7, #4]
 80063c0:	f000 fab1 	bl	8006926 <USBD_CtlError>
            err++;
 80063c4:	7afb      	ldrb	r3, [r7, #11]
 80063c6:	3301      	adds	r3, #1
 80063c8:	72fb      	strb	r3, [r7, #11]
          break;
 80063ca:	e06f      	b.n	80064ac <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80063d2:	68db      	ldr	r3, [r3, #12]
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d00b      	beq.n	80063f0 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80063de:	68db      	ldr	r3, [r3, #12]
 80063e0:	687a      	ldr	r2, [r7, #4]
 80063e2:	7c12      	ldrb	r2, [r2, #16]
 80063e4:	f107 0108 	add.w	r1, r7, #8
 80063e8:	4610      	mov	r0, r2
 80063ea:	4798      	blx	r3
 80063ec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80063ee:	e05d      	b.n	80064ac <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80063f0:	6839      	ldr	r1, [r7, #0]
 80063f2:	6878      	ldr	r0, [r7, #4]
 80063f4:	f000 fa97 	bl	8006926 <USBD_CtlError>
            err++;
 80063f8:	7afb      	ldrb	r3, [r7, #11]
 80063fa:	3301      	adds	r3, #1
 80063fc:	72fb      	strb	r3, [r7, #11]
          break;
 80063fe:	e055      	b.n	80064ac <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006406:	691b      	ldr	r3, [r3, #16]
 8006408:	2b00      	cmp	r3, #0
 800640a:	d00b      	beq.n	8006424 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006412:	691b      	ldr	r3, [r3, #16]
 8006414:	687a      	ldr	r2, [r7, #4]
 8006416:	7c12      	ldrb	r2, [r2, #16]
 8006418:	f107 0108 	add.w	r1, r7, #8
 800641c:	4610      	mov	r0, r2
 800641e:	4798      	blx	r3
 8006420:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006422:	e043      	b.n	80064ac <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006424:	6839      	ldr	r1, [r7, #0]
 8006426:	6878      	ldr	r0, [r7, #4]
 8006428:	f000 fa7d 	bl	8006926 <USBD_CtlError>
            err++;
 800642c:	7afb      	ldrb	r3, [r7, #11]
 800642e:	3301      	adds	r3, #1
 8006430:	72fb      	strb	r3, [r7, #11]
          break;
 8006432:	e03b      	b.n	80064ac <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800643a:	695b      	ldr	r3, [r3, #20]
 800643c:	2b00      	cmp	r3, #0
 800643e:	d00b      	beq.n	8006458 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006446:	695b      	ldr	r3, [r3, #20]
 8006448:	687a      	ldr	r2, [r7, #4]
 800644a:	7c12      	ldrb	r2, [r2, #16]
 800644c:	f107 0108 	add.w	r1, r7, #8
 8006450:	4610      	mov	r0, r2
 8006452:	4798      	blx	r3
 8006454:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006456:	e029      	b.n	80064ac <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006458:	6839      	ldr	r1, [r7, #0]
 800645a:	6878      	ldr	r0, [r7, #4]
 800645c:	f000 fa63 	bl	8006926 <USBD_CtlError>
            err++;
 8006460:	7afb      	ldrb	r3, [r7, #11]
 8006462:	3301      	adds	r3, #1
 8006464:	72fb      	strb	r3, [r7, #11]
          break;
 8006466:	e021      	b.n	80064ac <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800646e:	699b      	ldr	r3, [r3, #24]
 8006470:	2b00      	cmp	r3, #0
 8006472:	d00b      	beq.n	800648c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800647a:	699b      	ldr	r3, [r3, #24]
 800647c:	687a      	ldr	r2, [r7, #4]
 800647e:	7c12      	ldrb	r2, [r2, #16]
 8006480:	f107 0108 	add.w	r1, r7, #8
 8006484:	4610      	mov	r0, r2
 8006486:	4798      	blx	r3
 8006488:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800648a:	e00f      	b.n	80064ac <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800648c:	6839      	ldr	r1, [r7, #0]
 800648e:	6878      	ldr	r0, [r7, #4]
 8006490:	f000 fa49 	bl	8006926 <USBD_CtlError>
            err++;
 8006494:	7afb      	ldrb	r3, [r7, #11]
 8006496:	3301      	adds	r3, #1
 8006498:	72fb      	strb	r3, [r7, #11]
          break;
 800649a:	e007      	b.n	80064ac <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800649c:	6839      	ldr	r1, [r7, #0]
 800649e:	6878      	ldr	r0, [r7, #4]
 80064a0:	f000 fa41 	bl	8006926 <USBD_CtlError>
          err++;
 80064a4:	7afb      	ldrb	r3, [r7, #11]
 80064a6:	3301      	adds	r3, #1
 80064a8:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 80064aa:	bf00      	nop
      }
      break;
 80064ac:	e037      	b.n	800651e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	7c1b      	ldrb	r3, [r3, #16]
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d109      	bne.n	80064ca <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80064bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80064be:	f107 0208 	add.w	r2, r7, #8
 80064c2:	4610      	mov	r0, r2
 80064c4:	4798      	blx	r3
 80064c6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80064c8:	e029      	b.n	800651e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80064ca:	6839      	ldr	r1, [r7, #0]
 80064cc:	6878      	ldr	r0, [r7, #4]
 80064ce:	f000 fa2a 	bl	8006926 <USBD_CtlError>
        err++;
 80064d2:	7afb      	ldrb	r3, [r7, #11]
 80064d4:	3301      	adds	r3, #1
 80064d6:	72fb      	strb	r3, [r7, #11]
      break;
 80064d8:	e021      	b.n	800651e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	7c1b      	ldrb	r3, [r3, #16]
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d10d      	bne.n	80064fe <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80064e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80064ea:	f107 0208 	add.w	r2, r7, #8
 80064ee:	4610      	mov	r0, r2
 80064f0:	4798      	blx	r3
 80064f2:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	3301      	adds	r3, #1
 80064f8:	2207      	movs	r2, #7
 80064fa:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80064fc:	e00f      	b.n	800651e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80064fe:	6839      	ldr	r1, [r7, #0]
 8006500:	6878      	ldr	r0, [r7, #4]
 8006502:	f000 fa10 	bl	8006926 <USBD_CtlError>
        err++;
 8006506:	7afb      	ldrb	r3, [r7, #11]
 8006508:	3301      	adds	r3, #1
 800650a:	72fb      	strb	r3, [r7, #11]
      break;
 800650c:	e007      	b.n	800651e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800650e:	6839      	ldr	r1, [r7, #0]
 8006510:	6878      	ldr	r0, [r7, #4]
 8006512:	f000 fa08 	bl	8006926 <USBD_CtlError>
      err++;
 8006516:	7afb      	ldrb	r3, [r7, #11]
 8006518:	3301      	adds	r3, #1
 800651a:	72fb      	strb	r3, [r7, #11]
      break;
 800651c:	bf00      	nop
  }

  if (err != 0U)
 800651e:	7afb      	ldrb	r3, [r7, #11]
 8006520:	2b00      	cmp	r3, #0
 8006522:	d11e      	bne.n	8006562 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8006524:	683b      	ldr	r3, [r7, #0]
 8006526:	88db      	ldrh	r3, [r3, #6]
 8006528:	2b00      	cmp	r3, #0
 800652a:	d016      	beq.n	800655a <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800652c:	893b      	ldrh	r3, [r7, #8]
 800652e:	2b00      	cmp	r3, #0
 8006530:	d00e      	beq.n	8006550 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8006532:	683b      	ldr	r3, [r7, #0]
 8006534:	88da      	ldrh	r2, [r3, #6]
 8006536:	893b      	ldrh	r3, [r7, #8]
 8006538:	4293      	cmp	r3, r2
 800653a:	bf28      	it	cs
 800653c:	4613      	movcs	r3, r2
 800653e:	b29b      	uxth	r3, r3
 8006540:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8006542:	893b      	ldrh	r3, [r7, #8]
 8006544:	461a      	mov	r2, r3
 8006546:	68f9      	ldr	r1, [r7, #12]
 8006548:	6878      	ldr	r0, [r7, #4]
 800654a:	f000 fa69 	bl	8006a20 <USBD_CtlSendData>
 800654e:	e009      	b.n	8006564 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8006550:	6839      	ldr	r1, [r7, #0]
 8006552:	6878      	ldr	r0, [r7, #4]
 8006554:	f000 f9e7 	bl	8006926 <USBD_CtlError>
 8006558:	e004      	b.n	8006564 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800655a:	6878      	ldr	r0, [r7, #4]
 800655c:	f000 faba 	bl	8006ad4 <USBD_CtlSendStatus>
 8006560:	e000      	b.n	8006564 <USBD_GetDescriptor+0x2cc>
    return;
 8006562:	bf00      	nop
  }
}
 8006564:	3710      	adds	r7, #16
 8006566:	46bd      	mov	sp, r7
 8006568:	bd80      	pop	{r7, pc}
 800656a:	bf00      	nop

0800656c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800656c:	b580      	push	{r7, lr}
 800656e:	b084      	sub	sp, #16
 8006570:	af00      	add	r7, sp, #0
 8006572:	6078      	str	r0, [r7, #4]
 8006574:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8006576:	683b      	ldr	r3, [r7, #0]
 8006578:	889b      	ldrh	r3, [r3, #4]
 800657a:	2b00      	cmp	r3, #0
 800657c:	d131      	bne.n	80065e2 <USBD_SetAddress+0x76>
 800657e:	683b      	ldr	r3, [r7, #0]
 8006580:	88db      	ldrh	r3, [r3, #6]
 8006582:	2b00      	cmp	r3, #0
 8006584:	d12d      	bne.n	80065e2 <USBD_SetAddress+0x76>
 8006586:	683b      	ldr	r3, [r7, #0]
 8006588:	885b      	ldrh	r3, [r3, #2]
 800658a:	2b7f      	cmp	r3, #127	@ 0x7f
 800658c:	d829      	bhi.n	80065e2 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800658e:	683b      	ldr	r3, [r7, #0]
 8006590:	885b      	ldrh	r3, [r3, #2]
 8006592:	b2db      	uxtb	r3, r3
 8006594:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006598:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80065a0:	b2db      	uxtb	r3, r3
 80065a2:	2b03      	cmp	r3, #3
 80065a4:	d104      	bne.n	80065b0 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80065a6:	6839      	ldr	r1, [r7, #0]
 80065a8:	6878      	ldr	r0, [r7, #4]
 80065aa:	f000 f9bc 	bl	8006926 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80065ae:	e01d      	b.n	80065ec <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	7bfa      	ldrb	r2, [r7, #15]
 80065b4:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80065b8:	7bfb      	ldrb	r3, [r7, #15]
 80065ba:	4619      	mov	r1, r3
 80065bc:	6878      	ldr	r0, [r7, #4]
 80065be:	f000 ff4d 	bl	800745c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80065c2:	6878      	ldr	r0, [r7, #4]
 80065c4:	f000 fa86 	bl	8006ad4 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80065c8:	7bfb      	ldrb	r3, [r7, #15]
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d004      	beq.n	80065d8 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	2202      	movs	r2, #2
 80065d2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80065d6:	e009      	b.n	80065ec <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	2201      	movs	r2, #1
 80065dc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80065e0:	e004      	b.n	80065ec <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80065e2:	6839      	ldr	r1, [r7, #0]
 80065e4:	6878      	ldr	r0, [r7, #4]
 80065e6:	f000 f99e 	bl	8006926 <USBD_CtlError>
  }
}
 80065ea:	bf00      	nop
 80065ec:	bf00      	nop
 80065ee:	3710      	adds	r7, #16
 80065f0:	46bd      	mov	sp, r7
 80065f2:	bd80      	pop	{r7, pc}

080065f4 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80065f4:	b580      	push	{r7, lr}
 80065f6:	b084      	sub	sp, #16
 80065f8:	af00      	add	r7, sp, #0
 80065fa:	6078      	str	r0, [r7, #4]
 80065fc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80065fe:	2300      	movs	r3, #0
 8006600:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8006602:	683b      	ldr	r3, [r7, #0]
 8006604:	885b      	ldrh	r3, [r3, #2]
 8006606:	b2da      	uxtb	r2, r3
 8006608:	4b4e      	ldr	r3, [pc, #312]	@ (8006744 <USBD_SetConfig+0x150>)
 800660a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800660c:	4b4d      	ldr	r3, [pc, #308]	@ (8006744 <USBD_SetConfig+0x150>)
 800660e:	781b      	ldrb	r3, [r3, #0]
 8006610:	2b01      	cmp	r3, #1
 8006612:	d905      	bls.n	8006620 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8006614:	6839      	ldr	r1, [r7, #0]
 8006616:	6878      	ldr	r0, [r7, #4]
 8006618:	f000 f985 	bl	8006926 <USBD_CtlError>
    return USBD_FAIL;
 800661c:	2303      	movs	r3, #3
 800661e:	e08c      	b.n	800673a <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006626:	b2db      	uxtb	r3, r3
 8006628:	2b02      	cmp	r3, #2
 800662a:	d002      	beq.n	8006632 <USBD_SetConfig+0x3e>
 800662c:	2b03      	cmp	r3, #3
 800662e:	d029      	beq.n	8006684 <USBD_SetConfig+0x90>
 8006630:	e075      	b.n	800671e <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8006632:	4b44      	ldr	r3, [pc, #272]	@ (8006744 <USBD_SetConfig+0x150>)
 8006634:	781b      	ldrb	r3, [r3, #0]
 8006636:	2b00      	cmp	r3, #0
 8006638:	d020      	beq.n	800667c <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800663a:	4b42      	ldr	r3, [pc, #264]	@ (8006744 <USBD_SetConfig+0x150>)
 800663c:	781b      	ldrb	r3, [r3, #0]
 800663e:	461a      	mov	r2, r3
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006644:	4b3f      	ldr	r3, [pc, #252]	@ (8006744 <USBD_SetConfig+0x150>)
 8006646:	781b      	ldrb	r3, [r3, #0]
 8006648:	4619      	mov	r1, r3
 800664a:	6878      	ldr	r0, [r7, #4]
 800664c:	f7fe ffe3 	bl	8005616 <USBD_SetClassConfig>
 8006650:	4603      	mov	r3, r0
 8006652:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8006654:	7bfb      	ldrb	r3, [r7, #15]
 8006656:	2b00      	cmp	r3, #0
 8006658:	d008      	beq.n	800666c <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800665a:	6839      	ldr	r1, [r7, #0]
 800665c:	6878      	ldr	r0, [r7, #4]
 800665e:	f000 f962 	bl	8006926 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	2202      	movs	r2, #2
 8006666:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800666a:	e065      	b.n	8006738 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800666c:	6878      	ldr	r0, [r7, #4]
 800666e:	f000 fa31 	bl	8006ad4 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	2203      	movs	r2, #3
 8006676:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800667a:	e05d      	b.n	8006738 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800667c:	6878      	ldr	r0, [r7, #4]
 800667e:	f000 fa29 	bl	8006ad4 <USBD_CtlSendStatus>
      break;
 8006682:	e059      	b.n	8006738 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8006684:	4b2f      	ldr	r3, [pc, #188]	@ (8006744 <USBD_SetConfig+0x150>)
 8006686:	781b      	ldrb	r3, [r3, #0]
 8006688:	2b00      	cmp	r3, #0
 800668a:	d112      	bne.n	80066b2 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	2202      	movs	r2, #2
 8006690:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8006694:	4b2b      	ldr	r3, [pc, #172]	@ (8006744 <USBD_SetConfig+0x150>)
 8006696:	781b      	ldrb	r3, [r3, #0]
 8006698:	461a      	mov	r2, r3
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800669e:	4b29      	ldr	r3, [pc, #164]	@ (8006744 <USBD_SetConfig+0x150>)
 80066a0:	781b      	ldrb	r3, [r3, #0]
 80066a2:	4619      	mov	r1, r3
 80066a4:	6878      	ldr	r0, [r7, #4]
 80066a6:	f7fe ffd2 	bl	800564e <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80066aa:	6878      	ldr	r0, [r7, #4]
 80066ac:	f000 fa12 	bl	8006ad4 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80066b0:	e042      	b.n	8006738 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 80066b2:	4b24      	ldr	r3, [pc, #144]	@ (8006744 <USBD_SetConfig+0x150>)
 80066b4:	781b      	ldrb	r3, [r3, #0]
 80066b6:	461a      	mov	r2, r3
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	685b      	ldr	r3, [r3, #4]
 80066bc:	429a      	cmp	r2, r3
 80066be:	d02a      	beq.n	8006716 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	685b      	ldr	r3, [r3, #4]
 80066c4:	b2db      	uxtb	r3, r3
 80066c6:	4619      	mov	r1, r3
 80066c8:	6878      	ldr	r0, [r7, #4]
 80066ca:	f7fe ffc0 	bl	800564e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80066ce:	4b1d      	ldr	r3, [pc, #116]	@ (8006744 <USBD_SetConfig+0x150>)
 80066d0:	781b      	ldrb	r3, [r3, #0]
 80066d2:	461a      	mov	r2, r3
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80066d8:	4b1a      	ldr	r3, [pc, #104]	@ (8006744 <USBD_SetConfig+0x150>)
 80066da:	781b      	ldrb	r3, [r3, #0]
 80066dc:	4619      	mov	r1, r3
 80066de:	6878      	ldr	r0, [r7, #4]
 80066e0:	f7fe ff99 	bl	8005616 <USBD_SetClassConfig>
 80066e4:	4603      	mov	r3, r0
 80066e6:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80066e8:	7bfb      	ldrb	r3, [r7, #15]
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d00f      	beq.n	800670e <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 80066ee:	6839      	ldr	r1, [r7, #0]
 80066f0:	6878      	ldr	r0, [r7, #4]
 80066f2:	f000 f918 	bl	8006926 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	685b      	ldr	r3, [r3, #4]
 80066fa:	b2db      	uxtb	r3, r3
 80066fc:	4619      	mov	r1, r3
 80066fe:	6878      	ldr	r0, [r7, #4]
 8006700:	f7fe ffa5 	bl	800564e <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	2202      	movs	r2, #2
 8006708:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800670c:	e014      	b.n	8006738 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800670e:	6878      	ldr	r0, [r7, #4]
 8006710:	f000 f9e0 	bl	8006ad4 <USBD_CtlSendStatus>
      break;
 8006714:	e010      	b.n	8006738 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8006716:	6878      	ldr	r0, [r7, #4]
 8006718:	f000 f9dc 	bl	8006ad4 <USBD_CtlSendStatus>
      break;
 800671c:	e00c      	b.n	8006738 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800671e:	6839      	ldr	r1, [r7, #0]
 8006720:	6878      	ldr	r0, [r7, #4]
 8006722:	f000 f900 	bl	8006926 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006726:	4b07      	ldr	r3, [pc, #28]	@ (8006744 <USBD_SetConfig+0x150>)
 8006728:	781b      	ldrb	r3, [r3, #0]
 800672a:	4619      	mov	r1, r3
 800672c:	6878      	ldr	r0, [r7, #4]
 800672e:	f7fe ff8e 	bl	800564e <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8006732:	2303      	movs	r3, #3
 8006734:	73fb      	strb	r3, [r7, #15]
      break;
 8006736:	bf00      	nop
  }

  return ret;
 8006738:	7bfb      	ldrb	r3, [r7, #15]
}
 800673a:	4618      	mov	r0, r3
 800673c:	3710      	adds	r7, #16
 800673e:	46bd      	mov	sp, r7
 8006740:	bd80      	pop	{r7, pc}
 8006742:	bf00      	nop
 8006744:	200006e4 	.word	0x200006e4

08006748 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006748:	b580      	push	{r7, lr}
 800674a:	b082      	sub	sp, #8
 800674c:	af00      	add	r7, sp, #0
 800674e:	6078      	str	r0, [r7, #4]
 8006750:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8006752:	683b      	ldr	r3, [r7, #0]
 8006754:	88db      	ldrh	r3, [r3, #6]
 8006756:	2b01      	cmp	r3, #1
 8006758:	d004      	beq.n	8006764 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800675a:	6839      	ldr	r1, [r7, #0]
 800675c:	6878      	ldr	r0, [r7, #4]
 800675e:	f000 f8e2 	bl	8006926 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8006762:	e023      	b.n	80067ac <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800676a:	b2db      	uxtb	r3, r3
 800676c:	2b02      	cmp	r3, #2
 800676e:	dc02      	bgt.n	8006776 <USBD_GetConfig+0x2e>
 8006770:	2b00      	cmp	r3, #0
 8006772:	dc03      	bgt.n	800677c <USBD_GetConfig+0x34>
 8006774:	e015      	b.n	80067a2 <USBD_GetConfig+0x5a>
 8006776:	2b03      	cmp	r3, #3
 8006778:	d00b      	beq.n	8006792 <USBD_GetConfig+0x4a>
 800677a:	e012      	b.n	80067a2 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	2200      	movs	r2, #0
 8006780:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	3308      	adds	r3, #8
 8006786:	2201      	movs	r2, #1
 8006788:	4619      	mov	r1, r3
 800678a:	6878      	ldr	r0, [r7, #4]
 800678c:	f000 f948 	bl	8006a20 <USBD_CtlSendData>
        break;
 8006790:	e00c      	b.n	80067ac <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	3304      	adds	r3, #4
 8006796:	2201      	movs	r2, #1
 8006798:	4619      	mov	r1, r3
 800679a:	6878      	ldr	r0, [r7, #4]
 800679c:	f000 f940 	bl	8006a20 <USBD_CtlSendData>
        break;
 80067a0:	e004      	b.n	80067ac <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80067a2:	6839      	ldr	r1, [r7, #0]
 80067a4:	6878      	ldr	r0, [r7, #4]
 80067a6:	f000 f8be 	bl	8006926 <USBD_CtlError>
        break;
 80067aa:	bf00      	nop
}
 80067ac:	bf00      	nop
 80067ae:	3708      	adds	r7, #8
 80067b0:	46bd      	mov	sp, r7
 80067b2:	bd80      	pop	{r7, pc}

080067b4 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80067b4:	b580      	push	{r7, lr}
 80067b6:	b082      	sub	sp, #8
 80067b8:	af00      	add	r7, sp, #0
 80067ba:	6078      	str	r0, [r7, #4]
 80067bc:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80067c4:	b2db      	uxtb	r3, r3
 80067c6:	3b01      	subs	r3, #1
 80067c8:	2b02      	cmp	r3, #2
 80067ca:	d81e      	bhi.n	800680a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80067cc:	683b      	ldr	r3, [r7, #0]
 80067ce:	88db      	ldrh	r3, [r3, #6]
 80067d0:	2b02      	cmp	r3, #2
 80067d2:	d004      	beq.n	80067de <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80067d4:	6839      	ldr	r1, [r7, #0]
 80067d6:	6878      	ldr	r0, [r7, #4]
 80067d8:	f000 f8a5 	bl	8006926 <USBD_CtlError>
        break;
 80067dc:	e01a      	b.n	8006814 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
#else
      pdev->dev_config_status = 0U;
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	2200      	movs	r2, #0
 80067e2:	60da      	str	r2, [r3, #12]
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d005      	beq.n	80067fa <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	68db      	ldr	r3, [r3, #12]
 80067f2:	f043 0202 	orr.w	r2, r3, #2
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	330c      	adds	r3, #12
 80067fe:	2202      	movs	r2, #2
 8006800:	4619      	mov	r1, r3
 8006802:	6878      	ldr	r0, [r7, #4]
 8006804:	f000 f90c 	bl	8006a20 <USBD_CtlSendData>
      break;
 8006808:	e004      	b.n	8006814 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800680a:	6839      	ldr	r1, [r7, #0]
 800680c:	6878      	ldr	r0, [r7, #4]
 800680e:	f000 f88a 	bl	8006926 <USBD_CtlError>
      break;
 8006812:	bf00      	nop
  }
}
 8006814:	bf00      	nop
 8006816:	3708      	adds	r7, #8
 8006818:	46bd      	mov	sp, r7
 800681a:	bd80      	pop	{r7, pc}

0800681c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800681c:	b580      	push	{r7, lr}
 800681e:	b082      	sub	sp, #8
 8006820:	af00      	add	r7, sp, #0
 8006822:	6078      	str	r0, [r7, #4]
 8006824:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006826:	683b      	ldr	r3, [r7, #0]
 8006828:	885b      	ldrh	r3, [r3, #2]
 800682a:	2b01      	cmp	r3, #1
 800682c:	d107      	bne.n	800683e <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	2201      	movs	r2, #1
 8006832:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8006836:	6878      	ldr	r0, [r7, #4]
 8006838:	f000 f94c 	bl	8006ad4 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800683c:	e013      	b.n	8006866 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800683e:	683b      	ldr	r3, [r7, #0]
 8006840:	885b      	ldrh	r3, [r3, #2]
 8006842:	2b02      	cmp	r3, #2
 8006844:	d10b      	bne.n	800685e <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8006846:	683b      	ldr	r3, [r7, #0]
 8006848:	889b      	ldrh	r3, [r3, #4]
 800684a:	0a1b      	lsrs	r3, r3, #8
 800684c:	b29b      	uxth	r3, r3
 800684e:	b2da      	uxtb	r2, r3
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8006856:	6878      	ldr	r0, [r7, #4]
 8006858:	f000 f93c 	bl	8006ad4 <USBD_CtlSendStatus>
}
 800685c:	e003      	b.n	8006866 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800685e:	6839      	ldr	r1, [r7, #0]
 8006860:	6878      	ldr	r0, [r7, #4]
 8006862:	f000 f860 	bl	8006926 <USBD_CtlError>
}
 8006866:	bf00      	nop
 8006868:	3708      	adds	r7, #8
 800686a:	46bd      	mov	sp, r7
 800686c:	bd80      	pop	{r7, pc}

0800686e <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800686e:	b580      	push	{r7, lr}
 8006870:	b082      	sub	sp, #8
 8006872:	af00      	add	r7, sp, #0
 8006874:	6078      	str	r0, [r7, #4]
 8006876:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800687e:	b2db      	uxtb	r3, r3
 8006880:	3b01      	subs	r3, #1
 8006882:	2b02      	cmp	r3, #2
 8006884:	d80b      	bhi.n	800689e <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006886:	683b      	ldr	r3, [r7, #0]
 8006888:	885b      	ldrh	r3, [r3, #2]
 800688a:	2b01      	cmp	r3, #1
 800688c:	d10c      	bne.n	80068a8 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	2200      	movs	r2, #0
 8006892:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8006896:	6878      	ldr	r0, [r7, #4]
 8006898:	f000 f91c 	bl	8006ad4 <USBD_CtlSendStatus>
      }
      break;
 800689c:	e004      	b.n	80068a8 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800689e:	6839      	ldr	r1, [r7, #0]
 80068a0:	6878      	ldr	r0, [r7, #4]
 80068a2:	f000 f840 	bl	8006926 <USBD_CtlError>
      break;
 80068a6:	e000      	b.n	80068aa <USBD_ClrFeature+0x3c>
      break;
 80068a8:	bf00      	nop
  }
}
 80068aa:	bf00      	nop
 80068ac:	3708      	adds	r7, #8
 80068ae:	46bd      	mov	sp, r7
 80068b0:	bd80      	pop	{r7, pc}

080068b2 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80068b2:	b580      	push	{r7, lr}
 80068b4:	b084      	sub	sp, #16
 80068b6:	af00      	add	r7, sp, #0
 80068b8:	6078      	str	r0, [r7, #4]
 80068ba:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80068bc:	683b      	ldr	r3, [r7, #0]
 80068be:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	781a      	ldrb	r2, [r3, #0]
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	3301      	adds	r3, #1
 80068cc:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	781a      	ldrb	r2, [r3, #0]
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	3301      	adds	r3, #1
 80068da:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80068dc:	68f8      	ldr	r0, [r7, #12]
 80068de:	f7ff fa40 	bl	8005d62 <SWAPBYTE>
 80068e2:	4603      	mov	r3, r0
 80068e4:	461a      	mov	r2, r3
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	3301      	adds	r3, #1
 80068ee:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	3301      	adds	r3, #1
 80068f4:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80068f6:	68f8      	ldr	r0, [r7, #12]
 80068f8:	f7ff fa33 	bl	8005d62 <SWAPBYTE>
 80068fc:	4603      	mov	r3, r0
 80068fe:	461a      	mov	r2, r3
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	3301      	adds	r3, #1
 8006908:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	3301      	adds	r3, #1
 800690e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8006910:	68f8      	ldr	r0, [r7, #12]
 8006912:	f7ff fa26 	bl	8005d62 <SWAPBYTE>
 8006916:	4603      	mov	r3, r0
 8006918:	461a      	mov	r2, r3
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	80da      	strh	r2, [r3, #6]
}
 800691e:	bf00      	nop
 8006920:	3710      	adds	r7, #16
 8006922:	46bd      	mov	sp, r7
 8006924:	bd80      	pop	{r7, pc}

08006926 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006926:	b580      	push	{r7, lr}
 8006928:	b082      	sub	sp, #8
 800692a:	af00      	add	r7, sp, #0
 800692c:	6078      	str	r0, [r7, #4]
 800692e:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8006930:	2180      	movs	r1, #128	@ 0x80
 8006932:	6878      	ldr	r0, [r7, #4]
 8006934:	f000 fd28 	bl	8007388 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8006938:	2100      	movs	r1, #0
 800693a:	6878      	ldr	r0, [r7, #4]
 800693c:	f000 fd24 	bl	8007388 <USBD_LL_StallEP>
}
 8006940:	bf00      	nop
 8006942:	3708      	adds	r7, #8
 8006944:	46bd      	mov	sp, r7
 8006946:	bd80      	pop	{r7, pc}

08006948 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8006948:	b580      	push	{r7, lr}
 800694a:	b086      	sub	sp, #24
 800694c:	af00      	add	r7, sp, #0
 800694e:	60f8      	str	r0, [r7, #12]
 8006950:	60b9      	str	r1, [r7, #8]
 8006952:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8006954:	2300      	movs	r3, #0
 8006956:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	2b00      	cmp	r3, #0
 800695c:	d042      	beq.n	80069e4 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 8006962:	6938      	ldr	r0, [r7, #16]
 8006964:	f000 f842 	bl	80069ec <USBD_GetLen>
 8006968:	4603      	mov	r3, r0
 800696a:	3301      	adds	r3, #1
 800696c:	005b      	lsls	r3, r3, #1
 800696e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006972:	d808      	bhi.n	8006986 <USBD_GetString+0x3e>
 8006974:	6938      	ldr	r0, [r7, #16]
 8006976:	f000 f839 	bl	80069ec <USBD_GetLen>
 800697a:	4603      	mov	r3, r0
 800697c:	3301      	adds	r3, #1
 800697e:	b29b      	uxth	r3, r3
 8006980:	005b      	lsls	r3, r3, #1
 8006982:	b29a      	uxth	r2, r3
 8006984:	e001      	b.n	800698a <USBD_GetString+0x42>
 8006986:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800698e:	7dfb      	ldrb	r3, [r7, #23]
 8006990:	68ba      	ldr	r2, [r7, #8]
 8006992:	4413      	add	r3, r2
 8006994:	687a      	ldr	r2, [r7, #4]
 8006996:	7812      	ldrb	r2, [r2, #0]
 8006998:	701a      	strb	r2, [r3, #0]
  idx++;
 800699a:	7dfb      	ldrb	r3, [r7, #23]
 800699c:	3301      	adds	r3, #1
 800699e:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80069a0:	7dfb      	ldrb	r3, [r7, #23]
 80069a2:	68ba      	ldr	r2, [r7, #8]
 80069a4:	4413      	add	r3, r2
 80069a6:	2203      	movs	r2, #3
 80069a8:	701a      	strb	r2, [r3, #0]
  idx++;
 80069aa:	7dfb      	ldrb	r3, [r7, #23]
 80069ac:	3301      	adds	r3, #1
 80069ae:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80069b0:	e013      	b.n	80069da <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 80069b2:	7dfb      	ldrb	r3, [r7, #23]
 80069b4:	68ba      	ldr	r2, [r7, #8]
 80069b6:	4413      	add	r3, r2
 80069b8:	693a      	ldr	r2, [r7, #16]
 80069ba:	7812      	ldrb	r2, [r2, #0]
 80069bc:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80069be:	693b      	ldr	r3, [r7, #16]
 80069c0:	3301      	adds	r3, #1
 80069c2:	613b      	str	r3, [r7, #16]
    idx++;
 80069c4:	7dfb      	ldrb	r3, [r7, #23]
 80069c6:	3301      	adds	r3, #1
 80069c8:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80069ca:	7dfb      	ldrb	r3, [r7, #23]
 80069cc:	68ba      	ldr	r2, [r7, #8]
 80069ce:	4413      	add	r3, r2
 80069d0:	2200      	movs	r2, #0
 80069d2:	701a      	strb	r2, [r3, #0]
    idx++;
 80069d4:	7dfb      	ldrb	r3, [r7, #23]
 80069d6:	3301      	adds	r3, #1
 80069d8:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80069da:	693b      	ldr	r3, [r7, #16]
 80069dc:	781b      	ldrb	r3, [r3, #0]
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d1e7      	bne.n	80069b2 <USBD_GetString+0x6a>
 80069e2:	e000      	b.n	80069e6 <USBD_GetString+0x9e>
    return;
 80069e4:	bf00      	nop
  }
}
 80069e6:	3718      	adds	r7, #24
 80069e8:	46bd      	mov	sp, r7
 80069ea:	bd80      	pop	{r7, pc}

080069ec <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80069ec:	b480      	push	{r7}
 80069ee:	b085      	sub	sp, #20
 80069f0:	af00      	add	r7, sp, #0
 80069f2:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80069f4:	2300      	movs	r3, #0
 80069f6:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80069fc:	e005      	b.n	8006a0a <USBD_GetLen+0x1e>
  {
    len++;
 80069fe:	7bfb      	ldrb	r3, [r7, #15]
 8006a00:	3301      	adds	r3, #1
 8006a02:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8006a04:	68bb      	ldr	r3, [r7, #8]
 8006a06:	3301      	adds	r3, #1
 8006a08:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8006a0a:	68bb      	ldr	r3, [r7, #8]
 8006a0c:	781b      	ldrb	r3, [r3, #0]
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d1f5      	bne.n	80069fe <USBD_GetLen+0x12>
  }

  return len;
 8006a12:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a14:	4618      	mov	r0, r3
 8006a16:	3714      	adds	r7, #20
 8006a18:	46bd      	mov	sp, r7
 8006a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a1e:	4770      	bx	lr

08006a20 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8006a20:	b580      	push	{r7, lr}
 8006a22:	b084      	sub	sp, #16
 8006a24:	af00      	add	r7, sp, #0
 8006a26:	60f8      	str	r0, [r7, #12]
 8006a28:	60b9      	str	r1, [r7, #8]
 8006a2a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	2202      	movs	r2, #2
 8006a30:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	687a      	ldr	r2, [r7, #4]
 8006a38:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	687a      	ldr	r2, [r7, #4]
 8006a3e:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	68ba      	ldr	r2, [r7, #8]
 8006a44:	2100      	movs	r1, #0
 8006a46:	68f8      	ldr	r0, [r7, #12]
 8006a48:	f000 fd27 	bl	800749a <USBD_LL_Transmit>

  return USBD_OK;
 8006a4c:	2300      	movs	r3, #0
}
 8006a4e:	4618      	mov	r0, r3
 8006a50:	3710      	adds	r7, #16
 8006a52:	46bd      	mov	sp, r7
 8006a54:	bd80      	pop	{r7, pc}

08006a56 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8006a56:	b580      	push	{r7, lr}
 8006a58:	b084      	sub	sp, #16
 8006a5a:	af00      	add	r7, sp, #0
 8006a5c:	60f8      	str	r0, [r7, #12]
 8006a5e:	60b9      	str	r1, [r7, #8]
 8006a60:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	68ba      	ldr	r2, [r7, #8]
 8006a66:	2100      	movs	r1, #0
 8006a68:	68f8      	ldr	r0, [r7, #12]
 8006a6a:	f000 fd16 	bl	800749a <USBD_LL_Transmit>

  return USBD_OK;
 8006a6e:	2300      	movs	r3, #0
}
 8006a70:	4618      	mov	r0, r3
 8006a72:	3710      	adds	r7, #16
 8006a74:	46bd      	mov	sp, r7
 8006a76:	bd80      	pop	{r7, pc}

08006a78 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8006a78:	b580      	push	{r7, lr}
 8006a7a:	b084      	sub	sp, #16
 8006a7c:	af00      	add	r7, sp, #0
 8006a7e:	60f8      	str	r0, [r7, #12]
 8006a80:	60b9      	str	r1, [r7, #8]
 8006a82:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	2203      	movs	r2, #3
 8006a88:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	687a      	ldr	r2, [r7, #4]
 8006a90:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	687a      	ldr	r2, [r7, #4]
 8006a98:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	68ba      	ldr	r2, [r7, #8]
 8006aa0:	2100      	movs	r1, #0
 8006aa2:	68f8      	ldr	r0, [r7, #12]
 8006aa4:	f000 fd1a 	bl	80074dc <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006aa8:	2300      	movs	r3, #0
}
 8006aaa:	4618      	mov	r0, r3
 8006aac:	3710      	adds	r7, #16
 8006aae:	46bd      	mov	sp, r7
 8006ab0:	bd80      	pop	{r7, pc}

08006ab2 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8006ab2:	b580      	push	{r7, lr}
 8006ab4:	b084      	sub	sp, #16
 8006ab6:	af00      	add	r7, sp, #0
 8006ab8:	60f8      	str	r0, [r7, #12]
 8006aba:	60b9      	str	r1, [r7, #8]
 8006abc:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	68ba      	ldr	r2, [r7, #8]
 8006ac2:	2100      	movs	r1, #0
 8006ac4:	68f8      	ldr	r0, [r7, #12]
 8006ac6:	f000 fd09 	bl	80074dc <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006aca:	2300      	movs	r3, #0
}
 8006acc:	4618      	mov	r0, r3
 8006ace:	3710      	adds	r7, #16
 8006ad0:	46bd      	mov	sp, r7
 8006ad2:	bd80      	pop	{r7, pc}

08006ad4 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8006ad4:	b580      	push	{r7, lr}
 8006ad6:	b082      	sub	sp, #8
 8006ad8:	af00      	add	r7, sp, #0
 8006ada:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	2204      	movs	r2, #4
 8006ae0:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8006ae4:	2300      	movs	r3, #0
 8006ae6:	2200      	movs	r2, #0
 8006ae8:	2100      	movs	r1, #0
 8006aea:	6878      	ldr	r0, [r7, #4]
 8006aec:	f000 fcd5 	bl	800749a <USBD_LL_Transmit>

  return USBD_OK;
 8006af0:	2300      	movs	r3, #0
}
 8006af2:	4618      	mov	r0, r3
 8006af4:	3708      	adds	r7, #8
 8006af6:	46bd      	mov	sp, r7
 8006af8:	bd80      	pop	{r7, pc}

08006afa <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8006afa:	b580      	push	{r7, lr}
 8006afc:	b082      	sub	sp, #8
 8006afe:	af00      	add	r7, sp, #0
 8006b00:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	2205      	movs	r2, #5
 8006b06:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006b0a:	2300      	movs	r3, #0
 8006b0c:	2200      	movs	r2, #0
 8006b0e:	2100      	movs	r1, #0
 8006b10:	6878      	ldr	r0, [r7, #4]
 8006b12:	f000 fce3 	bl	80074dc <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006b16:	2300      	movs	r3, #0
}
 8006b18:	4618      	mov	r0, r3
 8006b1a:	3708      	adds	r7, #8
 8006b1c:	46bd      	mov	sp, r7
 8006b1e:	bd80      	pop	{r7, pc}

08006b20 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8006b20:	b580      	push	{r7, lr}
 8006b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8006b24:	2200      	movs	r2, #0
 8006b26:	4912      	ldr	r1, [pc, #72]	@ (8006b70 <MX_USB_DEVICE_Init+0x50>)
 8006b28:	4812      	ldr	r0, [pc, #72]	@ (8006b74 <MX_USB_DEVICE_Init+0x54>)
 8006b2a:	f7fe fcf7 	bl	800551c <USBD_Init>
 8006b2e:	4603      	mov	r3, r0
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d001      	beq.n	8006b38 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8006b34:	f7f9 fe76 	bl	8000824 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CUSTOM_HID) != USBD_OK)
 8006b38:	490f      	ldr	r1, [pc, #60]	@ (8006b78 <MX_USB_DEVICE_Init+0x58>)
 8006b3a:	480e      	ldr	r0, [pc, #56]	@ (8006b74 <MX_USB_DEVICE_Init+0x54>)
 8006b3c:	f7fe fd1e 	bl	800557c <USBD_RegisterClass>
 8006b40:	4603      	mov	r3, r0
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d001      	beq.n	8006b4a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8006b46:	f7f9 fe6d 	bl	8000824 <Error_Handler>
  }
  if (USBD_CUSTOM_HID_RegisterInterface(&hUsbDeviceFS, &USBD_CustomHID_fops_FS) != USBD_OK)
 8006b4a:	490c      	ldr	r1, [pc, #48]	@ (8006b7c <MX_USB_DEVICE_Init+0x5c>)
 8006b4c:	4809      	ldr	r0, [pc, #36]	@ (8006b74 <MX_USB_DEVICE_Init+0x54>)
 8006b4e:	f7fe fccb 	bl	80054e8 <USBD_CUSTOM_HID_RegisterInterface>
 8006b52:	4603      	mov	r3, r0
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d001      	beq.n	8006b5c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8006b58:	f7f9 fe64 	bl	8000824 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8006b5c:	4805      	ldr	r0, [pc, #20]	@ (8006b74 <MX_USB_DEVICE_Init+0x54>)
 8006b5e:	f7fe fd43 	bl	80055e8 <USBD_Start>
 8006b62:	4603      	mov	r3, r0
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d001      	beq.n	8006b6c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8006b68:	f7f9 fe5c 	bl	8000824 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8006b6c:	bf00      	nop
 8006b6e:	bd80      	pop	{r7, pc}
 8006b70:	200005c0 	.word	0x200005c0
 8006b74:	200006e8 	.word	0x200006e8
 8006b78:	2000000c 	.word	0x2000000c
 8006b7c:	200005b0 	.word	0x200005b0

08006b80 <CUSTOM_HID_Init_FS>:
/**
  * @brief  Initializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_Init_FS(void)
{
 8006b80:	b480      	push	{r7}
 8006b82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8006b84:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8006b86:	4618      	mov	r0, r3
 8006b88:	46bd      	mov	sp, r7
 8006b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b8e:	4770      	bx	lr

08006b90 <CUSTOM_HID_DeInit_FS>:
/**
  * @brief  DeInitializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_DeInit_FS(void)
{
 8006b90:	b480      	push	{r7}
 8006b92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 8006b94:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8006b96:	4618      	mov	r0, r3
 8006b98:	46bd      	mov	sp, r7
 8006b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b9e:	4770      	bx	lr

08006ba0 <CUSTOM_HID_OutEvent_FS>:
  * @param  event_idx: Event index
  * @param  state: Event state
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_OutEvent_FS(uint8_t event_idx, uint8_t state)
{
 8006ba0:	b580      	push	{r7, lr}
 8006ba2:	b088      	sub	sp, #32
 8006ba4:	af00      	add	r7, sp, #0
 8006ba6:	4603      	mov	r3, r0
 8006ba8:	460a      	mov	r2, r1
 8006baa:	71fb      	strb	r3, [r7, #7]
 8006bac:	4613      	mov	r3, r2
 8006bae:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN 6 */
  UNUSED(event_idx);
  UNUSED(state);

  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)hUsbDeviceFS.pClassData;
 8006bb0:	4b69      	ldr	r3, [pc, #420]	@ (8006d58 <CUSTOM_HID_OutEvent_FS+0x1b8>)
 8006bb2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8006bb6:	617b      	str	r3, [r7, #20]
      uint8_t *report = hhid->Report_buf;
 8006bb8:	697b      	ldr	r3, [r7, #20]
 8006bba:	613b      	str	r3, [r7, #16]
          uint8_t type;
          int16_t magnitude;
          uint8_t playing;
      } effects[40];  // Supports up to 40 effects

      switch (report[0])  // Report ID
 8006bbc:	693b      	ldr	r3, [r7, #16]
 8006bbe:	781b      	ldrb	r3, [r3, #0]
 8006bc0:	3b01      	subs	r3, #1
 8006bc2:	2b0b      	cmp	r3, #11
 8006bc4:	d87f      	bhi.n	8006cc6 <CUSTOM_HID_OutEvent_FS+0x126>
 8006bc6:	a201      	add	r2, pc, #4	@ (adr r2, 8006bcc <CUSTOM_HID_OutEvent_FS+0x2c>)
 8006bc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bcc:	08006bfd 	.word	0x08006bfd
 8006bd0:	08006cc7 	.word	0x08006cc7
 8006bd4:	08006cc7 	.word	0x08006cc7
 8006bd8:	08006cc7 	.word	0x08006cc7
 8006bdc:	08006c2b 	.word	0x08006c2b
 8006be0:	08006cc7 	.word	0x08006cc7
 8006be4:	08006cc7 	.word	0x08006cc7
 8006be8:	08006cc7 	.word	0x08006cc7
 8006bec:	08006cc7 	.word	0x08006cc7
 8006bf0:	08006c6d 	.word	0x08006c6d
 8006bf4:	08006cc7 	.word	0x08006cc7
 8006bf8:	08006cc7 	.word	0x08006cc7
      {
          case 0x01:  // Set Effect Report
          {
              uint8_t blockId = report[1];
 8006bfc:	693b      	ldr	r3, [r7, #16]
 8006bfe:	785b      	ldrb	r3, [r3, #1]
 8006c00:	727b      	strb	r3, [r7, #9]
              uint8_t effectType = report[2];  // e.g., 0x26 = Constant Force
 8006c02:	693b      	ldr	r3, [r7, #16]
 8006c04:	789b      	ldrb	r3, [r3, #2]
 8006c06:	723b      	strb	r3, [r7, #8]

              if (blockId >= 1 && blockId <= 40)
 8006c08:	7a7b      	ldrb	r3, [r7, #9]
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d05d      	beq.n	8006cca <CUSTOM_HID_OutEvent_FS+0x12a>
 8006c0e:	7a7b      	ldrb	r3, [r7, #9]
 8006c10:	2b28      	cmp	r3, #40	@ 0x28
 8006c12:	d85a      	bhi.n	8006cca <CUSTOM_HID_OutEvent_FS+0x12a>
                  effects[blockId - 1].type = effectType;
 8006c14:	7a7b      	ldrb	r3, [r7, #9]
 8006c16:	1e5a      	subs	r2, r3, #1
 8006c18:	4950      	ldr	r1, [pc, #320]	@ (8006d5c <CUSTOM_HID_OutEvent_FS+0x1bc>)
 8006c1a:	4613      	mov	r3, r2
 8006c1c:	005b      	lsls	r3, r3, #1
 8006c1e:	4413      	add	r3, r2
 8006c20:	005b      	lsls	r3, r3, #1
 8006c22:	440b      	add	r3, r1
 8006c24:	7a3a      	ldrb	r2, [r7, #8]
 8006c26:	701a      	strb	r2, [r3, #0]

              break;
 8006c28:	e04f      	b.n	8006cca <CUSTOM_HID_OutEvent_FS+0x12a>
              // Silently accept and ignore
              break;

          case 0x05:  // Set Constant Force Report
          {
              uint8_t blockId = report[1];
 8006c2a:	693b      	ldr	r3, [r7, #16]
 8006c2c:	785b      	ldrb	r3, [r3, #1]
 8006c2e:	737b      	strb	r3, [r7, #13]
              int16_t magnitude = (int16_t)(report[2] | (report[3] << 8));
 8006c30:	693b      	ldr	r3, [r7, #16]
 8006c32:	3302      	adds	r3, #2
 8006c34:	781b      	ldrb	r3, [r3, #0]
 8006c36:	b21a      	sxth	r2, r3
 8006c38:	693b      	ldr	r3, [r7, #16]
 8006c3a:	3303      	adds	r3, #3
 8006c3c:	781b      	ldrb	r3, [r3, #0]
 8006c3e:	b21b      	sxth	r3, r3
 8006c40:	021b      	lsls	r3, r3, #8
 8006c42:	b21b      	sxth	r3, r3
 8006c44:	4313      	orrs	r3, r2
 8006c46:	817b      	strh	r3, [r7, #10]

              if (blockId >= 1 && blockId <= 40)
 8006c48:	7b7b      	ldrb	r3, [r7, #13]
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d03f      	beq.n	8006cce <CUSTOM_HID_OutEvent_FS+0x12e>
 8006c4e:	7b7b      	ldrb	r3, [r7, #13]
 8006c50:	2b28      	cmp	r3, #40	@ 0x28
 8006c52:	d83c      	bhi.n	8006cce <CUSTOM_HID_OutEvent_FS+0x12e>
                  effects[blockId - 1].magnitude = magnitude;
 8006c54:	7b7b      	ldrb	r3, [r7, #13]
 8006c56:	1e5a      	subs	r2, r3, #1
 8006c58:	4940      	ldr	r1, [pc, #256]	@ (8006d5c <CUSTOM_HID_OutEvent_FS+0x1bc>)
 8006c5a:	4613      	mov	r3, r2
 8006c5c:	005b      	lsls	r3, r3, #1
 8006c5e:	4413      	add	r3, r2
 8006c60:	005b      	lsls	r3, r3, #1
 8006c62:	440b      	add	r3, r1
 8006c64:	3302      	adds	r3, #2
 8006c66:	897a      	ldrh	r2, [r7, #10]
 8006c68:	801a      	strh	r2, [r3, #0]

              break;
 8006c6a:	e030      	b.n	8006cce <CUSTOM_HID_OutEvent_FS+0x12e>
          }

          case 0x0A:  // Effect Operation Report
          {
              uint8_t blockId = report[1];
 8006c6c:	693b      	ldr	r3, [r7, #16]
 8006c6e:	785b      	ldrb	r3, [r3, #1]
 8006c70:	73fb      	strb	r3, [r7, #15]
              uint8_t operation = report[2]; // 1 = Start, 2 = Start Solo, 3 = Stop
 8006c72:	693b      	ldr	r3, [r7, #16]
 8006c74:	789b      	ldrb	r3, [r3, #2]
 8006c76:	73bb      	strb	r3, [r7, #14]

              if (blockId >= 1 && blockId <= 40) {
 8006c78:	7bfb      	ldrb	r3, [r7, #15]
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d029      	beq.n	8006cd2 <CUSTOM_HID_OutEvent_FS+0x132>
 8006c7e:	7bfb      	ldrb	r3, [r7, #15]
 8006c80:	2b28      	cmp	r3, #40	@ 0x28
 8006c82:	d826      	bhi.n	8006cd2 <CUSTOM_HID_OutEvent_FS+0x132>
                  if (operation == 1 || operation == 2)
 8006c84:	7bbb      	ldrb	r3, [r7, #14]
 8006c86:	2b01      	cmp	r3, #1
 8006c88:	d002      	beq.n	8006c90 <CUSTOM_HID_OutEvent_FS+0xf0>
 8006c8a:	7bbb      	ldrb	r3, [r7, #14]
 8006c8c:	2b02      	cmp	r3, #2
 8006c8e:	d10b      	bne.n	8006ca8 <CUSTOM_HID_OutEvent_FS+0x108>
                      effects[blockId - 1].playing = 1;
 8006c90:	7bfb      	ldrb	r3, [r7, #15]
 8006c92:	1e5a      	subs	r2, r3, #1
 8006c94:	4931      	ldr	r1, [pc, #196]	@ (8006d5c <CUSTOM_HID_OutEvent_FS+0x1bc>)
 8006c96:	4613      	mov	r3, r2
 8006c98:	005b      	lsls	r3, r3, #1
 8006c9a:	4413      	add	r3, r2
 8006c9c:	005b      	lsls	r3, r3, #1
 8006c9e:	440b      	add	r3, r1
 8006ca0:	3304      	adds	r3, #4
 8006ca2:	2201      	movs	r2, #1
 8006ca4:	701a      	strb	r2, [r3, #0]
                  else if (operation == 3)
                      effects[blockId - 1].playing = 0;
              }

              break;
 8006ca6:	e014      	b.n	8006cd2 <CUSTOM_HID_OutEvent_FS+0x132>
                  else if (operation == 3)
 8006ca8:	7bbb      	ldrb	r3, [r7, #14]
 8006caa:	2b03      	cmp	r3, #3
 8006cac:	d111      	bne.n	8006cd2 <CUSTOM_HID_OutEvent_FS+0x132>
                      effects[blockId - 1].playing = 0;
 8006cae:	7bfb      	ldrb	r3, [r7, #15]
 8006cb0:	1e5a      	subs	r2, r3, #1
 8006cb2:	492a      	ldr	r1, [pc, #168]	@ (8006d5c <CUSTOM_HID_OutEvent_FS+0x1bc>)
 8006cb4:	4613      	mov	r3, r2
 8006cb6:	005b      	lsls	r3, r3, #1
 8006cb8:	4413      	add	r3, r2
 8006cba:	005b      	lsls	r3, r3, #1
 8006cbc:	440b      	add	r3, r1
 8006cbe:	3304      	adds	r3, #4
 8006cc0:	2200      	movs	r2, #0
 8006cc2:	701a      	strb	r2, [r3, #0]
              break;
 8006cc4:	e005      	b.n	8006cd2 <CUSTOM_HID_OutEvent_FS+0x132>
          }

          default:
              // Unknown Report ID, ignore
              break;
 8006cc6:	bf00      	nop
 8006cc8:	e004      	b.n	8006cd4 <CUSTOM_HID_OutEvent_FS+0x134>
              break;
 8006cca:	bf00      	nop
 8006ccc:	e002      	b.n	8006cd4 <CUSTOM_HID_OutEvent_FS+0x134>
              break;
 8006cce:	bf00      	nop
 8006cd0:	e000      	b.n	8006cd4 <CUSTOM_HID_OutEvent_FS+0x134>
              break;
 8006cd2:	bf00      	nop
      }

      // === Apply Constant Force ===
      int16_t totalForce = 0;
 8006cd4:	2300      	movs	r3, #0
 8006cd6:	83fb      	strh	r3, [r7, #30]

      for (int i = 0; i < 40; ++i) {
 8006cd8:	2300      	movs	r3, #0
 8006cda:	61bb      	str	r3, [r7, #24]
 8006cdc:	e026      	b.n	8006d2c <CUSTOM_HID_OutEvent_FS+0x18c>
          if (effects[i].playing && effects[i].type == 0x26 /* Constant Force */) {
 8006cde:	491f      	ldr	r1, [pc, #124]	@ (8006d5c <CUSTOM_HID_OutEvent_FS+0x1bc>)
 8006ce0:	69ba      	ldr	r2, [r7, #24]
 8006ce2:	4613      	mov	r3, r2
 8006ce4:	005b      	lsls	r3, r3, #1
 8006ce6:	4413      	add	r3, r2
 8006ce8:	005b      	lsls	r3, r3, #1
 8006cea:	440b      	add	r3, r1
 8006cec:	3304      	adds	r3, #4
 8006cee:	781b      	ldrb	r3, [r3, #0]
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d018      	beq.n	8006d26 <CUSTOM_HID_OutEvent_FS+0x186>
 8006cf4:	4919      	ldr	r1, [pc, #100]	@ (8006d5c <CUSTOM_HID_OutEvent_FS+0x1bc>)
 8006cf6:	69ba      	ldr	r2, [r7, #24]
 8006cf8:	4613      	mov	r3, r2
 8006cfa:	005b      	lsls	r3, r3, #1
 8006cfc:	4413      	add	r3, r2
 8006cfe:	005b      	lsls	r3, r3, #1
 8006d00:	440b      	add	r3, r1
 8006d02:	781b      	ldrb	r3, [r3, #0]
 8006d04:	2b26      	cmp	r3, #38	@ 0x26
 8006d06:	d10e      	bne.n	8006d26 <CUSTOM_HID_OutEvent_FS+0x186>
              totalForce += effects[i].magnitude;
 8006d08:	4914      	ldr	r1, [pc, #80]	@ (8006d5c <CUSTOM_HID_OutEvent_FS+0x1bc>)
 8006d0a:	69ba      	ldr	r2, [r7, #24]
 8006d0c:	4613      	mov	r3, r2
 8006d0e:	005b      	lsls	r3, r3, #1
 8006d10:	4413      	add	r3, r2
 8006d12:	005b      	lsls	r3, r3, #1
 8006d14:	440b      	add	r3, r1
 8006d16:	3302      	adds	r3, #2
 8006d18:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006d1c:	b29a      	uxth	r2, r3
 8006d1e:	8bfb      	ldrh	r3, [r7, #30]
 8006d20:	4413      	add	r3, r2
 8006d22:	b29b      	uxth	r3, r3
 8006d24:	83fb      	strh	r3, [r7, #30]
      for (int i = 0; i < 40; ++i) {
 8006d26:	69bb      	ldr	r3, [r7, #24]
 8006d28:	3301      	adds	r3, #1
 8006d2a:	61bb      	str	r3, [r7, #24]
 8006d2c:	69bb      	ldr	r3, [r7, #24]
 8006d2e:	2b27      	cmp	r3, #39	@ 0x27
 8006d30:	ddd5      	ble.n	8006cde <CUSTOM_HID_OutEvent_FS+0x13e>
          }
      }

      // Apply to motor (replace with your actual function)
      apply_force_to_motor(totalForce);
 8006d32:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8006d36:	4618      	mov	r0, r3
 8006d38:	f000 f812 	bl	8006d60 <apply_force_to_motor>

  /* Start next USB packet transfer once data processing is completed */
  if (USBD_CUSTOM_HID_ReceivePacket(&hUsbDeviceFS) != (uint8_t)USBD_OK)
 8006d3c:	4806      	ldr	r0, [pc, #24]	@ (8006d58 <CUSTOM_HID_OutEvent_FS+0x1b8>)
 8006d3e:	f7fe fb71 	bl	8005424 <USBD_CUSTOM_HID_ReceivePacket>
 8006d42:	4603      	mov	r3, r0
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d002      	beq.n	8006d4e <CUSTOM_HID_OutEvent_FS+0x1ae>
  {
    return -1;
 8006d48:	f04f 33ff 	mov.w	r3, #4294967295
 8006d4c:	e000      	b.n	8006d50 <CUSTOM_HID_OutEvent_FS+0x1b0>
  }

  return (USBD_OK);
 8006d4e:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8006d50:	4618      	mov	r0, r3
 8006d52:	3720      	adds	r7, #32
 8006d54:	46bd      	mov	sp, r7
 8006d56:	bd80      	pop	{r7, pc}
 8006d58:	200006e8 	.word	0x200006e8
 8006d5c:	200009c4 	.word	0x200009c4

08006d60 <apply_force_to_motor>:
  return USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, report, len);
}
*/

void apply_force_to_motor(int16_t force)
{
 8006d60:	b580      	push	{r7, lr}
 8006d62:	b082      	sub	sp, #8
 8006d64:	af00      	add	r7, sp, #0
 8006d66:	4603      	mov	r3, r0
 8006d68:	80fb      	strh	r3, [r7, #6]
  // Replace this with your actual motor control code
  // Example: set PWM duty cycle or direction
  printf("Applying force: %d\n", force);
 8006d6a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006d6e:	4619      	mov	r1, r3
 8006d70:	4803      	ldr	r0, [pc, #12]	@ (8006d80 <apply_force_to_motor+0x20>)
 8006d72:	f000 fcdb 	bl	800772c <iprintf>
}
 8006d76:	bf00      	nop
 8006d78:	3708      	adds	r7, #8
 8006d7a:	46bd      	mov	sp, r7
 8006d7c:	bd80      	pop	{r7, pc}
 8006d7e:	bf00      	nop
 8006d80:	0800841c 	.word	0x0800841c

08006d84 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006d84:	b480      	push	{r7}
 8006d86:	b083      	sub	sp, #12
 8006d88:	af00      	add	r7, sp, #0
 8006d8a:	4603      	mov	r3, r0
 8006d8c:	6039      	str	r1, [r7, #0]
 8006d8e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8006d90:	683b      	ldr	r3, [r7, #0]
 8006d92:	2212      	movs	r2, #18
 8006d94:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8006d96:	4b03      	ldr	r3, [pc, #12]	@ (8006da4 <USBD_FS_DeviceDescriptor+0x20>)
}
 8006d98:	4618      	mov	r0, r3
 8006d9a:	370c      	adds	r7, #12
 8006d9c:	46bd      	mov	sp, r7
 8006d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da2:	4770      	bx	lr
 8006da4:	200005dc 	.word	0x200005dc

08006da8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006da8:	b480      	push	{r7}
 8006daa:	b083      	sub	sp, #12
 8006dac:	af00      	add	r7, sp, #0
 8006dae:	4603      	mov	r3, r0
 8006db0:	6039      	str	r1, [r7, #0]
 8006db2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8006db4:	683b      	ldr	r3, [r7, #0]
 8006db6:	2204      	movs	r2, #4
 8006db8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8006dba:	4b03      	ldr	r3, [pc, #12]	@ (8006dc8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8006dbc:	4618      	mov	r0, r3
 8006dbe:	370c      	adds	r7, #12
 8006dc0:	46bd      	mov	sp, r7
 8006dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc6:	4770      	bx	lr
 8006dc8:	200005f0 	.word	0x200005f0

08006dcc <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006dcc:	b580      	push	{r7, lr}
 8006dce:	b082      	sub	sp, #8
 8006dd0:	af00      	add	r7, sp, #0
 8006dd2:	4603      	mov	r3, r0
 8006dd4:	6039      	str	r1, [r7, #0]
 8006dd6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006dd8:	79fb      	ldrb	r3, [r7, #7]
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d105      	bne.n	8006dea <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006dde:	683a      	ldr	r2, [r7, #0]
 8006de0:	4907      	ldr	r1, [pc, #28]	@ (8006e00 <USBD_FS_ProductStrDescriptor+0x34>)
 8006de2:	4808      	ldr	r0, [pc, #32]	@ (8006e04 <USBD_FS_ProductStrDescriptor+0x38>)
 8006de4:	f7ff fdb0 	bl	8006948 <USBD_GetString>
 8006de8:	e004      	b.n	8006df4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006dea:	683a      	ldr	r2, [r7, #0]
 8006dec:	4904      	ldr	r1, [pc, #16]	@ (8006e00 <USBD_FS_ProductStrDescriptor+0x34>)
 8006dee:	4805      	ldr	r0, [pc, #20]	@ (8006e04 <USBD_FS_ProductStrDescriptor+0x38>)
 8006df0:	f7ff fdaa 	bl	8006948 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006df4:	4b02      	ldr	r3, [pc, #8]	@ (8006e00 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8006df6:	4618      	mov	r0, r3
 8006df8:	3708      	adds	r7, #8
 8006dfa:	46bd      	mov	sp, r7
 8006dfc:	bd80      	pop	{r7, pc}
 8006dfe:	bf00      	nop
 8006e00:	20000ab4 	.word	0x20000ab4
 8006e04:	08008430 	.word	0x08008430

08006e08 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006e08:	b580      	push	{r7, lr}
 8006e0a:	b082      	sub	sp, #8
 8006e0c:	af00      	add	r7, sp, #0
 8006e0e:	4603      	mov	r3, r0
 8006e10:	6039      	str	r1, [r7, #0]
 8006e12:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8006e14:	683a      	ldr	r2, [r7, #0]
 8006e16:	4904      	ldr	r1, [pc, #16]	@ (8006e28 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8006e18:	4804      	ldr	r0, [pc, #16]	@ (8006e2c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8006e1a:	f7ff fd95 	bl	8006948 <USBD_GetString>
  return USBD_StrDesc;
 8006e1e:	4b02      	ldr	r3, [pc, #8]	@ (8006e28 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8006e20:	4618      	mov	r0, r3
 8006e22:	3708      	adds	r7, #8
 8006e24:	46bd      	mov	sp, r7
 8006e26:	bd80      	pop	{r7, pc}
 8006e28:	20000ab4 	.word	0x20000ab4
 8006e2c:	08008450 	.word	0x08008450

08006e30 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006e30:	b580      	push	{r7, lr}
 8006e32:	b082      	sub	sp, #8
 8006e34:	af00      	add	r7, sp, #0
 8006e36:	4603      	mov	r3, r0
 8006e38:	6039      	str	r1, [r7, #0]
 8006e3a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8006e3c:	683b      	ldr	r3, [r7, #0]
 8006e3e:	221a      	movs	r2, #26
 8006e40:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8006e42:	f000 f843 	bl	8006ecc <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8006e46:	4b02      	ldr	r3, [pc, #8]	@ (8006e50 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8006e48:	4618      	mov	r0, r3
 8006e4a:	3708      	adds	r7, #8
 8006e4c:	46bd      	mov	sp, r7
 8006e4e:	bd80      	pop	{r7, pc}
 8006e50:	200005f4 	.word	0x200005f4

08006e54 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006e54:	b580      	push	{r7, lr}
 8006e56:	b082      	sub	sp, #8
 8006e58:	af00      	add	r7, sp, #0
 8006e5a:	4603      	mov	r3, r0
 8006e5c:	6039      	str	r1, [r7, #0]
 8006e5e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8006e60:	79fb      	ldrb	r3, [r7, #7]
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d105      	bne.n	8006e72 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006e66:	683a      	ldr	r2, [r7, #0]
 8006e68:	4907      	ldr	r1, [pc, #28]	@ (8006e88 <USBD_FS_ConfigStrDescriptor+0x34>)
 8006e6a:	4808      	ldr	r0, [pc, #32]	@ (8006e8c <USBD_FS_ConfigStrDescriptor+0x38>)
 8006e6c:	f7ff fd6c 	bl	8006948 <USBD_GetString>
 8006e70:	e004      	b.n	8006e7c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006e72:	683a      	ldr	r2, [r7, #0]
 8006e74:	4904      	ldr	r1, [pc, #16]	@ (8006e88 <USBD_FS_ConfigStrDescriptor+0x34>)
 8006e76:	4805      	ldr	r0, [pc, #20]	@ (8006e8c <USBD_FS_ConfigStrDescriptor+0x38>)
 8006e78:	f7ff fd66 	bl	8006948 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006e7c:	4b02      	ldr	r3, [pc, #8]	@ (8006e88 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8006e7e:	4618      	mov	r0, r3
 8006e80:	3708      	adds	r7, #8
 8006e82:	46bd      	mov	sp, r7
 8006e84:	bd80      	pop	{r7, pc}
 8006e86:	bf00      	nop
 8006e88:	20000ab4 	.word	0x20000ab4
 8006e8c:	08008464 	.word	0x08008464

08006e90 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006e90:	b580      	push	{r7, lr}
 8006e92:	b082      	sub	sp, #8
 8006e94:	af00      	add	r7, sp, #0
 8006e96:	4603      	mov	r3, r0
 8006e98:	6039      	str	r1, [r7, #0]
 8006e9a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006e9c:	79fb      	ldrb	r3, [r7, #7]
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d105      	bne.n	8006eae <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006ea2:	683a      	ldr	r2, [r7, #0]
 8006ea4:	4907      	ldr	r1, [pc, #28]	@ (8006ec4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8006ea6:	4808      	ldr	r0, [pc, #32]	@ (8006ec8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006ea8:	f7ff fd4e 	bl	8006948 <USBD_GetString>
 8006eac:	e004      	b.n	8006eb8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006eae:	683a      	ldr	r2, [r7, #0]
 8006eb0:	4904      	ldr	r1, [pc, #16]	@ (8006ec4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8006eb2:	4805      	ldr	r0, [pc, #20]	@ (8006ec8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006eb4:	f7ff fd48 	bl	8006948 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006eb8:	4b02      	ldr	r3, [pc, #8]	@ (8006ec4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8006eba:	4618      	mov	r0, r3
 8006ebc:	3708      	adds	r7, #8
 8006ebe:	46bd      	mov	sp, r7
 8006ec0:	bd80      	pop	{r7, pc}
 8006ec2:	bf00      	nop
 8006ec4:	20000ab4 	.word	0x20000ab4
 8006ec8:	08008478 	.word	0x08008478

08006ecc <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8006ecc:	b580      	push	{r7, lr}
 8006ece:	b084      	sub	sp, #16
 8006ed0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8006ed2:	4b0f      	ldr	r3, [pc, #60]	@ (8006f10 <Get_SerialNum+0x44>)
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8006ed8:	4b0e      	ldr	r3, [pc, #56]	@ (8006f14 <Get_SerialNum+0x48>)
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8006ede:	4b0e      	ldr	r3, [pc, #56]	@ (8006f18 <Get_SerialNum+0x4c>)
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8006ee4:	68fa      	ldr	r2, [r7, #12]
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	4413      	add	r3, r2
 8006eea:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d009      	beq.n	8006f06 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8006ef2:	2208      	movs	r2, #8
 8006ef4:	4909      	ldr	r1, [pc, #36]	@ (8006f1c <Get_SerialNum+0x50>)
 8006ef6:	68f8      	ldr	r0, [r7, #12]
 8006ef8:	f000 f814 	bl	8006f24 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8006efc:	2204      	movs	r2, #4
 8006efe:	4908      	ldr	r1, [pc, #32]	@ (8006f20 <Get_SerialNum+0x54>)
 8006f00:	68b8      	ldr	r0, [r7, #8]
 8006f02:	f000 f80f 	bl	8006f24 <IntToUnicode>
  }
}
 8006f06:	bf00      	nop
 8006f08:	3710      	adds	r7, #16
 8006f0a:	46bd      	mov	sp, r7
 8006f0c:	bd80      	pop	{r7, pc}
 8006f0e:	bf00      	nop
 8006f10:	1fff7a10 	.word	0x1fff7a10
 8006f14:	1fff7a14 	.word	0x1fff7a14
 8006f18:	1fff7a18 	.word	0x1fff7a18
 8006f1c:	200005f6 	.word	0x200005f6
 8006f20:	20000606 	.word	0x20000606

08006f24 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8006f24:	b480      	push	{r7}
 8006f26:	b087      	sub	sp, #28
 8006f28:	af00      	add	r7, sp, #0
 8006f2a:	60f8      	str	r0, [r7, #12]
 8006f2c:	60b9      	str	r1, [r7, #8]
 8006f2e:	4613      	mov	r3, r2
 8006f30:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8006f32:	2300      	movs	r3, #0
 8006f34:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8006f36:	2300      	movs	r3, #0
 8006f38:	75fb      	strb	r3, [r7, #23]
 8006f3a:	e027      	b.n	8006f8c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	0f1b      	lsrs	r3, r3, #28
 8006f40:	2b09      	cmp	r3, #9
 8006f42:	d80b      	bhi.n	8006f5c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	0f1b      	lsrs	r3, r3, #28
 8006f48:	b2da      	uxtb	r2, r3
 8006f4a:	7dfb      	ldrb	r3, [r7, #23]
 8006f4c:	005b      	lsls	r3, r3, #1
 8006f4e:	4619      	mov	r1, r3
 8006f50:	68bb      	ldr	r3, [r7, #8]
 8006f52:	440b      	add	r3, r1
 8006f54:	3230      	adds	r2, #48	@ 0x30
 8006f56:	b2d2      	uxtb	r2, r2
 8006f58:	701a      	strb	r2, [r3, #0]
 8006f5a:	e00a      	b.n	8006f72 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	0f1b      	lsrs	r3, r3, #28
 8006f60:	b2da      	uxtb	r2, r3
 8006f62:	7dfb      	ldrb	r3, [r7, #23]
 8006f64:	005b      	lsls	r3, r3, #1
 8006f66:	4619      	mov	r1, r3
 8006f68:	68bb      	ldr	r3, [r7, #8]
 8006f6a:	440b      	add	r3, r1
 8006f6c:	3237      	adds	r2, #55	@ 0x37
 8006f6e:	b2d2      	uxtb	r2, r2
 8006f70:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	011b      	lsls	r3, r3, #4
 8006f76:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8006f78:	7dfb      	ldrb	r3, [r7, #23]
 8006f7a:	005b      	lsls	r3, r3, #1
 8006f7c:	3301      	adds	r3, #1
 8006f7e:	68ba      	ldr	r2, [r7, #8]
 8006f80:	4413      	add	r3, r2
 8006f82:	2200      	movs	r2, #0
 8006f84:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8006f86:	7dfb      	ldrb	r3, [r7, #23]
 8006f88:	3301      	adds	r3, #1
 8006f8a:	75fb      	strb	r3, [r7, #23]
 8006f8c:	7dfa      	ldrb	r2, [r7, #23]
 8006f8e:	79fb      	ldrb	r3, [r7, #7]
 8006f90:	429a      	cmp	r2, r3
 8006f92:	d3d3      	bcc.n	8006f3c <IntToUnicode+0x18>
  }
}
 8006f94:	bf00      	nop
 8006f96:	bf00      	nop
 8006f98:	371c      	adds	r7, #28
 8006f9a:	46bd      	mov	sp, r7
 8006f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa0:	4770      	bx	lr
	...

08006fa4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8006fa4:	b580      	push	{r7, lr}
 8006fa6:	b08a      	sub	sp, #40	@ 0x28
 8006fa8:	af00      	add	r7, sp, #0
 8006faa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006fac:	f107 0314 	add.w	r3, r7, #20
 8006fb0:	2200      	movs	r2, #0
 8006fb2:	601a      	str	r2, [r3, #0]
 8006fb4:	605a      	str	r2, [r3, #4]
 8006fb6:	609a      	str	r2, [r3, #8]
 8006fb8:	60da      	str	r2, [r3, #12]
 8006fba:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006fc4:	d13a      	bne.n	800703c <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006fc6:	2300      	movs	r3, #0
 8006fc8:	613b      	str	r3, [r7, #16]
 8006fca:	4b1e      	ldr	r3, [pc, #120]	@ (8007044 <HAL_PCD_MspInit+0xa0>)
 8006fcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006fce:	4a1d      	ldr	r2, [pc, #116]	@ (8007044 <HAL_PCD_MspInit+0xa0>)
 8006fd0:	f043 0301 	orr.w	r3, r3, #1
 8006fd4:	6313      	str	r3, [r2, #48]	@ 0x30
 8006fd6:	4b1b      	ldr	r3, [pc, #108]	@ (8007044 <HAL_PCD_MspInit+0xa0>)
 8006fd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006fda:	f003 0301 	and.w	r3, r3, #1
 8006fde:	613b      	str	r3, [r7, #16]
 8006fe0:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8006fe2:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8006fe6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006fe8:	2302      	movs	r3, #2
 8006fea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006fec:	2300      	movs	r3, #0
 8006fee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006ff0:	2303      	movs	r3, #3
 8006ff2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8006ff4:	230a      	movs	r3, #10
 8006ff6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006ff8:	f107 0314 	add.w	r3, r7, #20
 8006ffc:	4619      	mov	r1, r3
 8006ffe:	4812      	ldr	r0, [pc, #72]	@ (8007048 <HAL_PCD_MspInit+0xa4>)
 8007000:	f7f9 ff5a 	bl	8000eb8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8007004:	4b0f      	ldr	r3, [pc, #60]	@ (8007044 <HAL_PCD_MspInit+0xa0>)
 8007006:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007008:	4a0e      	ldr	r2, [pc, #56]	@ (8007044 <HAL_PCD_MspInit+0xa0>)
 800700a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800700e:	6353      	str	r3, [r2, #52]	@ 0x34
 8007010:	2300      	movs	r3, #0
 8007012:	60fb      	str	r3, [r7, #12]
 8007014:	4b0b      	ldr	r3, [pc, #44]	@ (8007044 <HAL_PCD_MspInit+0xa0>)
 8007016:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007018:	4a0a      	ldr	r2, [pc, #40]	@ (8007044 <HAL_PCD_MspInit+0xa0>)
 800701a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800701e:	6453      	str	r3, [r2, #68]	@ 0x44
 8007020:	4b08      	ldr	r3, [pc, #32]	@ (8007044 <HAL_PCD_MspInit+0xa0>)
 8007022:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007024:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007028:	60fb      	str	r3, [r7, #12]
 800702a:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800702c:	2200      	movs	r2, #0
 800702e:	2100      	movs	r1, #0
 8007030:	2043      	movs	r0, #67	@ 0x43
 8007032:	f7f9 ff0a 	bl	8000e4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8007036:	2043      	movs	r0, #67	@ 0x43
 8007038:	f7f9 ff23 	bl	8000e82 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800703c:	bf00      	nop
 800703e:	3728      	adds	r7, #40	@ 0x28
 8007040:	46bd      	mov	sp, r7
 8007042:	bd80      	pop	{r7, pc}
 8007044:	40023800 	.word	0x40023800
 8007048:	40020000 	.word	0x40020000

0800704c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800704c:	b580      	push	{r7, lr}
 800704e:	b082      	sub	sp, #8
 8007050:	af00      	add	r7, sp, #0
 8007052:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8007060:	4619      	mov	r1, r3
 8007062:	4610      	mov	r0, r2
 8007064:	f7fe fb0d 	bl	8005682 <USBD_LL_SetupStage>
}
 8007068:	bf00      	nop
 800706a:	3708      	adds	r7, #8
 800706c:	46bd      	mov	sp, r7
 800706e:	bd80      	pop	{r7, pc}

08007070 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007070:	b580      	push	{r7, lr}
 8007072:	b082      	sub	sp, #8
 8007074:	af00      	add	r7, sp, #0
 8007076:	6078      	str	r0, [r7, #4]
 8007078:	460b      	mov	r3, r1
 800707a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8007082:	78fa      	ldrb	r2, [r7, #3]
 8007084:	6879      	ldr	r1, [r7, #4]
 8007086:	4613      	mov	r3, r2
 8007088:	00db      	lsls	r3, r3, #3
 800708a:	4413      	add	r3, r2
 800708c:	009b      	lsls	r3, r3, #2
 800708e:	440b      	add	r3, r1
 8007090:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8007094:	681a      	ldr	r2, [r3, #0]
 8007096:	78fb      	ldrb	r3, [r7, #3]
 8007098:	4619      	mov	r1, r3
 800709a:	f7fe fb47 	bl	800572c <USBD_LL_DataOutStage>
}
 800709e:	bf00      	nop
 80070a0:	3708      	adds	r7, #8
 80070a2:	46bd      	mov	sp, r7
 80070a4:	bd80      	pop	{r7, pc}

080070a6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80070a6:	b580      	push	{r7, lr}
 80070a8:	b082      	sub	sp, #8
 80070aa:	af00      	add	r7, sp, #0
 80070ac:	6078      	str	r0, [r7, #4]
 80070ae:	460b      	mov	r3, r1
 80070b0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 80070b8:	78fa      	ldrb	r2, [r7, #3]
 80070ba:	6879      	ldr	r1, [r7, #4]
 80070bc:	4613      	mov	r3, r2
 80070be:	00db      	lsls	r3, r3, #3
 80070c0:	4413      	add	r3, r2
 80070c2:	009b      	lsls	r3, r3, #2
 80070c4:	440b      	add	r3, r1
 80070c6:	3320      	adds	r3, #32
 80070c8:	681a      	ldr	r2, [r3, #0]
 80070ca:	78fb      	ldrb	r3, [r7, #3]
 80070cc:	4619      	mov	r1, r3
 80070ce:	f7fe fbe0 	bl	8005892 <USBD_LL_DataInStage>
}
 80070d2:	bf00      	nop
 80070d4:	3708      	adds	r7, #8
 80070d6:	46bd      	mov	sp, r7
 80070d8:	bd80      	pop	{r7, pc}

080070da <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80070da:	b580      	push	{r7, lr}
 80070dc:	b082      	sub	sp, #8
 80070de:	af00      	add	r7, sp, #0
 80070e0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80070e8:	4618      	mov	r0, r3
 80070ea:	f7fe fd1a 	bl	8005b22 <USBD_LL_SOF>
}
 80070ee:	bf00      	nop
 80070f0:	3708      	adds	r7, #8
 80070f2:	46bd      	mov	sp, r7
 80070f4:	bd80      	pop	{r7, pc}

080070f6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80070f6:	b580      	push	{r7, lr}
 80070f8:	b084      	sub	sp, #16
 80070fa:	af00      	add	r7, sp, #0
 80070fc:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80070fe:	2301      	movs	r3, #1
 8007100:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	79db      	ldrb	r3, [r3, #7]
 8007106:	2b00      	cmp	r3, #0
 8007108:	d102      	bne.n	8007110 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800710a:	2300      	movs	r3, #0
 800710c:	73fb      	strb	r3, [r7, #15]
 800710e:	e008      	b.n	8007122 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	79db      	ldrb	r3, [r3, #7]
 8007114:	2b02      	cmp	r3, #2
 8007116:	d102      	bne.n	800711e <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8007118:	2301      	movs	r3, #1
 800711a:	73fb      	strb	r3, [r7, #15]
 800711c:	e001      	b.n	8007122 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800711e:	f7f9 fb81 	bl	8000824 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007128:	7bfa      	ldrb	r2, [r7, #15]
 800712a:	4611      	mov	r1, r2
 800712c:	4618      	mov	r0, r3
 800712e:	f7fe fcb4 	bl	8005a9a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007138:	4618      	mov	r0, r3
 800713a:	f7fe fc5c 	bl	80059f6 <USBD_LL_Reset>
}
 800713e:	bf00      	nop
 8007140:	3710      	adds	r7, #16
 8007142:	46bd      	mov	sp, r7
 8007144:	bd80      	pop	{r7, pc}
	...

08007148 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007148:	b580      	push	{r7, lr}
 800714a:	b082      	sub	sp, #8
 800714c:	af00      	add	r7, sp, #0
 800714e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007156:	4618      	mov	r0, r3
 8007158:	f7fe fcaf 	bl	8005aba <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	687a      	ldr	r2, [r7, #4]
 8007168:	6812      	ldr	r2, [r2, #0]
 800716a:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800716e:	f043 0301 	orr.w	r3, r3, #1
 8007172:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	7adb      	ldrb	r3, [r3, #11]
 8007178:	2b00      	cmp	r3, #0
 800717a:	d005      	beq.n	8007188 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800717c:	4b04      	ldr	r3, [pc, #16]	@ (8007190 <HAL_PCD_SuspendCallback+0x48>)
 800717e:	691b      	ldr	r3, [r3, #16]
 8007180:	4a03      	ldr	r2, [pc, #12]	@ (8007190 <HAL_PCD_SuspendCallback+0x48>)
 8007182:	f043 0306 	orr.w	r3, r3, #6
 8007186:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8007188:	bf00      	nop
 800718a:	3708      	adds	r7, #8
 800718c:	46bd      	mov	sp, r7
 800718e:	bd80      	pop	{r7, pc}
 8007190:	e000ed00 	.word	0xe000ed00

08007194 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007194:	b580      	push	{r7, lr}
 8007196:	b082      	sub	sp, #8
 8007198:	af00      	add	r7, sp, #0
 800719a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80071a2:	4618      	mov	r0, r3
 80071a4:	f7fe fca5 	bl	8005af2 <USBD_LL_Resume>
}
 80071a8:	bf00      	nop
 80071aa:	3708      	adds	r7, #8
 80071ac:	46bd      	mov	sp, r7
 80071ae:	bd80      	pop	{r7, pc}

080071b0 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80071b0:	b580      	push	{r7, lr}
 80071b2:	b082      	sub	sp, #8
 80071b4:	af00      	add	r7, sp, #0
 80071b6:	6078      	str	r0, [r7, #4]
 80071b8:	460b      	mov	r3, r1
 80071ba:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80071c2:	78fa      	ldrb	r2, [r7, #3]
 80071c4:	4611      	mov	r1, r2
 80071c6:	4618      	mov	r0, r3
 80071c8:	f7fe fcfd 	bl	8005bc6 <USBD_LL_IsoOUTIncomplete>
}
 80071cc:	bf00      	nop
 80071ce:	3708      	adds	r7, #8
 80071d0:	46bd      	mov	sp, r7
 80071d2:	bd80      	pop	{r7, pc}

080071d4 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80071d4:	b580      	push	{r7, lr}
 80071d6:	b082      	sub	sp, #8
 80071d8:	af00      	add	r7, sp, #0
 80071da:	6078      	str	r0, [r7, #4]
 80071dc:	460b      	mov	r3, r1
 80071de:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80071e6:	78fa      	ldrb	r2, [r7, #3]
 80071e8:	4611      	mov	r1, r2
 80071ea:	4618      	mov	r0, r3
 80071ec:	f7fe fcb9 	bl	8005b62 <USBD_LL_IsoINIncomplete>
}
 80071f0:	bf00      	nop
 80071f2:	3708      	adds	r7, #8
 80071f4:	46bd      	mov	sp, r7
 80071f6:	bd80      	pop	{r7, pc}

080071f8 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80071f8:	b580      	push	{r7, lr}
 80071fa:	b082      	sub	sp, #8
 80071fc:	af00      	add	r7, sp, #0
 80071fe:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007206:	4618      	mov	r0, r3
 8007208:	f7fe fd0f 	bl	8005c2a <USBD_LL_DevConnected>
}
 800720c:	bf00      	nop
 800720e:	3708      	adds	r7, #8
 8007210:	46bd      	mov	sp, r7
 8007212:	bd80      	pop	{r7, pc}

08007214 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007214:	b580      	push	{r7, lr}
 8007216:	b082      	sub	sp, #8
 8007218:	af00      	add	r7, sp, #0
 800721a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007222:	4618      	mov	r0, r3
 8007224:	f7fe fd0c 	bl	8005c40 <USBD_LL_DevDisconnected>
}
 8007228:	bf00      	nop
 800722a:	3708      	adds	r7, #8
 800722c:	46bd      	mov	sp, r7
 800722e:	bd80      	pop	{r7, pc}

08007230 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007230:	b580      	push	{r7, lr}
 8007232:	b082      	sub	sp, #8
 8007234:	af00      	add	r7, sp, #0
 8007236:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	781b      	ldrb	r3, [r3, #0]
 800723c:	2b00      	cmp	r3, #0
 800723e:	d13c      	bne.n	80072ba <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8007240:	4a20      	ldr	r2, [pc, #128]	@ (80072c4 <USBD_LL_Init+0x94>)
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	4a1e      	ldr	r2, [pc, #120]	@ (80072c4 <USBD_LL_Init+0x94>)
 800724c:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8007250:	4b1c      	ldr	r3, [pc, #112]	@ (80072c4 <USBD_LL_Init+0x94>)
 8007252:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8007256:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8007258:	4b1a      	ldr	r3, [pc, #104]	@ (80072c4 <USBD_LL_Init+0x94>)
 800725a:	2204      	movs	r2, #4
 800725c:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800725e:	4b19      	ldr	r3, [pc, #100]	@ (80072c4 <USBD_LL_Init+0x94>)
 8007260:	2202      	movs	r2, #2
 8007262:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8007264:	4b17      	ldr	r3, [pc, #92]	@ (80072c4 <USBD_LL_Init+0x94>)
 8007266:	2200      	movs	r2, #0
 8007268:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800726a:	4b16      	ldr	r3, [pc, #88]	@ (80072c4 <USBD_LL_Init+0x94>)
 800726c:	2202      	movs	r2, #2
 800726e:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8007270:	4b14      	ldr	r3, [pc, #80]	@ (80072c4 <USBD_LL_Init+0x94>)
 8007272:	2200      	movs	r2, #0
 8007274:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8007276:	4b13      	ldr	r3, [pc, #76]	@ (80072c4 <USBD_LL_Init+0x94>)
 8007278:	2200      	movs	r2, #0
 800727a:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800727c:	4b11      	ldr	r3, [pc, #68]	@ (80072c4 <USBD_LL_Init+0x94>)
 800727e:	2200      	movs	r2, #0
 8007280:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8007282:	4b10      	ldr	r3, [pc, #64]	@ (80072c4 <USBD_LL_Init+0x94>)
 8007284:	2200      	movs	r2, #0
 8007286:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8007288:	4b0e      	ldr	r3, [pc, #56]	@ (80072c4 <USBD_LL_Init+0x94>)
 800728a:	2200      	movs	r2, #0
 800728c:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800728e:	480d      	ldr	r0, [pc, #52]	@ (80072c4 <USBD_LL_Init+0x94>)
 8007290:	f7f9 ffae 	bl	80011f0 <HAL_PCD_Init>
 8007294:	4603      	mov	r3, r0
 8007296:	2b00      	cmp	r3, #0
 8007298:	d001      	beq.n	800729e <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800729a:	f7f9 fac3 	bl	8000824 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800729e:	2180      	movs	r1, #128	@ 0x80
 80072a0:	4808      	ldr	r0, [pc, #32]	@ (80072c4 <USBD_LL_Init+0x94>)
 80072a2:	f7fb f9c2 	bl	800262a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80072a6:	2240      	movs	r2, #64	@ 0x40
 80072a8:	2100      	movs	r1, #0
 80072aa:	4806      	ldr	r0, [pc, #24]	@ (80072c4 <USBD_LL_Init+0x94>)
 80072ac:	f7fb f976 	bl	800259c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80072b0:	2280      	movs	r2, #128	@ 0x80
 80072b2:	2101      	movs	r1, #1
 80072b4:	4803      	ldr	r0, [pc, #12]	@ (80072c4 <USBD_LL_Init+0x94>)
 80072b6:	f7fb f971 	bl	800259c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80072ba:	2300      	movs	r3, #0
}
 80072bc:	4618      	mov	r0, r3
 80072be:	3708      	adds	r7, #8
 80072c0:	46bd      	mov	sp, r7
 80072c2:	bd80      	pop	{r7, pc}
 80072c4:	20000cb4 	.word	0x20000cb4

080072c8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80072c8:	b580      	push	{r7, lr}
 80072ca:	b084      	sub	sp, #16
 80072cc:	af00      	add	r7, sp, #0
 80072ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80072d0:	2300      	movs	r3, #0
 80072d2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80072d4:	2300      	movs	r3, #0
 80072d6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80072de:	4618      	mov	r0, r3
 80072e0:	f7fa f895 	bl	800140e <HAL_PCD_Start>
 80072e4:	4603      	mov	r3, r0
 80072e6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80072e8:	7bfb      	ldrb	r3, [r7, #15]
 80072ea:	4618      	mov	r0, r3
 80072ec:	f000 f930 	bl	8007550 <USBD_Get_USB_Status>
 80072f0:	4603      	mov	r3, r0
 80072f2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80072f4:	7bbb      	ldrb	r3, [r7, #14]
}
 80072f6:	4618      	mov	r0, r3
 80072f8:	3710      	adds	r7, #16
 80072fa:	46bd      	mov	sp, r7
 80072fc:	bd80      	pop	{r7, pc}

080072fe <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80072fe:	b580      	push	{r7, lr}
 8007300:	b084      	sub	sp, #16
 8007302:	af00      	add	r7, sp, #0
 8007304:	6078      	str	r0, [r7, #4]
 8007306:	4608      	mov	r0, r1
 8007308:	4611      	mov	r1, r2
 800730a:	461a      	mov	r2, r3
 800730c:	4603      	mov	r3, r0
 800730e:	70fb      	strb	r3, [r7, #3]
 8007310:	460b      	mov	r3, r1
 8007312:	70bb      	strb	r3, [r7, #2]
 8007314:	4613      	mov	r3, r2
 8007316:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007318:	2300      	movs	r3, #0
 800731a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800731c:	2300      	movs	r3, #0
 800731e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8007326:	78bb      	ldrb	r3, [r7, #2]
 8007328:	883a      	ldrh	r2, [r7, #0]
 800732a:	78f9      	ldrb	r1, [r7, #3]
 800732c:	f7fa fd69 	bl	8001e02 <HAL_PCD_EP_Open>
 8007330:	4603      	mov	r3, r0
 8007332:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007334:	7bfb      	ldrb	r3, [r7, #15]
 8007336:	4618      	mov	r0, r3
 8007338:	f000 f90a 	bl	8007550 <USBD_Get_USB_Status>
 800733c:	4603      	mov	r3, r0
 800733e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007340:	7bbb      	ldrb	r3, [r7, #14]
}
 8007342:	4618      	mov	r0, r3
 8007344:	3710      	adds	r7, #16
 8007346:	46bd      	mov	sp, r7
 8007348:	bd80      	pop	{r7, pc}

0800734a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800734a:	b580      	push	{r7, lr}
 800734c:	b084      	sub	sp, #16
 800734e:	af00      	add	r7, sp, #0
 8007350:	6078      	str	r0, [r7, #4]
 8007352:	460b      	mov	r3, r1
 8007354:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007356:	2300      	movs	r3, #0
 8007358:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800735a:	2300      	movs	r3, #0
 800735c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007364:	78fa      	ldrb	r2, [r7, #3]
 8007366:	4611      	mov	r1, r2
 8007368:	4618      	mov	r0, r3
 800736a:	f7fa fdb4 	bl	8001ed6 <HAL_PCD_EP_Close>
 800736e:	4603      	mov	r3, r0
 8007370:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007372:	7bfb      	ldrb	r3, [r7, #15]
 8007374:	4618      	mov	r0, r3
 8007376:	f000 f8eb 	bl	8007550 <USBD_Get_USB_Status>
 800737a:	4603      	mov	r3, r0
 800737c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800737e:	7bbb      	ldrb	r3, [r7, #14]
}
 8007380:	4618      	mov	r0, r3
 8007382:	3710      	adds	r7, #16
 8007384:	46bd      	mov	sp, r7
 8007386:	bd80      	pop	{r7, pc}

08007388 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007388:	b580      	push	{r7, lr}
 800738a:	b084      	sub	sp, #16
 800738c:	af00      	add	r7, sp, #0
 800738e:	6078      	str	r0, [r7, #4]
 8007390:	460b      	mov	r3, r1
 8007392:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007394:	2300      	movs	r3, #0
 8007396:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007398:	2300      	movs	r3, #0
 800739a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80073a2:	78fa      	ldrb	r2, [r7, #3]
 80073a4:	4611      	mov	r1, r2
 80073a6:	4618      	mov	r0, r3
 80073a8:	f7fa fe54 	bl	8002054 <HAL_PCD_EP_SetStall>
 80073ac:	4603      	mov	r3, r0
 80073ae:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80073b0:	7bfb      	ldrb	r3, [r7, #15]
 80073b2:	4618      	mov	r0, r3
 80073b4:	f000 f8cc 	bl	8007550 <USBD_Get_USB_Status>
 80073b8:	4603      	mov	r3, r0
 80073ba:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80073bc:	7bbb      	ldrb	r3, [r7, #14]
}
 80073be:	4618      	mov	r0, r3
 80073c0:	3710      	adds	r7, #16
 80073c2:	46bd      	mov	sp, r7
 80073c4:	bd80      	pop	{r7, pc}

080073c6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80073c6:	b580      	push	{r7, lr}
 80073c8:	b084      	sub	sp, #16
 80073ca:	af00      	add	r7, sp, #0
 80073cc:	6078      	str	r0, [r7, #4]
 80073ce:	460b      	mov	r3, r1
 80073d0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80073d2:	2300      	movs	r3, #0
 80073d4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80073d6:	2300      	movs	r3, #0
 80073d8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80073e0:	78fa      	ldrb	r2, [r7, #3]
 80073e2:	4611      	mov	r1, r2
 80073e4:	4618      	mov	r0, r3
 80073e6:	f7fa fe98 	bl	800211a <HAL_PCD_EP_ClrStall>
 80073ea:	4603      	mov	r3, r0
 80073ec:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80073ee:	7bfb      	ldrb	r3, [r7, #15]
 80073f0:	4618      	mov	r0, r3
 80073f2:	f000 f8ad 	bl	8007550 <USBD_Get_USB_Status>
 80073f6:	4603      	mov	r3, r0
 80073f8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80073fa:	7bbb      	ldrb	r3, [r7, #14]
}
 80073fc:	4618      	mov	r0, r3
 80073fe:	3710      	adds	r7, #16
 8007400:	46bd      	mov	sp, r7
 8007402:	bd80      	pop	{r7, pc}

08007404 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007404:	b480      	push	{r7}
 8007406:	b085      	sub	sp, #20
 8007408:	af00      	add	r7, sp, #0
 800740a:	6078      	str	r0, [r7, #4]
 800740c:	460b      	mov	r3, r1
 800740e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007416:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8007418:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800741c:	2b00      	cmp	r3, #0
 800741e:	da0b      	bge.n	8007438 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8007420:	78fb      	ldrb	r3, [r7, #3]
 8007422:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007426:	68f9      	ldr	r1, [r7, #12]
 8007428:	4613      	mov	r3, r2
 800742a:	00db      	lsls	r3, r3, #3
 800742c:	4413      	add	r3, r2
 800742e:	009b      	lsls	r3, r3, #2
 8007430:	440b      	add	r3, r1
 8007432:	3316      	adds	r3, #22
 8007434:	781b      	ldrb	r3, [r3, #0]
 8007436:	e00b      	b.n	8007450 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8007438:	78fb      	ldrb	r3, [r7, #3]
 800743a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800743e:	68f9      	ldr	r1, [r7, #12]
 8007440:	4613      	mov	r3, r2
 8007442:	00db      	lsls	r3, r3, #3
 8007444:	4413      	add	r3, r2
 8007446:	009b      	lsls	r3, r3, #2
 8007448:	440b      	add	r3, r1
 800744a:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800744e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8007450:	4618      	mov	r0, r3
 8007452:	3714      	adds	r7, #20
 8007454:	46bd      	mov	sp, r7
 8007456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800745a:	4770      	bx	lr

0800745c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800745c:	b580      	push	{r7, lr}
 800745e:	b084      	sub	sp, #16
 8007460:	af00      	add	r7, sp, #0
 8007462:	6078      	str	r0, [r7, #4]
 8007464:	460b      	mov	r3, r1
 8007466:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007468:	2300      	movs	r3, #0
 800746a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800746c:	2300      	movs	r3, #0
 800746e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007476:	78fa      	ldrb	r2, [r7, #3]
 8007478:	4611      	mov	r1, r2
 800747a:	4618      	mov	r0, r3
 800747c:	f7fa fc9d 	bl	8001dba <HAL_PCD_SetAddress>
 8007480:	4603      	mov	r3, r0
 8007482:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007484:	7bfb      	ldrb	r3, [r7, #15]
 8007486:	4618      	mov	r0, r3
 8007488:	f000 f862 	bl	8007550 <USBD_Get_USB_Status>
 800748c:	4603      	mov	r3, r0
 800748e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007490:	7bbb      	ldrb	r3, [r7, #14]
}
 8007492:	4618      	mov	r0, r3
 8007494:	3710      	adds	r7, #16
 8007496:	46bd      	mov	sp, r7
 8007498:	bd80      	pop	{r7, pc}

0800749a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800749a:	b580      	push	{r7, lr}
 800749c:	b086      	sub	sp, #24
 800749e:	af00      	add	r7, sp, #0
 80074a0:	60f8      	str	r0, [r7, #12]
 80074a2:	607a      	str	r2, [r7, #4]
 80074a4:	603b      	str	r3, [r7, #0]
 80074a6:	460b      	mov	r3, r1
 80074a8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80074aa:	2300      	movs	r3, #0
 80074ac:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80074ae:	2300      	movs	r3, #0
 80074b0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80074b8:	7af9      	ldrb	r1, [r7, #11]
 80074ba:	683b      	ldr	r3, [r7, #0]
 80074bc:	687a      	ldr	r2, [r7, #4]
 80074be:	f7fa fd8f 	bl	8001fe0 <HAL_PCD_EP_Transmit>
 80074c2:	4603      	mov	r3, r0
 80074c4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80074c6:	7dfb      	ldrb	r3, [r7, #23]
 80074c8:	4618      	mov	r0, r3
 80074ca:	f000 f841 	bl	8007550 <USBD_Get_USB_Status>
 80074ce:	4603      	mov	r3, r0
 80074d0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80074d2:	7dbb      	ldrb	r3, [r7, #22]
}
 80074d4:	4618      	mov	r0, r3
 80074d6:	3718      	adds	r7, #24
 80074d8:	46bd      	mov	sp, r7
 80074da:	bd80      	pop	{r7, pc}

080074dc <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80074dc:	b580      	push	{r7, lr}
 80074de:	b086      	sub	sp, #24
 80074e0:	af00      	add	r7, sp, #0
 80074e2:	60f8      	str	r0, [r7, #12]
 80074e4:	607a      	str	r2, [r7, #4]
 80074e6:	603b      	str	r3, [r7, #0]
 80074e8:	460b      	mov	r3, r1
 80074ea:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80074ec:	2300      	movs	r3, #0
 80074ee:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80074f0:	2300      	movs	r3, #0
 80074f2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80074fa:	7af9      	ldrb	r1, [r7, #11]
 80074fc:	683b      	ldr	r3, [r7, #0]
 80074fe:	687a      	ldr	r2, [r7, #4]
 8007500:	f7fa fd33 	bl	8001f6a <HAL_PCD_EP_Receive>
 8007504:	4603      	mov	r3, r0
 8007506:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007508:	7dfb      	ldrb	r3, [r7, #23]
 800750a:	4618      	mov	r0, r3
 800750c:	f000 f820 	bl	8007550 <USBD_Get_USB_Status>
 8007510:	4603      	mov	r3, r0
 8007512:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007514:	7dbb      	ldrb	r3, [r7, #22]
}
 8007516:	4618      	mov	r0, r3
 8007518:	3718      	adds	r7, #24
 800751a:	46bd      	mov	sp, r7
 800751c:	bd80      	pop	{r7, pc}
	...

08007520 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8007520:	b480      	push	{r7}
 8007522:	b083      	sub	sp, #12
 8007524:	af00      	add	r7, sp, #0
 8007526:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CUSTOM_HID_HandleTypeDef)/4+1)];/* On 32-bit boundary */
  return mem;
 8007528:	4b03      	ldr	r3, [pc, #12]	@ (8007538 <USBD_static_malloc+0x18>)
}
 800752a:	4618      	mov	r0, r3
 800752c:	370c      	adds	r7, #12
 800752e:	46bd      	mov	sp, r7
 8007530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007534:	4770      	bx	lr
 8007536:	bf00      	nop
 8007538:	20001198 	.word	0x20001198

0800753c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800753c:	b480      	push	{r7}
 800753e:	b083      	sub	sp, #12
 8007540:	af00      	add	r7, sp, #0
 8007542:	6078      	str	r0, [r7, #4]

}
 8007544:	bf00      	nop
 8007546:	370c      	adds	r7, #12
 8007548:	46bd      	mov	sp, r7
 800754a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800754e:	4770      	bx	lr

08007550 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007550:	b480      	push	{r7}
 8007552:	b085      	sub	sp, #20
 8007554:	af00      	add	r7, sp, #0
 8007556:	4603      	mov	r3, r0
 8007558:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800755a:	2300      	movs	r3, #0
 800755c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800755e:	79fb      	ldrb	r3, [r7, #7]
 8007560:	2b03      	cmp	r3, #3
 8007562:	d817      	bhi.n	8007594 <USBD_Get_USB_Status+0x44>
 8007564:	a201      	add	r2, pc, #4	@ (adr r2, 800756c <USBD_Get_USB_Status+0x1c>)
 8007566:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800756a:	bf00      	nop
 800756c:	0800757d 	.word	0x0800757d
 8007570:	08007583 	.word	0x08007583
 8007574:	08007589 	.word	0x08007589
 8007578:	0800758f 	.word	0x0800758f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800757c:	2300      	movs	r3, #0
 800757e:	73fb      	strb	r3, [r7, #15]
    break;
 8007580:	e00b      	b.n	800759a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007582:	2303      	movs	r3, #3
 8007584:	73fb      	strb	r3, [r7, #15]
    break;
 8007586:	e008      	b.n	800759a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007588:	2301      	movs	r3, #1
 800758a:	73fb      	strb	r3, [r7, #15]
    break;
 800758c:	e005      	b.n	800759a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800758e:	2303      	movs	r3, #3
 8007590:	73fb      	strb	r3, [r7, #15]
    break;
 8007592:	e002      	b.n	800759a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8007594:	2303      	movs	r3, #3
 8007596:	73fb      	strb	r3, [r7, #15]
    break;
 8007598:	bf00      	nop
  }
  return usb_status;
 800759a:	7bfb      	ldrb	r3, [r7, #15]
}
 800759c:	4618      	mov	r0, r3
 800759e:	3714      	adds	r7, #20
 80075a0:	46bd      	mov	sp, r7
 80075a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075a6:	4770      	bx	lr

080075a8 <std>:
 80075a8:	2300      	movs	r3, #0
 80075aa:	b510      	push	{r4, lr}
 80075ac:	4604      	mov	r4, r0
 80075ae:	e9c0 3300 	strd	r3, r3, [r0]
 80075b2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80075b6:	6083      	str	r3, [r0, #8]
 80075b8:	8181      	strh	r1, [r0, #12]
 80075ba:	6643      	str	r3, [r0, #100]	@ 0x64
 80075bc:	81c2      	strh	r2, [r0, #14]
 80075be:	6183      	str	r3, [r0, #24]
 80075c0:	4619      	mov	r1, r3
 80075c2:	2208      	movs	r2, #8
 80075c4:	305c      	adds	r0, #92	@ 0x5c
 80075c6:	f000 f906 	bl	80077d6 <memset>
 80075ca:	4b0d      	ldr	r3, [pc, #52]	@ (8007600 <std+0x58>)
 80075cc:	6263      	str	r3, [r4, #36]	@ 0x24
 80075ce:	4b0d      	ldr	r3, [pc, #52]	@ (8007604 <std+0x5c>)
 80075d0:	62a3      	str	r3, [r4, #40]	@ 0x28
 80075d2:	4b0d      	ldr	r3, [pc, #52]	@ (8007608 <std+0x60>)
 80075d4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80075d6:	4b0d      	ldr	r3, [pc, #52]	@ (800760c <std+0x64>)
 80075d8:	6323      	str	r3, [r4, #48]	@ 0x30
 80075da:	4b0d      	ldr	r3, [pc, #52]	@ (8007610 <std+0x68>)
 80075dc:	6224      	str	r4, [r4, #32]
 80075de:	429c      	cmp	r4, r3
 80075e0:	d006      	beq.n	80075f0 <std+0x48>
 80075e2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80075e6:	4294      	cmp	r4, r2
 80075e8:	d002      	beq.n	80075f0 <std+0x48>
 80075ea:	33d0      	adds	r3, #208	@ 0xd0
 80075ec:	429c      	cmp	r4, r3
 80075ee:	d105      	bne.n	80075fc <std+0x54>
 80075f0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80075f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80075f8:	f000 b966 	b.w	80078c8 <__retarget_lock_init_recursive>
 80075fc:	bd10      	pop	{r4, pc}
 80075fe:	bf00      	nop
 8007600:	08007751 	.word	0x08007751
 8007604:	08007773 	.word	0x08007773
 8007608:	080077ab 	.word	0x080077ab
 800760c:	080077cf 	.word	0x080077cf
 8007610:	200011f0 	.word	0x200011f0

08007614 <stdio_exit_handler>:
 8007614:	4a02      	ldr	r2, [pc, #8]	@ (8007620 <stdio_exit_handler+0xc>)
 8007616:	4903      	ldr	r1, [pc, #12]	@ (8007624 <stdio_exit_handler+0x10>)
 8007618:	4803      	ldr	r0, [pc, #12]	@ (8007628 <stdio_exit_handler+0x14>)
 800761a:	f000 b869 	b.w	80076f0 <_fwalk_sglue>
 800761e:	bf00      	nop
 8007620:	20000610 	.word	0x20000610
 8007624:	08008165 	.word	0x08008165
 8007628:	20000620 	.word	0x20000620

0800762c <cleanup_stdio>:
 800762c:	6841      	ldr	r1, [r0, #4]
 800762e:	4b0c      	ldr	r3, [pc, #48]	@ (8007660 <cleanup_stdio+0x34>)
 8007630:	4299      	cmp	r1, r3
 8007632:	b510      	push	{r4, lr}
 8007634:	4604      	mov	r4, r0
 8007636:	d001      	beq.n	800763c <cleanup_stdio+0x10>
 8007638:	f000 fd94 	bl	8008164 <_fflush_r>
 800763c:	68a1      	ldr	r1, [r4, #8]
 800763e:	4b09      	ldr	r3, [pc, #36]	@ (8007664 <cleanup_stdio+0x38>)
 8007640:	4299      	cmp	r1, r3
 8007642:	d002      	beq.n	800764a <cleanup_stdio+0x1e>
 8007644:	4620      	mov	r0, r4
 8007646:	f000 fd8d 	bl	8008164 <_fflush_r>
 800764a:	68e1      	ldr	r1, [r4, #12]
 800764c:	4b06      	ldr	r3, [pc, #24]	@ (8007668 <cleanup_stdio+0x3c>)
 800764e:	4299      	cmp	r1, r3
 8007650:	d004      	beq.n	800765c <cleanup_stdio+0x30>
 8007652:	4620      	mov	r0, r4
 8007654:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007658:	f000 bd84 	b.w	8008164 <_fflush_r>
 800765c:	bd10      	pop	{r4, pc}
 800765e:	bf00      	nop
 8007660:	200011f0 	.word	0x200011f0
 8007664:	20001258 	.word	0x20001258
 8007668:	200012c0 	.word	0x200012c0

0800766c <global_stdio_init.part.0>:
 800766c:	b510      	push	{r4, lr}
 800766e:	4b0b      	ldr	r3, [pc, #44]	@ (800769c <global_stdio_init.part.0+0x30>)
 8007670:	4c0b      	ldr	r4, [pc, #44]	@ (80076a0 <global_stdio_init.part.0+0x34>)
 8007672:	4a0c      	ldr	r2, [pc, #48]	@ (80076a4 <global_stdio_init.part.0+0x38>)
 8007674:	601a      	str	r2, [r3, #0]
 8007676:	4620      	mov	r0, r4
 8007678:	2200      	movs	r2, #0
 800767a:	2104      	movs	r1, #4
 800767c:	f7ff ff94 	bl	80075a8 <std>
 8007680:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007684:	2201      	movs	r2, #1
 8007686:	2109      	movs	r1, #9
 8007688:	f7ff ff8e 	bl	80075a8 <std>
 800768c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007690:	2202      	movs	r2, #2
 8007692:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007696:	2112      	movs	r1, #18
 8007698:	f7ff bf86 	b.w	80075a8 <std>
 800769c:	20001328 	.word	0x20001328
 80076a0:	200011f0 	.word	0x200011f0
 80076a4:	08007615 	.word	0x08007615

080076a8 <__sfp_lock_acquire>:
 80076a8:	4801      	ldr	r0, [pc, #4]	@ (80076b0 <__sfp_lock_acquire+0x8>)
 80076aa:	f000 b90e 	b.w	80078ca <__retarget_lock_acquire_recursive>
 80076ae:	bf00      	nop
 80076b0:	20001331 	.word	0x20001331

080076b4 <__sfp_lock_release>:
 80076b4:	4801      	ldr	r0, [pc, #4]	@ (80076bc <__sfp_lock_release+0x8>)
 80076b6:	f000 b909 	b.w	80078cc <__retarget_lock_release_recursive>
 80076ba:	bf00      	nop
 80076bc:	20001331 	.word	0x20001331

080076c0 <__sinit>:
 80076c0:	b510      	push	{r4, lr}
 80076c2:	4604      	mov	r4, r0
 80076c4:	f7ff fff0 	bl	80076a8 <__sfp_lock_acquire>
 80076c8:	6a23      	ldr	r3, [r4, #32]
 80076ca:	b11b      	cbz	r3, 80076d4 <__sinit+0x14>
 80076cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80076d0:	f7ff bff0 	b.w	80076b4 <__sfp_lock_release>
 80076d4:	4b04      	ldr	r3, [pc, #16]	@ (80076e8 <__sinit+0x28>)
 80076d6:	6223      	str	r3, [r4, #32]
 80076d8:	4b04      	ldr	r3, [pc, #16]	@ (80076ec <__sinit+0x2c>)
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d1f5      	bne.n	80076cc <__sinit+0xc>
 80076e0:	f7ff ffc4 	bl	800766c <global_stdio_init.part.0>
 80076e4:	e7f2      	b.n	80076cc <__sinit+0xc>
 80076e6:	bf00      	nop
 80076e8:	0800762d 	.word	0x0800762d
 80076ec:	20001328 	.word	0x20001328

080076f0 <_fwalk_sglue>:
 80076f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80076f4:	4607      	mov	r7, r0
 80076f6:	4688      	mov	r8, r1
 80076f8:	4614      	mov	r4, r2
 80076fa:	2600      	movs	r6, #0
 80076fc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007700:	f1b9 0901 	subs.w	r9, r9, #1
 8007704:	d505      	bpl.n	8007712 <_fwalk_sglue+0x22>
 8007706:	6824      	ldr	r4, [r4, #0]
 8007708:	2c00      	cmp	r4, #0
 800770a:	d1f7      	bne.n	80076fc <_fwalk_sglue+0xc>
 800770c:	4630      	mov	r0, r6
 800770e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007712:	89ab      	ldrh	r3, [r5, #12]
 8007714:	2b01      	cmp	r3, #1
 8007716:	d907      	bls.n	8007728 <_fwalk_sglue+0x38>
 8007718:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800771c:	3301      	adds	r3, #1
 800771e:	d003      	beq.n	8007728 <_fwalk_sglue+0x38>
 8007720:	4629      	mov	r1, r5
 8007722:	4638      	mov	r0, r7
 8007724:	47c0      	blx	r8
 8007726:	4306      	orrs	r6, r0
 8007728:	3568      	adds	r5, #104	@ 0x68
 800772a:	e7e9      	b.n	8007700 <_fwalk_sglue+0x10>

0800772c <iprintf>:
 800772c:	b40f      	push	{r0, r1, r2, r3}
 800772e:	b507      	push	{r0, r1, r2, lr}
 8007730:	4906      	ldr	r1, [pc, #24]	@ (800774c <iprintf+0x20>)
 8007732:	ab04      	add	r3, sp, #16
 8007734:	6808      	ldr	r0, [r1, #0]
 8007736:	f853 2b04 	ldr.w	r2, [r3], #4
 800773a:	6881      	ldr	r1, [r0, #8]
 800773c:	9301      	str	r3, [sp, #4]
 800773e:	f000 f9e9 	bl	8007b14 <_vfiprintf_r>
 8007742:	b003      	add	sp, #12
 8007744:	f85d eb04 	ldr.w	lr, [sp], #4
 8007748:	b004      	add	sp, #16
 800774a:	4770      	bx	lr
 800774c:	2000061c 	.word	0x2000061c

08007750 <__sread>:
 8007750:	b510      	push	{r4, lr}
 8007752:	460c      	mov	r4, r1
 8007754:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007758:	f000 f868 	bl	800782c <_read_r>
 800775c:	2800      	cmp	r0, #0
 800775e:	bfab      	itete	ge
 8007760:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8007762:	89a3      	ldrhlt	r3, [r4, #12]
 8007764:	181b      	addge	r3, r3, r0
 8007766:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800776a:	bfac      	ite	ge
 800776c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800776e:	81a3      	strhlt	r3, [r4, #12]
 8007770:	bd10      	pop	{r4, pc}

08007772 <__swrite>:
 8007772:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007776:	461f      	mov	r7, r3
 8007778:	898b      	ldrh	r3, [r1, #12]
 800777a:	05db      	lsls	r3, r3, #23
 800777c:	4605      	mov	r5, r0
 800777e:	460c      	mov	r4, r1
 8007780:	4616      	mov	r6, r2
 8007782:	d505      	bpl.n	8007790 <__swrite+0x1e>
 8007784:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007788:	2302      	movs	r3, #2
 800778a:	2200      	movs	r2, #0
 800778c:	f000 f83c 	bl	8007808 <_lseek_r>
 8007790:	89a3      	ldrh	r3, [r4, #12]
 8007792:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007796:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800779a:	81a3      	strh	r3, [r4, #12]
 800779c:	4632      	mov	r2, r6
 800779e:	463b      	mov	r3, r7
 80077a0:	4628      	mov	r0, r5
 80077a2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80077a6:	f000 b853 	b.w	8007850 <_write_r>

080077aa <__sseek>:
 80077aa:	b510      	push	{r4, lr}
 80077ac:	460c      	mov	r4, r1
 80077ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80077b2:	f000 f829 	bl	8007808 <_lseek_r>
 80077b6:	1c43      	adds	r3, r0, #1
 80077b8:	89a3      	ldrh	r3, [r4, #12]
 80077ba:	bf15      	itete	ne
 80077bc:	6560      	strne	r0, [r4, #84]	@ 0x54
 80077be:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80077c2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80077c6:	81a3      	strheq	r3, [r4, #12]
 80077c8:	bf18      	it	ne
 80077ca:	81a3      	strhne	r3, [r4, #12]
 80077cc:	bd10      	pop	{r4, pc}

080077ce <__sclose>:
 80077ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80077d2:	f000 b809 	b.w	80077e8 <_close_r>

080077d6 <memset>:
 80077d6:	4402      	add	r2, r0
 80077d8:	4603      	mov	r3, r0
 80077da:	4293      	cmp	r3, r2
 80077dc:	d100      	bne.n	80077e0 <memset+0xa>
 80077de:	4770      	bx	lr
 80077e0:	f803 1b01 	strb.w	r1, [r3], #1
 80077e4:	e7f9      	b.n	80077da <memset+0x4>
	...

080077e8 <_close_r>:
 80077e8:	b538      	push	{r3, r4, r5, lr}
 80077ea:	4d06      	ldr	r5, [pc, #24]	@ (8007804 <_close_r+0x1c>)
 80077ec:	2300      	movs	r3, #0
 80077ee:	4604      	mov	r4, r0
 80077f0:	4608      	mov	r0, r1
 80077f2:	602b      	str	r3, [r5, #0]
 80077f4:	f7f9 f911 	bl	8000a1a <_close>
 80077f8:	1c43      	adds	r3, r0, #1
 80077fa:	d102      	bne.n	8007802 <_close_r+0x1a>
 80077fc:	682b      	ldr	r3, [r5, #0]
 80077fe:	b103      	cbz	r3, 8007802 <_close_r+0x1a>
 8007800:	6023      	str	r3, [r4, #0]
 8007802:	bd38      	pop	{r3, r4, r5, pc}
 8007804:	2000132c 	.word	0x2000132c

08007808 <_lseek_r>:
 8007808:	b538      	push	{r3, r4, r5, lr}
 800780a:	4d07      	ldr	r5, [pc, #28]	@ (8007828 <_lseek_r+0x20>)
 800780c:	4604      	mov	r4, r0
 800780e:	4608      	mov	r0, r1
 8007810:	4611      	mov	r1, r2
 8007812:	2200      	movs	r2, #0
 8007814:	602a      	str	r2, [r5, #0]
 8007816:	461a      	mov	r2, r3
 8007818:	f7f9 f926 	bl	8000a68 <_lseek>
 800781c:	1c43      	adds	r3, r0, #1
 800781e:	d102      	bne.n	8007826 <_lseek_r+0x1e>
 8007820:	682b      	ldr	r3, [r5, #0]
 8007822:	b103      	cbz	r3, 8007826 <_lseek_r+0x1e>
 8007824:	6023      	str	r3, [r4, #0]
 8007826:	bd38      	pop	{r3, r4, r5, pc}
 8007828:	2000132c 	.word	0x2000132c

0800782c <_read_r>:
 800782c:	b538      	push	{r3, r4, r5, lr}
 800782e:	4d07      	ldr	r5, [pc, #28]	@ (800784c <_read_r+0x20>)
 8007830:	4604      	mov	r4, r0
 8007832:	4608      	mov	r0, r1
 8007834:	4611      	mov	r1, r2
 8007836:	2200      	movs	r2, #0
 8007838:	602a      	str	r2, [r5, #0]
 800783a:	461a      	mov	r2, r3
 800783c:	f7f9 f8b4 	bl	80009a8 <_read>
 8007840:	1c43      	adds	r3, r0, #1
 8007842:	d102      	bne.n	800784a <_read_r+0x1e>
 8007844:	682b      	ldr	r3, [r5, #0]
 8007846:	b103      	cbz	r3, 800784a <_read_r+0x1e>
 8007848:	6023      	str	r3, [r4, #0]
 800784a:	bd38      	pop	{r3, r4, r5, pc}
 800784c:	2000132c 	.word	0x2000132c

08007850 <_write_r>:
 8007850:	b538      	push	{r3, r4, r5, lr}
 8007852:	4d07      	ldr	r5, [pc, #28]	@ (8007870 <_write_r+0x20>)
 8007854:	4604      	mov	r4, r0
 8007856:	4608      	mov	r0, r1
 8007858:	4611      	mov	r1, r2
 800785a:	2200      	movs	r2, #0
 800785c:	602a      	str	r2, [r5, #0]
 800785e:	461a      	mov	r2, r3
 8007860:	f7f9 f8bf 	bl	80009e2 <_write>
 8007864:	1c43      	adds	r3, r0, #1
 8007866:	d102      	bne.n	800786e <_write_r+0x1e>
 8007868:	682b      	ldr	r3, [r5, #0]
 800786a:	b103      	cbz	r3, 800786e <_write_r+0x1e>
 800786c:	6023      	str	r3, [r4, #0]
 800786e:	bd38      	pop	{r3, r4, r5, pc}
 8007870:	2000132c 	.word	0x2000132c

08007874 <__errno>:
 8007874:	4b01      	ldr	r3, [pc, #4]	@ (800787c <__errno+0x8>)
 8007876:	6818      	ldr	r0, [r3, #0]
 8007878:	4770      	bx	lr
 800787a:	bf00      	nop
 800787c:	2000061c 	.word	0x2000061c

08007880 <__libc_init_array>:
 8007880:	b570      	push	{r4, r5, r6, lr}
 8007882:	4d0d      	ldr	r5, [pc, #52]	@ (80078b8 <__libc_init_array+0x38>)
 8007884:	4c0d      	ldr	r4, [pc, #52]	@ (80078bc <__libc_init_array+0x3c>)
 8007886:	1b64      	subs	r4, r4, r5
 8007888:	10a4      	asrs	r4, r4, #2
 800788a:	2600      	movs	r6, #0
 800788c:	42a6      	cmp	r6, r4
 800788e:	d109      	bne.n	80078a4 <__libc_init_array+0x24>
 8007890:	4d0b      	ldr	r5, [pc, #44]	@ (80078c0 <__libc_init_array+0x40>)
 8007892:	4c0c      	ldr	r4, [pc, #48]	@ (80078c4 <__libc_init_array+0x44>)
 8007894:	f000 fdb6 	bl	8008404 <_init>
 8007898:	1b64      	subs	r4, r4, r5
 800789a:	10a4      	asrs	r4, r4, #2
 800789c:	2600      	movs	r6, #0
 800789e:	42a6      	cmp	r6, r4
 80078a0:	d105      	bne.n	80078ae <__libc_init_array+0x2e>
 80078a2:	bd70      	pop	{r4, r5, r6, pc}
 80078a4:	f855 3b04 	ldr.w	r3, [r5], #4
 80078a8:	4798      	blx	r3
 80078aa:	3601      	adds	r6, #1
 80078ac:	e7ee      	b.n	800788c <__libc_init_array+0xc>
 80078ae:	f855 3b04 	ldr.w	r3, [r5], #4
 80078b2:	4798      	blx	r3
 80078b4:	3601      	adds	r6, #1
 80078b6:	e7f2      	b.n	800789e <__libc_init_array+0x1e>
 80078b8:	080084dc 	.word	0x080084dc
 80078bc:	080084dc 	.word	0x080084dc
 80078c0:	080084dc 	.word	0x080084dc
 80078c4:	080084e0 	.word	0x080084e0

080078c8 <__retarget_lock_init_recursive>:
 80078c8:	4770      	bx	lr

080078ca <__retarget_lock_acquire_recursive>:
 80078ca:	4770      	bx	lr

080078cc <__retarget_lock_release_recursive>:
 80078cc:	4770      	bx	lr
	...

080078d0 <_free_r>:
 80078d0:	b538      	push	{r3, r4, r5, lr}
 80078d2:	4605      	mov	r5, r0
 80078d4:	2900      	cmp	r1, #0
 80078d6:	d041      	beq.n	800795c <_free_r+0x8c>
 80078d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80078dc:	1f0c      	subs	r4, r1, #4
 80078de:	2b00      	cmp	r3, #0
 80078e0:	bfb8      	it	lt
 80078e2:	18e4      	addlt	r4, r4, r3
 80078e4:	f000 f8e0 	bl	8007aa8 <__malloc_lock>
 80078e8:	4a1d      	ldr	r2, [pc, #116]	@ (8007960 <_free_r+0x90>)
 80078ea:	6813      	ldr	r3, [r2, #0]
 80078ec:	b933      	cbnz	r3, 80078fc <_free_r+0x2c>
 80078ee:	6063      	str	r3, [r4, #4]
 80078f0:	6014      	str	r4, [r2, #0]
 80078f2:	4628      	mov	r0, r5
 80078f4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80078f8:	f000 b8dc 	b.w	8007ab4 <__malloc_unlock>
 80078fc:	42a3      	cmp	r3, r4
 80078fe:	d908      	bls.n	8007912 <_free_r+0x42>
 8007900:	6820      	ldr	r0, [r4, #0]
 8007902:	1821      	adds	r1, r4, r0
 8007904:	428b      	cmp	r3, r1
 8007906:	bf01      	itttt	eq
 8007908:	6819      	ldreq	r1, [r3, #0]
 800790a:	685b      	ldreq	r3, [r3, #4]
 800790c:	1809      	addeq	r1, r1, r0
 800790e:	6021      	streq	r1, [r4, #0]
 8007910:	e7ed      	b.n	80078ee <_free_r+0x1e>
 8007912:	461a      	mov	r2, r3
 8007914:	685b      	ldr	r3, [r3, #4]
 8007916:	b10b      	cbz	r3, 800791c <_free_r+0x4c>
 8007918:	42a3      	cmp	r3, r4
 800791a:	d9fa      	bls.n	8007912 <_free_r+0x42>
 800791c:	6811      	ldr	r1, [r2, #0]
 800791e:	1850      	adds	r0, r2, r1
 8007920:	42a0      	cmp	r0, r4
 8007922:	d10b      	bne.n	800793c <_free_r+0x6c>
 8007924:	6820      	ldr	r0, [r4, #0]
 8007926:	4401      	add	r1, r0
 8007928:	1850      	adds	r0, r2, r1
 800792a:	4283      	cmp	r3, r0
 800792c:	6011      	str	r1, [r2, #0]
 800792e:	d1e0      	bne.n	80078f2 <_free_r+0x22>
 8007930:	6818      	ldr	r0, [r3, #0]
 8007932:	685b      	ldr	r3, [r3, #4]
 8007934:	6053      	str	r3, [r2, #4]
 8007936:	4408      	add	r0, r1
 8007938:	6010      	str	r0, [r2, #0]
 800793a:	e7da      	b.n	80078f2 <_free_r+0x22>
 800793c:	d902      	bls.n	8007944 <_free_r+0x74>
 800793e:	230c      	movs	r3, #12
 8007940:	602b      	str	r3, [r5, #0]
 8007942:	e7d6      	b.n	80078f2 <_free_r+0x22>
 8007944:	6820      	ldr	r0, [r4, #0]
 8007946:	1821      	adds	r1, r4, r0
 8007948:	428b      	cmp	r3, r1
 800794a:	bf04      	itt	eq
 800794c:	6819      	ldreq	r1, [r3, #0]
 800794e:	685b      	ldreq	r3, [r3, #4]
 8007950:	6063      	str	r3, [r4, #4]
 8007952:	bf04      	itt	eq
 8007954:	1809      	addeq	r1, r1, r0
 8007956:	6021      	streq	r1, [r4, #0]
 8007958:	6054      	str	r4, [r2, #4]
 800795a:	e7ca      	b.n	80078f2 <_free_r+0x22>
 800795c:	bd38      	pop	{r3, r4, r5, pc}
 800795e:	bf00      	nop
 8007960:	20001338 	.word	0x20001338

08007964 <sbrk_aligned>:
 8007964:	b570      	push	{r4, r5, r6, lr}
 8007966:	4e0f      	ldr	r6, [pc, #60]	@ (80079a4 <sbrk_aligned+0x40>)
 8007968:	460c      	mov	r4, r1
 800796a:	6831      	ldr	r1, [r6, #0]
 800796c:	4605      	mov	r5, r0
 800796e:	b911      	cbnz	r1, 8007976 <sbrk_aligned+0x12>
 8007970:	f000 fcb4 	bl	80082dc <_sbrk_r>
 8007974:	6030      	str	r0, [r6, #0]
 8007976:	4621      	mov	r1, r4
 8007978:	4628      	mov	r0, r5
 800797a:	f000 fcaf 	bl	80082dc <_sbrk_r>
 800797e:	1c43      	adds	r3, r0, #1
 8007980:	d103      	bne.n	800798a <sbrk_aligned+0x26>
 8007982:	f04f 34ff 	mov.w	r4, #4294967295
 8007986:	4620      	mov	r0, r4
 8007988:	bd70      	pop	{r4, r5, r6, pc}
 800798a:	1cc4      	adds	r4, r0, #3
 800798c:	f024 0403 	bic.w	r4, r4, #3
 8007990:	42a0      	cmp	r0, r4
 8007992:	d0f8      	beq.n	8007986 <sbrk_aligned+0x22>
 8007994:	1a21      	subs	r1, r4, r0
 8007996:	4628      	mov	r0, r5
 8007998:	f000 fca0 	bl	80082dc <_sbrk_r>
 800799c:	3001      	adds	r0, #1
 800799e:	d1f2      	bne.n	8007986 <sbrk_aligned+0x22>
 80079a0:	e7ef      	b.n	8007982 <sbrk_aligned+0x1e>
 80079a2:	bf00      	nop
 80079a4:	20001334 	.word	0x20001334

080079a8 <_malloc_r>:
 80079a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80079ac:	1ccd      	adds	r5, r1, #3
 80079ae:	f025 0503 	bic.w	r5, r5, #3
 80079b2:	3508      	adds	r5, #8
 80079b4:	2d0c      	cmp	r5, #12
 80079b6:	bf38      	it	cc
 80079b8:	250c      	movcc	r5, #12
 80079ba:	2d00      	cmp	r5, #0
 80079bc:	4606      	mov	r6, r0
 80079be:	db01      	blt.n	80079c4 <_malloc_r+0x1c>
 80079c0:	42a9      	cmp	r1, r5
 80079c2:	d904      	bls.n	80079ce <_malloc_r+0x26>
 80079c4:	230c      	movs	r3, #12
 80079c6:	6033      	str	r3, [r6, #0]
 80079c8:	2000      	movs	r0, #0
 80079ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80079ce:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007aa4 <_malloc_r+0xfc>
 80079d2:	f000 f869 	bl	8007aa8 <__malloc_lock>
 80079d6:	f8d8 3000 	ldr.w	r3, [r8]
 80079da:	461c      	mov	r4, r3
 80079dc:	bb44      	cbnz	r4, 8007a30 <_malloc_r+0x88>
 80079de:	4629      	mov	r1, r5
 80079e0:	4630      	mov	r0, r6
 80079e2:	f7ff ffbf 	bl	8007964 <sbrk_aligned>
 80079e6:	1c43      	adds	r3, r0, #1
 80079e8:	4604      	mov	r4, r0
 80079ea:	d158      	bne.n	8007a9e <_malloc_r+0xf6>
 80079ec:	f8d8 4000 	ldr.w	r4, [r8]
 80079f0:	4627      	mov	r7, r4
 80079f2:	2f00      	cmp	r7, #0
 80079f4:	d143      	bne.n	8007a7e <_malloc_r+0xd6>
 80079f6:	2c00      	cmp	r4, #0
 80079f8:	d04b      	beq.n	8007a92 <_malloc_r+0xea>
 80079fa:	6823      	ldr	r3, [r4, #0]
 80079fc:	4639      	mov	r1, r7
 80079fe:	4630      	mov	r0, r6
 8007a00:	eb04 0903 	add.w	r9, r4, r3
 8007a04:	f000 fc6a 	bl	80082dc <_sbrk_r>
 8007a08:	4581      	cmp	r9, r0
 8007a0a:	d142      	bne.n	8007a92 <_malloc_r+0xea>
 8007a0c:	6821      	ldr	r1, [r4, #0]
 8007a0e:	1a6d      	subs	r5, r5, r1
 8007a10:	4629      	mov	r1, r5
 8007a12:	4630      	mov	r0, r6
 8007a14:	f7ff ffa6 	bl	8007964 <sbrk_aligned>
 8007a18:	3001      	adds	r0, #1
 8007a1a:	d03a      	beq.n	8007a92 <_malloc_r+0xea>
 8007a1c:	6823      	ldr	r3, [r4, #0]
 8007a1e:	442b      	add	r3, r5
 8007a20:	6023      	str	r3, [r4, #0]
 8007a22:	f8d8 3000 	ldr.w	r3, [r8]
 8007a26:	685a      	ldr	r2, [r3, #4]
 8007a28:	bb62      	cbnz	r2, 8007a84 <_malloc_r+0xdc>
 8007a2a:	f8c8 7000 	str.w	r7, [r8]
 8007a2e:	e00f      	b.n	8007a50 <_malloc_r+0xa8>
 8007a30:	6822      	ldr	r2, [r4, #0]
 8007a32:	1b52      	subs	r2, r2, r5
 8007a34:	d420      	bmi.n	8007a78 <_malloc_r+0xd0>
 8007a36:	2a0b      	cmp	r2, #11
 8007a38:	d917      	bls.n	8007a6a <_malloc_r+0xc2>
 8007a3a:	1961      	adds	r1, r4, r5
 8007a3c:	42a3      	cmp	r3, r4
 8007a3e:	6025      	str	r5, [r4, #0]
 8007a40:	bf18      	it	ne
 8007a42:	6059      	strne	r1, [r3, #4]
 8007a44:	6863      	ldr	r3, [r4, #4]
 8007a46:	bf08      	it	eq
 8007a48:	f8c8 1000 	streq.w	r1, [r8]
 8007a4c:	5162      	str	r2, [r4, r5]
 8007a4e:	604b      	str	r3, [r1, #4]
 8007a50:	4630      	mov	r0, r6
 8007a52:	f000 f82f 	bl	8007ab4 <__malloc_unlock>
 8007a56:	f104 000b 	add.w	r0, r4, #11
 8007a5a:	1d23      	adds	r3, r4, #4
 8007a5c:	f020 0007 	bic.w	r0, r0, #7
 8007a60:	1ac2      	subs	r2, r0, r3
 8007a62:	bf1c      	itt	ne
 8007a64:	1a1b      	subne	r3, r3, r0
 8007a66:	50a3      	strne	r3, [r4, r2]
 8007a68:	e7af      	b.n	80079ca <_malloc_r+0x22>
 8007a6a:	6862      	ldr	r2, [r4, #4]
 8007a6c:	42a3      	cmp	r3, r4
 8007a6e:	bf0c      	ite	eq
 8007a70:	f8c8 2000 	streq.w	r2, [r8]
 8007a74:	605a      	strne	r2, [r3, #4]
 8007a76:	e7eb      	b.n	8007a50 <_malloc_r+0xa8>
 8007a78:	4623      	mov	r3, r4
 8007a7a:	6864      	ldr	r4, [r4, #4]
 8007a7c:	e7ae      	b.n	80079dc <_malloc_r+0x34>
 8007a7e:	463c      	mov	r4, r7
 8007a80:	687f      	ldr	r7, [r7, #4]
 8007a82:	e7b6      	b.n	80079f2 <_malloc_r+0x4a>
 8007a84:	461a      	mov	r2, r3
 8007a86:	685b      	ldr	r3, [r3, #4]
 8007a88:	42a3      	cmp	r3, r4
 8007a8a:	d1fb      	bne.n	8007a84 <_malloc_r+0xdc>
 8007a8c:	2300      	movs	r3, #0
 8007a8e:	6053      	str	r3, [r2, #4]
 8007a90:	e7de      	b.n	8007a50 <_malloc_r+0xa8>
 8007a92:	230c      	movs	r3, #12
 8007a94:	6033      	str	r3, [r6, #0]
 8007a96:	4630      	mov	r0, r6
 8007a98:	f000 f80c 	bl	8007ab4 <__malloc_unlock>
 8007a9c:	e794      	b.n	80079c8 <_malloc_r+0x20>
 8007a9e:	6005      	str	r5, [r0, #0]
 8007aa0:	e7d6      	b.n	8007a50 <_malloc_r+0xa8>
 8007aa2:	bf00      	nop
 8007aa4:	20001338 	.word	0x20001338

08007aa8 <__malloc_lock>:
 8007aa8:	4801      	ldr	r0, [pc, #4]	@ (8007ab0 <__malloc_lock+0x8>)
 8007aaa:	f7ff bf0e 	b.w	80078ca <__retarget_lock_acquire_recursive>
 8007aae:	bf00      	nop
 8007ab0:	20001330 	.word	0x20001330

08007ab4 <__malloc_unlock>:
 8007ab4:	4801      	ldr	r0, [pc, #4]	@ (8007abc <__malloc_unlock+0x8>)
 8007ab6:	f7ff bf09 	b.w	80078cc <__retarget_lock_release_recursive>
 8007aba:	bf00      	nop
 8007abc:	20001330 	.word	0x20001330

08007ac0 <__sfputc_r>:
 8007ac0:	6893      	ldr	r3, [r2, #8]
 8007ac2:	3b01      	subs	r3, #1
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	b410      	push	{r4}
 8007ac8:	6093      	str	r3, [r2, #8]
 8007aca:	da08      	bge.n	8007ade <__sfputc_r+0x1e>
 8007acc:	6994      	ldr	r4, [r2, #24]
 8007ace:	42a3      	cmp	r3, r4
 8007ad0:	db01      	blt.n	8007ad6 <__sfputc_r+0x16>
 8007ad2:	290a      	cmp	r1, #10
 8007ad4:	d103      	bne.n	8007ade <__sfputc_r+0x1e>
 8007ad6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007ada:	f000 bb6b 	b.w	80081b4 <__swbuf_r>
 8007ade:	6813      	ldr	r3, [r2, #0]
 8007ae0:	1c58      	adds	r0, r3, #1
 8007ae2:	6010      	str	r0, [r2, #0]
 8007ae4:	7019      	strb	r1, [r3, #0]
 8007ae6:	4608      	mov	r0, r1
 8007ae8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007aec:	4770      	bx	lr

08007aee <__sfputs_r>:
 8007aee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007af0:	4606      	mov	r6, r0
 8007af2:	460f      	mov	r7, r1
 8007af4:	4614      	mov	r4, r2
 8007af6:	18d5      	adds	r5, r2, r3
 8007af8:	42ac      	cmp	r4, r5
 8007afa:	d101      	bne.n	8007b00 <__sfputs_r+0x12>
 8007afc:	2000      	movs	r0, #0
 8007afe:	e007      	b.n	8007b10 <__sfputs_r+0x22>
 8007b00:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007b04:	463a      	mov	r2, r7
 8007b06:	4630      	mov	r0, r6
 8007b08:	f7ff ffda 	bl	8007ac0 <__sfputc_r>
 8007b0c:	1c43      	adds	r3, r0, #1
 8007b0e:	d1f3      	bne.n	8007af8 <__sfputs_r+0xa>
 8007b10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007b14 <_vfiprintf_r>:
 8007b14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b18:	460d      	mov	r5, r1
 8007b1a:	b09d      	sub	sp, #116	@ 0x74
 8007b1c:	4614      	mov	r4, r2
 8007b1e:	4698      	mov	r8, r3
 8007b20:	4606      	mov	r6, r0
 8007b22:	b118      	cbz	r0, 8007b2c <_vfiprintf_r+0x18>
 8007b24:	6a03      	ldr	r3, [r0, #32]
 8007b26:	b90b      	cbnz	r3, 8007b2c <_vfiprintf_r+0x18>
 8007b28:	f7ff fdca 	bl	80076c0 <__sinit>
 8007b2c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007b2e:	07d9      	lsls	r1, r3, #31
 8007b30:	d405      	bmi.n	8007b3e <_vfiprintf_r+0x2a>
 8007b32:	89ab      	ldrh	r3, [r5, #12]
 8007b34:	059a      	lsls	r2, r3, #22
 8007b36:	d402      	bmi.n	8007b3e <_vfiprintf_r+0x2a>
 8007b38:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007b3a:	f7ff fec6 	bl	80078ca <__retarget_lock_acquire_recursive>
 8007b3e:	89ab      	ldrh	r3, [r5, #12]
 8007b40:	071b      	lsls	r3, r3, #28
 8007b42:	d501      	bpl.n	8007b48 <_vfiprintf_r+0x34>
 8007b44:	692b      	ldr	r3, [r5, #16]
 8007b46:	b99b      	cbnz	r3, 8007b70 <_vfiprintf_r+0x5c>
 8007b48:	4629      	mov	r1, r5
 8007b4a:	4630      	mov	r0, r6
 8007b4c:	f000 fb70 	bl	8008230 <__swsetup_r>
 8007b50:	b170      	cbz	r0, 8007b70 <_vfiprintf_r+0x5c>
 8007b52:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007b54:	07dc      	lsls	r4, r3, #31
 8007b56:	d504      	bpl.n	8007b62 <_vfiprintf_r+0x4e>
 8007b58:	f04f 30ff 	mov.w	r0, #4294967295
 8007b5c:	b01d      	add	sp, #116	@ 0x74
 8007b5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b62:	89ab      	ldrh	r3, [r5, #12]
 8007b64:	0598      	lsls	r0, r3, #22
 8007b66:	d4f7      	bmi.n	8007b58 <_vfiprintf_r+0x44>
 8007b68:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007b6a:	f7ff feaf 	bl	80078cc <__retarget_lock_release_recursive>
 8007b6e:	e7f3      	b.n	8007b58 <_vfiprintf_r+0x44>
 8007b70:	2300      	movs	r3, #0
 8007b72:	9309      	str	r3, [sp, #36]	@ 0x24
 8007b74:	2320      	movs	r3, #32
 8007b76:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007b7a:	f8cd 800c 	str.w	r8, [sp, #12]
 8007b7e:	2330      	movs	r3, #48	@ 0x30
 8007b80:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8007d30 <_vfiprintf_r+0x21c>
 8007b84:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007b88:	f04f 0901 	mov.w	r9, #1
 8007b8c:	4623      	mov	r3, r4
 8007b8e:	469a      	mov	sl, r3
 8007b90:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007b94:	b10a      	cbz	r2, 8007b9a <_vfiprintf_r+0x86>
 8007b96:	2a25      	cmp	r2, #37	@ 0x25
 8007b98:	d1f9      	bne.n	8007b8e <_vfiprintf_r+0x7a>
 8007b9a:	ebba 0b04 	subs.w	fp, sl, r4
 8007b9e:	d00b      	beq.n	8007bb8 <_vfiprintf_r+0xa4>
 8007ba0:	465b      	mov	r3, fp
 8007ba2:	4622      	mov	r2, r4
 8007ba4:	4629      	mov	r1, r5
 8007ba6:	4630      	mov	r0, r6
 8007ba8:	f7ff ffa1 	bl	8007aee <__sfputs_r>
 8007bac:	3001      	adds	r0, #1
 8007bae:	f000 80a7 	beq.w	8007d00 <_vfiprintf_r+0x1ec>
 8007bb2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007bb4:	445a      	add	r2, fp
 8007bb6:	9209      	str	r2, [sp, #36]	@ 0x24
 8007bb8:	f89a 3000 	ldrb.w	r3, [sl]
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	f000 809f 	beq.w	8007d00 <_vfiprintf_r+0x1ec>
 8007bc2:	2300      	movs	r3, #0
 8007bc4:	f04f 32ff 	mov.w	r2, #4294967295
 8007bc8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007bcc:	f10a 0a01 	add.w	sl, sl, #1
 8007bd0:	9304      	str	r3, [sp, #16]
 8007bd2:	9307      	str	r3, [sp, #28]
 8007bd4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007bd8:	931a      	str	r3, [sp, #104]	@ 0x68
 8007bda:	4654      	mov	r4, sl
 8007bdc:	2205      	movs	r2, #5
 8007bde:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007be2:	4853      	ldr	r0, [pc, #332]	@ (8007d30 <_vfiprintf_r+0x21c>)
 8007be4:	f7f8 faf4 	bl	80001d0 <memchr>
 8007be8:	9a04      	ldr	r2, [sp, #16]
 8007bea:	b9d8      	cbnz	r0, 8007c24 <_vfiprintf_r+0x110>
 8007bec:	06d1      	lsls	r1, r2, #27
 8007bee:	bf44      	itt	mi
 8007bf0:	2320      	movmi	r3, #32
 8007bf2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007bf6:	0713      	lsls	r3, r2, #28
 8007bf8:	bf44      	itt	mi
 8007bfa:	232b      	movmi	r3, #43	@ 0x2b
 8007bfc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007c00:	f89a 3000 	ldrb.w	r3, [sl]
 8007c04:	2b2a      	cmp	r3, #42	@ 0x2a
 8007c06:	d015      	beq.n	8007c34 <_vfiprintf_r+0x120>
 8007c08:	9a07      	ldr	r2, [sp, #28]
 8007c0a:	4654      	mov	r4, sl
 8007c0c:	2000      	movs	r0, #0
 8007c0e:	f04f 0c0a 	mov.w	ip, #10
 8007c12:	4621      	mov	r1, r4
 8007c14:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007c18:	3b30      	subs	r3, #48	@ 0x30
 8007c1a:	2b09      	cmp	r3, #9
 8007c1c:	d94b      	bls.n	8007cb6 <_vfiprintf_r+0x1a2>
 8007c1e:	b1b0      	cbz	r0, 8007c4e <_vfiprintf_r+0x13a>
 8007c20:	9207      	str	r2, [sp, #28]
 8007c22:	e014      	b.n	8007c4e <_vfiprintf_r+0x13a>
 8007c24:	eba0 0308 	sub.w	r3, r0, r8
 8007c28:	fa09 f303 	lsl.w	r3, r9, r3
 8007c2c:	4313      	orrs	r3, r2
 8007c2e:	9304      	str	r3, [sp, #16]
 8007c30:	46a2      	mov	sl, r4
 8007c32:	e7d2      	b.n	8007bda <_vfiprintf_r+0xc6>
 8007c34:	9b03      	ldr	r3, [sp, #12]
 8007c36:	1d19      	adds	r1, r3, #4
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	9103      	str	r1, [sp, #12]
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	bfbb      	ittet	lt
 8007c40:	425b      	neglt	r3, r3
 8007c42:	f042 0202 	orrlt.w	r2, r2, #2
 8007c46:	9307      	strge	r3, [sp, #28]
 8007c48:	9307      	strlt	r3, [sp, #28]
 8007c4a:	bfb8      	it	lt
 8007c4c:	9204      	strlt	r2, [sp, #16]
 8007c4e:	7823      	ldrb	r3, [r4, #0]
 8007c50:	2b2e      	cmp	r3, #46	@ 0x2e
 8007c52:	d10a      	bne.n	8007c6a <_vfiprintf_r+0x156>
 8007c54:	7863      	ldrb	r3, [r4, #1]
 8007c56:	2b2a      	cmp	r3, #42	@ 0x2a
 8007c58:	d132      	bne.n	8007cc0 <_vfiprintf_r+0x1ac>
 8007c5a:	9b03      	ldr	r3, [sp, #12]
 8007c5c:	1d1a      	adds	r2, r3, #4
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	9203      	str	r2, [sp, #12]
 8007c62:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007c66:	3402      	adds	r4, #2
 8007c68:	9305      	str	r3, [sp, #20]
 8007c6a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8007d40 <_vfiprintf_r+0x22c>
 8007c6e:	7821      	ldrb	r1, [r4, #0]
 8007c70:	2203      	movs	r2, #3
 8007c72:	4650      	mov	r0, sl
 8007c74:	f7f8 faac 	bl	80001d0 <memchr>
 8007c78:	b138      	cbz	r0, 8007c8a <_vfiprintf_r+0x176>
 8007c7a:	9b04      	ldr	r3, [sp, #16]
 8007c7c:	eba0 000a 	sub.w	r0, r0, sl
 8007c80:	2240      	movs	r2, #64	@ 0x40
 8007c82:	4082      	lsls	r2, r0
 8007c84:	4313      	orrs	r3, r2
 8007c86:	3401      	adds	r4, #1
 8007c88:	9304      	str	r3, [sp, #16]
 8007c8a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007c8e:	4829      	ldr	r0, [pc, #164]	@ (8007d34 <_vfiprintf_r+0x220>)
 8007c90:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007c94:	2206      	movs	r2, #6
 8007c96:	f7f8 fa9b 	bl	80001d0 <memchr>
 8007c9a:	2800      	cmp	r0, #0
 8007c9c:	d03f      	beq.n	8007d1e <_vfiprintf_r+0x20a>
 8007c9e:	4b26      	ldr	r3, [pc, #152]	@ (8007d38 <_vfiprintf_r+0x224>)
 8007ca0:	bb1b      	cbnz	r3, 8007cea <_vfiprintf_r+0x1d6>
 8007ca2:	9b03      	ldr	r3, [sp, #12]
 8007ca4:	3307      	adds	r3, #7
 8007ca6:	f023 0307 	bic.w	r3, r3, #7
 8007caa:	3308      	adds	r3, #8
 8007cac:	9303      	str	r3, [sp, #12]
 8007cae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007cb0:	443b      	add	r3, r7
 8007cb2:	9309      	str	r3, [sp, #36]	@ 0x24
 8007cb4:	e76a      	b.n	8007b8c <_vfiprintf_r+0x78>
 8007cb6:	fb0c 3202 	mla	r2, ip, r2, r3
 8007cba:	460c      	mov	r4, r1
 8007cbc:	2001      	movs	r0, #1
 8007cbe:	e7a8      	b.n	8007c12 <_vfiprintf_r+0xfe>
 8007cc0:	2300      	movs	r3, #0
 8007cc2:	3401      	adds	r4, #1
 8007cc4:	9305      	str	r3, [sp, #20]
 8007cc6:	4619      	mov	r1, r3
 8007cc8:	f04f 0c0a 	mov.w	ip, #10
 8007ccc:	4620      	mov	r0, r4
 8007cce:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007cd2:	3a30      	subs	r2, #48	@ 0x30
 8007cd4:	2a09      	cmp	r2, #9
 8007cd6:	d903      	bls.n	8007ce0 <_vfiprintf_r+0x1cc>
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d0c6      	beq.n	8007c6a <_vfiprintf_r+0x156>
 8007cdc:	9105      	str	r1, [sp, #20]
 8007cde:	e7c4      	b.n	8007c6a <_vfiprintf_r+0x156>
 8007ce0:	fb0c 2101 	mla	r1, ip, r1, r2
 8007ce4:	4604      	mov	r4, r0
 8007ce6:	2301      	movs	r3, #1
 8007ce8:	e7f0      	b.n	8007ccc <_vfiprintf_r+0x1b8>
 8007cea:	ab03      	add	r3, sp, #12
 8007cec:	9300      	str	r3, [sp, #0]
 8007cee:	462a      	mov	r2, r5
 8007cf0:	4b12      	ldr	r3, [pc, #72]	@ (8007d3c <_vfiprintf_r+0x228>)
 8007cf2:	a904      	add	r1, sp, #16
 8007cf4:	4630      	mov	r0, r6
 8007cf6:	f3af 8000 	nop.w
 8007cfa:	4607      	mov	r7, r0
 8007cfc:	1c78      	adds	r0, r7, #1
 8007cfe:	d1d6      	bne.n	8007cae <_vfiprintf_r+0x19a>
 8007d00:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007d02:	07d9      	lsls	r1, r3, #31
 8007d04:	d405      	bmi.n	8007d12 <_vfiprintf_r+0x1fe>
 8007d06:	89ab      	ldrh	r3, [r5, #12]
 8007d08:	059a      	lsls	r2, r3, #22
 8007d0a:	d402      	bmi.n	8007d12 <_vfiprintf_r+0x1fe>
 8007d0c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007d0e:	f7ff fddd 	bl	80078cc <__retarget_lock_release_recursive>
 8007d12:	89ab      	ldrh	r3, [r5, #12]
 8007d14:	065b      	lsls	r3, r3, #25
 8007d16:	f53f af1f 	bmi.w	8007b58 <_vfiprintf_r+0x44>
 8007d1a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007d1c:	e71e      	b.n	8007b5c <_vfiprintf_r+0x48>
 8007d1e:	ab03      	add	r3, sp, #12
 8007d20:	9300      	str	r3, [sp, #0]
 8007d22:	462a      	mov	r2, r5
 8007d24:	4b05      	ldr	r3, [pc, #20]	@ (8007d3c <_vfiprintf_r+0x228>)
 8007d26:	a904      	add	r1, sp, #16
 8007d28:	4630      	mov	r0, r6
 8007d2a:	f000 f879 	bl	8007e20 <_printf_i>
 8007d2e:	e7e4      	b.n	8007cfa <_vfiprintf_r+0x1e6>
 8007d30:	080084a0 	.word	0x080084a0
 8007d34:	080084aa 	.word	0x080084aa
 8007d38:	00000000 	.word	0x00000000
 8007d3c:	08007aef 	.word	0x08007aef
 8007d40:	080084a6 	.word	0x080084a6

08007d44 <_printf_common>:
 8007d44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007d48:	4616      	mov	r6, r2
 8007d4a:	4698      	mov	r8, r3
 8007d4c:	688a      	ldr	r2, [r1, #8]
 8007d4e:	690b      	ldr	r3, [r1, #16]
 8007d50:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007d54:	4293      	cmp	r3, r2
 8007d56:	bfb8      	it	lt
 8007d58:	4613      	movlt	r3, r2
 8007d5a:	6033      	str	r3, [r6, #0]
 8007d5c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007d60:	4607      	mov	r7, r0
 8007d62:	460c      	mov	r4, r1
 8007d64:	b10a      	cbz	r2, 8007d6a <_printf_common+0x26>
 8007d66:	3301      	adds	r3, #1
 8007d68:	6033      	str	r3, [r6, #0]
 8007d6a:	6823      	ldr	r3, [r4, #0]
 8007d6c:	0699      	lsls	r1, r3, #26
 8007d6e:	bf42      	ittt	mi
 8007d70:	6833      	ldrmi	r3, [r6, #0]
 8007d72:	3302      	addmi	r3, #2
 8007d74:	6033      	strmi	r3, [r6, #0]
 8007d76:	6825      	ldr	r5, [r4, #0]
 8007d78:	f015 0506 	ands.w	r5, r5, #6
 8007d7c:	d106      	bne.n	8007d8c <_printf_common+0x48>
 8007d7e:	f104 0a19 	add.w	sl, r4, #25
 8007d82:	68e3      	ldr	r3, [r4, #12]
 8007d84:	6832      	ldr	r2, [r6, #0]
 8007d86:	1a9b      	subs	r3, r3, r2
 8007d88:	42ab      	cmp	r3, r5
 8007d8a:	dc26      	bgt.n	8007dda <_printf_common+0x96>
 8007d8c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007d90:	6822      	ldr	r2, [r4, #0]
 8007d92:	3b00      	subs	r3, #0
 8007d94:	bf18      	it	ne
 8007d96:	2301      	movne	r3, #1
 8007d98:	0692      	lsls	r2, r2, #26
 8007d9a:	d42b      	bmi.n	8007df4 <_printf_common+0xb0>
 8007d9c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007da0:	4641      	mov	r1, r8
 8007da2:	4638      	mov	r0, r7
 8007da4:	47c8      	blx	r9
 8007da6:	3001      	adds	r0, #1
 8007da8:	d01e      	beq.n	8007de8 <_printf_common+0xa4>
 8007daa:	6823      	ldr	r3, [r4, #0]
 8007dac:	6922      	ldr	r2, [r4, #16]
 8007dae:	f003 0306 	and.w	r3, r3, #6
 8007db2:	2b04      	cmp	r3, #4
 8007db4:	bf02      	ittt	eq
 8007db6:	68e5      	ldreq	r5, [r4, #12]
 8007db8:	6833      	ldreq	r3, [r6, #0]
 8007dba:	1aed      	subeq	r5, r5, r3
 8007dbc:	68a3      	ldr	r3, [r4, #8]
 8007dbe:	bf0c      	ite	eq
 8007dc0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007dc4:	2500      	movne	r5, #0
 8007dc6:	4293      	cmp	r3, r2
 8007dc8:	bfc4      	itt	gt
 8007dca:	1a9b      	subgt	r3, r3, r2
 8007dcc:	18ed      	addgt	r5, r5, r3
 8007dce:	2600      	movs	r6, #0
 8007dd0:	341a      	adds	r4, #26
 8007dd2:	42b5      	cmp	r5, r6
 8007dd4:	d11a      	bne.n	8007e0c <_printf_common+0xc8>
 8007dd6:	2000      	movs	r0, #0
 8007dd8:	e008      	b.n	8007dec <_printf_common+0xa8>
 8007dda:	2301      	movs	r3, #1
 8007ddc:	4652      	mov	r2, sl
 8007dde:	4641      	mov	r1, r8
 8007de0:	4638      	mov	r0, r7
 8007de2:	47c8      	blx	r9
 8007de4:	3001      	adds	r0, #1
 8007de6:	d103      	bne.n	8007df0 <_printf_common+0xac>
 8007de8:	f04f 30ff 	mov.w	r0, #4294967295
 8007dec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007df0:	3501      	adds	r5, #1
 8007df2:	e7c6      	b.n	8007d82 <_printf_common+0x3e>
 8007df4:	18e1      	adds	r1, r4, r3
 8007df6:	1c5a      	adds	r2, r3, #1
 8007df8:	2030      	movs	r0, #48	@ 0x30
 8007dfa:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007dfe:	4422      	add	r2, r4
 8007e00:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007e04:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007e08:	3302      	adds	r3, #2
 8007e0a:	e7c7      	b.n	8007d9c <_printf_common+0x58>
 8007e0c:	2301      	movs	r3, #1
 8007e0e:	4622      	mov	r2, r4
 8007e10:	4641      	mov	r1, r8
 8007e12:	4638      	mov	r0, r7
 8007e14:	47c8      	blx	r9
 8007e16:	3001      	adds	r0, #1
 8007e18:	d0e6      	beq.n	8007de8 <_printf_common+0xa4>
 8007e1a:	3601      	adds	r6, #1
 8007e1c:	e7d9      	b.n	8007dd2 <_printf_common+0x8e>
	...

08007e20 <_printf_i>:
 8007e20:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007e24:	7e0f      	ldrb	r7, [r1, #24]
 8007e26:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007e28:	2f78      	cmp	r7, #120	@ 0x78
 8007e2a:	4691      	mov	r9, r2
 8007e2c:	4680      	mov	r8, r0
 8007e2e:	460c      	mov	r4, r1
 8007e30:	469a      	mov	sl, r3
 8007e32:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007e36:	d807      	bhi.n	8007e48 <_printf_i+0x28>
 8007e38:	2f62      	cmp	r7, #98	@ 0x62
 8007e3a:	d80a      	bhi.n	8007e52 <_printf_i+0x32>
 8007e3c:	2f00      	cmp	r7, #0
 8007e3e:	f000 80d1 	beq.w	8007fe4 <_printf_i+0x1c4>
 8007e42:	2f58      	cmp	r7, #88	@ 0x58
 8007e44:	f000 80b8 	beq.w	8007fb8 <_printf_i+0x198>
 8007e48:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007e4c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007e50:	e03a      	b.n	8007ec8 <_printf_i+0xa8>
 8007e52:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007e56:	2b15      	cmp	r3, #21
 8007e58:	d8f6      	bhi.n	8007e48 <_printf_i+0x28>
 8007e5a:	a101      	add	r1, pc, #4	@ (adr r1, 8007e60 <_printf_i+0x40>)
 8007e5c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007e60:	08007eb9 	.word	0x08007eb9
 8007e64:	08007ecd 	.word	0x08007ecd
 8007e68:	08007e49 	.word	0x08007e49
 8007e6c:	08007e49 	.word	0x08007e49
 8007e70:	08007e49 	.word	0x08007e49
 8007e74:	08007e49 	.word	0x08007e49
 8007e78:	08007ecd 	.word	0x08007ecd
 8007e7c:	08007e49 	.word	0x08007e49
 8007e80:	08007e49 	.word	0x08007e49
 8007e84:	08007e49 	.word	0x08007e49
 8007e88:	08007e49 	.word	0x08007e49
 8007e8c:	08007fcb 	.word	0x08007fcb
 8007e90:	08007ef7 	.word	0x08007ef7
 8007e94:	08007f85 	.word	0x08007f85
 8007e98:	08007e49 	.word	0x08007e49
 8007e9c:	08007e49 	.word	0x08007e49
 8007ea0:	08007fed 	.word	0x08007fed
 8007ea4:	08007e49 	.word	0x08007e49
 8007ea8:	08007ef7 	.word	0x08007ef7
 8007eac:	08007e49 	.word	0x08007e49
 8007eb0:	08007e49 	.word	0x08007e49
 8007eb4:	08007f8d 	.word	0x08007f8d
 8007eb8:	6833      	ldr	r3, [r6, #0]
 8007eba:	1d1a      	adds	r2, r3, #4
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	6032      	str	r2, [r6, #0]
 8007ec0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007ec4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007ec8:	2301      	movs	r3, #1
 8007eca:	e09c      	b.n	8008006 <_printf_i+0x1e6>
 8007ecc:	6833      	ldr	r3, [r6, #0]
 8007ece:	6820      	ldr	r0, [r4, #0]
 8007ed0:	1d19      	adds	r1, r3, #4
 8007ed2:	6031      	str	r1, [r6, #0]
 8007ed4:	0606      	lsls	r6, r0, #24
 8007ed6:	d501      	bpl.n	8007edc <_printf_i+0xbc>
 8007ed8:	681d      	ldr	r5, [r3, #0]
 8007eda:	e003      	b.n	8007ee4 <_printf_i+0xc4>
 8007edc:	0645      	lsls	r5, r0, #25
 8007ede:	d5fb      	bpl.n	8007ed8 <_printf_i+0xb8>
 8007ee0:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007ee4:	2d00      	cmp	r5, #0
 8007ee6:	da03      	bge.n	8007ef0 <_printf_i+0xd0>
 8007ee8:	232d      	movs	r3, #45	@ 0x2d
 8007eea:	426d      	negs	r5, r5
 8007eec:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007ef0:	4858      	ldr	r0, [pc, #352]	@ (8008054 <_printf_i+0x234>)
 8007ef2:	230a      	movs	r3, #10
 8007ef4:	e011      	b.n	8007f1a <_printf_i+0xfa>
 8007ef6:	6821      	ldr	r1, [r4, #0]
 8007ef8:	6833      	ldr	r3, [r6, #0]
 8007efa:	0608      	lsls	r0, r1, #24
 8007efc:	f853 5b04 	ldr.w	r5, [r3], #4
 8007f00:	d402      	bmi.n	8007f08 <_printf_i+0xe8>
 8007f02:	0649      	lsls	r1, r1, #25
 8007f04:	bf48      	it	mi
 8007f06:	b2ad      	uxthmi	r5, r5
 8007f08:	2f6f      	cmp	r7, #111	@ 0x6f
 8007f0a:	4852      	ldr	r0, [pc, #328]	@ (8008054 <_printf_i+0x234>)
 8007f0c:	6033      	str	r3, [r6, #0]
 8007f0e:	bf14      	ite	ne
 8007f10:	230a      	movne	r3, #10
 8007f12:	2308      	moveq	r3, #8
 8007f14:	2100      	movs	r1, #0
 8007f16:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007f1a:	6866      	ldr	r6, [r4, #4]
 8007f1c:	60a6      	str	r6, [r4, #8]
 8007f1e:	2e00      	cmp	r6, #0
 8007f20:	db05      	blt.n	8007f2e <_printf_i+0x10e>
 8007f22:	6821      	ldr	r1, [r4, #0]
 8007f24:	432e      	orrs	r6, r5
 8007f26:	f021 0104 	bic.w	r1, r1, #4
 8007f2a:	6021      	str	r1, [r4, #0]
 8007f2c:	d04b      	beq.n	8007fc6 <_printf_i+0x1a6>
 8007f2e:	4616      	mov	r6, r2
 8007f30:	fbb5 f1f3 	udiv	r1, r5, r3
 8007f34:	fb03 5711 	mls	r7, r3, r1, r5
 8007f38:	5dc7      	ldrb	r7, [r0, r7]
 8007f3a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007f3e:	462f      	mov	r7, r5
 8007f40:	42bb      	cmp	r3, r7
 8007f42:	460d      	mov	r5, r1
 8007f44:	d9f4      	bls.n	8007f30 <_printf_i+0x110>
 8007f46:	2b08      	cmp	r3, #8
 8007f48:	d10b      	bne.n	8007f62 <_printf_i+0x142>
 8007f4a:	6823      	ldr	r3, [r4, #0]
 8007f4c:	07df      	lsls	r7, r3, #31
 8007f4e:	d508      	bpl.n	8007f62 <_printf_i+0x142>
 8007f50:	6923      	ldr	r3, [r4, #16]
 8007f52:	6861      	ldr	r1, [r4, #4]
 8007f54:	4299      	cmp	r1, r3
 8007f56:	bfde      	ittt	le
 8007f58:	2330      	movle	r3, #48	@ 0x30
 8007f5a:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007f5e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007f62:	1b92      	subs	r2, r2, r6
 8007f64:	6122      	str	r2, [r4, #16]
 8007f66:	f8cd a000 	str.w	sl, [sp]
 8007f6a:	464b      	mov	r3, r9
 8007f6c:	aa03      	add	r2, sp, #12
 8007f6e:	4621      	mov	r1, r4
 8007f70:	4640      	mov	r0, r8
 8007f72:	f7ff fee7 	bl	8007d44 <_printf_common>
 8007f76:	3001      	adds	r0, #1
 8007f78:	d14a      	bne.n	8008010 <_printf_i+0x1f0>
 8007f7a:	f04f 30ff 	mov.w	r0, #4294967295
 8007f7e:	b004      	add	sp, #16
 8007f80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007f84:	6823      	ldr	r3, [r4, #0]
 8007f86:	f043 0320 	orr.w	r3, r3, #32
 8007f8a:	6023      	str	r3, [r4, #0]
 8007f8c:	4832      	ldr	r0, [pc, #200]	@ (8008058 <_printf_i+0x238>)
 8007f8e:	2778      	movs	r7, #120	@ 0x78
 8007f90:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007f94:	6823      	ldr	r3, [r4, #0]
 8007f96:	6831      	ldr	r1, [r6, #0]
 8007f98:	061f      	lsls	r7, r3, #24
 8007f9a:	f851 5b04 	ldr.w	r5, [r1], #4
 8007f9e:	d402      	bmi.n	8007fa6 <_printf_i+0x186>
 8007fa0:	065f      	lsls	r7, r3, #25
 8007fa2:	bf48      	it	mi
 8007fa4:	b2ad      	uxthmi	r5, r5
 8007fa6:	6031      	str	r1, [r6, #0]
 8007fa8:	07d9      	lsls	r1, r3, #31
 8007faa:	bf44      	itt	mi
 8007fac:	f043 0320 	orrmi.w	r3, r3, #32
 8007fb0:	6023      	strmi	r3, [r4, #0]
 8007fb2:	b11d      	cbz	r5, 8007fbc <_printf_i+0x19c>
 8007fb4:	2310      	movs	r3, #16
 8007fb6:	e7ad      	b.n	8007f14 <_printf_i+0xf4>
 8007fb8:	4826      	ldr	r0, [pc, #152]	@ (8008054 <_printf_i+0x234>)
 8007fba:	e7e9      	b.n	8007f90 <_printf_i+0x170>
 8007fbc:	6823      	ldr	r3, [r4, #0]
 8007fbe:	f023 0320 	bic.w	r3, r3, #32
 8007fc2:	6023      	str	r3, [r4, #0]
 8007fc4:	e7f6      	b.n	8007fb4 <_printf_i+0x194>
 8007fc6:	4616      	mov	r6, r2
 8007fc8:	e7bd      	b.n	8007f46 <_printf_i+0x126>
 8007fca:	6833      	ldr	r3, [r6, #0]
 8007fcc:	6825      	ldr	r5, [r4, #0]
 8007fce:	6961      	ldr	r1, [r4, #20]
 8007fd0:	1d18      	adds	r0, r3, #4
 8007fd2:	6030      	str	r0, [r6, #0]
 8007fd4:	062e      	lsls	r6, r5, #24
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	d501      	bpl.n	8007fde <_printf_i+0x1be>
 8007fda:	6019      	str	r1, [r3, #0]
 8007fdc:	e002      	b.n	8007fe4 <_printf_i+0x1c4>
 8007fde:	0668      	lsls	r0, r5, #25
 8007fe0:	d5fb      	bpl.n	8007fda <_printf_i+0x1ba>
 8007fe2:	8019      	strh	r1, [r3, #0]
 8007fe4:	2300      	movs	r3, #0
 8007fe6:	6123      	str	r3, [r4, #16]
 8007fe8:	4616      	mov	r6, r2
 8007fea:	e7bc      	b.n	8007f66 <_printf_i+0x146>
 8007fec:	6833      	ldr	r3, [r6, #0]
 8007fee:	1d1a      	adds	r2, r3, #4
 8007ff0:	6032      	str	r2, [r6, #0]
 8007ff2:	681e      	ldr	r6, [r3, #0]
 8007ff4:	6862      	ldr	r2, [r4, #4]
 8007ff6:	2100      	movs	r1, #0
 8007ff8:	4630      	mov	r0, r6
 8007ffa:	f7f8 f8e9 	bl	80001d0 <memchr>
 8007ffe:	b108      	cbz	r0, 8008004 <_printf_i+0x1e4>
 8008000:	1b80      	subs	r0, r0, r6
 8008002:	6060      	str	r0, [r4, #4]
 8008004:	6863      	ldr	r3, [r4, #4]
 8008006:	6123      	str	r3, [r4, #16]
 8008008:	2300      	movs	r3, #0
 800800a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800800e:	e7aa      	b.n	8007f66 <_printf_i+0x146>
 8008010:	6923      	ldr	r3, [r4, #16]
 8008012:	4632      	mov	r2, r6
 8008014:	4649      	mov	r1, r9
 8008016:	4640      	mov	r0, r8
 8008018:	47d0      	blx	sl
 800801a:	3001      	adds	r0, #1
 800801c:	d0ad      	beq.n	8007f7a <_printf_i+0x15a>
 800801e:	6823      	ldr	r3, [r4, #0]
 8008020:	079b      	lsls	r3, r3, #30
 8008022:	d413      	bmi.n	800804c <_printf_i+0x22c>
 8008024:	68e0      	ldr	r0, [r4, #12]
 8008026:	9b03      	ldr	r3, [sp, #12]
 8008028:	4298      	cmp	r0, r3
 800802a:	bfb8      	it	lt
 800802c:	4618      	movlt	r0, r3
 800802e:	e7a6      	b.n	8007f7e <_printf_i+0x15e>
 8008030:	2301      	movs	r3, #1
 8008032:	4632      	mov	r2, r6
 8008034:	4649      	mov	r1, r9
 8008036:	4640      	mov	r0, r8
 8008038:	47d0      	blx	sl
 800803a:	3001      	adds	r0, #1
 800803c:	d09d      	beq.n	8007f7a <_printf_i+0x15a>
 800803e:	3501      	adds	r5, #1
 8008040:	68e3      	ldr	r3, [r4, #12]
 8008042:	9903      	ldr	r1, [sp, #12]
 8008044:	1a5b      	subs	r3, r3, r1
 8008046:	42ab      	cmp	r3, r5
 8008048:	dcf2      	bgt.n	8008030 <_printf_i+0x210>
 800804a:	e7eb      	b.n	8008024 <_printf_i+0x204>
 800804c:	2500      	movs	r5, #0
 800804e:	f104 0619 	add.w	r6, r4, #25
 8008052:	e7f5      	b.n	8008040 <_printf_i+0x220>
 8008054:	080084b1 	.word	0x080084b1
 8008058:	080084c2 	.word	0x080084c2

0800805c <__sflush_r>:
 800805c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008060:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008064:	0716      	lsls	r6, r2, #28
 8008066:	4605      	mov	r5, r0
 8008068:	460c      	mov	r4, r1
 800806a:	d454      	bmi.n	8008116 <__sflush_r+0xba>
 800806c:	684b      	ldr	r3, [r1, #4]
 800806e:	2b00      	cmp	r3, #0
 8008070:	dc02      	bgt.n	8008078 <__sflush_r+0x1c>
 8008072:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008074:	2b00      	cmp	r3, #0
 8008076:	dd48      	ble.n	800810a <__sflush_r+0xae>
 8008078:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800807a:	2e00      	cmp	r6, #0
 800807c:	d045      	beq.n	800810a <__sflush_r+0xae>
 800807e:	2300      	movs	r3, #0
 8008080:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008084:	682f      	ldr	r7, [r5, #0]
 8008086:	6a21      	ldr	r1, [r4, #32]
 8008088:	602b      	str	r3, [r5, #0]
 800808a:	d030      	beq.n	80080ee <__sflush_r+0x92>
 800808c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800808e:	89a3      	ldrh	r3, [r4, #12]
 8008090:	0759      	lsls	r1, r3, #29
 8008092:	d505      	bpl.n	80080a0 <__sflush_r+0x44>
 8008094:	6863      	ldr	r3, [r4, #4]
 8008096:	1ad2      	subs	r2, r2, r3
 8008098:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800809a:	b10b      	cbz	r3, 80080a0 <__sflush_r+0x44>
 800809c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800809e:	1ad2      	subs	r2, r2, r3
 80080a0:	2300      	movs	r3, #0
 80080a2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80080a4:	6a21      	ldr	r1, [r4, #32]
 80080a6:	4628      	mov	r0, r5
 80080a8:	47b0      	blx	r6
 80080aa:	1c43      	adds	r3, r0, #1
 80080ac:	89a3      	ldrh	r3, [r4, #12]
 80080ae:	d106      	bne.n	80080be <__sflush_r+0x62>
 80080b0:	6829      	ldr	r1, [r5, #0]
 80080b2:	291d      	cmp	r1, #29
 80080b4:	d82b      	bhi.n	800810e <__sflush_r+0xb2>
 80080b6:	4a2a      	ldr	r2, [pc, #168]	@ (8008160 <__sflush_r+0x104>)
 80080b8:	40ca      	lsrs	r2, r1
 80080ba:	07d6      	lsls	r6, r2, #31
 80080bc:	d527      	bpl.n	800810e <__sflush_r+0xb2>
 80080be:	2200      	movs	r2, #0
 80080c0:	6062      	str	r2, [r4, #4]
 80080c2:	04d9      	lsls	r1, r3, #19
 80080c4:	6922      	ldr	r2, [r4, #16]
 80080c6:	6022      	str	r2, [r4, #0]
 80080c8:	d504      	bpl.n	80080d4 <__sflush_r+0x78>
 80080ca:	1c42      	adds	r2, r0, #1
 80080cc:	d101      	bne.n	80080d2 <__sflush_r+0x76>
 80080ce:	682b      	ldr	r3, [r5, #0]
 80080d0:	b903      	cbnz	r3, 80080d4 <__sflush_r+0x78>
 80080d2:	6560      	str	r0, [r4, #84]	@ 0x54
 80080d4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80080d6:	602f      	str	r7, [r5, #0]
 80080d8:	b1b9      	cbz	r1, 800810a <__sflush_r+0xae>
 80080da:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80080de:	4299      	cmp	r1, r3
 80080e0:	d002      	beq.n	80080e8 <__sflush_r+0x8c>
 80080e2:	4628      	mov	r0, r5
 80080e4:	f7ff fbf4 	bl	80078d0 <_free_r>
 80080e8:	2300      	movs	r3, #0
 80080ea:	6363      	str	r3, [r4, #52]	@ 0x34
 80080ec:	e00d      	b.n	800810a <__sflush_r+0xae>
 80080ee:	2301      	movs	r3, #1
 80080f0:	4628      	mov	r0, r5
 80080f2:	47b0      	blx	r6
 80080f4:	4602      	mov	r2, r0
 80080f6:	1c50      	adds	r0, r2, #1
 80080f8:	d1c9      	bne.n	800808e <__sflush_r+0x32>
 80080fa:	682b      	ldr	r3, [r5, #0]
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d0c6      	beq.n	800808e <__sflush_r+0x32>
 8008100:	2b1d      	cmp	r3, #29
 8008102:	d001      	beq.n	8008108 <__sflush_r+0xac>
 8008104:	2b16      	cmp	r3, #22
 8008106:	d11e      	bne.n	8008146 <__sflush_r+0xea>
 8008108:	602f      	str	r7, [r5, #0]
 800810a:	2000      	movs	r0, #0
 800810c:	e022      	b.n	8008154 <__sflush_r+0xf8>
 800810e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008112:	b21b      	sxth	r3, r3
 8008114:	e01b      	b.n	800814e <__sflush_r+0xf2>
 8008116:	690f      	ldr	r7, [r1, #16]
 8008118:	2f00      	cmp	r7, #0
 800811a:	d0f6      	beq.n	800810a <__sflush_r+0xae>
 800811c:	0793      	lsls	r3, r2, #30
 800811e:	680e      	ldr	r6, [r1, #0]
 8008120:	bf08      	it	eq
 8008122:	694b      	ldreq	r3, [r1, #20]
 8008124:	600f      	str	r7, [r1, #0]
 8008126:	bf18      	it	ne
 8008128:	2300      	movne	r3, #0
 800812a:	eba6 0807 	sub.w	r8, r6, r7
 800812e:	608b      	str	r3, [r1, #8]
 8008130:	f1b8 0f00 	cmp.w	r8, #0
 8008134:	dde9      	ble.n	800810a <__sflush_r+0xae>
 8008136:	6a21      	ldr	r1, [r4, #32]
 8008138:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800813a:	4643      	mov	r3, r8
 800813c:	463a      	mov	r2, r7
 800813e:	4628      	mov	r0, r5
 8008140:	47b0      	blx	r6
 8008142:	2800      	cmp	r0, #0
 8008144:	dc08      	bgt.n	8008158 <__sflush_r+0xfc>
 8008146:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800814a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800814e:	81a3      	strh	r3, [r4, #12]
 8008150:	f04f 30ff 	mov.w	r0, #4294967295
 8008154:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008158:	4407      	add	r7, r0
 800815a:	eba8 0800 	sub.w	r8, r8, r0
 800815e:	e7e7      	b.n	8008130 <__sflush_r+0xd4>
 8008160:	20400001 	.word	0x20400001

08008164 <_fflush_r>:
 8008164:	b538      	push	{r3, r4, r5, lr}
 8008166:	690b      	ldr	r3, [r1, #16]
 8008168:	4605      	mov	r5, r0
 800816a:	460c      	mov	r4, r1
 800816c:	b913      	cbnz	r3, 8008174 <_fflush_r+0x10>
 800816e:	2500      	movs	r5, #0
 8008170:	4628      	mov	r0, r5
 8008172:	bd38      	pop	{r3, r4, r5, pc}
 8008174:	b118      	cbz	r0, 800817e <_fflush_r+0x1a>
 8008176:	6a03      	ldr	r3, [r0, #32]
 8008178:	b90b      	cbnz	r3, 800817e <_fflush_r+0x1a>
 800817a:	f7ff faa1 	bl	80076c0 <__sinit>
 800817e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008182:	2b00      	cmp	r3, #0
 8008184:	d0f3      	beq.n	800816e <_fflush_r+0xa>
 8008186:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008188:	07d0      	lsls	r0, r2, #31
 800818a:	d404      	bmi.n	8008196 <_fflush_r+0x32>
 800818c:	0599      	lsls	r1, r3, #22
 800818e:	d402      	bmi.n	8008196 <_fflush_r+0x32>
 8008190:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008192:	f7ff fb9a 	bl	80078ca <__retarget_lock_acquire_recursive>
 8008196:	4628      	mov	r0, r5
 8008198:	4621      	mov	r1, r4
 800819a:	f7ff ff5f 	bl	800805c <__sflush_r>
 800819e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80081a0:	07da      	lsls	r2, r3, #31
 80081a2:	4605      	mov	r5, r0
 80081a4:	d4e4      	bmi.n	8008170 <_fflush_r+0xc>
 80081a6:	89a3      	ldrh	r3, [r4, #12]
 80081a8:	059b      	lsls	r3, r3, #22
 80081aa:	d4e1      	bmi.n	8008170 <_fflush_r+0xc>
 80081ac:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80081ae:	f7ff fb8d 	bl	80078cc <__retarget_lock_release_recursive>
 80081b2:	e7dd      	b.n	8008170 <_fflush_r+0xc>

080081b4 <__swbuf_r>:
 80081b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80081b6:	460e      	mov	r6, r1
 80081b8:	4614      	mov	r4, r2
 80081ba:	4605      	mov	r5, r0
 80081bc:	b118      	cbz	r0, 80081c6 <__swbuf_r+0x12>
 80081be:	6a03      	ldr	r3, [r0, #32]
 80081c0:	b90b      	cbnz	r3, 80081c6 <__swbuf_r+0x12>
 80081c2:	f7ff fa7d 	bl	80076c0 <__sinit>
 80081c6:	69a3      	ldr	r3, [r4, #24]
 80081c8:	60a3      	str	r3, [r4, #8]
 80081ca:	89a3      	ldrh	r3, [r4, #12]
 80081cc:	071a      	lsls	r2, r3, #28
 80081ce:	d501      	bpl.n	80081d4 <__swbuf_r+0x20>
 80081d0:	6923      	ldr	r3, [r4, #16]
 80081d2:	b943      	cbnz	r3, 80081e6 <__swbuf_r+0x32>
 80081d4:	4621      	mov	r1, r4
 80081d6:	4628      	mov	r0, r5
 80081d8:	f000 f82a 	bl	8008230 <__swsetup_r>
 80081dc:	b118      	cbz	r0, 80081e6 <__swbuf_r+0x32>
 80081de:	f04f 37ff 	mov.w	r7, #4294967295
 80081e2:	4638      	mov	r0, r7
 80081e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80081e6:	6823      	ldr	r3, [r4, #0]
 80081e8:	6922      	ldr	r2, [r4, #16]
 80081ea:	1a98      	subs	r0, r3, r2
 80081ec:	6963      	ldr	r3, [r4, #20]
 80081ee:	b2f6      	uxtb	r6, r6
 80081f0:	4283      	cmp	r3, r0
 80081f2:	4637      	mov	r7, r6
 80081f4:	dc05      	bgt.n	8008202 <__swbuf_r+0x4e>
 80081f6:	4621      	mov	r1, r4
 80081f8:	4628      	mov	r0, r5
 80081fa:	f7ff ffb3 	bl	8008164 <_fflush_r>
 80081fe:	2800      	cmp	r0, #0
 8008200:	d1ed      	bne.n	80081de <__swbuf_r+0x2a>
 8008202:	68a3      	ldr	r3, [r4, #8]
 8008204:	3b01      	subs	r3, #1
 8008206:	60a3      	str	r3, [r4, #8]
 8008208:	6823      	ldr	r3, [r4, #0]
 800820a:	1c5a      	adds	r2, r3, #1
 800820c:	6022      	str	r2, [r4, #0]
 800820e:	701e      	strb	r6, [r3, #0]
 8008210:	6962      	ldr	r2, [r4, #20]
 8008212:	1c43      	adds	r3, r0, #1
 8008214:	429a      	cmp	r2, r3
 8008216:	d004      	beq.n	8008222 <__swbuf_r+0x6e>
 8008218:	89a3      	ldrh	r3, [r4, #12]
 800821a:	07db      	lsls	r3, r3, #31
 800821c:	d5e1      	bpl.n	80081e2 <__swbuf_r+0x2e>
 800821e:	2e0a      	cmp	r6, #10
 8008220:	d1df      	bne.n	80081e2 <__swbuf_r+0x2e>
 8008222:	4621      	mov	r1, r4
 8008224:	4628      	mov	r0, r5
 8008226:	f7ff ff9d 	bl	8008164 <_fflush_r>
 800822a:	2800      	cmp	r0, #0
 800822c:	d0d9      	beq.n	80081e2 <__swbuf_r+0x2e>
 800822e:	e7d6      	b.n	80081de <__swbuf_r+0x2a>

08008230 <__swsetup_r>:
 8008230:	b538      	push	{r3, r4, r5, lr}
 8008232:	4b29      	ldr	r3, [pc, #164]	@ (80082d8 <__swsetup_r+0xa8>)
 8008234:	4605      	mov	r5, r0
 8008236:	6818      	ldr	r0, [r3, #0]
 8008238:	460c      	mov	r4, r1
 800823a:	b118      	cbz	r0, 8008244 <__swsetup_r+0x14>
 800823c:	6a03      	ldr	r3, [r0, #32]
 800823e:	b90b      	cbnz	r3, 8008244 <__swsetup_r+0x14>
 8008240:	f7ff fa3e 	bl	80076c0 <__sinit>
 8008244:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008248:	0719      	lsls	r1, r3, #28
 800824a:	d422      	bmi.n	8008292 <__swsetup_r+0x62>
 800824c:	06da      	lsls	r2, r3, #27
 800824e:	d407      	bmi.n	8008260 <__swsetup_r+0x30>
 8008250:	2209      	movs	r2, #9
 8008252:	602a      	str	r2, [r5, #0]
 8008254:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008258:	81a3      	strh	r3, [r4, #12]
 800825a:	f04f 30ff 	mov.w	r0, #4294967295
 800825e:	e033      	b.n	80082c8 <__swsetup_r+0x98>
 8008260:	0758      	lsls	r0, r3, #29
 8008262:	d512      	bpl.n	800828a <__swsetup_r+0x5a>
 8008264:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008266:	b141      	cbz	r1, 800827a <__swsetup_r+0x4a>
 8008268:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800826c:	4299      	cmp	r1, r3
 800826e:	d002      	beq.n	8008276 <__swsetup_r+0x46>
 8008270:	4628      	mov	r0, r5
 8008272:	f7ff fb2d 	bl	80078d0 <_free_r>
 8008276:	2300      	movs	r3, #0
 8008278:	6363      	str	r3, [r4, #52]	@ 0x34
 800827a:	89a3      	ldrh	r3, [r4, #12]
 800827c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008280:	81a3      	strh	r3, [r4, #12]
 8008282:	2300      	movs	r3, #0
 8008284:	6063      	str	r3, [r4, #4]
 8008286:	6923      	ldr	r3, [r4, #16]
 8008288:	6023      	str	r3, [r4, #0]
 800828a:	89a3      	ldrh	r3, [r4, #12]
 800828c:	f043 0308 	orr.w	r3, r3, #8
 8008290:	81a3      	strh	r3, [r4, #12]
 8008292:	6923      	ldr	r3, [r4, #16]
 8008294:	b94b      	cbnz	r3, 80082aa <__swsetup_r+0x7a>
 8008296:	89a3      	ldrh	r3, [r4, #12]
 8008298:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800829c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80082a0:	d003      	beq.n	80082aa <__swsetup_r+0x7a>
 80082a2:	4621      	mov	r1, r4
 80082a4:	4628      	mov	r0, r5
 80082a6:	f000 f84f 	bl	8008348 <__smakebuf_r>
 80082aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80082ae:	f013 0201 	ands.w	r2, r3, #1
 80082b2:	d00a      	beq.n	80082ca <__swsetup_r+0x9a>
 80082b4:	2200      	movs	r2, #0
 80082b6:	60a2      	str	r2, [r4, #8]
 80082b8:	6962      	ldr	r2, [r4, #20]
 80082ba:	4252      	negs	r2, r2
 80082bc:	61a2      	str	r2, [r4, #24]
 80082be:	6922      	ldr	r2, [r4, #16]
 80082c0:	b942      	cbnz	r2, 80082d4 <__swsetup_r+0xa4>
 80082c2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80082c6:	d1c5      	bne.n	8008254 <__swsetup_r+0x24>
 80082c8:	bd38      	pop	{r3, r4, r5, pc}
 80082ca:	0799      	lsls	r1, r3, #30
 80082cc:	bf58      	it	pl
 80082ce:	6962      	ldrpl	r2, [r4, #20]
 80082d0:	60a2      	str	r2, [r4, #8]
 80082d2:	e7f4      	b.n	80082be <__swsetup_r+0x8e>
 80082d4:	2000      	movs	r0, #0
 80082d6:	e7f7      	b.n	80082c8 <__swsetup_r+0x98>
 80082d8:	2000061c 	.word	0x2000061c

080082dc <_sbrk_r>:
 80082dc:	b538      	push	{r3, r4, r5, lr}
 80082de:	4d06      	ldr	r5, [pc, #24]	@ (80082f8 <_sbrk_r+0x1c>)
 80082e0:	2300      	movs	r3, #0
 80082e2:	4604      	mov	r4, r0
 80082e4:	4608      	mov	r0, r1
 80082e6:	602b      	str	r3, [r5, #0]
 80082e8:	f7f8 fbcc 	bl	8000a84 <_sbrk>
 80082ec:	1c43      	adds	r3, r0, #1
 80082ee:	d102      	bne.n	80082f6 <_sbrk_r+0x1a>
 80082f0:	682b      	ldr	r3, [r5, #0]
 80082f2:	b103      	cbz	r3, 80082f6 <_sbrk_r+0x1a>
 80082f4:	6023      	str	r3, [r4, #0]
 80082f6:	bd38      	pop	{r3, r4, r5, pc}
 80082f8:	2000132c 	.word	0x2000132c

080082fc <__swhatbuf_r>:
 80082fc:	b570      	push	{r4, r5, r6, lr}
 80082fe:	460c      	mov	r4, r1
 8008300:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008304:	2900      	cmp	r1, #0
 8008306:	b096      	sub	sp, #88	@ 0x58
 8008308:	4615      	mov	r5, r2
 800830a:	461e      	mov	r6, r3
 800830c:	da0d      	bge.n	800832a <__swhatbuf_r+0x2e>
 800830e:	89a3      	ldrh	r3, [r4, #12]
 8008310:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008314:	f04f 0100 	mov.w	r1, #0
 8008318:	bf14      	ite	ne
 800831a:	2340      	movne	r3, #64	@ 0x40
 800831c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8008320:	2000      	movs	r0, #0
 8008322:	6031      	str	r1, [r6, #0]
 8008324:	602b      	str	r3, [r5, #0]
 8008326:	b016      	add	sp, #88	@ 0x58
 8008328:	bd70      	pop	{r4, r5, r6, pc}
 800832a:	466a      	mov	r2, sp
 800832c:	f000 f848 	bl	80083c0 <_fstat_r>
 8008330:	2800      	cmp	r0, #0
 8008332:	dbec      	blt.n	800830e <__swhatbuf_r+0x12>
 8008334:	9901      	ldr	r1, [sp, #4]
 8008336:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800833a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800833e:	4259      	negs	r1, r3
 8008340:	4159      	adcs	r1, r3
 8008342:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008346:	e7eb      	b.n	8008320 <__swhatbuf_r+0x24>

08008348 <__smakebuf_r>:
 8008348:	898b      	ldrh	r3, [r1, #12]
 800834a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800834c:	079d      	lsls	r5, r3, #30
 800834e:	4606      	mov	r6, r0
 8008350:	460c      	mov	r4, r1
 8008352:	d507      	bpl.n	8008364 <__smakebuf_r+0x1c>
 8008354:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8008358:	6023      	str	r3, [r4, #0]
 800835a:	6123      	str	r3, [r4, #16]
 800835c:	2301      	movs	r3, #1
 800835e:	6163      	str	r3, [r4, #20]
 8008360:	b003      	add	sp, #12
 8008362:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008364:	ab01      	add	r3, sp, #4
 8008366:	466a      	mov	r2, sp
 8008368:	f7ff ffc8 	bl	80082fc <__swhatbuf_r>
 800836c:	9f00      	ldr	r7, [sp, #0]
 800836e:	4605      	mov	r5, r0
 8008370:	4639      	mov	r1, r7
 8008372:	4630      	mov	r0, r6
 8008374:	f7ff fb18 	bl	80079a8 <_malloc_r>
 8008378:	b948      	cbnz	r0, 800838e <__smakebuf_r+0x46>
 800837a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800837e:	059a      	lsls	r2, r3, #22
 8008380:	d4ee      	bmi.n	8008360 <__smakebuf_r+0x18>
 8008382:	f023 0303 	bic.w	r3, r3, #3
 8008386:	f043 0302 	orr.w	r3, r3, #2
 800838a:	81a3      	strh	r3, [r4, #12]
 800838c:	e7e2      	b.n	8008354 <__smakebuf_r+0xc>
 800838e:	89a3      	ldrh	r3, [r4, #12]
 8008390:	6020      	str	r0, [r4, #0]
 8008392:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008396:	81a3      	strh	r3, [r4, #12]
 8008398:	9b01      	ldr	r3, [sp, #4]
 800839a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800839e:	b15b      	cbz	r3, 80083b8 <__smakebuf_r+0x70>
 80083a0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80083a4:	4630      	mov	r0, r6
 80083a6:	f000 f81d 	bl	80083e4 <_isatty_r>
 80083aa:	b128      	cbz	r0, 80083b8 <__smakebuf_r+0x70>
 80083ac:	89a3      	ldrh	r3, [r4, #12]
 80083ae:	f023 0303 	bic.w	r3, r3, #3
 80083b2:	f043 0301 	orr.w	r3, r3, #1
 80083b6:	81a3      	strh	r3, [r4, #12]
 80083b8:	89a3      	ldrh	r3, [r4, #12]
 80083ba:	431d      	orrs	r5, r3
 80083bc:	81a5      	strh	r5, [r4, #12]
 80083be:	e7cf      	b.n	8008360 <__smakebuf_r+0x18>

080083c0 <_fstat_r>:
 80083c0:	b538      	push	{r3, r4, r5, lr}
 80083c2:	4d07      	ldr	r5, [pc, #28]	@ (80083e0 <_fstat_r+0x20>)
 80083c4:	2300      	movs	r3, #0
 80083c6:	4604      	mov	r4, r0
 80083c8:	4608      	mov	r0, r1
 80083ca:	4611      	mov	r1, r2
 80083cc:	602b      	str	r3, [r5, #0]
 80083ce:	f7f8 fb30 	bl	8000a32 <_fstat>
 80083d2:	1c43      	adds	r3, r0, #1
 80083d4:	d102      	bne.n	80083dc <_fstat_r+0x1c>
 80083d6:	682b      	ldr	r3, [r5, #0]
 80083d8:	b103      	cbz	r3, 80083dc <_fstat_r+0x1c>
 80083da:	6023      	str	r3, [r4, #0]
 80083dc:	bd38      	pop	{r3, r4, r5, pc}
 80083de:	bf00      	nop
 80083e0:	2000132c 	.word	0x2000132c

080083e4 <_isatty_r>:
 80083e4:	b538      	push	{r3, r4, r5, lr}
 80083e6:	4d06      	ldr	r5, [pc, #24]	@ (8008400 <_isatty_r+0x1c>)
 80083e8:	2300      	movs	r3, #0
 80083ea:	4604      	mov	r4, r0
 80083ec:	4608      	mov	r0, r1
 80083ee:	602b      	str	r3, [r5, #0]
 80083f0:	f7f8 fb2f 	bl	8000a52 <_isatty>
 80083f4:	1c43      	adds	r3, r0, #1
 80083f6:	d102      	bne.n	80083fe <_isatty_r+0x1a>
 80083f8:	682b      	ldr	r3, [r5, #0]
 80083fa:	b103      	cbz	r3, 80083fe <_isatty_r+0x1a>
 80083fc:	6023      	str	r3, [r4, #0]
 80083fe:	bd38      	pop	{r3, r4, r5, pc}
 8008400:	2000132c 	.word	0x2000132c

08008404 <_init>:
 8008404:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008406:	bf00      	nop
 8008408:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800840a:	bc08      	pop	{r3}
 800840c:	469e      	mov	lr, r3
 800840e:	4770      	bx	lr

08008410 <_fini>:
 8008410:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008412:	bf00      	nop
 8008414:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008416:	bc08      	pop	{r3}
 8008418:	469e      	mov	lr, r3
 800841a:	4770      	bx	lr
