
SimulareVolan.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009734  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000448  080098bc  080098bc  0000a8bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009d04  08009d04  0000b538  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08009d04  08009d04  0000ad04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009d0c  08009d0c  0000b538  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009d0c  08009d0c  0000ad0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009d10  08009d10  0000ad10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000538  20000000  08009d14  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000b538  2**0
                  CONTENTS
 10 .bss          000014a4  20000538  20000538  0000b538  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200019dc  200019dc  0000b538  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000b538  2**0
                  CONTENTS, READONLY
 13 .debug_info   00013ff7  00000000  00000000  0000b568  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000337e  00000000  00000000  0001f55f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001168  00000000  00000000  000228e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000d4d  00000000  00000000  00023a48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021e3a  00000000  00000000  00024795  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00015749  00000000  00000000  000465cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c3097  00000000  00000000  0005bd18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0011edaf  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000049b8  00000000  00000000  0011edf4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006c  00000000  00000000  001237ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000538 	.word	0x20000538
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080098a4 	.word	0x080098a4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000053c 	.word	0x2000053c
 80001c4:	080098a4 	.word	0x080098a4

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b988 	b.w	80004f0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	468e      	mov	lr, r1
 8000200:	4604      	mov	r4, r0
 8000202:	4688      	mov	r8, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d962      	bls.n	80002d4 <__udivmoddi4+0xdc>
 800020e:	fab2 f682 	clz	r6, r2
 8000212:	b14e      	cbz	r6, 8000228 <__udivmoddi4+0x30>
 8000214:	f1c6 0320 	rsb	r3, r6, #32
 8000218:	fa01 f806 	lsl.w	r8, r1, r6
 800021c:	fa20 f303 	lsr.w	r3, r0, r3
 8000220:	40b7      	lsls	r7, r6
 8000222:	ea43 0808 	orr.w	r8, r3, r8
 8000226:	40b4      	lsls	r4, r6
 8000228:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800022c:	fa1f fc87 	uxth.w	ip, r7
 8000230:	fbb8 f1fe 	udiv	r1, r8, lr
 8000234:	0c23      	lsrs	r3, r4, #16
 8000236:	fb0e 8811 	mls	r8, lr, r1, r8
 800023a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023e:	fb01 f20c 	mul.w	r2, r1, ip
 8000242:	429a      	cmp	r2, r3
 8000244:	d909      	bls.n	800025a <__udivmoddi4+0x62>
 8000246:	18fb      	adds	r3, r7, r3
 8000248:	f101 30ff 	add.w	r0, r1, #4294967295
 800024c:	f080 80ea 	bcs.w	8000424 <__udivmoddi4+0x22c>
 8000250:	429a      	cmp	r2, r3
 8000252:	f240 80e7 	bls.w	8000424 <__udivmoddi4+0x22c>
 8000256:	3902      	subs	r1, #2
 8000258:	443b      	add	r3, r7
 800025a:	1a9a      	subs	r2, r3, r2
 800025c:	b2a3      	uxth	r3, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800026a:	fb00 fc0c 	mul.w	ip, r0, ip
 800026e:	459c      	cmp	ip, r3
 8000270:	d909      	bls.n	8000286 <__udivmoddi4+0x8e>
 8000272:	18fb      	adds	r3, r7, r3
 8000274:	f100 32ff 	add.w	r2, r0, #4294967295
 8000278:	f080 80d6 	bcs.w	8000428 <__udivmoddi4+0x230>
 800027c:	459c      	cmp	ip, r3
 800027e:	f240 80d3 	bls.w	8000428 <__udivmoddi4+0x230>
 8000282:	443b      	add	r3, r7
 8000284:	3802      	subs	r0, #2
 8000286:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028a:	eba3 030c 	sub.w	r3, r3, ip
 800028e:	2100      	movs	r1, #0
 8000290:	b11d      	cbz	r5, 800029a <__udivmoddi4+0xa2>
 8000292:	40f3      	lsrs	r3, r6
 8000294:	2200      	movs	r2, #0
 8000296:	e9c5 3200 	strd	r3, r2, [r5]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d905      	bls.n	80002ae <__udivmoddi4+0xb6>
 80002a2:	b10d      	cbz	r5, 80002a8 <__udivmoddi4+0xb0>
 80002a4:	e9c5 0100 	strd	r0, r1, [r5]
 80002a8:	2100      	movs	r1, #0
 80002aa:	4608      	mov	r0, r1
 80002ac:	e7f5      	b.n	800029a <__udivmoddi4+0xa2>
 80002ae:	fab3 f183 	clz	r1, r3
 80002b2:	2900      	cmp	r1, #0
 80002b4:	d146      	bne.n	8000344 <__udivmoddi4+0x14c>
 80002b6:	4573      	cmp	r3, lr
 80002b8:	d302      	bcc.n	80002c0 <__udivmoddi4+0xc8>
 80002ba:	4282      	cmp	r2, r0
 80002bc:	f200 8105 	bhi.w	80004ca <__udivmoddi4+0x2d2>
 80002c0:	1a84      	subs	r4, r0, r2
 80002c2:	eb6e 0203 	sbc.w	r2, lr, r3
 80002c6:	2001      	movs	r0, #1
 80002c8:	4690      	mov	r8, r2
 80002ca:	2d00      	cmp	r5, #0
 80002cc:	d0e5      	beq.n	800029a <__udivmoddi4+0xa2>
 80002ce:	e9c5 4800 	strd	r4, r8, [r5]
 80002d2:	e7e2      	b.n	800029a <__udivmoddi4+0xa2>
 80002d4:	2a00      	cmp	r2, #0
 80002d6:	f000 8090 	beq.w	80003fa <__udivmoddi4+0x202>
 80002da:	fab2 f682 	clz	r6, r2
 80002de:	2e00      	cmp	r6, #0
 80002e0:	f040 80a4 	bne.w	800042c <__udivmoddi4+0x234>
 80002e4:	1a8a      	subs	r2, r1, r2
 80002e6:	0c03      	lsrs	r3, r0, #16
 80002e8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002ec:	b280      	uxth	r0, r0
 80002ee:	b2bc      	uxth	r4, r7
 80002f0:	2101      	movs	r1, #1
 80002f2:	fbb2 fcfe 	udiv	ip, r2, lr
 80002f6:	fb0e 221c 	mls	r2, lr, ip, r2
 80002fa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002fe:	fb04 f20c 	mul.w	r2, r4, ip
 8000302:	429a      	cmp	r2, r3
 8000304:	d907      	bls.n	8000316 <__udivmoddi4+0x11e>
 8000306:	18fb      	adds	r3, r7, r3
 8000308:	f10c 38ff 	add.w	r8, ip, #4294967295
 800030c:	d202      	bcs.n	8000314 <__udivmoddi4+0x11c>
 800030e:	429a      	cmp	r2, r3
 8000310:	f200 80e0 	bhi.w	80004d4 <__udivmoddi4+0x2dc>
 8000314:	46c4      	mov	ip, r8
 8000316:	1a9b      	subs	r3, r3, r2
 8000318:	fbb3 f2fe 	udiv	r2, r3, lr
 800031c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000320:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000324:	fb02 f404 	mul.w	r4, r2, r4
 8000328:	429c      	cmp	r4, r3
 800032a:	d907      	bls.n	800033c <__udivmoddi4+0x144>
 800032c:	18fb      	adds	r3, r7, r3
 800032e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x142>
 8000334:	429c      	cmp	r4, r3
 8000336:	f200 80ca 	bhi.w	80004ce <__udivmoddi4+0x2d6>
 800033a:	4602      	mov	r2, r0
 800033c:	1b1b      	subs	r3, r3, r4
 800033e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000342:	e7a5      	b.n	8000290 <__udivmoddi4+0x98>
 8000344:	f1c1 0620 	rsb	r6, r1, #32
 8000348:	408b      	lsls	r3, r1
 800034a:	fa22 f706 	lsr.w	r7, r2, r6
 800034e:	431f      	orrs	r7, r3
 8000350:	fa0e f401 	lsl.w	r4, lr, r1
 8000354:	fa20 f306 	lsr.w	r3, r0, r6
 8000358:	fa2e fe06 	lsr.w	lr, lr, r6
 800035c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000360:	4323      	orrs	r3, r4
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	fa1f fc87 	uxth.w	ip, r7
 800036a:	fbbe f0f9 	udiv	r0, lr, r9
 800036e:	0c1c      	lsrs	r4, r3, #16
 8000370:	fb09 ee10 	mls	lr, r9, r0, lr
 8000374:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000378:	fb00 fe0c 	mul.w	lr, r0, ip
 800037c:	45a6      	cmp	lr, r4
 800037e:	fa02 f201 	lsl.w	r2, r2, r1
 8000382:	d909      	bls.n	8000398 <__udivmoddi4+0x1a0>
 8000384:	193c      	adds	r4, r7, r4
 8000386:	f100 3aff 	add.w	sl, r0, #4294967295
 800038a:	f080 809c 	bcs.w	80004c6 <__udivmoddi4+0x2ce>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f240 8099 	bls.w	80004c6 <__udivmoddi4+0x2ce>
 8000394:	3802      	subs	r0, #2
 8000396:	443c      	add	r4, r7
 8000398:	eba4 040e 	sub.w	r4, r4, lr
 800039c:	fa1f fe83 	uxth.w	lr, r3
 80003a0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003a4:	fb09 4413 	mls	r4, r9, r3, r4
 80003a8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003ac:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b0:	45a4      	cmp	ip, r4
 80003b2:	d908      	bls.n	80003c6 <__udivmoddi4+0x1ce>
 80003b4:	193c      	adds	r4, r7, r4
 80003b6:	f103 3eff 	add.w	lr, r3, #4294967295
 80003ba:	f080 8082 	bcs.w	80004c2 <__udivmoddi4+0x2ca>
 80003be:	45a4      	cmp	ip, r4
 80003c0:	d97f      	bls.n	80004c2 <__udivmoddi4+0x2ca>
 80003c2:	3b02      	subs	r3, #2
 80003c4:	443c      	add	r4, r7
 80003c6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003ca:	eba4 040c 	sub.w	r4, r4, ip
 80003ce:	fba0 ec02 	umull	lr, ip, r0, r2
 80003d2:	4564      	cmp	r4, ip
 80003d4:	4673      	mov	r3, lr
 80003d6:	46e1      	mov	r9, ip
 80003d8:	d362      	bcc.n	80004a0 <__udivmoddi4+0x2a8>
 80003da:	d05f      	beq.n	800049c <__udivmoddi4+0x2a4>
 80003dc:	b15d      	cbz	r5, 80003f6 <__udivmoddi4+0x1fe>
 80003de:	ebb8 0203 	subs.w	r2, r8, r3
 80003e2:	eb64 0409 	sbc.w	r4, r4, r9
 80003e6:	fa04 f606 	lsl.w	r6, r4, r6
 80003ea:	fa22 f301 	lsr.w	r3, r2, r1
 80003ee:	431e      	orrs	r6, r3
 80003f0:	40cc      	lsrs	r4, r1
 80003f2:	e9c5 6400 	strd	r6, r4, [r5]
 80003f6:	2100      	movs	r1, #0
 80003f8:	e74f      	b.n	800029a <__udivmoddi4+0xa2>
 80003fa:	fbb1 fcf2 	udiv	ip, r1, r2
 80003fe:	0c01      	lsrs	r1, r0, #16
 8000400:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000404:	b280      	uxth	r0, r0
 8000406:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800040a:	463b      	mov	r3, r7
 800040c:	4638      	mov	r0, r7
 800040e:	463c      	mov	r4, r7
 8000410:	46b8      	mov	r8, r7
 8000412:	46be      	mov	lr, r7
 8000414:	2620      	movs	r6, #32
 8000416:	fbb1 f1f7 	udiv	r1, r1, r7
 800041a:	eba2 0208 	sub.w	r2, r2, r8
 800041e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000422:	e766      	b.n	80002f2 <__udivmoddi4+0xfa>
 8000424:	4601      	mov	r1, r0
 8000426:	e718      	b.n	800025a <__udivmoddi4+0x62>
 8000428:	4610      	mov	r0, r2
 800042a:	e72c      	b.n	8000286 <__udivmoddi4+0x8e>
 800042c:	f1c6 0220 	rsb	r2, r6, #32
 8000430:	fa2e f302 	lsr.w	r3, lr, r2
 8000434:	40b7      	lsls	r7, r6
 8000436:	40b1      	lsls	r1, r6
 8000438:	fa20 f202 	lsr.w	r2, r0, r2
 800043c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000440:	430a      	orrs	r2, r1
 8000442:	fbb3 f8fe 	udiv	r8, r3, lr
 8000446:	b2bc      	uxth	r4, r7
 8000448:	fb0e 3318 	mls	r3, lr, r8, r3
 800044c:	0c11      	lsrs	r1, r2, #16
 800044e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000452:	fb08 f904 	mul.w	r9, r8, r4
 8000456:	40b0      	lsls	r0, r6
 8000458:	4589      	cmp	r9, r1
 800045a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800045e:	b280      	uxth	r0, r0
 8000460:	d93e      	bls.n	80004e0 <__udivmoddi4+0x2e8>
 8000462:	1879      	adds	r1, r7, r1
 8000464:	f108 3cff 	add.w	ip, r8, #4294967295
 8000468:	d201      	bcs.n	800046e <__udivmoddi4+0x276>
 800046a:	4589      	cmp	r9, r1
 800046c:	d81f      	bhi.n	80004ae <__udivmoddi4+0x2b6>
 800046e:	eba1 0109 	sub.w	r1, r1, r9
 8000472:	fbb1 f9fe 	udiv	r9, r1, lr
 8000476:	fb09 f804 	mul.w	r8, r9, r4
 800047a:	fb0e 1119 	mls	r1, lr, r9, r1
 800047e:	b292      	uxth	r2, r2
 8000480:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000484:	4542      	cmp	r2, r8
 8000486:	d229      	bcs.n	80004dc <__udivmoddi4+0x2e4>
 8000488:	18ba      	adds	r2, r7, r2
 800048a:	f109 31ff 	add.w	r1, r9, #4294967295
 800048e:	d2c4      	bcs.n	800041a <__udivmoddi4+0x222>
 8000490:	4542      	cmp	r2, r8
 8000492:	d2c2      	bcs.n	800041a <__udivmoddi4+0x222>
 8000494:	f1a9 0102 	sub.w	r1, r9, #2
 8000498:	443a      	add	r2, r7
 800049a:	e7be      	b.n	800041a <__udivmoddi4+0x222>
 800049c:	45f0      	cmp	r8, lr
 800049e:	d29d      	bcs.n	80003dc <__udivmoddi4+0x1e4>
 80004a0:	ebbe 0302 	subs.w	r3, lr, r2
 80004a4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004a8:	3801      	subs	r0, #1
 80004aa:	46e1      	mov	r9, ip
 80004ac:	e796      	b.n	80003dc <__udivmoddi4+0x1e4>
 80004ae:	eba7 0909 	sub.w	r9, r7, r9
 80004b2:	4449      	add	r1, r9
 80004b4:	f1a8 0c02 	sub.w	ip, r8, #2
 80004b8:	fbb1 f9fe 	udiv	r9, r1, lr
 80004bc:	fb09 f804 	mul.w	r8, r9, r4
 80004c0:	e7db      	b.n	800047a <__udivmoddi4+0x282>
 80004c2:	4673      	mov	r3, lr
 80004c4:	e77f      	b.n	80003c6 <__udivmoddi4+0x1ce>
 80004c6:	4650      	mov	r0, sl
 80004c8:	e766      	b.n	8000398 <__udivmoddi4+0x1a0>
 80004ca:	4608      	mov	r0, r1
 80004cc:	e6fd      	b.n	80002ca <__udivmoddi4+0xd2>
 80004ce:	443b      	add	r3, r7
 80004d0:	3a02      	subs	r2, #2
 80004d2:	e733      	b.n	800033c <__udivmoddi4+0x144>
 80004d4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d8:	443b      	add	r3, r7
 80004da:	e71c      	b.n	8000316 <__udivmoddi4+0x11e>
 80004dc:	4649      	mov	r1, r9
 80004de:	e79c      	b.n	800041a <__udivmoddi4+0x222>
 80004e0:	eba1 0109 	sub.w	r1, r1, r9
 80004e4:	46c4      	mov	ip, r8
 80004e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004ea:	fb09 f804 	mul.w	r8, r9, r4
 80004ee:	e7c4      	b.n	800047a <__udivmoddi4+0x282>

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <HAL_TIM_IC_CaptureCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80004f4:	b480      	push	{r7}
 80004f6:	b083      	sub	sp, #12
 80004f8:	af00      	add	r7, sp, #0
 80004fa:	6078      	str	r0, [r7, #4]
	encoder = __HAL_TIM_GET_COUNTER(htim);
 80004fc:	687b      	ldr	r3, [r7, #4]
 80004fe:	681b      	ldr	r3, [r3, #0]
 8000500:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000502:	b21a      	sxth	r2, r3
 8000504:	4b03      	ldr	r3, [pc, #12]	@ (8000514 <HAL_TIM_IC_CaptureCallback+0x20>)
 8000506:	801a      	strh	r2, [r3, #0]
}
 8000508:	bf00      	nop
 800050a:	370c      	adds	r7, #12
 800050c:	46bd      	mov	sp, r7
 800050e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000512:	4770      	bx	lr
 8000514:	200005fe 	.word	0x200005fe

08000518 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	b082      	sub	sp, #8
 800051c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800051e:	f000 fd29 	bl	8000f74 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000522:	f000 f923 	bl	800076c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000526:	f000 faaf 	bl	8000a88 <MX_GPIO_Init>
  MX_TIM3_Init();
 800052a:	f000 fa59 	bl	80009e0 <MX_TIM3_Init>
  MX_USB_DEVICE_Init();
 800052e:	f007 fcc9 	bl	8007ec4 <MX_USB_DEVICE_Init>
  MX_TIM1_Init();
 8000532:	f000 f985 	bl	8000840 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Encoder_Start_IT(&htim3, TIM_CHANNEL_ALL);
 8000536:	213c      	movs	r1, #60	@ 0x3c
 8000538:	4882      	ldr	r0, [pc, #520]	@ (8000744 <main+0x22c>)
 800053a:	f003 f9e9 	bl	8003910 <HAL_TIM_Encoder_Start_IT>
	reportContainer.id = 0x01;
 800053e:	4b82      	ldr	r3, [pc, #520]	@ (8000748 <main+0x230>)
 8000540:	2201      	movs	r2, #1
 8000542:	701a      	strb	r2, [r3, #0]
	reportContainer.buttons = 0x55555555;
 8000544:	4b80      	ldr	r3, [pc, #512]	@ (8000748 <main+0x230>)
 8000546:	3301      	adds	r3, #1
 8000548:	2200      	movs	r2, #0
 800054a:	f042 0255 	orr.w	r2, r2, #85	@ 0x55
 800054e:	701a      	strb	r2, [r3, #0]
 8000550:	2200      	movs	r2, #0
 8000552:	f042 0255 	orr.w	r2, r2, #85	@ 0x55
 8000556:	705a      	strb	r2, [r3, #1]
 8000558:	2200      	movs	r2, #0
 800055a:	f042 0255 	orr.w	r2, r2, #85	@ 0x55
 800055e:	709a      	strb	r2, [r3, #2]
 8000560:	2200      	movs	r2, #0
 8000562:	f042 0255 	orr.w	r2, r2, #85	@ 0x55
 8000566:	70da      	strb	r2, [r3, #3]
 8000568:	2200      	movs	r2, #0
 800056a:	711a      	strb	r2, [r3, #4]
 800056c:	2200      	movs	r2, #0
 800056e:	715a      	strb	r2, [r3, #5]
 8000570:	2200      	movs	r2, #0
 8000572:	719a      	strb	r2, [r3, #6]
 8000574:	2200      	movs	r2, #0
 8000576:	71da      	strb	r2, [r3, #7]
	reportContainer.X = 0;
 8000578:	4b73      	ldr	r3, [pc, #460]	@ (8000748 <main+0x230>)
 800057a:	2200      	movs	r2, #0
 800057c:	725a      	strb	r2, [r3, #9]
 800057e:	2200      	movs	r2, #0
 8000580:	729a      	strb	r2, [r3, #10]
	reportContainer.Y = 0;
 8000582:	4b71      	ldr	r3, [pc, #452]	@ (8000748 <main+0x230>)
 8000584:	2200      	movs	r2, #0
 8000586:	72da      	strb	r2, [r3, #11]
 8000588:	2200      	movs	r2, #0
 800058a:	731a      	strb	r2, [r3, #12]
	reportContainer.Z = 0;
 800058c:	4b6e      	ldr	r3, [pc, #440]	@ (8000748 <main+0x230>)
 800058e:	2200      	movs	r2, #0
 8000590:	735a      	strb	r2, [r3, #13]
 8000592:	2200      	movs	r2, #0
 8000594:	739a      	strb	r2, [r3, #14]
	reportContainer.RX = 0;
 8000596:	4b6c      	ldr	r3, [pc, #432]	@ (8000748 <main+0x230>)
 8000598:	2200      	movs	r2, #0
 800059a:	73da      	strb	r2, [r3, #15]
 800059c:	2200      	movs	r2, #0
 800059e:	741a      	strb	r2, [r3, #16]
	reportContainer.RY = 0;
 80005a0:	4b69      	ldr	r3, [pc, #420]	@ (8000748 <main+0x230>)
 80005a2:	2200      	movs	r2, #0
 80005a4:	745a      	strb	r2, [r3, #17]
 80005a6:	2200      	movs	r2, #0
 80005a8:	749a      	strb	r2, [r3, #18]
	reportContainer.RZ = 0;
 80005aa:	4b67      	ldr	r3, [pc, #412]	@ (8000748 <main+0x230>)
 80005ac:	2200      	movs	r2, #0
 80005ae:	74da      	strb	r2, [r3, #19]
 80005b0:	2200      	movs	r2, #0
 80005b2:	751a      	strb	r2, [r3, #20]
	reportContainer.Dial = 0;
 80005b4:	4b64      	ldr	r3, [pc, #400]	@ (8000748 <main+0x230>)
 80005b6:	2200      	movs	r2, #0
 80005b8:	755a      	strb	r2, [r3, #21]
 80005ba:	2200      	movs	r2, #0
 80005bc:	759a      	strb	r2, [r3, #22]
	reportContainer.Slider = 0;
 80005be:	4b62      	ldr	r3, [pc, #392]	@ (8000748 <main+0x230>)
 80005c0:	2200      	movs	r2, #0
 80005c2:	75da      	strb	r2, [r3, #23]
 80005c4:	2200      	movs	r2, #0
 80005c6:	761a      	strb	r2, [r3, #24]

  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80005c8:	2100      	movs	r1, #0
 80005ca:	4860      	ldr	r0, [pc, #384]	@ (800074c <main+0x234>)
 80005cc:	f003 f832 	bl	8003634 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 80005d0:	2104      	movs	r1, #4
 80005d2:	485e      	ldr	r0, [pc, #376]	@ (800074c <main+0x234>)
 80005d4:	f003 f82e 	bl	8003634 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 80005d8:	2108      	movs	r1, #8
 80005da:	485c      	ldr	r0, [pc, #368]	@ (800074c <main+0x234>)
 80005dc:	f003 f82a 	bl	8003634 <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 80005e0:	2100      	movs	r1, #0
 80005e2:	485a      	ldr	r0, [pc, #360]	@ (800074c <main+0x234>)
 80005e4:	f004 f852 	bl	800468c <HAL_TIMEx_PWMN_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 80005e8:	2104      	movs	r1, #4
 80005ea:	4858      	ldr	r0, [pc, #352]	@ (800074c <main+0x234>)
 80005ec:	f004 f84e 	bl	800468c <HAL_TIMEx_PWMN_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_3);
 80005f0:	2108      	movs	r1, #8
 80005f2:	4856      	ldr	r0, [pc, #344]	@ (800074c <main+0x234>)
 80005f4:	f004 f84a 	bl	800468c <HAL_TIMEx_PWMN_Start>
  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0*htim1.Init.Period);
 80005f8:	4b54      	ldr	r3, [pc, #336]	@ (800074c <main+0x234>)
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	2200      	movs	r2, #0
 80005fe:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 0*htim1.Init.Period);
 8000600:	4b52      	ldr	r3, [pc, #328]	@ (800074c <main+0x234>)
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	2200      	movs	r2, #0
 8000606:	639a      	str	r2, [r3, #56]	@ 0x38
  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 0*htim1.Init.Period);
 8000608:	4b50      	ldr	r3, [pc, #320]	@ (800074c <main+0x234>)
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	2200      	movs	r2, #0
 800060e:	63da      	str	r2, [r3, #60]	@ 0x3c

  HAL_GPIO_WritePin(EN_GATE_GPIO_Port, EN_GATE_Pin, GPIO_PIN_SET);
 8000610:	2201      	movs	r2, #1
 8000612:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000616:	484e      	ldr	r0, [pc, #312]	@ (8000750 <main+0x238>)
 8000618:	f000 ff90 	bl	800153c <HAL_GPIO_WritePin>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  float ph = 0;
 800061c:	f04f 0300 	mov.w	r3, #0
 8000620:	607b      	str	r3, [r7, #4]
  float mag = 0.1;
 8000622:	4b4c      	ldr	r3, [pc, #304]	@ (8000754 <main+0x23c>)
 8000624:	603b      	str	r3, [r7, #0]
  mag = fabs(mag)<0.3f?fabs(mag): 0.3f;
 8000626:	edd7 7a00 	vldr	s15, [r7]
 800062a:	eef0 7ae7 	vabs.f32	s15, s15
 800062e:	ed9f 7a4a 	vldr	s14, [pc, #296]	@ 8000758 <main+0x240>
 8000632:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000636:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800063a:	d504      	bpl.n	8000646 <main+0x12e>
 800063c:	edd7 7a00 	vldr	s15, [r7]
 8000640:	eef0 7ae7 	vabs.f32	s15, s15
 8000644:	e001      	b.n	800064a <main+0x132>
 8000646:	eddf 7a44 	vldr	s15, [pc, #272]	@ 8000758 <main+0x240>
 800064a:	edc7 7a00 	vstr	s15, [r7]
  while (1)
  {
	reportContainer.X = encoder;
 800064e:	4b43      	ldr	r3, [pc, #268]	@ (800075c <main+0x244>)
 8000650:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000654:	4b3c      	ldr	r3, [pc, #240]	@ (8000748 <main+0x230>)
 8000656:	f8a3 2009 	strh.w	r2, [r3, #9]
//	reportContainer.RX = encoder;
//	reportContainer.RY = encoder;
//	reportContainer.RZ = encoder;
//	reportContainer.Dial = encoder;
//	reportContainer.Slider = encoder;
	USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, (uint8_t *)&reportContainer, 25);
 800065a:	2219      	movs	r2, #25
 800065c:	493a      	ldr	r1, [pc, #232]	@ (8000748 <main+0x230>)
 800065e:	4840      	ldr	r0, [pc, #256]	@ (8000760 <main+0x248>)
 8000660:	f005 ffa4 	bl	80065ac <USBD_CUSTOM_HID_SendReport>
	HAL_Delay(10);
 8000664:	200a      	movs	r0, #10
 8000666:	f000 fcc7 	bl	8000ff8 <HAL_Delay>
	//float tst = mag*sinf(ph);

	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, (uint32_t)((0.5f+mag*sinf(ph))*htim1.Init.Period));
 800066a:	ed97 0a01 	vldr	s0, [r7, #4]
 800066e:	f008 fbbd 	bl	8008dec <sinf>
 8000672:	eeb0 7a40 	vmov.f32	s14, s0
 8000676:	edd7 7a00 	vldr	s15, [r7]
 800067a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800067e:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8000682:	ee37 7a87 	vadd.f32	s14, s15, s14
 8000686:	4b31      	ldr	r3, [pc, #196]	@ (800074c <main+0x234>)
 8000688:	68db      	ldr	r3, [r3, #12]
 800068a:	ee07 3a90 	vmov	s15, r3
 800068e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000692:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000696:	4b2d      	ldr	r3, [pc, #180]	@ (800074c <main+0x234>)
 8000698:	681b      	ldr	r3, [r3, #0]
 800069a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800069e:	ee17 2a90 	vmov	r2, s15
 80006a2:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, (uint32_t)((0.5f+mag*sinf(ph+3.1415926f*2/3))*htim1.Init.Period));
 80006a4:	edd7 7a01 	vldr	s15, [r7, #4]
 80006a8:	ed9f 7a2e 	vldr	s14, [pc, #184]	@ 8000764 <main+0x24c>
 80006ac:	ee77 7a87 	vadd.f32	s15, s15, s14
 80006b0:	eeb0 0a67 	vmov.f32	s0, s15
 80006b4:	f008 fb9a 	bl	8008dec <sinf>
 80006b8:	eeb0 7a40 	vmov.f32	s14, s0
 80006bc:	edd7 7a00 	vldr	s15, [r7]
 80006c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80006c4:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80006c8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80006cc:	4b1f      	ldr	r3, [pc, #124]	@ (800074c <main+0x234>)
 80006ce:	68db      	ldr	r3, [r3, #12]
 80006d0:	ee07 3a90 	vmov	s15, r3
 80006d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80006d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80006dc:	4b1b      	ldr	r3, [pc, #108]	@ (800074c <main+0x234>)
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80006e4:	ee17 2a90 	vmov	r2, s15
 80006e8:	639a      	str	r2, [r3, #56]	@ 0x38
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, (uint32_t)((0.5f+mag*sinf(ph-3.1415926f*2/3))*htim1.Init.Period));
 80006ea:	edd7 7a01 	vldr	s15, [r7, #4]
 80006ee:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 8000764 <main+0x24c>
 80006f2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80006f6:	eeb0 0a67 	vmov.f32	s0, s15
 80006fa:	f008 fb77 	bl	8008dec <sinf>
 80006fe:	eeb0 7a40 	vmov.f32	s14, s0
 8000702:	edd7 7a00 	vldr	s15, [r7]
 8000706:	ee67 7a27 	vmul.f32	s15, s14, s15
 800070a:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800070e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8000712:	4b0e      	ldr	r3, [pc, #56]	@ (800074c <main+0x234>)
 8000714:	68db      	ldr	r3, [r3, #12]
 8000716:	ee07 3a90 	vmov	s15, r3
 800071a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800071e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000722:	4b0a      	ldr	r3, [pc, #40]	@ (800074c <main+0x234>)
 8000724:	681b      	ldr	r3, [r3, #0]
 8000726:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800072a:	ee17 2a90 	vmov	r2, s15
 800072e:	63da      	str	r2, [r3, #60]	@ 0x3c
	ph += 3.1415926e-2f;
 8000730:	edd7 7a01 	vldr	s15, [r7, #4]
 8000734:	ed9f 7a0c 	vldr	s14, [pc, #48]	@ 8000768 <main+0x250>
 8000738:	ee77 7a87 	vadd.f32	s15, s15, s14
 800073c:	edc7 7a01 	vstr	s15, [r7, #4]
  {
 8000740:	bf00      	nop
 8000742:	e784      	b.n	800064e <main+0x136>
 8000744:	2000059c 	.word	0x2000059c
 8000748:	200005e4 	.word	0x200005e4
 800074c:	20000554 	.word	0x20000554
 8000750:	40020400 	.word	0x40020400
 8000754:	3dcccccd 	.word	0x3dcccccd
 8000758:	3e99999a 	.word	0x3e99999a
 800075c:	200005fe 	.word	0x200005fe
 8000760:	20000650 	.word	0x20000650
 8000764:	40060a91 	.word	0x40060a91
 8000768:	3d00adfc 	.word	0x3d00adfc

0800076c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b094      	sub	sp, #80	@ 0x50
 8000770:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000772:	f107 0320 	add.w	r3, r7, #32
 8000776:	2230      	movs	r2, #48	@ 0x30
 8000778:	2100      	movs	r1, #0
 800077a:	4618      	mov	r0, r3
 800077c:	f009 f866 	bl	800984c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000780:	f107 030c 	add.w	r3, r7, #12
 8000784:	2200      	movs	r2, #0
 8000786:	601a      	str	r2, [r3, #0]
 8000788:	605a      	str	r2, [r3, #4]
 800078a:	609a      	str	r2, [r3, #8]
 800078c:	60da      	str	r2, [r3, #12]
 800078e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000790:	2300      	movs	r3, #0
 8000792:	60bb      	str	r3, [r7, #8]
 8000794:	4b28      	ldr	r3, [pc, #160]	@ (8000838 <SystemClock_Config+0xcc>)
 8000796:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000798:	4a27      	ldr	r2, [pc, #156]	@ (8000838 <SystemClock_Config+0xcc>)
 800079a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800079e:	6413      	str	r3, [r2, #64]	@ 0x40
 80007a0:	4b25      	ldr	r3, [pc, #148]	@ (8000838 <SystemClock_Config+0xcc>)
 80007a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007a4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80007a8:	60bb      	str	r3, [r7, #8]
 80007aa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007ac:	2300      	movs	r3, #0
 80007ae:	607b      	str	r3, [r7, #4]
 80007b0:	4b22      	ldr	r3, [pc, #136]	@ (800083c <SystemClock_Config+0xd0>)
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	4a21      	ldr	r2, [pc, #132]	@ (800083c <SystemClock_Config+0xd0>)
 80007b6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80007ba:	6013      	str	r3, [r2, #0]
 80007bc:	4b1f      	ldr	r3, [pc, #124]	@ (800083c <SystemClock_Config+0xd0>)
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80007c4:	607b      	str	r3, [r7, #4]
 80007c6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80007c8:	2301      	movs	r3, #1
 80007ca:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80007cc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80007d0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007d2:	2302      	movs	r3, #2
 80007d4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007d6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80007da:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80007dc:	2304      	movs	r3, #4
 80007de:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80007e0:	23a8      	movs	r3, #168	@ 0xa8
 80007e2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007e4:	2302      	movs	r3, #2
 80007e6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80007e8:	2307      	movs	r3, #7
 80007ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007ec:	f107 0320 	add.w	r3, r7, #32
 80007f0:	4618      	mov	r0, r3
 80007f2:	f002 f8f7 	bl	80029e4 <HAL_RCC_OscConfig>
 80007f6:	4603      	mov	r3, r0
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d001      	beq.n	8000800 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80007fc:	f000 f9a8 	bl	8000b50 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000800:	230f      	movs	r3, #15
 8000802:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000804:	2302      	movs	r3, #2
 8000806:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000808:	2300      	movs	r3, #0
 800080a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800080c:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000810:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000812:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000816:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000818:	f107 030c 	add.w	r3, r7, #12
 800081c:	2105      	movs	r1, #5
 800081e:	4618      	mov	r0, r3
 8000820:	f002 fb58 	bl	8002ed4 <HAL_RCC_ClockConfig>
 8000824:	4603      	mov	r3, r0
 8000826:	2b00      	cmp	r3, #0
 8000828:	d001      	beq.n	800082e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800082a:	f000 f991 	bl	8000b50 <Error_Handler>
  }
}
 800082e:	bf00      	nop
 8000830:	3750      	adds	r7, #80	@ 0x50
 8000832:	46bd      	mov	sp, r7
 8000834:	bd80      	pop	{r7, pc}
 8000836:	bf00      	nop
 8000838:	40023800 	.word	0x40023800
 800083c:	40007000 	.word	0x40007000

08000840 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
	static void MX_TIM1_Init(void)
	{
 8000840:	b580      	push	{r7, lr}
 8000842:	b096      	sub	sp, #88	@ 0x58
 8000844:	af00      	add	r7, sp, #0

	  /* USER CODE BEGIN TIM1_Init 0 */

	  /* USER CODE END TIM1_Init 0 */

	  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000846:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800084a:	2200      	movs	r2, #0
 800084c:	601a      	str	r2, [r3, #0]
 800084e:	605a      	str	r2, [r3, #4]
 8000850:	609a      	str	r2, [r3, #8]
 8000852:	60da      	str	r2, [r3, #12]
	  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000854:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000858:	2200      	movs	r2, #0
 800085a:	601a      	str	r2, [r3, #0]
 800085c:	605a      	str	r2, [r3, #4]
	  TIM_OC_InitTypeDef sConfigOC = {0};
 800085e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000862:	2200      	movs	r2, #0
 8000864:	601a      	str	r2, [r3, #0]
 8000866:	605a      	str	r2, [r3, #4]
 8000868:	609a      	str	r2, [r3, #8]
 800086a:	60da      	str	r2, [r3, #12]
 800086c:	611a      	str	r2, [r3, #16]
 800086e:	615a      	str	r2, [r3, #20]
 8000870:	619a      	str	r2, [r3, #24]
	  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000872:	1d3b      	adds	r3, r7, #4
 8000874:	2220      	movs	r2, #32
 8000876:	2100      	movs	r1, #0
 8000878:	4618      	mov	r0, r3
 800087a:	f008 ffe7 	bl	800984c <memset>

	  /* USER CODE BEGIN TIM1_Init 1 */

	  /* USER CODE END TIM1_Init 1 */
	  htim1.Instance = TIM1;
 800087e:	4b56      	ldr	r3, [pc, #344]	@ (80009d8 <MX_TIM1_Init+0x198>)
 8000880:	4a56      	ldr	r2, [pc, #344]	@ (80009dc <MX_TIM1_Init+0x19c>)
 8000882:	601a      	str	r2, [r3, #0]
	  htim1.Init.Prescaler = 0;
 8000884:	4b54      	ldr	r3, [pc, #336]	@ (80009d8 <MX_TIM1_Init+0x198>)
 8000886:	2200      	movs	r2, #0
 8000888:	605a      	str	r2, [r3, #4]
	  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED3;
 800088a:	4b53      	ldr	r3, [pc, #332]	@ (80009d8 <MX_TIM1_Init+0x198>)
 800088c:	2260      	movs	r2, #96	@ 0x60
 800088e:	609a      	str	r2, [r3, #8]
	  htim1.Init.Period = TIM_1_8_PERIOD_CLOCKS;
 8000890:	4b51      	ldr	r3, [pc, #324]	@ (80009d8 <MX_TIM1_Init+0x198>)
 8000892:	f640 52ac 	movw	r2, #3500	@ 0xdac
 8000896:	60da      	str	r2, [r3, #12]
	  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000898:	4b4f      	ldr	r3, [pc, #316]	@ (80009d8 <MX_TIM1_Init+0x198>)
 800089a:	2200      	movs	r2, #0
 800089c:	611a      	str	r2, [r3, #16]
	  htim1.Init.RepetitionCounter = TIM_1_8_RCR;
 800089e:	4b4e      	ldr	r3, [pc, #312]	@ (80009d8 <MX_TIM1_Init+0x198>)
 80008a0:	2202      	movs	r2, #2
 80008a2:	615a      	str	r2, [r3, #20]
	  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008a4:	4b4c      	ldr	r3, [pc, #304]	@ (80009d8 <MX_TIM1_Init+0x198>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	619a      	str	r2, [r3, #24]
	  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80008aa:	484b      	ldr	r0, [pc, #300]	@ (80009d8 <MX_TIM1_Init+0x198>)
 80008ac:	f002 fd50 	bl	8003350 <HAL_TIM_Base_Init>
 80008b0:	4603      	mov	r3, r0
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d001      	beq.n	80008ba <MX_TIM1_Init+0x7a>
	  {
		Error_Handler();
 80008b6:	f000 f94b 	bl	8000b50 <Error_Handler>
	  }
	  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008ba:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80008be:	64bb      	str	r3, [r7, #72]	@ 0x48
	  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80008c0:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80008c4:	4619      	mov	r1, r3
 80008c6:	4844      	ldr	r0, [pc, #272]	@ (80009d8 <MX_TIM1_Init+0x198>)
 80008c8:	f003 fade 	bl	8003e88 <HAL_TIM_ConfigClockSource>
 80008cc:	4603      	mov	r3, r0
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d001      	beq.n	80008d6 <MX_TIM1_Init+0x96>
	  {
		Error_Handler();
 80008d2:	f000 f93d 	bl	8000b50 <Error_Handler>
	  }
	  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80008d6:	4840      	ldr	r0, [pc, #256]	@ (80009d8 <MX_TIM1_Init+0x198>)
 80008d8:	f002 fe53 	bl	8003582 <HAL_TIM_PWM_Init>
 80008dc:	4603      	mov	r3, r0
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d001      	beq.n	80008e6 <MX_TIM1_Init+0xa6>
	  {
		Error_Handler();
 80008e2:	f000 f935 	bl	8000b50 <Error_Handler>
	  }
	  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 80008e6:	483c      	ldr	r0, [pc, #240]	@ (80009d8 <MX_TIM1_Init+0x198>)
 80008e8:	f002 fdf2 	bl	80034d0 <HAL_TIM_OC_Init>
 80008ec:	4603      	mov	r3, r0
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d001      	beq.n	80008f6 <MX_TIM1_Init+0xb6>
	  {
		Error_Handler();
 80008f2:	f000 f92d 	bl	8000b50 <Error_Handler>
	  }
	  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80008f6:	2320      	movs	r3, #32
 80008f8:	643b      	str	r3, [r7, #64]	@ 0x40
	  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008fa:	2300      	movs	r3, #0
 80008fc:	647b      	str	r3, [r7, #68]	@ 0x44
	  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80008fe:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000902:	4619      	mov	r1, r3
 8000904:	4834      	ldr	r0, [pc, #208]	@ (80009d8 <MX_TIM1_Init+0x198>)
 8000906:	f003 ff7b 	bl	8004800 <HAL_TIMEx_MasterConfigSynchronization>
 800090a:	4603      	mov	r3, r0
 800090c:	2b00      	cmp	r3, #0
 800090e:	d001      	beq.n	8000914 <MX_TIM1_Init+0xd4>
	  {
		Error_Handler();
 8000910:	f000 f91e 	bl	8000b50 <Error_Handler>
	  }
	  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 8000914:	2370      	movs	r3, #112	@ 0x70
 8000916:	627b      	str	r3, [r7, #36]	@ 0x24
	  sConfigOC.Pulse = 0;
 8000918:	2300      	movs	r3, #0
 800091a:	62bb      	str	r3, [r7, #40]	@ 0x28
	  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800091c:	2300      	movs	r3, #0
 800091e:	62fb      	str	r3, [r7, #44]	@ 0x2c
	  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000920:	2300      	movs	r3, #0
 8000922:	633b      	str	r3, [r7, #48]	@ 0x30
	  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000924:	2300      	movs	r3, #0
 8000926:	637b      	str	r3, [r7, #52]	@ 0x34
	  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000928:	2300      	movs	r3, #0
 800092a:	63bb      	str	r3, [r7, #56]	@ 0x38
	  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800092c:	2300      	movs	r3, #0
 800092e:	63fb      	str	r3, [r7, #60]	@ 0x3c
	  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000930:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000934:	2200      	movs	r2, #0
 8000936:	4619      	mov	r1, r3
 8000938:	4827      	ldr	r0, [pc, #156]	@ (80009d8 <MX_TIM1_Init+0x198>)
 800093a:	f003 f9e3 	bl	8003d04 <HAL_TIM_PWM_ConfigChannel>
 800093e:	4603      	mov	r3, r0
 8000940:	2b00      	cmp	r3, #0
 8000942:	d001      	beq.n	8000948 <MX_TIM1_Init+0x108>
	  {
		Error_Handler();
 8000944:	f000 f904 	bl	8000b50 <Error_Handler>
	  }
	  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000948:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800094c:	2204      	movs	r2, #4
 800094e:	4619      	mov	r1, r3
 8000950:	4821      	ldr	r0, [pc, #132]	@ (80009d8 <MX_TIM1_Init+0x198>)
 8000952:	f003 f9d7 	bl	8003d04 <HAL_TIM_PWM_ConfigChannel>
 8000956:	4603      	mov	r3, r0
 8000958:	2b00      	cmp	r3, #0
 800095a:	d001      	beq.n	8000960 <MX_TIM1_Init+0x120>
	  {
		Error_Handler();
 800095c:	f000 f8f8 	bl	8000b50 <Error_Handler>
	  }
	  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000960:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000964:	2208      	movs	r2, #8
 8000966:	4619      	mov	r1, r3
 8000968:	481b      	ldr	r0, [pc, #108]	@ (80009d8 <MX_TIM1_Init+0x198>)
 800096a:	f003 f9cb 	bl	8003d04 <HAL_TIM_PWM_ConfigChannel>
 800096e:	4603      	mov	r3, r0
 8000970:	2b00      	cmp	r3, #0
 8000972:	d001      	beq.n	8000978 <MX_TIM1_Init+0x138>
	  {
		Error_Handler();
 8000974:	f000 f8ec 	bl	8000b50 <Error_Handler>
	  }
	  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8000978:	2300      	movs	r3, #0
 800097a:	627b      	str	r3, [r7, #36]	@ 0x24
	  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800097c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000980:	220c      	movs	r2, #12
 8000982:	4619      	mov	r1, r3
 8000984:	4814      	ldr	r0, [pc, #80]	@ (80009d8 <MX_TIM1_Init+0x198>)
 8000986:	f003 f961 	bl	8003c4c <HAL_TIM_OC_ConfigChannel>
 800098a:	4603      	mov	r3, r0
 800098c:	2b00      	cmp	r3, #0
 800098e:	d001      	beq.n	8000994 <MX_TIM1_Init+0x154>
	  {
		Error_Handler();
 8000990:	f000 f8de 	bl	8000b50 <Error_Handler>
	  }
	  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_ENABLE;
 8000994:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000998:	607b      	str	r3, [r7, #4]
	  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_ENABLE;
 800099a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800099e:	60bb      	str	r3, [r7, #8]
	  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80009a0:	2300      	movs	r3, #0
 80009a2:	60fb      	str	r3, [r7, #12]
	  sBreakDeadTimeConfig.DeadTime = TIM_1_8_DEADTIME_CLOCKS;
 80009a4:	2314      	movs	r3, #20
 80009a6:	613b      	str	r3, [r7, #16]
	  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80009a8:	2300      	movs	r3, #0
 80009aa:	617b      	str	r3, [r7, #20]
	  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80009ac:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80009b0:	61bb      	str	r3, [r7, #24]
	  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80009b2:	2300      	movs	r3, #0
 80009b4:	623b      	str	r3, [r7, #32]
	  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80009b6:	1d3b      	adds	r3, r7, #4
 80009b8:	4619      	mov	r1, r3
 80009ba:	4807      	ldr	r0, [pc, #28]	@ (80009d8 <MX_TIM1_Init+0x198>)
 80009bc:	f003 ff9c 	bl	80048f8 <HAL_TIMEx_ConfigBreakDeadTime>
 80009c0:	4603      	mov	r3, r0
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d001      	beq.n	80009ca <MX_TIM1_Init+0x18a>
	  {
		Error_Handler();
 80009c6:	f000 f8c3 	bl	8000b50 <Error_Handler>
	  }
	  /* USER CODE BEGIN TIM1_Init 2 */

	  /* USER CODE END TIM1_Init 2 */
	  HAL_TIM_MspPostInit(&htim1);
 80009ca:	4803      	ldr	r0, [pc, #12]	@ (80009d8 <MX_TIM1_Init+0x198>)
 80009cc:	f000 f966 	bl	8000c9c <HAL_TIM_MspPostInit>

	}
 80009d0:	bf00      	nop
 80009d2:	3758      	adds	r7, #88	@ 0x58
 80009d4:	46bd      	mov	sp, r7
 80009d6:	bd80      	pop	{r7, pc}
 80009d8:	20000554 	.word	0x20000554
 80009dc:	40010000 	.word	0x40010000

080009e0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b08c      	sub	sp, #48	@ 0x30
 80009e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80009e6:	f107 030c 	add.w	r3, r7, #12
 80009ea:	2224      	movs	r2, #36	@ 0x24
 80009ec:	2100      	movs	r1, #0
 80009ee:	4618      	mov	r0, r3
 80009f0:	f008 ff2c 	bl	800984c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009f4:	1d3b      	adds	r3, r7, #4
 80009f6:	2200      	movs	r2, #0
 80009f8:	601a      	str	r2, [r3, #0]
 80009fa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80009fc:	4b20      	ldr	r3, [pc, #128]	@ (8000a80 <MX_TIM3_Init+0xa0>)
 80009fe:	4a21      	ldr	r2, [pc, #132]	@ (8000a84 <MX_TIM3_Init+0xa4>)
 8000a00:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000a02:	4b1f      	ldr	r3, [pc, #124]	@ (8000a80 <MX_TIM3_Init+0xa0>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a08:	4b1d      	ldr	r3, [pc, #116]	@ (8000a80 <MX_TIM3_Init+0xa0>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000a0e:	4b1c      	ldr	r3, [pc, #112]	@ (8000a80 <MX_TIM3_Init+0xa0>)
 8000a10:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000a14:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a16:	4b1a      	ldr	r3, [pc, #104]	@ (8000a80 <MX_TIM3_Init+0xa0>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a1c:	4b18      	ldr	r3, [pc, #96]	@ (8000a80 <MX_TIM3_Init+0xa0>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000a22:	2303      	movs	r3, #3
 8000a24:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8000a26:	2302      	movs	r3, #2
 8000a28:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000a2a:	2301      	movs	r3, #1
 8000a2c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000a32:	2300      	movs	r3, #0
 8000a34:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 8000a36:	2302      	movs	r3, #2
 8000a38:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000a3a:	2301      	movs	r3, #1
 8000a3c:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8000a42:	2300      	movs	r3, #0
 8000a44:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8000a46:	f107 030c 	add.w	r3, r7, #12
 8000a4a:	4619      	mov	r1, r3
 8000a4c:	480c      	ldr	r0, [pc, #48]	@ (8000a80 <MX_TIM3_Init+0xa0>)
 8000a4e:	f002 feb9 	bl	80037c4 <HAL_TIM_Encoder_Init>
 8000a52:	4603      	mov	r3, r0
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d001      	beq.n	8000a5c <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8000a58:	f000 f87a 	bl	8000b50 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a60:	2300      	movs	r3, #0
 8000a62:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000a64:	1d3b      	adds	r3, r7, #4
 8000a66:	4619      	mov	r1, r3
 8000a68:	4805      	ldr	r0, [pc, #20]	@ (8000a80 <MX_TIM3_Init+0xa0>)
 8000a6a:	f003 fec9 	bl	8004800 <HAL_TIMEx_MasterConfigSynchronization>
 8000a6e:	4603      	mov	r3, r0
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d001      	beq.n	8000a78 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8000a74:	f000 f86c 	bl	8000b50 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000a78:	bf00      	nop
 8000a7a:	3730      	adds	r7, #48	@ 0x30
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	bd80      	pop	{r7, pc}
 8000a80:	2000059c 	.word	0x2000059c
 8000a84:	40000400 	.word	0x40000400

08000a88 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b088      	sub	sp, #32
 8000a8c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a8e:	f107 030c 	add.w	r3, r7, #12
 8000a92:	2200      	movs	r2, #0
 8000a94:	601a      	str	r2, [r3, #0]
 8000a96:	605a      	str	r2, [r3, #4]
 8000a98:	609a      	str	r2, [r3, #8]
 8000a9a:	60da      	str	r2, [r3, #12]
 8000a9c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	60bb      	str	r3, [r7, #8]
 8000aa2:	4b20      	ldr	r3, [pc, #128]	@ (8000b24 <MX_GPIO_Init+0x9c>)
 8000aa4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aa6:	4a1f      	ldr	r2, [pc, #124]	@ (8000b24 <MX_GPIO_Init+0x9c>)
 8000aa8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000aac:	6313      	str	r3, [r2, #48]	@ 0x30
 8000aae:	4b1d      	ldr	r3, [pc, #116]	@ (8000b24 <MX_GPIO_Init+0x9c>)
 8000ab0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ab2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000ab6:	60bb      	str	r3, [r7, #8]
 8000ab8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000aba:	2300      	movs	r3, #0
 8000abc:	607b      	str	r3, [r7, #4]
 8000abe:	4b19      	ldr	r3, [pc, #100]	@ (8000b24 <MX_GPIO_Init+0x9c>)
 8000ac0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ac2:	4a18      	ldr	r2, [pc, #96]	@ (8000b24 <MX_GPIO_Init+0x9c>)
 8000ac4:	f043 0302 	orr.w	r3, r3, #2
 8000ac8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000aca:	4b16      	ldr	r3, [pc, #88]	@ (8000b24 <MX_GPIO_Init+0x9c>)
 8000acc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ace:	f003 0302 	and.w	r3, r3, #2
 8000ad2:	607b      	str	r3, [r7, #4]
 8000ad4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	603b      	str	r3, [r7, #0]
 8000ada:	4b12      	ldr	r3, [pc, #72]	@ (8000b24 <MX_GPIO_Init+0x9c>)
 8000adc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ade:	4a11      	ldr	r2, [pc, #68]	@ (8000b24 <MX_GPIO_Init+0x9c>)
 8000ae0:	f043 0301 	orr.w	r3, r3, #1
 8000ae4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ae6:	4b0f      	ldr	r3, [pc, #60]	@ (8000b24 <MX_GPIO_Init+0x9c>)
 8000ae8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aea:	f003 0301 	and.w	r3, r3, #1
 8000aee:	603b      	str	r3, [r7, #0]
 8000af0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(EN_GATE_GPIO_Port, EN_GATE_Pin, GPIO_PIN_RESET);
 8000af2:	2200      	movs	r2, #0
 8000af4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000af8:	480b      	ldr	r0, [pc, #44]	@ (8000b28 <MX_GPIO_Init+0xa0>)
 8000afa:	f000 fd1f 	bl	800153c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : EN_GATE_Pin */
  GPIO_InitStruct.Pin = EN_GATE_Pin;
 8000afe:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000b02:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b04:	2301      	movs	r3, #1
 8000b06:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(EN_GATE_GPIO_Port, &GPIO_InitStruct);
 8000b10:	f107 030c 	add.w	r3, r7, #12
 8000b14:	4619      	mov	r1, r3
 8000b16:	4804      	ldr	r0, [pc, #16]	@ (8000b28 <MX_GPIO_Init+0xa0>)
 8000b18:	f000 fb74 	bl	8001204 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000b1c:	bf00      	nop
 8000b1e:	3720      	adds	r7, #32
 8000b20:	46bd      	mov	sp, r7
 8000b22:	bd80      	pop	{r7, pc}
 8000b24:	40023800 	.word	0x40023800
 8000b28:	40020400 	.word	0x40020400

08000b2c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b082      	sub	sp, #8
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM14)
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	4a04      	ldr	r2, [pc, #16]	@ (8000b4c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000b3a:	4293      	cmp	r3, r2
 8000b3c:	d101      	bne.n	8000b42 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8000b3e:	f000 fa3b 	bl	8000fb8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000b42:	bf00      	nop
 8000b44:	3708      	adds	r7, #8
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bd80      	pop	{r7, pc}
 8000b4a:	bf00      	nop
 8000b4c:	40002000 	.word	0x40002000

08000b50 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b50:	b480      	push	{r7}
 8000b52:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b54:	b672      	cpsid	i
}
 8000b56:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b58:	bf00      	nop
 8000b5a:	e7fd      	b.n	8000b58 <Error_Handler+0x8>

08000b5c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	b083      	sub	sp, #12
 8000b60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b62:	2300      	movs	r3, #0
 8000b64:	607b      	str	r3, [r7, #4]
 8000b66:	4b10      	ldr	r3, [pc, #64]	@ (8000ba8 <HAL_MspInit+0x4c>)
 8000b68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b6a:	4a0f      	ldr	r2, [pc, #60]	@ (8000ba8 <HAL_MspInit+0x4c>)
 8000b6c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000b70:	6453      	str	r3, [r2, #68]	@ 0x44
 8000b72:	4b0d      	ldr	r3, [pc, #52]	@ (8000ba8 <HAL_MspInit+0x4c>)
 8000b74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b76:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000b7a:	607b      	str	r3, [r7, #4]
 8000b7c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b7e:	2300      	movs	r3, #0
 8000b80:	603b      	str	r3, [r7, #0]
 8000b82:	4b09      	ldr	r3, [pc, #36]	@ (8000ba8 <HAL_MspInit+0x4c>)
 8000b84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b86:	4a08      	ldr	r2, [pc, #32]	@ (8000ba8 <HAL_MspInit+0x4c>)
 8000b88:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b8c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b8e:	4b06      	ldr	r3, [pc, #24]	@ (8000ba8 <HAL_MspInit+0x4c>)
 8000b90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b92:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b96:	603b      	str	r3, [r7, #0]
 8000b98:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b9a:	bf00      	nop
 8000b9c:	370c      	adds	r7, #12
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop
 8000ba8:	40023800 	.word	0x40023800

08000bac <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b084      	sub	sp, #16
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	4a0e      	ldr	r2, [pc, #56]	@ (8000bf4 <HAL_TIM_Base_MspInit+0x48>)
 8000bba:	4293      	cmp	r3, r2
 8000bbc:	d115      	bne.n	8000bea <HAL_TIM_Base_MspInit+0x3e>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	60fb      	str	r3, [r7, #12]
 8000bc2:	4b0d      	ldr	r3, [pc, #52]	@ (8000bf8 <HAL_TIM_Base_MspInit+0x4c>)
 8000bc4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000bc6:	4a0c      	ldr	r2, [pc, #48]	@ (8000bf8 <HAL_TIM_Base_MspInit+0x4c>)
 8000bc8:	f043 0301 	orr.w	r3, r3, #1
 8000bcc:	6453      	str	r3, [r2, #68]	@ 0x44
 8000bce:	4b0a      	ldr	r3, [pc, #40]	@ (8000bf8 <HAL_TIM_Base_MspInit+0x4c>)
 8000bd0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000bd2:	f003 0301 	and.w	r3, r3, #1
 8000bd6:	60fb      	str	r3, [r7, #12]
 8000bd8:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8000bda:	2200      	movs	r2, #0
 8000bdc:	2100      	movs	r1, #0
 8000bde:	2019      	movs	r0, #25
 8000be0:	f000 fae6 	bl	80011b0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000be4:	2019      	movs	r0, #25
 8000be6:	f000 faff 	bl	80011e8 <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM1_MspInit 1 */

  }

}
 8000bea:	bf00      	nop
 8000bec:	3710      	adds	r7, #16
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	bd80      	pop	{r7, pc}
 8000bf2:	bf00      	nop
 8000bf4:	40010000 	.word	0x40010000
 8000bf8:	40023800 	.word	0x40023800

08000bfc <HAL_TIM_Encoder_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_encoder: TIM_Encoder handle pointer
  * @retval None
  */
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b08a      	sub	sp, #40	@ 0x28
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c04:	f107 0314 	add.w	r3, r7, #20
 8000c08:	2200      	movs	r2, #0
 8000c0a:	601a      	str	r2, [r3, #0]
 8000c0c:	605a      	str	r2, [r3, #4]
 8000c0e:	609a      	str	r2, [r3, #8]
 8000c10:	60da      	str	r2, [r3, #12]
 8000c12:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	4a1d      	ldr	r2, [pc, #116]	@ (8000c90 <HAL_TIM_Encoder_MspInit+0x94>)
 8000c1a:	4293      	cmp	r3, r2
 8000c1c:	d133      	bne.n	8000c86 <HAL_TIM_Encoder_MspInit+0x8a>
  {
    /* USER CODE BEGIN TIM3_MspInit 0 */

    /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000c1e:	2300      	movs	r3, #0
 8000c20:	613b      	str	r3, [r7, #16]
 8000c22:	4b1c      	ldr	r3, [pc, #112]	@ (8000c94 <HAL_TIM_Encoder_MspInit+0x98>)
 8000c24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c26:	4a1b      	ldr	r2, [pc, #108]	@ (8000c94 <HAL_TIM_Encoder_MspInit+0x98>)
 8000c28:	f043 0302 	orr.w	r3, r3, #2
 8000c2c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c2e:	4b19      	ldr	r3, [pc, #100]	@ (8000c94 <HAL_TIM_Encoder_MspInit+0x98>)
 8000c30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c32:	f003 0302 	and.w	r3, r3, #2
 8000c36:	613b      	str	r3, [r7, #16]
 8000c38:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	60fb      	str	r3, [r7, #12]
 8000c3e:	4b15      	ldr	r3, [pc, #84]	@ (8000c94 <HAL_TIM_Encoder_MspInit+0x98>)
 8000c40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c42:	4a14      	ldr	r2, [pc, #80]	@ (8000c94 <HAL_TIM_Encoder_MspInit+0x98>)
 8000c44:	f043 0302 	orr.w	r3, r3, #2
 8000c48:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c4a:	4b12      	ldr	r3, [pc, #72]	@ (8000c94 <HAL_TIM_Encoder_MspInit+0x98>)
 8000c4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c4e:	f003 0302 	and.w	r3, r3, #2
 8000c52:	60fb      	str	r3, [r7, #12]
 8000c54:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000c56:	2330      	movs	r3, #48	@ 0x30
 8000c58:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c5a:	2302      	movs	r3, #2
 8000c5c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c62:	2300      	movs	r3, #0
 8000c64:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000c66:	2302      	movs	r3, #2
 8000c68:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c6a:	f107 0314 	add.w	r3, r7, #20
 8000c6e:	4619      	mov	r1, r3
 8000c70:	4809      	ldr	r0, [pc, #36]	@ (8000c98 <HAL_TIM_Encoder_MspInit+0x9c>)
 8000c72:	f000 fac7 	bl	8001204 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000c76:	2200      	movs	r2, #0
 8000c78:	2100      	movs	r1, #0
 8000c7a:	201d      	movs	r0, #29
 8000c7c:	f000 fa98 	bl	80011b0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000c80:	201d      	movs	r0, #29
 8000c82:	f000 fab1 	bl	80011e8 <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM3_MspInit 1 */

  }

}
 8000c86:	bf00      	nop
 8000c88:	3728      	adds	r7, #40	@ 0x28
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	bd80      	pop	{r7, pc}
 8000c8e:	bf00      	nop
 8000c90:	40000400 	.word	0x40000400
 8000c94:	40023800 	.word	0x40023800
 8000c98:	40020400 	.word	0x40020400

08000c9c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b08a      	sub	sp, #40	@ 0x28
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ca4:	f107 0314 	add.w	r3, r7, #20
 8000ca8:	2200      	movs	r2, #0
 8000caa:	601a      	str	r2, [r3, #0]
 8000cac:	605a      	str	r2, [r3, #4]
 8000cae:	609a      	str	r2, [r3, #8]
 8000cb0:	60da      	str	r2, [r3, #12]
 8000cb2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	4a22      	ldr	r2, [pc, #136]	@ (8000d44 <HAL_TIM_MspPostInit+0xa8>)
 8000cba:	4293      	cmp	r3, r2
 8000cbc:	d13d      	bne.n	8000d3a <HAL_TIM_MspPostInit+0x9e>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	613b      	str	r3, [r7, #16]
 8000cc2:	4b21      	ldr	r3, [pc, #132]	@ (8000d48 <HAL_TIM_MspPostInit+0xac>)
 8000cc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cc6:	4a20      	ldr	r2, [pc, #128]	@ (8000d48 <HAL_TIM_MspPostInit+0xac>)
 8000cc8:	f043 0302 	orr.w	r3, r3, #2
 8000ccc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cce:	4b1e      	ldr	r3, [pc, #120]	@ (8000d48 <HAL_TIM_MspPostInit+0xac>)
 8000cd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cd2:	f003 0302 	and.w	r3, r3, #2
 8000cd6:	613b      	str	r3, [r7, #16]
 8000cd8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cda:	2300      	movs	r3, #0
 8000cdc:	60fb      	str	r3, [r7, #12]
 8000cde:	4b1a      	ldr	r3, [pc, #104]	@ (8000d48 <HAL_TIM_MspPostInit+0xac>)
 8000ce0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ce2:	4a19      	ldr	r2, [pc, #100]	@ (8000d48 <HAL_TIM_MspPostInit+0xac>)
 8000ce4:	f043 0301 	orr.w	r3, r3, #1
 8000ce8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cea:	4b17      	ldr	r3, [pc, #92]	@ (8000d48 <HAL_TIM_MspPostInit+0xac>)
 8000cec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cee:	f003 0301 	and.w	r3, r3, #1
 8000cf2:	60fb      	str	r3, [r7, #12]
 8000cf4:	68fb      	ldr	r3, [r7, #12]
    PB15     ------> TIM1_CH3N
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = M0_AL_Pin|M0_BL_Pin|M0_CL_Pin;
 8000cf6:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8000cfa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cfc:	2302      	movs	r3, #2
 8000cfe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d00:	2300      	movs	r3, #0
 8000d02:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d04:	2300      	movs	r3, #0
 8000d06:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000d08:	2301      	movs	r3, #1
 8000d0a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d0c:	f107 0314 	add.w	r3, r7, #20
 8000d10:	4619      	mov	r1, r3
 8000d12:	480e      	ldr	r0, [pc, #56]	@ (8000d4c <HAL_TIM_MspPostInit+0xb0>)
 8000d14:	f000 fa76 	bl	8001204 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = M0_AH_Pin|M0_BH_Pin|M0_CH_Pin;
 8000d18:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 8000d1c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d1e:	2302      	movs	r3, #2
 8000d20:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d22:	2300      	movs	r3, #0
 8000d24:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d26:	2300      	movs	r3, #0
 8000d28:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000d2a:	2301      	movs	r3, #1
 8000d2c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d2e:	f107 0314 	add.w	r3, r7, #20
 8000d32:	4619      	mov	r1, r3
 8000d34:	4806      	ldr	r0, [pc, #24]	@ (8000d50 <HAL_TIM_MspPostInit+0xb4>)
 8000d36:	f000 fa65 	bl	8001204 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM1_MspPostInit 1 */

    /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000d3a:	bf00      	nop
 8000d3c:	3728      	adds	r7, #40	@ 0x28
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	bd80      	pop	{r7, pc}
 8000d42:	bf00      	nop
 8000d44:	40010000 	.word	0x40010000
 8000d48:	40023800 	.word	0x40023800
 8000d4c:	40020400 	.word	0x40020400
 8000d50:	40020000 	.word	0x40020000

08000d54 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b08e      	sub	sp, #56	@ 0x38
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000d60:	2300      	movs	r3, #0
 8000d62:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM14 clock */
  __HAL_RCC_TIM14_CLK_ENABLE();
 8000d64:	2300      	movs	r3, #0
 8000d66:	60fb      	str	r3, [r7, #12]
 8000d68:	4b33      	ldr	r3, [pc, #204]	@ (8000e38 <HAL_InitTick+0xe4>)
 8000d6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d6c:	4a32      	ldr	r2, [pc, #200]	@ (8000e38 <HAL_InitTick+0xe4>)
 8000d6e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000d72:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d74:	4b30      	ldr	r3, [pc, #192]	@ (8000e38 <HAL_InitTick+0xe4>)
 8000d76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d78:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000d7c:	60fb      	str	r3, [r7, #12]
 8000d7e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000d80:	f107 0210 	add.w	r2, r7, #16
 8000d84:	f107 0314 	add.w	r3, r7, #20
 8000d88:	4611      	mov	r1, r2
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	f002 faae 	bl	80032ec <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000d90:	6a3b      	ldr	r3, [r7, #32]
 8000d92:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM14 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000d94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d103      	bne.n	8000da2 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000d9a:	f002 fa93 	bl	80032c4 <HAL_RCC_GetPCLK1Freq>
 8000d9e:	6378      	str	r0, [r7, #52]	@ 0x34
 8000da0:	e004      	b.n	8000dac <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000da2:	f002 fa8f 	bl	80032c4 <HAL_RCC_GetPCLK1Freq>
 8000da6:	4603      	mov	r3, r0
 8000da8:	005b      	lsls	r3, r3, #1
 8000daa:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM14 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000dac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000dae:	4a23      	ldr	r2, [pc, #140]	@ (8000e3c <HAL_InitTick+0xe8>)
 8000db0:	fba2 2303 	umull	r2, r3, r2, r3
 8000db4:	0c9b      	lsrs	r3, r3, #18
 8000db6:	3b01      	subs	r3, #1
 8000db8:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM14 */
  htim14.Instance = TIM14;
 8000dba:	4b21      	ldr	r3, [pc, #132]	@ (8000e40 <HAL_InitTick+0xec>)
 8000dbc:	4a21      	ldr	r2, [pc, #132]	@ (8000e44 <HAL_InitTick+0xf0>)
 8000dbe:	601a      	str	r2, [r3, #0]
   * Period = [(TIM14CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim14.Init.Period = (1000000U / 1000U) - 1U;
 8000dc0:	4b1f      	ldr	r3, [pc, #124]	@ (8000e40 <HAL_InitTick+0xec>)
 8000dc2:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000dc6:	60da      	str	r2, [r3, #12]
  htim14.Init.Prescaler = uwPrescalerValue;
 8000dc8:	4a1d      	ldr	r2, [pc, #116]	@ (8000e40 <HAL_InitTick+0xec>)
 8000dca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000dcc:	6053      	str	r3, [r2, #4]
  htim14.Init.ClockDivision = 0;
 8000dce:	4b1c      	ldr	r3, [pc, #112]	@ (8000e40 <HAL_InitTick+0xec>)
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	611a      	str	r2, [r3, #16]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dd4:	4b1a      	ldr	r3, [pc, #104]	@ (8000e40 <HAL_InitTick+0xec>)
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	609a      	str	r2, [r3, #8]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000dda:	4b19      	ldr	r3, [pc, #100]	@ (8000e40 <HAL_InitTick+0xec>)
 8000ddc:	2200      	movs	r2, #0
 8000dde:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim14);
 8000de0:	4817      	ldr	r0, [pc, #92]	@ (8000e40 <HAL_InitTick+0xec>)
 8000de2:	f002 fab5 	bl	8003350 <HAL_TIM_Base_Init>
 8000de6:	4603      	mov	r3, r0
 8000de8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8000dec:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d11b      	bne.n	8000e2c <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim14);
 8000df4:	4812      	ldr	r0, [pc, #72]	@ (8000e40 <HAL_InitTick+0xec>)
 8000df6:	f002 fafb 	bl	80033f0 <HAL_TIM_Base_Start_IT>
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8000e00:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d111      	bne.n	8000e2c <HAL_InitTick+0xd8>
    {
    /* Enable the TIM14 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8000e08:	202d      	movs	r0, #45	@ 0x2d
 8000e0a:	f000 f9ed 	bl	80011e8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	2b0f      	cmp	r3, #15
 8000e12:	d808      	bhi.n	8000e26 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, TickPriority, 0U);
 8000e14:	2200      	movs	r2, #0
 8000e16:	6879      	ldr	r1, [r7, #4]
 8000e18:	202d      	movs	r0, #45	@ 0x2d
 8000e1a:	f000 f9c9 	bl	80011b0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000e1e:	4a0a      	ldr	r2, [pc, #40]	@ (8000e48 <HAL_InitTick+0xf4>)
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	6013      	str	r3, [r2, #0]
 8000e24:	e002      	b.n	8000e2c <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000e26:	2301      	movs	r3, #1
 8000e28:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000e2c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8000e30:	4618      	mov	r0, r3
 8000e32:	3738      	adds	r7, #56	@ 0x38
 8000e34:	46bd      	mov	sp, r7
 8000e36:	bd80      	pop	{r7, pc}
 8000e38:	40023800 	.word	0x40023800
 8000e3c:	431bde83 	.word	0x431bde83
 8000e40:	20000600 	.word	0x20000600
 8000e44:	40002000 	.word	0x40002000
 8000e48:	20000004 	.word	0x20000004

08000e4c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000e50:	bf00      	nop
 8000e52:	e7fd      	b.n	8000e50 <NMI_Handler+0x4>

08000e54 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e54:	b480      	push	{r7}
 8000e56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e58:	bf00      	nop
 8000e5a:	e7fd      	b.n	8000e58 <HardFault_Handler+0x4>

08000e5c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e60:	bf00      	nop
 8000e62:	e7fd      	b.n	8000e60 <MemManage_Handler+0x4>

08000e64 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e64:	b480      	push	{r7}
 8000e66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e68:	bf00      	nop
 8000e6a:	e7fd      	b.n	8000e68 <BusFault_Handler+0x4>

08000e6c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e70:	bf00      	nop
 8000e72:	e7fd      	b.n	8000e70 <UsageFault_Handler+0x4>

08000e74 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e74:	b480      	push	{r7}
 8000e76:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e78:	bf00      	nop
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e80:	4770      	bx	lr

08000e82 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e82:	b480      	push	{r7}
 8000e84:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e86:	bf00      	nop
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8e:	4770      	bx	lr

08000e90 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e90:	b480      	push	{r7}
 8000e92:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e94:	bf00      	nop
 8000e96:	46bd      	mov	sp, r7
 8000e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9c:	4770      	bx	lr

08000e9e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e9e:	b480      	push	{r7}
 8000ea0:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ea2:	bf00      	nop
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eaa:	4770      	bx	lr

08000eac <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000eb0:	4802      	ldr	r0, [pc, #8]	@ (8000ebc <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000eb2:	f002 fddb 	bl	8003a6c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000eb6:	bf00      	nop
 8000eb8:	bd80      	pop	{r7, pc}
 8000eba:	bf00      	nop
 8000ebc:	20000554 	.word	0x20000554

08000ec0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000ec4:	4802      	ldr	r0, [pc, #8]	@ (8000ed0 <TIM3_IRQHandler+0x10>)
 8000ec6:	f002 fdd1 	bl	8003a6c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000eca:	bf00      	nop
 8000ecc:	bd80      	pop	{r7, pc}
 8000ece:	bf00      	nop
 8000ed0:	2000059c 	.word	0x2000059c

08000ed4 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8000ed8:	4802      	ldr	r0, [pc, #8]	@ (8000ee4 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 8000eda:	f002 fdc7 	bl	8003a6c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8000ede:	bf00      	nop
 8000ee0:	bd80      	pop	{r7, pc}
 8000ee2:	bf00      	nop
 8000ee4:	20000600 	.word	0x20000600

08000ee8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000eec:	4802      	ldr	r0, [pc, #8]	@ (8000ef8 <OTG_FS_IRQHandler+0x10>)
 8000eee:	f000 fc82 	bl	80017f6 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000ef2:	bf00      	nop
 8000ef4:	bd80      	pop	{r7, pc}
 8000ef6:	bf00      	nop
 8000ef8:	200014a0 	.word	0x200014a0

08000efc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000efc:	b480      	push	{r7}
 8000efe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f00:	4b06      	ldr	r3, [pc, #24]	@ (8000f1c <SystemInit+0x20>)
 8000f02:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000f06:	4a05      	ldr	r2, [pc, #20]	@ (8000f1c <SystemInit+0x20>)
 8000f08:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000f0c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f10:	bf00      	nop
 8000f12:	46bd      	mov	sp, r7
 8000f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f18:	4770      	bx	lr
 8000f1a:	bf00      	nop
 8000f1c:	e000ed00 	.word	0xe000ed00

08000f20 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000f20:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000f58 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000f24:	f7ff ffea 	bl	8000efc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000f28:	480c      	ldr	r0, [pc, #48]	@ (8000f5c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000f2a:	490d      	ldr	r1, [pc, #52]	@ (8000f60 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000f2c:	4a0d      	ldr	r2, [pc, #52]	@ (8000f64 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000f2e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f30:	e002      	b.n	8000f38 <LoopCopyDataInit>

08000f32 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f32:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f34:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f36:	3304      	adds	r3, #4

08000f38 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f38:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f3a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f3c:	d3f9      	bcc.n	8000f32 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f3e:	4a0a      	ldr	r2, [pc, #40]	@ (8000f68 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000f40:	4c0a      	ldr	r4, [pc, #40]	@ (8000f6c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000f42:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f44:	e001      	b.n	8000f4a <LoopFillZerobss>

08000f46 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f46:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f48:	3204      	adds	r2, #4

08000f4a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f4a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f4c:	d3fb      	bcc.n	8000f46 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8000f4e:	f008 fc85 	bl	800985c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f52:	f7ff fae1 	bl	8000518 <main>
  bx  lr    
 8000f56:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000f58:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000f5c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f60:	20000538 	.word	0x20000538
  ldr r2, =_sidata
 8000f64:	08009d14 	.word	0x08009d14
  ldr r2, =_sbss
 8000f68:	20000538 	.word	0x20000538
  ldr r4, =_ebss
 8000f6c:	200019dc 	.word	0x200019dc

08000f70 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f70:	e7fe      	b.n	8000f70 <ADC_IRQHandler>
	...

08000f74 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f78:	4b0e      	ldr	r3, [pc, #56]	@ (8000fb4 <HAL_Init+0x40>)
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	4a0d      	ldr	r2, [pc, #52]	@ (8000fb4 <HAL_Init+0x40>)
 8000f7e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000f82:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f84:	4b0b      	ldr	r3, [pc, #44]	@ (8000fb4 <HAL_Init+0x40>)
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	4a0a      	ldr	r2, [pc, #40]	@ (8000fb4 <HAL_Init+0x40>)
 8000f8a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000f8e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f90:	4b08      	ldr	r3, [pc, #32]	@ (8000fb4 <HAL_Init+0x40>)
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	4a07      	ldr	r2, [pc, #28]	@ (8000fb4 <HAL_Init+0x40>)
 8000f96:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000f9a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f9c:	2003      	movs	r0, #3
 8000f9e:	f000 f8fc 	bl	800119a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000fa2:	200f      	movs	r0, #15
 8000fa4:	f7ff fed6 	bl	8000d54 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000fa8:	f7ff fdd8 	bl	8000b5c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fac:	2300      	movs	r3, #0
}
 8000fae:	4618      	mov	r0, r3
 8000fb0:	bd80      	pop	{r7, pc}
 8000fb2:	bf00      	nop
 8000fb4:	40023c00 	.word	0x40023c00

08000fb8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000fbc:	4b06      	ldr	r3, [pc, #24]	@ (8000fd8 <HAL_IncTick+0x20>)
 8000fbe:	781b      	ldrb	r3, [r3, #0]
 8000fc0:	461a      	mov	r2, r3
 8000fc2:	4b06      	ldr	r3, [pc, #24]	@ (8000fdc <HAL_IncTick+0x24>)
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	4413      	add	r3, r2
 8000fc8:	4a04      	ldr	r2, [pc, #16]	@ (8000fdc <HAL_IncTick+0x24>)
 8000fca:	6013      	str	r3, [r2, #0]
}
 8000fcc:	bf00      	nop
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd4:	4770      	bx	lr
 8000fd6:	bf00      	nop
 8000fd8:	20000008 	.word	0x20000008
 8000fdc:	20000648 	.word	0x20000648

08000fe0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	af00      	add	r7, sp, #0
  return uwTick;
 8000fe4:	4b03      	ldr	r3, [pc, #12]	@ (8000ff4 <HAL_GetTick+0x14>)
 8000fe6:	681b      	ldr	r3, [r3, #0]
}
 8000fe8:	4618      	mov	r0, r3
 8000fea:	46bd      	mov	sp, r7
 8000fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff0:	4770      	bx	lr
 8000ff2:	bf00      	nop
 8000ff4:	20000648 	.word	0x20000648

08000ff8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b084      	sub	sp, #16
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001000:	f7ff ffee 	bl	8000fe0 <HAL_GetTick>
 8001004:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800100a:	68fb      	ldr	r3, [r7, #12]
 800100c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001010:	d005      	beq.n	800101e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001012:	4b0a      	ldr	r3, [pc, #40]	@ (800103c <HAL_Delay+0x44>)
 8001014:	781b      	ldrb	r3, [r3, #0]
 8001016:	461a      	mov	r2, r3
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	4413      	add	r3, r2
 800101c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800101e:	bf00      	nop
 8001020:	f7ff ffde 	bl	8000fe0 <HAL_GetTick>
 8001024:	4602      	mov	r2, r0
 8001026:	68bb      	ldr	r3, [r7, #8]
 8001028:	1ad3      	subs	r3, r2, r3
 800102a:	68fa      	ldr	r2, [r7, #12]
 800102c:	429a      	cmp	r2, r3
 800102e:	d8f7      	bhi.n	8001020 <HAL_Delay+0x28>
  {
  }
}
 8001030:	bf00      	nop
 8001032:	bf00      	nop
 8001034:	3710      	adds	r7, #16
 8001036:	46bd      	mov	sp, r7
 8001038:	bd80      	pop	{r7, pc}
 800103a:	bf00      	nop
 800103c:	20000008 	.word	0x20000008

08001040 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001040:	b480      	push	{r7}
 8001042:	b085      	sub	sp, #20
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	f003 0307 	and.w	r3, r3, #7
 800104e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001050:	4b0c      	ldr	r3, [pc, #48]	@ (8001084 <__NVIC_SetPriorityGrouping+0x44>)
 8001052:	68db      	ldr	r3, [r3, #12]
 8001054:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001056:	68ba      	ldr	r2, [r7, #8]
 8001058:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800105c:	4013      	ands	r3, r2
 800105e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001064:	68bb      	ldr	r3, [r7, #8]
 8001066:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001068:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800106c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001070:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001072:	4a04      	ldr	r2, [pc, #16]	@ (8001084 <__NVIC_SetPriorityGrouping+0x44>)
 8001074:	68bb      	ldr	r3, [r7, #8]
 8001076:	60d3      	str	r3, [r2, #12]
}
 8001078:	bf00      	nop
 800107a:	3714      	adds	r7, #20
 800107c:	46bd      	mov	sp, r7
 800107e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001082:	4770      	bx	lr
 8001084:	e000ed00 	.word	0xe000ed00

08001088 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001088:	b480      	push	{r7}
 800108a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800108c:	4b04      	ldr	r3, [pc, #16]	@ (80010a0 <__NVIC_GetPriorityGrouping+0x18>)
 800108e:	68db      	ldr	r3, [r3, #12]
 8001090:	0a1b      	lsrs	r3, r3, #8
 8001092:	f003 0307 	and.w	r3, r3, #7
}
 8001096:	4618      	mov	r0, r3
 8001098:	46bd      	mov	sp, r7
 800109a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109e:	4770      	bx	lr
 80010a0:	e000ed00 	.word	0xe000ed00

080010a4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010a4:	b480      	push	{r7}
 80010a6:	b083      	sub	sp, #12
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	4603      	mov	r3, r0
 80010ac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	db0b      	blt.n	80010ce <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010b6:	79fb      	ldrb	r3, [r7, #7]
 80010b8:	f003 021f 	and.w	r2, r3, #31
 80010bc:	4907      	ldr	r1, [pc, #28]	@ (80010dc <__NVIC_EnableIRQ+0x38>)
 80010be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010c2:	095b      	lsrs	r3, r3, #5
 80010c4:	2001      	movs	r0, #1
 80010c6:	fa00 f202 	lsl.w	r2, r0, r2
 80010ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80010ce:	bf00      	nop
 80010d0:	370c      	adds	r7, #12
 80010d2:	46bd      	mov	sp, r7
 80010d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d8:	4770      	bx	lr
 80010da:	bf00      	nop
 80010dc:	e000e100 	.word	0xe000e100

080010e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010e0:	b480      	push	{r7}
 80010e2:	b083      	sub	sp, #12
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	4603      	mov	r3, r0
 80010e8:	6039      	str	r1, [r7, #0]
 80010ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	db0a      	blt.n	800110a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010f4:	683b      	ldr	r3, [r7, #0]
 80010f6:	b2da      	uxtb	r2, r3
 80010f8:	490c      	ldr	r1, [pc, #48]	@ (800112c <__NVIC_SetPriority+0x4c>)
 80010fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010fe:	0112      	lsls	r2, r2, #4
 8001100:	b2d2      	uxtb	r2, r2
 8001102:	440b      	add	r3, r1
 8001104:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001108:	e00a      	b.n	8001120 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800110a:	683b      	ldr	r3, [r7, #0]
 800110c:	b2da      	uxtb	r2, r3
 800110e:	4908      	ldr	r1, [pc, #32]	@ (8001130 <__NVIC_SetPriority+0x50>)
 8001110:	79fb      	ldrb	r3, [r7, #7]
 8001112:	f003 030f 	and.w	r3, r3, #15
 8001116:	3b04      	subs	r3, #4
 8001118:	0112      	lsls	r2, r2, #4
 800111a:	b2d2      	uxtb	r2, r2
 800111c:	440b      	add	r3, r1
 800111e:	761a      	strb	r2, [r3, #24]
}
 8001120:	bf00      	nop
 8001122:	370c      	adds	r7, #12
 8001124:	46bd      	mov	sp, r7
 8001126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112a:	4770      	bx	lr
 800112c:	e000e100 	.word	0xe000e100
 8001130:	e000ed00 	.word	0xe000ed00

08001134 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001134:	b480      	push	{r7}
 8001136:	b089      	sub	sp, #36	@ 0x24
 8001138:	af00      	add	r7, sp, #0
 800113a:	60f8      	str	r0, [r7, #12]
 800113c:	60b9      	str	r1, [r7, #8]
 800113e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	f003 0307 	and.w	r3, r3, #7
 8001146:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001148:	69fb      	ldr	r3, [r7, #28]
 800114a:	f1c3 0307 	rsb	r3, r3, #7
 800114e:	2b04      	cmp	r3, #4
 8001150:	bf28      	it	cs
 8001152:	2304      	movcs	r3, #4
 8001154:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001156:	69fb      	ldr	r3, [r7, #28]
 8001158:	3304      	adds	r3, #4
 800115a:	2b06      	cmp	r3, #6
 800115c:	d902      	bls.n	8001164 <NVIC_EncodePriority+0x30>
 800115e:	69fb      	ldr	r3, [r7, #28]
 8001160:	3b03      	subs	r3, #3
 8001162:	e000      	b.n	8001166 <NVIC_EncodePriority+0x32>
 8001164:	2300      	movs	r3, #0
 8001166:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001168:	f04f 32ff 	mov.w	r2, #4294967295
 800116c:	69bb      	ldr	r3, [r7, #24]
 800116e:	fa02 f303 	lsl.w	r3, r2, r3
 8001172:	43da      	mvns	r2, r3
 8001174:	68bb      	ldr	r3, [r7, #8]
 8001176:	401a      	ands	r2, r3
 8001178:	697b      	ldr	r3, [r7, #20]
 800117a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800117c:	f04f 31ff 	mov.w	r1, #4294967295
 8001180:	697b      	ldr	r3, [r7, #20]
 8001182:	fa01 f303 	lsl.w	r3, r1, r3
 8001186:	43d9      	mvns	r1, r3
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800118c:	4313      	orrs	r3, r2
         );
}
 800118e:	4618      	mov	r0, r3
 8001190:	3724      	adds	r7, #36	@ 0x24
 8001192:	46bd      	mov	sp, r7
 8001194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001198:	4770      	bx	lr

0800119a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800119a:	b580      	push	{r7, lr}
 800119c:	b082      	sub	sp, #8
 800119e:	af00      	add	r7, sp, #0
 80011a0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011a2:	6878      	ldr	r0, [r7, #4]
 80011a4:	f7ff ff4c 	bl	8001040 <__NVIC_SetPriorityGrouping>
}
 80011a8:	bf00      	nop
 80011aa:	3708      	adds	r7, #8
 80011ac:	46bd      	mov	sp, r7
 80011ae:	bd80      	pop	{r7, pc}

080011b0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b086      	sub	sp, #24
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	4603      	mov	r3, r0
 80011b8:	60b9      	str	r1, [r7, #8]
 80011ba:	607a      	str	r2, [r7, #4]
 80011bc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80011be:	2300      	movs	r3, #0
 80011c0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80011c2:	f7ff ff61 	bl	8001088 <__NVIC_GetPriorityGrouping>
 80011c6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011c8:	687a      	ldr	r2, [r7, #4]
 80011ca:	68b9      	ldr	r1, [r7, #8]
 80011cc:	6978      	ldr	r0, [r7, #20]
 80011ce:	f7ff ffb1 	bl	8001134 <NVIC_EncodePriority>
 80011d2:	4602      	mov	r2, r0
 80011d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011d8:	4611      	mov	r1, r2
 80011da:	4618      	mov	r0, r3
 80011dc:	f7ff ff80 	bl	80010e0 <__NVIC_SetPriority>
}
 80011e0:	bf00      	nop
 80011e2:	3718      	adds	r7, #24
 80011e4:	46bd      	mov	sp, r7
 80011e6:	bd80      	pop	{r7, pc}

080011e8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b082      	sub	sp, #8
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	4603      	mov	r3, r0
 80011f0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80011f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011f6:	4618      	mov	r0, r3
 80011f8:	f7ff ff54 	bl	80010a4 <__NVIC_EnableIRQ>
}
 80011fc:	bf00      	nop
 80011fe:	3708      	adds	r7, #8
 8001200:	46bd      	mov	sp, r7
 8001202:	bd80      	pop	{r7, pc}

08001204 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001204:	b480      	push	{r7}
 8001206:	b089      	sub	sp, #36	@ 0x24
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
 800120c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800120e:	2300      	movs	r3, #0
 8001210:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001212:	2300      	movs	r3, #0
 8001214:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001216:	2300      	movs	r3, #0
 8001218:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800121a:	2300      	movs	r3, #0
 800121c:	61fb      	str	r3, [r7, #28]
 800121e:	e16b      	b.n	80014f8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001220:	2201      	movs	r2, #1
 8001222:	69fb      	ldr	r3, [r7, #28]
 8001224:	fa02 f303 	lsl.w	r3, r2, r3
 8001228:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800122a:	683b      	ldr	r3, [r7, #0]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	697a      	ldr	r2, [r7, #20]
 8001230:	4013      	ands	r3, r2
 8001232:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001234:	693a      	ldr	r2, [r7, #16]
 8001236:	697b      	ldr	r3, [r7, #20]
 8001238:	429a      	cmp	r2, r3
 800123a:	f040 815a 	bne.w	80014f2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800123e:	683b      	ldr	r3, [r7, #0]
 8001240:	685b      	ldr	r3, [r3, #4]
 8001242:	f003 0303 	and.w	r3, r3, #3
 8001246:	2b01      	cmp	r3, #1
 8001248:	d005      	beq.n	8001256 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800124a:	683b      	ldr	r3, [r7, #0]
 800124c:	685b      	ldr	r3, [r3, #4]
 800124e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001252:	2b02      	cmp	r3, #2
 8001254:	d130      	bne.n	80012b8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	689b      	ldr	r3, [r3, #8]
 800125a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800125c:	69fb      	ldr	r3, [r7, #28]
 800125e:	005b      	lsls	r3, r3, #1
 8001260:	2203      	movs	r2, #3
 8001262:	fa02 f303 	lsl.w	r3, r2, r3
 8001266:	43db      	mvns	r3, r3
 8001268:	69ba      	ldr	r2, [r7, #24]
 800126a:	4013      	ands	r3, r2
 800126c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800126e:	683b      	ldr	r3, [r7, #0]
 8001270:	68da      	ldr	r2, [r3, #12]
 8001272:	69fb      	ldr	r3, [r7, #28]
 8001274:	005b      	lsls	r3, r3, #1
 8001276:	fa02 f303 	lsl.w	r3, r2, r3
 800127a:	69ba      	ldr	r2, [r7, #24]
 800127c:	4313      	orrs	r3, r2
 800127e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	69ba      	ldr	r2, [r7, #24]
 8001284:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	685b      	ldr	r3, [r3, #4]
 800128a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800128c:	2201      	movs	r2, #1
 800128e:	69fb      	ldr	r3, [r7, #28]
 8001290:	fa02 f303 	lsl.w	r3, r2, r3
 8001294:	43db      	mvns	r3, r3
 8001296:	69ba      	ldr	r2, [r7, #24]
 8001298:	4013      	ands	r3, r2
 800129a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800129c:	683b      	ldr	r3, [r7, #0]
 800129e:	685b      	ldr	r3, [r3, #4]
 80012a0:	091b      	lsrs	r3, r3, #4
 80012a2:	f003 0201 	and.w	r2, r3, #1
 80012a6:	69fb      	ldr	r3, [r7, #28]
 80012a8:	fa02 f303 	lsl.w	r3, r2, r3
 80012ac:	69ba      	ldr	r2, [r7, #24]
 80012ae:	4313      	orrs	r3, r2
 80012b0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	69ba      	ldr	r2, [r7, #24]
 80012b6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80012b8:	683b      	ldr	r3, [r7, #0]
 80012ba:	685b      	ldr	r3, [r3, #4]
 80012bc:	f003 0303 	and.w	r3, r3, #3
 80012c0:	2b03      	cmp	r3, #3
 80012c2:	d017      	beq.n	80012f4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	68db      	ldr	r3, [r3, #12]
 80012c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80012ca:	69fb      	ldr	r3, [r7, #28]
 80012cc:	005b      	lsls	r3, r3, #1
 80012ce:	2203      	movs	r2, #3
 80012d0:	fa02 f303 	lsl.w	r3, r2, r3
 80012d4:	43db      	mvns	r3, r3
 80012d6:	69ba      	ldr	r2, [r7, #24]
 80012d8:	4013      	ands	r3, r2
 80012da:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80012dc:	683b      	ldr	r3, [r7, #0]
 80012de:	689a      	ldr	r2, [r3, #8]
 80012e0:	69fb      	ldr	r3, [r7, #28]
 80012e2:	005b      	lsls	r3, r3, #1
 80012e4:	fa02 f303 	lsl.w	r3, r2, r3
 80012e8:	69ba      	ldr	r2, [r7, #24]
 80012ea:	4313      	orrs	r3, r2
 80012ec:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	69ba      	ldr	r2, [r7, #24]
 80012f2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80012f4:	683b      	ldr	r3, [r7, #0]
 80012f6:	685b      	ldr	r3, [r3, #4]
 80012f8:	f003 0303 	and.w	r3, r3, #3
 80012fc:	2b02      	cmp	r3, #2
 80012fe:	d123      	bne.n	8001348 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001300:	69fb      	ldr	r3, [r7, #28]
 8001302:	08da      	lsrs	r2, r3, #3
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	3208      	adds	r2, #8
 8001308:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800130c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800130e:	69fb      	ldr	r3, [r7, #28]
 8001310:	f003 0307 	and.w	r3, r3, #7
 8001314:	009b      	lsls	r3, r3, #2
 8001316:	220f      	movs	r2, #15
 8001318:	fa02 f303 	lsl.w	r3, r2, r3
 800131c:	43db      	mvns	r3, r3
 800131e:	69ba      	ldr	r2, [r7, #24]
 8001320:	4013      	ands	r3, r2
 8001322:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001324:	683b      	ldr	r3, [r7, #0]
 8001326:	691a      	ldr	r2, [r3, #16]
 8001328:	69fb      	ldr	r3, [r7, #28]
 800132a:	f003 0307 	and.w	r3, r3, #7
 800132e:	009b      	lsls	r3, r3, #2
 8001330:	fa02 f303 	lsl.w	r3, r2, r3
 8001334:	69ba      	ldr	r2, [r7, #24]
 8001336:	4313      	orrs	r3, r2
 8001338:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800133a:	69fb      	ldr	r3, [r7, #28]
 800133c:	08da      	lsrs	r2, r3, #3
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	3208      	adds	r2, #8
 8001342:	69b9      	ldr	r1, [r7, #24]
 8001344:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800134e:	69fb      	ldr	r3, [r7, #28]
 8001350:	005b      	lsls	r3, r3, #1
 8001352:	2203      	movs	r2, #3
 8001354:	fa02 f303 	lsl.w	r3, r2, r3
 8001358:	43db      	mvns	r3, r3
 800135a:	69ba      	ldr	r2, [r7, #24]
 800135c:	4013      	ands	r3, r2
 800135e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001360:	683b      	ldr	r3, [r7, #0]
 8001362:	685b      	ldr	r3, [r3, #4]
 8001364:	f003 0203 	and.w	r2, r3, #3
 8001368:	69fb      	ldr	r3, [r7, #28]
 800136a:	005b      	lsls	r3, r3, #1
 800136c:	fa02 f303 	lsl.w	r3, r2, r3
 8001370:	69ba      	ldr	r2, [r7, #24]
 8001372:	4313      	orrs	r3, r2
 8001374:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	69ba      	ldr	r2, [r7, #24]
 800137a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800137c:	683b      	ldr	r3, [r7, #0]
 800137e:	685b      	ldr	r3, [r3, #4]
 8001380:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001384:	2b00      	cmp	r3, #0
 8001386:	f000 80b4 	beq.w	80014f2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800138a:	2300      	movs	r3, #0
 800138c:	60fb      	str	r3, [r7, #12]
 800138e:	4b60      	ldr	r3, [pc, #384]	@ (8001510 <HAL_GPIO_Init+0x30c>)
 8001390:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001392:	4a5f      	ldr	r2, [pc, #380]	@ (8001510 <HAL_GPIO_Init+0x30c>)
 8001394:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001398:	6453      	str	r3, [r2, #68]	@ 0x44
 800139a:	4b5d      	ldr	r3, [pc, #372]	@ (8001510 <HAL_GPIO_Init+0x30c>)
 800139c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800139e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80013a2:	60fb      	str	r3, [r7, #12]
 80013a4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80013a6:	4a5b      	ldr	r2, [pc, #364]	@ (8001514 <HAL_GPIO_Init+0x310>)
 80013a8:	69fb      	ldr	r3, [r7, #28]
 80013aa:	089b      	lsrs	r3, r3, #2
 80013ac:	3302      	adds	r3, #2
 80013ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80013b4:	69fb      	ldr	r3, [r7, #28]
 80013b6:	f003 0303 	and.w	r3, r3, #3
 80013ba:	009b      	lsls	r3, r3, #2
 80013bc:	220f      	movs	r2, #15
 80013be:	fa02 f303 	lsl.w	r3, r2, r3
 80013c2:	43db      	mvns	r3, r3
 80013c4:	69ba      	ldr	r2, [r7, #24]
 80013c6:	4013      	ands	r3, r2
 80013c8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	4a52      	ldr	r2, [pc, #328]	@ (8001518 <HAL_GPIO_Init+0x314>)
 80013ce:	4293      	cmp	r3, r2
 80013d0:	d02b      	beq.n	800142a <HAL_GPIO_Init+0x226>
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	4a51      	ldr	r2, [pc, #324]	@ (800151c <HAL_GPIO_Init+0x318>)
 80013d6:	4293      	cmp	r3, r2
 80013d8:	d025      	beq.n	8001426 <HAL_GPIO_Init+0x222>
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	4a50      	ldr	r2, [pc, #320]	@ (8001520 <HAL_GPIO_Init+0x31c>)
 80013de:	4293      	cmp	r3, r2
 80013e0:	d01f      	beq.n	8001422 <HAL_GPIO_Init+0x21e>
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	4a4f      	ldr	r2, [pc, #316]	@ (8001524 <HAL_GPIO_Init+0x320>)
 80013e6:	4293      	cmp	r3, r2
 80013e8:	d019      	beq.n	800141e <HAL_GPIO_Init+0x21a>
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	4a4e      	ldr	r2, [pc, #312]	@ (8001528 <HAL_GPIO_Init+0x324>)
 80013ee:	4293      	cmp	r3, r2
 80013f0:	d013      	beq.n	800141a <HAL_GPIO_Init+0x216>
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	4a4d      	ldr	r2, [pc, #308]	@ (800152c <HAL_GPIO_Init+0x328>)
 80013f6:	4293      	cmp	r3, r2
 80013f8:	d00d      	beq.n	8001416 <HAL_GPIO_Init+0x212>
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	4a4c      	ldr	r2, [pc, #304]	@ (8001530 <HAL_GPIO_Init+0x32c>)
 80013fe:	4293      	cmp	r3, r2
 8001400:	d007      	beq.n	8001412 <HAL_GPIO_Init+0x20e>
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	4a4b      	ldr	r2, [pc, #300]	@ (8001534 <HAL_GPIO_Init+0x330>)
 8001406:	4293      	cmp	r3, r2
 8001408:	d101      	bne.n	800140e <HAL_GPIO_Init+0x20a>
 800140a:	2307      	movs	r3, #7
 800140c:	e00e      	b.n	800142c <HAL_GPIO_Init+0x228>
 800140e:	2308      	movs	r3, #8
 8001410:	e00c      	b.n	800142c <HAL_GPIO_Init+0x228>
 8001412:	2306      	movs	r3, #6
 8001414:	e00a      	b.n	800142c <HAL_GPIO_Init+0x228>
 8001416:	2305      	movs	r3, #5
 8001418:	e008      	b.n	800142c <HAL_GPIO_Init+0x228>
 800141a:	2304      	movs	r3, #4
 800141c:	e006      	b.n	800142c <HAL_GPIO_Init+0x228>
 800141e:	2303      	movs	r3, #3
 8001420:	e004      	b.n	800142c <HAL_GPIO_Init+0x228>
 8001422:	2302      	movs	r3, #2
 8001424:	e002      	b.n	800142c <HAL_GPIO_Init+0x228>
 8001426:	2301      	movs	r3, #1
 8001428:	e000      	b.n	800142c <HAL_GPIO_Init+0x228>
 800142a:	2300      	movs	r3, #0
 800142c:	69fa      	ldr	r2, [r7, #28]
 800142e:	f002 0203 	and.w	r2, r2, #3
 8001432:	0092      	lsls	r2, r2, #2
 8001434:	4093      	lsls	r3, r2
 8001436:	69ba      	ldr	r2, [r7, #24]
 8001438:	4313      	orrs	r3, r2
 800143a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800143c:	4935      	ldr	r1, [pc, #212]	@ (8001514 <HAL_GPIO_Init+0x310>)
 800143e:	69fb      	ldr	r3, [r7, #28]
 8001440:	089b      	lsrs	r3, r3, #2
 8001442:	3302      	adds	r3, #2
 8001444:	69ba      	ldr	r2, [r7, #24]
 8001446:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800144a:	4b3b      	ldr	r3, [pc, #236]	@ (8001538 <HAL_GPIO_Init+0x334>)
 800144c:	689b      	ldr	r3, [r3, #8]
 800144e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001450:	693b      	ldr	r3, [r7, #16]
 8001452:	43db      	mvns	r3, r3
 8001454:	69ba      	ldr	r2, [r7, #24]
 8001456:	4013      	ands	r3, r2
 8001458:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800145a:	683b      	ldr	r3, [r7, #0]
 800145c:	685b      	ldr	r3, [r3, #4]
 800145e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001462:	2b00      	cmp	r3, #0
 8001464:	d003      	beq.n	800146e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001466:	69ba      	ldr	r2, [r7, #24]
 8001468:	693b      	ldr	r3, [r7, #16]
 800146a:	4313      	orrs	r3, r2
 800146c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800146e:	4a32      	ldr	r2, [pc, #200]	@ (8001538 <HAL_GPIO_Init+0x334>)
 8001470:	69bb      	ldr	r3, [r7, #24]
 8001472:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001474:	4b30      	ldr	r3, [pc, #192]	@ (8001538 <HAL_GPIO_Init+0x334>)
 8001476:	68db      	ldr	r3, [r3, #12]
 8001478:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800147a:	693b      	ldr	r3, [r7, #16]
 800147c:	43db      	mvns	r3, r3
 800147e:	69ba      	ldr	r2, [r7, #24]
 8001480:	4013      	ands	r3, r2
 8001482:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001484:	683b      	ldr	r3, [r7, #0]
 8001486:	685b      	ldr	r3, [r3, #4]
 8001488:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800148c:	2b00      	cmp	r3, #0
 800148e:	d003      	beq.n	8001498 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001490:	69ba      	ldr	r2, [r7, #24]
 8001492:	693b      	ldr	r3, [r7, #16]
 8001494:	4313      	orrs	r3, r2
 8001496:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001498:	4a27      	ldr	r2, [pc, #156]	@ (8001538 <HAL_GPIO_Init+0x334>)
 800149a:	69bb      	ldr	r3, [r7, #24]
 800149c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800149e:	4b26      	ldr	r3, [pc, #152]	@ (8001538 <HAL_GPIO_Init+0x334>)
 80014a0:	685b      	ldr	r3, [r3, #4]
 80014a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014a4:	693b      	ldr	r3, [r7, #16]
 80014a6:	43db      	mvns	r3, r3
 80014a8:	69ba      	ldr	r2, [r7, #24]
 80014aa:	4013      	ands	r3, r2
 80014ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80014ae:	683b      	ldr	r3, [r7, #0]
 80014b0:	685b      	ldr	r3, [r3, #4]
 80014b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d003      	beq.n	80014c2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80014ba:	69ba      	ldr	r2, [r7, #24]
 80014bc:	693b      	ldr	r3, [r7, #16]
 80014be:	4313      	orrs	r3, r2
 80014c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80014c2:	4a1d      	ldr	r2, [pc, #116]	@ (8001538 <HAL_GPIO_Init+0x334>)
 80014c4:	69bb      	ldr	r3, [r7, #24]
 80014c6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80014c8:	4b1b      	ldr	r3, [pc, #108]	@ (8001538 <HAL_GPIO_Init+0x334>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014ce:	693b      	ldr	r3, [r7, #16]
 80014d0:	43db      	mvns	r3, r3
 80014d2:	69ba      	ldr	r2, [r7, #24]
 80014d4:	4013      	ands	r3, r2
 80014d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80014d8:	683b      	ldr	r3, [r7, #0]
 80014da:	685b      	ldr	r3, [r3, #4]
 80014dc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d003      	beq.n	80014ec <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80014e4:	69ba      	ldr	r2, [r7, #24]
 80014e6:	693b      	ldr	r3, [r7, #16]
 80014e8:	4313      	orrs	r3, r2
 80014ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80014ec:	4a12      	ldr	r2, [pc, #72]	@ (8001538 <HAL_GPIO_Init+0x334>)
 80014ee:	69bb      	ldr	r3, [r7, #24]
 80014f0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80014f2:	69fb      	ldr	r3, [r7, #28]
 80014f4:	3301      	adds	r3, #1
 80014f6:	61fb      	str	r3, [r7, #28]
 80014f8:	69fb      	ldr	r3, [r7, #28]
 80014fa:	2b0f      	cmp	r3, #15
 80014fc:	f67f ae90 	bls.w	8001220 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001500:	bf00      	nop
 8001502:	bf00      	nop
 8001504:	3724      	adds	r7, #36	@ 0x24
 8001506:	46bd      	mov	sp, r7
 8001508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150c:	4770      	bx	lr
 800150e:	bf00      	nop
 8001510:	40023800 	.word	0x40023800
 8001514:	40013800 	.word	0x40013800
 8001518:	40020000 	.word	0x40020000
 800151c:	40020400 	.word	0x40020400
 8001520:	40020800 	.word	0x40020800
 8001524:	40020c00 	.word	0x40020c00
 8001528:	40021000 	.word	0x40021000
 800152c:	40021400 	.word	0x40021400
 8001530:	40021800 	.word	0x40021800
 8001534:	40021c00 	.word	0x40021c00
 8001538:	40013c00 	.word	0x40013c00

0800153c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800153c:	b480      	push	{r7}
 800153e:	b083      	sub	sp, #12
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
 8001544:	460b      	mov	r3, r1
 8001546:	807b      	strh	r3, [r7, #2]
 8001548:	4613      	mov	r3, r2
 800154a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800154c:	787b      	ldrb	r3, [r7, #1]
 800154e:	2b00      	cmp	r3, #0
 8001550:	d003      	beq.n	800155a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001552:	887a      	ldrh	r2, [r7, #2]
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001558:	e003      	b.n	8001562 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800155a:	887b      	ldrh	r3, [r7, #2]
 800155c:	041a      	lsls	r2, r3, #16
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	619a      	str	r2, [r3, #24]
}
 8001562:	bf00      	nop
 8001564:	370c      	adds	r7, #12
 8001566:	46bd      	mov	sp, r7
 8001568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156c:	4770      	bx	lr

0800156e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800156e:	b580      	push	{r7, lr}
 8001570:	b086      	sub	sp, #24
 8001572:	af02      	add	r7, sp, #8
 8001574:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	2b00      	cmp	r3, #0
 800157a:	d101      	bne.n	8001580 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800157c:	2301      	movs	r3, #1
 800157e:	e101      	b.n	8001784 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 800158c:	b2db      	uxtb	r3, r3
 800158e:	2b00      	cmp	r3, #0
 8001590:	d106      	bne.n	80015a0 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	2200      	movs	r2, #0
 8001596:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800159a:	6878      	ldr	r0, [r7, #4]
 800159c:	f007 f924 	bl	80087e8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	2203      	movs	r2, #3
 80015a4:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 80015a8:	68bb      	ldr	r3, [r7, #8]
 80015aa:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80015ae:	d102      	bne.n	80015b6 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	2200      	movs	r2, #0
 80015b4:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	4618      	mov	r0, r3
 80015bc:	f003 fb3f 	bl	8004c3e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	6818      	ldr	r0, [r3, #0]
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	7c1a      	ldrb	r2, [r3, #16]
 80015c8:	f88d 2000 	strb.w	r2, [sp]
 80015cc:	3304      	adds	r3, #4
 80015ce:	cb0e      	ldmia	r3, {r1, r2, r3}
 80015d0:	f003 fa1d 	bl	8004a0e <USB_CoreInit>
 80015d4:	4603      	mov	r3, r0
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d005      	beq.n	80015e6 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	2202      	movs	r2, #2
 80015de:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80015e2:	2301      	movs	r3, #1
 80015e4:	e0ce      	b.n	8001784 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	2100      	movs	r1, #0
 80015ec:	4618      	mov	r0, r3
 80015ee:	f003 fb37 	bl	8004c60 <USB_SetCurrentMode>
 80015f2:	4603      	mov	r3, r0
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d005      	beq.n	8001604 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	2202      	movs	r2, #2
 80015fc:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001600:	2301      	movs	r3, #1
 8001602:	e0bf      	b.n	8001784 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001604:	2300      	movs	r3, #0
 8001606:	73fb      	strb	r3, [r7, #15]
 8001608:	e04a      	b.n	80016a0 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800160a:	7bfa      	ldrb	r2, [r7, #15]
 800160c:	6879      	ldr	r1, [r7, #4]
 800160e:	4613      	mov	r3, r2
 8001610:	00db      	lsls	r3, r3, #3
 8001612:	4413      	add	r3, r2
 8001614:	009b      	lsls	r3, r3, #2
 8001616:	440b      	add	r3, r1
 8001618:	3315      	adds	r3, #21
 800161a:	2201      	movs	r2, #1
 800161c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800161e:	7bfa      	ldrb	r2, [r7, #15]
 8001620:	6879      	ldr	r1, [r7, #4]
 8001622:	4613      	mov	r3, r2
 8001624:	00db      	lsls	r3, r3, #3
 8001626:	4413      	add	r3, r2
 8001628:	009b      	lsls	r3, r3, #2
 800162a:	440b      	add	r3, r1
 800162c:	3314      	adds	r3, #20
 800162e:	7bfa      	ldrb	r2, [r7, #15]
 8001630:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001632:	7bfa      	ldrb	r2, [r7, #15]
 8001634:	7bfb      	ldrb	r3, [r7, #15]
 8001636:	b298      	uxth	r0, r3
 8001638:	6879      	ldr	r1, [r7, #4]
 800163a:	4613      	mov	r3, r2
 800163c:	00db      	lsls	r3, r3, #3
 800163e:	4413      	add	r3, r2
 8001640:	009b      	lsls	r3, r3, #2
 8001642:	440b      	add	r3, r1
 8001644:	332e      	adds	r3, #46	@ 0x2e
 8001646:	4602      	mov	r2, r0
 8001648:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800164a:	7bfa      	ldrb	r2, [r7, #15]
 800164c:	6879      	ldr	r1, [r7, #4]
 800164e:	4613      	mov	r3, r2
 8001650:	00db      	lsls	r3, r3, #3
 8001652:	4413      	add	r3, r2
 8001654:	009b      	lsls	r3, r3, #2
 8001656:	440b      	add	r3, r1
 8001658:	3318      	adds	r3, #24
 800165a:	2200      	movs	r2, #0
 800165c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800165e:	7bfa      	ldrb	r2, [r7, #15]
 8001660:	6879      	ldr	r1, [r7, #4]
 8001662:	4613      	mov	r3, r2
 8001664:	00db      	lsls	r3, r3, #3
 8001666:	4413      	add	r3, r2
 8001668:	009b      	lsls	r3, r3, #2
 800166a:	440b      	add	r3, r1
 800166c:	331c      	adds	r3, #28
 800166e:	2200      	movs	r2, #0
 8001670:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001672:	7bfa      	ldrb	r2, [r7, #15]
 8001674:	6879      	ldr	r1, [r7, #4]
 8001676:	4613      	mov	r3, r2
 8001678:	00db      	lsls	r3, r3, #3
 800167a:	4413      	add	r3, r2
 800167c:	009b      	lsls	r3, r3, #2
 800167e:	440b      	add	r3, r1
 8001680:	3320      	adds	r3, #32
 8001682:	2200      	movs	r2, #0
 8001684:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001686:	7bfa      	ldrb	r2, [r7, #15]
 8001688:	6879      	ldr	r1, [r7, #4]
 800168a:	4613      	mov	r3, r2
 800168c:	00db      	lsls	r3, r3, #3
 800168e:	4413      	add	r3, r2
 8001690:	009b      	lsls	r3, r3, #2
 8001692:	440b      	add	r3, r1
 8001694:	3324      	adds	r3, #36	@ 0x24
 8001696:	2200      	movs	r2, #0
 8001698:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800169a:	7bfb      	ldrb	r3, [r7, #15]
 800169c:	3301      	adds	r3, #1
 800169e:	73fb      	strb	r3, [r7, #15]
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	791b      	ldrb	r3, [r3, #4]
 80016a4:	7bfa      	ldrb	r2, [r7, #15]
 80016a6:	429a      	cmp	r2, r3
 80016a8:	d3af      	bcc.n	800160a <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80016aa:	2300      	movs	r3, #0
 80016ac:	73fb      	strb	r3, [r7, #15]
 80016ae:	e044      	b.n	800173a <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80016b0:	7bfa      	ldrb	r2, [r7, #15]
 80016b2:	6879      	ldr	r1, [r7, #4]
 80016b4:	4613      	mov	r3, r2
 80016b6:	00db      	lsls	r3, r3, #3
 80016b8:	4413      	add	r3, r2
 80016ba:	009b      	lsls	r3, r3, #2
 80016bc:	440b      	add	r3, r1
 80016be:	f203 2355 	addw	r3, r3, #597	@ 0x255
 80016c2:	2200      	movs	r2, #0
 80016c4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80016c6:	7bfa      	ldrb	r2, [r7, #15]
 80016c8:	6879      	ldr	r1, [r7, #4]
 80016ca:	4613      	mov	r3, r2
 80016cc:	00db      	lsls	r3, r3, #3
 80016ce:	4413      	add	r3, r2
 80016d0:	009b      	lsls	r3, r3, #2
 80016d2:	440b      	add	r3, r1
 80016d4:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 80016d8:	7bfa      	ldrb	r2, [r7, #15]
 80016da:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80016dc:	7bfa      	ldrb	r2, [r7, #15]
 80016de:	6879      	ldr	r1, [r7, #4]
 80016e0:	4613      	mov	r3, r2
 80016e2:	00db      	lsls	r3, r3, #3
 80016e4:	4413      	add	r3, r2
 80016e6:	009b      	lsls	r3, r3, #2
 80016e8:	440b      	add	r3, r1
 80016ea:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80016ee:	2200      	movs	r2, #0
 80016f0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80016f2:	7bfa      	ldrb	r2, [r7, #15]
 80016f4:	6879      	ldr	r1, [r7, #4]
 80016f6:	4613      	mov	r3, r2
 80016f8:	00db      	lsls	r3, r3, #3
 80016fa:	4413      	add	r3, r2
 80016fc:	009b      	lsls	r3, r3, #2
 80016fe:	440b      	add	r3, r1
 8001700:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8001704:	2200      	movs	r2, #0
 8001706:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001708:	7bfa      	ldrb	r2, [r7, #15]
 800170a:	6879      	ldr	r1, [r7, #4]
 800170c:	4613      	mov	r3, r2
 800170e:	00db      	lsls	r3, r3, #3
 8001710:	4413      	add	r3, r2
 8001712:	009b      	lsls	r3, r3, #2
 8001714:	440b      	add	r3, r1
 8001716:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800171a:	2200      	movs	r2, #0
 800171c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800171e:	7bfa      	ldrb	r2, [r7, #15]
 8001720:	6879      	ldr	r1, [r7, #4]
 8001722:	4613      	mov	r3, r2
 8001724:	00db      	lsls	r3, r3, #3
 8001726:	4413      	add	r3, r2
 8001728:	009b      	lsls	r3, r3, #2
 800172a:	440b      	add	r3, r1
 800172c:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8001730:	2200      	movs	r2, #0
 8001732:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001734:	7bfb      	ldrb	r3, [r7, #15]
 8001736:	3301      	adds	r3, #1
 8001738:	73fb      	strb	r3, [r7, #15]
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	791b      	ldrb	r3, [r3, #4]
 800173e:	7bfa      	ldrb	r2, [r7, #15]
 8001740:	429a      	cmp	r2, r3
 8001742:	d3b5      	bcc.n	80016b0 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	6818      	ldr	r0, [r3, #0]
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	7c1a      	ldrb	r2, [r3, #16]
 800174c:	f88d 2000 	strb.w	r2, [sp]
 8001750:	3304      	adds	r3, #4
 8001752:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001754:	f003 fad0 	bl	8004cf8 <USB_DevInit>
 8001758:	4603      	mov	r3, r0
 800175a:	2b00      	cmp	r3, #0
 800175c:	d005      	beq.n	800176a <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	2202      	movs	r2, #2
 8001762:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001766:	2301      	movs	r3, #1
 8001768:	e00c      	b.n	8001784 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	2200      	movs	r2, #0
 800176e:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	2201      	movs	r2, #1
 8001774:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	4618      	mov	r0, r3
 800177e:	f004 fb1a 	bl	8005db6 <USB_DevDisconnect>

  return HAL_OK;
 8001782:	2300      	movs	r3, #0
}
 8001784:	4618      	mov	r0, r3
 8001786:	3710      	adds	r7, #16
 8001788:	46bd      	mov	sp, r7
 800178a:	bd80      	pop	{r7, pc}

0800178c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b084      	sub	sp, #16
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80017a0:	2b01      	cmp	r3, #1
 80017a2:	d101      	bne.n	80017a8 <HAL_PCD_Start+0x1c>
 80017a4:	2302      	movs	r3, #2
 80017a6:	e022      	b.n	80017ee <HAL_PCD_Start+0x62>
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	2201      	movs	r2, #1
 80017ac:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	68db      	ldr	r3, [r3, #12]
 80017b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d009      	beq.n	80017d0 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80017c0:	2b01      	cmp	r3, #1
 80017c2:	d105      	bne.n	80017d0 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80017c8:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	4618      	mov	r0, r3
 80017d6:	f003 fa21 	bl	8004c1c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	4618      	mov	r0, r3
 80017e0:	f004 fac8 	bl	8005d74 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	2200      	movs	r2, #0
 80017e8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80017ec:	2300      	movs	r3, #0
}
 80017ee:	4618      	mov	r0, r3
 80017f0:	3710      	adds	r7, #16
 80017f2:	46bd      	mov	sp, r7
 80017f4:	bd80      	pop	{r7, pc}

080017f6 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80017f6:	b590      	push	{r4, r7, lr}
 80017f8:	b08d      	sub	sp, #52	@ 0x34
 80017fa:	af00      	add	r7, sp, #0
 80017fc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001804:	6a3b      	ldr	r3, [r7, #32]
 8001806:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	4618      	mov	r0, r3
 800180e:	f004 fb86 	bl	8005f1e <USB_GetMode>
 8001812:	4603      	mov	r3, r0
 8001814:	2b00      	cmp	r3, #0
 8001816:	f040 848c 	bne.w	8002132 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	4618      	mov	r0, r3
 8001820:	f004 faea 	bl	8005df8 <USB_ReadInterrupts>
 8001824:	4603      	mov	r3, r0
 8001826:	2b00      	cmp	r3, #0
 8001828:	f000 8482 	beq.w	8002130 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800182c:	69fb      	ldr	r3, [r7, #28]
 800182e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001832:	689b      	ldr	r3, [r3, #8]
 8001834:	0a1b      	lsrs	r3, r3, #8
 8001836:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	4618      	mov	r0, r3
 8001846:	f004 fad7 	bl	8005df8 <USB_ReadInterrupts>
 800184a:	4603      	mov	r3, r0
 800184c:	f003 0302 	and.w	r3, r3, #2
 8001850:	2b02      	cmp	r3, #2
 8001852:	d107      	bne.n	8001864 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	695a      	ldr	r2, [r3, #20]
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f002 0202 	and.w	r2, r2, #2
 8001862:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	4618      	mov	r0, r3
 800186a:	f004 fac5 	bl	8005df8 <USB_ReadInterrupts>
 800186e:	4603      	mov	r3, r0
 8001870:	f003 0310 	and.w	r3, r3, #16
 8001874:	2b10      	cmp	r3, #16
 8001876:	d161      	bne.n	800193c <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	699a      	ldr	r2, [r3, #24]
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f022 0210 	bic.w	r2, r2, #16
 8001886:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8001888:	6a3b      	ldr	r3, [r7, #32]
 800188a:	6a1b      	ldr	r3, [r3, #32]
 800188c:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800188e:	69bb      	ldr	r3, [r7, #24]
 8001890:	f003 020f 	and.w	r2, r3, #15
 8001894:	4613      	mov	r3, r2
 8001896:	00db      	lsls	r3, r3, #3
 8001898:	4413      	add	r3, r2
 800189a:	009b      	lsls	r3, r3, #2
 800189c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80018a0:	687a      	ldr	r2, [r7, #4]
 80018a2:	4413      	add	r3, r2
 80018a4:	3304      	adds	r3, #4
 80018a6:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80018a8:	69bb      	ldr	r3, [r7, #24]
 80018aa:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 80018ae:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80018b2:	d124      	bne.n	80018fe <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80018b4:	69ba      	ldr	r2, [r7, #24]
 80018b6:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 80018ba:	4013      	ands	r3, r2
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d035      	beq.n	800192c <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80018c0:	697b      	ldr	r3, [r7, #20]
 80018c2:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80018c4:	69bb      	ldr	r3, [r7, #24]
 80018c6:	091b      	lsrs	r3, r3, #4
 80018c8:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80018ca:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80018ce:	b29b      	uxth	r3, r3
 80018d0:	461a      	mov	r2, r3
 80018d2:	6a38      	ldr	r0, [r7, #32]
 80018d4:	f004 f8fc 	bl	8005ad0 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80018d8:	697b      	ldr	r3, [r7, #20]
 80018da:	68da      	ldr	r2, [r3, #12]
 80018dc:	69bb      	ldr	r3, [r7, #24]
 80018de:	091b      	lsrs	r3, r3, #4
 80018e0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80018e4:	441a      	add	r2, r3
 80018e6:	697b      	ldr	r3, [r7, #20]
 80018e8:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80018ea:	697b      	ldr	r3, [r7, #20]
 80018ec:	695a      	ldr	r2, [r3, #20]
 80018ee:	69bb      	ldr	r3, [r7, #24]
 80018f0:	091b      	lsrs	r3, r3, #4
 80018f2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80018f6:	441a      	add	r2, r3
 80018f8:	697b      	ldr	r3, [r7, #20]
 80018fa:	615a      	str	r2, [r3, #20]
 80018fc:	e016      	b.n	800192c <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80018fe:	69bb      	ldr	r3, [r7, #24]
 8001900:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8001904:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8001908:	d110      	bne.n	800192c <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8001910:	2208      	movs	r2, #8
 8001912:	4619      	mov	r1, r3
 8001914:	6a38      	ldr	r0, [r7, #32]
 8001916:	f004 f8db 	bl	8005ad0 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800191a:	697b      	ldr	r3, [r7, #20]
 800191c:	695a      	ldr	r2, [r3, #20]
 800191e:	69bb      	ldr	r3, [r7, #24]
 8001920:	091b      	lsrs	r3, r3, #4
 8001922:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001926:	441a      	add	r2, r3
 8001928:	697b      	ldr	r3, [r7, #20]
 800192a:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	699a      	ldr	r2, [r3, #24]
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f042 0210 	orr.w	r2, r2, #16
 800193a:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	4618      	mov	r0, r3
 8001942:	f004 fa59 	bl	8005df8 <USB_ReadInterrupts>
 8001946:	4603      	mov	r3, r0
 8001948:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800194c:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8001950:	f040 80a7 	bne.w	8001aa2 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8001954:	2300      	movs	r3, #0
 8001956:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	4618      	mov	r0, r3
 800195e:	f004 fa5e 	bl	8005e1e <USB_ReadDevAllOutEpInterrupt>
 8001962:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8001964:	e099      	b.n	8001a9a <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8001966:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001968:	f003 0301 	and.w	r3, r3, #1
 800196c:	2b00      	cmp	r3, #0
 800196e:	f000 808e 	beq.w	8001a8e <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001978:	b2d2      	uxtb	r2, r2
 800197a:	4611      	mov	r1, r2
 800197c:	4618      	mov	r0, r3
 800197e:	f004 fa82 	bl	8005e86 <USB_ReadDevOutEPInterrupt>
 8001982:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001984:	693b      	ldr	r3, [r7, #16]
 8001986:	f003 0301 	and.w	r3, r3, #1
 800198a:	2b00      	cmp	r3, #0
 800198c:	d00c      	beq.n	80019a8 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800198e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001990:	015a      	lsls	r2, r3, #5
 8001992:	69fb      	ldr	r3, [r7, #28]
 8001994:	4413      	add	r3, r2
 8001996:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800199a:	461a      	mov	r2, r3
 800199c:	2301      	movs	r3, #1
 800199e:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80019a0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80019a2:	6878      	ldr	r0, [r7, #4]
 80019a4:	f000 fe8c 	bl	80026c0 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80019a8:	693b      	ldr	r3, [r7, #16]
 80019aa:	f003 0308 	and.w	r3, r3, #8
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d00c      	beq.n	80019cc <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80019b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019b4:	015a      	lsls	r2, r3, #5
 80019b6:	69fb      	ldr	r3, [r7, #28]
 80019b8:	4413      	add	r3, r2
 80019ba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80019be:	461a      	mov	r2, r3
 80019c0:	2308      	movs	r3, #8
 80019c2:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80019c4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80019c6:	6878      	ldr	r0, [r7, #4]
 80019c8:	f000 ff62 	bl	8002890 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80019cc:	693b      	ldr	r3, [r7, #16]
 80019ce:	f003 0310 	and.w	r3, r3, #16
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d008      	beq.n	80019e8 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80019d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019d8:	015a      	lsls	r2, r3, #5
 80019da:	69fb      	ldr	r3, [r7, #28]
 80019dc:	4413      	add	r3, r2
 80019de:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80019e2:	461a      	mov	r2, r3
 80019e4:	2310      	movs	r3, #16
 80019e6:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80019e8:	693b      	ldr	r3, [r7, #16]
 80019ea:	f003 0302 	and.w	r3, r3, #2
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d030      	beq.n	8001a54 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80019f2:	6a3b      	ldr	r3, [r7, #32]
 80019f4:	695b      	ldr	r3, [r3, #20]
 80019f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80019fa:	2b80      	cmp	r3, #128	@ 0x80
 80019fc:	d109      	bne.n	8001a12 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80019fe:	69fb      	ldr	r3, [r7, #28]
 8001a00:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001a04:	685b      	ldr	r3, [r3, #4]
 8001a06:	69fa      	ldr	r2, [r7, #28]
 8001a08:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001a0c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001a10:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8001a12:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001a14:	4613      	mov	r3, r2
 8001a16:	00db      	lsls	r3, r3, #3
 8001a18:	4413      	add	r3, r2
 8001a1a:	009b      	lsls	r3, r3, #2
 8001a1c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001a20:	687a      	ldr	r2, [r7, #4]
 8001a22:	4413      	add	r3, r2
 8001a24:	3304      	adds	r3, #4
 8001a26:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001a28:	697b      	ldr	r3, [r7, #20]
 8001a2a:	78db      	ldrb	r3, [r3, #3]
 8001a2c:	2b01      	cmp	r3, #1
 8001a2e:	d108      	bne.n	8001a42 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8001a30:	697b      	ldr	r3, [r7, #20]
 8001a32:	2200      	movs	r2, #0
 8001a34:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8001a36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a38:	b2db      	uxtb	r3, r3
 8001a3a:	4619      	mov	r1, r3
 8001a3c:	6878      	ldr	r0, [r7, #4]
 8001a3e:	f006 ffd9 	bl	80089f4 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8001a42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a44:	015a      	lsls	r2, r3, #5
 8001a46:	69fb      	ldr	r3, [r7, #28]
 8001a48:	4413      	add	r3, r2
 8001a4a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001a4e:	461a      	mov	r2, r3
 8001a50:	2302      	movs	r3, #2
 8001a52:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001a54:	693b      	ldr	r3, [r7, #16]
 8001a56:	f003 0320 	and.w	r3, r3, #32
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d008      	beq.n	8001a70 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001a5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a60:	015a      	lsls	r2, r3, #5
 8001a62:	69fb      	ldr	r3, [r7, #28]
 8001a64:	4413      	add	r3, r2
 8001a66:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001a6a:	461a      	mov	r2, r3
 8001a6c:	2320      	movs	r3, #32
 8001a6e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001a70:	693b      	ldr	r3, [r7, #16]
 8001a72:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d009      	beq.n	8001a8e <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8001a7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a7c:	015a      	lsls	r2, r3, #5
 8001a7e:	69fb      	ldr	r3, [r7, #28]
 8001a80:	4413      	add	r3, r2
 8001a82:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001a86:	461a      	mov	r2, r3
 8001a88:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001a8c:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8001a8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a90:	3301      	adds	r3, #1
 8001a92:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8001a94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001a96:	085b      	lsrs	r3, r3, #1
 8001a98:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8001a9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	f47f af62 	bne.w	8001966 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	f004 f9a6 	bl	8005df8 <USB_ReadInterrupts>
 8001aac:	4603      	mov	r3, r0
 8001aae:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001ab2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8001ab6:	f040 80db 	bne.w	8001c70 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	4618      	mov	r0, r3
 8001ac0:	f004 f9c7 	bl	8005e52 <USB_ReadDevAllInEpInterrupt>
 8001ac4:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8001aca:	e0cd      	b.n	8001c68 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001acc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001ace:	f003 0301 	and.w	r3, r3, #1
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	f000 80c2 	beq.w	8001c5c <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001ade:	b2d2      	uxtb	r2, r2
 8001ae0:	4611      	mov	r1, r2
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	f004 f9ed 	bl	8005ec2 <USB_ReadDevInEPInterrupt>
 8001ae8:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001aea:	693b      	ldr	r3, [r7, #16]
 8001aec:	f003 0301 	and.w	r3, r3, #1
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d057      	beq.n	8001ba4 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001af4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001af6:	f003 030f 	and.w	r3, r3, #15
 8001afa:	2201      	movs	r2, #1
 8001afc:	fa02 f303 	lsl.w	r3, r2, r3
 8001b00:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001b02:	69fb      	ldr	r3, [r7, #28]
 8001b04:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001b08:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	43db      	mvns	r3, r3
 8001b0e:	69f9      	ldr	r1, [r7, #28]
 8001b10:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8001b14:	4013      	ands	r3, r2
 8001b16:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8001b18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b1a:	015a      	lsls	r2, r3, #5
 8001b1c:	69fb      	ldr	r3, [r7, #28]
 8001b1e:	4413      	add	r3, r2
 8001b20:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001b24:	461a      	mov	r2, r3
 8001b26:	2301      	movs	r3, #1
 8001b28:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	799b      	ldrb	r3, [r3, #6]
 8001b2e:	2b01      	cmp	r3, #1
 8001b30:	d132      	bne.n	8001b98 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8001b32:	6879      	ldr	r1, [r7, #4]
 8001b34:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001b36:	4613      	mov	r3, r2
 8001b38:	00db      	lsls	r3, r3, #3
 8001b3a:	4413      	add	r3, r2
 8001b3c:	009b      	lsls	r3, r3, #2
 8001b3e:	440b      	add	r3, r1
 8001b40:	3320      	adds	r3, #32
 8001b42:	6819      	ldr	r1, [r3, #0]
 8001b44:	6878      	ldr	r0, [r7, #4]
 8001b46:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001b48:	4613      	mov	r3, r2
 8001b4a:	00db      	lsls	r3, r3, #3
 8001b4c:	4413      	add	r3, r2
 8001b4e:	009b      	lsls	r3, r3, #2
 8001b50:	4403      	add	r3, r0
 8001b52:	331c      	adds	r3, #28
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	4419      	add	r1, r3
 8001b58:	6878      	ldr	r0, [r7, #4]
 8001b5a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001b5c:	4613      	mov	r3, r2
 8001b5e:	00db      	lsls	r3, r3, #3
 8001b60:	4413      	add	r3, r2
 8001b62:	009b      	lsls	r3, r3, #2
 8001b64:	4403      	add	r3, r0
 8001b66:	3320      	adds	r3, #32
 8001b68:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8001b6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d113      	bne.n	8001b98 <HAL_PCD_IRQHandler+0x3a2>
 8001b70:	6879      	ldr	r1, [r7, #4]
 8001b72:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001b74:	4613      	mov	r3, r2
 8001b76:	00db      	lsls	r3, r3, #3
 8001b78:	4413      	add	r3, r2
 8001b7a:	009b      	lsls	r3, r3, #2
 8001b7c:	440b      	add	r3, r1
 8001b7e:	3324      	adds	r3, #36	@ 0x24
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d108      	bne.n	8001b98 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	6818      	ldr	r0, [r3, #0]
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8001b90:	461a      	mov	r2, r3
 8001b92:	2101      	movs	r1, #1
 8001b94:	f004 f9f4 	bl	8005f80 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8001b98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b9a:	b2db      	uxtb	r3, r3
 8001b9c:	4619      	mov	r1, r3
 8001b9e:	6878      	ldr	r0, [r7, #4]
 8001ba0:	f006 fea3 	bl	80088ea <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8001ba4:	693b      	ldr	r3, [r7, #16]
 8001ba6:	f003 0308 	and.w	r3, r3, #8
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d008      	beq.n	8001bc0 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001bae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bb0:	015a      	lsls	r2, r3, #5
 8001bb2:	69fb      	ldr	r3, [r7, #28]
 8001bb4:	4413      	add	r3, r2
 8001bb6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001bba:	461a      	mov	r2, r3
 8001bbc:	2308      	movs	r3, #8
 8001bbe:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8001bc0:	693b      	ldr	r3, [r7, #16]
 8001bc2:	f003 0310 	and.w	r3, r3, #16
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d008      	beq.n	8001bdc <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8001bca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bcc:	015a      	lsls	r2, r3, #5
 8001bce:	69fb      	ldr	r3, [r7, #28]
 8001bd0:	4413      	add	r3, r2
 8001bd2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001bd6:	461a      	mov	r2, r3
 8001bd8:	2310      	movs	r3, #16
 8001bda:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8001bdc:	693b      	ldr	r3, [r7, #16]
 8001bde:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d008      	beq.n	8001bf8 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8001be6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001be8:	015a      	lsls	r2, r3, #5
 8001bea:	69fb      	ldr	r3, [r7, #28]
 8001bec:	4413      	add	r3, r2
 8001bee:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001bf2:	461a      	mov	r2, r3
 8001bf4:	2340      	movs	r3, #64	@ 0x40
 8001bf6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8001bf8:	693b      	ldr	r3, [r7, #16]
 8001bfa:	f003 0302 	and.w	r3, r3, #2
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d023      	beq.n	8001c4a <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8001c02:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001c04:	6a38      	ldr	r0, [r7, #32]
 8001c06:	f003 f9db 	bl	8004fc0 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8001c0a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001c0c:	4613      	mov	r3, r2
 8001c0e:	00db      	lsls	r3, r3, #3
 8001c10:	4413      	add	r3, r2
 8001c12:	009b      	lsls	r3, r3, #2
 8001c14:	3310      	adds	r3, #16
 8001c16:	687a      	ldr	r2, [r7, #4]
 8001c18:	4413      	add	r3, r2
 8001c1a:	3304      	adds	r3, #4
 8001c1c:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001c1e:	697b      	ldr	r3, [r7, #20]
 8001c20:	78db      	ldrb	r3, [r3, #3]
 8001c22:	2b01      	cmp	r3, #1
 8001c24:	d108      	bne.n	8001c38 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8001c26:	697b      	ldr	r3, [r7, #20]
 8001c28:	2200      	movs	r2, #0
 8001c2a:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8001c2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c2e:	b2db      	uxtb	r3, r3
 8001c30:	4619      	mov	r1, r3
 8001c32:	6878      	ldr	r0, [r7, #4]
 8001c34:	f006 fef0 	bl	8008a18 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8001c38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c3a:	015a      	lsls	r2, r3, #5
 8001c3c:	69fb      	ldr	r3, [r7, #28]
 8001c3e:	4413      	add	r3, r2
 8001c40:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001c44:	461a      	mov	r2, r3
 8001c46:	2302      	movs	r3, #2
 8001c48:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8001c4a:	693b      	ldr	r3, [r7, #16]
 8001c4c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d003      	beq.n	8001c5c <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8001c54:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001c56:	6878      	ldr	r0, [r7, #4]
 8001c58:	f000 fca5 	bl	80025a6 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8001c5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c5e:	3301      	adds	r3, #1
 8001c60:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8001c62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001c64:	085b      	lsrs	r3, r3, #1
 8001c66:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8001c68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	f47f af2e 	bne.w	8001acc <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	4618      	mov	r0, r3
 8001c76:	f004 f8bf 	bl	8005df8 <USB_ReadInterrupts>
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8001c80:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8001c84:	d122      	bne.n	8001ccc <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001c86:	69fb      	ldr	r3, [r7, #28]
 8001c88:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001c8c:	685b      	ldr	r3, [r3, #4]
 8001c8e:	69fa      	ldr	r2, [r7, #28]
 8001c90:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001c94:	f023 0301 	bic.w	r3, r3, #1
 8001c98:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8001ca0:	2b01      	cmp	r3, #1
 8001ca2:	d108      	bne.n	8001cb6 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001cac:	2100      	movs	r1, #0
 8001cae:	6878      	ldr	r0, [r7, #4]
 8001cb0:	f000 fe8c 	bl	80029cc <HAL_PCDEx_LPM_Callback>
 8001cb4:	e002      	b.n	8001cbc <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8001cb6:	6878      	ldr	r0, [r7, #4]
 8001cb8:	f006 fe8e 	bl	80089d8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	695a      	ldr	r2, [r3, #20]
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8001cca:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	f004 f891 	bl	8005df8 <USB_ReadInterrupts>
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001cdc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001ce0:	d112      	bne.n	8001d08 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8001ce2:	69fb      	ldr	r3, [r7, #28]
 8001ce4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001ce8:	689b      	ldr	r3, [r3, #8]
 8001cea:	f003 0301 	and.w	r3, r3, #1
 8001cee:	2b01      	cmp	r3, #1
 8001cf0:	d102      	bne.n	8001cf8 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001cf2:	6878      	ldr	r0, [r7, #4]
 8001cf4:	f006 fe4a 	bl	800898c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	695a      	ldr	r2, [r3, #20]
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8001d06:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	f004 f873 	bl	8005df8 <USB_ReadInterrupts>
 8001d12:	4603      	mov	r3, r0
 8001d14:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001d18:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001d1c:	f040 80b7 	bne.w	8001e8e <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001d20:	69fb      	ldr	r3, [r7, #28]
 8001d22:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001d26:	685b      	ldr	r3, [r3, #4]
 8001d28:	69fa      	ldr	r2, [r7, #28]
 8001d2a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001d2e:	f023 0301 	bic.w	r3, r3, #1
 8001d32:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	2110      	movs	r1, #16
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	f003 f940 	bl	8004fc0 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d40:	2300      	movs	r3, #0
 8001d42:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001d44:	e046      	b.n	8001dd4 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8001d46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001d48:	015a      	lsls	r2, r3, #5
 8001d4a:	69fb      	ldr	r3, [r7, #28]
 8001d4c:	4413      	add	r3, r2
 8001d4e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001d52:	461a      	mov	r2, r3
 8001d54:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8001d58:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8001d5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001d5c:	015a      	lsls	r2, r3, #5
 8001d5e:	69fb      	ldr	r3, [r7, #28]
 8001d60:	4413      	add	r3, r2
 8001d62:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001d6a:	0151      	lsls	r1, r2, #5
 8001d6c:	69fa      	ldr	r2, [r7, #28]
 8001d6e:	440a      	add	r2, r1
 8001d70:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8001d74:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8001d78:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8001d7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001d7c:	015a      	lsls	r2, r3, #5
 8001d7e:	69fb      	ldr	r3, [r7, #28]
 8001d80:	4413      	add	r3, r2
 8001d82:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001d86:	461a      	mov	r2, r3
 8001d88:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8001d8c:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8001d8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001d90:	015a      	lsls	r2, r3, #5
 8001d92:	69fb      	ldr	r3, [r7, #28]
 8001d94:	4413      	add	r3, r2
 8001d96:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001d9e:	0151      	lsls	r1, r2, #5
 8001da0:	69fa      	ldr	r2, [r7, #28]
 8001da2:	440a      	add	r2, r1
 8001da4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8001da8:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8001dac:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8001dae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001db0:	015a      	lsls	r2, r3, #5
 8001db2:	69fb      	ldr	r3, [r7, #28]
 8001db4:	4413      	add	r3, r2
 8001db6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001dbe:	0151      	lsls	r1, r2, #5
 8001dc0:	69fa      	ldr	r2, [r7, #28]
 8001dc2:	440a      	add	r2, r1
 8001dc4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8001dc8:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8001dcc:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001dce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001dd0:	3301      	adds	r3, #1
 8001dd2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	791b      	ldrb	r3, [r3, #4]
 8001dd8:	461a      	mov	r2, r3
 8001dda:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001ddc:	4293      	cmp	r3, r2
 8001dde:	d3b2      	bcc.n	8001d46 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8001de0:	69fb      	ldr	r3, [r7, #28]
 8001de2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001de6:	69db      	ldr	r3, [r3, #28]
 8001de8:	69fa      	ldr	r2, [r7, #28]
 8001dea:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001dee:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8001df2:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	7bdb      	ldrb	r3, [r3, #15]
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d016      	beq.n	8001e2a <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8001dfc:	69fb      	ldr	r3, [r7, #28]
 8001dfe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001e02:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001e06:	69fa      	ldr	r2, [r7, #28]
 8001e08:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001e0c:	f043 030b 	orr.w	r3, r3, #11
 8001e10:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8001e14:	69fb      	ldr	r3, [r7, #28]
 8001e16:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001e1a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e1c:	69fa      	ldr	r2, [r7, #28]
 8001e1e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001e22:	f043 030b 	orr.w	r3, r3, #11
 8001e26:	6453      	str	r3, [r2, #68]	@ 0x44
 8001e28:	e015      	b.n	8001e56 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8001e2a:	69fb      	ldr	r3, [r7, #28]
 8001e2c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001e30:	695b      	ldr	r3, [r3, #20]
 8001e32:	69fa      	ldr	r2, [r7, #28]
 8001e34:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001e38:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001e3c:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8001e40:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8001e42:	69fb      	ldr	r3, [r7, #28]
 8001e44:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001e48:	691b      	ldr	r3, [r3, #16]
 8001e4a:	69fa      	ldr	r2, [r7, #28]
 8001e4c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001e50:	f043 030b 	orr.w	r3, r3, #11
 8001e54:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8001e56:	69fb      	ldr	r3, [r7, #28]
 8001e58:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	69fa      	ldr	r2, [r7, #28]
 8001e60:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001e64:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8001e68:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	6818      	ldr	r0, [r3, #0]
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001e78:	461a      	mov	r2, r3
 8001e7a:	f004 f881 	bl	8005f80 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	695a      	ldr	r2, [r3, #20]
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8001e8c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	4618      	mov	r0, r3
 8001e94:	f003 ffb0 	bl	8005df8 <USB_ReadInterrupts>
 8001e98:	4603      	mov	r3, r0
 8001e9a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001e9e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001ea2:	d123      	bne.n	8001eec <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	f004 f846 	bl	8005f3a <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	f003 f8fd 	bl	80050b2 <USB_GetDevSpeed>
 8001eb8:	4603      	mov	r3, r0
 8001eba:	461a      	mov	r2, r3
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681c      	ldr	r4, [r3, #0]
 8001ec4:	f001 f9f2 	bl	80032ac <HAL_RCC_GetHCLKFreq>
 8001ec8:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001ece:	461a      	mov	r2, r3
 8001ed0:	4620      	mov	r0, r4
 8001ed2:	f002 fe01 	bl	8004ad8 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8001ed6:	6878      	ldr	r0, [r7, #4]
 8001ed8:	f006 fd2f 	bl	800893a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	695a      	ldr	r2, [r3, #20]
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8001eea:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	f003 ff81 	bl	8005df8 <USB_ReadInterrupts>
 8001ef6:	4603      	mov	r3, r0
 8001ef8:	f003 0308 	and.w	r3, r3, #8
 8001efc:	2b08      	cmp	r3, #8
 8001efe:	d10a      	bne.n	8001f16 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8001f00:	6878      	ldr	r0, [r7, #4]
 8001f02:	f006 fd0c 	bl	800891e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	695a      	ldr	r2, [r3, #20]
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f002 0208 	and.w	r2, r2, #8
 8001f14:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	f003 ff6c 	bl	8005df8 <USB_ReadInterrupts>
 8001f20:	4603      	mov	r3, r0
 8001f22:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001f26:	2b80      	cmp	r3, #128	@ 0x80
 8001f28:	d123      	bne.n	8001f72 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8001f2a:	6a3b      	ldr	r3, [r7, #32]
 8001f2c:	699b      	ldr	r3, [r3, #24]
 8001f2e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8001f32:	6a3b      	ldr	r3, [r7, #32]
 8001f34:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001f36:	2301      	movs	r3, #1
 8001f38:	627b      	str	r3, [r7, #36]	@ 0x24
 8001f3a:	e014      	b.n	8001f66 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8001f3c:	6879      	ldr	r1, [r7, #4]
 8001f3e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001f40:	4613      	mov	r3, r2
 8001f42:	00db      	lsls	r3, r3, #3
 8001f44:	4413      	add	r3, r2
 8001f46:	009b      	lsls	r3, r3, #2
 8001f48:	440b      	add	r3, r1
 8001f4a:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8001f4e:	781b      	ldrb	r3, [r3, #0]
 8001f50:	2b01      	cmp	r3, #1
 8001f52:	d105      	bne.n	8001f60 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8001f54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f56:	b2db      	uxtb	r3, r3
 8001f58:	4619      	mov	r1, r3
 8001f5a:	6878      	ldr	r0, [r7, #4]
 8001f5c:	f000 faf2 	bl	8002544 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001f60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f62:	3301      	adds	r3, #1
 8001f64:	627b      	str	r3, [r7, #36]	@ 0x24
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	791b      	ldrb	r3, [r3, #4]
 8001f6a:	461a      	mov	r2, r3
 8001f6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f6e:	4293      	cmp	r3, r2
 8001f70:	d3e4      	bcc.n	8001f3c <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	4618      	mov	r0, r3
 8001f78:	f003 ff3e 	bl	8005df8 <USB_ReadInterrupts>
 8001f7c:	4603      	mov	r3, r0
 8001f7e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001f82:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8001f86:	d13c      	bne.n	8002002 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001f88:	2301      	movs	r3, #1
 8001f8a:	627b      	str	r3, [r7, #36]	@ 0x24
 8001f8c:	e02b      	b.n	8001fe6 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8001f8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f90:	015a      	lsls	r2, r3, #5
 8001f92:	69fb      	ldr	r3, [r7, #28]
 8001f94:	4413      	add	r3, r2
 8001f96:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001f9e:	6879      	ldr	r1, [r7, #4]
 8001fa0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001fa2:	4613      	mov	r3, r2
 8001fa4:	00db      	lsls	r3, r3, #3
 8001fa6:	4413      	add	r3, r2
 8001fa8:	009b      	lsls	r3, r3, #2
 8001faa:	440b      	add	r3, r1
 8001fac:	3318      	adds	r3, #24
 8001fae:	781b      	ldrb	r3, [r3, #0]
 8001fb0:	2b01      	cmp	r3, #1
 8001fb2:	d115      	bne.n	8001fe0 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8001fb4:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	da12      	bge.n	8001fe0 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8001fba:	6879      	ldr	r1, [r7, #4]
 8001fbc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001fbe:	4613      	mov	r3, r2
 8001fc0:	00db      	lsls	r3, r3, #3
 8001fc2:	4413      	add	r3, r2
 8001fc4:	009b      	lsls	r3, r3, #2
 8001fc6:	440b      	add	r3, r1
 8001fc8:	3317      	adds	r3, #23
 8001fca:	2201      	movs	r2, #1
 8001fcc:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8001fce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fd0:	b2db      	uxtb	r3, r3
 8001fd2:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001fd6:	b2db      	uxtb	r3, r3
 8001fd8:	4619      	mov	r1, r3
 8001fda:	6878      	ldr	r0, [r7, #4]
 8001fdc:	f000 fab2 	bl	8002544 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001fe0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fe2:	3301      	adds	r3, #1
 8001fe4:	627b      	str	r3, [r7, #36]	@ 0x24
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	791b      	ldrb	r3, [r3, #4]
 8001fea:	461a      	mov	r2, r3
 8001fec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fee:	4293      	cmp	r3, r2
 8001ff0:	d3cd      	bcc.n	8001f8e <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	695a      	ldr	r2, [r3, #20]
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8002000:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	4618      	mov	r0, r3
 8002008:	f003 fef6 	bl	8005df8 <USB_ReadInterrupts>
 800200c:	4603      	mov	r3, r0
 800200e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002012:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002016:	d156      	bne.n	80020c6 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002018:	2301      	movs	r3, #1
 800201a:	627b      	str	r3, [r7, #36]	@ 0x24
 800201c:	e045      	b.n	80020aa <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800201e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002020:	015a      	lsls	r2, r3, #5
 8002022:	69fb      	ldr	r3, [r7, #28]
 8002024:	4413      	add	r3, r2
 8002026:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800202e:	6879      	ldr	r1, [r7, #4]
 8002030:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002032:	4613      	mov	r3, r2
 8002034:	00db      	lsls	r3, r3, #3
 8002036:	4413      	add	r3, r2
 8002038:	009b      	lsls	r3, r3, #2
 800203a:	440b      	add	r3, r1
 800203c:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8002040:	781b      	ldrb	r3, [r3, #0]
 8002042:	2b01      	cmp	r3, #1
 8002044:	d12e      	bne.n	80020a4 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002046:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002048:	2b00      	cmp	r3, #0
 800204a:	da2b      	bge.n	80020a4 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 800204c:	69bb      	ldr	r3, [r7, #24]
 800204e:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8002058:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800205c:	429a      	cmp	r2, r3
 800205e:	d121      	bne.n	80020a4 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8002060:	6879      	ldr	r1, [r7, #4]
 8002062:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002064:	4613      	mov	r3, r2
 8002066:	00db      	lsls	r3, r3, #3
 8002068:	4413      	add	r3, r2
 800206a:	009b      	lsls	r3, r3, #2
 800206c:	440b      	add	r3, r1
 800206e:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8002072:	2201      	movs	r2, #1
 8002074:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8002076:	6a3b      	ldr	r3, [r7, #32]
 8002078:	699b      	ldr	r3, [r3, #24]
 800207a:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800207e:	6a3b      	ldr	r3, [r7, #32]
 8002080:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8002082:	6a3b      	ldr	r3, [r7, #32]
 8002084:	695b      	ldr	r3, [r3, #20]
 8002086:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800208a:	2b00      	cmp	r3, #0
 800208c:	d10a      	bne.n	80020a4 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800208e:	69fb      	ldr	r3, [r7, #28]
 8002090:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002094:	685b      	ldr	r3, [r3, #4]
 8002096:	69fa      	ldr	r2, [r7, #28]
 8002098:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800209c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80020a0:	6053      	str	r3, [r2, #4]
            break;
 80020a2:	e008      	b.n	80020b6 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80020a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020a6:	3301      	adds	r3, #1
 80020a8:	627b      	str	r3, [r7, #36]	@ 0x24
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	791b      	ldrb	r3, [r3, #4]
 80020ae:	461a      	mov	r2, r3
 80020b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020b2:	4293      	cmp	r3, r2
 80020b4:	d3b3      	bcc.n	800201e <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	695a      	ldr	r2, [r3, #20]
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 80020c4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	4618      	mov	r0, r3
 80020cc:	f003 fe94 	bl	8005df8 <USB_ReadInterrupts>
 80020d0:	4603      	mov	r3, r0
 80020d2:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80020d6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80020da:	d10a      	bne.n	80020f2 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80020dc:	6878      	ldr	r0, [r7, #4]
 80020de:	f006 fcad 	bl	8008a3c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	695a      	ldr	r2, [r3, #20]
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 80020f0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	4618      	mov	r0, r3
 80020f8:	f003 fe7e 	bl	8005df8 <USB_ReadInterrupts>
 80020fc:	4603      	mov	r3, r0
 80020fe:	f003 0304 	and.w	r3, r3, #4
 8002102:	2b04      	cmp	r3, #4
 8002104:	d115      	bne.n	8002132 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	685b      	ldr	r3, [r3, #4]
 800210c:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800210e:	69bb      	ldr	r3, [r7, #24]
 8002110:	f003 0304 	and.w	r3, r3, #4
 8002114:	2b00      	cmp	r3, #0
 8002116:	d002      	beq.n	800211e <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002118:	6878      	ldr	r0, [r7, #4]
 800211a:	f006 fc9d 	bl	8008a58 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	6859      	ldr	r1, [r3, #4]
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	69ba      	ldr	r2, [r7, #24]
 800212a:	430a      	orrs	r2, r1
 800212c:	605a      	str	r2, [r3, #4]
 800212e:	e000      	b.n	8002132 <HAL_PCD_IRQHandler+0x93c>
      return;
 8002130:	bf00      	nop
    }
  }
}
 8002132:	3734      	adds	r7, #52	@ 0x34
 8002134:	46bd      	mov	sp, r7
 8002136:	bd90      	pop	{r4, r7, pc}

08002138 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	b082      	sub	sp, #8
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]
 8002140:	460b      	mov	r3, r1
 8002142:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800214a:	2b01      	cmp	r3, #1
 800214c:	d101      	bne.n	8002152 <HAL_PCD_SetAddress+0x1a>
 800214e:	2302      	movs	r3, #2
 8002150:	e012      	b.n	8002178 <HAL_PCD_SetAddress+0x40>
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	2201      	movs	r2, #1
 8002156:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	78fa      	ldrb	r2, [r7, #3]
 800215e:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	78fa      	ldrb	r2, [r7, #3]
 8002166:	4611      	mov	r1, r2
 8002168:	4618      	mov	r0, r3
 800216a:	f003 fddd 	bl	8005d28 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	2200      	movs	r2, #0
 8002172:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8002176:	2300      	movs	r3, #0
}
 8002178:	4618      	mov	r0, r3
 800217a:	3708      	adds	r7, #8
 800217c:	46bd      	mov	sp, r7
 800217e:	bd80      	pop	{r7, pc}

08002180 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	b084      	sub	sp, #16
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
 8002188:	4608      	mov	r0, r1
 800218a:	4611      	mov	r1, r2
 800218c:	461a      	mov	r2, r3
 800218e:	4603      	mov	r3, r0
 8002190:	70fb      	strb	r3, [r7, #3]
 8002192:	460b      	mov	r3, r1
 8002194:	803b      	strh	r3, [r7, #0]
 8002196:	4613      	mov	r3, r2
 8002198:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 800219a:	2300      	movs	r3, #0
 800219c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800219e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	da0f      	bge.n	80021c6 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80021a6:	78fb      	ldrb	r3, [r7, #3]
 80021a8:	f003 020f 	and.w	r2, r3, #15
 80021ac:	4613      	mov	r3, r2
 80021ae:	00db      	lsls	r3, r3, #3
 80021b0:	4413      	add	r3, r2
 80021b2:	009b      	lsls	r3, r3, #2
 80021b4:	3310      	adds	r3, #16
 80021b6:	687a      	ldr	r2, [r7, #4]
 80021b8:	4413      	add	r3, r2
 80021ba:	3304      	adds	r3, #4
 80021bc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	2201      	movs	r2, #1
 80021c2:	705a      	strb	r2, [r3, #1]
 80021c4:	e00f      	b.n	80021e6 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80021c6:	78fb      	ldrb	r3, [r7, #3]
 80021c8:	f003 020f 	and.w	r2, r3, #15
 80021cc:	4613      	mov	r3, r2
 80021ce:	00db      	lsls	r3, r3, #3
 80021d0:	4413      	add	r3, r2
 80021d2:	009b      	lsls	r3, r3, #2
 80021d4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80021d8:	687a      	ldr	r2, [r7, #4]
 80021da:	4413      	add	r3, r2
 80021dc:	3304      	adds	r3, #4
 80021de:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	2200      	movs	r2, #0
 80021e4:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80021e6:	78fb      	ldrb	r3, [r7, #3]
 80021e8:	f003 030f 	and.w	r3, r3, #15
 80021ec:	b2da      	uxtb	r2, r3
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 80021f2:	883b      	ldrh	r3, [r7, #0]
 80021f4:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	78ba      	ldrb	r2, [r7, #2]
 8002200:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	785b      	ldrb	r3, [r3, #1]
 8002206:	2b00      	cmp	r3, #0
 8002208:	d004      	beq.n	8002214 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	781b      	ldrb	r3, [r3, #0]
 800220e:	461a      	mov	r2, r3
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002214:	78bb      	ldrb	r3, [r7, #2]
 8002216:	2b02      	cmp	r3, #2
 8002218:	d102      	bne.n	8002220 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	2200      	movs	r2, #0
 800221e:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002226:	2b01      	cmp	r3, #1
 8002228:	d101      	bne.n	800222e <HAL_PCD_EP_Open+0xae>
 800222a:	2302      	movs	r3, #2
 800222c:	e00e      	b.n	800224c <HAL_PCD_EP_Open+0xcc>
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	2201      	movs	r2, #1
 8002232:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	68f9      	ldr	r1, [r7, #12]
 800223c:	4618      	mov	r0, r3
 800223e:	f002 ff5d 	bl	80050fc <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	2200      	movs	r2, #0
 8002246:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 800224a:	7afb      	ldrb	r3, [r7, #11]
}
 800224c:	4618      	mov	r0, r3
 800224e:	3710      	adds	r7, #16
 8002250:	46bd      	mov	sp, r7
 8002252:	bd80      	pop	{r7, pc}

08002254 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	b084      	sub	sp, #16
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
 800225c:	460b      	mov	r3, r1
 800225e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002260:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002264:	2b00      	cmp	r3, #0
 8002266:	da0f      	bge.n	8002288 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002268:	78fb      	ldrb	r3, [r7, #3]
 800226a:	f003 020f 	and.w	r2, r3, #15
 800226e:	4613      	mov	r3, r2
 8002270:	00db      	lsls	r3, r3, #3
 8002272:	4413      	add	r3, r2
 8002274:	009b      	lsls	r3, r3, #2
 8002276:	3310      	adds	r3, #16
 8002278:	687a      	ldr	r2, [r7, #4]
 800227a:	4413      	add	r3, r2
 800227c:	3304      	adds	r3, #4
 800227e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	2201      	movs	r2, #1
 8002284:	705a      	strb	r2, [r3, #1]
 8002286:	e00f      	b.n	80022a8 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002288:	78fb      	ldrb	r3, [r7, #3]
 800228a:	f003 020f 	and.w	r2, r3, #15
 800228e:	4613      	mov	r3, r2
 8002290:	00db      	lsls	r3, r3, #3
 8002292:	4413      	add	r3, r2
 8002294:	009b      	lsls	r3, r3, #2
 8002296:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800229a:	687a      	ldr	r2, [r7, #4]
 800229c:	4413      	add	r3, r2
 800229e:	3304      	adds	r3, #4
 80022a0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	2200      	movs	r2, #0
 80022a6:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80022a8:	78fb      	ldrb	r3, [r7, #3]
 80022aa:	f003 030f 	and.w	r3, r3, #15
 80022ae:	b2da      	uxtb	r2, r3
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80022ba:	2b01      	cmp	r3, #1
 80022bc:	d101      	bne.n	80022c2 <HAL_PCD_EP_Close+0x6e>
 80022be:	2302      	movs	r3, #2
 80022c0:	e00e      	b.n	80022e0 <HAL_PCD_EP_Close+0x8c>
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	2201      	movs	r2, #1
 80022c6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	68f9      	ldr	r1, [r7, #12]
 80022d0:	4618      	mov	r0, r3
 80022d2:	f002 ff9b 	bl	800520c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	2200      	movs	r2, #0
 80022da:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 80022de:	2300      	movs	r3, #0
}
 80022e0:	4618      	mov	r0, r3
 80022e2:	3710      	adds	r7, #16
 80022e4:	46bd      	mov	sp, r7
 80022e6:	bd80      	pop	{r7, pc}

080022e8 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b086      	sub	sp, #24
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	60f8      	str	r0, [r7, #12]
 80022f0:	607a      	str	r2, [r7, #4]
 80022f2:	603b      	str	r3, [r7, #0]
 80022f4:	460b      	mov	r3, r1
 80022f6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80022f8:	7afb      	ldrb	r3, [r7, #11]
 80022fa:	f003 020f 	and.w	r2, r3, #15
 80022fe:	4613      	mov	r3, r2
 8002300:	00db      	lsls	r3, r3, #3
 8002302:	4413      	add	r3, r2
 8002304:	009b      	lsls	r3, r3, #2
 8002306:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800230a:	68fa      	ldr	r2, [r7, #12]
 800230c:	4413      	add	r3, r2
 800230e:	3304      	adds	r3, #4
 8002310:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002312:	697b      	ldr	r3, [r7, #20]
 8002314:	687a      	ldr	r2, [r7, #4]
 8002316:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002318:	697b      	ldr	r3, [r7, #20]
 800231a:	683a      	ldr	r2, [r7, #0]
 800231c:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800231e:	697b      	ldr	r3, [r7, #20]
 8002320:	2200      	movs	r2, #0
 8002322:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8002324:	697b      	ldr	r3, [r7, #20]
 8002326:	2200      	movs	r2, #0
 8002328:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800232a:	7afb      	ldrb	r3, [r7, #11]
 800232c:	f003 030f 	and.w	r3, r3, #15
 8002330:	b2da      	uxtb	r2, r3
 8002332:	697b      	ldr	r3, [r7, #20]
 8002334:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	799b      	ldrb	r3, [r3, #6]
 800233a:	2b01      	cmp	r3, #1
 800233c:	d102      	bne.n	8002344 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800233e:	687a      	ldr	r2, [r7, #4]
 8002340:	697b      	ldr	r3, [r7, #20]
 8002342:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	6818      	ldr	r0, [r3, #0]
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	799b      	ldrb	r3, [r3, #6]
 800234c:	461a      	mov	r2, r3
 800234e:	6979      	ldr	r1, [r7, #20]
 8002350:	f003 f838 	bl	80053c4 <USB_EPStartXfer>

  return HAL_OK;
 8002354:	2300      	movs	r3, #0
}
 8002356:	4618      	mov	r0, r3
 8002358:	3718      	adds	r7, #24
 800235a:	46bd      	mov	sp, r7
 800235c:	bd80      	pop	{r7, pc}

0800235e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800235e:	b580      	push	{r7, lr}
 8002360:	b086      	sub	sp, #24
 8002362:	af00      	add	r7, sp, #0
 8002364:	60f8      	str	r0, [r7, #12]
 8002366:	607a      	str	r2, [r7, #4]
 8002368:	603b      	str	r3, [r7, #0]
 800236a:	460b      	mov	r3, r1
 800236c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800236e:	7afb      	ldrb	r3, [r7, #11]
 8002370:	f003 020f 	and.w	r2, r3, #15
 8002374:	4613      	mov	r3, r2
 8002376:	00db      	lsls	r3, r3, #3
 8002378:	4413      	add	r3, r2
 800237a:	009b      	lsls	r3, r3, #2
 800237c:	3310      	adds	r3, #16
 800237e:	68fa      	ldr	r2, [r7, #12]
 8002380:	4413      	add	r3, r2
 8002382:	3304      	adds	r3, #4
 8002384:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002386:	697b      	ldr	r3, [r7, #20]
 8002388:	687a      	ldr	r2, [r7, #4]
 800238a:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800238c:	697b      	ldr	r3, [r7, #20]
 800238e:	683a      	ldr	r2, [r7, #0]
 8002390:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8002392:	697b      	ldr	r3, [r7, #20]
 8002394:	2200      	movs	r2, #0
 8002396:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8002398:	697b      	ldr	r3, [r7, #20]
 800239a:	2201      	movs	r2, #1
 800239c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800239e:	7afb      	ldrb	r3, [r7, #11]
 80023a0:	f003 030f 	and.w	r3, r3, #15
 80023a4:	b2da      	uxtb	r2, r3
 80023a6:	697b      	ldr	r3, [r7, #20]
 80023a8:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	799b      	ldrb	r3, [r3, #6]
 80023ae:	2b01      	cmp	r3, #1
 80023b0:	d102      	bne.n	80023b8 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80023b2:	687a      	ldr	r2, [r7, #4]
 80023b4:	697b      	ldr	r3, [r7, #20]
 80023b6:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	6818      	ldr	r0, [r3, #0]
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	799b      	ldrb	r3, [r3, #6]
 80023c0:	461a      	mov	r2, r3
 80023c2:	6979      	ldr	r1, [r7, #20]
 80023c4:	f002 fffe 	bl	80053c4 <USB_EPStartXfer>

  return HAL_OK;
 80023c8:	2300      	movs	r3, #0
}
 80023ca:	4618      	mov	r0, r3
 80023cc:	3718      	adds	r7, #24
 80023ce:	46bd      	mov	sp, r7
 80023d0:	bd80      	pop	{r7, pc}

080023d2 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80023d2:	b580      	push	{r7, lr}
 80023d4:	b084      	sub	sp, #16
 80023d6:	af00      	add	r7, sp, #0
 80023d8:	6078      	str	r0, [r7, #4]
 80023da:	460b      	mov	r3, r1
 80023dc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80023de:	78fb      	ldrb	r3, [r7, #3]
 80023e0:	f003 030f 	and.w	r3, r3, #15
 80023e4:	687a      	ldr	r2, [r7, #4]
 80023e6:	7912      	ldrb	r2, [r2, #4]
 80023e8:	4293      	cmp	r3, r2
 80023ea:	d901      	bls.n	80023f0 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80023ec:	2301      	movs	r3, #1
 80023ee:	e04f      	b.n	8002490 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80023f0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	da0f      	bge.n	8002418 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80023f8:	78fb      	ldrb	r3, [r7, #3]
 80023fa:	f003 020f 	and.w	r2, r3, #15
 80023fe:	4613      	mov	r3, r2
 8002400:	00db      	lsls	r3, r3, #3
 8002402:	4413      	add	r3, r2
 8002404:	009b      	lsls	r3, r3, #2
 8002406:	3310      	adds	r3, #16
 8002408:	687a      	ldr	r2, [r7, #4]
 800240a:	4413      	add	r3, r2
 800240c:	3304      	adds	r3, #4
 800240e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	2201      	movs	r2, #1
 8002414:	705a      	strb	r2, [r3, #1]
 8002416:	e00d      	b.n	8002434 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002418:	78fa      	ldrb	r2, [r7, #3]
 800241a:	4613      	mov	r3, r2
 800241c:	00db      	lsls	r3, r3, #3
 800241e:	4413      	add	r3, r2
 8002420:	009b      	lsls	r3, r3, #2
 8002422:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002426:	687a      	ldr	r2, [r7, #4]
 8002428:	4413      	add	r3, r2
 800242a:	3304      	adds	r3, #4
 800242c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	2200      	movs	r2, #0
 8002432:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	2201      	movs	r2, #1
 8002438:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800243a:	78fb      	ldrb	r3, [r7, #3]
 800243c:	f003 030f 	and.w	r3, r3, #15
 8002440:	b2da      	uxtb	r2, r3
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800244c:	2b01      	cmp	r3, #1
 800244e:	d101      	bne.n	8002454 <HAL_PCD_EP_SetStall+0x82>
 8002450:	2302      	movs	r3, #2
 8002452:	e01d      	b.n	8002490 <HAL_PCD_EP_SetStall+0xbe>
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	2201      	movs	r2, #1
 8002458:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	68f9      	ldr	r1, [r7, #12]
 8002462:	4618      	mov	r0, r3
 8002464:	f003 fb8c 	bl	8005b80 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002468:	78fb      	ldrb	r3, [r7, #3]
 800246a:	f003 030f 	and.w	r3, r3, #15
 800246e:	2b00      	cmp	r3, #0
 8002470:	d109      	bne.n	8002486 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	6818      	ldr	r0, [r3, #0]
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	7999      	ldrb	r1, [r3, #6]
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002480:	461a      	mov	r2, r3
 8002482:	f003 fd7d 	bl	8005f80 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	2200      	movs	r2, #0
 800248a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800248e:	2300      	movs	r3, #0
}
 8002490:	4618      	mov	r0, r3
 8002492:	3710      	adds	r7, #16
 8002494:	46bd      	mov	sp, r7
 8002496:	bd80      	pop	{r7, pc}

08002498 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	b084      	sub	sp, #16
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
 80024a0:	460b      	mov	r3, r1
 80024a2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80024a4:	78fb      	ldrb	r3, [r7, #3]
 80024a6:	f003 030f 	and.w	r3, r3, #15
 80024aa:	687a      	ldr	r2, [r7, #4]
 80024ac:	7912      	ldrb	r2, [r2, #4]
 80024ae:	4293      	cmp	r3, r2
 80024b0:	d901      	bls.n	80024b6 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80024b2:	2301      	movs	r3, #1
 80024b4:	e042      	b.n	800253c <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80024b6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	da0f      	bge.n	80024de <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80024be:	78fb      	ldrb	r3, [r7, #3]
 80024c0:	f003 020f 	and.w	r2, r3, #15
 80024c4:	4613      	mov	r3, r2
 80024c6:	00db      	lsls	r3, r3, #3
 80024c8:	4413      	add	r3, r2
 80024ca:	009b      	lsls	r3, r3, #2
 80024cc:	3310      	adds	r3, #16
 80024ce:	687a      	ldr	r2, [r7, #4]
 80024d0:	4413      	add	r3, r2
 80024d2:	3304      	adds	r3, #4
 80024d4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	2201      	movs	r2, #1
 80024da:	705a      	strb	r2, [r3, #1]
 80024dc:	e00f      	b.n	80024fe <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80024de:	78fb      	ldrb	r3, [r7, #3]
 80024e0:	f003 020f 	and.w	r2, r3, #15
 80024e4:	4613      	mov	r3, r2
 80024e6:	00db      	lsls	r3, r3, #3
 80024e8:	4413      	add	r3, r2
 80024ea:	009b      	lsls	r3, r3, #2
 80024ec:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80024f0:	687a      	ldr	r2, [r7, #4]
 80024f2:	4413      	add	r3, r2
 80024f4:	3304      	adds	r3, #4
 80024f6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	2200      	movs	r2, #0
 80024fc:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	2200      	movs	r2, #0
 8002502:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002504:	78fb      	ldrb	r3, [r7, #3]
 8002506:	f003 030f 	and.w	r3, r3, #15
 800250a:	b2da      	uxtb	r2, r3
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002516:	2b01      	cmp	r3, #1
 8002518:	d101      	bne.n	800251e <HAL_PCD_EP_ClrStall+0x86>
 800251a:	2302      	movs	r3, #2
 800251c:	e00e      	b.n	800253c <HAL_PCD_EP_ClrStall+0xa4>
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	2201      	movs	r2, #1
 8002522:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	68f9      	ldr	r1, [r7, #12]
 800252c:	4618      	mov	r0, r3
 800252e:	f003 fb95 	bl	8005c5c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	2200      	movs	r2, #0
 8002536:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800253a:	2300      	movs	r3, #0
}
 800253c:	4618      	mov	r0, r3
 800253e:	3710      	adds	r7, #16
 8002540:	46bd      	mov	sp, r7
 8002542:	bd80      	pop	{r7, pc}

08002544 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	b084      	sub	sp, #16
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
 800254c:	460b      	mov	r3, r1
 800254e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8002550:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002554:	2b00      	cmp	r3, #0
 8002556:	da0c      	bge.n	8002572 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002558:	78fb      	ldrb	r3, [r7, #3]
 800255a:	f003 020f 	and.w	r2, r3, #15
 800255e:	4613      	mov	r3, r2
 8002560:	00db      	lsls	r3, r3, #3
 8002562:	4413      	add	r3, r2
 8002564:	009b      	lsls	r3, r3, #2
 8002566:	3310      	adds	r3, #16
 8002568:	687a      	ldr	r2, [r7, #4]
 800256a:	4413      	add	r3, r2
 800256c:	3304      	adds	r3, #4
 800256e:	60fb      	str	r3, [r7, #12]
 8002570:	e00c      	b.n	800258c <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002572:	78fb      	ldrb	r3, [r7, #3]
 8002574:	f003 020f 	and.w	r2, r3, #15
 8002578:	4613      	mov	r3, r2
 800257a:	00db      	lsls	r3, r3, #3
 800257c:	4413      	add	r3, r2
 800257e:	009b      	lsls	r3, r3, #2
 8002580:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002584:	687a      	ldr	r2, [r7, #4]
 8002586:	4413      	add	r3, r2
 8002588:	3304      	adds	r3, #4
 800258a:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	68f9      	ldr	r1, [r7, #12]
 8002592:	4618      	mov	r0, r3
 8002594:	f003 f9b4 	bl	8005900 <USB_EPStopXfer>
 8002598:	4603      	mov	r3, r0
 800259a:	72fb      	strb	r3, [r7, #11]

  return ret;
 800259c:	7afb      	ldrb	r3, [r7, #11]
}
 800259e:	4618      	mov	r0, r3
 80025a0:	3710      	adds	r7, #16
 80025a2:	46bd      	mov	sp, r7
 80025a4:	bd80      	pop	{r7, pc}

080025a6 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80025a6:	b580      	push	{r7, lr}
 80025a8:	b08a      	sub	sp, #40	@ 0x28
 80025aa:	af02      	add	r7, sp, #8
 80025ac:	6078      	str	r0, [r7, #4]
 80025ae:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80025b6:	697b      	ldr	r3, [r7, #20]
 80025b8:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80025ba:	683a      	ldr	r2, [r7, #0]
 80025bc:	4613      	mov	r3, r2
 80025be:	00db      	lsls	r3, r3, #3
 80025c0:	4413      	add	r3, r2
 80025c2:	009b      	lsls	r3, r3, #2
 80025c4:	3310      	adds	r3, #16
 80025c6:	687a      	ldr	r2, [r7, #4]
 80025c8:	4413      	add	r3, r2
 80025ca:	3304      	adds	r3, #4
 80025cc:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	695a      	ldr	r2, [r3, #20]
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	691b      	ldr	r3, [r3, #16]
 80025d6:	429a      	cmp	r2, r3
 80025d8:	d901      	bls.n	80025de <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80025da:	2301      	movs	r3, #1
 80025dc:	e06b      	b.n	80026b6 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	691a      	ldr	r2, [r3, #16]
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	695b      	ldr	r3, [r3, #20]
 80025e6:	1ad3      	subs	r3, r2, r3
 80025e8:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	689b      	ldr	r3, [r3, #8]
 80025ee:	69fa      	ldr	r2, [r7, #28]
 80025f0:	429a      	cmp	r2, r3
 80025f2:	d902      	bls.n	80025fa <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	689b      	ldr	r3, [r3, #8]
 80025f8:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80025fa:	69fb      	ldr	r3, [r7, #28]
 80025fc:	3303      	adds	r3, #3
 80025fe:	089b      	lsrs	r3, r3, #2
 8002600:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002602:	e02a      	b.n	800265a <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	691a      	ldr	r2, [r3, #16]
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	695b      	ldr	r3, [r3, #20]
 800260c:	1ad3      	subs	r3, r2, r3
 800260e:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	689b      	ldr	r3, [r3, #8]
 8002614:	69fa      	ldr	r2, [r7, #28]
 8002616:	429a      	cmp	r2, r3
 8002618:	d902      	bls.n	8002620 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	689b      	ldr	r3, [r3, #8]
 800261e:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002620:	69fb      	ldr	r3, [r7, #28]
 8002622:	3303      	adds	r3, #3
 8002624:	089b      	lsrs	r3, r3, #2
 8002626:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	68d9      	ldr	r1, [r3, #12]
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	b2da      	uxtb	r2, r3
 8002630:	69fb      	ldr	r3, [r7, #28]
 8002632:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002638:	9300      	str	r3, [sp, #0]
 800263a:	4603      	mov	r3, r0
 800263c:	6978      	ldr	r0, [r7, #20]
 800263e:	f003 fa09 	bl	8005a54 <USB_WritePacket>

    ep->xfer_buff  += len;
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	68da      	ldr	r2, [r3, #12]
 8002646:	69fb      	ldr	r3, [r7, #28]
 8002648:	441a      	add	r2, r3
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	695a      	ldr	r2, [r3, #20]
 8002652:	69fb      	ldr	r3, [r7, #28]
 8002654:	441a      	add	r2, r3
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800265a:	683b      	ldr	r3, [r7, #0]
 800265c:	015a      	lsls	r2, r3, #5
 800265e:	693b      	ldr	r3, [r7, #16]
 8002660:	4413      	add	r3, r2
 8002662:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002666:	699b      	ldr	r3, [r3, #24]
 8002668:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800266a:	69ba      	ldr	r2, [r7, #24]
 800266c:	429a      	cmp	r2, r3
 800266e:	d809      	bhi.n	8002684 <PCD_WriteEmptyTxFifo+0xde>
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	695a      	ldr	r2, [r3, #20]
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002678:	429a      	cmp	r2, r3
 800267a:	d203      	bcs.n	8002684 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	691b      	ldr	r3, [r3, #16]
 8002680:	2b00      	cmp	r3, #0
 8002682:	d1bf      	bne.n	8002604 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	691a      	ldr	r2, [r3, #16]
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	695b      	ldr	r3, [r3, #20]
 800268c:	429a      	cmp	r2, r3
 800268e:	d811      	bhi.n	80026b4 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002690:	683b      	ldr	r3, [r7, #0]
 8002692:	f003 030f 	and.w	r3, r3, #15
 8002696:	2201      	movs	r2, #1
 8002698:	fa02 f303 	lsl.w	r3, r2, r3
 800269c:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800269e:	693b      	ldr	r3, [r7, #16]
 80026a0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80026a4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80026a6:	68bb      	ldr	r3, [r7, #8]
 80026a8:	43db      	mvns	r3, r3
 80026aa:	6939      	ldr	r1, [r7, #16]
 80026ac:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80026b0:	4013      	ands	r3, r2
 80026b2:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 80026b4:	2300      	movs	r3, #0
}
 80026b6:	4618      	mov	r0, r3
 80026b8:	3720      	adds	r7, #32
 80026ba:	46bd      	mov	sp, r7
 80026bc:	bd80      	pop	{r7, pc}
	...

080026c0 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b088      	sub	sp, #32
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
 80026c8:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80026d0:	69fb      	ldr	r3, [r7, #28]
 80026d2:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80026d4:	69fb      	ldr	r3, [r7, #28]
 80026d6:	333c      	adds	r3, #60	@ 0x3c
 80026d8:	3304      	adds	r3, #4
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80026de:	683b      	ldr	r3, [r7, #0]
 80026e0:	015a      	lsls	r2, r3, #5
 80026e2:	69bb      	ldr	r3, [r7, #24]
 80026e4:	4413      	add	r3, r2
 80026e6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80026ea:	689b      	ldr	r3, [r3, #8]
 80026ec:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	799b      	ldrb	r3, [r3, #6]
 80026f2:	2b01      	cmp	r3, #1
 80026f4:	d17b      	bne.n	80027ee <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80026f6:	693b      	ldr	r3, [r7, #16]
 80026f8:	f003 0308 	and.w	r3, r3, #8
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d015      	beq.n	800272c <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002700:	697b      	ldr	r3, [r7, #20]
 8002702:	4a61      	ldr	r2, [pc, #388]	@ (8002888 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002704:	4293      	cmp	r3, r2
 8002706:	f240 80b9 	bls.w	800287c <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800270a:	693b      	ldr	r3, [r7, #16]
 800270c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002710:	2b00      	cmp	r3, #0
 8002712:	f000 80b3 	beq.w	800287c <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002716:	683b      	ldr	r3, [r7, #0]
 8002718:	015a      	lsls	r2, r3, #5
 800271a:	69bb      	ldr	r3, [r7, #24]
 800271c:	4413      	add	r3, r2
 800271e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002722:	461a      	mov	r2, r3
 8002724:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002728:	6093      	str	r3, [r2, #8]
 800272a:	e0a7      	b.n	800287c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800272c:	693b      	ldr	r3, [r7, #16]
 800272e:	f003 0320 	and.w	r3, r3, #32
 8002732:	2b00      	cmp	r3, #0
 8002734:	d009      	beq.n	800274a <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002736:	683b      	ldr	r3, [r7, #0]
 8002738:	015a      	lsls	r2, r3, #5
 800273a:	69bb      	ldr	r3, [r7, #24]
 800273c:	4413      	add	r3, r2
 800273e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002742:	461a      	mov	r2, r3
 8002744:	2320      	movs	r3, #32
 8002746:	6093      	str	r3, [r2, #8]
 8002748:	e098      	b.n	800287c <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800274a:	693b      	ldr	r3, [r7, #16]
 800274c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8002750:	2b00      	cmp	r3, #0
 8002752:	f040 8093 	bne.w	800287c <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002756:	697b      	ldr	r3, [r7, #20]
 8002758:	4a4b      	ldr	r2, [pc, #300]	@ (8002888 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800275a:	4293      	cmp	r3, r2
 800275c:	d90f      	bls.n	800277e <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800275e:	693b      	ldr	r3, [r7, #16]
 8002760:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002764:	2b00      	cmp	r3, #0
 8002766:	d00a      	beq.n	800277e <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	015a      	lsls	r2, r3, #5
 800276c:	69bb      	ldr	r3, [r7, #24]
 800276e:	4413      	add	r3, r2
 8002770:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002774:	461a      	mov	r2, r3
 8002776:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800277a:	6093      	str	r3, [r2, #8]
 800277c:	e07e      	b.n	800287c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800277e:	683a      	ldr	r2, [r7, #0]
 8002780:	4613      	mov	r3, r2
 8002782:	00db      	lsls	r3, r3, #3
 8002784:	4413      	add	r3, r2
 8002786:	009b      	lsls	r3, r3, #2
 8002788:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800278c:	687a      	ldr	r2, [r7, #4]
 800278e:	4413      	add	r3, r2
 8002790:	3304      	adds	r3, #4
 8002792:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	6a1a      	ldr	r2, [r3, #32]
 8002798:	683b      	ldr	r3, [r7, #0]
 800279a:	0159      	lsls	r1, r3, #5
 800279c:	69bb      	ldr	r3, [r7, #24]
 800279e:	440b      	add	r3, r1
 80027a0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80027a4:	691b      	ldr	r3, [r3, #16]
 80027a6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027aa:	1ad2      	subs	r2, r2, r3
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d114      	bne.n	80027e0 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	691b      	ldr	r3, [r3, #16]
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d109      	bne.n	80027d2 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	6818      	ldr	r0, [r3, #0]
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80027c8:	461a      	mov	r2, r3
 80027ca:	2101      	movs	r1, #1
 80027cc:	f003 fbd8 	bl	8005f80 <USB_EP0_OutStart>
 80027d0:	e006      	b.n	80027e0 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	68da      	ldr	r2, [r3, #12]
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	695b      	ldr	r3, [r3, #20]
 80027da:	441a      	add	r2, r3
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80027e0:	683b      	ldr	r3, [r7, #0]
 80027e2:	b2db      	uxtb	r3, r3
 80027e4:	4619      	mov	r1, r3
 80027e6:	6878      	ldr	r0, [r7, #4]
 80027e8:	f006 f864 	bl	80088b4 <HAL_PCD_DataOutStageCallback>
 80027ec:	e046      	b.n	800287c <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80027ee:	697b      	ldr	r3, [r7, #20]
 80027f0:	4a26      	ldr	r2, [pc, #152]	@ (800288c <PCD_EP_OutXfrComplete_int+0x1cc>)
 80027f2:	4293      	cmp	r3, r2
 80027f4:	d124      	bne.n	8002840 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80027f6:	693b      	ldr	r3, [r7, #16]
 80027f8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d00a      	beq.n	8002816 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002800:	683b      	ldr	r3, [r7, #0]
 8002802:	015a      	lsls	r2, r3, #5
 8002804:	69bb      	ldr	r3, [r7, #24]
 8002806:	4413      	add	r3, r2
 8002808:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800280c:	461a      	mov	r2, r3
 800280e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002812:	6093      	str	r3, [r2, #8]
 8002814:	e032      	b.n	800287c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002816:	693b      	ldr	r3, [r7, #16]
 8002818:	f003 0320 	and.w	r3, r3, #32
 800281c:	2b00      	cmp	r3, #0
 800281e:	d008      	beq.n	8002832 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	015a      	lsls	r2, r3, #5
 8002824:	69bb      	ldr	r3, [r7, #24]
 8002826:	4413      	add	r3, r2
 8002828:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800282c:	461a      	mov	r2, r3
 800282e:	2320      	movs	r3, #32
 8002830:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002832:	683b      	ldr	r3, [r7, #0]
 8002834:	b2db      	uxtb	r3, r3
 8002836:	4619      	mov	r1, r3
 8002838:	6878      	ldr	r0, [r7, #4]
 800283a:	f006 f83b 	bl	80088b4 <HAL_PCD_DataOutStageCallback>
 800283e:	e01d      	b.n	800287c <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	2b00      	cmp	r3, #0
 8002844:	d114      	bne.n	8002870 <PCD_EP_OutXfrComplete_int+0x1b0>
 8002846:	6879      	ldr	r1, [r7, #4]
 8002848:	683a      	ldr	r2, [r7, #0]
 800284a:	4613      	mov	r3, r2
 800284c:	00db      	lsls	r3, r3, #3
 800284e:	4413      	add	r3, r2
 8002850:	009b      	lsls	r3, r3, #2
 8002852:	440b      	add	r3, r1
 8002854:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	2b00      	cmp	r3, #0
 800285c:	d108      	bne.n	8002870 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	6818      	ldr	r0, [r3, #0]
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002868:	461a      	mov	r2, r3
 800286a:	2100      	movs	r1, #0
 800286c:	f003 fb88 	bl	8005f80 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002870:	683b      	ldr	r3, [r7, #0]
 8002872:	b2db      	uxtb	r3, r3
 8002874:	4619      	mov	r1, r3
 8002876:	6878      	ldr	r0, [r7, #4]
 8002878:	f006 f81c 	bl	80088b4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800287c:	2300      	movs	r3, #0
}
 800287e:	4618      	mov	r0, r3
 8002880:	3720      	adds	r7, #32
 8002882:	46bd      	mov	sp, r7
 8002884:	bd80      	pop	{r7, pc}
 8002886:	bf00      	nop
 8002888:	4f54300a 	.word	0x4f54300a
 800288c:	4f54310a 	.word	0x4f54310a

08002890 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002890:	b580      	push	{r7, lr}
 8002892:	b086      	sub	sp, #24
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
 8002898:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80028a0:	697b      	ldr	r3, [r7, #20]
 80028a2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80028a4:	697b      	ldr	r3, [r7, #20]
 80028a6:	333c      	adds	r3, #60	@ 0x3c
 80028a8:	3304      	adds	r3, #4
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80028ae:	683b      	ldr	r3, [r7, #0]
 80028b0:	015a      	lsls	r2, r3, #5
 80028b2:	693b      	ldr	r3, [r7, #16]
 80028b4:	4413      	add	r3, r2
 80028b6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80028ba:	689b      	ldr	r3, [r3, #8]
 80028bc:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	4a15      	ldr	r2, [pc, #84]	@ (8002918 <PCD_EP_OutSetupPacket_int+0x88>)
 80028c2:	4293      	cmp	r3, r2
 80028c4:	d90e      	bls.n	80028e4 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80028c6:	68bb      	ldr	r3, [r7, #8]
 80028c8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d009      	beq.n	80028e4 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80028d0:	683b      	ldr	r3, [r7, #0]
 80028d2:	015a      	lsls	r2, r3, #5
 80028d4:	693b      	ldr	r3, [r7, #16]
 80028d6:	4413      	add	r3, r2
 80028d8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80028dc:	461a      	mov	r2, r3
 80028de:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80028e2:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80028e4:	6878      	ldr	r0, [r7, #4]
 80028e6:	f005 ffd3 	bl	8008890 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	4a0a      	ldr	r2, [pc, #40]	@ (8002918 <PCD_EP_OutSetupPacket_int+0x88>)
 80028ee:	4293      	cmp	r3, r2
 80028f0:	d90c      	bls.n	800290c <PCD_EP_OutSetupPacket_int+0x7c>
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	799b      	ldrb	r3, [r3, #6]
 80028f6:	2b01      	cmp	r3, #1
 80028f8:	d108      	bne.n	800290c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	6818      	ldr	r0, [r3, #0]
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002904:	461a      	mov	r2, r3
 8002906:	2101      	movs	r1, #1
 8002908:	f003 fb3a 	bl	8005f80 <USB_EP0_OutStart>
  }

  return HAL_OK;
 800290c:	2300      	movs	r3, #0
}
 800290e:	4618      	mov	r0, r3
 8002910:	3718      	adds	r7, #24
 8002912:	46bd      	mov	sp, r7
 8002914:	bd80      	pop	{r7, pc}
 8002916:	bf00      	nop
 8002918:	4f54300a 	.word	0x4f54300a

0800291c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800291c:	b480      	push	{r7}
 800291e:	b085      	sub	sp, #20
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
 8002924:	460b      	mov	r3, r1
 8002926:	70fb      	strb	r3, [r7, #3]
 8002928:	4613      	mov	r3, r2
 800292a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002932:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002934:	78fb      	ldrb	r3, [r7, #3]
 8002936:	2b00      	cmp	r3, #0
 8002938:	d107      	bne.n	800294a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800293a:	883b      	ldrh	r3, [r7, #0]
 800293c:	0419      	lsls	r1, r3, #16
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	68ba      	ldr	r2, [r7, #8]
 8002944:	430a      	orrs	r2, r1
 8002946:	629a      	str	r2, [r3, #40]	@ 0x28
 8002948:	e028      	b.n	800299c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002950:	0c1b      	lsrs	r3, r3, #16
 8002952:	68ba      	ldr	r2, [r7, #8]
 8002954:	4413      	add	r3, r2
 8002956:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002958:	2300      	movs	r3, #0
 800295a:	73fb      	strb	r3, [r7, #15]
 800295c:	e00d      	b.n	800297a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681a      	ldr	r2, [r3, #0]
 8002962:	7bfb      	ldrb	r3, [r7, #15]
 8002964:	3340      	adds	r3, #64	@ 0x40
 8002966:	009b      	lsls	r3, r3, #2
 8002968:	4413      	add	r3, r2
 800296a:	685b      	ldr	r3, [r3, #4]
 800296c:	0c1b      	lsrs	r3, r3, #16
 800296e:	68ba      	ldr	r2, [r7, #8]
 8002970:	4413      	add	r3, r2
 8002972:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002974:	7bfb      	ldrb	r3, [r7, #15]
 8002976:	3301      	adds	r3, #1
 8002978:	73fb      	strb	r3, [r7, #15]
 800297a:	7bfa      	ldrb	r2, [r7, #15]
 800297c:	78fb      	ldrb	r3, [r7, #3]
 800297e:	3b01      	subs	r3, #1
 8002980:	429a      	cmp	r2, r3
 8002982:	d3ec      	bcc.n	800295e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002984:	883b      	ldrh	r3, [r7, #0]
 8002986:	0418      	lsls	r0, r3, #16
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	6819      	ldr	r1, [r3, #0]
 800298c:	78fb      	ldrb	r3, [r7, #3]
 800298e:	3b01      	subs	r3, #1
 8002990:	68ba      	ldr	r2, [r7, #8]
 8002992:	4302      	orrs	r2, r0
 8002994:	3340      	adds	r3, #64	@ 0x40
 8002996:	009b      	lsls	r3, r3, #2
 8002998:	440b      	add	r3, r1
 800299a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800299c:	2300      	movs	r3, #0
}
 800299e:	4618      	mov	r0, r3
 80029a0:	3714      	adds	r7, #20
 80029a2:	46bd      	mov	sp, r7
 80029a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a8:	4770      	bx	lr

080029aa <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80029aa:	b480      	push	{r7}
 80029ac:	b083      	sub	sp, #12
 80029ae:	af00      	add	r7, sp, #0
 80029b0:	6078      	str	r0, [r7, #4]
 80029b2:	460b      	mov	r3, r1
 80029b4:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	887a      	ldrh	r2, [r7, #2]
 80029bc:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80029be:	2300      	movs	r3, #0
}
 80029c0:	4618      	mov	r0, r3
 80029c2:	370c      	adds	r7, #12
 80029c4:	46bd      	mov	sp, r7
 80029c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ca:	4770      	bx	lr

080029cc <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80029cc:	b480      	push	{r7}
 80029ce:	b083      	sub	sp, #12
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
 80029d4:	460b      	mov	r3, r1
 80029d6:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80029d8:	bf00      	nop
 80029da:	370c      	adds	r7, #12
 80029dc:	46bd      	mov	sp, r7
 80029de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e2:	4770      	bx	lr

080029e4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	b086      	sub	sp, #24
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d101      	bne.n	80029f6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80029f2:	2301      	movs	r3, #1
 80029f4:	e267      	b.n	8002ec6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f003 0301 	and.w	r3, r3, #1
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d075      	beq.n	8002aee <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002a02:	4b88      	ldr	r3, [pc, #544]	@ (8002c24 <HAL_RCC_OscConfig+0x240>)
 8002a04:	689b      	ldr	r3, [r3, #8]
 8002a06:	f003 030c 	and.w	r3, r3, #12
 8002a0a:	2b04      	cmp	r3, #4
 8002a0c:	d00c      	beq.n	8002a28 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002a0e:	4b85      	ldr	r3, [pc, #532]	@ (8002c24 <HAL_RCC_OscConfig+0x240>)
 8002a10:	689b      	ldr	r3, [r3, #8]
 8002a12:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002a16:	2b08      	cmp	r3, #8
 8002a18:	d112      	bne.n	8002a40 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002a1a:	4b82      	ldr	r3, [pc, #520]	@ (8002c24 <HAL_RCC_OscConfig+0x240>)
 8002a1c:	685b      	ldr	r3, [r3, #4]
 8002a1e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002a22:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002a26:	d10b      	bne.n	8002a40 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a28:	4b7e      	ldr	r3, [pc, #504]	@ (8002c24 <HAL_RCC_OscConfig+0x240>)
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d05b      	beq.n	8002aec <HAL_RCC_OscConfig+0x108>
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	685b      	ldr	r3, [r3, #4]
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d157      	bne.n	8002aec <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002a3c:	2301      	movs	r3, #1
 8002a3e:	e242      	b.n	8002ec6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	685b      	ldr	r3, [r3, #4]
 8002a44:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002a48:	d106      	bne.n	8002a58 <HAL_RCC_OscConfig+0x74>
 8002a4a:	4b76      	ldr	r3, [pc, #472]	@ (8002c24 <HAL_RCC_OscConfig+0x240>)
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	4a75      	ldr	r2, [pc, #468]	@ (8002c24 <HAL_RCC_OscConfig+0x240>)
 8002a50:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002a54:	6013      	str	r3, [r2, #0]
 8002a56:	e01d      	b.n	8002a94 <HAL_RCC_OscConfig+0xb0>
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	685b      	ldr	r3, [r3, #4]
 8002a5c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002a60:	d10c      	bne.n	8002a7c <HAL_RCC_OscConfig+0x98>
 8002a62:	4b70      	ldr	r3, [pc, #448]	@ (8002c24 <HAL_RCC_OscConfig+0x240>)
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	4a6f      	ldr	r2, [pc, #444]	@ (8002c24 <HAL_RCC_OscConfig+0x240>)
 8002a68:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002a6c:	6013      	str	r3, [r2, #0]
 8002a6e:	4b6d      	ldr	r3, [pc, #436]	@ (8002c24 <HAL_RCC_OscConfig+0x240>)
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	4a6c      	ldr	r2, [pc, #432]	@ (8002c24 <HAL_RCC_OscConfig+0x240>)
 8002a74:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002a78:	6013      	str	r3, [r2, #0]
 8002a7a:	e00b      	b.n	8002a94 <HAL_RCC_OscConfig+0xb0>
 8002a7c:	4b69      	ldr	r3, [pc, #420]	@ (8002c24 <HAL_RCC_OscConfig+0x240>)
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	4a68      	ldr	r2, [pc, #416]	@ (8002c24 <HAL_RCC_OscConfig+0x240>)
 8002a82:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002a86:	6013      	str	r3, [r2, #0]
 8002a88:	4b66      	ldr	r3, [pc, #408]	@ (8002c24 <HAL_RCC_OscConfig+0x240>)
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	4a65      	ldr	r2, [pc, #404]	@ (8002c24 <HAL_RCC_OscConfig+0x240>)
 8002a8e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002a92:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	685b      	ldr	r3, [r3, #4]
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d013      	beq.n	8002ac4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a9c:	f7fe faa0 	bl	8000fe0 <HAL_GetTick>
 8002aa0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002aa2:	e008      	b.n	8002ab6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002aa4:	f7fe fa9c 	bl	8000fe0 <HAL_GetTick>
 8002aa8:	4602      	mov	r2, r0
 8002aaa:	693b      	ldr	r3, [r7, #16]
 8002aac:	1ad3      	subs	r3, r2, r3
 8002aae:	2b64      	cmp	r3, #100	@ 0x64
 8002ab0:	d901      	bls.n	8002ab6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002ab2:	2303      	movs	r3, #3
 8002ab4:	e207      	b.n	8002ec6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ab6:	4b5b      	ldr	r3, [pc, #364]	@ (8002c24 <HAL_RCC_OscConfig+0x240>)
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d0f0      	beq.n	8002aa4 <HAL_RCC_OscConfig+0xc0>
 8002ac2:	e014      	b.n	8002aee <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ac4:	f7fe fa8c 	bl	8000fe0 <HAL_GetTick>
 8002ac8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002aca:	e008      	b.n	8002ade <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002acc:	f7fe fa88 	bl	8000fe0 <HAL_GetTick>
 8002ad0:	4602      	mov	r2, r0
 8002ad2:	693b      	ldr	r3, [r7, #16]
 8002ad4:	1ad3      	subs	r3, r2, r3
 8002ad6:	2b64      	cmp	r3, #100	@ 0x64
 8002ad8:	d901      	bls.n	8002ade <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002ada:	2303      	movs	r3, #3
 8002adc:	e1f3      	b.n	8002ec6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ade:	4b51      	ldr	r3, [pc, #324]	@ (8002c24 <HAL_RCC_OscConfig+0x240>)
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d1f0      	bne.n	8002acc <HAL_RCC_OscConfig+0xe8>
 8002aea:	e000      	b.n	8002aee <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002aec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f003 0302 	and.w	r3, r3, #2
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d063      	beq.n	8002bc2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002afa:	4b4a      	ldr	r3, [pc, #296]	@ (8002c24 <HAL_RCC_OscConfig+0x240>)
 8002afc:	689b      	ldr	r3, [r3, #8]
 8002afe:	f003 030c 	and.w	r3, r3, #12
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d00b      	beq.n	8002b1e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002b06:	4b47      	ldr	r3, [pc, #284]	@ (8002c24 <HAL_RCC_OscConfig+0x240>)
 8002b08:	689b      	ldr	r3, [r3, #8]
 8002b0a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002b0e:	2b08      	cmp	r3, #8
 8002b10:	d11c      	bne.n	8002b4c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002b12:	4b44      	ldr	r3, [pc, #272]	@ (8002c24 <HAL_RCC_OscConfig+0x240>)
 8002b14:	685b      	ldr	r3, [r3, #4]
 8002b16:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d116      	bne.n	8002b4c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b1e:	4b41      	ldr	r3, [pc, #260]	@ (8002c24 <HAL_RCC_OscConfig+0x240>)
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f003 0302 	and.w	r3, r3, #2
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d005      	beq.n	8002b36 <HAL_RCC_OscConfig+0x152>
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	68db      	ldr	r3, [r3, #12]
 8002b2e:	2b01      	cmp	r3, #1
 8002b30:	d001      	beq.n	8002b36 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002b32:	2301      	movs	r3, #1
 8002b34:	e1c7      	b.n	8002ec6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b36:	4b3b      	ldr	r3, [pc, #236]	@ (8002c24 <HAL_RCC_OscConfig+0x240>)
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	691b      	ldr	r3, [r3, #16]
 8002b42:	00db      	lsls	r3, r3, #3
 8002b44:	4937      	ldr	r1, [pc, #220]	@ (8002c24 <HAL_RCC_OscConfig+0x240>)
 8002b46:	4313      	orrs	r3, r2
 8002b48:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b4a:	e03a      	b.n	8002bc2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	68db      	ldr	r3, [r3, #12]
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d020      	beq.n	8002b96 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002b54:	4b34      	ldr	r3, [pc, #208]	@ (8002c28 <HAL_RCC_OscConfig+0x244>)
 8002b56:	2201      	movs	r2, #1
 8002b58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b5a:	f7fe fa41 	bl	8000fe0 <HAL_GetTick>
 8002b5e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b60:	e008      	b.n	8002b74 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b62:	f7fe fa3d 	bl	8000fe0 <HAL_GetTick>
 8002b66:	4602      	mov	r2, r0
 8002b68:	693b      	ldr	r3, [r7, #16]
 8002b6a:	1ad3      	subs	r3, r2, r3
 8002b6c:	2b02      	cmp	r3, #2
 8002b6e:	d901      	bls.n	8002b74 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002b70:	2303      	movs	r3, #3
 8002b72:	e1a8      	b.n	8002ec6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b74:	4b2b      	ldr	r3, [pc, #172]	@ (8002c24 <HAL_RCC_OscConfig+0x240>)
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f003 0302 	and.w	r3, r3, #2
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d0f0      	beq.n	8002b62 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b80:	4b28      	ldr	r3, [pc, #160]	@ (8002c24 <HAL_RCC_OscConfig+0x240>)
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	691b      	ldr	r3, [r3, #16]
 8002b8c:	00db      	lsls	r3, r3, #3
 8002b8e:	4925      	ldr	r1, [pc, #148]	@ (8002c24 <HAL_RCC_OscConfig+0x240>)
 8002b90:	4313      	orrs	r3, r2
 8002b92:	600b      	str	r3, [r1, #0]
 8002b94:	e015      	b.n	8002bc2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b96:	4b24      	ldr	r3, [pc, #144]	@ (8002c28 <HAL_RCC_OscConfig+0x244>)
 8002b98:	2200      	movs	r2, #0
 8002b9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b9c:	f7fe fa20 	bl	8000fe0 <HAL_GetTick>
 8002ba0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ba2:	e008      	b.n	8002bb6 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ba4:	f7fe fa1c 	bl	8000fe0 <HAL_GetTick>
 8002ba8:	4602      	mov	r2, r0
 8002baa:	693b      	ldr	r3, [r7, #16]
 8002bac:	1ad3      	subs	r3, r2, r3
 8002bae:	2b02      	cmp	r3, #2
 8002bb0:	d901      	bls.n	8002bb6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002bb2:	2303      	movs	r3, #3
 8002bb4:	e187      	b.n	8002ec6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002bb6:	4b1b      	ldr	r3, [pc, #108]	@ (8002c24 <HAL_RCC_OscConfig+0x240>)
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f003 0302 	and.w	r3, r3, #2
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d1f0      	bne.n	8002ba4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f003 0308 	and.w	r3, r3, #8
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d036      	beq.n	8002c3c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	695b      	ldr	r3, [r3, #20]
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d016      	beq.n	8002c04 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002bd6:	4b15      	ldr	r3, [pc, #84]	@ (8002c2c <HAL_RCC_OscConfig+0x248>)
 8002bd8:	2201      	movs	r2, #1
 8002bda:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bdc:	f7fe fa00 	bl	8000fe0 <HAL_GetTick>
 8002be0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002be2:	e008      	b.n	8002bf6 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002be4:	f7fe f9fc 	bl	8000fe0 <HAL_GetTick>
 8002be8:	4602      	mov	r2, r0
 8002bea:	693b      	ldr	r3, [r7, #16]
 8002bec:	1ad3      	subs	r3, r2, r3
 8002bee:	2b02      	cmp	r3, #2
 8002bf0:	d901      	bls.n	8002bf6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002bf2:	2303      	movs	r3, #3
 8002bf4:	e167      	b.n	8002ec6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002bf6:	4b0b      	ldr	r3, [pc, #44]	@ (8002c24 <HAL_RCC_OscConfig+0x240>)
 8002bf8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002bfa:	f003 0302 	and.w	r3, r3, #2
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d0f0      	beq.n	8002be4 <HAL_RCC_OscConfig+0x200>
 8002c02:	e01b      	b.n	8002c3c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c04:	4b09      	ldr	r3, [pc, #36]	@ (8002c2c <HAL_RCC_OscConfig+0x248>)
 8002c06:	2200      	movs	r2, #0
 8002c08:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c0a:	f7fe f9e9 	bl	8000fe0 <HAL_GetTick>
 8002c0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c10:	e00e      	b.n	8002c30 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c12:	f7fe f9e5 	bl	8000fe0 <HAL_GetTick>
 8002c16:	4602      	mov	r2, r0
 8002c18:	693b      	ldr	r3, [r7, #16]
 8002c1a:	1ad3      	subs	r3, r2, r3
 8002c1c:	2b02      	cmp	r3, #2
 8002c1e:	d907      	bls.n	8002c30 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002c20:	2303      	movs	r3, #3
 8002c22:	e150      	b.n	8002ec6 <HAL_RCC_OscConfig+0x4e2>
 8002c24:	40023800 	.word	0x40023800
 8002c28:	42470000 	.word	0x42470000
 8002c2c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c30:	4b88      	ldr	r3, [pc, #544]	@ (8002e54 <HAL_RCC_OscConfig+0x470>)
 8002c32:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002c34:	f003 0302 	and.w	r3, r3, #2
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d1ea      	bne.n	8002c12 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f003 0304 	and.w	r3, r3, #4
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	f000 8097 	beq.w	8002d78 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c4a:	2300      	movs	r3, #0
 8002c4c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c4e:	4b81      	ldr	r3, [pc, #516]	@ (8002e54 <HAL_RCC_OscConfig+0x470>)
 8002c50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c52:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d10f      	bne.n	8002c7a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	60bb      	str	r3, [r7, #8]
 8002c5e:	4b7d      	ldr	r3, [pc, #500]	@ (8002e54 <HAL_RCC_OscConfig+0x470>)
 8002c60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c62:	4a7c      	ldr	r2, [pc, #496]	@ (8002e54 <HAL_RCC_OscConfig+0x470>)
 8002c64:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002c68:	6413      	str	r3, [r2, #64]	@ 0x40
 8002c6a:	4b7a      	ldr	r3, [pc, #488]	@ (8002e54 <HAL_RCC_OscConfig+0x470>)
 8002c6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c6e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c72:	60bb      	str	r3, [r7, #8]
 8002c74:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c76:	2301      	movs	r3, #1
 8002c78:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c7a:	4b77      	ldr	r3, [pc, #476]	@ (8002e58 <HAL_RCC_OscConfig+0x474>)
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d118      	bne.n	8002cb8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c86:	4b74      	ldr	r3, [pc, #464]	@ (8002e58 <HAL_RCC_OscConfig+0x474>)
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	4a73      	ldr	r2, [pc, #460]	@ (8002e58 <HAL_RCC_OscConfig+0x474>)
 8002c8c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002c90:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c92:	f7fe f9a5 	bl	8000fe0 <HAL_GetTick>
 8002c96:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c98:	e008      	b.n	8002cac <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c9a:	f7fe f9a1 	bl	8000fe0 <HAL_GetTick>
 8002c9e:	4602      	mov	r2, r0
 8002ca0:	693b      	ldr	r3, [r7, #16]
 8002ca2:	1ad3      	subs	r3, r2, r3
 8002ca4:	2b02      	cmp	r3, #2
 8002ca6:	d901      	bls.n	8002cac <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002ca8:	2303      	movs	r3, #3
 8002caa:	e10c      	b.n	8002ec6 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cac:	4b6a      	ldr	r3, [pc, #424]	@ (8002e58 <HAL_RCC_OscConfig+0x474>)
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d0f0      	beq.n	8002c9a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	689b      	ldr	r3, [r3, #8]
 8002cbc:	2b01      	cmp	r3, #1
 8002cbe:	d106      	bne.n	8002cce <HAL_RCC_OscConfig+0x2ea>
 8002cc0:	4b64      	ldr	r3, [pc, #400]	@ (8002e54 <HAL_RCC_OscConfig+0x470>)
 8002cc2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002cc4:	4a63      	ldr	r2, [pc, #396]	@ (8002e54 <HAL_RCC_OscConfig+0x470>)
 8002cc6:	f043 0301 	orr.w	r3, r3, #1
 8002cca:	6713      	str	r3, [r2, #112]	@ 0x70
 8002ccc:	e01c      	b.n	8002d08 <HAL_RCC_OscConfig+0x324>
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	689b      	ldr	r3, [r3, #8]
 8002cd2:	2b05      	cmp	r3, #5
 8002cd4:	d10c      	bne.n	8002cf0 <HAL_RCC_OscConfig+0x30c>
 8002cd6:	4b5f      	ldr	r3, [pc, #380]	@ (8002e54 <HAL_RCC_OscConfig+0x470>)
 8002cd8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002cda:	4a5e      	ldr	r2, [pc, #376]	@ (8002e54 <HAL_RCC_OscConfig+0x470>)
 8002cdc:	f043 0304 	orr.w	r3, r3, #4
 8002ce0:	6713      	str	r3, [r2, #112]	@ 0x70
 8002ce2:	4b5c      	ldr	r3, [pc, #368]	@ (8002e54 <HAL_RCC_OscConfig+0x470>)
 8002ce4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ce6:	4a5b      	ldr	r2, [pc, #364]	@ (8002e54 <HAL_RCC_OscConfig+0x470>)
 8002ce8:	f043 0301 	orr.w	r3, r3, #1
 8002cec:	6713      	str	r3, [r2, #112]	@ 0x70
 8002cee:	e00b      	b.n	8002d08 <HAL_RCC_OscConfig+0x324>
 8002cf0:	4b58      	ldr	r3, [pc, #352]	@ (8002e54 <HAL_RCC_OscConfig+0x470>)
 8002cf2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002cf4:	4a57      	ldr	r2, [pc, #348]	@ (8002e54 <HAL_RCC_OscConfig+0x470>)
 8002cf6:	f023 0301 	bic.w	r3, r3, #1
 8002cfa:	6713      	str	r3, [r2, #112]	@ 0x70
 8002cfc:	4b55      	ldr	r3, [pc, #340]	@ (8002e54 <HAL_RCC_OscConfig+0x470>)
 8002cfe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d00:	4a54      	ldr	r2, [pc, #336]	@ (8002e54 <HAL_RCC_OscConfig+0x470>)
 8002d02:	f023 0304 	bic.w	r3, r3, #4
 8002d06:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	689b      	ldr	r3, [r3, #8]
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d015      	beq.n	8002d3c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d10:	f7fe f966 	bl	8000fe0 <HAL_GetTick>
 8002d14:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d16:	e00a      	b.n	8002d2e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d18:	f7fe f962 	bl	8000fe0 <HAL_GetTick>
 8002d1c:	4602      	mov	r2, r0
 8002d1e:	693b      	ldr	r3, [r7, #16]
 8002d20:	1ad3      	subs	r3, r2, r3
 8002d22:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d26:	4293      	cmp	r3, r2
 8002d28:	d901      	bls.n	8002d2e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002d2a:	2303      	movs	r3, #3
 8002d2c:	e0cb      	b.n	8002ec6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d2e:	4b49      	ldr	r3, [pc, #292]	@ (8002e54 <HAL_RCC_OscConfig+0x470>)
 8002d30:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d32:	f003 0302 	and.w	r3, r3, #2
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d0ee      	beq.n	8002d18 <HAL_RCC_OscConfig+0x334>
 8002d3a:	e014      	b.n	8002d66 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d3c:	f7fe f950 	bl	8000fe0 <HAL_GetTick>
 8002d40:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d42:	e00a      	b.n	8002d5a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d44:	f7fe f94c 	bl	8000fe0 <HAL_GetTick>
 8002d48:	4602      	mov	r2, r0
 8002d4a:	693b      	ldr	r3, [r7, #16]
 8002d4c:	1ad3      	subs	r3, r2, r3
 8002d4e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d52:	4293      	cmp	r3, r2
 8002d54:	d901      	bls.n	8002d5a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002d56:	2303      	movs	r3, #3
 8002d58:	e0b5      	b.n	8002ec6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d5a:	4b3e      	ldr	r3, [pc, #248]	@ (8002e54 <HAL_RCC_OscConfig+0x470>)
 8002d5c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d5e:	f003 0302 	and.w	r3, r3, #2
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d1ee      	bne.n	8002d44 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002d66:	7dfb      	ldrb	r3, [r7, #23]
 8002d68:	2b01      	cmp	r3, #1
 8002d6a:	d105      	bne.n	8002d78 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d6c:	4b39      	ldr	r3, [pc, #228]	@ (8002e54 <HAL_RCC_OscConfig+0x470>)
 8002d6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d70:	4a38      	ldr	r2, [pc, #224]	@ (8002e54 <HAL_RCC_OscConfig+0x470>)
 8002d72:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002d76:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	699b      	ldr	r3, [r3, #24]
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	f000 80a1 	beq.w	8002ec4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002d82:	4b34      	ldr	r3, [pc, #208]	@ (8002e54 <HAL_RCC_OscConfig+0x470>)
 8002d84:	689b      	ldr	r3, [r3, #8]
 8002d86:	f003 030c 	and.w	r3, r3, #12
 8002d8a:	2b08      	cmp	r3, #8
 8002d8c:	d05c      	beq.n	8002e48 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	699b      	ldr	r3, [r3, #24]
 8002d92:	2b02      	cmp	r3, #2
 8002d94:	d141      	bne.n	8002e1a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d96:	4b31      	ldr	r3, [pc, #196]	@ (8002e5c <HAL_RCC_OscConfig+0x478>)
 8002d98:	2200      	movs	r2, #0
 8002d9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d9c:	f7fe f920 	bl	8000fe0 <HAL_GetTick>
 8002da0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002da2:	e008      	b.n	8002db6 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002da4:	f7fe f91c 	bl	8000fe0 <HAL_GetTick>
 8002da8:	4602      	mov	r2, r0
 8002daa:	693b      	ldr	r3, [r7, #16]
 8002dac:	1ad3      	subs	r3, r2, r3
 8002dae:	2b02      	cmp	r3, #2
 8002db0:	d901      	bls.n	8002db6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002db2:	2303      	movs	r3, #3
 8002db4:	e087      	b.n	8002ec6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002db6:	4b27      	ldr	r3, [pc, #156]	@ (8002e54 <HAL_RCC_OscConfig+0x470>)
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d1f0      	bne.n	8002da4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	69da      	ldr	r2, [r3, #28]
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	6a1b      	ldr	r3, [r3, #32]
 8002dca:	431a      	orrs	r2, r3
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dd0:	019b      	lsls	r3, r3, #6
 8002dd2:	431a      	orrs	r2, r3
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002dd8:	085b      	lsrs	r3, r3, #1
 8002dda:	3b01      	subs	r3, #1
 8002ddc:	041b      	lsls	r3, r3, #16
 8002dde:	431a      	orrs	r2, r3
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002de4:	061b      	lsls	r3, r3, #24
 8002de6:	491b      	ldr	r1, [pc, #108]	@ (8002e54 <HAL_RCC_OscConfig+0x470>)
 8002de8:	4313      	orrs	r3, r2
 8002dea:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002dec:	4b1b      	ldr	r3, [pc, #108]	@ (8002e5c <HAL_RCC_OscConfig+0x478>)
 8002dee:	2201      	movs	r2, #1
 8002df0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002df2:	f7fe f8f5 	bl	8000fe0 <HAL_GetTick>
 8002df6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002df8:	e008      	b.n	8002e0c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002dfa:	f7fe f8f1 	bl	8000fe0 <HAL_GetTick>
 8002dfe:	4602      	mov	r2, r0
 8002e00:	693b      	ldr	r3, [r7, #16]
 8002e02:	1ad3      	subs	r3, r2, r3
 8002e04:	2b02      	cmp	r3, #2
 8002e06:	d901      	bls.n	8002e0c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002e08:	2303      	movs	r3, #3
 8002e0a:	e05c      	b.n	8002ec6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e0c:	4b11      	ldr	r3, [pc, #68]	@ (8002e54 <HAL_RCC_OscConfig+0x470>)
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d0f0      	beq.n	8002dfa <HAL_RCC_OscConfig+0x416>
 8002e18:	e054      	b.n	8002ec4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e1a:	4b10      	ldr	r3, [pc, #64]	@ (8002e5c <HAL_RCC_OscConfig+0x478>)
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e20:	f7fe f8de 	bl	8000fe0 <HAL_GetTick>
 8002e24:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e26:	e008      	b.n	8002e3a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e28:	f7fe f8da 	bl	8000fe0 <HAL_GetTick>
 8002e2c:	4602      	mov	r2, r0
 8002e2e:	693b      	ldr	r3, [r7, #16]
 8002e30:	1ad3      	subs	r3, r2, r3
 8002e32:	2b02      	cmp	r3, #2
 8002e34:	d901      	bls.n	8002e3a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002e36:	2303      	movs	r3, #3
 8002e38:	e045      	b.n	8002ec6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e3a:	4b06      	ldr	r3, [pc, #24]	@ (8002e54 <HAL_RCC_OscConfig+0x470>)
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d1f0      	bne.n	8002e28 <HAL_RCC_OscConfig+0x444>
 8002e46:	e03d      	b.n	8002ec4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	699b      	ldr	r3, [r3, #24]
 8002e4c:	2b01      	cmp	r3, #1
 8002e4e:	d107      	bne.n	8002e60 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002e50:	2301      	movs	r3, #1
 8002e52:	e038      	b.n	8002ec6 <HAL_RCC_OscConfig+0x4e2>
 8002e54:	40023800 	.word	0x40023800
 8002e58:	40007000 	.word	0x40007000
 8002e5c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002e60:	4b1b      	ldr	r3, [pc, #108]	@ (8002ed0 <HAL_RCC_OscConfig+0x4ec>)
 8002e62:	685b      	ldr	r3, [r3, #4]
 8002e64:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	699b      	ldr	r3, [r3, #24]
 8002e6a:	2b01      	cmp	r3, #1
 8002e6c:	d028      	beq.n	8002ec0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e78:	429a      	cmp	r2, r3
 8002e7a:	d121      	bne.n	8002ec0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e86:	429a      	cmp	r2, r3
 8002e88:	d11a      	bne.n	8002ec0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002e8a:	68fa      	ldr	r2, [r7, #12]
 8002e8c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002e90:	4013      	ands	r3, r2
 8002e92:	687a      	ldr	r2, [r7, #4]
 8002e94:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002e96:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002e98:	4293      	cmp	r3, r2
 8002e9a:	d111      	bne.n	8002ec0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ea6:	085b      	lsrs	r3, r3, #1
 8002ea8:	3b01      	subs	r3, #1
 8002eaa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002eac:	429a      	cmp	r2, r3
 8002eae:	d107      	bne.n	8002ec0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002eba:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002ebc:	429a      	cmp	r2, r3
 8002ebe:	d001      	beq.n	8002ec4 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002ec0:	2301      	movs	r3, #1
 8002ec2:	e000      	b.n	8002ec6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002ec4:	2300      	movs	r3, #0
}
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	3718      	adds	r7, #24
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	bd80      	pop	{r7, pc}
 8002ece:	bf00      	nop
 8002ed0:	40023800 	.word	0x40023800

08002ed4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	b084      	sub	sp, #16
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	6078      	str	r0, [r7, #4]
 8002edc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d101      	bne.n	8002ee8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002ee4:	2301      	movs	r3, #1
 8002ee6:	e0cc      	b.n	8003082 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002ee8:	4b68      	ldr	r3, [pc, #416]	@ (800308c <HAL_RCC_ClockConfig+0x1b8>)
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f003 0307 	and.w	r3, r3, #7
 8002ef0:	683a      	ldr	r2, [r7, #0]
 8002ef2:	429a      	cmp	r2, r3
 8002ef4:	d90c      	bls.n	8002f10 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ef6:	4b65      	ldr	r3, [pc, #404]	@ (800308c <HAL_RCC_ClockConfig+0x1b8>)
 8002ef8:	683a      	ldr	r2, [r7, #0]
 8002efa:	b2d2      	uxtb	r2, r2
 8002efc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002efe:	4b63      	ldr	r3, [pc, #396]	@ (800308c <HAL_RCC_ClockConfig+0x1b8>)
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f003 0307 	and.w	r3, r3, #7
 8002f06:	683a      	ldr	r2, [r7, #0]
 8002f08:	429a      	cmp	r2, r3
 8002f0a:	d001      	beq.n	8002f10 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002f0c:	2301      	movs	r3, #1
 8002f0e:	e0b8      	b.n	8003082 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f003 0302 	and.w	r3, r3, #2
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d020      	beq.n	8002f5e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f003 0304 	and.w	r3, r3, #4
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d005      	beq.n	8002f34 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002f28:	4b59      	ldr	r3, [pc, #356]	@ (8003090 <HAL_RCC_ClockConfig+0x1bc>)
 8002f2a:	689b      	ldr	r3, [r3, #8]
 8002f2c:	4a58      	ldr	r2, [pc, #352]	@ (8003090 <HAL_RCC_ClockConfig+0x1bc>)
 8002f2e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002f32:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f003 0308 	and.w	r3, r3, #8
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d005      	beq.n	8002f4c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002f40:	4b53      	ldr	r3, [pc, #332]	@ (8003090 <HAL_RCC_ClockConfig+0x1bc>)
 8002f42:	689b      	ldr	r3, [r3, #8]
 8002f44:	4a52      	ldr	r2, [pc, #328]	@ (8003090 <HAL_RCC_ClockConfig+0x1bc>)
 8002f46:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002f4a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f4c:	4b50      	ldr	r3, [pc, #320]	@ (8003090 <HAL_RCC_ClockConfig+0x1bc>)
 8002f4e:	689b      	ldr	r3, [r3, #8]
 8002f50:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	689b      	ldr	r3, [r3, #8]
 8002f58:	494d      	ldr	r1, [pc, #308]	@ (8003090 <HAL_RCC_ClockConfig+0x1bc>)
 8002f5a:	4313      	orrs	r3, r2
 8002f5c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f003 0301 	and.w	r3, r3, #1
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d044      	beq.n	8002ff4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	685b      	ldr	r3, [r3, #4]
 8002f6e:	2b01      	cmp	r3, #1
 8002f70:	d107      	bne.n	8002f82 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f72:	4b47      	ldr	r3, [pc, #284]	@ (8003090 <HAL_RCC_ClockConfig+0x1bc>)
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d119      	bne.n	8002fb2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f7e:	2301      	movs	r3, #1
 8002f80:	e07f      	b.n	8003082 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	685b      	ldr	r3, [r3, #4]
 8002f86:	2b02      	cmp	r3, #2
 8002f88:	d003      	beq.n	8002f92 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002f8e:	2b03      	cmp	r3, #3
 8002f90:	d107      	bne.n	8002fa2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f92:	4b3f      	ldr	r3, [pc, #252]	@ (8003090 <HAL_RCC_ClockConfig+0x1bc>)
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d109      	bne.n	8002fb2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f9e:	2301      	movs	r3, #1
 8002fa0:	e06f      	b.n	8003082 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fa2:	4b3b      	ldr	r3, [pc, #236]	@ (8003090 <HAL_RCC_ClockConfig+0x1bc>)
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f003 0302 	and.w	r3, r3, #2
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d101      	bne.n	8002fb2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002fae:	2301      	movs	r3, #1
 8002fb0:	e067      	b.n	8003082 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002fb2:	4b37      	ldr	r3, [pc, #220]	@ (8003090 <HAL_RCC_ClockConfig+0x1bc>)
 8002fb4:	689b      	ldr	r3, [r3, #8]
 8002fb6:	f023 0203 	bic.w	r2, r3, #3
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	685b      	ldr	r3, [r3, #4]
 8002fbe:	4934      	ldr	r1, [pc, #208]	@ (8003090 <HAL_RCC_ClockConfig+0x1bc>)
 8002fc0:	4313      	orrs	r3, r2
 8002fc2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002fc4:	f7fe f80c 	bl	8000fe0 <HAL_GetTick>
 8002fc8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fca:	e00a      	b.n	8002fe2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002fcc:	f7fe f808 	bl	8000fe0 <HAL_GetTick>
 8002fd0:	4602      	mov	r2, r0
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	1ad3      	subs	r3, r2, r3
 8002fd6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002fda:	4293      	cmp	r3, r2
 8002fdc:	d901      	bls.n	8002fe2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002fde:	2303      	movs	r3, #3
 8002fe0:	e04f      	b.n	8003082 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fe2:	4b2b      	ldr	r3, [pc, #172]	@ (8003090 <HAL_RCC_ClockConfig+0x1bc>)
 8002fe4:	689b      	ldr	r3, [r3, #8]
 8002fe6:	f003 020c 	and.w	r2, r3, #12
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	685b      	ldr	r3, [r3, #4]
 8002fee:	009b      	lsls	r3, r3, #2
 8002ff0:	429a      	cmp	r2, r3
 8002ff2:	d1eb      	bne.n	8002fcc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002ff4:	4b25      	ldr	r3, [pc, #148]	@ (800308c <HAL_RCC_ClockConfig+0x1b8>)
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f003 0307 	and.w	r3, r3, #7
 8002ffc:	683a      	ldr	r2, [r7, #0]
 8002ffe:	429a      	cmp	r2, r3
 8003000:	d20c      	bcs.n	800301c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003002:	4b22      	ldr	r3, [pc, #136]	@ (800308c <HAL_RCC_ClockConfig+0x1b8>)
 8003004:	683a      	ldr	r2, [r7, #0]
 8003006:	b2d2      	uxtb	r2, r2
 8003008:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800300a:	4b20      	ldr	r3, [pc, #128]	@ (800308c <HAL_RCC_ClockConfig+0x1b8>)
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f003 0307 	and.w	r3, r3, #7
 8003012:	683a      	ldr	r2, [r7, #0]
 8003014:	429a      	cmp	r2, r3
 8003016:	d001      	beq.n	800301c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003018:	2301      	movs	r3, #1
 800301a:	e032      	b.n	8003082 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f003 0304 	and.w	r3, r3, #4
 8003024:	2b00      	cmp	r3, #0
 8003026:	d008      	beq.n	800303a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003028:	4b19      	ldr	r3, [pc, #100]	@ (8003090 <HAL_RCC_ClockConfig+0x1bc>)
 800302a:	689b      	ldr	r3, [r3, #8]
 800302c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	68db      	ldr	r3, [r3, #12]
 8003034:	4916      	ldr	r1, [pc, #88]	@ (8003090 <HAL_RCC_ClockConfig+0x1bc>)
 8003036:	4313      	orrs	r3, r2
 8003038:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f003 0308 	and.w	r3, r3, #8
 8003042:	2b00      	cmp	r3, #0
 8003044:	d009      	beq.n	800305a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003046:	4b12      	ldr	r3, [pc, #72]	@ (8003090 <HAL_RCC_ClockConfig+0x1bc>)
 8003048:	689b      	ldr	r3, [r3, #8]
 800304a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	691b      	ldr	r3, [r3, #16]
 8003052:	00db      	lsls	r3, r3, #3
 8003054:	490e      	ldr	r1, [pc, #56]	@ (8003090 <HAL_RCC_ClockConfig+0x1bc>)
 8003056:	4313      	orrs	r3, r2
 8003058:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800305a:	f000 f821 	bl	80030a0 <HAL_RCC_GetSysClockFreq>
 800305e:	4602      	mov	r2, r0
 8003060:	4b0b      	ldr	r3, [pc, #44]	@ (8003090 <HAL_RCC_ClockConfig+0x1bc>)
 8003062:	689b      	ldr	r3, [r3, #8]
 8003064:	091b      	lsrs	r3, r3, #4
 8003066:	f003 030f 	and.w	r3, r3, #15
 800306a:	490a      	ldr	r1, [pc, #40]	@ (8003094 <HAL_RCC_ClockConfig+0x1c0>)
 800306c:	5ccb      	ldrb	r3, [r1, r3]
 800306e:	fa22 f303 	lsr.w	r3, r2, r3
 8003072:	4a09      	ldr	r2, [pc, #36]	@ (8003098 <HAL_RCC_ClockConfig+0x1c4>)
 8003074:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003076:	4b09      	ldr	r3, [pc, #36]	@ (800309c <HAL_RCC_ClockConfig+0x1c8>)
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	4618      	mov	r0, r3
 800307c:	f7fd fe6a 	bl	8000d54 <HAL_InitTick>

  return HAL_OK;
 8003080:	2300      	movs	r3, #0
}
 8003082:	4618      	mov	r0, r3
 8003084:	3710      	adds	r7, #16
 8003086:	46bd      	mov	sp, r7
 8003088:	bd80      	pop	{r7, pc}
 800308a:	bf00      	nop
 800308c:	40023c00 	.word	0x40023c00
 8003090:	40023800 	.word	0x40023800
 8003094:	0800991c 	.word	0x0800991c
 8003098:	20000000 	.word	0x20000000
 800309c:	20000004 	.word	0x20000004

080030a0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80030a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80030a4:	b094      	sub	sp, #80	@ 0x50
 80030a6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80030a8:	2300      	movs	r3, #0
 80030aa:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80030ac:	2300      	movs	r3, #0
 80030ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80030b0:	2300      	movs	r3, #0
 80030b2:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80030b4:	2300      	movs	r3, #0
 80030b6:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80030b8:	4b79      	ldr	r3, [pc, #484]	@ (80032a0 <HAL_RCC_GetSysClockFreq+0x200>)
 80030ba:	689b      	ldr	r3, [r3, #8]
 80030bc:	f003 030c 	and.w	r3, r3, #12
 80030c0:	2b08      	cmp	r3, #8
 80030c2:	d00d      	beq.n	80030e0 <HAL_RCC_GetSysClockFreq+0x40>
 80030c4:	2b08      	cmp	r3, #8
 80030c6:	f200 80e1 	bhi.w	800328c <HAL_RCC_GetSysClockFreq+0x1ec>
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d002      	beq.n	80030d4 <HAL_RCC_GetSysClockFreq+0x34>
 80030ce:	2b04      	cmp	r3, #4
 80030d0:	d003      	beq.n	80030da <HAL_RCC_GetSysClockFreq+0x3a>
 80030d2:	e0db      	b.n	800328c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80030d4:	4b73      	ldr	r3, [pc, #460]	@ (80032a4 <HAL_RCC_GetSysClockFreq+0x204>)
 80030d6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80030d8:	e0db      	b.n	8003292 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80030da:	4b73      	ldr	r3, [pc, #460]	@ (80032a8 <HAL_RCC_GetSysClockFreq+0x208>)
 80030dc:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80030de:	e0d8      	b.n	8003292 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80030e0:	4b6f      	ldr	r3, [pc, #444]	@ (80032a0 <HAL_RCC_GetSysClockFreq+0x200>)
 80030e2:	685b      	ldr	r3, [r3, #4]
 80030e4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80030e8:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80030ea:	4b6d      	ldr	r3, [pc, #436]	@ (80032a0 <HAL_RCC_GetSysClockFreq+0x200>)
 80030ec:	685b      	ldr	r3, [r3, #4]
 80030ee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d063      	beq.n	80031be <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80030f6:	4b6a      	ldr	r3, [pc, #424]	@ (80032a0 <HAL_RCC_GetSysClockFreq+0x200>)
 80030f8:	685b      	ldr	r3, [r3, #4]
 80030fa:	099b      	lsrs	r3, r3, #6
 80030fc:	2200      	movs	r2, #0
 80030fe:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003100:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003102:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003104:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003108:	633b      	str	r3, [r7, #48]	@ 0x30
 800310a:	2300      	movs	r3, #0
 800310c:	637b      	str	r3, [r7, #52]	@ 0x34
 800310e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003112:	4622      	mov	r2, r4
 8003114:	462b      	mov	r3, r5
 8003116:	f04f 0000 	mov.w	r0, #0
 800311a:	f04f 0100 	mov.w	r1, #0
 800311e:	0159      	lsls	r1, r3, #5
 8003120:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003124:	0150      	lsls	r0, r2, #5
 8003126:	4602      	mov	r2, r0
 8003128:	460b      	mov	r3, r1
 800312a:	4621      	mov	r1, r4
 800312c:	1a51      	subs	r1, r2, r1
 800312e:	6139      	str	r1, [r7, #16]
 8003130:	4629      	mov	r1, r5
 8003132:	eb63 0301 	sbc.w	r3, r3, r1
 8003136:	617b      	str	r3, [r7, #20]
 8003138:	f04f 0200 	mov.w	r2, #0
 800313c:	f04f 0300 	mov.w	r3, #0
 8003140:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003144:	4659      	mov	r1, fp
 8003146:	018b      	lsls	r3, r1, #6
 8003148:	4651      	mov	r1, sl
 800314a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800314e:	4651      	mov	r1, sl
 8003150:	018a      	lsls	r2, r1, #6
 8003152:	4651      	mov	r1, sl
 8003154:	ebb2 0801 	subs.w	r8, r2, r1
 8003158:	4659      	mov	r1, fp
 800315a:	eb63 0901 	sbc.w	r9, r3, r1
 800315e:	f04f 0200 	mov.w	r2, #0
 8003162:	f04f 0300 	mov.w	r3, #0
 8003166:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800316a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800316e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003172:	4690      	mov	r8, r2
 8003174:	4699      	mov	r9, r3
 8003176:	4623      	mov	r3, r4
 8003178:	eb18 0303 	adds.w	r3, r8, r3
 800317c:	60bb      	str	r3, [r7, #8]
 800317e:	462b      	mov	r3, r5
 8003180:	eb49 0303 	adc.w	r3, r9, r3
 8003184:	60fb      	str	r3, [r7, #12]
 8003186:	f04f 0200 	mov.w	r2, #0
 800318a:	f04f 0300 	mov.w	r3, #0
 800318e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003192:	4629      	mov	r1, r5
 8003194:	024b      	lsls	r3, r1, #9
 8003196:	4621      	mov	r1, r4
 8003198:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800319c:	4621      	mov	r1, r4
 800319e:	024a      	lsls	r2, r1, #9
 80031a0:	4610      	mov	r0, r2
 80031a2:	4619      	mov	r1, r3
 80031a4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80031a6:	2200      	movs	r2, #0
 80031a8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80031aa:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80031ac:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80031b0:	f7fd f80a 	bl	80001c8 <__aeabi_uldivmod>
 80031b4:	4602      	mov	r2, r0
 80031b6:	460b      	mov	r3, r1
 80031b8:	4613      	mov	r3, r2
 80031ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80031bc:	e058      	b.n	8003270 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80031be:	4b38      	ldr	r3, [pc, #224]	@ (80032a0 <HAL_RCC_GetSysClockFreq+0x200>)
 80031c0:	685b      	ldr	r3, [r3, #4]
 80031c2:	099b      	lsrs	r3, r3, #6
 80031c4:	2200      	movs	r2, #0
 80031c6:	4618      	mov	r0, r3
 80031c8:	4611      	mov	r1, r2
 80031ca:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80031ce:	623b      	str	r3, [r7, #32]
 80031d0:	2300      	movs	r3, #0
 80031d2:	627b      	str	r3, [r7, #36]	@ 0x24
 80031d4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80031d8:	4642      	mov	r2, r8
 80031da:	464b      	mov	r3, r9
 80031dc:	f04f 0000 	mov.w	r0, #0
 80031e0:	f04f 0100 	mov.w	r1, #0
 80031e4:	0159      	lsls	r1, r3, #5
 80031e6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80031ea:	0150      	lsls	r0, r2, #5
 80031ec:	4602      	mov	r2, r0
 80031ee:	460b      	mov	r3, r1
 80031f0:	4641      	mov	r1, r8
 80031f2:	ebb2 0a01 	subs.w	sl, r2, r1
 80031f6:	4649      	mov	r1, r9
 80031f8:	eb63 0b01 	sbc.w	fp, r3, r1
 80031fc:	f04f 0200 	mov.w	r2, #0
 8003200:	f04f 0300 	mov.w	r3, #0
 8003204:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003208:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800320c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003210:	ebb2 040a 	subs.w	r4, r2, sl
 8003214:	eb63 050b 	sbc.w	r5, r3, fp
 8003218:	f04f 0200 	mov.w	r2, #0
 800321c:	f04f 0300 	mov.w	r3, #0
 8003220:	00eb      	lsls	r3, r5, #3
 8003222:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003226:	00e2      	lsls	r2, r4, #3
 8003228:	4614      	mov	r4, r2
 800322a:	461d      	mov	r5, r3
 800322c:	4643      	mov	r3, r8
 800322e:	18e3      	adds	r3, r4, r3
 8003230:	603b      	str	r3, [r7, #0]
 8003232:	464b      	mov	r3, r9
 8003234:	eb45 0303 	adc.w	r3, r5, r3
 8003238:	607b      	str	r3, [r7, #4]
 800323a:	f04f 0200 	mov.w	r2, #0
 800323e:	f04f 0300 	mov.w	r3, #0
 8003242:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003246:	4629      	mov	r1, r5
 8003248:	028b      	lsls	r3, r1, #10
 800324a:	4621      	mov	r1, r4
 800324c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003250:	4621      	mov	r1, r4
 8003252:	028a      	lsls	r2, r1, #10
 8003254:	4610      	mov	r0, r2
 8003256:	4619      	mov	r1, r3
 8003258:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800325a:	2200      	movs	r2, #0
 800325c:	61bb      	str	r3, [r7, #24]
 800325e:	61fa      	str	r2, [r7, #28]
 8003260:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003264:	f7fc ffb0 	bl	80001c8 <__aeabi_uldivmod>
 8003268:	4602      	mov	r2, r0
 800326a:	460b      	mov	r3, r1
 800326c:	4613      	mov	r3, r2
 800326e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003270:	4b0b      	ldr	r3, [pc, #44]	@ (80032a0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003272:	685b      	ldr	r3, [r3, #4]
 8003274:	0c1b      	lsrs	r3, r3, #16
 8003276:	f003 0303 	and.w	r3, r3, #3
 800327a:	3301      	adds	r3, #1
 800327c:	005b      	lsls	r3, r3, #1
 800327e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8003280:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003282:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003284:	fbb2 f3f3 	udiv	r3, r2, r3
 8003288:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800328a:	e002      	b.n	8003292 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800328c:	4b05      	ldr	r3, [pc, #20]	@ (80032a4 <HAL_RCC_GetSysClockFreq+0x204>)
 800328e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003290:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003292:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003294:	4618      	mov	r0, r3
 8003296:	3750      	adds	r7, #80	@ 0x50
 8003298:	46bd      	mov	sp, r7
 800329a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800329e:	bf00      	nop
 80032a0:	40023800 	.word	0x40023800
 80032a4:	00f42400 	.word	0x00f42400
 80032a8:	007a1200 	.word	0x007a1200

080032ac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80032ac:	b480      	push	{r7}
 80032ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80032b0:	4b03      	ldr	r3, [pc, #12]	@ (80032c0 <HAL_RCC_GetHCLKFreq+0x14>)
 80032b2:	681b      	ldr	r3, [r3, #0]
}
 80032b4:	4618      	mov	r0, r3
 80032b6:	46bd      	mov	sp, r7
 80032b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032bc:	4770      	bx	lr
 80032be:	bf00      	nop
 80032c0:	20000000 	.word	0x20000000

080032c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80032c4:	b580      	push	{r7, lr}
 80032c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80032c8:	f7ff fff0 	bl	80032ac <HAL_RCC_GetHCLKFreq>
 80032cc:	4602      	mov	r2, r0
 80032ce:	4b05      	ldr	r3, [pc, #20]	@ (80032e4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80032d0:	689b      	ldr	r3, [r3, #8]
 80032d2:	0a9b      	lsrs	r3, r3, #10
 80032d4:	f003 0307 	and.w	r3, r3, #7
 80032d8:	4903      	ldr	r1, [pc, #12]	@ (80032e8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80032da:	5ccb      	ldrb	r3, [r1, r3]
 80032dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80032e0:	4618      	mov	r0, r3
 80032e2:	bd80      	pop	{r7, pc}
 80032e4:	40023800 	.word	0x40023800
 80032e8:	0800992c 	.word	0x0800992c

080032ec <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80032ec:	b480      	push	{r7}
 80032ee:	b083      	sub	sp, #12
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	6078      	str	r0, [r7, #4]
 80032f4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	220f      	movs	r2, #15
 80032fa:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80032fc:	4b12      	ldr	r3, [pc, #72]	@ (8003348 <HAL_RCC_GetClockConfig+0x5c>)
 80032fe:	689b      	ldr	r3, [r3, #8]
 8003300:	f003 0203 	and.w	r2, r3, #3
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003308:	4b0f      	ldr	r3, [pc, #60]	@ (8003348 <HAL_RCC_GetClockConfig+0x5c>)
 800330a:	689b      	ldr	r3, [r3, #8]
 800330c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003314:	4b0c      	ldr	r3, [pc, #48]	@ (8003348 <HAL_RCC_GetClockConfig+0x5c>)
 8003316:	689b      	ldr	r3, [r3, #8]
 8003318:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003320:	4b09      	ldr	r3, [pc, #36]	@ (8003348 <HAL_RCC_GetClockConfig+0x5c>)
 8003322:	689b      	ldr	r3, [r3, #8]
 8003324:	08db      	lsrs	r3, r3, #3
 8003326:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800332e:	4b07      	ldr	r3, [pc, #28]	@ (800334c <HAL_RCC_GetClockConfig+0x60>)
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f003 0207 	and.w	r2, r3, #7
 8003336:	683b      	ldr	r3, [r7, #0]
 8003338:	601a      	str	r2, [r3, #0]
}
 800333a:	bf00      	nop
 800333c:	370c      	adds	r7, #12
 800333e:	46bd      	mov	sp, r7
 8003340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003344:	4770      	bx	lr
 8003346:	bf00      	nop
 8003348:	40023800 	.word	0x40023800
 800334c:	40023c00 	.word	0x40023c00

08003350 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003350:	b580      	push	{r7, lr}
 8003352:	b082      	sub	sp, #8
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	2b00      	cmp	r3, #0
 800335c:	d101      	bne.n	8003362 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800335e:	2301      	movs	r3, #1
 8003360:	e041      	b.n	80033e6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003368:	b2db      	uxtb	r3, r3
 800336a:	2b00      	cmp	r3, #0
 800336c:	d106      	bne.n	800337c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	2200      	movs	r2, #0
 8003372:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003376:	6878      	ldr	r0, [r7, #4]
 8003378:	f7fd fc18 	bl	8000bac <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	2202      	movs	r2, #2
 8003380:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681a      	ldr	r2, [r3, #0]
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	3304      	adds	r3, #4
 800338c:	4619      	mov	r1, r3
 800338e:	4610      	mov	r0, r2
 8003390:	f000 fe60 	bl	8004054 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	2201      	movs	r2, #1
 8003398:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	2201      	movs	r2, #1
 80033a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	2201      	movs	r2, #1
 80033a8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	2201      	movs	r2, #1
 80033b0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	2201      	movs	r2, #1
 80033b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	2201      	movs	r2, #1
 80033c0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	2201      	movs	r2, #1
 80033c8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	2201      	movs	r2, #1
 80033d0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	2201      	movs	r2, #1
 80033d8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	2201      	movs	r2, #1
 80033e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80033e4:	2300      	movs	r3, #0
}
 80033e6:	4618      	mov	r0, r3
 80033e8:	3708      	adds	r7, #8
 80033ea:	46bd      	mov	sp, r7
 80033ec:	bd80      	pop	{r7, pc}
	...

080033f0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80033f0:	b480      	push	{r7}
 80033f2:	b085      	sub	sp, #20
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80033fe:	b2db      	uxtb	r3, r3
 8003400:	2b01      	cmp	r3, #1
 8003402:	d001      	beq.n	8003408 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003404:	2301      	movs	r3, #1
 8003406:	e04e      	b.n	80034a6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	2202      	movs	r2, #2
 800340c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	68da      	ldr	r2, [r3, #12]
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f042 0201 	orr.w	r2, r2, #1
 800341e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	4a23      	ldr	r2, [pc, #140]	@ (80034b4 <HAL_TIM_Base_Start_IT+0xc4>)
 8003426:	4293      	cmp	r3, r2
 8003428:	d022      	beq.n	8003470 <HAL_TIM_Base_Start_IT+0x80>
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003432:	d01d      	beq.n	8003470 <HAL_TIM_Base_Start_IT+0x80>
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	4a1f      	ldr	r2, [pc, #124]	@ (80034b8 <HAL_TIM_Base_Start_IT+0xc8>)
 800343a:	4293      	cmp	r3, r2
 800343c:	d018      	beq.n	8003470 <HAL_TIM_Base_Start_IT+0x80>
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	4a1e      	ldr	r2, [pc, #120]	@ (80034bc <HAL_TIM_Base_Start_IT+0xcc>)
 8003444:	4293      	cmp	r3, r2
 8003446:	d013      	beq.n	8003470 <HAL_TIM_Base_Start_IT+0x80>
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	4a1c      	ldr	r2, [pc, #112]	@ (80034c0 <HAL_TIM_Base_Start_IT+0xd0>)
 800344e:	4293      	cmp	r3, r2
 8003450:	d00e      	beq.n	8003470 <HAL_TIM_Base_Start_IT+0x80>
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	4a1b      	ldr	r2, [pc, #108]	@ (80034c4 <HAL_TIM_Base_Start_IT+0xd4>)
 8003458:	4293      	cmp	r3, r2
 800345a:	d009      	beq.n	8003470 <HAL_TIM_Base_Start_IT+0x80>
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	4a19      	ldr	r2, [pc, #100]	@ (80034c8 <HAL_TIM_Base_Start_IT+0xd8>)
 8003462:	4293      	cmp	r3, r2
 8003464:	d004      	beq.n	8003470 <HAL_TIM_Base_Start_IT+0x80>
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	4a18      	ldr	r2, [pc, #96]	@ (80034cc <HAL_TIM_Base_Start_IT+0xdc>)
 800346c:	4293      	cmp	r3, r2
 800346e:	d111      	bne.n	8003494 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	689b      	ldr	r3, [r3, #8]
 8003476:	f003 0307 	and.w	r3, r3, #7
 800347a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	2b06      	cmp	r3, #6
 8003480:	d010      	beq.n	80034a4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	681a      	ldr	r2, [r3, #0]
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f042 0201 	orr.w	r2, r2, #1
 8003490:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003492:	e007      	b.n	80034a4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	681a      	ldr	r2, [r3, #0]
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f042 0201 	orr.w	r2, r2, #1
 80034a2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80034a4:	2300      	movs	r3, #0
}
 80034a6:	4618      	mov	r0, r3
 80034a8:	3714      	adds	r7, #20
 80034aa:	46bd      	mov	sp, r7
 80034ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b0:	4770      	bx	lr
 80034b2:	bf00      	nop
 80034b4:	40010000 	.word	0x40010000
 80034b8:	40000400 	.word	0x40000400
 80034bc:	40000800 	.word	0x40000800
 80034c0:	40000c00 	.word	0x40000c00
 80034c4:	40010400 	.word	0x40010400
 80034c8:	40014000 	.word	0x40014000
 80034cc:	40001800 	.word	0x40001800

080034d0 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 80034d0:	b580      	push	{r7, lr}
 80034d2:	b082      	sub	sp, #8
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d101      	bne.n	80034e2 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 80034de:	2301      	movs	r3, #1
 80034e0:	e041      	b.n	8003566 <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80034e8:	b2db      	uxtb	r3, r3
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d106      	bne.n	80034fc <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	2200      	movs	r2, #0
 80034f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 80034f6:	6878      	ldr	r0, [r7, #4]
 80034f8:	f000 f839 	bl	800356e <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	2202      	movs	r2, #2
 8003500:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681a      	ldr	r2, [r3, #0]
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	3304      	adds	r3, #4
 800350c:	4619      	mov	r1, r3
 800350e:	4610      	mov	r0, r2
 8003510:	f000 fda0 	bl	8004054 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	2201      	movs	r2, #1
 8003518:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2201      	movs	r2, #1
 8003520:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	2201      	movs	r2, #1
 8003528:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2201      	movs	r2, #1
 8003530:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2201      	movs	r2, #1
 8003538:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	2201      	movs	r2, #1
 8003540:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	2201      	movs	r2, #1
 8003548:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	2201      	movs	r2, #1
 8003550:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	2201      	movs	r2, #1
 8003558:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	2201      	movs	r2, #1
 8003560:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003564:	2300      	movs	r3, #0
}
 8003566:	4618      	mov	r0, r3
 8003568:	3708      	adds	r7, #8
 800356a:	46bd      	mov	sp, r7
 800356c:	bd80      	pop	{r7, pc}

0800356e <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 800356e:	b480      	push	{r7}
 8003570:	b083      	sub	sp, #12
 8003572:	af00      	add	r7, sp, #0
 8003574:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8003576:	bf00      	nop
 8003578:	370c      	adds	r7, #12
 800357a:	46bd      	mov	sp, r7
 800357c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003580:	4770      	bx	lr

08003582 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003582:	b580      	push	{r7, lr}
 8003584:	b082      	sub	sp, #8
 8003586:	af00      	add	r7, sp, #0
 8003588:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	2b00      	cmp	r3, #0
 800358e:	d101      	bne.n	8003594 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003590:	2301      	movs	r3, #1
 8003592:	e041      	b.n	8003618 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800359a:	b2db      	uxtb	r3, r3
 800359c:	2b00      	cmp	r3, #0
 800359e:	d106      	bne.n	80035ae <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	2200      	movs	r2, #0
 80035a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80035a8:	6878      	ldr	r0, [r7, #4]
 80035aa:	f000 f839 	bl	8003620 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	2202      	movs	r2, #2
 80035b2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681a      	ldr	r2, [r3, #0]
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	3304      	adds	r3, #4
 80035be:	4619      	mov	r1, r3
 80035c0:	4610      	mov	r0, r2
 80035c2:	f000 fd47 	bl	8004054 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	2201      	movs	r2, #1
 80035ca:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	2201      	movs	r2, #1
 80035d2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	2201      	movs	r2, #1
 80035da:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	2201      	movs	r2, #1
 80035e2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	2201      	movs	r2, #1
 80035ea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	2201      	movs	r2, #1
 80035f2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	2201      	movs	r2, #1
 80035fa:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	2201      	movs	r2, #1
 8003602:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	2201      	movs	r2, #1
 800360a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	2201      	movs	r2, #1
 8003612:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003616:	2300      	movs	r3, #0
}
 8003618:	4618      	mov	r0, r3
 800361a:	3708      	adds	r7, #8
 800361c:	46bd      	mov	sp, r7
 800361e:	bd80      	pop	{r7, pc}

08003620 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003620:	b480      	push	{r7}
 8003622:	b083      	sub	sp, #12
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003628:	bf00      	nop
 800362a:	370c      	adds	r7, #12
 800362c:	46bd      	mov	sp, r7
 800362e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003632:	4770      	bx	lr

08003634 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003634:	b580      	push	{r7, lr}
 8003636:	b084      	sub	sp, #16
 8003638:	af00      	add	r7, sp, #0
 800363a:	6078      	str	r0, [r7, #4]
 800363c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800363e:	683b      	ldr	r3, [r7, #0]
 8003640:	2b00      	cmp	r3, #0
 8003642:	d109      	bne.n	8003658 <HAL_TIM_PWM_Start+0x24>
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800364a:	b2db      	uxtb	r3, r3
 800364c:	2b01      	cmp	r3, #1
 800364e:	bf14      	ite	ne
 8003650:	2301      	movne	r3, #1
 8003652:	2300      	moveq	r3, #0
 8003654:	b2db      	uxtb	r3, r3
 8003656:	e022      	b.n	800369e <HAL_TIM_PWM_Start+0x6a>
 8003658:	683b      	ldr	r3, [r7, #0]
 800365a:	2b04      	cmp	r3, #4
 800365c:	d109      	bne.n	8003672 <HAL_TIM_PWM_Start+0x3e>
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003664:	b2db      	uxtb	r3, r3
 8003666:	2b01      	cmp	r3, #1
 8003668:	bf14      	ite	ne
 800366a:	2301      	movne	r3, #1
 800366c:	2300      	moveq	r3, #0
 800366e:	b2db      	uxtb	r3, r3
 8003670:	e015      	b.n	800369e <HAL_TIM_PWM_Start+0x6a>
 8003672:	683b      	ldr	r3, [r7, #0]
 8003674:	2b08      	cmp	r3, #8
 8003676:	d109      	bne.n	800368c <HAL_TIM_PWM_Start+0x58>
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800367e:	b2db      	uxtb	r3, r3
 8003680:	2b01      	cmp	r3, #1
 8003682:	bf14      	ite	ne
 8003684:	2301      	movne	r3, #1
 8003686:	2300      	moveq	r3, #0
 8003688:	b2db      	uxtb	r3, r3
 800368a:	e008      	b.n	800369e <HAL_TIM_PWM_Start+0x6a>
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003692:	b2db      	uxtb	r3, r3
 8003694:	2b01      	cmp	r3, #1
 8003696:	bf14      	ite	ne
 8003698:	2301      	movne	r3, #1
 800369a:	2300      	moveq	r3, #0
 800369c:	b2db      	uxtb	r3, r3
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d001      	beq.n	80036a6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80036a2:	2301      	movs	r3, #1
 80036a4:	e07c      	b.n	80037a0 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80036a6:	683b      	ldr	r3, [r7, #0]
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d104      	bne.n	80036b6 <HAL_TIM_PWM_Start+0x82>
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	2202      	movs	r2, #2
 80036b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80036b4:	e013      	b.n	80036de <HAL_TIM_PWM_Start+0xaa>
 80036b6:	683b      	ldr	r3, [r7, #0]
 80036b8:	2b04      	cmp	r3, #4
 80036ba:	d104      	bne.n	80036c6 <HAL_TIM_PWM_Start+0x92>
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	2202      	movs	r2, #2
 80036c0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80036c4:	e00b      	b.n	80036de <HAL_TIM_PWM_Start+0xaa>
 80036c6:	683b      	ldr	r3, [r7, #0]
 80036c8:	2b08      	cmp	r3, #8
 80036ca:	d104      	bne.n	80036d6 <HAL_TIM_PWM_Start+0xa2>
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	2202      	movs	r2, #2
 80036d0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80036d4:	e003      	b.n	80036de <HAL_TIM_PWM_Start+0xaa>
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	2202      	movs	r2, #2
 80036da:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	2201      	movs	r2, #1
 80036e4:	6839      	ldr	r1, [r7, #0]
 80036e6:	4618      	mov	r0, r3
 80036e8:	f000 ffaa 	bl	8004640 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	4a2d      	ldr	r2, [pc, #180]	@ (80037a8 <HAL_TIM_PWM_Start+0x174>)
 80036f2:	4293      	cmp	r3, r2
 80036f4:	d004      	beq.n	8003700 <HAL_TIM_PWM_Start+0xcc>
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	4a2c      	ldr	r2, [pc, #176]	@ (80037ac <HAL_TIM_PWM_Start+0x178>)
 80036fc:	4293      	cmp	r3, r2
 80036fe:	d101      	bne.n	8003704 <HAL_TIM_PWM_Start+0xd0>
 8003700:	2301      	movs	r3, #1
 8003702:	e000      	b.n	8003706 <HAL_TIM_PWM_Start+0xd2>
 8003704:	2300      	movs	r3, #0
 8003706:	2b00      	cmp	r3, #0
 8003708:	d007      	beq.n	800371a <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003718:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	4a22      	ldr	r2, [pc, #136]	@ (80037a8 <HAL_TIM_PWM_Start+0x174>)
 8003720:	4293      	cmp	r3, r2
 8003722:	d022      	beq.n	800376a <HAL_TIM_PWM_Start+0x136>
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800372c:	d01d      	beq.n	800376a <HAL_TIM_PWM_Start+0x136>
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	4a1f      	ldr	r2, [pc, #124]	@ (80037b0 <HAL_TIM_PWM_Start+0x17c>)
 8003734:	4293      	cmp	r3, r2
 8003736:	d018      	beq.n	800376a <HAL_TIM_PWM_Start+0x136>
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	4a1d      	ldr	r2, [pc, #116]	@ (80037b4 <HAL_TIM_PWM_Start+0x180>)
 800373e:	4293      	cmp	r3, r2
 8003740:	d013      	beq.n	800376a <HAL_TIM_PWM_Start+0x136>
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	4a1c      	ldr	r2, [pc, #112]	@ (80037b8 <HAL_TIM_PWM_Start+0x184>)
 8003748:	4293      	cmp	r3, r2
 800374a:	d00e      	beq.n	800376a <HAL_TIM_PWM_Start+0x136>
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	4a16      	ldr	r2, [pc, #88]	@ (80037ac <HAL_TIM_PWM_Start+0x178>)
 8003752:	4293      	cmp	r3, r2
 8003754:	d009      	beq.n	800376a <HAL_TIM_PWM_Start+0x136>
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	4a18      	ldr	r2, [pc, #96]	@ (80037bc <HAL_TIM_PWM_Start+0x188>)
 800375c:	4293      	cmp	r3, r2
 800375e:	d004      	beq.n	800376a <HAL_TIM_PWM_Start+0x136>
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	4a16      	ldr	r2, [pc, #88]	@ (80037c0 <HAL_TIM_PWM_Start+0x18c>)
 8003766:	4293      	cmp	r3, r2
 8003768:	d111      	bne.n	800378e <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	689b      	ldr	r3, [r3, #8]
 8003770:	f003 0307 	and.w	r3, r3, #7
 8003774:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	2b06      	cmp	r3, #6
 800377a:	d010      	beq.n	800379e <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	681a      	ldr	r2, [r3, #0]
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f042 0201 	orr.w	r2, r2, #1
 800378a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800378c:	e007      	b.n	800379e <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	681a      	ldr	r2, [r3, #0]
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f042 0201 	orr.w	r2, r2, #1
 800379c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800379e:	2300      	movs	r3, #0
}
 80037a0:	4618      	mov	r0, r3
 80037a2:	3710      	adds	r7, #16
 80037a4:	46bd      	mov	sp, r7
 80037a6:	bd80      	pop	{r7, pc}
 80037a8:	40010000 	.word	0x40010000
 80037ac:	40010400 	.word	0x40010400
 80037b0:	40000400 	.word	0x40000400
 80037b4:	40000800 	.word	0x40000800
 80037b8:	40000c00 	.word	0x40000c00
 80037bc:	40014000 	.word	0x40014000
 80037c0:	40001800 	.word	0x40001800

080037c4 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 80037c4:	b580      	push	{r7, lr}
 80037c6:	b086      	sub	sp, #24
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	6078      	str	r0, [r7, #4]
 80037cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d101      	bne.n	80037d8 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80037d4:	2301      	movs	r3, #1
 80037d6:	e097      	b.n	8003908 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80037de:	b2db      	uxtb	r3, r3
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d106      	bne.n	80037f2 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	2200      	movs	r2, #0
 80037e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80037ec:	6878      	ldr	r0, [r7, #4]
 80037ee:	f7fd fa05 	bl	8000bfc <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	2202      	movs	r2, #2
 80037f6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	689b      	ldr	r3, [r3, #8]
 8003800:	687a      	ldr	r2, [r7, #4]
 8003802:	6812      	ldr	r2, [r2, #0]
 8003804:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003808:	f023 0307 	bic.w	r3, r3, #7
 800380c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681a      	ldr	r2, [r3, #0]
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	3304      	adds	r3, #4
 8003816:	4619      	mov	r1, r3
 8003818:	4610      	mov	r0, r2
 800381a:	f000 fc1b 	bl	8004054 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	689b      	ldr	r3, [r3, #8]
 8003824:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	699b      	ldr	r3, [r3, #24]
 800382c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	6a1b      	ldr	r3, [r3, #32]
 8003834:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8003836:	683b      	ldr	r3, [r7, #0]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	697a      	ldr	r2, [r7, #20]
 800383c:	4313      	orrs	r3, r2
 800383e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8003840:	693b      	ldr	r3, [r7, #16]
 8003842:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003846:	f023 0303 	bic.w	r3, r3, #3
 800384a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800384c:	683b      	ldr	r3, [r7, #0]
 800384e:	689a      	ldr	r2, [r3, #8]
 8003850:	683b      	ldr	r3, [r7, #0]
 8003852:	699b      	ldr	r3, [r3, #24]
 8003854:	021b      	lsls	r3, r3, #8
 8003856:	4313      	orrs	r3, r2
 8003858:	693a      	ldr	r2, [r7, #16]
 800385a:	4313      	orrs	r3, r2
 800385c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800385e:	693b      	ldr	r3, [r7, #16]
 8003860:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8003864:	f023 030c 	bic.w	r3, r3, #12
 8003868:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800386a:	693b      	ldr	r3, [r7, #16]
 800386c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003870:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003874:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8003876:	683b      	ldr	r3, [r7, #0]
 8003878:	68da      	ldr	r2, [r3, #12]
 800387a:	683b      	ldr	r3, [r7, #0]
 800387c:	69db      	ldr	r3, [r3, #28]
 800387e:	021b      	lsls	r3, r3, #8
 8003880:	4313      	orrs	r3, r2
 8003882:	693a      	ldr	r2, [r7, #16]
 8003884:	4313      	orrs	r3, r2
 8003886:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8003888:	683b      	ldr	r3, [r7, #0]
 800388a:	691b      	ldr	r3, [r3, #16]
 800388c:	011a      	lsls	r2, r3, #4
 800388e:	683b      	ldr	r3, [r7, #0]
 8003890:	6a1b      	ldr	r3, [r3, #32]
 8003892:	031b      	lsls	r3, r3, #12
 8003894:	4313      	orrs	r3, r2
 8003896:	693a      	ldr	r2, [r7, #16]
 8003898:	4313      	orrs	r3, r2
 800389a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 80038a2:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 80038aa:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80038ac:	683b      	ldr	r3, [r7, #0]
 80038ae:	685a      	ldr	r2, [r3, #4]
 80038b0:	683b      	ldr	r3, [r7, #0]
 80038b2:	695b      	ldr	r3, [r3, #20]
 80038b4:	011b      	lsls	r3, r3, #4
 80038b6:	4313      	orrs	r3, r2
 80038b8:	68fa      	ldr	r2, [r7, #12]
 80038ba:	4313      	orrs	r3, r2
 80038bc:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	697a      	ldr	r2, [r7, #20]
 80038c4:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	693a      	ldr	r2, [r7, #16]
 80038cc:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	68fa      	ldr	r2, [r7, #12]
 80038d4:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	2201      	movs	r2, #1
 80038da:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	2201      	movs	r2, #1
 80038e2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	2201      	movs	r2, #1
 80038ea:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	2201      	movs	r2, #1
 80038f2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	2201      	movs	r2, #1
 80038fa:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	2201      	movs	r2, #1
 8003902:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003906:	2300      	movs	r3, #0
}
 8003908:	4618      	mov	r0, r3
 800390a:	3718      	adds	r7, #24
 800390c:	46bd      	mov	sp, r7
 800390e:	bd80      	pop	{r7, pc}

08003910 <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003910:	b580      	push	{r7, lr}
 8003912:	b084      	sub	sp, #16
 8003914:	af00      	add	r7, sp, #0
 8003916:	6078      	str	r0, [r7, #4]
 8003918:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003920:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003928:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003930:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8003938:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800393a:	683b      	ldr	r3, [r7, #0]
 800393c:	2b00      	cmp	r3, #0
 800393e:	d110      	bne.n	8003962 <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003940:	7bfb      	ldrb	r3, [r7, #15]
 8003942:	2b01      	cmp	r3, #1
 8003944:	d102      	bne.n	800394c <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8003946:	7b7b      	ldrb	r3, [r7, #13]
 8003948:	2b01      	cmp	r3, #1
 800394a:	d001      	beq.n	8003950 <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 800394c:	2301      	movs	r3, #1
 800394e:	e089      	b.n	8003a64 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	2202      	movs	r2, #2
 8003954:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	2202      	movs	r2, #2
 800395c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003960:	e031      	b.n	80039c6 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8003962:	683b      	ldr	r3, [r7, #0]
 8003964:	2b04      	cmp	r3, #4
 8003966:	d110      	bne.n	800398a <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003968:	7bbb      	ldrb	r3, [r7, #14]
 800396a:	2b01      	cmp	r3, #1
 800396c:	d102      	bne.n	8003974 <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800396e:	7b3b      	ldrb	r3, [r7, #12]
 8003970:	2b01      	cmp	r3, #1
 8003972:	d001      	beq.n	8003978 <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 8003974:	2301      	movs	r3, #1
 8003976:	e075      	b.n	8003a64 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	2202      	movs	r2, #2
 800397c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	2202      	movs	r2, #2
 8003984:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003988:	e01d      	b.n	80039c6 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800398a:	7bfb      	ldrb	r3, [r7, #15]
 800398c:	2b01      	cmp	r3, #1
 800398e:	d108      	bne.n	80039a2 <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003990:	7bbb      	ldrb	r3, [r7, #14]
 8003992:	2b01      	cmp	r3, #1
 8003994:	d105      	bne.n	80039a2 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003996:	7b7b      	ldrb	r3, [r7, #13]
 8003998:	2b01      	cmp	r3, #1
 800399a:	d102      	bne.n	80039a2 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800399c:	7b3b      	ldrb	r3, [r7, #12]
 800399e:	2b01      	cmp	r3, #1
 80039a0:	d001      	beq.n	80039a6 <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 80039a2:	2301      	movs	r3, #1
 80039a4:	e05e      	b.n	8003a64 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	2202      	movs	r2, #2
 80039aa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	2202      	movs	r2, #2
 80039b2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	2202      	movs	r2, #2
 80039ba:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	2202      	movs	r2, #2
 80039c2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 80039c6:	683b      	ldr	r3, [r7, #0]
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d003      	beq.n	80039d4 <HAL_TIM_Encoder_Start_IT+0xc4>
 80039cc:	683b      	ldr	r3, [r7, #0]
 80039ce:	2b04      	cmp	r3, #4
 80039d0:	d010      	beq.n	80039f4 <HAL_TIM_Encoder_Start_IT+0xe4>
 80039d2:	e01f      	b.n	8003a14 <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	2201      	movs	r2, #1
 80039da:	2100      	movs	r1, #0
 80039dc:	4618      	mov	r0, r3
 80039de:	f000 fe2f 	bl	8004640 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	68da      	ldr	r2, [r3, #12]
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f042 0202 	orr.w	r2, r2, #2
 80039f0:	60da      	str	r2, [r3, #12]
      break;
 80039f2:	e02e      	b.n	8003a52 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	2201      	movs	r2, #1
 80039fa:	2104      	movs	r1, #4
 80039fc:	4618      	mov	r0, r3
 80039fe:	f000 fe1f 	bl	8004640 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	68da      	ldr	r2, [r3, #12]
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f042 0204 	orr.w	r2, r2, #4
 8003a10:	60da      	str	r2, [r3, #12]
      break;
 8003a12:	e01e      	b.n	8003a52 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	2201      	movs	r2, #1
 8003a1a:	2100      	movs	r1, #0
 8003a1c:	4618      	mov	r0, r3
 8003a1e:	f000 fe0f 	bl	8004640 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	2201      	movs	r2, #1
 8003a28:	2104      	movs	r1, #4
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	f000 fe08 	bl	8004640 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	68da      	ldr	r2, [r3, #12]
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f042 0202 	orr.w	r2, r2, #2
 8003a3e:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	68da      	ldr	r2, [r3, #12]
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f042 0204 	orr.w	r2, r2, #4
 8003a4e:	60da      	str	r2, [r3, #12]
      break;
 8003a50:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	681a      	ldr	r2, [r3, #0]
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f042 0201 	orr.w	r2, r2, #1
 8003a60:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8003a62:	2300      	movs	r3, #0
}
 8003a64:	4618      	mov	r0, r3
 8003a66:	3710      	adds	r7, #16
 8003a68:	46bd      	mov	sp, r7
 8003a6a:	bd80      	pop	{r7, pc}

08003a6c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003a6c:	b580      	push	{r7, lr}
 8003a6e:	b084      	sub	sp, #16
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	68db      	ldr	r3, [r3, #12]
 8003a7a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	691b      	ldr	r3, [r3, #16]
 8003a82:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003a84:	68bb      	ldr	r3, [r7, #8]
 8003a86:	f003 0302 	and.w	r3, r3, #2
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d020      	beq.n	8003ad0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	f003 0302 	and.w	r3, r3, #2
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d01b      	beq.n	8003ad0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f06f 0202 	mvn.w	r2, #2
 8003aa0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	2201      	movs	r2, #1
 8003aa6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	699b      	ldr	r3, [r3, #24]
 8003aae:	f003 0303 	and.w	r3, r3, #3
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d003      	beq.n	8003abe <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003ab6:	6878      	ldr	r0, [r7, #4]
 8003ab8:	f7fc fd1c 	bl	80004f4 <HAL_TIM_IC_CaptureCallback>
 8003abc:	e005      	b.n	8003aca <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003abe:	6878      	ldr	r0, [r7, #4]
 8003ac0:	f000 faa9 	bl	8004016 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ac4:	6878      	ldr	r0, [r7, #4]
 8003ac6:	f000 fab0 	bl	800402a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	2200      	movs	r2, #0
 8003ace:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003ad0:	68bb      	ldr	r3, [r7, #8]
 8003ad2:	f003 0304 	and.w	r3, r3, #4
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d020      	beq.n	8003b1c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	f003 0304 	and.w	r3, r3, #4
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d01b      	beq.n	8003b1c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f06f 0204 	mvn.w	r2, #4
 8003aec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	2202      	movs	r2, #2
 8003af2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	699b      	ldr	r3, [r3, #24]
 8003afa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d003      	beq.n	8003b0a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b02:	6878      	ldr	r0, [r7, #4]
 8003b04:	f7fc fcf6 	bl	80004f4 <HAL_TIM_IC_CaptureCallback>
 8003b08:	e005      	b.n	8003b16 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b0a:	6878      	ldr	r0, [r7, #4]
 8003b0c:	f000 fa83 	bl	8004016 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b10:	6878      	ldr	r0, [r7, #4]
 8003b12:	f000 fa8a 	bl	800402a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	2200      	movs	r2, #0
 8003b1a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003b1c:	68bb      	ldr	r3, [r7, #8]
 8003b1e:	f003 0308 	and.w	r3, r3, #8
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d020      	beq.n	8003b68 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	f003 0308 	and.w	r3, r3, #8
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d01b      	beq.n	8003b68 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f06f 0208 	mvn.w	r2, #8
 8003b38:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	2204      	movs	r2, #4
 8003b3e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	69db      	ldr	r3, [r3, #28]
 8003b46:	f003 0303 	and.w	r3, r3, #3
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d003      	beq.n	8003b56 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b4e:	6878      	ldr	r0, [r7, #4]
 8003b50:	f7fc fcd0 	bl	80004f4 <HAL_TIM_IC_CaptureCallback>
 8003b54:	e005      	b.n	8003b62 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b56:	6878      	ldr	r0, [r7, #4]
 8003b58:	f000 fa5d 	bl	8004016 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b5c:	6878      	ldr	r0, [r7, #4]
 8003b5e:	f000 fa64 	bl	800402a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	2200      	movs	r2, #0
 8003b66:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003b68:	68bb      	ldr	r3, [r7, #8]
 8003b6a:	f003 0310 	and.w	r3, r3, #16
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d020      	beq.n	8003bb4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	f003 0310 	and.w	r3, r3, #16
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d01b      	beq.n	8003bb4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f06f 0210 	mvn.w	r2, #16
 8003b84:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	2208      	movs	r2, #8
 8003b8a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	69db      	ldr	r3, [r3, #28]
 8003b92:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d003      	beq.n	8003ba2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b9a:	6878      	ldr	r0, [r7, #4]
 8003b9c:	f7fc fcaa 	bl	80004f4 <HAL_TIM_IC_CaptureCallback>
 8003ba0:	e005      	b.n	8003bae <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ba2:	6878      	ldr	r0, [r7, #4]
 8003ba4:	f000 fa37 	bl	8004016 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ba8:	6878      	ldr	r0, [r7, #4]
 8003baa:	f000 fa3e 	bl	800402a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	2200      	movs	r2, #0
 8003bb2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003bb4:	68bb      	ldr	r3, [r7, #8]
 8003bb6:	f003 0301 	and.w	r3, r3, #1
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d00c      	beq.n	8003bd8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	f003 0301 	and.w	r3, r3, #1
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d007      	beq.n	8003bd8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f06f 0201 	mvn.w	r2, #1
 8003bd0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003bd2:	6878      	ldr	r0, [r7, #4]
 8003bd4:	f7fc ffaa 	bl	8000b2c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003bd8:	68bb      	ldr	r3, [r7, #8]
 8003bda:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d00c      	beq.n	8003bfc <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d007      	beq.n	8003bfc <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003bf4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003bf6:	6878      	ldr	r0, [r7, #4]
 8003bf8:	f000 feda 	bl	80049b0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003bfc:	68bb      	ldr	r3, [r7, #8]
 8003bfe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d00c      	beq.n	8003c20 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d007      	beq.n	8003c20 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003c18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003c1a:	6878      	ldr	r0, [r7, #4]
 8003c1c:	f000 fa0f 	bl	800403e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003c20:	68bb      	ldr	r3, [r7, #8]
 8003c22:	f003 0320 	and.w	r3, r3, #32
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d00c      	beq.n	8003c44 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	f003 0320 	and.w	r3, r3, #32
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d007      	beq.n	8003c44 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f06f 0220 	mvn.w	r2, #32
 8003c3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003c3e:	6878      	ldr	r0, [r7, #4]
 8003c40:	f000 feac 	bl	800499c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003c44:	bf00      	nop
 8003c46:	3710      	adds	r7, #16
 8003c48:	46bd      	mov	sp, r7
 8003c4a:	bd80      	pop	{r7, pc}

08003c4c <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8003c4c:	b580      	push	{r7, lr}
 8003c4e:	b086      	sub	sp, #24
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	60f8      	str	r0, [r7, #12]
 8003c54:	60b9      	str	r1, [r7, #8]
 8003c56:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003c58:	2300      	movs	r3, #0
 8003c5a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003c62:	2b01      	cmp	r3, #1
 8003c64:	d101      	bne.n	8003c6a <HAL_TIM_OC_ConfigChannel+0x1e>
 8003c66:	2302      	movs	r3, #2
 8003c68:	e048      	b.n	8003cfc <HAL_TIM_OC_ConfigChannel+0xb0>
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	2201      	movs	r2, #1
 8003c6e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	2b0c      	cmp	r3, #12
 8003c76:	d839      	bhi.n	8003cec <HAL_TIM_OC_ConfigChannel+0xa0>
 8003c78:	a201      	add	r2, pc, #4	@ (adr r2, 8003c80 <HAL_TIM_OC_ConfigChannel+0x34>)
 8003c7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c7e:	bf00      	nop
 8003c80:	08003cb5 	.word	0x08003cb5
 8003c84:	08003ced 	.word	0x08003ced
 8003c88:	08003ced 	.word	0x08003ced
 8003c8c:	08003ced 	.word	0x08003ced
 8003c90:	08003cc3 	.word	0x08003cc3
 8003c94:	08003ced 	.word	0x08003ced
 8003c98:	08003ced 	.word	0x08003ced
 8003c9c:	08003ced 	.word	0x08003ced
 8003ca0:	08003cd1 	.word	0x08003cd1
 8003ca4:	08003ced 	.word	0x08003ced
 8003ca8:	08003ced 	.word	0x08003ced
 8003cac:	08003ced 	.word	0x08003ced
 8003cb0:	08003cdf 	.word	0x08003cdf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	68b9      	ldr	r1, [r7, #8]
 8003cba:	4618      	mov	r0, r3
 8003cbc:	f000 fa76 	bl	80041ac <TIM_OC1_SetConfig>
      break;
 8003cc0:	e017      	b.n	8003cf2 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	68b9      	ldr	r1, [r7, #8]
 8003cc8:	4618      	mov	r0, r3
 8003cca:	f000 fadf 	bl	800428c <TIM_OC2_SetConfig>
      break;
 8003cce:	e010      	b.n	8003cf2 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	68b9      	ldr	r1, [r7, #8]
 8003cd6:	4618      	mov	r0, r3
 8003cd8:	f000 fb4e 	bl	8004378 <TIM_OC3_SetConfig>
      break;
 8003cdc:	e009      	b.n	8003cf2 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	68b9      	ldr	r1, [r7, #8]
 8003ce4:	4618      	mov	r0, r3
 8003ce6:	f000 fbbb 	bl	8004460 <TIM_OC4_SetConfig>
      break;
 8003cea:	e002      	b.n	8003cf2 <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8003cec:	2301      	movs	r3, #1
 8003cee:	75fb      	strb	r3, [r7, #23]
      break;
 8003cf0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	2200      	movs	r2, #0
 8003cf6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003cfa:	7dfb      	ldrb	r3, [r7, #23]
}
 8003cfc:	4618      	mov	r0, r3
 8003cfe:	3718      	adds	r7, #24
 8003d00:	46bd      	mov	sp, r7
 8003d02:	bd80      	pop	{r7, pc}

08003d04 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003d04:	b580      	push	{r7, lr}
 8003d06:	b086      	sub	sp, #24
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	60f8      	str	r0, [r7, #12]
 8003d0c:	60b9      	str	r1, [r7, #8]
 8003d0e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003d10:	2300      	movs	r3, #0
 8003d12:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003d1a:	2b01      	cmp	r3, #1
 8003d1c:	d101      	bne.n	8003d22 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003d1e:	2302      	movs	r3, #2
 8003d20:	e0ae      	b.n	8003e80 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	2201      	movs	r2, #1
 8003d26:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	2b0c      	cmp	r3, #12
 8003d2e:	f200 809f 	bhi.w	8003e70 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003d32:	a201      	add	r2, pc, #4	@ (adr r2, 8003d38 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003d34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d38:	08003d6d 	.word	0x08003d6d
 8003d3c:	08003e71 	.word	0x08003e71
 8003d40:	08003e71 	.word	0x08003e71
 8003d44:	08003e71 	.word	0x08003e71
 8003d48:	08003dad 	.word	0x08003dad
 8003d4c:	08003e71 	.word	0x08003e71
 8003d50:	08003e71 	.word	0x08003e71
 8003d54:	08003e71 	.word	0x08003e71
 8003d58:	08003def 	.word	0x08003def
 8003d5c:	08003e71 	.word	0x08003e71
 8003d60:	08003e71 	.word	0x08003e71
 8003d64:	08003e71 	.word	0x08003e71
 8003d68:	08003e2f 	.word	0x08003e2f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	68b9      	ldr	r1, [r7, #8]
 8003d72:	4618      	mov	r0, r3
 8003d74:	f000 fa1a 	bl	80041ac <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	699a      	ldr	r2, [r3, #24]
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f042 0208 	orr.w	r2, r2, #8
 8003d86:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	699a      	ldr	r2, [r3, #24]
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f022 0204 	bic.w	r2, r2, #4
 8003d96:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	6999      	ldr	r1, [r3, #24]
 8003d9e:	68bb      	ldr	r3, [r7, #8]
 8003da0:	691a      	ldr	r2, [r3, #16]
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	430a      	orrs	r2, r1
 8003da8:	619a      	str	r2, [r3, #24]
      break;
 8003daa:	e064      	b.n	8003e76 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	68b9      	ldr	r1, [r7, #8]
 8003db2:	4618      	mov	r0, r3
 8003db4:	f000 fa6a 	bl	800428c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	699a      	ldr	r2, [r3, #24]
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003dc6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	699a      	ldr	r2, [r3, #24]
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003dd6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	6999      	ldr	r1, [r3, #24]
 8003dde:	68bb      	ldr	r3, [r7, #8]
 8003de0:	691b      	ldr	r3, [r3, #16]
 8003de2:	021a      	lsls	r2, r3, #8
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	430a      	orrs	r2, r1
 8003dea:	619a      	str	r2, [r3, #24]
      break;
 8003dec:	e043      	b.n	8003e76 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	68b9      	ldr	r1, [r7, #8]
 8003df4:	4618      	mov	r0, r3
 8003df6:	f000 fabf 	bl	8004378 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	69da      	ldr	r2, [r3, #28]
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f042 0208 	orr.w	r2, r2, #8
 8003e08:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	69da      	ldr	r2, [r3, #28]
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f022 0204 	bic.w	r2, r2, #4
 8003e18:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	69d9      	ldr	r1, [r3, #28]
 8003e20:	68bb      	ldr	r3, [r7, #8]
 8003e22:	691a      	ldr	r2, [r3, #16]
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	430a      	orrs	r2, r1
 8003e2a:	61da      	str	r2, [r3, #28]
      break;
 8003e2c:	e023      	b.n	8003e76 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	68b9      	ldr	r1, [r7, #8]
 8003e34:	4618      	mov	r0, r3
 8003e36:	f000 fb13 	bl	8004460 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	69da      	ldr	r2, [r3, #28]
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003e48:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	69da      	ldr	r2, [r3, #28]
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003e58:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	69d9      	ldr	r1, [r3, #28]
 8003e60:	68bb      	ldr	r3, [r7, #8]
 8003e62:	691b      	ldr	r3, [r3, #16]
 8003e64:	021a      	lsls	r2, r3, #8
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	430a      	orrs	r2, r1
 8003e6c:	61da      	str	r2, [r3, #28]
      break;
 8003e6e:	e002      	b.n	8003e76 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003e70:	2301      	movs	r3, #1
 8003e72:	75fb      	strb	r3, [r7, #23]
      break;
 8003e74:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	2200      	movs	r2, #0
 8003e7a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003e7e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003e80:	4618      	mov	r0, r3
 8003e82:	3718      	adds	r7, #24
 8003e84:	46bd      	mov	sp, r7
 8003e86:	bd80      	pop	{r7, pc}

08003e88 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003e88:	b580      	push	{r7, lr}
 8003e8a:	b084      	sub	sp, #16
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	6078      	str	r0, [r7, #4]
 8003e90:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003e92:	2300      	movs	r3, #0
 8003e94:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003e9c:	2b01      	cmp	r3, #1
 8003e9e:	d101      	bne.n	8003ea4 <HAL_TIM_ConfigClockSource+0x1c>
 8003ea0:	2302      	movs	r3, #2
 8003ea2:	e0b4      	b.n	800400e <HAL_TIM_ConfigClockSource+0x186>
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	2201      	movs	r2, #1
 8003ea8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	2202      	movs	r2, #2
 8003eb0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	689b      	ldr	r3, [r3, #8]
 8003eba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003ebc:	68bb      	ldr	r3, [r7, #8]
 8003ebe:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003ec2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003ec4:	68bb      	ldr	r3, [r7, #8]
 8003ec6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003eca:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	68ba      	ldr	r2, [r7, #8]
 8003ed2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003ed4:	683b      	ldr	r3, [r7, #0]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003edc:	d03e      	beq.n	8003f5c <HAL_TIM_ConfigClockSource+0xd4>
 8003ede:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003ee2:	f200 8087 	bhi.w	8003ff4 <HAL_TIM_ConfigClockSource+0x16c>
 8003ee6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003eea:	f000 8086 	beq.w	8003ffa <HAL_TIM_ConfigClockSource+0x172>
 8003eee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003ef2:	d87f      	bhi.n	8003ff4 <HAL_TIM_ConfigClockSource+0x16c>
 8003ef4:	2b70      	cmp	r3, #112	@ 0x70
 8003ef6:	d01a      	beq.n	8003f2e <HAL_TIM_ConfigClockSource+0xa6>
 8003ef8:	2b70      	cmp	r3, #112	@ 0x70
 8003efa:	d87b      	bhi.n	8003ff4 <HAL_TIM_ConfigClockSource+0x16c>
 8003efc:	2b60      	cmp	r3, #96	@ 0x60
 8003efe:	d050      	beq.n	8003fa2 <HAL_TIM_ConfigClockSource+0x11a>
 8003f00:	2b60      	cmp	r3, #96	@ 0x60
 8003f02:	d877      	bhi.n	8003ff4 <HAL_TIM_ConfigClockSource+0x16c>
 8003f04:	2b50      	cmp	r3, #80	@ 0x50
 8003f06:	d03c      	beq.n	8003f82 <HAL_TIM_ConfigClockSource+0xfa>
 8003f08:	2b50      	cmp	r3, #80	@ 0x50
 8003f0a:	d873      	bhi.n	8003ff4 <HAL_TIM_ConfigClockSource+0x16c>
 8003f0c:	2b40      	cmp	r3, #64	@ 0x40
 8003f0e:	d058      	beq.n	8003fc2 <HAL_TIM_ConfigClockSource+0x13a>
 8003f10:	2b40      	cmp	r3, #64	@ 0x40
 8003f12:	d86f      	bhi.n	8003ff4 <HAL_TIM_ConfigClockSource+0x16c>
 8003f14:	2b30      	cmp	r3, #48	@ 0x30
 8003f16:	d064      	beq.n	8003fe2 <HAL_TIM_ConfigClockSource+0x15a>
 8003f18:	2b30      	cmp	r3, #48	@ 0x30
 8003f1a:	d86b      	bhi.n	8003ff4 <HAL_TIM_ConfigClockSource+0x16c>
 8003f1c:	2b20      	cmp	r3, #32
 8003f1e:	d060      	beq.n	8003fe2 <HAL_TIM_ConfigClockSource+0x15a>
 8003f20:	2b20      	cmp	r3, #32
 8003f22:	d867      	bhi.n	8003ff4 <HAL_TIM_ConfigClockSource+0x16c>
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d05c      	beq.n	8003fe2 <HAL_TIM_ConfigClockSource+0x15a>
 8003f28:	2b10      	cmp	r3, #16
 8003f2a:	d05a      	beq.n	8003fe2 <HAL_TIM_ConfigClockSource+0x15a>
 8003f2c:	e062      	b.n	8003ff4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003f32:	683b      	ldr	r3, [r7, #0]
 8003f34:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003f36:	683b      	ldr	r3, [r7, #0]
 8003f38:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003f3a:	683b      	ldr	r3, [r7, #0]
 8003f3c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003f3e:	f000 fb5f 	bl	8004600 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	689b      	ldr	r3, [r3, #8]
 8003f48:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003f4a:	68bb      	ldr	r3, [r7, #8]
 8003f4c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003f50:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	68ba      	ldr	r2, [r7, #8]
 8003f58:	609a      	str	r2, [r3, #8]
      break;
 8003f5a:	e04f      	b.n	8003ffc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003f60:	683b      	ldr	r3, [r7, #0]
 8003f62:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003f64:	683b      	ldr	r3, [r7, #0]
 8003f66:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003f68:	683b      	ldr	r3, [r7, #0]
 8003f6a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003f6c:	f000 fb48 	bl	8004600 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	689a      	ldr	r2, [r3, #8]
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003f7e:	609a      	str	r2, [r3, #8]
      break;
 8003f80:	e03c      	b.n	8003ffc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003f86:	683b      	ldr	r3, [r7, #0]
 8003f88:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003f8a:	683b      	ldr	r3, [r7, #0]
 8003f8c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f8e:	461a      	mov	r2, r3
 8003f90:	f000 fabc 	bl	800450c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	2150      	movs	r1, #80	@ 0x50
 8003f9a:	4618      	mov	r0, r3
 8003f9c:	f000 fb15 	bl	80045ca <TIM_ITRx_SetConfig>
      break;
 8003fa0:	e02c      	b.n	8003ffc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003fa6:	683b      	ldr	r3, [r7, #0]
 8003fa8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003faa:	683b      	ldr	r3, [r7, #0]
 8003fac:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003fae:	461a      	mov	r2, r3
 8003fb0:	f000 fadb 	bl	800456a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	2160      	movs	r1, #96	@ 0x60
 8003fba:	4618      	mov	r0, r3
 8003fbc:	f000 fb05 	bl	80045ca <TIM_ITRx_SetConfig>
      break;
 8003fc0:	e01c      	b.n	8003ffc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003fc6:	683b      	ldr	r3, [r7, #0]
 8003fc8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003fca:	683b      	ldr	r3, [r7, #0]
 8003fcc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003fce:	461a      	mov	r2, r3
 8003fd0:	f000 fa9c 	bl	800450c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	2140      	movs	r1, #64	@ 0x40
 8003fda:	4618      	mov	r0, r3
 8003fdc:	f000 faf5 	bl	80045ca <TIM_ITRx_SetConfig>
      break;
 8003fe0:	e00c      	b.n	8003ffc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681a      	ldr	r2, [r3, #0]
 8003fe6:	683b      	ldr	r3, [r7, #0]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	4619      	mov	r1, r3
 8003fec:	4610      	mov	r0, r2
 8003fee:	f000 faec 	bl	80045ca <TIM_ITRx_SetConfig>
      break;
 8003ff2:	e003      	b.n	8003ffc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003ff4:	2301      	movs	r3, #1
 8003ff6:	73fb      	strb	r3, [r7, #15]
      break;
 8003ff8:	e000      	b.n	8003ffc <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003ffa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	2201      	movs	r2, #1
 8004000:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	2200      	movs	r2, #0
 8004008:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800400c:	7bfb      	ldrb	r3, [r7, #15]
}
 800400e:	4618      	mov	r0, r3
 8004010:	3710      	adds	r7, #16
 8004012:	46bd      	mov	sp, r7
 8004014:	bd80      	pop	{r7, pc}

08004016 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004016:	b480      	push	{r7}
 8004018:	b083      	sub	sp, #12
 800401a:	af00      	add	r7, sp, #0
 800401c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800401e:	bf00      	nop
 8004020:	370c      	adds	r7, #12
 8004022:	46bd      	mov	sp, r7
 8004024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004028:	4770      	bx	lr

0800402a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800402a:	b480      	push	{r7}
 800402c:	b083      	sub	sp, #12
 800402e:	af00      	add	r7, sp, #0
 8004030:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004032:	bf00      	nop
 8004034:	370c      	adds	r7, #12
 8004036:	46bd      	mov	sp, r7
 8004038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403c:	4770      	bx	lr

0800403e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800403e:	b480      	push	{r7}
 8004040:	b083      	sub	sp, #12
 8004042:	af00      	add	r7, sp, #0
 8004044:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004046:	bf00      	nop
 8004048:	370c      	adds	r7, #12
 800404a:	46bd      	mov	sp, r7
 800404c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004050:	4770      	bx	lr
	...

08004054 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004054:	b480      	push	{r7}
 8004056:	b085      	sub	sp, #20
 8004058:	af00      	add	r7, sp, #0
 800405a:	6078      	str	r0, [r7, #4]
 800405c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	4a46      	ldr	r2, [pc, #280]	@ (8004180 <TIM_Base_SetConfig+0x12c>)
 8004068:	4293      	cmp	r3, r2
 800406a:	d013      	beq.n	8004094 <TIM_Base_SetConfig+0x40>
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004072:	d00f      	beq.n	8004094 <TIM_Base_SetConfig+0x40>
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	4a43      	ldr	r2, [pc, #268]	@ (8004184 <TIM_Base_SetConfig+0x130>)
 8004078:	4293      	cmp	r3, r2
 800407a:	d00b      	beq.n	8004094 <TIM_Base_SetConfig+0x40>
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	4a42      	ldr	r2, [pc, #264]	@ (8004188 <TIM_Base_SetConfig+0x134>)
 8004080:	4293      	cmp	r3, r2
 8004082:	d007      	beq.n	8004094 <TIM_Base_SetConfig+0x40>
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	4a41      	ldr	r2, [pc, #260]	@ (800418c <TIM_Base_SetConfig+0x138>)
 8004088:	4293      	cmp	r3, r2
 800408a:	d003      	beq.n	8004094 <TIM_Base_SetConfig+0x40>
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	4a40      	ldr	r2, [pc, #256]	@ (8004190 <TIM_Base_SetConfig+0x13c>)
 8004090:	4293      	cmp	r3, r2
 8004092:	d108      	bne.n	80040a6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800409a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800409c:	683b      	ldr	r3, [r7, #0]
 800409e:	685b      	ldr	r3, [r3, #4]
 80040a0:	68fa      	ldr	r2, [r7, #12]
 80040a2:	4313      	orrs	r3, r2
 80040a4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	4a35      	ldr	r2, [pc, #212]	@ (8004180 <TIM_Base_SetConfig+0x12c>)
 80040aa:	4293      	cmp	r3, r2
 80040ac:	d02b      	beq.n	8004106 <TIM_Base_SetConfig+0xb2>
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80040b4:	d027      	beq.n	8004106 <TIM_Base_SetConfig+0xb2>
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	4a32      	ldr	r2, [pc, #200]	@ (8004184 <TIM_Base_SetConfig+0x130>)
 80040ba:	4293      	cmp	r3, r2
 80040bc:	d023      	beq.n	8004106 <TIM_Base_SetConfig+0xb2>
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	4a31      	ldr	r2, [pc, #196]	@ (8004188 <TIM_Base_SetConfig+0x134>)
 80040c2:	4293      	cmp	r3, r2
 80040c4:	d01f      	beq.n	8004106 <TIM_Base_SetConfig+0xb2>
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	4a30      	ldr	r2, [pc, #192]	@ (800418c <TIM_Base_SetConfig+0x138>)
 80040ca:	4293      	cmp	r3, r2
 80040cc:	d01b      	beq.n	8004106 <TIM_Base_SetConfig+0xb2>
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	4a2f      	ldr	r2, [pc, #188]	@ (8004190 <TIM_Base_SetConfig+0x13c>)
 80040d2:	4293      	cmp	r3, r2
 80040d4:	d017      	beq.n	8004106 <TIM_Base_SetConfig+0xb2>
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	4a2e      	ldr	r2, [pc, #184]	@ (8004194 <TIM_Base_SetConfig+0x140>)
 80040da:	4293      	cmp	r3, r2
 80040dc:	d013      	beq.n	8004106 <TIM_Base_SetConfig+0xb2>
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	4a2d      	ldr	r2, [pc, #180]	@ (8004198 <TIM_Base_SetConfig+0x144>)
 80040e2:	4293      	cmp	r3, r2
 80040e4:	d00f      	beq.n	8004106 <TIM_Base_SetConfig+0xb2>
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	4a2c      	ldr	r2, [pc, #176]	@ (800419c <TIM_Base_SetConfig+0x148>)
 80040ea:	4293      	cmp	r3, r2
 80040ec:	d00b      	beq.n	8004106 <TIM_Base_SetConfig+0xb2>
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	4a2b      	ldr	r2, [pc, #172]	@ (80041a0 <TIM_Base_SetConfig+0x14c>)
 80040f2:	4293      	cmp	r3, r2
 80040f4:	d007      	beq.n	8004106 <TIM_Base_SetConfig+0xb2>
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	4a2a      	ldr	r2, [pc, #168]	@ (80041a4 <TIM_Base_SetConfig+0x150>)
 80040fa:	4293      	cmp	r3, r2
 80040fc:	d003      	beq.n	8004106 <TIM_Base_SetConfig+0xb2>
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	4a29      	ldr	r2, [pc, #164]	@ (80041a8 <TIM_Base_SetConfig+0x154>)
 8004102:	4293      	cmp	r3, r2
 8004104:	d108      	bne.n	8004118 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800410c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800410e:	683b      	ldr	r3, [r7, #0]
 8004110:	68db      	ldr	r3, [r3, #12]
 8004112:	68fa      	ldr	r2, [r7, #12]
 8004114:	4313      	orrs	r3, r2
 8004116:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800411e:	683b      	ldr	r3, [r7, #0]
 8004120:	695b      	ldr	r3, [r3, #20]
 8004122:	4313      	orrs	r3, r2
 8004124:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	68fa      	ldr	r2, [r7, #12]
 800412a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800412c:	683b      	ldr	r3, [r7, #0]
 800412e:	689a      	ldr	r2, [r3, #8]
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004134:	683b      	ldr	r3, [r7, #0]
 8004136:	681a      	ldr	r2, [r3, #0]
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	4a10      	ldr	r2, [pc, #64]	@ (8004180 <TIM_Base_SetConfig+0x12c>)
 8004140:	4293      	cmp	r3, r2
 8004142:	d003      	beq.n	800414c <TIM_Base_SetConfig+0xf8>
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	4a12      	ldr	r2, [pc, #72]	@ (8004190 <TIM_Base_SetConfig+0x13c>)
 8004148:	4293      	cmp	r3, r2
 800414a:	d103      	bne.n	8004154 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800414c:	683b      	ldr	r3, [r7, #0]
 800414e:	691a      	ldr	r2, [r3, #16]
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	2201      	movs	r2, #1
 8004158:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	691b      	ldr	r3, [r3, #16]
 800415e:	f003 0301 	and.w	r3, r3, #1
 8004162:	2b01      	cmp	r3, #1
 8004164:	d105      	bne.n	8004172 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	691b      	ldr	r3, [r3, #16]
 800416a:	f023 0201 	bic.w	r2, r3, #1
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	611a      	str	r2, [r3, #16]
  }
}
 8004172:	bf00      	nop
 8004174:	3714      	adds	r7, #20
 8004176:	46bd      	mov	sp, r7
 8004178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800417c:	4770      	bx	lr
 800417e:	bf00      	nop
 8004180:	40010000 	.word	0x40010000
 8004184:	40000400 	.word	0x40000400
 8004188:	40000800 	.word	0x40000800
 800418c:	40000c00 	.word	0x40000c00
 8004190:	40010400 	.word	0x40010400
 8004194:	40014000 	.word	0x40014000
 8004198:	40014400 	.word	0x40014400
 800419c:	40014800 	.word	0x40014800
 80041a0:	40001800 	.word	0x40001800
 80041a4:	40001c00 	.word	0x40001c00
 80041a8:	40002000 	.word	0x40002000

080041ac <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80041ac:	b480      	push	{r7}
 80041ae:	b087      	sub	sp, #28
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	6078      	str	r0, [r7, #4]
 80041b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	6a1b      	ldr	r3, [r3, #32]
 80041ba:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	6a1b      	ldr	r3, [r3, #32]
 80041c0:	f023 0201 	bic.w	r2, r3, #1
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	685b      	ldr	r3, [r3, #4]
 80041cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	699b      	ldr	r3, [r3, #24]
 80041d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80041da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	f023 0303 	bic.w	r3, r3, #3
 80041e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80041e4:	683b      	ldr	r3, [r7, #0]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	68fa      	ldr	r2, [r7, #12]
 80041ea:	4313      	orrs	r3, r2
 80041ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80041ee:	697b      	ldr	r3, [r7, #20]
 80041f0:	f023 0302 	bic.w	r3, r3, #2
 80041f4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80041f6:	683b      	ldr	r3, [r7, #0]
 80041f8:	689b      	ldr	r3, [r3, #8]
 80041fa:	697a      	ldr	r2, [r7, #20]
 80041fc:	4313      	orrs	r3, r2
 80041fe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	4a20      	ldr	r2, [pc, #128]	@ (8004284 <TIM_OC1_SetConfig+0xd8>)
 8004204:	4293      	cmp	r3, r2
 8004206:	d003      	beq.n	8004210 <TIM_OC1_SetConfig+0x64>
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	4a1f      	ldr	r2, [pc, #124]	@ (8004288 <TIM_OC1_SetConfig+0xdc>)
 800420c:	4293      	cmp	r3, r2
 800420e:	d10c      	bne.n	800422a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004210:	697b      	ldr	r3, [r7, #20]
 8004212:	f023 0308 	bic.w	r3, r3, #8
 8004216:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004218:	683b      	ldr	r3, [r7, #0]
 800421a:	68db      	ldr	r3, [r3, #12]
 800421c:	697a      	ldr	r2, [r7, #20]
 800421e:	4313      	orrs	r3, r2
 8004220:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004222:	697b      	ldr	r3, [r7, #20]
 8004224:	f023 0304 	bic.w	r3, r3, #4
 8004228:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	4a15      	ldr	r2, [pc, #84]	@ (8004284 <TIM_OC1_SetConfig+0xd8>)
 800422e:	4293      	cmp	r3, r2
 8004230:	d003      	beq.n	800423a <TIM_OC1_SetConfig+0x8e>
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	4a14      	ldr	r2, [pc, #80]	@ (8004288 <TIM_OC1_SetConfig+0xdc>)
 8004236:	4293      	cmp	r3, r2
 8004238:	d111      	bne.n	800425e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800423a:	693b      	ldr	r3, [r7, #16]
 800423c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004240:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004242:	693b      	ldr	r3, [r7, #16]
 8004244:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004248:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800424a:	683b      	ldr	r3, [r7, #0]
 800424c:	695b      	ldr	r3, [r3, #20]
 800424e:	693a      	ldr	r2, [r7, #16]
 8004250:	4313      	orrs	r3, r2
 8004252:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004254:	683b      	ldr	r3, [r7, #0]
 8004256:	699b      	ldr	r3, [r3, #24]
 8004258:	693a      	ldr	r2, [r7, #16]
 800425a:	4313      	orrs	r3, r2
 800425c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	693a      	ldr	r2, [r7, #16]
 8004262:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	68fa      	ldr	r2, [r7, #12]
 8004268:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800426a:	683b      	ldr	r3, [r7, #0]
 800426c:	685a      	ldr	r2, [r3, #4]
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	697a      	ldr	r2, [r7, #20]
 8004276:	621a      	str	r2, [r3, #32]
}
 8004278:	bf00      	nop
 800427a:	371c      	adds	r7, #28
 800427c:	46bd      	mov	sp, r7
 800427e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004282:	4770      	bx	lr
 8004284:	40010000 	.word	0x40010000
 8004288:	40010400 	.word	0x40010400

0800428c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800428c:	b480      	push	{r7}
 800428e:	b087      	sub	sp, #28
 8004290:	af00      	add	r7, sp, #0
 8004292:	6078      	str	r0, [r7, #4]
 8004294:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	6a1b      	ldr	r3, [r3, #32]
 800429a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	6a1b      	ldr	r3, [r3, #32]
 80042a0:	f023 0210 	bic.w	r2, r3, #16
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	685b      	ldr	r3, [r3, #4]
 80042ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	699b      	ldr	r3, [r3, #24]
 80042b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80042ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80042c2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80042c4:	683b      	ldr	r3, [r7, #0]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	021b      	lsls	r3, r3, #8
 80042ca:	68fa      	ldr	r2, [r7, #12]
 80042cc:	4313      	orrs	r3, r2
 80042ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80042d0:	697b      	ldr	r3, [r7, #20]
 80042d2:	f023 0320 	bic.w	r3, r3, #32
 80042d6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80042d8:	683b      	ldr	r3, [r7, #0]
 80042da:	689b      	ldr	r3, [r3, #8]
 80042dc:	011b      	lsls	r3, r3, #4
 80042de:	697a      	ldr	r2, [r7, #20]
 80042e0:	4313      	orrs	r3, r2
 80042e2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	4a22      	ldr	r2, [pc, #136]	@ (8004370 <TIM_OC2_SetConfig+0xe4>)
 80042e8:	4293      	cmp	r3, r2
 80042ea:	d003      	beq.n	80042f4 <TIM_OC2_SetConfig+0x68>
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	4a21      	ldr	r2, [pc, #132]	@ (8004374 <TIM_OC2_SetConfig+0xe8>)
 80042f0:	4293      	cmp	r3, r2
 80042f2:	d10d      	bne.n	8004310 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80042f4:	697b      	ldr	r3, [r7, #20]
 80042f6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80042fa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80042fc:	683b      	ldr	r3, [r7, #0]
 80042fe:	68db      	ldr	r3, [r3, #12]
 8004300:	011b      	lsls	r3, r3, #4
 8004302:	697a      	ldr	r2, [r7, #20]
 8004304:	4313      	orrs	r3, r2
 8004306:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004308:	697b      	ldr	r3, [r7, #20]
 800430a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800430e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	4a17      	ldr	r2, [pc, #92]	@ (8004370 <TIM_OC2_SetConfig+0xe4>)
 8004314:	4293      	cmp	r3, r2
 8004316:	d003      	beq.n	8004320 <TIM_OC2_SetConfig+0x94>
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	4a16      	ldr	r2, [pc, #88]	@ (8004374 <TIM_OC2_SetConfig+0xe8>)
 800431c:	4293      	cmp	r3, r2
 800431e:	d113      	bne.n	8004348 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004320:	693b      	ldr	r3, [r7, #16]
 8004322:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004326:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004328:	693b      	ldr	r3, [r7, #16]
 800432a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800432e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004330:	683b      	ldr	r3, [r7, #0]
 8004332:	695b      	ldr	r3, [r3, #20]
 8004334:	009b      	lsls	r3, r3, #2
 8004336:	693a      	ldr	r2, [r7, #16]
 8004338:	4313      	orrs	r3, r2
 800433a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800433c:	683b      	ldr	r3, [r7, #0]
 800433e:	699b      	ldr	r3, [r3, #24]
 8004340:	009b      	lsls	r3, r3, #2
 8004342:	693a      	ldr	r2, [r7, #16]
 8004344:	4313      	orrs	r3, r2
 8004346:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	693a      	ldr	r2, [r7, #16]
 800434c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	68fa      	ldr	r2, [r7, #12]
 8004352:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004354:	683b      	ldr	r3, [r7, #0]
 8004356:	685a      	ldr	r2, [r3, #4]
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	697a      	ldr	r2, [r7, #20]
 8004360:	621a      	str	r2, [r3, #32]
}
 8004362:	bf00      	nop
 8004364:	371c      	adds	r7, #28
 8004366:	46bd      	mov	sp, r7
 8004368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800436c:	4770      	bx	lr
 800436e:	bf00      	nop
 8004370:	40010000 	.word	0x40010000
 8004374:	40010400 	.word	0x40010400

08004378 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004378:	b480      	push	{r7}
 800437a:	b087      	sub	sp, #28
 800437c:	af00      	add	r7, sp, #0
 800437e:	6078      	str	r0, [r7, #4]
 8004380:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	6a1b      	ldr	r3, [r3, #32]
 8004386:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	6a1b      	ldr	r3, [r3, #32]
 800438c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	685b      	ldr	r3, [r3, #4]
 8004398:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	69db      	ldr	r3, [r3, #28]
 800439e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80043a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	f023 0303 	bic.w	r3, r3, #3
 80043ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80043b0:	683b      	ldr	r3, [r7, #0]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	68fa      	ldr	r2, [r7, #12]
 80043b6:	4313      	orrs	r3, r2
 80043b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80043ba:	697b      	ldr	r3, [r7, #20]
 80043bc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80043c0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80043c2:	683b      	ldr	r3, [r7, #0]
 80043c4:	689b      	ldr	r3, [r3, #8]
 80043c6:	021b      	lsls	r3, r3, #8
 80043c8:	697a      	ldr	r2, [r7, #20]
 80043ca:	4313      	orrs	r3, r2
 80043cc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	4a21      	ldr	r2, [pc, #132]	@ (8004458 <TIM_OC3_SetConfig+0xe0>)
 80043d2:	4293      	cmp	r3, r2
 80043d4:	d003      	beq.n	80043de <TIM_OC3_SetConfig+0x66>
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	4a20      	ldr	r2, [pc, #128]	@ (800445c <TIM_OC3_SetConfig+0xe4>)
 80043da:	4293      	cmp	r3, r2
 80043dc:	d10d      	bne.n	80043fa <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80043de:	697b      	ldr	r3, [r7, #20]
 80043e0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80043e4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80043e6:	683b      	ldr	r3, [r7, #0]
 80043e8:	68db      	ldr	r3, [r3, #12]
 80043ea:	021b      	lsls	r3, r3, #8
 80043ec:	697a      	ldr	r2, [r7, #20]
 80043ee:	4313      	orrs	r3, r2
 80043f0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80043f2:	697b      	ldr	r3, [r7, #20]
 80043f4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80043f8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	4a16      	ldr	r2, [pc, #88]	@ (8004458 <TIM_OC3_SetConfig+0xe0>)
 80043fe:	4293      	cmp	r3, r2
 8004400:	d003      	beq.n	800440a <TIM_OC3_SetConfig+0x92>
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	4a15      	ldr	r2, [pc, #84]	@ (800445c <TIM_OC3_SetConfig+0xe4>)
 8004406:	4293      	cmp	r3, r2
 8004408:	d113      	bne.n	8004432 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800440a:	693b      	ldr	r3, [r7, #16]
 800440c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004410:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004412:	693b      	ldr	r3, [r7, #16]
 8004414:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004418:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800441a:	683b      	ldr	r3, [r7, #0]
 800441c:	695b      	ldr	r3, [r3, #20]
 800441e:	011b      	lsls	r3, r3, #4
 8004420:	693a      	ldr	r2, [r7, #16]
 8004422:	4313      	orrs	r3, r2
 8004424:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004426:	683b      	ldr	r3, [r7, #0]
 8004428:	699b      	ldr	r3, [r3, #24]
 800442a:	011b      	lsls	r3, r3, #4
 800442c:	693a      	ldr	r2, [r7, #16]
 800442e:	4313      	orrs	r3, r2
 8004430:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	693a      	ldr	r2, [r7, #16]
 8004436:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	68fa      	ldr	r2, [r7, #12]
 800443c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800443e:	683b      	ldr	r3, [r7, #0]
 8004440:	685a      	ldr	r2, [r3, #4]
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	697a      	ldr	r2, [r7, #20]
 800444a:	621a      	str	r2, [r3, #32]
}
 800444c:	bf00      	nop
 800444e:	371c      	adds	r7, #28
 8004450:	46bd      	mov	sp, r7
 8004452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004456:	4770      	bx	lr
 8004458:	40010000 	.word	0x40010000
 800445c:	40010400 	.word	0x40010400

08004460 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004460:	b480      	push	{r7}
 8004462:	b087      	sub	sp, #28
 8004464:	af00      	add	r7, sp, #0
 8004466:	6078      	str	r0, [r7, #4]
 8004468:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	6a1b      	ldr	r3, [r3, #32]
 800446e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	6a1b      	ldr	r3, [r3, #32]
 8004474:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	685b      	ldr	r3, [r3, #4]
 8004480:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	69db      	ldr	r3, [r3, #28]
 8004486:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800448e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004496:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004498:	683b      	ldr	r3, [r7, #0]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	021b      	lsls	r3, r3, #8
 800449e:	68fa      	ldr	r2, [r7, #12]
 80044a0:	4313      	orrs	r3, r2
 80044a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80044a4:	693b      	ldr	r3, [r7, #16]
 80044a6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80044aa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80044ac:	683b      	ldr	r3, [r7, #0]
 80044ae:	689b      	ldr	r3, [r3, #8]
 80044b0:	031b      	lsls	r3, r3, #12
 80044b2:	693a      	ldr	r2, [r7, #16]
 80044b4:	4313      	orrs	r3, r2
 80044b6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	4a12      	ldr	r2, [pc, #72]	@ (8004504 <TIM_OC4_SetConfig+0xa4>)
 80044bc:	4293      	cmp	r3, r2
 80044be:	d003      	beq.n	80044c8 <TIM_OC4_SetConfig+0x68>
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	4a11      	ldr	r2, [pc, #68]	@ (8004508 <TIM_OC4_SetConfig+0xa8>)
 80044c4:	4293      	cmp	r3, r2
 80044c6:	d109      	bne.n	80044dc <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80044c8:	697b      	ldr	r3, [r7, #20]
 80044ca:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80044ce:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80044d0:	683b      	ldr	r3, [r7, #0]
 80044d2:	695b      	ldr	r3, [r3, #20]
 80044d4:	019b      	lsls	r3, r3, #6
 80044d6:	697a      	ldr	r2, [r7, #20]
 80044d8:	4313      	orrs	r3, r2
 80044da:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	697a      	ldr	r2, [r7, #20]
 80044e0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	68fa      	ldr	r2, [r7, #12]
 80044e6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80044e8:	683b      	ldr	r3, [r7, #0]
 80044ea:	685a      	ldr	r2, [r3, #4]
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	693a      	ldr	r2, [r7, #16]
 80044f4:	621a      	str	r2, [r3, #32]
}
 80044f6:	bf00      	nop
 80044f8:	371c      	adds	r7, #28
 80044fa:	46bd      	mov	sp, r7
 80044fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004500:	4770      	bx	lr
 8004502:	bf00      	nop
 8004504:	40010000 	.word	0x40010000
 8004508:	40010400 	.word	0x40010400

0800450c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800450c:	b480      	push	{r7}
 800450e:	b087      	sub	sp, #28
 8004510:	af00      	add	r7, sp, #0
 8004512:	60f8      	str	r0, [r7, #12]
 8004514:	60b9      	str	r1, [r7, #8]
 8004516:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	6a1b      	ldr	r3, [r3, #32]
 800451c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	6a1b      	ldr	r3, [r3, #32]
 8004522:	f023 0201 	bic.w	r2, r3, #1
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	699b      	ldr	r3, [r3, #24]
 800452e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004530:	693b      	ldr	r3, [r7, #16]
 8004532:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004536:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	011b      	lsls	r3, r3, #4
 800453c:	693a      	ldr	r2, [r7, #16]
 800453e:	4313      	orrs	r3, r2
 8004540:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004542:	697b      	ldr	r3, [r7, #20]
 8004544:	f023 030a 	bic.w	r3, r3, #10
 8004548:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800454a:	697a      	ldr	r2, [r7, #20]
 800454c:	68bb      	ldr	r3, [r7, #8]
 800454e:	4313      	orrs	r3, r2
 8004550:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	693a      	ldr	r2, [r7, #16]
 8004556:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	697a      	ldr	r2, [r7, #20]
 800455c:	621a      	str	r2, [r3, #32]
}
 800455e:	bf00      	nop
 8004560:	371c      	adds	r7, #28
 8004562:	46bd      	mov	sp, r7
 8004564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004568:	4770      	bx	lr

0800456a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800456a:	b480      	push	{r7}
 800456c:	b087      	sub	sp, #28
 800456e:	af00      	add	r7, sp, #0
 8004570:	60f8      	str	r0, [r7, #12]
 8004572:	60b9      	str	r1, [r7, #8]
 8004574:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	6a1b      	ldr	r3, [r3, #32]
 800457a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	6a1b      	ldr	r3, [r3, #32]
 8004580:	f023 0210 	bic.w	r2, r3, #16
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	699b      	ldr	r3, [r3, #24]
 800458c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800458e:	693b      	ldr	r3, [r7, #16]
 8004590:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004594:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	031b      	lsls	r3, r3, #12
 800459a:	693a      	ldr	r2, [r7, #16]
 800459c:	4313      	orrs	r3, r2
 800459e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80045a0:	697b      	ldr	r3, [r7, #20]
 80045a2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80045a6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80045a8:	68bb      	ldr	r3, [r7, #8]
 80045aa:	011b      	lsls	r3, r3, #4
 80045ac:	697a      	ldr	r2, [r7, #20]
 80045ae:	4313      	orrs	r3, r2
 80045b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	693a      	ldr	r2, [r7, #16]
 80045b6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	697a      	ldr	r2, [r7, #20]
 80045bc:	621a      	str	r2, [r3, #32]
}
 80045be:	bf00      	nop
 80045c0:	371c      	adds	r7, #28
 80045c2:	46bd      	mov	sp, r7
 80045c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c8:	4770      	bx	lr

080045ca <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80045ca:	b480      	push	{r7}
 80045cc:	b085      	sub	sp, #20
 80045ce:	af00      	add	r7, sp, #0
 80045d0:	6078      	str	r0, [r7, #4]
 80045d2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	689b      	ldr	r3, [r3, #8]
 80045d8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80045e0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80045e2:	683a      	ldr	r2, [r7, #0]
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	4313      	orrs	r3, r2
 80045e8:	f043 0307 	orr.w	r3, r3, #7
 80045ec:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	68fa      	ldr	r2, [r7, #12]
 80045f2:	609a      	str	r2, [r3, #8]
}
 80045f4:	bf00      	nop
 80045f6:	3714      	adds	r7, #20
 80045f8:	46bd      	mov	sp, r7
 80045fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045fe:	4770      	bx	lr

08004600 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004600:	b480      	push	{r7}
 8004602:	b087      	sub	sp, #28
 8004604:	af00      	add	r7, sp, #0
 8004606:	60f8      	str	r0, [r7, #12]
 8004608:	60b9      	str	r1, [r7, #8]
 800460a:	607a      	str	r2, [r7, #4]
 800460c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	689b      	ldr	r3, [r3, #8]
 8004612:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004614:	697b      	ldr	r3, [r7, #20]
 8004616:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800461a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800461c:	683b      	ldr	r3, [r7, #0]
 800461e:	021a      	lsls	r2, r3, #8
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	431a      	orrs	r2, r3
 8004624:	68bb      	ldr	r3, [r7, #8]
 8004626:	4313      	orrs	r3, r2
 8004628:	697a      	ldr	r2, [r7, #20]
 800462a:	4313      	orrs	r3, r2
 800462c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	697a      	ldr	r2, [r7, #20]
 8004632:	609a      	str	r2, [r3, #8]
}
 8004634:	bf00      	nop
 8004636:	371c      	adds	r7, #28
 8004638:	46bd      	mov	sp, r7
 800463a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800463e:	4770      	bx	lr

08004640 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004640:	b480      	push	{r7}
 8004642:	b087      	sub	sp, #28
 8004644:	af00      	add	r7, sp, #0
 8004646:	60f8      	str	r0, [r7, #12]
 8004648:	60b9      	str	r1, [r7, #8]
 800464a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800464c:	68bb      	ldr	r3, [r7, #8]
 800464e:	f003 031f 	and.w	r3, r3, #31
 8004652:	2201      	movs	r2, #1
 8004654:	fa02 f303 	lsl.w	r3, r2, r3
 8004658:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	6a1a      	ldr	r2, [r3, #32]
 800465e:	697b      	ldr	r3, [r7, #20]
 8004660:	43db      	mvns	r3, r3
 8004662:	401a      	ands	r2, r3
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	6a1a      	ldr	r2, [r3, #32]
 800466c:	68bb      	ldr	r3, [r7, #8]
 800466e:	f003 031f 	and.w	r3, r3, #31
 8004672:	6879      	ldr	r1, [r7, #4]
 8004674:	fa01 f303 	lsl.w	r3, r1, r3
 8004678:	431a      	orrs	r2, r3
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	621a      	str	r2, [r3, #32]
}
 800467e:	bf00      	nop
 8004680:	371c      	adds	r7, #28
 8004682:	46bd      	mov	sp, r7
 8004684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004688:	4770      	bx	lr
	...

0800468c <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800468c:	b580      	push	{r7, lr}
 800468e:	b084      	sub	sp, #16
 8004690:	af00      	add	r7, sp, #0
 8004692:	6078      	str	r0, [r7, #4]
 8004694:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004696:	683b      	ldr	r3, [r7, #0]
 8004698:	2b00      	cmp	r3, #0
 800469a:	d109      	bne.n	80046b0 <HAL_TIMEx_PWMN_Start+0x24>
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80046a2:	b2db      	uxtb	r3, r3
 80046a4:	2b01      	cmp	r3, #1
 80046a6:	bf14      	ite	ne
 80046a8:	2301      	movne	r3, #1
 80046aa:	2300      	moveq	r3, #0
 80046ac:	b2db      	uxtb	r3, r3
 80046ae:	e022      	b.n	80046f6 <HAL_TIMEx_PWMN_Start+0x6a>
 80046b0:	683b      	ldr	r3, [r7, #0]
 80046b2:	2b04      	cmp	r3, #4
 80046b4:	d109      	bne.n	80046ca <HAL_TIMEx_PWMN_Start+0x3e>
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80046bc:	b2db      	uxtb	r3, r3
 80046be:	2b01      	cmp	r3, #1
 80046c0:	bf14      	ite	ne
 80046c2:	2301      	movne	r3, #1
 80046c4:	2300      	moveq	r3, #0
 80046c6:	b2db      	uxtb	r3, r3
 80046c8:	e015      	b.n	80046f6 <HAL_TIMEx_PWMN_Start+0x6a>
 80046ca:	683b      	ldr	r3, [r7, #0]
 80046cc:	2b08      	cmp	r3, #8
 80046ce:	d109      	bne.n	80046e4 <HAL_TIMEx_PWMN_Start+0x58>
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80046d6:	b2db      	uxtb	r3, r3
 80046d8:	2b01      	cmp	r3, #1
 80046da:	bf14      	ite	ne
 80046dc:	2301      	movne	r3, #1
 80046de:	2300      	moveq	r3, #0
 80046e0:	b2db      	uxtb	r3, r3
 80046e2:	e008      	b.n	80046f6 <HAL_TIMEx_PWMN_Start+0x6a>
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80046ea:	b2db      	uxtb	r3, r3
 80046ec:	2b01      	cmp	r3, #1
 80046ee:	bf14      	ite	ne
 80046f0:	2301      	movne	r3, #1
 80046f2:	2300      	moveq	r3, #0
 80046f4:	b2db      	uxtb	r3, r3
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d001      	beq.n	80046fe <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 80046fa:	2301      	movs	r3, #1
 80046fc:	e06d      	b.n	80047da <HAL_TIMEx_PWMN_Start+0x14e>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80046fe:	683b      	ldr	r3, [r7, #0]
 8004700:	2b00      	cmp	r3, #0
 8004702:	d104      	bne.n	800470e <HAL_TIMEx_PWMN_Start+0x82>
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	2202      	movs	r2, #2
 8004708:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800470c:	e013      	b.n	8004736 <HAL_TIMEx_PWMN_Start+0xaa>
 800470e:	683b      	ldr	r3, [r7, #0]
 8004710:	2b04      	cmp	r3, #4
 8004712:	d104      	bne.n	800471e <HAL_TIMEx_PWMN_Start+0x92>
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	2202      	movs	r2, #2
 8004718:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800471c:	e00b      	b.n	8004736 <HAL_TIMEx_PWMN_Start+0xaa>
 800471e:	683b      	ldr	r3, [r7, #0]
 8004720:	2b08      	cmp	r3, #8
 8004722:	d104      	bne.n	800472e <HAL_TIMEx_PWMN_Start+0xa2>
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	2202      	movs	r2, #2
 8004728:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800472c:	e003      	b.n	8004736 <HAL_TIMEx_PWMN_Start+0xaa>
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	2202      	movs	r2, #2
 8004732:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	2204      	movs	r2, #4
 800473c:	6839      	ldr	r1, [r7, #0]
 800473e:	4618      	mov	r0, r3
 8004740:	f000 f940 	bl	80049c4 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004752:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	4a22      	ldr	r2, [pc, #136]	@ (80047e4 <HAL_TIMEx_PWMN_Start+0x158>)
 800475a:	4293      	cmp	r3, r2
 800475c:	d022      	beq.n	80047a4 <HAL_TIMEx_PWMN_Start+0x118>
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004766:	d01d      	beq.n	80047a4 <HAL_TIMEx_PWMN_Start+0x118>
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	4a1e      	ldr	r2, [pc, #120]	@ (80047e8 <HAL_TIMEx_PWMN_Start+0x15c>)
 800476e:	4293      	cmp	r3, r2
 8004770:	d018      	beq.n	80047a4 <HAL_TIMEx_PWMN_Start+0x118>
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	4a1d      	ldr	r2, [pc, #116]	@ (80047ec <HAL_TIMEx_PWMN_Start+0x160>)
 8004778:	4293      	cmp	r3, r2
 800477a:	d013      	beq.n	80047a4 <HAL_TIMEx_PWMN_Start+0x118>
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	4a1b      	ldr	r2, [pc, #108]	@ (80047f0 <HAL_TIMEx_PWMN_Start+0x164>)
 8004782:	4293      	cmp	r3, r2
 8004784:	d00e      	beq.n	80047a4 <HAL_TIMEx_PWMN_Start+0x118>
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	4a1a      	ldr	r2, [pc, #104]	@ (80047f4 <HAL_TIMEx_PWMN_Start+0x168>)
 800478c:	4293      	cmp	r3, r2
 800478e:	d009      	beq.n	80047a4 <HAL_TIMEx_PWMN_Start+0x118>
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	4a18      	ldr	r2, [pc, #96]	@ (80047f8 <HAL_TIMEx_PWMN_Start+0x16c>)
 8004796:	4293      	cmp	r3, r2
 8004798:	d004      	beq.n	80047a4 <HAL_TIMEx_PWMN_Start+0x118>
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	4a17      	ldr	r2, [pc, #92]	@ (80047fc <HAL_TIMEx_PWMN_Start+0x170>)
 80047a0:	4293      	cmp	r3, r2
 80047a2:	d111      	bne.n	80047c8 <HAL_TIMEx_PWMN_Start+0x13c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	689b      	ldr	r3, [r3, #8]
 80047aa:	f003 0307 	and.w	r3, r3, #7
 80047ae:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	2b06      	cmp	r3, #6
 80047b4:	d010      	beq.n	80047d8 <HAL_TIMEx_PWMN_Start+0x14c>
    {
      __HAL_TIM_ENABLE(htim);
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	681a      	ldr	r2, [r3, #0]
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	f042 0201 	orr.w	r2, r2, #1
 80047c4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047c6:	e007      	b.n	80047d8 <HAL_TIMEx_PWMN_Start+0x14c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	681a      	ldr	r2, [r3, #0]
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	f042 0201 	orr.w	r2, r2, #1
 80047d6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80047d8:	2300      	movs	r3, #0
}
 80047da:	4618      	mov	r0, r3
 80047dc:	3710      	adds	r7, #16
 80047de:	46bd      	mov	sp, r7
 80047e0:	bd80      	pop	{r7, pc}
 80047e2:	bf00      	nop
 80047e4:	40010000 	.word	0x40010000
 80047e8:	40000400 	.word	0x40000400
 80047ec:	40000800 	.word	0x40000800
 80047f0:	40000c00 	.word	0x40000c00
 80047f4:	40010400 	.word	0x40010400
 80047f8:	40014000 	.word	0x40014000
 80047fc:	40001800 	.word	0x40001800

08004800 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004800:	b480      	push	{r7}
 8004802:	b085      	sub	sp, #20
 8004804:	af00      	add	r7, sp, #0
 8004806:	6078      	str	r0, [r7, #4]
 8004808:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004810:	2b01      	cmp	r3, #1
 8004812:	d101      	bne.n	8004818 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004814:	2302      	movs	r3, #2
 8004816:	e05a      	b.n	80048ce <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	2201      	movs	r2, #1
 800481c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	2202      	movs	r2, #2
 8004824:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	685b      	ldr	r3, [r3, #4]
 800482e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	689b      	ldr	r3, [r3, #8]
 8004836:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800483e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004840:	683b      	ldr	r3, [r7, #0]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	68fa      	ldr	r2, [r7, #12]
 8004846:	4313      	orrs	r3, r2
 8004848:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	68fa      	ldr	r2, [r7, #12]
 8004850:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	4a21      	ldr	r2, [pc, #132]	@ (80048dc <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004858:	4293      	cmp	r3, r2
 800485a:	d022      	beq.n	80048a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004864:	d01d      	beq.n	80048a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	4a1d      	ldr	r2, [pc, #116]	@ (80048e0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800486c:	4293      	cmp	r3, r2
 800486e:	d018      	beq.n	80048a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	4a1b      	ldr	r2, [pc, #108]	@ (80048e4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004876:	4293      	cmp	r3, r2
 8004878:	d013      	beq.n	80048a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	4a1a      	ldr	r2, [pc, #104]	@ (80048e8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004880:	4293      	cmp	r3, r2
 8004882:	d00e      	beq.n	80048a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	4a18      	ldr	r2, [pc, #96]	@ (80048ec <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800488a:	4293      	cmp	r3, r2
 800488c:	d009      	beq.n	80048a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	4a17      	ldr	r2, [pc, #92]	@ (80048f0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004894:	4293      	cmp	r3, r2
 8004896:	d004      	beq.n	80048a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	4a15      	ldr	r2, [pc, #84]	@ (80048f4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800489e:	4293      	cmp	r3, r2
 80048a0:	d10c      	bne.n	80048bc <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80048a2:	68bb      	ldr	r3, [r7, #8]
 80048a4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80048a8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80048aa:	683b      	ldr	r3, [r7, #0]
 80048ac:	685b      	ldr	r3, [r3, #4]
 80048ae:	68ba      	ldr	r2, [r7, #8]
 80048b0:	4313      	orrs	r3, r2
 80048b2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	68ba      	ldr	r2, [r7, #8]
 80048ba:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	2201      	movs	r2, #1
 80048c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	2200      	movs	r2, #0
 80048c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80048cc:	2300      	movs	r3, #0
}
 80048ce:	4618      	mov	r0, r3
 80048d0:	3714      	adds	r7, #20
 80048d2:	46bd      	mov	sp, r7
 80048d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d8:	4770      	bx	lr
 80048da:	bf00      	nop
 80048dc:	40010000 	.word	0x40010000
 80048e0:	40000400 	.word	0x40000400
 80048e4:	40000800 	.word	0x40000800
 80048e8:	40000c00 	.word	0x40000c00
 80048ec:	40010400 	.word	0x40010400
 80048f0:	40014000 	.word	0x40014000
 80048f4:	40001800 	.word	0x40001800

080048f8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80048f8:	b480      	push	{r7}
 80048fa:	b085      	sub	sp, #20
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	6078      	str	r0, [r7, #4]
 8004900:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004902:	2300      	movs	r3, #0
 8004904:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800490c:	2b01      	cmp	r3, #1
 800490e:	d101      	bne.n	8004914 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004910:	2302      	movs	r3, #2
 8004912:	e03d      	b.n	8004990 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	2201      	movs	r2, #1
 8004918:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8004922:	683b      	ldr	r3, [r7, #0]
 8004924:	68db      	ldr	r3, [r3, #12]
 8004926:	4313      	orrs	r3, r2
 8004928:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004930:	683b      	ldr	r3, [r7, #0]
 8004932:	689b      	ldr	r3, [r3, #8]
 8004934:	4313      	orrs	r3, r2
 8004936:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800493e:	683b      	ldr	r3, [r7, #0]
 8004940:	685b      	ldr	r3, [r3, #4]
 8004942:	4313      	orrs	r3, r2
 8004944:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800494c:	683b      	ldr	r3, [r7, #0]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	4313      	orrs	r3, r2
 8004952:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800495a:	683b      	ldr	r3, [r7, #0]
 800495c:	691b      	ldr	r3, [r3, #16]
 800495e:	4313      	orrs	r3, r2
 8004960:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8004968:	683b      	ldr	r3, [r7, #0]
 800496a:	695b      	ldr	r3, [r3, #20]
 800496c:	4313      	orrs	r3, r2
 800496e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8004976:	683b      	ldr	r3, [r7, #0]
 8004978:	69db      	ldr	r3, [r3, #28]
 800497a:	4313      	orrs	r3, r2
 800497c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	68fa      	ldr	r2, [r7, #12]
 8004984:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	2200      	movs	r2, #0
 800498a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800498e:	2300      	movs	r3, #0
}
 8004990:	4618      	mov	r0, r3
 8004992:	3714      	adds	r7, #20
 8004994:	46bd      	mov	sp, r7
 8004996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800499a:	4770      	bx	lr

0800499c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800499c:	b480      	push	{r7}
 800499e:	b083      	sub	sp, #12
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80049a4:	bf00      	nop
 80049a6:	370c      	adds	r7, #12
 80049a8:	46bd      	mov	sp, r7
 80049aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ae:	4770      	bx	lr

080049b0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80049b0:	b480      	push	{r7}
 80049b2:	b083      	sub	sp, #12
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80049b8:	bf00      	nop
 80049ba:	370c      	adds	r7, #12
 80049bc:	46bd      	mov	sp, r7
 80049be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c2:	4770      	bx	lr

080049c4 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 80049c4:	b480      	push	{r7}
 80049c6:	b087      	sub	sp, #28
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	60f8      	str	r0, [r7, #12]
 80049cc:	60b9      	str	r1, [r7, #8]
 80049ce:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0xFU); /* 0xFU = 15 bits max shift */
 80049d0:	68bb      	ldr	r3, [r7, #8]
 80049d2:	f003 030f 	and.w	r3, r3, #15
 80049d6:	2204      	movs	r2, #4
 80049d8:	fa02 f303 	lsl.w	r3, r2, r3
 80049dc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	6a1a      	ldr	r2, [r3, #32]
 80049e2:	697b      	ldr	r3, [r7, #20]
 80049e4:	43db      	mvns	r3, r3
 80049e6:	401a      	ands	r2, r3
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0xFU)); /* 0xFU = 15 bits max shift */
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	6a1a      	ldr	r2, [r3, #32]
 80049f0:	68bb      	ldr	r3, [r7, #8]
 80049f2:	f003 030f 	and.w	r3, r3, #15
 80049f6:	6879      	ldr	r1, [r7, #4]
 80049f8:	fa01 f303 	lsl.w	r3, r1, r3
 80049fc:	431a      	orrs	r2, r3
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	621a      	str	r2, [r3, #32]
}
 8004a02:	bf00      	nop
 8004a04:	371c      	adds	r7, #28
 8004a06:	46bd      	mov	sp, r7
 8004a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a0c:	4770      	bx	lr

08004a0e <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004a0e:	b084      	sub	sp, #16
 8004a10:	b580      	push	{r7, lr}
 8004a12:	b084      	sub	sp, #16
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	6078      	str	r0, [r7, #4]
 8004a18:	f107 001c 	add.w	r0, r7, #28
 8004a1c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004a20:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8004a24:	2b01      	cmp	r3, #1
 8004a26:	d123      	bne.n	8004a70 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a2c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	68db      	ldr	r3, [r3, #12]
 8004a38:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8004a3c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004a40:	687a      	ldr	r2, [r7, #4]
 8004a42:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	68db      	ldr	r3, [r3, #12]
 8004a48:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004a50:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8004a54:	2b01      	cmp	r3, #1
 8004a56:	d105      	bne.n	8004a64 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	68db      	ldr	r3, [r3, #12]
 8004a5c:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004a64:	6878      	ldr	r0, [r7, #4]
 8004a66:	f001 fae9 	bl	800603c <USB_CoreReset>
 8004a6a:	4603      	mov	r3, r0
 8004a6c:	73fb      	strb	r3, [r7, #15]
 8004a6e:	e01b      	b.n	8004aa8 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	68db      	ldr	r3, [r3, #12]
 8004a74:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004a7c:	6878      	ldr	r0, [r7, #4]
 8004a7e:	f001 fadd 	bl	800603c <USB_CoreReset>
 8004a82:	4603      	mov	r3, r0
 8004a84:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004a86:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d106      	bne.n	8004a9c <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a92:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	639a      	str	r2, [r3, #56]	@ 0x38
 8004a9a:	e005      	b.n	8004aa8 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004aa0:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004aa8:	7fbb      	ldrb	r3, [r7, #30]
 8004aaa:	2b01      	cmp	r3, #1
 8004aac:	d10b      	bne.n	8004ac6 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	689b      	ldr	r3, [r3, #8]
 8004ab2:	f043 0206 	orr.w	r2, r3, #6
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	689b      	ldr	r3, [r3, #8]
 8004abe:	f043 0220 	orr.w	r2, r3, #32
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004ac6:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ac8:	4618      	mov	r0, r3
 8004aca:	3710      	adds	r7, #16
 8004acc:	46bd      	mov	sp, r7
 8004ace:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004ad2:	b004      	add	sp, #16
 8004ad4:	4770      	bx	lr
	...

08004ad8 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8004ad8:	b480      	push	{r7}
 8004ada:	b087      	sub	sp, #28
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	60f8      	str	r0, [r7, #12]
 8004ae0:	60b9      	str	r1, [r7, #8]
 8004ae2:	4613      	mov	r3, r2
 8004ae4:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8004ae6:	79fb      	ldrb	r3, [r7, #7]
 8004ae8:	2b02      	cmp	r3, #2
 8004aea:	d165      	bne.n	8004bb8 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8004aec:	68bb      	ldr	r3, [r7, #8]
 8004aee:	4a41      	ldr	r2, [pc, #260]	@ (8004bf4 <USB_SetTurnaroundTime+0x11c>)
 8004af0:	4293      	cmp	r3, r2
 8004af2:	d906      	bls.n	8004b02 <USB_SetTurnaroundTime+0x2a>
 8004af4:	68bb      	ldr	r3, [r7, #8]
 8004af6:	4a40      	ldr	r2, [pc, #256]	@ (8004bf8 <USB_SetTurnaroundTime+0x120>)
 8004af8:	4293      	cmp	r3, r2
 8004afa:	d202      	bcs.n	8004b02 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8004afc:	230f      	movs	r3, #15
 8004afe:	617b      	str	r3, [r7, #20]
 8004b00:	e062      	b.n	8004bc8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8004b02:	68bb      	ldr	r3, [r7, #8]
 8004b04:	4a3c      	ldr	r2, [pc, #240]	@ (8004bf8 <USB_SetTurnaroundTime+0x120>)
 8004b06:	4293      	cmp	r3, r2
 8004b08:	d306      	bcc.n	8004b18 <USB_SetTurnaroundTime+0x40>
 8004b0a:	68bb      	ldr	r3, [r7, #8]
 8004b0c:	4a3b      	ldr	r2, [pc, #236]	@ (8004bfc <USB_SetTurnaroundTime+0x124>)
 8004b0e:	4293      	cmp	r3, r2
 8004b10:	d202      	bcs.n	8004b18 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8004b12:	230e      	movs	r3, #14
 8004b14:	617b      	str	r3, [r7, #20]
 8004b16:	e057      	b.n	8004bc8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8004b18:	68bb      	ldr	r3, [r7, #8]
 8004b1a:	4a38      	ldr	r2, [pc, #224]	@ (8004bfc <USB_SetTurnaroundTime+0x124>)
 8004b1c:	4293      	cmp	r3, r2
 8004b1e:	d306      	bcc.n	8004b2e <USB_SetTurnaroundTime+0x56>
 8004b20:	68bb      	ldr	r3, [r7, #8]
 8004b22:	4a37      	ldr	r2, [pc, #220]	@ (8004c00 <USB_SetTurnaroundTime+0x128>)
 8004b24:	4293      	cmp	r3, r2
 8004b26:	d202      	bcs.n	8004b2e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8004b28:	230d      	movs	r3, #13
 8004b2a:	617b      	str	r3, [r7, #20]
 8004b2c:	e04c      	b.n	8004bc8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8004b2e:	68bb      	ldr	r3, [r7, #8]
 8004b30:	4a33      	ldr	r2, [pc, #204]	@ (8004c00 <USB_SetTurnaroundTime+0x128>)
 8004b32:	4293      	cmp	r3, r2
 8004b34:	d306      	bcc.n	8004b44 <USB_SetTurnaroundTime+0x6c>
 8004b36:	68bb      	ldr	r3, [r7, #8]
 8004b38:	4a32      	ldr	r2, [pc, #200]	@ (8004c04 <USB_SetTurnaroundTime+0x12c>)
 8004b3a:	4293      	cmp	r3, r2
 8004b3c:	d802      	bhi.n	8004b44 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8004b3e:	230c      	movs	r3, #12
 8004b40:	617b      	str	r3, [r7, #20]
 8004b42:	e041      	b.n	8004bc8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8004b44:	68bb      	ldr	r3, [r7, #8]
 8004b46:	4a2f      	ldr	r2, [pc, #188]	@ (8004c04 <USB_SetTurnaroundTime+0x12c>)
 8004b48:	4293      	cmp	r3, r2
 8004b4a:	d906      	bls.n	8004b5a <USB_SetTurnaroundTime+0x82>
 8004b4c:	68bb      	ldr	r3, [r7, #8]
 8004b4e:	4a2e      	ldr	r2, [pc, #184]	@ (8004c08 <USB_SetTurnaroundTime+0x130>)
 8004b50:	4293      	cmp	r3, r2
 8004b52:	d802      	bhi.n	8004b5a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8004b54:	230b      	movs	r3, #11
 8004b56:	617b      	str	r3, [r7, #20]
 8004b58:	e036      	b.n	8004bc8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8004b5a:	68bb      	ldr	r3, [r7, #8]
 8004b5c:	4a2a      	ldr	r2, [pc, #168]	@ (8004c08 <USB_SetTurnaroundTime+0x130>)
 8004b5e:	4293      	cmp	r3, r2
 8004b60:	d906      	bls.n	8004b70 <USB_SetTurnaroundTime+0x98>
 8004b62:	68bb      	ldr	r3, [r7, #8]
 8004b64:	4a29      	ldr	r2, [pc, #164]	@ (8004c0c <USB_SetTurnaroundTime+0x134>)
 8004b66:	4293      	cmp	r3, r2
 8004b68:	d802      	bhi.n	8004b70 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8004b6a:	230a      	movs	r3, #10
 8004b6c:	617b      	str	r3, [r7, #20]
 8004b6e:	e02b      	b.n	8004bc8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8004b70:	68bb      	ldr	r3, [r7, #8]
 8004b72:	4a26      	ldr	r2, [pc, #152]	@ (8004c0c <USB_SetTurnaroundTime+0x134>)
 8004b74:	4293      	cmp	r3, r2
 8004b76:	d906      	bls.n	8004b86 <USB_SetTurnaroundTime+0xae>
 8004b78:	68bb      	ldr	r3, [r7, #8]
 8004b7a:	4a25      	ldr	r2, [pc, #148]	@ (8004c10 <USB_SetTurnaroundTime+0x138>)
 8004b7c:	4293      	cmp	r3, r2
 8004b7e:	d202      	bcs.n	8004b86 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8004b80:	2309      	movs	r3, #9
 8004b82:	617b      	str	r3, [r7, #20]
 8004b84:	e020      	b.n	8004bc8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8004b86:	68bb      	ldr	r3, [r7, #8]
 8004b88:	4a21      	ldr	r2, [pc, #132]	@ (8004c10 <USB_SetTurnaroundTime+0x138>)
 8004b8a:	4293      	cmp	r3, r2
 8004b8c:	d306      	bcc.n	8004b9c <USB_SetTurnaroundTime+0xc4>
 8004b8e:	68bb      	ldr	r3, [r7, #8]
 8004b90:	4a20      	ldr	r2, [pc, #128]	@ (8004c14 <USB_SetTurnaroundTime+0x13c>)
 8004b92:	4293      	cmp	r3, r2
 8004b94:	d802      	bhi.n	8004b9c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8004b96:	2308      	movs	r3, #8
 8004b98:	617b      	str	r3, [r7, #20]
 8004b9a:	e015      	b.n	8004bc8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8004b9c:	68bb      	ldr	r3, [r7, #8]
 8004b9e:	4a1d      	ldr	r2, [pc, #116]	@ (8004c14 <USB_SetTurnaroundTime+0x13c>)
 8004ba0:	4293      	cmp	r3, r2
 8004ba2:	d906      	bls.n	8004bb2 <USB_SetTurnaroundTime+0xda>
 8004ba4:	68bb      	ldr	r3, [r7, #8]
 8004ba6:	4a1c      	ldr	r2, [pc, #112]	@ (8004c18 <USB_SetTurnaroundTime+0x140>)
 8004ba8:	4293      	cmp	r3, r2
 8004baa:	d202      	bcs.n	8004bb2 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8004bac:	2307      	movs	r3, #7
 8004bae:	617b      	str	r3, [r7, #20]
 8004bb0:	e00a      	b.n	8004bc8 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8004bb2:	2306      	movs	r3, #6
 8004bb4:	617b      	str	r3, [r7, #20]
 8004bb6:	e007      	b.n	8004bc8 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8004bb8:	79fb      	ldrb	r3, [r7, #7]
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d102      	bne.n	8004bc4 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8004bbe:	2309      	movs	r3, #9
 8004bc0:	617b      	str	r3, [r7, #20]
 8004bc2:	e001      	b.n	8004bc8 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8004bc4:	2309      	movs	r3, #9
 8004bc6:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	68db      	ldr	r3, [r3, #12]
 8004bcc:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	68da      	ldr	r2, [r3, #12]
 8004bd8:	697b      	ldr	r3, [r7, #20]
 8004bda:	029b      	lsls	r3, r3, #10
 8004bdc:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8004be0:	431a      	orrs	r2, r3
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004be6:	2300      	movs	r3, #0
}
 8004be8:	4618      	mov	r0, r3
 8004bea:	371c      	adds	r7, #28
 8004bec:	46bd      	mov	sp, r7
 8004bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf2:	4770      	bx	lr
 8004bf4:	00d8acbf 	.word	0x00d8acbf
 8004bf8:	00e4e1c0 	.word	0x00e4e1c0
 8004bfc:	00f42400 	.word	0x00f42400
 8004c00:	01067380 	.word	0x01067380
 8004c04:	011a499f 	.word	0x011a499f
 8004c08:	01312cff 	.word	0x01312cff
 8004c0c:	014ca43f 	.word	0x014ca43f
 8004c10:	016e3600 	.word	0x016e3600
 8004c14:	01a6ab1f 	.word	0x01a6ab1f
 8004c18:	01e84800 	.word	0x01e84800

08004c1c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004c1c:	b480      	push	{r7}
 8004c1e:	b083      	sub	sp, #12
 8004c20:	af00      	add	r7, sp, #0
 8004c22:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	689b      	ldr	r3, [r3, #8]
 8004c28:	f043 0201 	orr.w	r2, r3, #1
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004c30:	2300      	movs	r3, #0
}
 8004c32:	4618      	mov	r0, r3
 8004c34:	370c      	adds	r7, #12
 8004c36:	46bd      	mov	sp, r7
 8004c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c3c:	4770      	bx	lr

08004c3e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004c3e:	b480      	push	{r7}
 8004c40:	b083      	sub	sp, #12
 8004c42:	af00      	add	r7, sp, #0
 8004c44:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	689b      	ldr	r3, [r3, #8]
 8004c4a:	f023 0201 	bic.w	r2, r3, #1
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004c52:	2300      	movs	r3, #0
}
 8004c54:	4618      	mov	r0, r3
 8004c56:	370c      	adds	r7, #12
 8004c58:	46bd      	mov	sp, r7
 8004c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c5e:	4770      	bx	lr

08004c60 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004c60:	b580      	push	{r7, lr}
 8004c62:	b084      	sub	sp, #16
 8004c64:	af00      	add	r7, sp, #0
 8004c66:	6078      	str	r0, [r7, #4]
 8004c68:	460b      	mov	r3, r1
 8004c6a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004c6c:	2300      	movs	r3, #0
 8004c6e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	68db      	ldr	r3, [r3, #12]
 8004c74:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004c7c:	78fb      	ldrb	r3, [r7, #3]
 8004c7e:	2b01      	cmp	r3, #1
 8004c80:	d115      	bne.n	8004cae <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	68db      	ldr	r3, [r3, #12]
 8004c86:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8004c8e:	200a      	movs	r0, #10
 8004c90:	f7fc f9b2 	bl	8000ff8 <HAL_Delay>
      ms += 10U;
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	330a      	adds	r3, #10
 8004c98:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8004c9a:	6878      	ldr	r0, [r7, #4]
 8004c9c:	f001 f93f 	bl	8005f1e <USB_GetMode>
 8004ca0:	4603      	mov	r3, r0
 8004ca2:	2b01      	cmp	r3, #1
 8004ca4:	d01e      	beq.n	8004ce4 <USB_SetCurrentMode+0x84>
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	2bc7      	cmp	r3, #199	@ 0xc7
 8004caa:	d9f0      	bls.n	8004c8e <USB_SetCurrentMode+0x2e>
 8004cac:	e01a      	b.n	8004ce4 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004cae:	78fb      	ldrb	r3, [r7, #3]
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d115      	bne.n	8004ce0 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	68db      	ldr	r3, [r3, #12]
 8004cb8:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8004cc0:	200a      	movs	r0, #10
 8004cc2:	f7fc f999 	bl	8000ff8 <HAL_Delay>
      ms += 10U;
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	330a      	adds	r3, #10
 8004cca:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8004ccc:	6878      	ldr	r0, [r7, #4]
 8004cce:	f001 f926 	bl	8005f1e <USB_GetMode>
 8004cd2:	4603      	mov	r3, r0
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d005      	beq.n	8004ce4 <USB_SetCurrentMode+0x84>
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	2bc7      	cmp	r3, #199	@ 0xc7
 8004cdc:	d9f0      	bls.n	8004cc0 <USB_SetCurrentMode+0x60>
 8004cde:	e001      	b.n	8004ce4 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004ce0:	2301      	movs	r3, #1
 8004ce2:	e005      	b.n	8004cf0 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	2bc8      	cmp	r3, #200	@ 0xc8
 8004ce8:	d101      	bne.n	8004cee <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004cea:	2301      	movs	r3, #1
 8004cec:	e000      	b.n	8004cf0 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004cee:	2300      	movs	r3, #0
}
 8004cf0:	4618      	mov	r0, r3
 8004cf2:	3710      	adds	r7, #16
 8004cf4:	46bd      	mov	sp, r7
 8004cf6:	bd80      	pop	{r7, pc}

08004cf8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004cf8:	b084      	sub	sp, #16
 8004cfa:	b580      	push	{r7, lr}
 8004cfc:	b086      	sub	sp, #24
 8004cfe:	af00      	add	r7, sp, #0
 8004d00:	6078      	str	r0, [r7, #4]
 8004d02:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8004d06:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004d0a:	2300      	movs	r3, #0
 8004d0c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004d12:	2300      	movs	r3, #0
 8004d14:	613b      	str	r3, [r7, #16]
 8004d16:	e009      	b.n	8004d2c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004d18:	687a      	ldr	r2, [r7, #4]
 8004d1a:	693b      	ldr	r3, [r7, #16]
 8004d1c:	3340      	adds	r3, #64	@ 0x40
 8004d1e:	009b      	lsls	r3, r3, #2
 8004d20:	4413      	add	r3, r2
 8004d22:	2200      	movs	r2, #0
 8004d24:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004d26:	693b      	ldr	r3, [r7, #16]
 8004d28:	3301      	adds	r3, #1
 8004d2a:	613b      	str	r3, [r7, #16]
 8004d2c:	693b      	ldr	r3, [r7, #16]
 8004d2e:	2b0e      	cmp	r3, #14
 8004d30:	d9f2      	bls.n	8004d18 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004d32:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d11c      	bne.n	8004d74 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004d40:	685b      	ldr	r3, [r3, #4]
 8004d42:	68fa      	ldr	r2, [r7, #12]
 8004d44:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004d48:	f043 0302 	orr.w	r3, r3, #2
 8004d4c:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d52:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d5e:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d6a:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	639a      	str	r2, [r3, #56]	@ 0x38
 8004d72:	e00b      	b.n	8004d8c <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d78:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d84:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8004d92:	461a      	mov	r2, r3
 8004d94:	2300      	movs	r3, #0
 8004d96:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004d98:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8004d9c:	2b01      	cmp	r3, #1
 8004d9e:	d10d      	bne.n	8004dbc <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004da0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d104      	bne.n	8004db2 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004da8:	2100      	movs	r1, #0
 8004daa:	6878      	ldr	r0, [r7, #4]
 8004dac:	f000 f968 	bl	8005080 <USB_SetDevSpeed>
 8004db0:	e008      	b.n	8004dc4 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004db2:	2101      	movs	r1, #1
 8004db4:	6878      	ldr	r0, [r7, #4]
 8004db6:	f000 f963 	bl	8005080 <USB_SetDevSpeed>
 8004dba:	e003      	b.n	8004dc4 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004dbc:	2103      	movs	r1, #3
 8004dbe:	6878      	ldr	r0, [r7, #4]
 8004dc0:	f000 f95e 	bl	8005080 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004dc4:	2110      	movs	r1, #16
 8004dc6:	6878      	ldr	r0, [r7, #4]
 8004dc8:	f000 f8fa 	bl	8004fc0 <USB_FlushTxFifo>
 8004dcc:	4603      	mov	r3, r0
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d001      	beq.n	8004dd6 <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8004dd2:	2301      	movs	r3, #1
 8004dd4:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004dd6:	6878      	ldr	r0, [r7, #4]
 8004dd8:	f000 f924 	bl	8005024 <USB_FlushRxFifo>
 8004ddc:	4603      	mov	r3, r0
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d001      	beq.n	8004de6 <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8004de2:	2301      	movs	r3, #1
 8004de4:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004dec:	461a      	mov	r2, r3
 8004dee:	2300      	movs	r3, #0
 8004df0:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004df8:	461a      	mov	r2, r3
 8004dfa:	2300      	movs	r3, #0
 8004dfc:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004e04:	461a      	mov	r2, r3
 8004e06:	2300      	movs	r3, #0
 8004e08:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004e0a:	2300      	movs	r3, #0
 8004e0c:	613b      	str	r3, [r7, #16]
 8004e0e:	e043      	b.n	8004e98 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004e10:	693b      	ldr	r3, [r7, #16]
 8004e12:	015a      	lsls	r2, r3, #5
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	4413      	add	r3, r2
 8004e18:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004e22:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004e26:	d118      	bne.n	8004e5a <USB_DevInit+0x162>
    {
      if (i == 0U)
 8004e28:	693b      	ldr	r3, [r7, #16]
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d10a      	bne.n	8004e44 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004e2e:	693b      	ldr	r3, [r7, #16]
 8004e30:	015a      	lsls	r2, r3, #5
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	4413      	add	r3, r2
 8004e36:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004e3a:	461a      	mov	r2, r3
 8004e3c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8004e40:	6013      	str	r3, [r2, #0]
 8004e42:	e013      	b.n	8004e6c <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004e44:	693b      	ldr	r3, [r7, #16]
 8004e46:	015a      	lsls	r2, r3, #5
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	4413      	add	r3, r2
 8004e4c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004e50:	461a      	mov	r2, r3
 8004e52:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8004e56:	6013      	str	r3, [r2, #0]
 8004e58:	e008      	b.n	8004e6c <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004e5a:	693b      	ldr	r3, [r7, #16]
 8004e5c:	015a      	lsls	r2, r3, #5
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	4413      	add	r3, r2
 8004e62:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004e66:	461a      	mov	r2, r3
 8004e68:	2300      	movs	r3, #0
 8004e6a:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004e6c:	693b      	ldr	r3, [r7, #16]
 8004e6e:	015a      	lsls	r2, r3, #5
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	4413      	add	r3, r2
 8004e74:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004e78:	461a      	mov	r2, r3
 8004e7a:	2300      	movs	r3, #0
 8004e7c:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004e7e:	693b      	ldr	r3, [r7, #16]
 8004e80:	015a      	lsls	r2, r3, #5
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	4413      	add	r3, r2
 8004e86:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004e8a:	461a      	mov	r2, r3
 8004e8c:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004e90:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004e92:	693b      	ldr	r3, [r7, #16]
 8004e94:	3301      	adds	r3, #1
 8004e96:	613b      	str	r3, [r7, #16]
 8004e98:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8004e9c:	461a      	mov	r2, r3
 8004e9e:	693b      	ldr	r3, [r7, #16]
 8004ea0:	4293      	cmp	r3, r2
 8004ea2:	d3b5      	bcc.n	8004e10 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004ea4:	2300      	movs	r3, #0
 8004ea6:	613b      	str	r3, [r7, #16]
 8004ea8:	e043      	b.n	8004f32 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004eaa:	693b      	ldr	r3, [r7, #16]
 8004eac:	015a      	lsls	r2, r3, #5
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	4413      	add	r3, r2
 8004eb2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004ebc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004ec0:	d118      	bne.n	8004ef4 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8004ec2:	693b      	ldr	r3, [r7, #16]
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d10a      	bne.n	8004ede <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004ec8:	693b      	ldr	r3, [r7, #16]
 8004eca:	015a      	lsls	r2, r3, #5
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	4413      	add	r3, r2
 8004ed0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004ed4:	461a      	mov	r2, r3
 8004ed6:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8004eda:	6013      	str	r3, [r2, #0]
 8004edc:	e013      	b.n	8004f06 <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004ede:	693b      	ldr	r3, [r7, #16]
 8004ee0:	015a      	lsls	r2, r3, #5
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	4413      	add	r3, r2
 8004ee6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004eea:	461a      	mov	r2, r3
 8004eec:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8004ef0:	6013      	str	r3, [r2, #0]
 8004ef2:	e008      	b.n	8004f06 <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004ef4:	693b      	ldr	r3, [r7, #16]
 8004ef6:	015a      	lsls	r2, r3, #5
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	4413      	add	r3, r2
 8004efc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004f00:	461a      	mov	r2, r3
 8004f02:	2300      	movs	r3, #0
 8004f04:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004f06:	693b      	ldr	r3, [r7, #16]
 8004f08:	015a      	lsls	r2, r3, #5
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	4413      	add	r3, r2
 8004f0e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004f12:	461a      	mov	r2, r3
 8004f14:	2300      	movs	r3, #0
 8004f16:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004f18:	693b      	ldr	r3, [r7, #16]
 8004f1a:	015a      	lsls	r2, r3, #5
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	4413      	add	r3, r2
 8004f20:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004f24:	461a      	mov	r2, r3
 8004f26:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004f2a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004f2c:	693b      	ldr	r3, [r7, #16]
 8004f2e:	3301      	adds	r3, #1
 8004f30:	613b      	str	r3, [r7, #16]
 8004f32:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8004f36:	461a      	mov	r2, r3
 8004f38:	693b      	ldr	r3, [r7, #16]
 8004f3a:	4293      	cmp	r3, r2
 8004f3c:	d3b5      	bcc.n	8004eaa <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004f44:	691b      	ldr	r3, [r3, #16]
 8004f46:	68fa      	ldr	r2, [r7, #12]
 8004f48:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004f4c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004f50:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	2200      	movs	r2, #0
 8004f56:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8004f5e:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004f60:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d105      	bne.n	8004f74 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	699b      	ldr	r3, [r3, #24]
 8004f6c:	f043 0210 	orr.w	r2, r3, #16
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	699a      	ldr	r2, [r3, #24]
 8004f78:	4b10      	ldr	r3, [pc, #64]	@ (8004fbc <USB_DevInit+0x2c4>)
 8004f7a:	4313      	orrs	r3, r2
 8004f7c:	687a      	ldr	r2, [r7, #4]
 8004f7e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004f80:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d005      	beq.n	8004f94 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	699b      	ldr	r3, [r3, #24]
 8004f8c:	f043 0208 	orr.w	r2, r3, #8
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004f94:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8004f98:	2b01      	cmp	r3, #1
 8004f9a:	d107      	bne.n	8004fac <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	699b      	ldr	r3, [r3, #24]
 8004fa0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004fa4:	f043 0304 	orr.w	r3, r3, #4
 8004fa8:	687a      	ldr	r2, [r7, #4]
 8004faa:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004fac:	7dfb      	ldrb	r3, [r7, #23]
}
 8004fae:	4618      	mov	r0, r3
 8004fb0:	3718      	adds	r7, #24
 8004fb2:	46bd      	mov	sp, r7
 8004fb4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004fb8:	b004      	add	sp, #16
 8004fba:	4770      	bx	lr
 8004fbc:	803c3800 	.word	0x803c3800

08004fc0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004fc0:	b480      	push	{r7}
 8004fc2:	b085      	sub	sp, #20
 8004fc4:	af00      	add	r7, sp, #0
 8004fc6:	6078      	str	r0, [r7, #4]
 8004fc8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004fca:	2300      	movs	r3, #0
 8004fcc:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	3301      	adds	r3, #1
 8004fd2:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004fda:	d901      	bls.n	8004fe0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004fdc:	2303      	movs	r3, #3
 8004fde:	e01b      	b.n	8005018 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	691b      	ldr	r3, [r3, #16]
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	daf2      	bge.n	8004fce <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004fe8:	2300      	movs	r3, #0
 8004fea:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004fec:	683b      	ldr	r3, [r7, #0]
 8004fee:	019b      	lsls	r3, r3, #6
 8004ff0:	f043 0220 	orr.w	r2, r3, #32
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	3301      	adds	r3, #1
 8004ffc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005004:	d901      	bls.n	800500a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005006:	2303      	movs	r3, #3
 8005008:	e006      	b.n	8005018 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	691b      	ldr	r3, [r3, #16]
 800500e:	f003 0320 	and.w	r3, r3, #32
 8005012:	2b20      	cmp	r3, #32
 8005014:	d0f0      	beq.n	8004ff8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005016:	2300      	movs	r3, #0
}
 8005018:	4618      	mov	r0, r3
 800501a:	3714      	adds	r7, #20
 800501c:	46bd      	mov	sp, r7
 800501e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005022:	4770      	bx	lr

08005024 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005024:	b480      	push	{r7}
 8005026:	b085      	sub	sp, #20
 8005028:	af00      	add	r7, sp, #0
 800502a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800502c:	2300      	movs	r3, #0
 800502e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	3301      	adds	r3, #1
 8005034:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800503c:	d901      	bls.n	8005042 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800503e:	2303      	movs	r3, #3
 8005040:	e018      	b.n	8005074 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	691b      	ldr	r3, [r3, #16]
 8005046:	2b00      	cmp	r3, #0
 8005048:	daf2      	bge.n	8005030 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800504a:	2300      	movs	r3, #0
 800504c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	2210      	movs	r2, #16
 8005052:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	3301      	adds	r3, #1
 8005058:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005060:	d901      	bls.n	8005066 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005062:	2303      	movs	r3, #3
 8005064:	e006      	b.n	8005074 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	691b      	ldr	r3, [r3, #16]
 800506a:	f003 0310 	and.w	r3, r3, #16
 800506e:	2b10      	cmp	r3, #16
 8005070:	d0f0      	beq.n	8005054 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005072:	2300      	movs	r3, #0
}
 8005074:	4618      	mov	r0, r3
 8005076:	3714      	adds	r7, #20
 8005078:	46bd      	mov	sp, r7
 800507a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800507e:	4770      	bx	lr

08005080 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005080:	b480      	push	{r7}
 8005082:	b085      	sub	sp, #20
 8005084:	af00      	add	r7, sp, #0
 8005086:	6078      	str	r0, [r7, #4]
 8005088:	460b      	mov	r3, r1
 800508a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005096:	681a      	ldr	r2, [r3, #0]
 8005098:	78fb      	ldrb	r3, [r7, #3]
 800509a:	68f9      	ldr	r1, [r7, #12]
 800509c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80050a0:	4313      	orrs	r3, r2
 80050a2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80050a4:	2300      	movs	r3, #0
}
 80050a6:	4618      	mov	r0, r3
 80050a8:	3714      	adds	r7, #20
 80050aa:	46bd      	mov	sp, r7
 80050ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b0:	4770      	bx	lr

080050b2 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 80050b2:	b480      	push	{r7}
 80050b4:	b087      	sub	sp, #28
 80050b6:	af00      	add	r7, sp, #0
 80050b8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80050be:	693b      	ldr	r3, [r7, #16]
 80050c0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80050c4:	689b      	ldr	r3, [r3, #8]
 80050c6:	f003 0306 	and.w	r3, r3, #6
 80050ca:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d102      	bne.n	80050d8 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80050d2:	2300      	movs	r3, #0
 80050d4:	75fb      	strb	r3, [r7, #23]
 80050d6:	e00a      	b.n	80050ee <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	2b02      	cmp	r3, #2
 80050dc:	d002      	beq.n	80050e4 <USB_GetDevSpeed+0x32>
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	2b06      	cmp	r3, #6
 80050e2:	d102      	bne.n	80050ea <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80050e4:	2302      	movs	r3, #2
 80050e6:	75fb      	strb	r3, [r7, #23]
 80050e8:	e001      	b.n	80050ee <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80050ea:	230f      	movs	r3, #15
 80050ec:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80050ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80050f0:	4618      	mov	r0, r3
 80050f2:	371c      	adds	r7, #28
 80050f4:	46bd      	mov	sp, r7
 80050f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050fa:	4770      	bx	lr

080050fc <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80050fc:	b480      	push	{r7}
 80050fe:	b085      	sub	sp, #20
 8005100:	af00      	add	r7, sp, #0
 8005102:	6078      	str	r0, [r7, #4]
 8005104:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800510a:	683b      	ldr	r3, [r7, #0]
 800510c:	781b      	ldrb	r3, [r3, #0]
 800510e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005110:	683b      	ldr	r3, [r7, #0]
 8005112:	785b      	ldrb	r3, [r3, #1]
 8005114:	2b01      	cmp	r3, #1
 8005116:	d13a      	bne.n	800518e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800511e:	69da      	ldr	r2, [r3, #28]
 8005120:	683b      	ldr	r3, [r7, #0]
 8005122:	781b      	ldrb	r3, [r3, #0]
 8005124:	f003 030f 	and.w	r3, r3, #15
 8005128:	2101      	movs	r1, #1
 800512a:	fa01 f303 	lsl.w	r3, r1, r3
 800512e:	b29b      	uxth	r3, r3
 8005130:	68f9      	ldr	r1, [r7, #12]
 8005132:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005136:	4313      	orrs	r3, r2
 8005138:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800513a:	68bb      	ldr	r3, [r7, #8]
 800513c:	015a      	lsls	r2, r3, #5
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	4413      	add	r3, r2
 8005142:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800514c:	2b00      	cmp	r3, #0
 800514e:	d155      	bne.n	80051fc <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005150:	68bb      	ldr	r3, [r7, #8]
 8005152:	015a      	lsls	r2, r3, #5
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	4413      	add	r3, r2
 8005158:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800515c:	681a      	ldr	r2, [r3, #0]
 800515e:	683b      	ldr	r3, [r7, #0]
 8005160:	689b      	ldr	r3, [r3, #8]
 8005162:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005166:	683b      	ldr	r3, [r7, #0]
 8005168:	791b      	ldrb	r3, [r3, #4]
 800516a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800516c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800516e:	68bb      	ldr	r3, [r7, #8]
 8005170:	059b      	lsls	r3, r3, #22
 8005172:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005174:	4313      	orrs	r3, r2
 8005176:	68ba      	ldr	r2, [r7, #8]
 8005178:	0151      	lsls	r1, r2, #5
 800517a:	68fa      	ldr	r2, [r7, #12]
 800517c:	440a      	add	r2, r1
 800517e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005182:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005186:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800518a:	6013      	str	r3, [r2, #0]
 800518c:	e036      	b.n	80051fc <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005194:	69da      	ldr	r2, [r3, #28]
 8005196:	683b      	ldr	r3, [r7, #0]
 8005198:	781b      	ldrb	r3, [r3, #0]
 800519a:	f003 030f 	and.w	r3, r3, #15
 800519e:	2101      	movs	r1, #1
 80051a0:	fa01 f303 	lsl.w	r3, r1, r3
 80051a4:	041b      	lsls	r3, r3, #16
 80051a6:	68f9      	ldr	r1, [r7, #12]
 80051a8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80051ac:	4313      	orrs	r3, r2
 80051ae:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80051b0:	68bb      	ldr	r3, [r7, #8]
 80051b2:	015a      	lsls	r2, r3, #5
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	4413      	add	r3, r2
 80051b8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d11a      	bne.n	80051fc <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80051c6:	68bb      	ldr	r3, [r7, #8]
 80051c8:	015a      	lsls	r2, r3, #5
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	4413      	add	r3, r2
 80051ce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80051d2:	681a      	ldr	r2, [r3, #0]
 80051d4:	683b      	ldr	r3, [r7, #0]
 80051d6:	689b      	ldr	r3, [r3, #8]
 80051d8:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80051dc:	683b      	ldr	r3, [r7, #0]
 80051de:	791b      	ldrb	r3, [r3, #4]
 80051e0:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80051e2:	430b      	orrs	r3, r1
 80051e4:	4313      	orrs	r3, r2
 80051e6:	68ba      	ldr	r2, [r7, #8]
 80051e8:	0151      	lsls	r1, r2, #5
 80051ea:	68fa      	ldr	r2, [r7, #12]
 80051ec:	440a      	add	r2, r1
 80051ee:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80051f2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80051f6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80051fa:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80051fc:	2300      	movs	r3, #0
}
 80051fe:	4618      	mov	r0, r3
 8005200:	3714      	adds	r7, #20
 8005202:	46bd      	mov	sp, r7
 8005204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005208:	4770      	bx	lr
	...

0800520c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800520c:	b480      	push	{r7}
 800520e:	b085      	sub	sp, #20
 8005210:	af00      	add	r7, sp, #0
 8005212:	6078      	str	r0, [r7, #4]
 8005214:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800521a:	683b      	ldr	r3, [r7, #0]
 800521c:	781b      	ldrb	r3, [r3, #0]
 800521e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8005220:	683b      	ldr	r3, [r7, #0]
 8005222:	785b      	ldrb	r3, [r3, #1]
 8005224:	2b01      	cmp	r3, #1
 8005226:	d161      	bne.n	80052ec <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005228:	68bb      	ldr	r3, [r7, #8]
 800522a:	015a      	lsls	r2, r3, #5
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	4413      	add	r3, r2
 8005230:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800523a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800523e:	d11f      	bne.n	8005280 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8005240:	68bb      	ldr	r3, [r7, #8]
 8005242:	015a      	lsls	r2, r3, #5
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	4413      	add	r3, r2
 8005248:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	68ba      	ldr	r2, [r7, #8]
 8005250:	0151      	lsls	r1, r2, #5
 8005252:	68fa      	ldr	r2, [r7, #12]
 8005254:	440a      	add	r2, r1
 8005256:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800525a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800525e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8005260:	68bb      	ldr	r3, [r7, #8]
 8005262:	015a      	lsls	r2, r3, #5
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	4413      	add	r3, r2
 8005268:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	68ba      	ldr	r2, [r7, #8]
 8005270:	0151      	lsls	r1, r2, #5
 8005272:	68fa      	ldr	r2, [r7, #12]
 8005274:	440a      	add	r2, r1
 8005276:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800527a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800527e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005286:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005288:	683b      	ldr	r3, [r7, #0]
 800528a:	781b      	ldrb	r3, [r3, #0]
 800528c:	f003 030f 	and.w	r3, r3, #15
 8005290:	2101      	movs	r1, #1
 8005292:	fa01 f303 	lsl.w	r3, r1, r3
 8005296:	b29b      	uxth	r3, r3
 8005298:	43db      	mvns	r3, r3
 800529a:	68f9      	ldr	r1, [r7, #12]
 800529c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80052a0:	4013      	ands	r3, r2
 80052a2:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80052aa:	69da      	ldr	r2, [r3, #28]
 80052ac:	683b      	ldr	r3, [r7, #0]
 80052ae:	781b      	ldrb	r3, [r3, #0]
 80052b0:	f003 030f 	and.w	r3, r3, #15
 80052b4:	2101      	movs	r1, #1
 80052b6:	fa01 f303 	lsl.w	r3, r1, r3
 80052ba:	b29b      	uxth	r3, r3
 80052bc:	43db      	mvns	r3, r3
 80052be:	68f9      	ldr	r1, [r7, #12]
 80052c0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80052c4:	4013      	ands	r3, r2
 80052c6:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80052c8:	68bb      	ldr	r3, [r7, #8]
 80052ca:	015a      	lsls	r2, r3, #5
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	4413      	add	r3, r2
 80052d0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80052d4:	681a      	ldr	r2, [r3, #0]
 80052d6:	68bb      	ldr	r3, [r7, #8]
 80052d8:	0159      	lsls	r1, r3, #5
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	440b      	add	r3, r1
 80052de:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80052e2:	4619      	mov	r1, r3
 80052e4:	4b35      	ldr	r3, [pc, #212]	@ (80053bc <USB_DeactivateEndpoint+0x1b0>)
 80052e6:	4013      	ands	r3, r2
 80052e8:	600b      	str	r3, [r1, #0]
 80052ea:	e060      	b.n	80053ae <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80052ec:	68bb      	ldr	r3, [r7, #8]
 80052ee:	015a      	lsls	r2, r3, #5
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	4413      	add	r3, r2
 80052f4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80052fe:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005302:	d11f      	bne.n	8005344 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005304:	68bb      	ldr	r3, [r7, #8]
 8005306:	015a      	lsls	r2, r3, #5
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	4413      	add	r3, r2
 800530c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	68ba      	ldr	r2, [r7, #8]
 8005314:	0151      	lsls	r1, r2, #5
 8005316:	68fa      	ldr	r2, [r7, #12]
 8005318:	440a      	add	r2, r1
 800531a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800531e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8005322:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8005324:	68bb      	ldr	r3, [r7, #8]
 8005326:	015a      	lsls	r2, r3, #5
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	4413      	add	r3, r2
 800532c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	68ba      	ldr	r2, [r7, #8]
 8005334:	0151      	lsls	r1, r2, #5
 8005336:	68fa      	ldr	r2, [r7, #12]
 8005338:	440a      	add	r2, r1
 800533a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800533e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005342:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800534a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800534c:	683b      	ldr	r3, [r7, #0]
 800534e:	781b      	ldrb	r3, [r3, #0]
 8005350:	f003 030f 	and.w	r3, r3, #15
 8005354:	2101      	movs	r1, #1
 8005356:	fa01 f303 	lsl.w	r3, r1, r3
 800535a:	041b      	lsls	r3, r3, #16
 800535c:	43db      	mvns	r3, r3
 800535e:	68f9      	ldr	r1, [r7, #12]
 8005360:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005364:	4013      	ands	r3, r2
 8005366:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800536e:	69da      	ldr	r2, [r3, #28]
 8005370:	683b      	ldr	r3, [r7, #0]
 8005372:	781b      	ldrb	r3, [r3, #0]
 8005374:	f003 030f 	and.w	r3, r3, #15
 8005378:	2101      	movs	r1, #1
 800537a:	fa01 f303 	lsl.w	r3, r1, r3
 800537e:	041b      	lsls	r3, r3, #16
 8005380:	43db      	mvns	r3, r3
 8005382:	68f9      	ldr	r1, [r7, #12]
 8005384:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005388:	4013      	ands	r3, r2
 800538a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800538c:	68bb      	ldr	r3, [r7, #8]
 800538e:	015a      	lsls	r2, r3, #5
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	4413      	add	r3, r2
 8005394:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005398:	681a      	ldr	r2, [r3, #0]
 800539a:	68bb      	ldr	r3, [r7, #8]
 800539c:	0159      	lsls	r1, r3, #5
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	440b      	add	r3, r1
 80053a2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80053a6:	4619      	mov	r1, r3
 80053a8:	4b05      	ldr	r3, [pc, #20]	@ (80053c0 <USB_DeactivateEndpoint+0x1b4>)
 80053aa:	4013      	ands	r3, r2
 80053ac:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80053ae:	2300      	movs	r3, #0
}
 80053b0:	4618      	mov	r0, r3
 80053b2:	3714      	adds	r7, #20
 80053b4:	46bd      	mov	sp, r7
 80053b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ba:	4770      	bx	lr
 80053bc:	ec337800 	.word	0xec337800
 80053c0:	eff37800 	.word	0xeff37800

080053c4 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80053c4:	b580      	push	{r7, lr}
 80053c6:	b08a      	sub	sp, #40	@ 0x28
 80053c8:	af02      	add	r7, sp, #8
 80053ca:	60f8      	str	r0, [r7, #12]
 80053cc:	60b9      	str	r1, [r7, #8]
 80053ce:	4613      	mov	r3, r2
 80053d0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80053d6:	68bb      	ldr	r3, [r7, #8]
 80053d8:	781b      	ldrb	r3, [r3, #0]
 80053da:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80053dc:	68bb      	ldr	r3, [r7, #8]
 80053de:	785b      	ldrb	r3, [r3, #1]
 80053e0:	2b01      	cmp	r3, #1
 80053e2:	f040 817f 	bne.w	80056e4 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80053e6:	68bb      	ldr	r3, [r7, #8]
 80053e8:	691b      	ldr	r3, [r3, #16]
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d132      	bne.n	8005454 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80053ee:	69bb      	ldr	r3, [r7, #24]
 80053f0:	015a      	lsls	r2, r3, #5
 80053f2:	69fb      	ldr	r3, [r7, #28]
 80053f4:	4413      	add	r3, r2
 80053f6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80053fa:	691b      	ldr	r3, [r3, #16]
 80053fc:	69ba      	ldr	r2, [r7, #24]
 80053fe:	0151      	lsls	r1, r2, #5
 8005400:	69fa      	ldr	r2, [r7, #28]
 8005402:	440a      	add	r2, r1
 8005404:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005408:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800540c:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8005410:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005412:	69bb      	ldr	r3, [r7, #24]
 8005414:	015a      	lsls	r2, r3, #5
 8005416:	69fb      	ldr	r3, [r7, #28]
 8005418:	4413      	add	r3, r2
 800541a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800541e:	691b      	ldr	r3, [r3, #16]
 8005420:	69ba      	ldr	r2, [r7, #24]
 8005422:	0151      	lsls	r1, r2, #5
 8005424:	69fa      	ldr	r2, [r7, #28]
 8005426:	440a      	add	r2, r1
 8005428:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800542c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005430:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005432:	69bb      	ldr	r3, [r7, #24]
 8005434:	015a      	lsls	r2, r3, #5
 8005436:	69fb      	ldr	r3, [r7, #28]
 8005438:	4413      	add	r3, r2
 800543a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800543e:	691b      	ldr	r3, [r3, #16]
 8005440:	69ba      	ldr	r2, [r7, #24]
 8005442:	0151      	lsls	r1, r2, #5
 8005444:	69fa      	ldr	r2, [r7, #28]
 8005446:	440a      	add	r2, r1
 8005448:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800544c:	0cdb      	lsrs	r3, r3, #19
 800544e:	04db      	lsls	r3, r3, #19
 8005450:	6113      	str	r3, [r2, #16]
 8005452:	e097      	b.n	8005584 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005454:	69bb      	ldr	r3, [r7, #24]
 8005456:	015a      	lsls	r2, r3, #5
 8005458:	69fb      	ldr	r3, [r7, #28]
 800545a:	4413      	add	r3, r2
 800545c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005460:	691b      	ldr	r3, [r3, #16]
 8005462:	69ba      	ldr	r2, [r7, #24]
 8005464:	0151      	lsls	r1, r2, #5
 8005466:	69fa      	ldr	r2, [r7, #28]
 8005468:	440a      	add	r2, r1
 800546a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800546e:	0cdb      	lsrs	r3, r3, #19
 8005470:	04db      	lsls	r3, r3, #19
 8005472:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005474:	69bb      	ldr	r3, [r7, #24]
 8005476:	015a      	lsls	r2, r3, #5
 8005478:	69fb      	ldr	r3, [r7, #28]
 800547a:	4413      	add	r3, r2
 800547c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005480:	691b      	ldr	r3, [r3, #16]
 8005482:	69ba      	ldr	r2, [r7, #24]
 8005484:	0151      	lsls	r1, r2, #5
 8005486:	69fa      	ldr	r2, [r7, #28]
 8005488:	440a      	add	r2, r1
 800548a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800548e:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8005492:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8005496:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8005498:	69bb      	ldr	r3, [r7, #24]
 800549a:	2b00      	cmp	r3, #0
 800549c:	d11a      	bne.n	80054d4 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 800549e:	68bb      	ldr	r3, [r7, #8]
 80054a0:	691a      	ldr	r2, [r3, #16]
 80054a2:	68bb      	ldr	r3, [r7, #8]
 80054a4:	689b      	ldr	r3, [r3, #8]
 80054a6:	429a      	cmp	r2, r3
 80054a8:	d903      	bls.n	80054b2 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 80054aa:	68bb      	ldr	r3, [r7, #8]
 80054ac:	689a      	ldr	r2, [r3, #8]
 80054ae:	68bb      	ldr	r3, [r7, #8]
 80054b0:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80054b2:	69bb      	ldr	r3, [r7, #24]
 80054b4:	015a      	lsls	r2, r3, #5
 80054b6:	69fb      	ldr	r3, [r7, #28]
 80054b8:	4413      	add	r3, r2
 80054ba:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80054be:	691b      	ldr	r3, [r3, #16]
 80054c0:	69ba      	ldr	r2, [r7, #24]
 80054c2:	0151      	lsls	r1, r2, #5
 80054c4:	69fa      	ldr	r2, [r7, #28]
 80054c6:	440a      	add	r2, r1
 80054c8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80054cc:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80054d0:	6113      	str	r3, [r2, #16]
 80054d2:	e044      	b.n	800555e <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80054d4:	68bb      	ldr	r3, [r7, #8]
 80054d6:	691a      	ldr	r2, [r3, #16]
 80054d8:	68bb      	ldr	r3, [r7, #8]
 80054da:	689b      	ldr	r3, [r3, #8]
 80054dc:	4413      	add	r3, r2
 80054de:	1e5a      	subs	r2, r3, #1
 80054e0:	68bb      	ldr	r3, [r7, #8]
 80054e2:	689b      	ldr	r3, [r3, #8]
 80054e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80054e8:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 80054ea:	69bb      	ldr	r3, [r7, #24]
 80054ec:	015a      	lsls	r2, r3, #5
 80054ee:	69fb      	ldr	r3, [r7, #28]
 80054f0:	4413      	add	r3, r2
 80054f2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80054f6:	691a      	ldr	r2, [r3, #16]
 80054f8:	8afb      	ldrh	r3, [r7, #22]
 80054fa:	04d9      	lsls	r1, r3, #19
 80054fc:	4ba4      	ldr	r3, [pc, #656]	@ (8005790 <USB_EPStartXfer+0x3cc>)
 80054fe:	400b      	ands	r3, r1
 8005500:	69b9      	ldr	r1, [r7, #24]
 8005502:	0148      	lsls	r0, r1, #5
 8005504:	69f9      	ldr	r1, [r7, #28]
 8005506:	4401      	add	r1, r0
 8005508:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800550c:	4313      	orrs	r3, r2
 800550e:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 8005510:	68bb      	ldr	r3, [r7, #8]
 8005512:	791b      	ldrb	r3, [r3, #4]
 8005514:	2b01      	cmp	r3, #1
 8005516:	d122      	bne.n	800555e <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8005518:	69bb      	ldr	r3, [r7, #24]
 800551a:	015a      	lsls	r2, r3, #5
 800551c:	69fb      	ldr	r3, [r7, #28]
 800551e:	4413      	add	r3, r2
 8005520:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005524:	691b      	ldr	r3, [r3, #16]
 8005526:	69ba      	ldr	r2, [r7, #24]
 8005528:	0151      	lsls	r1, r2, #5
 800552a:	69fa      	ldr	r2, [r7, #28]
 800552c:	440a      	add	r2, r1
 800552e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005532:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8005536:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 8005538:	69bb      	ldr	r3, [r7, #24]
 800553a:	015a      	lsls	r2, r3, #5
 800553c:	69fb      	ldr	r3, [r7, #28]
 800553e:	4413      	add	r3, r2
 8005540:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005544:	691a      	ldr	r2, [r3, #16]
 8005546:	8afb      	ldrh	r3, [r7, #22]
 8005548:	075b      	lsls	r3, r3, #29
 800554a:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 800554e:	69b9      	ldr	r1, [r7, #24]
 8005550:	0148      	lsls	r0, r1, #5
 8005552:	69f9      	ldr	r1, [r7, #28]
 8005554:	4401      	add	r1, r0
 8005556:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800555a:	4313      	orrs	r3, r2
 800555c:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800555e:	69bb      	ldr	r3, [r7, #24]
 8005560:	015a      	lsls	r2, r3, #5
 8005562:	69fb      	ldr	r3, [r7, #28]
 8005564:	4413      	add	r3, r2
 8005566:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800556a:	691a      	ldr	r2, [r3, #16]
 800556c:	68bb      	ldr	r3, [r7, #8]
 800556e:	691b      	ldr	r3, [r3, #16]
 8005570:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005574:	69b9      	ldr	r1, [r7, #24]
 8005576:	0148      	lsls	r0, r1, #5
 8005578:	69f9      	ldr	r1, [r7, #28]
 800557a:	4401      	add	r1, r0
 800557c:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8005580:	4313      	orrs	r3, r2
 8005582:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005584:	79fb      	ldrb	r3, [r7, #7]
 8005586:	2b01      	cmp	r3, #1
 8005588:	d14b      	bne.n	8005622 <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800558a:	68bb      	ldr	r3, [r7, #8]
 800558c:	69db      	ldr	r3, [r3, #28]
 800558e:	2b00      	cmp	r3, #0
 8005590:	d009      	beq.n	80055a6 <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005592:	69bb      	ldr	r3, [r7, #24]
 8005594:	015a      	lsls	r2, r3, #5
 8005596:	69fb      	ldr	r3, [r7, #28]
 8005598:	4413      	add	r3, r2
 800559a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800559e:	461a      	mov	r2, r3
 80055a0:	68bb      	ldr	r3, [r7, #8]
 80055a2:	69db      	ldr	r3, [r3, #28]
 80055a4:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80055a6:	68bb      	ldr	r3, [r7, #8]
 80055a8:	791b      	ldrb	r3, [r3, #4]
 80055aa:	2b01      	cmp	r3, #1
 80055ac:	d128      	bne.n	8005600 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80055ae:	69fb      	ldr	r3, [r7, #28]
 80055b0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80055b4:	689b      	ldr	r3, [r3, #8]
 80055b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d110      	bne.n	80055e0 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80055be:	69bb      	ldr	r3, [r7, #24]
 80055c0:	015a      	lsls	r2, r3, #5
 80055c2:	69fb      	ldr	r3, [r7, #28]
 80055c4:	4413      	add	r3, r2
 80055c6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	69ba      	ldr	r2, [r7, #24]
 80055ce:	0151      	lsls	r1, r2, #5
 80055d0:	69fa      	ldr	r2, [r7, #28]
 80055d2:	440a      	add	r2, r1
 80055d4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80055d8:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80055dc:	6013      	str	r3, [r2, #0]
 80055de:	e00f      	b.n	8005600 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80055e0:	69bb      	ldr	r3, [r7, #24]
 80055e2:	015a      	lsls	r2, r3, #5
 80055e4:	69fb      	ldr	r3, [r7, #28]
 80055e6:	4413      	add	r3, r2
 80055e8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	69ba      	ldr	r2, [r7, #24]
 80055f0:	0151      	lsls	r1, r2, #5
 80055f2:	69fa      	ldr	r2, [r7, #28]
 80055f4:	440a      	add	r2, r1
 80055f6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80055fa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80055fe:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005600:	69bb      	ldr	r3, [r7, #24]
 8005602:	015a      	lsls	r2, r3, #5
 8005604:	69fb      	ldr	r3, [r7, #28]
 8005606:	4413      	add	r3, r2
 8005608:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	69ba      	ldr	r2, [r7, #24]
 8005610:	0151      	lsls	r1, r2, #5
 8005612:	69fa      	ldr	r2, [r7, #28]
 8005614:	440a      	add	r2, r1
 8005616:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800561a:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800561e:	6013      	str	r3, [r2, #0]
 8005620:	e166      	b.n	80058f0 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005622:	69bb      	ldr	r3, [r7, #24]
 8005624:	015a      	lsls	r2, r3, #5
 8005626:	69fb      	ldr	r3, [r7, #28]
 8005628:	4413      	add	r3, r2
 800562a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	69ba      	ldr	r2, [r7, #24]
 8005632:	0151      	lsls	r1, r2, #5
 8005634:	69fa      	ldr	r2, [r7, #28]
 8005636:	440a      	add	r2, r1
 8005638:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800563c:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8005640:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005642:	68bb      	ldr	r3, [r7, #8]
 8005644:	791b      	ldrb	r3, [r3, #4]
 8005646:	2b01      	cmp	r3, #1
 8005648:	d015      	beq.n	8005676 <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800564a:	68bb      	ldr	r3, [r7, #8]
 800564c:	691b      	ldr	r3, [r3, #16]
 800564e:	2b00      	cmp	r3, #0
 8005650:	f000 814e 	beq.w	80058f0 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005654:	69fb      	ldr	r3, [r7, #28]
 8005656:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800565a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800565c:	68bb      	ldr	r3, [r7, #8]
 800565e:	781b      	ldrb	r3, [r3, #0]
 8005660:	f003 030f 	and.w	r3, r3, #15
 8005664:	2101      	movs	r1, #1
 8005666:	fa01 f303 	lsl.w	r3, r1, r3
 800566a:	69f9      	ldr	r1, [r7, #28]
 800566c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005670:	4313      	orrs	r3, r2
 8005672:	634b      	str	r3, [r1, #52]	@ 0x34
 8005674:	e13c      	b.n	80058f0 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005676:	69fb      	ldr	r3, [r7, #28]
 8005678:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800567c:	689b      	ldr	r3, [r3, #8]
 800567e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005682:	2b00      	cmp	r3, #0
 8005684:	d110      	bne.n	80056a8 <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005686:	69bb      	ldr	r3, [r7, #24]
 8005688:	015a      	lsls	r2, r3, #5
 800568a:	69fb      	ldr	r3, [r7, #28]
 800568c:	4413      	add	r3, r2
 800568e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	69ba      	ldr	r2, [r7, #24]
 8005696:	0151      	lsls	r1, r2, #5
 8005698:	69fa      	ldr	r2, [r7, #28]
 800569a:	440a      	add	r2, r1
 800569c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80056a0:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80056a4:	6013      	str	r3, [r2, #0]
 80056a6:	e00f      	b.n	80056c8 <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80056a8:	69bb      	ldr	r3, [r7, #24]
 80056aa:	015a      	lsls	r2, r3, #5
 80056ac:	69fb      	ldr	r3, [r7, #28]
 80056ae:	4413      	add	r3, r2
 80056b0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	69ba      	ldr	r2, [r7, #24]
 80056b8:	0151      	lsls	r1, r2, #5
 80056ba:	69fa      	ldr	r2, [r7, #28]
 80056bc:	440a      	add	r2, r1
 80056be:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80056c2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80056c6:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80056c8:	68bb      	ldr	r3, [r7, #8]
 80056ca:	68d9      	ldr	r1, [r3, #12]
 80056cc:	68bb      	ldr	r3, [r7, #8]
 80056ce:	781a      	ldrb	r2, [r3, #0]
 80056d0:	68bb      	ldr	r3, [r7, #8]
 80056d2:	691b      	ldr	r3, [r3, #16]
 80056d4:	b298      	uxth	r0, r3
 80056d6:	79fb      	ldrb	r3, [r7, #7]
 80056d8:	9300      	str	r3, [sp, #0]
 80056da:	4603      	mov	r3, r0
 80056dc:	68f8      	ldr	r0, [r7, #12]
 80056de:	f000 f9b9 	bl	8005a54 <USB_WritePacket>
 80056e2:	e105      	b.n	80058f0 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80056e4:	69bb      	ldr	r3, [r7, #24]
 80056e6:	015a      	lsls	r2, r3, #5
 80056e8:	69fb      	ldr	r3, [r7, #28]
 80056ea:	4413      	add	r3, r2
 80056ec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80056f0:	691b      	ldr	r3, [r3, #16]
 80056f2:	69ba      	ldr	r2, [r7, #24]
 80056f4:	0151      	lsls	r1, r2, #5
 80056f6:	69fa      	ldr	r2, [r7, #28]
 80056f8:	440a      	add	r2, r1
 80056fa:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80056fe:	0cdb      	lsrs	r3, r3, #19
 8005700:	04db      	lsls	r3, r3, #19
 8005702:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005704:	69bb      	ldr	r3, [r7, #24]
 8005706:	015a      	lsls	r2, r3, #5
 8005708:	69fb      	ldr	r3, [r7, #28]
 800570a:	4413      	add	r3, r2
 800570c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005710:	691b      	ldr	r3, [r3, #16]
 8005712:	69ba      	ldr	r2, [r7, #24]
 8005714:	0151      	lsls	r1, r2, #5
 8005716:	69fa      	ldr	r2, [r7, #28]
 8005718:	440a      	add	r2, r1
 800571a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800571e:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8005722:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8005726:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8005728:	69bb      	ldr	r3, [r7, #24]
 800572a:	2b00      	cmp	r3, #0
 800572c:	d132      	bne.n	8005794 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 800572e:	68bb      	ldr	r3, [r7, #8]
 8005730:	691b      	ldr	r3, [r3, #16]
 8005732:	2b00      	cmp	r3, #0
 8005734:	d003      	beq.n	800573e <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 8005736:	68bb      	ldr	r3, [r7, #8]
 8005738:	689a      	ldr	r2, [r3, #8]
 800573a:	68bb      	ldr	r3, [r7, #8]
 800573c:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 800573e:	68bb      	ldr	r3, [r7, #8]
 8005740:	689a      	ldr	r2, [r3, #8]
 8005742:	68bb      	ldr	r3, [r7, #8]
 8005744:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8005746:	69bb      	ldr	r3, [r7, #24]
 8005748:	015a      	lsls	r2, r3, #5
 800574a:	69fb      	ldr	r3, [r7, #28]
 800574c:	4413      	add	r3, r2
 800574e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005752:	691a      	ldr	r2, [r3, #16]
 8005754:	68bb      	ldr	r3, [r7, #8]
 8005756:	6a1b      	ldr	r3, [r3, #32]
 8005758:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800575c:	69b9      	ldr	r1, [r7, #24]
 800575e:	0148      	lsls	r0, r1, #5
 8005760:	69f9      	ldr	r1, [r7, #28]
 8005762:	4401      	add	r1, r0
 8005764:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8005768:	4313      	orrs	r3, r2
 800576a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800576c:	69bb      	ldr	r3, [r7, #24]
 800576e:	015a      	lsls	r2, r3, #5
 8005770:	69fb      	ldr	r3, [r7, #28]
 8005772:	4413      	add	r3, r2
 8005774:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005778:	691b      	ldr	r3, [r3, #16]
 800577a:	69ba      	ldr	r2, [r7, #24]
 800577c:	0151      	lsls	r1, r2, #5
 800577e:	69fa      	ldr	r2, [r7, #28]
 8005780:	440a      	add	r2, r1
 8005782:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005786:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800578a:	6113      	str	r3, [r2, #16]
 800578c:	e062      	b.n	8005854 <USB_EPStartXfer+0x490>
 800578e:	bf00      	nop
 8005790:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8005794:	68bb      	ldr	r3, [r7, #8]
 8005796:	691b      	ldr	r3, [r3, #16]
 8005798:	2b00      	cmp	r3, #0
 800579a:	d123      	bne.n	80057e4 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800579c:	69bb      	ldr	r3, [r7, #24]
 800579e:	015a      	lsls	r2, r3, #5
 80057a0:	69fb      	ldr	r3, [r7, #28]
 80057a2:	4413      	add	r3, r2
 80057a4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80057a8:	691a      	ldr	r2, [r3, #16]
 80057aa:	68bb      	ldr	r3, [r7, #8]
 80057ac:	689b      	ldr	r3, [r3, #8]
 80057ae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80057b2:	69b9      	ldr	r1, [r7, #24]
 80057b4:	0148      	lsls	r0, r1, #5
 80057b6:	69f9      	ldr	r1, [r7, #28]
 80057b8:	4401      	add	r1, r0
 80057ba:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80057be:	4313      	orrs	r3, r2
 80057c0:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80057c2:	69bb      	ldr	r3, [r7, #24]
 80057c4:	015a      	lsls	r2, r3, #5
 80057c6:	69fb      	ldr	r3, [r7, #28]
 80057c8:	4413      	add	r3, r2
 80057ca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80057ce:	691b      	ldr	r3, [r3, #16]
 80057d0:	69ba      	ldr	r2, [r7, #24]
 80057d2:	0151      	lsls	r1, r2, #5
 80057d4:	69fa      	ldr	r2, [r7, #28]
 80057d6:	440a      	add	r2, r1
 80057d8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80057dc:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80057e0:	6113      	str	r3, [r2, #16]
 80057e2:	e037      	b.n	8005854 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80057e4:	68bb      	ldr	r3, [r7, #8]
 80057e6:	691a      	ldr	r2, [r3, #16]
 80057e8:	68bb      	ldr	r3, [r7, #8]
 80057ea:	689b      	ldr	r3, [r3, #8]
 80057ec:	4413      	add	r3, r2
 80057ee:	1e5a      	subs	r2, r3, #1
 80057f0:	68bb      	ldr	r3, [r7, #8]
 80057f2:	689b      	ldr	r3, [r3, #8]
 80057f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80057f8:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 80057fa:	68bb      	ldr	r3, [r7, #8]
 80057fc:	689b      	ldr	r3, [r3, #8]
 80057fe:	8afa      	ldrh	r2, [r7, #22]
 8005800:	fb03 f202 	mul.w	r2, r3, r2
 8005804:	68bb      	ldr	r3, [r7, #8]
 8005806:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8005808:	69bb      	ldr	r3, [r7, #24]
 800580a:	015a      	lsls	r2, r3, #5
 800580c:	69fb      	ldr	r3, [r7, #28]
 800580e:	4413      	add	r3, r2
 8005810:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005814:	691a      	ldr	r2, [r3, #16]
 8005816:	8afb      	ldrh	r3, [r7, #22]
 8005818:	04d9      	lsls	r1, r3, #19
 800581a:	4b38      	ldr	r3, [pc, #224]	@ (80058fc <USB_EPStartXfer+0x538>)
 800581c:	400b      	ands	r3, r1
 800581e:	69b9      	ldr	r1, [r7, #24]
 8005820:	0148      	lsls	r0, r1, #5
 8005822:	69f9      	ldr	r1, [r7, #28]
 8005824:	4401      	add	r1, r0
 8005826:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800582a:	4313      	orrs	r3, r2
 800582c:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800582e:	69bb      	ldr	r3, [r7, #24]
 8005830:	015a      	lsls	r2, r3, #5
 8005832:	69fb      	ldr	r3, [r7, #28]
 8005834:	4413      	add	r3, r2
 8005836:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800583a:	691a      	ldr	r2, [r3, #16]
 800583c:	68bb      	ldr	r3, [r7, #8]
 800583e:	6a1b      	ldr	r3, [r3, #32]
 8005840:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005844:	69b9      	ldr	r1, [r7, #24]
 8005846:	0148      	lsls	r0, r1, #5
 8005848:	69f9      	ldr	r1, [r7, #28]
 800584a:	4401      	add	r1, r0
 800584c:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8005850:	4313      	orrs	r3, r2
 8005852:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8005854:	79fb      	ldrb	r3, [r7, #7]
 8005856:	2b01      	cmp	r3, #1
 8005858:	d10d      	bne.n	8005876 <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800585a:	68bb      	ldr	r3, [r7, #8]
 800585c:	68db      	ldr	r3, [r3, #12]
 800585e:	2b00      	cmp	r3, #0
 8005860:	d009      	beq.n	8005876 <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005862:	68bb      	ldr	r3, [r7, #8]
 8005864:	68d9      	ldr	r1, [r3, #12]
 8005866:	69bb      	ldr	r3, [r7, #24]
 8005868:	015a      	lsls	r2, r3, #5
 800586a:	69fb      	ldr	r3, [r7, #28]
 800586c:	4413      	add	r3, r2
 800586e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005872:	460a      	mov	r2, r1
 8005874:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8005876:	68bb      	ldr	r3, [r7, #8]
 8005878:	791b      	ldrb	r3, [r3, #4]
 800587a:	2b01      	cmp	r3, #1
 800587c:	d128      	bne.n	80058d0 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800587e:	69fb      	ldr	r3, [r7, #28]
 8005880:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005884:	689b      	ldr	r3, [r3, #8]
 8005886:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800588a:	2b00      	cmp	r3, #0
 800588c:	d110      	bne.n	80058b0 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800588e:	69bb      	ldr	r3, [r7, #24]
 8005890:	015a      	lsls	r2, r3, #5
 8005892:	69fb      	ldr	r3, [r7, #28]
 8005894:	4413      	add	r3, r2
 8005896:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	69ba      	ldr	r2, [r7, #24]
 800589e:	0151      	lsls	r1, r2, #5
 80058a0:	69fa      	ldr	r2, [r7, #28]
 80058a2:	440a      	add	r2, r1
 80058a4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80058a8:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80058ac:	6013      	str	r3, [r2, #0]
 80058ae:	e00f      	b.n	80058d0 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80058b0:	69bb      	ldr	r3, [r7, #24]
 80058b2:	015a      	lsls	r2, r3, #5
 80058b4:	69fb      	ldr	r3, [r7, #28]
 80058b6:	4413      	add	r3, r2
 80058b8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	69ba      	ldr	r2, [r7, #24]
 80058c0:	0151      	lsls	r1, r2, #5
 80058c2:	69fa      	ldr	r2, [r7, #28]
 80058c4:	440a      	add	r2, r1
 80058c6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80058ca:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80058ce:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80058d0:	69bb      	ldr	r3, [r7, #24]
 80058d2:	015a      	lsls	r2, r3, #5
 80058d4:	69fb      	ldr	r3, [r7, #28]
 80058d6:	4413      	add	r3, r2
 80058d8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	69ba      	ldr	r2, [r7, #24]
 80058e0:	0151      	lsls	r1, r2, #5
 80058e2:	69fa      	ldr	r2, [r7, #28]
 80058e4:	440a      	add	r2, r1
 80058e6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80058ea:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80058ee:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80058f0:	2300      	movs	r3, #0
}
 80058f2:	4618      	mov	r0, r3
 80058f4:	3720      	adds	r7, #32
 80058f6:	46bd      	mov	sp, r7
 80058f8:	bd80      	pop	{r7, pc}
 80058fa:	bf00      	nop
 80058fc:	1ff80000 	.word	0x1ff80000

08005900 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005900:	b480      	push	{r7}
 8005902:	b087      	sub	sp, #28
 8005904:	af00      	add	r7, sp, #0
 8005906:	6078      	str	r0, [r7, #4]
 8005908:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800590a:	2300      	movs	r3, #0
 800590c:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800590e:	2300      	movs	r3, #0
 8005910:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005916:	683b      	ldr	r3, [r7, #0]
 8005918:	785b      	ldrb	r3, [r3, #1]
 800591a:	2b01      	cmp	r3, #1
 800591c:	d14a      	bne.n	80059b4 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800591e:	683b      	ldr	r3, [r7, #0]
 8005920:	781b      	ldrb	r3, [r3, #0]
 8005922:	015a      	lsls	r2, r3, #5
 8005924:	693b      	ldr	r3, [r7, #16]
 8005926:	4413      	add	r3, r2
 8005928:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005932:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005936:	f040 8086 	bne.w	8005a46 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800593a:	683b      	ldr	r3, [r7, #0]
 800593c:	781b      	ldrb	r3, [r3, #0]
 800593e:	015a      	lsls	r2, r3, #5
 8005940:	693b      	ldr	r3, [r7, #16]
 8005942:	4413      	add	r3, r2
 8005944:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	683a      	ldr	r2, [r7, #0]
 800594c:	7812      	ldrb	r2, [r2, #0]
 800594e:	0151      	lsls	r1, r2, #5
 8005950:	693a      	ldr	r2, [r7, #16]
 8005952:	440a      	add	r2, r1
 8005954:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005958:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800595c:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800595e:	683b      	ldr	r3, [r7, #0]
 8005960:	781b      	ldrb	r3, [r3, #0]
 8005962:	015a      	lsls	r2, r3, #5
 8005964:	693b      	ldr	r3, [r7, #16]
 8005966:	4413      	add	r3, r2
 8005968:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	683a      	ldr	r2, [r7, #0]
 8005970:	7812      	ldrb	r2, [r2, #0]
 8005972:	0151      	lsls	r1, r2, #5
 8005974:	693a      	ldr	r2, [r7, #16]
 8005976:	440a      	add	r2, r1
 8005978:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800597c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005980:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	3301      	adds	r3, #1
 8005986:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	f242 7210 	movw	r2, #10000	@ 0x2710
 800598e:	4293      	cmp	r3, r2
 8005990:	d902      	bls.n	8005998 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8005992:	2301      	movs	r3, #1
 8005994:	75fb      	strb	r3, [r7, #23]
          break;
 8005996:	e056      	b.n	8005a46 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8005998:	683b      	ldr	r3, [r7, #0]
 800599a:	781b      	ldrb	r3, [r3, #0]
 800599c:	015a      	lsls	r2, r3, #5
 800599e:	693b      	ldr	r3, [r7, #16]
 80059a0:	4413      	add	r3, r2
 80059a2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80059ac:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80059b0:	d0e7      	beq.n	8005982 <USB_EPStopXfer+0x82>
 80059b2:	e048      	b.n	8005a46 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80059b4:	683b      	ldr	r3, [r7, #0]
 80059b6:	781b      	ldrb	r3, [r3, #0]
 80059b8:	015a      	lsls	r2, r3, #5
 80059ba:	693b      	ldr	r3, [r7, #16]
 80059bc:	4413      	add	r3, r2
 80059be:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80059c8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80059cc:	d13b      	bne.n	8005a46 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80059ce:	683b      	ldr	r3, [r7, #0]
 80059d0:	781b      	ldrb	r3, [r3, #0]
 80059d2:	015a      	lsls	r2, r3, #5
 80059d4:	693b      	ldr	r3, [r7, #16]
 80059d6:	4413      	add	r3, r2
 80059d8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	683a      	ldr	r2, [r7, #0]
 80059e0:	7812      	ldrb	r2, [r2, #0]
 80059e2:	0151      	lsls	r1, r2, #5
 80059e4:	693a      	ldr	r2, [r7, #16]
 80059e6:	440a      	add	r2, r1
 80059e8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80059ec:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80059f0:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80059f2:	683b      	ldr	r3, [r7, #0]
 80059f4:	781b      	ldrb	r3, [r3, #0]
 80059f6:	015a      	lsls	r2, r3, #5
 80059f8:	693b      	ldr	r3, [r7, #16]
 80059fa:	4413      	add	r3, r2
 80059fc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	683a      	ldr	r2, [r7, #0]
 8005a04:	7812      	ldrb	r2, [r2, #0]
 8005a06:	0151      	lsls	r1, r2, #5
 8005a08:	693a      	ldr	r2, [r7, #16]
 8005a0a:	440a      	add	r2, r1
 8005a0c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005a10:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005a14:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	3301      	adds	r3, #1
 8005a1a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	f242 7210 	movw	r2, #10000	@ 0x2710
 8005a22:	4293      	cmp	r3, r2
 8005a24:	d902      	bls.n	8005a2c <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8005a26:	2301      	movs	r3, #1
 8005a28:	75fb      	strb	r3, [r7, #23]
          break;
 8005a2a:	e00c      	b.n	8005a46 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8005a2c:	683b      	ldr	r3, [r7, #0]
 8005a2e:	781b      	ldrb	r3, [r3, #0]
 8005a30:	015a      	lsls	r2, r3, #5
 8005a32:	693b      	ldr	r3, [r7, #16]
 8005a34:	4413      	add	r3, r2
 8005a36:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005a40:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005a44:	d0e7      	beq.n	8005a16 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8005a46:	7dfb      	ldrb	r3, [r7, #23]
}
 8005a48:	4618      	mov	r0, r3
 8005a4a:	371c      	adds	r7, #28
 8005a4c:	46bd      	mov	sp, r7
 8005a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a52:	4770      	bx	lr

08005a54 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005a54:	b480      	push	{r7}
 8005a56:	b089      	sub	sp, #36	@ 0x24
 8005a58:	af00      	add	r7, sp, #0
 8005a5a:	60f8      	str	r0, [r7, #12]
 8005a5c:	60b9      	str	r1, [r7, #8]
 8005a5e:	4611      	mov	r1, r2
 8005a60:	461a      	mov	r2, r3
 8005a62:	460b      	mov	r3, r1
 8005a64:	71fb      	strb	r3, [r7, #7]
 8005a66:	4613      	mov	r3, r2
 8005a68:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8005a6e:	68bb      	ldr	r3, [r7, #8]
 8005a70:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8005a72:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d123      	bne.n	8005ac2 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005a7a:	88bb      	ldrh	r3, [r7, #4]
 8005a7c:	3303      	adds	r3, #3
 8005a7e:	089b      	lsrs	r3, r3, #2
 8005a80:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005a82:	2300      	movs	r3, #0
 8005a84:	61bb      	str	r3, [r7, #24]
 8005a86:	e018      	b.n	8005aba <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005a88:	79fb      	ldrb	r3, [r7, #7]
 8005a8a:	031a      	lsls	r2, r3, #12
 8005a8c:	697b      	ldr	r3, [r7, #20]
 8005a8e:	4413      	add	r3, r2
 8005a90:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005a94:	461a      	mov	r2, r3
 8005a96:	69fb      	ldr	r3, [r7, #28]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005a9c:	69fb      	ldr	r3, [r7, #28]
 8005a9e:	3301      	adds	r3, #1
 8005aa0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005aa2:	69fb      	ldr	r3, [r7, #28]
 8005aa4:	3301      	adds	r3, #1
 8005aa6:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005aa8:	69fb      	ldr	r3, [r7, #28]
 8005aaa:	3301      	adds	r3, #1
 8005aac:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005aae:	69fb      	ldr	r3, [r7, #28]
 8005ab0:	3301      	adds	r3, #1
 8005ab2:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005ab4:	69bb      	ldr	r3, [r7, #24]
 8005ab6:	3301      	adds	r3, #1
 8005ab8:	61bb      	str	r3, [r7, #24]
 8005aba:	69ba      	ldr	r2, [r7, #24]
 8005abc:	693b      	ldr	r3, [r7, #16]
 8005abe:	429a      	cmp	r2, r3
 8005ac0:	d3e2      	bcc.n	8005a88 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005ac2:	2300      	movs	r3, #0
}
 8005ac4:	4618      	mov	r0, r3
 8005ac6:	3724      	adds	r7, #36	@ 0x24
 8005ac8:	46bd      	mov	sp, r7
 8005aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ace:	4770      	bx	lr

08005ad0 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005ad0:	b480      	push	{r7}
 8005ad2:	b08b      	sub	sp, #44	@ 0x2c
 8005ad4:	af00      	add	r7, sp, #0
 8005ad6:	60f8      	str	r0, [r7, #12]
 8005ad8:	60b9      	str	r1, [r7, #8]
 8005ada:	4613      	mov	r3, r2
 8005adc:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8005ae2:	68bb      	ldr	r3, [r7, #8]
 8005ae4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8005ae6:	88fb      	ldrh	r3, [r7, #6]
 8005ae8:	089b      	lsrs	r3, r3, #2
 8005aea:	b29b      	uxth	r3, r3
 8005aec:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005aee:	88fb      	ldrh	r3, [r7, #6]
 8005af0:	f003 0303 	and.w	r3, r3, #3
 8005af4:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8005af6:	2300      	movs	r3, #0
 8005af8:	623b      	str	r3, [r7, #32]
 8005afa:	e014      	b.n	8005b26 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005afc:	69bb      	ldr	r3, [r7, #24]
 8005afe:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005b02:	681a      	ldr	r2, [r3, #0]
 8005b04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b06:	601a      	str	r2, [r3, #0]
    pDest++;
 8005b08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b0a:	3301      	adds	r3, #1
 8005b0c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8005b0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b10:	3301      	adds	r3, #1
 8005b12:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8005b14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b16:	3301      	adds	r3, #1
 8005b18:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8005b1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b1c:	3301      	adds	r3, #1
 8005b1e:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8005b20:	6a3b      	ldr	r3, [r7, #32]
 8005b22:	3301      	adds	r3, #1
 8005b24:	623b      	str	r3, [r7, #32]
 8005b26:	6a3a      	ldr	r2, [r7, #32]
 8005b28:	697b      	ldr	r3, [r7, #20]
 8005b2a:	429a      	cmp	r2, r3
 8005b2c:	d3e6      	bcc.n	8005afc <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005b2e:	8bfb      	ldrh	r3, [r7, #30]
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d01e      	beq.n	8005b72 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005b34:	2300      	movs	r3, #0
 8005b36:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005b38:	69bb      	ldr	r3, [r7, #24]
 8005b3a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005b3e:	461a      	mov	r2, r3
 8005b40:	f107 0310 	add.w	r3, r7, #16
 8005b44:	6812      	ldr	r2, [r2, #0]
 8005b46:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005b48:	693a      	ldr	r2, [r7, #16]
 8005b4a:	6a3b      	ldr	r3, [r7, #32]
 8005b4c:	b2db      	uxtb	r3, r3
 8005b4e:	00db      	lsls	r3, r3, #3
 8005b50:	fa22 f303 	lsr.w	r3, r2, r3
 8005b54:	b2da      	uxtb	r2, r3
 8005b56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b58:	701a      	strb	r2, [r3, #0]
      i++;
 8005b5a:	6a3b      	ldr	r3, [r7, #32]
 8005b5c:	3301      	adds	r3, #1
 8005b5e:	623b      	str	r3, [r7, #32]
      pDest++;
 8005b60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b62:	3301      	adds	r3, #1
 8005b64:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8005b66:	8bfb      	ldrh	r3, [r7, #30]
 8005b68:	3b01      	subs	r3, #1
 8005b6a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005b6c:	8bfb      	ldrh	r3, [r7, #30]
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d1ea      	bne.n	8005b48 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8005b72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8005b74:	4618      	mov	r0, r3
 8005b76:	372c      	adds	r7, #44	@ 0x2c
 8005b78:	46bd      	mov	sp, r7
 8005b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b7e:	4770      	bx	lr

08005b80 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8005b80:	b480      	push	{r7}
 8005b82:	b085      	sub	sp, #20
 8005b84:	af00      	add	r7, sp, #0
 8005b86:	6078      	str	r0, [r7, #4]
 8005b88:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005b8e:	683b      	ldr	r3, [r7, #0]
 8005b90:	781b      	ldrb	r3, [r3, #0]
 8005b92:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005b94:	683b      	ldr	r3, [r7, #0]
 8005b96:	785b      	ldrb	r3, [r3, #1]
 8005b98:	2b01      	cmp	r3, #1
 8005b9a:	d12c      	bne.n	8005bf6 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005b9c:	68bb      	ldr	r3, [r7, #8]
 8005b9e:	015a      	lsls	r2, r3, #5
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	4413      	add	r3, r2
 8005ba4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	db12      	blt.n	8005bd4 <USB_EPSetStall+0x54>
 8005bae:	68bb      	ldr	r3, [r7, #8]
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d00f      	beq.n	8005bd4 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8005bb4:	68bb      	ldr	r3, [r7, #8]
 8005bb6:	015a      	lsls	r2, r3, #5
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	4413      	add	r3, r2
 8005bbc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	68ba      	ldr	r2, [r7, #8]
 8005bc4:	0151      	lsls	r1, r2, #5
 8005bc6:	68fa      	ldr	r2, [r7, #12]
 8005bc8:	440a      	add	r2, r1
 8005bca:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005bce:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8005bd2:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8005bd4:	68bb      	ldr	r3, [r7, #8]
 8005bd6:	015a      	lsls	r2, r3, #5
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	4413      	add	r3, r2
 8005bdc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	68ba      	ldr	r2, [r7, #8]
 8005be4:	0151      	lsls	r1, r2, #5
 8005be6:	68fa      	ldr	r2, [r7, #12]
 8005be8:	440a      	add	r2, r1
 8005bea:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005bee:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8005bf2:	6013      	str	r3, [r2, #0]
 8005bf4:	e02b      	b.n	8005c4e <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005bf6:	68bb      	ldr	r3, [r7, #8]
 8005bf8:	015a      	lsls	r2, r3, #5
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	4413      	add	r3, r2
 8005bfe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	db12      	blt.n	8005c2e <USB_EPSetStall+0xae>
 8005c08:	68bb      	ldr	r3, [r7, #8]
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d00f      	beq.n	8005c2e <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8005c0e:	68bb      	ldr	r3, [r7, #8]
 8005c10:	015a      	lsls	r2, r3, #5
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	4413      	add	r3, r2
 8005c16:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	68ba      	ldr	r2, [r7, #8]
 8005c1e:	0151      	lsls	r1, r2, #5
 8005c20:	68fa      	ldr	r2, [r7, #12]
 8005c22:	440a      	add	r2, r1
 8005c24:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005c28:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8005c2c:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8005c2e:	68bb      	ldr	r3, [r7, #8]
 8005c30:	015a      	lsls	r2, r3, #5
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	4413      	add	r3, r2
 8005c36:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	68ba      	ldr	r2, [r7, #8]
 8005c3e:	0151      	lsls	r1, r2, #5
 8005c40:	68fa      	ldr	r2, [r7, #12]
 8005c42:	440a      	add	r2, r1
 8005c44:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005c48:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8005c4c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005c4e:	2300      	movs	r3, #0
}
 8005c50:	4618      	mov	r0, r3
 8005c52:	3714      	adds	r7, #20
 8005c54:	46bd      	mov	sp, r7
 8005c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c5a:	4770      	bx	lr

08005c5c <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8005c5c:	b480      	push	{r7}
 8005c5e:	b085      	sub	sp, #20
 8005c60:	af00      	add	r7, sp, #0
 8005c62:	6078      	str	r0, [r7, #4]
 8005c64:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005c6a:	683b      	ldr	r3, [r7, #0]
 8005c6c:	781b      	ldrb	r3, [r3, #0]
 8005c6e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005c70:	683b      	ldr	r3, [r7, #0]
 8005c72:	785b      	ldrb	r3, [r3, #1]
 8005c74:	2b01      	cmp	r3, #1
 8005c76:	d128      	bne.n	8005cca <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005c78:	68bb      	ldr	r3, [r7, #8]
 8005c7a:	015a      	lsls	r2, r3, #5
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	4413      	add	r3, r2
 8005c80:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	68ba      	ldr	r2, [r7, #8]
 8005c88:	0151      	lsls	r1, r2, #5
 8005c8a:	68fa      	ldr	r2, [r7, #12]
 8005c8c:	440a      	add	r2, r1
 8005c8e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005c92:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005c96:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005c98:	683b      	ldr	r3, [r7, #0]
 8005c9a:	791b      	ldrb	r3, [r3, #4]
 8005c9c:	2b03      	cmp	r3, #3
 8005c9e:	d003      	beq.n	8005ca8 <USB_EPClearStall+0x4c>
 8005ca0:	683b      	ldr	r3, [r7, #0]
 8005ca2:	791b      	ldrb	r3, [r3, #4]
 8005ca4:	2b02      	cmp	r3, #2
 8005ca6:	d138      	bne.n	8005d1a <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005ca8:	68bb      	ldr	r3, [r7, #8]
 8005caa:	015a      	lsls	r2, r3, #5
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	4413      	add	r3, r2
 8005cb0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	68ba      	ldr	r2, [r7, #8]
 8005cb8:	0151      	lsls	r1, r2, #5
 8005cba:	68fa      	ldr	r2, [r7, #12]
 8005cbc:	440a      	add	r2, r1
 8005cbe:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005cc2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005cc6:	6013      	str	r3, [r2, #0]
 8005cc8:	e027      	b.n	8005d1a <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005cca:	68bb      	ldr	r3, [r7, #8]
 8005ccc:	015a      	lsls	r2, r3, #5
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	4413      	add	r3, r2
 8005cd2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	68ba      	ldr	r2, [r7, #8]
 8005cda:	0151      	lsls	r1, r2, #5
 8005cdc:	68fa      	ldr	r2, [r7, #12]
 8005cde:	440a      	add	r2, r1
 8005ce0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005ce4:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005ce8:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005cea:	683b      	ldr	r3, [r7, #0]
 8005cec:	791b      	ldrb	r3, [r3, #4]
 8005cee:	2b03      	cmp	r3, #3
 8005cf0:	d003      	beq.n	8005cfa <USB_EPClearStall+0x9e>
 8005cf2:	683b      	ldr	r3, [r7, #0]
 8005cf4:	791b      	ldrb	r3, [r3, #4]
 8005cf6:	2b02      	cmp	r3, #2
 8005cf8:	d10f      	bne.n	8005d1a <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005cfa:	68bb      	ldr	r3, [r7, #8]
 8005cfc:	015a      	lsls	r2, r3, #5
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	4413      	add	r3, r2
 8005d02:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	68ba      	ldr	r2, [r7, #8]
 8005d0a:	0151      	lsls	r1, r2, #5
 8005d0c:	68fa      	ldr	r2, [r7, #12]
 8005d0e:	440a      	add	r2, r1
 8005d10:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005d14:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005d18:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8005d1a:	2300      	movs	r3, #0
}
 8005d1c:	4618      	mov	r0, r3
 8005d1e:	3714      	adds	r7, #20
 8005d20:	46bd      	mov	sp, r7
 8005d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d26:	4770      	bx	lr

08005d28 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8005d28:	b480      	push	{r7}
 8005d2a:	b085      	sub	sp, #20
 8005d2c:	af00      	add	r7, sp, #0
 8005d2e:	6078      	str	r0, [r7, #4]
 8005d30:	460b      	mov	r3, r1
 8005d32:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	68fa      	ldr	r2, [r7, #12]
 8005d42:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005d46:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8005d4a:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005d52:	681a      	ldr	r2, [r3, #0]
 8005d54:	78fb      	ldrb	r3, [r7, #3]
 8005d56:	011b      	lsls	r3, r3, #4
 8005d58:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8005d5c:	68f9      	ldr	r1, [r7, #12]
 8005d5e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005d62:	4313      	orrs	r3, r2
 8005d64:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8005d66:	2300      	movs	r3, #0
}
 8005d68:	4618      	mov	r0, r3
 8005d6a:	3714      	adds	r7, #20
 8005d6c:	46bd      	mov	sp, r7
 8005d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d72:	4770      	bx	lr

08005d74 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8005d74:	b480      	push	{r7}
 8005d76:	b085      	sub	sp, #20
 8005d78:	af00      	add	r7, sp, #0
 8005d7a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	68fa      	ldr	r2, [r7, #12]
 8005d8a:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8005d8e:	f023 0303 	bic.w	r3, r3, #3
 8005d92:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005d9a:	685b      	ldr	r3, [r3, #4]
 8005d9c:	68fa      	ldr	r2, [r7, #12]
 8005d9e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005da2:	f023 0302 	bic.w	r3, r3, #2
 8005da6:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005da8:	2300      	movs	r3, #0
}
 8005daa:	4618      	mov	r0, r3
 8005dac:	3714      	adds	r7, #20
 8005dae:	46bd      	mov	sp, r7
 8005db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db4:	4770      	bx	lr

08005db6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8005db6:	b480      	push	{r7}
 8005db8:	b085      	sub	sp, #20
 8005dba:	af00      	add	r7, sp, #0
 8005dbc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	68fa      	ldr	r2, [r7, #12]
 8005dcc:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8005dd0:	f023 0303 	bic.w	r3, r3, #3
 8005dd4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005ddc:	685b      	ldr	r3, [r3, #4]
 8005dde:	68fa      	ldr	r2, [r7, #12]
 8005de0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005de4:	f043 0302 	orr.w	r3, r3, #2
 8005de8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005dea:	2300      	movs	r3, #0
}
 8005dec:	4618      	mov	r0, r3
 8005dee:	3714      	adds	r7, #20
 8005df0:	46bd      	mov	sp, r7
 8005df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df6:	4770      	bx	lr

08005df8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8005df8:	b480      	push	{r7}
 8005dfa:	b085      	sub	sp, #20
 8005dfc:	af00      	add	r7, sp, #0
 8005dfe:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	695b      	ldr	r3, [r3, #20]
 8005e04:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	699b      	ldr	r3, [r3, #24]
 8005e0a:	68fa      	ldr	r2, [r7, #12]
 8005e0c:	4013      	ands	r3, r2
 8005e0e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005e10:	68fb      	ldr	r3, [r7, #12]
}
 8005e12:	4618      	mov	r0, r3
 8005e14:	3714      	adds	r7, #20
 8005e16:	46bd      	mov	sp, r7
 8005e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e1c:	4770      	bx	lr

08005e1e <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8005e1e:	b480      	push	{r7}
 8005e20:	b085      	sub	sp, #20
 8005e22:	af00      	add	r7, sp, #0
 8005e24:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005e30:	699b      	ldr	r3, [r3, #24]
 8005e32:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005e3a:	69db      	ldr	r3, [r3, #28]
 8005e3c:	68ba      	ldr	r2, [r7, #8]
 8005e3e:	4013      	ands	r3, r2
 8005e40:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8005e42:	68bb      	ldr	r3, [r7, #8]
 8005e44:	0c1b      	lsrs	r3, r3, #16
}
 8005e46:	4618      	mov	r0, r3
 8005e48:	3714      	adds	r7, #20
 8005e4a:	46bd      	mov	sp, r7
 8005e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e50:	4770      	bx	lr

08005e52 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8005e52:	b480      	push	{r7}
 8005e54:	b085      	sub	sp, #20
 8005e56:	af00      	add	r7, sp, #0
 8005e58:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005e64:	699b      	ldr	r3, [r3, #24]
 8005e66:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005e6e:	69db      	ldr	r3, [r3, #28]
 8005e70:	68ba      	ldr	r2, [r7, #8]
 8005e72:	4013      	ands	r3, r2
 8005e74:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8005e76:	68bb      	ldr	r3, [r7, #8]
 8005e78:	b29b      	uxth	r3, r3
}
 8005e7a:	4618      	mov	r0, r3
 8005e7c:	3714      	adds	r7, #20
 8005e7e:	46bd      	mov	sp, r7
 8005e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e84:	4770      	bx	lr

08005e86 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005e86:	b480      	push	{r7}
 8005e88:	b085      	sub	sp, #20
 8005e8a:	af00      	add	r7, sp, #0
 8005e8c:	6078      	str	r0, [r7, #4]
 8005e8e:	460b      	mov	r3, r1
 8005e90:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8005e96:	78fb      	ldrb	r3, [r7, #3]
 8005e98:	015a      	lsls	r2, r3, #5
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	4413      	add	r3, r2
 8005e9e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005ea2:	689b      	ldr	r3, [r3, #8]
 8005ea4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005eac:	695b      	ldr	r3, [r3, #20]
 8005eae:	68ba      	ldr	r2, [r7, #8]
 8005eb0:	4013      	ands	r3, r2
 8005eb2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005eb4:	68bb      	ldr	r3, [r7, #8]
}
 8005eb6:	4618      	mov	r0, r3
 8005eb8:	3714      	adds	r7, #20
 8005eba:	46bd      	mov	sp, r7
 8005ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec0:	4770      	bx	lr

08005ec2 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005ec2:	b480      	push	{r7}
 8005ec4:	b087      	sub	sp, #28
 8005ec6:	af00      	add	r7, sp, #0
 8005ec8:	6078      	str	r0, [r7, #4]
 8005eca:	460b      	mov	r3, r1
 8005ecc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8005ed2:	697b      	ldr	r3, [r7, #20]
 8005ed4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005ed8:	691b      	ldr	r3, [r3, #16]
 8005eda:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8005edc:	697b      	ldr	r3, [r7, #20]
 8005ede:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005ee2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005ee4:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8005ee6:	78fb      	ldrb	r3, [r7, #3]
 8005ee8:	f003 030f 	and.w	r3, r3, #15
 8005eec:	68fa      	ldr	r2, [r7, #12]
 8005eee:	fa22 f303 	lsr.w	r3, r2, r3
 8005ef2:	01db      	lsls	r3, r3, #7
 8005ef4:	b2db      	uxtb	r3, r3
 8005ef6:	693a      	ldr	r2, [r7, #16]
 8005ef8:	4313      	orrs	r3, r2
 8005efa:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8005efc:	78fb      	ldrb	r3, [r7, #3]
 8005efe:	015a      	lsls	r2, r3, #5
 8005f00:	697b      	ldr	r3, [r7, #20]
 8005f02:	4413      	add	r3, r2
 8005f04:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005f08:	689b      	ldr	r3, [r3, #8]
 8005f0a:	693a      	ldr	r2, [r7, #16]
 8005f0c:	4013      	ands	r3, r2
 8005f0e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005f10:	68bb      	ldr	r3, [r7, #8]
}
 8005f12:	4618      	mov	r0, r3
 8005f14:	371c      	adds	r7, #28
 8005f16:	46bd      	mov	sp, r7
 8005f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f1c:	4770      	bx	lr

08005f1e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8005f1e:	b480      	push	{r7}
 8005f20:	b083      	sub	sp, #12
 8005f22:	af00      	add	r7, sp, #0
 8005f24:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	695b      	ldr	r3, [r3, #20]
 8005f2a:	f003 0301 	and.w	r3, r3, #1
}
 8005f2e:	4618      	mov	r0, r3
 8005f30:	370c      	adds	r7, #12
 8005f32:	46bd      	mov	sp, r7
 8005f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f38:	4770      	bx	lr

08005f3a <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8005f3a:	b480      	push	{r7}
 8005f3c:	b085      	sub	sp, #20
 8005f3e:	af00      	add	r7, sp, #0
 8005f40:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	68fa      	ldr	r2, [r7, #12]
 8005f50:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005f54:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8005f58:	f023 0307 	bic.w	r3, r3, #7
 8005f5c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005f64:	685b      	ldr	r3, [r3, #4]
 8005f66:	68fa      	ldr	r2, [r7, #12]
 8005f68:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005f6c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005f70:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005f72:	2300      	movs	r3, #0
}
 8005f74:	4618      	mov	r0, r3
 8005f76:	3714      	adds	r7, #20
 8005f78:	46bd      	mov	sp, r7
 8005f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f7e:	4770      	bx	lr

08005f80 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8005f80:	b480      	push	{r7}
 8005f82:	b087      	sub	sp, #28
 8005f84:	af00      	add	r7, sp, #0
 8005f86:	60f8      	str	r0, [r7, #12]
 8005f88:	460b      	mov	r3, r1
 8005f8a:	607a      	str	r2, [r7, #4]
 8005f8c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	333c      	adds	r3, #60	@ 0x3c
 8005f96:	3304      	adds	r3, #4
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8005f9c:	693b      	ldr	r3, [r7, #16]
 8005f9e:	4a26      	ldr	r2, [pc, #152]	@ (8006038 <USB_EP0_OutStart+0xb8>)
 8005fa0:	4293      	cmp	r3, r2
 8005fa2:	d90a      	bls.n	8005fba <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005fa4:	697b      	ldr	r3, [r7, #20]
 8005fa6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005fb0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005fb4:	d101      	bne.n	8005fba <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8005fb6:	2300      	movs	r3, #0
 8005fb8:	e037      	b.n	800602a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8005fba:	697b      	ldr	r3, [r7, #20]
 8005fbc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005fc0:	461a      	mov	r2, r3
 8005fc2:	2300      	movs	r3, #0
 8005fc4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005fc6:	697b      	ldr	r3, [r7, #20]
 8005fc8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005fcc:	691b      	ldr	r3, [r3, #16]
 8005fce:	697a      	ldr	r2, [r7, #20]
 8005fd0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005fd4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005fd8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8005fda:	697b      	ldr	r3, [r7, #20]
 8005fdc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005fe0:	691b      	ldr	r3, [r3, #16]
 8005fe2:	697a      	ldr	r2, [r7, #20]
 8005fe4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005fe8:	f043 0318 	orr.w	r3, r3, #24
 8005fec:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8005fee:	697b      	ldr	r3, [r7, #20]
 8005ff0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005ff4:	691b      	ldr	r3, [r3, #16]
 8005ff6:	697a      	ldr	r2, [r7, #20]
 8005ff8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005ffc:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8006000:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8006002:	7afb      	ldrb	r3, [r7, #11]
 8006004:	2b01      	cmp	r3, #1
 8006006:	d10f      	bne.n	8006028 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8006008:	697b      	ldr	r3, [r7, #20]
 800600a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800600e:	461a      	mov	r2, r3
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8006014:	697b      	ldr	r3, [r7, #20]
 8006016:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	697a      	ldr	r2, [r7, #20]
 800601e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006022:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8006026:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006028:	2300      	movs	r3, #0
}
 800602a:	4618      	mov	r0, r3
 800602c:	371c      	adds	r7, #28
 800602e:	46bd      	mov	sp, r7
 8006030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006034:	4770      	bx	lr
 8006036:	bf00      	nop
 8006038:	4f54300a 	.word	0x4f54300a

0800603c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800603c:	b480      	push	{r7}
 800603e:	b085      	sub	sp, #20
 8006040:	af00      	add	r7, sp, #0
 8006042:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006044:	2300      	movs	r3, #0
 8006046:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	3301      	adds	r3, #1
 800604c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006054:	d901      	bls.n	800605a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006056:	2303      	movs	r3, #3
 8006058:	e01b      	b.n	8006092 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	691b      	ldr	r3, [r3, #16]
 800605e:	2b00      	cmp	r3, #0
 8006060:	daf2      	bge.n	8006048 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006062:	2300      	movs	r3, #0
 8006064:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	691b      	ldr	r3, [r3, #16]
 800606a:	f043 0201 	orr.w	r2, r3, #1
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	3301      	adds	r3, #1
 8006076:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800607e:	d901      	bls.n	8006084 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006080:	2303      	movs	r3, #3
 8006082:	e006      	b.n	8006092 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	691b      	ldr	r3, [r3, #16]
 8006088:	f003 0301 	and.w	r3, r3, #1
 800608c:	2b01      	cmp	r3, #1
 800608e:	d0f0      	beq.n	8006072 <USB_CoreReset+0x36>

  return HAL_OK;
 8006090:	2300      	movs	r3, #0
}
 8006092:	4618      	mov	r0, r3
 8006094:	3714      	adds	r7, #20
 8006096:	46bd      	mov	sp, r7
 8006098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800609c:	4770      	bx	lr
	...

080060a0 <USBD_CUSTOM_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80060a0:	b580      	push	{r7, lr}
 80060a2:	b084      	sub	sp, #16
 80060a4:	af00      	add	r7, sp, #0
 80060a6:	6078      	str	r0, [r7, #4]
 80060a8:	460b      	mov	r3, r1
 80060aa:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)USBD_malloc(sizeof(USBD_CUSTOM_HID_HandleTypeDef));
 80060ac:	2054      	movs	r0, #84	@ 0x54
 80060ae:	f002 fe59 	bl	8008d64 <USBD_static_malloc>
 80060b2:	60f8      	str	r0, [r7, #12]

  if (hhid == NULL)
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d109      	bne.n	80060ce <USBD_CUSTOM_HID_Init+0x2e>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	32b0      	adds	r2, #176	@ 0xb0
 80060c4:	2100      	movs	r1, #0
 80060c6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 80060ca:	2302      	movs	r3, #2
 80060cc:	e08b      	b.n	80061e6 <USBD_CUSTOM_HID_Init+0x146>
  }

  pdev->pClassDataCmsit[pdev->classId] = (void *)hhid;
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	32b0      	adds	r2, #176	@ 0xb0
 80060d8:	68f9      	ldr	r1, [r7, #12]
 80060da:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	32b0      	adds	r2, #176	@ 0xb0
 80060e8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  /* Get the Endpoints addresses allocated for this class instance */
  CUSTOMHIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
  CUSTOMHIDOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	7c1b      	ldrb	r3, [r3, #16]
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d11b      	bne.n	8006132 <USBD_CUSTOM_HID_Init+0x92>
  {
    pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].bInterval = CUSTOM_HID_HS_BINTERVAL;
 80060fa:	4b3d      	ldr	r3, [pc, #244]	@ (80061f0 <USBD_CUSTOM_HID_Init+0x150>)
 80060fc:	781b      	ldrb	r3, [r3, #0]
 80060fe:	f003 020f 	and.w	r2, r3, #15
 8006102:	6879      	ldr	r1, [r7, #4]
 8006104:	4613      	mov	r3, r2
 8006106:	009b      	lsls	r3, r3, #2
 8006108:	4413      	add	r3, r2
 800610a:	009b      	lsls	r3, r3, #2
 800610c:	440b      	add	r3, r1
 800610e:	3326      	adds	r3, #38	@ 0x26
 8006110:	2205      	movs	r2, #5
 8006112:	801a      	strh	r2, [r3, #0]
    pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].bInterval = CUSTOM_HID_HS_BINTERVAL;
 8006114:	4b37      	ldr	r3, [pc, #220]	@ (80061f4 <USBD_CUSTOM_HID_Init+0x154>)
 8006116:	781b      	ldrb	r3, [r3, #0]
 8006118:	f003 020f 	and.w	r2, r3, #15
 800611c:	6879      	ldr	r1, [r7, #4]
 800611e:	4613      	mov	r3, r2
 8006120:	009b      	lsls	r3, r3, #2
 8006122:	4413      	add	r3, r2
 8006124:	009b      	lsls	r3, r3, #2
 8006126:	440b      	add	r3, r1
 8006128:	f503 73b3 	add.w	r3, r3, #358	@ 0x166
 800612c:	2205      	movs	r2, #5
 800612e:	801a      	strh	r2, [r3, #0]
 8006130:	e01a      	b.n	8006168 <USBD_CUSTOM_HID_Init+0xc8>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].bInterval = CUSTOM_HID_FS_BINTERVAL;
 8006132:	4b2f      	ldr	r3, [pc, #188]	@ (80061f0 <USBD_CUSTOM_HID_Init+0x150>)
 8006134:	781b      	ldrb	r3, [r3, #0]
 8006136:	f003 020f 	and.w	r2, r3, #15
 800613a:	6879      	ldr	r1, [r7, #4]
 800613c:	4613      	mov	r3, r2
 800613e:	009b      	lsls	r3, r3, #2
 8006140:	4413      	add	r3, r2
 8006142:	009b      	lsls	r3, r3, #2
 8006144:	440b      	add	r3, r1
 8006146:	3326      	adds	r3, #38	@ 0x26
 8006148:	220a      	movs	r2, #10
 800614a:	801a      	strh	r2, [r3, #0]
    pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].bInterval = CUSTOM_HID_FS_BINTERVAL;
 800614c:	4b29      	ldr	r3, [pc, #164]	@ (80061f4 <USBD_CUSTOM_HID_Init+0x154>)
 800614e:	781b      	ldrb	r3, [r3, #0]
 8006150:	f003 020f 	and.w	r2, r3, #15
 8006154:	6879      	ldr	r1, [r7, #4]
 8006156:	4613      	mov	r3, r2
 8006158:	009b      	lsls	r3, r3, #2
 800615a:	4413      	add	r3, r2
 800615c:	009b      	lsls	r3, r3, #2
 800615e:	440b      	add	r3, r1
 8006160:	f503 73b3 	add.w	r3, r3, #358	@ 0x166
 8006164:	220a      	movs	r2, #10
 8006166:	801a      	strh	r2, [r3, #0]
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, CUSTOMHIDInEpAdd, USBD_EP_TYPE_INTR,
 8006168:	4b21      	ldr	r3, [pc, #132]	@ (80061f0 <USBD_CUSTOM_HID_Init+0x150>)
 800616a:	7819      	ldrb	r1, [r3, #0]
 800616c:	2302      	movs	r3, #2
 800616e:	2203      	movs	r2, #3
 8006170:	6878      	ldr	r0, [r7, #4]
 8006172:	f002 fce6 	bl	8008b42 <USBD_LL_OpenEP>
                       CUSTOM_HID_EPIN_SIZE);

  pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].is_used = 1U;
 8006176:	4b1e      	ldr	r3, [pc, #120]	@ (80061f0 <USBD_CUSTOM_HID_Init+0x150>)
 8006178:	781b      	ldrb	r3, [r3, #0]
 800617a:	f003 020f 	and.w	r2, r3, #15
 800617e:	6879      	ldr	r1, [r7, #4]
 8006180:	4613      	mov	r3, r2
 8006182:	009b      	lsls	r3, r3, #2
 8006184:	4413      	add	r3, r2
 8006186:	009b      	lsls	r3, r3, #2
 8006188:	440b      	add	r3, r1
 800618a:	3324      	adds	r3, #36	@ 0x24
 800618c:	2201      	movs	r2, #1
 800618e:	801a      	strh	r2, [r3, #0]

  /* Open EP OUT */
  (void)USBD_LL_OpenEP(pdev, CUSTOMHIDOutEpAdd, USBD_EP_TYPE_INTR,
 8006190:	4b18      	ldr	r3, [pc, #96]	@ (80061f4 <USBD_CUSTOM_HID_Init+0x154>)
 8006192:	7819      	ldrb	r1, [r3, #0]
 8006194:	2302      	movs	r3, #2
 8006196:	2203      	movs	r2, #3
 8006198:	6878      	ldr	r0, [r7, #4]
 800619a:	f002 fcd2 	bl	8008b42 <USBD_LL_OpenEP>
                       CUSTOM_HID_EPOUT_SIZE);

  pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].is_used = 1U;
 800619e:	4b15      	ldr	r3, [pc, #84]	@ (80061f4 <USBD_CUSTOM_HID_Init+0x154>)
 80061a0:	781b      	ldrb	r3, [r3, #0]
 80061a2:	f003 020f 	and.w	r2, r3, #15
 80061a6:	6879      	ldr	r1, [r7, #4]
 80061a8:	4613      	mov	r3, r2
 80061aa:	009b      	lsls	r3, r3, #2
 80061ac:	4413      	add	r3, r2
 80061ae:	009b      	lsls	r3, r3, #2
 80061b0:	440b      	add	r3, r1
 80061b2:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80061b6:	2201      	movs	r2, #1
 80061b8:	801a      	strh	r2, [r3, #0]

  hhid->state = CUSTOM_HID_IDLE;
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	2200      	movs	r2, #0
 80061be:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80061c8:	687a      	ldr	r2, [r7, #4]
 80061ca:	33b0      	adds	r3, #176	@ 0xb0
 80061cc:	009b      	lsls	r3, r3, #2
 80061ce:	4413      	add	r3, r2
 80061d0:	685b      	ldr	r3, [r3, #4]
 80061d2:	685b      	ldr	r3, [r3, #4]
 80061d4:	4798      	blx	r3

#ifndef USBD_CUSTOMHID_OUT_PREPARE_RECEIVE_DISABLED
  /* Prepare Out endpoint to receive 1st packet */
  (void)USBD_LL_PrepareReceive(pdev, CUSTOMHIDOutEpAdd, hhid->Report_buf,
 80061d6:	4b07      	ldr	r3, [pc, #28]	@ (80061f4 <USBD_CUSTOM_HID_Init+0x154>)
 80061d8:	7819      	ldrb	r1, [r3, #0]
 80061da:	68fa      	ldr	r2, [r7, #12]
 80061dc:	2340      	movs	r3, #64	@ 0x40
 80061de:	6878      	ldr	r0, [r7, #4]
 80061e0:	f002 fd9e 	bl	8008d20 <USBD_LL_PrepareReceive>
                               USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);
#endif /* USBD_CUSTOMHID_OUT_PREPARE_RECEIVE_DISABLED */

  return (uint8_t)USBD_OK;
 80061e4:	2300      	movs	r3, #0
}
 80061e6:	4618      	mov	r0, r3
 80061e8:	3710      	adds	r7, #16
 80061ea:	46bd      	mov	sp, r7
 80061ec:	bd80      	pop	{r7, pc}
 80061ee:	bf00      	nop
 80061f0:	20000086 	.word	0x20000086
 80061f4:	20000087 	.word	0x20000087

080061f8 <USBD_CUSTOM_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80061f8:	b580      	push	{r7, lr}
 80061fa:	b082      	sub	sp, #8
 80061fc:	af00      	add	r7, sp, #0
 80061fe:	6078      	str	r0, [r7, #4]
 8006200:	460b      	mov	r3, r1
 8006202:	70fb      	strb	r3, [r7, #3]
  CUSTOMHIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
  CUSTOMHIDOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close CUSTOM_HID EP IN */
  (void)USBD_LL_CloseEP(pdev, CUSTOMHIDInEpAdd);
 8006204:	4b37      	ldr	r3, [pc, #220]	@ (80062e4 <USBD_CUSTOM_HID_DeInit+0xec>)
 8006206:	781b      	ldrb	r3, [r3, #0]
 8006208:	4619      	mov	r1, r3
 800620a:	6878      	ldr	r0, [r7, #4]
 800620c:	f002 fcbf 	bl	8008b8e <USBD_LL_CloseEP>
  pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].is_used = 0U;
 8006210:	4b34      	ldr	r3, [pc, #208]	@ (80062e4 <USBD_CUSTOM_HID_DeInit+0xec>)
 8006212:	781b      	ldrb	r3, [r3, #0]
 8006214:	f003 020f 	and.w	r2, r3, #15
 8006218:	6879      	ldr	r1, [r7, #4]
 800621a:	4613      	mov	r3, r2
 800621c:	009b      	lsls	r3, r3, #2
 800621e:	4413      	add	r3, r2
 8006220:	009b      	lsls	r3, r3, #2
 8006222:	440b      	add	r3, r1
 8006224:	3324      	adds	r3, #36	@ 0x24
 8006226:	2200      	movs	r2, #0
 8006228:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].bInterval = 0U;
 800622a:	4b2e      	ldr	r3, [pc, #184]	@ (80062e4 <USBD_CUSTOM_HID_DeInit+0xec>)
 800622c:	781b      	ldrb	r3, [r3, #0]
 800622e:	f003 020f 	and.w	r2, r3, #15
 8006232:	6879      	ldr	r1, [r7, #4]
 8006234:	4613      	mov	r3, r2
 8006236:	009b      	lsls	r3, r3, #2
 8006238:	4413      	add	r3, r2
 800623a:	009b      	lsls	r3, r3, #2
 800623c:	440b      	add	r3, r1
 800623e:	3326      	adds	r3, #38	@ 0x26
 8006240:	2200      	movs	r2, #0
 8006242:	801a      	strh	r2, [r3, #0]

  /* Close CUSTOM_HID EP OUT */
  (void)USBD_LL_CloseEP(pdev, CUSTOMHIDOutEpAdd);
 8006244:	4b28      	ldr	r3, [pc, #160]	@ (80062e8 <USBD_CUSTOM_HID_DeInit+0xf0>)
 8006246:	781b      	ldrb	r3, [r3, #0]
 8006248:	4619      	mov	r1, r3
 800624a:	6878      	ldr	r0, [r7, #4]
 800624c:	f002 fc9f 	bl	8008b8e <USBD_LL_CloseEP>
  pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].is_used = 0U;
 8006250:	4b25      	ldr	r3, [pc, #148]	@ (80062e8 <USBD_CUSTOM_HID_DeInit+0xf0>)
 8006252:	781b      	ldrb	r3, [r3, #0]
 8006254:	f003 020f 	and.w	r2, r3, #15
 8006258:	6879      	ldr	r1, [r7, #4]
 800625a:	4613      	mov	r3, r2
 800625c:	009b      	lsls	r3, r3, #2
 800625e:	4413      	add	r3, r2
 8006260:	009b      	lsls	r3, r3, #2
 8006262:	440b      	add	r3, r1
 8006264:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8006268:	2200      	movs	r2, #0
 800626a:	801a      	strh	r2, [r3, #0]
  pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].bInterval = 0U;
 800626c:	4b1e      	ldr	r3, [pc, #120]	@ (80062e8 <USBD_CUSTOM_HID_DeInit+0xf0>)
 800626e:	781b      	ldrb	r3, [r3, #0]
 8006270:	f003 020f 	and.w	r2, r3, #15
 8006274:	6879      	ldr	r1, [r7, #4]
 8006276:	4613      	mov	r3, r2
 8006278:	009b      	lsls	r3, r3, #2
 800627a:	4413      	add	r3, r2
 800627c:	009b      	lsls	r3, r3, #2
 800627e:	440b      	add	r3, r1
 8006280:	f503 73b3 	add.w	r3, r3, #358	@ 0x166
 8006284:	2200      	movs	r2, #0
 8006286:	801a      	strh	r2, [r3, #0]

  /* Free allocated memory */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	32b0      	adds	r2, #176	@ 0xb0
 8006292:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006296:	2b00      	cmp	r3, #0
 8006298:	d01f      	beq.n	80062da <USBD_CUSTOM_HID_DeInit+0xe2>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80062a0:	687a      	ldr	r2, [r7, #4]
 80062a2:	33b0      	adds	r3, #176	@ 0xb0
 80062a4:	009b      	lsls	r3, r3, #2
 80062a6:	4413      	add	r3, r2
 80062a8:	685b      	ldr	r3, [r3, #4]
 80062aa:	689b      	ldr	r3, [r3, #8]
 80062ac:	4798      	blx	r3
    USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	32b0      	adds	r2, #176	@ 0xb0
 80062b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80062bc:	4618      	mov	r0, r3
 80062be:	f002 fd5f 	bl	8008d80 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	32b0      	adds	r2, #176	@ 0xb0
 80062cc:	2100      	movs	r1, #0
 80062ce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	2200      	movs	r2, #0
 80062d6:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 80062da:	2300      	movs	r3, #0
}
 80062dc:	4618      	mov	r0, r3
 80062de:	3708      	adds	r7, #8
 80062e0:	46bd      	mov	sp, r7
 80062e2:	bd80      	pop	{r7, pc}
 80062e4:	20000086 	.word	0x20000086
 80062e8:	20000087 	.word	0x20000087

080062ec <USBD_CUSTOM_HID_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_Setup(USBD_HandleTypeDef *pdev,
                                     USBD_SetupReqTypedef *req)
{
 80062ec:	b580      	push	{r7, lr}
 80062ee:	b088      	sub	sp, #32
 80062f0:	af00      	add	r7, sp, #0
 80062f2:	6078      	str	r0, [r7, #4]
 80062f4:	6039      	str	r1, [r7, #0]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	32b0      	adds	r2, #176	@ 0xb0
 8006300:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006304:	613b      	str	r3, [r7, #16]
  uint16_t len = 0U;
 8006306:	2300      	movs	r3, #0
 8006308:	83fb      	strh	r3, [r7, #30]
#ifdef USBD_CUSTOMHID_CTRL_REQ_GET_REPORT_ENABLED
  uint16_t ReportLength = 0U;
 800630a:	2300      	movs	r3, #0
 800630c:	81fb      	strh	r3, [r7, #14]
#endif /* USBD_CUSTOMHID_CTRL_REQ_GET_REPORT_ENABLED */
  uint8_t  *pbuf = NULL;
 800630e:	2300      	movs	r3, #0
 8006310:	61bb      	str	r3, [r7, #24]
  uint16_t status_info = 0U;
 8006312:	2300      	movs	r3, #0
 8006314:	81bb      	strh	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 8006316:	2300      	movs	r3, #0
 8006318:	75fb      	strb	r3, [r7, #23]

  if (hhid == NULL)
 800631a:	693b      	ldr	r3, [r7, #16]
 800631c:	2b00      	cmp	r3, #0
 800631e:	d101      	bne.n	8006324 <USBD_CUSTOM_HID_Setup+0x38>
  {
    return (uint8_t)USBD_FAIL;
 8006320:	2303      	movs	r3, #3
 8006322:	e13c      	b.n	800659e <USBD_CUSTOM_HID_Setup+0x2b2>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006324:	683b      	ldr	r3, [r7, #0]
 8006326:	781b      	ldrb	r3, [r3, #0]
 8006328:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800632c:	2b00      	cmp	r3, #0
 800632e:	f000 808e 	beq.w	800644e <USBD_CUSTOM_HID_Setup+0x162>
 8006332:	2b20      	cmp	r3, #32
 8006334:	f040 812b 	bne.w	800658e <USBD_CUSTOM_HID_Setup+0x2a2>
  {
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
 8006338:	683b      	ldr	r3, [r7, #0]
 800633a:	785b      	ldrb	r3, [r3, #1]
 800633c:	3b01      	subs	r3, #1
 800633e:	2b0a      	cmp	r3, #10
 8006340:	d87d      	bhi.n	800643e <USBD_CUSTOM_HID_Setup+0x152>
 8006342:	a201      	add	r2, pc, #4	@ (adr r2, 8006348 <USBD_CUSTOM_HID_Setup+0x5c>)
 8006344:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006348:	080063d3 	.word	0x080063d3
 800634c:	080063a5 	.word	0x080063a5
 8006350:	08006383 	.word	0x08006383
 8006354:	0800643f 	.word	0x0800643f
 8006358:	0800643f 	.word	0x0800643f
 800635c:	0800643f 	.word	0x0800643f
 8006360:	0800643f 	.word	0x0800643f
 8006364:	0800643f 	.word	0x0800643f
 8006368:	080063b5 	.word	0x080063b5
 800636c:	08006393 	.word	0x08006393
 8006370:	08006375 	.word	0x08006375
      {
        case CUSTOM_HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 8006374:	683b      	ldr	r3, [r7, #0]
 8006376:	885b      	ldrh	r3, [r3, #2]
 8006378:	b2db      	uxtb	r3, r3
 800637a:	461a      	mov	r2, r3
 800637c:	693b      	ldr	r3, [r7, #16]
 800637e:	641a      	str	r2, [r3, #64]	@ 0x40
          break;
 8006380:	e064      	b.n	800644c <USBD_CUSTOM_HID_Setup+0x160>

        case CUSTOM_HID_REQ_GET_PROTOCOL:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 8006382:	693b      	ldr	r3, [r7, #16]
 8006384:	3340      	adds	r3, #64	@ 0x40
 8006386:	2201      	movs	r2, #1
 8006388:	4619      	mov	r1, r3
 800638a:	6878      	ldr	r0, [r7, #4]
 800638c:	f001 fd1a 	bl	8007dc4 <USBD_CtlSendData>
          break;
 8006390:	e05c      	b.n	800644c <USBD_CUSTOM_HID_Setup+0x160>

        case CUSTOM_HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8006392:	683b      	ldr	r3, [r7, #0]
 8006394:	885b      	ldrh	r3, [r3, #2]
 8006396:	0a1b      	lsrs	r3, r3, #8
 8006398:	b29b      	uxth	r3, r3
 800639a:	b2db      	uxtb	r3, r3
 800639c:	461a      	mov	r2, r3
 800639e:	693b      	ldr	r3, [r7, #16]
 80063a0:	645a      	str	r2, [r3, #68]	@ 0x44
          break;
 80063a2:	e053      	b.n	800644c <USBD_CUSTOM_HID_Setup+0x160>

        case CUSTOM_HID_REQ_GET_IDLE:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 80063a4:	693b      	ldr	r3, [r7, #16]
 80063a6:	3344      	adds	r3, #68	@ 0x44
 80063a8:	2201      	movs	r2, #1
 80063aa:	4619      	mov	r1, r3
 80063ac:	6878      	ldr	r0, [r7, #4]
 80063ae:	f001 fd09 	bl	8007dc4 <USBD_CtlSendData>
          break;
 80063b2:	e04b      	b.n	800644c <USBD_CUSTOM_HID_Setup+0x160>
            ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->CtrlReqComplete(req->bRequest,
                                                                                            req->wLength);
          }
#endif /* USBD_CUSTOMHID_CTRL_REQ_COMPLETE_CALLBACK_ENABLED */
#ifndef USBD_CUSTOMHID_EP0_OUT_PREPARE_RECEIVE_DISABLED
          hhid->IsReportAvailable = 1U;
 80063b4:	693b      	ldr	r3, [r7, #16]
 80063b6:	2201      	movs	r2, #1
 80063b8:	64da      	str	r2, [r3, #76]	@ 0x4c
          (void)USBD_CtlPrepareRx(pdev, hhid->Report_buf,
 80063ba:	6939      	ldr	r1, [r7, #16]
                                  MIN(req->wLength, USBD_CUSTOMHID_OUTREPORT_BUF_SIZE));
 80063bc:	683b      	ldr	r3, [r7, #0]
 80063be:	88db      	ldrh	r3, [r3, #6]
 80063c0:	2b40      	cmp	r3, #64	@ 0x40
 80063c2:	bf28      	it	cs
 80063c4:	2340      	movcs	r3, #64	@ 0x40
 80063c6:	b29b      	uxth	r3, r3
          (void)USBD_CtlPrepareRx(pdev, hhid->Report_buf,
 80063c8:	461a      	mov	r2, r3
 80063ca:	6878      	ldr	r0, [r7, #4]
 80063cc:	f001 fd26 	bl	8007e1c <USBD_CtlPrepareRx>
#endif /* USBD_CUSTOMHID_EP0_OUT_PREPARE_RECEIVE_DISABLED */
          break;
 80063d0:	e03c      	b.n	800644c <USBD_CUSTOM_HID_Setup+0x160>
#ifdef USBD_CUSTOMHID_CTRL_REQ_GET_REPORT_ENABLED
        case CUSTOM_HID_REQ_GET_REPORT:
          if (((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->GetReport != NULL)
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80063d8:	687a      	ldr	r2, [r7, #4]
 80063da:	33b0      	adds	r3, #176	@ 0xb0
 80063dc:	009b      	lsls	r3, r3, #2
 80063de:	4413      	add	r3, r2
 80063e0:	685b      	ldr	r3, [r3, #4]
 80063e2:	691b      	ldr	r3, [r3, #16]
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d010      	beq.n	800640a <USBD_CUSTOM_HID_Setup+0x11e>
          {
            ReportLength = req->wLength;
 80063e8:	683b      	ldr	r3, [r7, #0]
 80063ea:	88db      	ldrh	r3, [r3, #6]
 80063ec:	81fb      	strh	r3, [r7, #14]

            /* Get report data buffer */
            pbuf = ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->GetReport(&ReportLength);
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80063f4:	687a      	ldr	r2, [r7, #4]
 80063f6:	33b0      	adds	r3, #176	@ 0xb0
 80063f8:	009b      	lsls	r3, r3, #2
 80063fa:	4413      	add	r3, r2
 80063fc:	685b      	ldr	r3, [r3, #4]
 80063fe:	691b      	ldr	r3, [r3, #16]
 8006400:	f107 020e 	add.w	r2, r7, #14
 8006404:	4610      	mov	r0, r2
 8006406:	4798      	blx	r3
 8006408:	61b8      	str	r0, [r7, #24]
          }

          if ((pbuf != NULL) && (ReportLength != 0U))
 800640a:	69bb      	ldr	r3, [r7, #24]
 800640c:	2b00      	cmp	r3, #0
 800640e:	d011      	beq.n	8006434 <USBD_CUSTOM_HID_Setup+0x148>
 8006410:	89fb      	ldrh	r3, [r7, #14]
 8006412:	2b00      	cmp	r3, #0
 8006414:	d00e      	beq.n	8006434 <USBD_CUSTOM_HID_Setup+0x148>
          {
            len = MIN(ReportLength, req->wLength);
 8006416:	683b      	ldr	r3, [r7, #0]
 8006418:	88da      	ldrh	r2, [r3, #6]
 800641a:	89fb      	ldrh	r3, [r7, #14]
 800641c:	4293      	cmp	r3, r2
 800641e:	bf28      	it	cs
 8006420:	4613      	movcs	r3, r2
 8006422:	83fb      	strh	r3, [r7, #30]

            /* Send the report data over EP0 */
            (void)USBD_CtlSendData(pdev, pbuf, len);
 8006424:	8bfb      	ldrh	r3, [r7, #30]
 8006426:	461a      	mov	r2, r3
 8006428:	69b9      	ldr	r1, [r7, #24]
 800642a:	6878      	ldr	r0, [r7, #4]
 800642c:	f001 fcca 	bl	8007dc4 <USBD_CtlSendData>
 8006430:	bf00      	nop
#else
            /* Stall EP0 if no data available */
            USBD_CtlError(pdev, req);
#endif /* USBD_CUSTOMHID_CTRL_REQ_COMPLETE_CALLBACK_ENABLED */
          }
          break;
 8006432:	e00b      	b.n	800644c <USBD_CUSTOM_HID_Setup+0x160>
            USBD_CtlError(pdev, req);
 8006434:	6839      	ldr	r1, [r7, #0]
 8006436:	6878      	ldr	r0, [r7, #4]
 8006438:	f001 fc47 	bl	8007cca <USBD_CtlError>
          break;
 800643c:	e006      	b.n	800644c <USBD_CUSTOM_HID_Setup+0x160>
#endif /* USBD_CUSTOMHID_CTRL_REQ_GET_REPORT_ENABLED */

        default:
          USBD_CtlError(pdev, req);
 800643e:	6839      	ldr	r1, [r7, #0]
 8006440:	6878      	ldr	r0, [r7, #4]
 8006442:	f001 fc42 	bl	8007cca <USBD_CtlError>
          ret = USBD_FAIL;
 8006446:	2303      	movs	r3, #3
 8006448:	75fb      	strb	r3, [r7, #23]
          break;
 800644a:	bf00      	nop
      }
      break;
 800644c:	e0a6      	b.n	800659c <USBD_CUSTOM_HID_Setup+0x2b0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800644e:	683b      	ldr	r3, [r7, #0]
 8006450:	785b      	ldrb	r3, [r3, #1]
 8006452:	2b0b      	cmp	r3, #11
 8006454:	f200 8092 	bhi.w	800657c <USBD_CUSTOM_HID_Setup+0x290>
 8006458:	a201      	add	r2, pc, #4	@ (adr r2, 8006460 <USBD_CUSTOM_HID_Setup+0x174>)
 800645a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800645e:	bf00      	nop
 8006460:	08006491 	.word	0x08006491
 8006464:	0800658b 	.word	0x0800658b
 8006468:	0800657d 	.word	0x0800657d
 800646c:	0800657d 	.word	0x0800657d
 8006470:	0800657d 	.word	0x0800657d
 8006474:	0800657d 	.word	0x0800657d
 8006478:	080064bb 	.word	0x080064bb
 800647c:	0800657d 	.word	0x0800657d
 8006480:	0800657d 	.word	0x0800657d
 8006484:	0800657d 	.word	0x0800657d
 8006488:	0800652b 	.word	0x0800652b
 800648c:	08006555 	.word	0x08006555
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006496:	b2db      	uxtb	r3, r3
 8006498:	2b03      	cmp	r3, #3
 800649a:	d107      	bne.n	80064ac <USBD_CUSTOM_HID_Setup+0x1c0>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800649c:	f107 030c 	add.w	r3, r7, #12
 80064a0:	2202      	movs	r2, #2
 80064a2:	4619      	mov	r1, r3
 80064a4:	6878      	ldr	r0, [r7, #4]
 80064a6:	f001 fc8d 	bl	8007dc4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80064aa:	e06f      	b.n	800658c <USBD_CUSTOM_HID_Setup+0x2a0>
            USBD_CtlError(pdev, req);
 80064ac:	6839      	ldr	r1, [r7, #0]
 80064ae:	6878      	ldr	r0, [r7, #4]
 80064b0:	f001 fc0b 	bl	8007cca <USBD_CtlError>
            ret = USBD_FAIL;
 80064b4:	2303      	movs	r3, #3
 80064b6:	75fb      	strb	r3, [r7, #23]
          break;
 80064b8:	e068      	b.n	800658c <USBD_CUSTOM_HID_Setup+0x2a0>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == CUSTOM_HID_REPORT_DESC)
 80064ba:	683b      	ldr	r3, [r7, #0]
 80064bc:	885b      	ldrh	r3, [r3, #2]
 80064be:	0a1b      	lsrs	r3, r3, #8
 80064c0:	b29b      	uxth	r3, r3
 80064c2:	2b22      	cmp	r3, #34	@ 0x22
 80064c4:	d112      	bne.n	80064ec <USBD_CUSTOM_HID_Setup+0x200>
          {
            len = MIN(USBD_CUSTOM_HID_REPORT_DESC_SIZE, req->wLength);
 80064c6:	683b      	ldr	r3, [r7, #0]
 80064c8:	88db      	ldrh	r3, [r3, #6]
 80064ca:	f240 423d 	movw	r2, #1085	@ 0x43d
 80064ce:	4293      	cmp	r3, r2
 80064d0:	bf28      	it	cs
 80064d2:	4613      	movcs	r3, r2
 80064d4:	83fb      	strh	r3, [r7, #30]
            pbuf = ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->pReport;
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80064dc:	687a      	ldr	r2, [r7, #4]
 80064de:	33b0      	adds	r3, #176	@ 0xb0
 80064e0:	009b      	lsls	r3, r3, #2
 80064e2:	4413      	add	r3, r2
 80064e4:	685b      	ldr	r3, [r3, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	61bb      	str	r3, [r7, #24]
 80064ea:	e00d      	b.n	8006508 <USBD_CUSTOM_HID_Setup+0x21c>
          }
          else
          {
            if ((req->wValue >> 8) == CUSTOM_HID_DESCRIPTOR_TYPE)
 80064ec:	683b      	ldr	r3, [r7, #0]
 80064ee:	885b      	ldrh	r3, [r3, #2]
 80064f0:	0a1b      	lsrs	r3, r3, #8
 80064f2:	b29b      	uxth	r3, r3
 80064f4:	2b21      	cmp	r3, #33	@ 0x21
 80064f6:	d107      	bne.n	8006508 <USBD_CUSTOM_HID_Setup+0x21c>
            {
              pbuf = USBD_CUSTOM_HID_Desc;
 80064f8:	4b2b      	ldr	r3, [pc, #172]	@ (80065a8 <USBD_CUSTOM_HID_Setup+0x2bc>)
 80064fa:	61bb      	str	r3, [r7, #24]
              len = MIN(USB_CUSTOM_HID_DESC_SIZ, req->wLength);
 80064fc:	683b      	ldr	r3, [r7, #0]
 80064fe:	88db      	ldrh	r3, [r3, #6]
 8006500:	2b09      	cmp	r3, #9
 8006502:	bf28      	it	cs
 8006504:	2309      	movcs	r3, #9
 8006506:	83fb      	strh	r3, [r7, #30]
            }
          }

          if (pbuf != NULL)
 8006508:	69bb      	ldr	r3, [r7, #24]
 800650a:	2b00      	cmp	r3, #0
 800650c:	d006      	beq.n	800651c <USBD_CUSTOM_HID_Setup+0x230>
          {
            (void)USBD_CtlSendData(pdev, pbuf, len);
 800650e:	8bfb      	ldrh	r3, [r7, #30]
 8006510:	461a      	mov	r2, r3
 8006512:	69b9      	ldr	r1, [r7, #24]
 8006514:	6878      	ldr	r0, [r7, #4]
 8006516:	f001 fc55 	bl	8007dc4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800651a:	e037      	b.n	800658c <USBD_CUSTOM_HID_Setup+0x2a0>
            USBD_CtlError(pdev, req);
 800651c:	6839      	ldr	r1, [r7, #0]
 800651e:	6878      	ldr	r0, [r7, #4]
 8006520:	f001 fbd3 	bl	8007cca <USBD_CtlError>
            ret = USBD_FAIL;
 8006524:	2303      	movs	r3, #3
 8006526:	75fb      	strb	r3, [r7, #23]
          break;
 8006528:	e030      	b.n	800658c <USBD_CUSTOM_HID_Setup+0x2a0>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006530:	b2db      	uxtb	r3, r3
 8006532:	2b03      	cmp	r3, #3
 8006534:	d107      	bne.n	8006546 <USBD_CUSTOM_HID_Setup+0x25a>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 8006536:	693b      	ldr	r3, [r7, #16]
 8006538:	3348      	adds	r3, #72	@ 0x48
 800653a:	2201      	movs	r2, #1
 800653c:	4619      	mov	r1, r3
 800653e:	6878      	ldr	r0, [r7, #4]
 8006540:	f001 fc40 	bl	8007dc4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006544:	e022      	b.n	800658c <USBD_CUSTOM_HID_Setup+0x2a0>
            USBD_CtlError(pdev, req);
 8006546:	6839      	ldr	r1, [r7, #0]
 8006548:	6878      	ldr	r0, [r7, #4]
 800654a:	f001 fbbe 	bl	8007cca <USBD_CtlError>
            ret = USBD_FAIL;
 800654e:	2303      	movs	r3, #3
 8006550:	75fb      	strb	r3, [r7, #23]
          break;
 8006552:	e01b      	b.n	800658c <USBD_CUSTOM_HID_Setup+0x2a0>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800655a:	b2db      	uxtb	r3, r3
 800655c:	2b03      	cmp	r3, #3
 800655e:	d106      	bne.n	800656e <USBD_CUSTOM_HID_Setup+0x282>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 8006560:	683b      	ldr	r3, [r7, #0]
 8006562:	885b      	ldrh	r3, [r3, #2]
 8006564:	b2db      	uxtb	r3, r3
 8006566:	461a      	mov	r2, r3
 8006568:	693b      	ldr	r3, [r7, #16]
 800656a:	649a      	str	r2, [r3, #72]	@ 0x48
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800656c:	e00e      	b.n	800658c <USBD_CUSTOM_HID_Setup+0x2a0>
            USBD_CtlError(pdev, req);
 800656e:	6839      	ldr	r1, [r7, #0]
 8006570:	6878      	ldr	r0, [r7, #4]
 8006572:	f001 fbaa 	bl	8007cca <USBD_CtlError>
            ret = USBD_FAIL;
 8006576:	2303      	movs	r3, #3
 8006578:	75fb      	strb	r3, [r7, #23]
          break;
 800657a:	e007      	b.n	800658c <USBD_CUSTOM_HID_Setup+0x2a0>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800657c:	6839      	ldr	r1, [r7, #0]
 800657e:	6878      	ldr	r0, [r7, #4]
 8006580:	f001 fba3 	bl	8007cca <USBD_CtlError>
          ret = USBD_FAIL;
 8006584:	2303      	movs	r3, #3
 8006586:	75fb      	strb	r3, [r7, #23]
          break;
 8006588:	e000      	b.n	800658c <USBD_CUSTOM_HID_Setup+0x2a0>
          break;
 800658a:	bf00      	nop
      }
      break;
 800658c:	e006      	b.n	800659c <USBD_CUSTOM_HID_Setup+0x2b0>

    default:
      USBD_CtlError(pdev, req);
 800658e:	6839      	ldr	r1, [r7, #0]
 8006590:	6878      	ldr	r0, [r7, #4]
 8006592:	f001 fb9a 	bl	8007cca <USBD_CtlError>
      ret = USBD_FAIL;
 8006596:	2303      	movs	r3, #3
 8006598:	75fb      	strb	r3, [r7, #23]
      break;
 800659a:	bf00      	nop
  }
  return (uint8_t)ret;
 800659c:	7dfb      	ldrb	r3, [r7, #23]
}
 800659e:	4618      	mov	r0, r3
 80065a0:	3720      	adds	r7, #32
 80065a2:	46bd      	mov	sp, r7
 80065a4:	bd80      	pop	{r7, pc}
 80065a6:	bf00      	nop
 80065a8:	20000070 	.word	0x20000070

080065ac <USBD_CUSTOM_HID_SendReport>:
{
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CUSTOM_HID_SendReport(USBD_HandleTypeDef *pdev,
                                   uint8_t *report, uint16_t len)
{
 80065ac:	b580      	push	{r7, lr}
 80065ae:	b086      	sub	sp, #24
 80065b0:	af00      	add	r7, sp, #0
 80065b2:	60f8      	str	r0, [r7, #12]
 80065b4:	60b9      	str	r1, [r7, #8]
 80065b6:	4613      	mov	r3, r2
 80065b8:	80fb      	strh	r3, [r7, #6]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	32b0      	adds	r2, #176	@ 0xb0
 80065c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80065c8:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hhid == NULL)
 80065ca:	697b      	ldr	r3, [r7, #20]
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d101      	bne.n	80065d4 <USBD_CUSTOM_HID_SendReport+0x28>
  {
    return (uint8_t)USBD_FAIL;
 80065d0:	2303      	movs	r3, #3
 80065d2:	e019      	b.n	8006608 <USBD_CUSTOM_HID_SendReport+0x5c>
#ifdef USE_USBD_COMPOSITE
  /* Get Endpoint IN address allocated for this class instance */
  CUSTOMHIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, ClassId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80065da:	b2db      	uxtb	r3, r3
 80065dc:	2b03      	cmp	r3, #3
 80065de:	d112      	bne.n	8006606 <USBD_CUSTOM_HID_SendReport+0x5a>
  {
    if (hhid->state == CUSTOM_HID_IDLE)
 80065e0:	697b      	ldr	r3, [r7, #20]
 80065e2:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d10b      	bne.n	8006602 <USBD_CUSTOM_HID_SendReport+0x56>
    {
      hhid->state = CUSTOM_HID_BUSY;
 80065ea:	697b      	ldr	r3, [r7, #20]
 80065ec:	2201      	movs	r2, #1
 80065ee:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      (void)USBD_LL_Transmit(pdev, CUSTOMHIDInEpAdd, report, len);
 80065f2:	4b07      	ldr	r3, [pc, #28]	@ (8006610 <USBD_CUSTOM_HID_SendReport+0x64>)
 80065f4:	7819      	ldrb	r1, [r3, #0]
 80065f6:	88fb      	ldrh	r3, [r7, #6]
 80065f8:	68ba      	ldr	r2, [r7, #8]
 80065fa:	68f8      	ldr	r0, [r7, #12]
 80065fc:	f002 fb6f 	bl	8008cde <USBD_LL_Transmit>
 8006600:	e001      	b.n	8006606 <USBD_CUSTOM_HID_SendReport+0x5a>
    }
    else
    {
      return (uint8_t)USBD_BUSY;
 8006602:	2301      	movs	r3, #1
 8006604:	e000      	b.n	8006608 <USBD_CUSTOM_HID_SendReport+0x5c>
    }
  }
  return (uint8_t)USBD_OK;
 8006606:	2300      	movs	r3, #0
}
 8006608:	4618      	mov	r0, r3
 800660a:	3718      	adds	r7, #24
 800660c:	46bd      	mov	sp, r7
 800660e:	bd80      	pop	{r7, pc}
 8006610:	20000086 	.word	0x20000086

08006614 <USBD_CUSTOM_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetFSCfgDesc(uint16_t *length)
{
 8006614:	b580      	push	{r7, lr}
 8006616:	b084      	sub	sp, #16
 8006618:	af00      	add	r7, sp, #0
 800661a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPIN_ADDR);
 800661c:	2181      	movs	r1, #129	@ 0x81
 800661e:	4815      	ldr	r0, [pc, #84]	@ (8006674 <USBD_CUSTOM_HID_GetFSCfgDesc+0x60>)
 8006620:	f000 fd1d 	bl	800705e <USBD_GetEpDesc>
 8006624:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPOUT_ADDR);
 8006626:	2101      	movs	r1, #1
 8006628:	4812      	ldr	r0, [pc, #72]	@ (8006674 <USBD_CUSTOM_HID_GetFSCfgDesc+0x60>)
 800662a:	f000 fd18 	bl	800705e <USBD_GetEpDesc>
 800662e:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	2b00      	cmp	r3, #0
 8006634:	d009      	beq.n	800664a <USBD_CUSTOM_HID_GetFSCfgDesc+0x36>
  {
    pEpInDesc->wMaxPacketSize = CUSTOM_HID_EPIN_SIZE;
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	2200      	movs	r2, #0
 800663a:	f042 0202 	orr.w	r2, r2, #2
 800663e:	711a      	strb	r2, [r3, #4]
 8006640:	2200      	movs	r2, #0
 8006642:	715a      	strb	r2, [r3, #5]
    pEpInDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	220a      	movs	r2, #10
 8006648:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800664a:	68bb      	ldr	r3, [r7, #8]
 800664c:	2b00      	cmp	r3, #0
 800664e:	d009      	beq.n	8006664 <USBD_CUSTOM_HID_GetFSCfgDesc+0x50>
  {
    pEpOutDesc->wMaxPacketSize = CUSTOM_HID_EPOUT_SIZE;
 8006650:	68bb      	ldr	r3, [r7, #8]
 8006652:	2200      	movs	r2, #0
 8006654:	f042 0202 	orr.w	r2, r2, #2
 8006658:	711a      	strb	r2, [r3, #4]
 800665a:	2200      	movs	r2, #0
 800665c:	715a      	strb	r2, [r3, #5]
    pEpOutDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
 800665e:	68bb      	ldr	r3, [r7, #8]
 8006660:	220a      	movs	r2, #10
 8006662:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgDesc);
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	2229      	movs	r2, #41	@ 0x29
 8006668:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgDesc;
 800666a:	4b02      	ldr	r3, [pc, #8]	@ (8006674 <USBD_CUSTOM_HID_GetFSCfgDesc+0x60>)
}
 800666c:	4618      	mov	r0, r3
 800666e:	3710      	adds	r7, #16
 8006670:	46bd      	mov	sp, r7
 8006672:	bd80      	pop	{r7, pc}
 8006674:	20000044 	.word	0x20000044

08006678 <USBD_CUSTOM_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetHSCfgDesc(uint16_t *length)
{
 8006678:	b580      	push	{r7, lr}
 800667a:	b084      	sub	sp, #16
 800667c:	af00      	add	r7, sp, #0
 800667e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPIN_ADDR);
 8006680:	2181      	movs	r1, #129	@ 0x81
 8006682:	4815      	ldr	r0, [pc, #84]	@ (80066d8 <USBD_CUSTOM_HID_GetHSCfgDesc+0x60>)
 8006684:	f000 fceb 	bl	800705e <USBD_GetEpDesc>
 8006688:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPOUT_ADDR);
 800668a:	2101      	movs	r1, #1
 800668c:	4812      	ldr	r0, [pc, #72]	@ (80066d8 <USBD_CUSTOM_HID_GetHSCfgDesc+0x60>)
 800668e:	f000 fce6 	bl	800705e <USBD_GetEpDesc>
 8006692:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	2b00      	cmp	r3, #0
 8006698:	d009      	beq.n	80066ae <USBD_CUSTOM_HID_GetHSCfgDesc+0x36>
  {
    pEpInDesc->wMaxPacketSize = CUSTOM_HID_EPIN_SIZE;
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	2200      	movs	r2, #0
 800669e:	f042 0202 	orr.w	r2, r2, #2
 80066a2:	711a      	strb	r2, [r3, #4]
 80066a4:	2200      	movs	r2, #0
 80066a6:	715a      	strb	r2, [r3, #5]
    pEpInDesc->bInterval = CUSTOM_HID_HS_BINTERVAL;
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	2205      	movs	r2, #5
 80066ac:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80066ae:	68bb      	ldr	r3, [r7, #8]
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d009      	beq.n	80066c8 <USBD_CUSTOM_HID_GetHSCfgDesc+0x50>
  {
    pEpOutDesc->wMaxPacketSize = CUSTOM_HID_EPOUT_SIZE;
 80066b4:	68bb      	ldr	r3, [r7, #8]
 80066b6:	2200      	movs	r2, #0
 80066b8:	f042 0202 	orr.w	r2, r2, #2
 80066bc:	711a      	strb	r2, [r3, #4]
 80066be:	2200      	movs	r2, #0
 80066c0:	715a      	strb	r2, [r3, #5]
    pEpOutDesc->bInterval = CUSTOM_HID_HS_BINTERVAL;
 80066c2:	68bb      	ldr	r3, [r7, #8]
 80066c4:	2205      	movs	r2, #5
 80066c6:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgDesc);
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	2229      	movs	r2, #41	@ 0x29
 80066cc:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgDesc;
 80066ce:	4b02      	ldr	r3, [pc, #8]	@ (80066d8 <USBD_CUSTOM_HID_GetHSCfgDesc+0x60>)
}
 80066d0:	4618      	mov	r0, r3
 80066d2:	3710      	adds	r7, #16
 80066d4:	46bd      	mov	sp, r7
 80066d6:	bd80      	pop	{r7, pc}
 80066d8:	20000044 	.word	0x20000044

080066dc <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80066dc:	b580      	push	{r7, lr}
 80066de:	b084      	sub	sp, #16
 80066e0:	af00      	add	r7, sp, #0
 80066e2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPIN_ADDR);
 80066e4:	2181      	movs	r1, #129	@ 0x81
 80066e6:	4815      	ldr	r0, [pc, #84]	@ (800673c <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x60>)
 80066e8:	f000 fcb9 	bl	800705e <USBD_GetEpDesc>
 80066ec:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPOUT_ADDR);
 80066ee:	2101      	movs	r1, #1
 80066f0:	4812      	ldr	r0, [pc, #72]	@ (800673c <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x60>)
 80066f2:	f000 fcb4 	bl	800705e <USBD_GetEpDesc>
 80066f6:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d009      	beq.n	8006712 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x36>
  {
    pEpInDesc->wMaxPacketSize = CUSTOM_HID_EPIN_SIZE;
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	2200      	movs	r2, #0
 8006702:	f042 0202 	orr.w	r2, r2, #2
 8006706:	711a      	strb	r2, [r3, #4]
 8006708:	2200      	movs	r2, #0
 800670a:	715a      	strb	r2, [r3, #5]
    pEpInDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	220a      	movs	r2, #10
 8006710:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006712:	68bb      	ldr	r3, [r7, #8]
 8006714:	2b00      	cmp	r3, #0
 8006716:	d009      	beq.n	800672c <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x50>
  {
    pEpOutDesc->wMaxPacketSize = CUSTOM_HID_EPOUT_SIZE;
 8006718:	68bb      	ldr	r3, [r7, #8]
 800671a:	2200      	movs	r2, #0
 800671c:	f042 0202 	orr.w	r2, r2, #2
 8006720:	711a      	strb	r2, [r3, #4]
 8006722:	2200      	movs	r2, #0
 8006724:	715a      	strb	r2, [r3, #5]
    pEpOutDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
 8006726:	68bb      	ldr	r3, [r7, #8]
 8006728:	220a      	movs	r2, #10
 800672a:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgDesc);
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	2229      	movs	r2, #41	@ 0x29
 8006730:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgDesc;
 8006732:	4b02      	ldr	r3, [pc, #8]	@ (800673c <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x60>)
}
 8006734:	4618      	mov	r0, r3
 8006736:	3710      	adds	r7, #16
 8006738:	46bd      	mov	sp, r7
 800673a:	bd80      	pop	{r7, pc}
 800673c:	20000044 	.word	0x20000044

08006740 <USBD_CUSTOM_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006740:	b480      	push	{r7}
 8006742:	b083      	sub	sp, #12
 8006744:	af00      	add	r7, sp, #0
 8006746:	6078      	str	r0, [r7, #4]
 8006748:	460b      	mov	r3, r1
 800674a:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId])->state = CUSTOM_HID_IDLE;
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	32b0      	adds	r2, #176	@ 0xb0
 8006756:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800675a:	2200      	movs	r2, #0
 800675c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  return (uint8_t)USBD_OK;
 8006760:	2300      	movs	r3, #0
}
 8006762:	4618      	mov	r0, r3
 8006764:	370c      	adds	r7, #12
 8006766:	46bd      	mov	sp, r7
 8006768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800676c:	4770      	bx	lr

0800676e <USBD_CUSTOM_HID_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800676e:	b580      	push	{r7, lr}
 8006770:	b084      	sub	sp, #16
 8006772:	af00      	add	r7, sp, #0
 8006774:	6078      	str	r0, [r7, #4]
 8006776:	460b      	mov	r3, r1
 8006778:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	32b0      	adds	r2, #176	@ 0xb0
 8006784:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006788:	2b00      	cmp	r3, #0
 800678a:	d101      	bne.n	8006790 <USBD_CUSTOM_HID_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800678c:	2303      	movs	r3, #3
 800678e:	e017      	b.n	80067c0 <USBD_CUSTOM_HID_DataOut+0x52>
  }

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	32b0      	adds	r2, #176	@ 0xb0
 800679a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800679e:	60fb      	str	r3, [r7, #12]

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application processing */
  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->OutEvent(hhid->Report_buf[0],
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80067a6:	687a      	ldr	r2, [r7, #4]
 80067a8:	33b0      	adds	r3, #176	@ 0xb0
 80067aa:	009b      	lsls	r3, r3, #2
 80067ac:	4413      	add	r3, r2
 80067ae:	685b      	ldr	r3, [r3, #4]
 80067b0:	68db      	ldr	r3, [r3, #12]
 80067b2:	68fa      	ldr	r2, [r7, #12]
 80067b4:	7810      	ldrb	r0, [r2, #0]
 80067b6:	68fa      	ldr	r2, [r7, #12]
 80067b8:	7852      	ldrb	r2, [r2, #1]
 80067ba:	4611      	mov	r1, r2
 80067bc:	4798      	blx	r3
                                                                           hhid->Report_buf[1]);

  return (uint8_t)USBD_OK;
 80067be:	2300      	movs	r3, #0
}
 80067c0:	4618      	mov	r0, r3
 80067c2:	3710      	adds	r7, #16
 80067c4:	46bd      	mov	sp, r7
 80067c6:	bd80      	pop	{r7, pc}

080067c8 <USBD_CUSTOM_HID_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80067c8:	b580      	push	{r7, lr}
 80067ca:	b084      	sub	sp, #16
 80067cc:	af00      	add	r7, sp, #0
 80067ce:	6078      	str	r0, [r7, #4]
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	32b0      	adds	r2, #176	@ 0xb0
 80067da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d101      	bne.n	80067e6 <USBD_CUSTOM_HID_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 80067e2:	2303      	movs	r3, #3
 80067e4:	e00f      	b.n	8006806 <USBD_CUSTOM_HID_ReceivePacket+0x3e>
#ifdef USE_USBD_COMPOSITE
  /* Get OUT Endpoint address allocated for this class instance */
  CUSTOMHIDOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	32b0      	adds	r2, #176	@ 0xb0
 80067f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80067f4:	60fb      	str	r3, [r7, #12]

  /* Resume USB Out process */
  (void)USBD_LL_PrepareReceive(pdev, CUSTOMHIDOutEpAdd, hhid->Report_buf,
 80067f6:	4b06      	ldr	r3, [pc, #24]	@ (8006810 <USBD_CUSTOM_HID_ReceivePacket+0x48>)
 80067f8:	7819      	ldrb	r1, [r3, #0]
 80067fa:	68fa      	ldr	r2, [r7, #12]
 80067fc:	2340      	movs	r3, #64	@ 0x40
 80067fe:	6878      	ldr	r0, [r7, #4]
 8006800:	f002 fa8e 	bl	8008d20 <USBD_LL_PrepareReceive>
                               USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);

  return (uint8_t)USBD_OK;
 8006804:	2300      	movs	r3, #0
}
 8006806:	4618      	mov	r0, r3
 8006808:	3710      	adds	r7, #16
 800680a:	46bd      	mov	sp, r7
 800680c:	bd80      	pop	{r7, pc}
 800680e:	bf00      	nop
 8006810:	20000087 	.word	0x20000087

08006814 <USBD_CUSTOM_HID_EP0_RxReady>:
  *         Handles control request data.
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8006814:	b580      	push	{r7, lr}
 8006816:	b084      	sub	sp, #16
 8006818:	af00      	add	r7, sp, #0
 800681a:	6078      	str	r0, [r7, #4]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	32b0      	adds	r2, #176	@ 0xb0
 8006826:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800682a:	60fb      	str	r3, [r7, #12]

  if (hhid == NULL)
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	2b00      	cmp	r3, #0
 8006830:	d101      	bne.n	8006836 <USBD_CUSTOM_HID_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006832:	2303      	movs	r3, #3
 8006834:	e016      	b.n	8006864 <USBD_CUSTOM_HID_EP0_RxReady+0x50>
  }

  if (hhid->IsReportAvailable == 1U)
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800683a:	2b01      	cmp	r3, #1
 800683c:	d111      	bne.n	8006862 <USBD_CUSTOM_HID_EP0_RxReady+0x4e>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->OutEvent(hhid->Report_buf[0],
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006844:	687a      	ldr	r2, [r7, #4]
 8006846:	33b0      	adds	r3, #176	@ 0xb0
 8006848:	009b      	lsls	r3, r3, #2
 800684a:	4413      	add	r3, r2
 800684c:	685b      	ldr	r3, [r3, #4]
 800684e:	68db      	ldr	r3, [r3, #12]
 8006850:	68fa      	ldr	r2, [r7, #12]
 8006852:	7810      	ldrb	r0, [r2, #0]
 8006854:	68fa      	ldr	r2, [r7, #12]
 8006856:	7852      	ldrb	r2, [r2, #1]
 8006858:	4611      	mov	r1, r2
 800685a:	4798      	blx	r3
                                                                             hhid->Report_buf[1]);
    hhid->IsReportAvailable = 0U;
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	2200      	movs	r2, #0
 8006860:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  return (uint8_t)USBD_OK;
 8006862:	2300      	movs	r3, #0
}
 8006864:	4618      	mov	r0, r3
 8006866:	3710      	adds	r7, #16
 8006868:	46bd      	mov	sp, r7
 800686a:	bd80      	pop	{r7, pc}

0800686c <USBD_CUSTOM_HID_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 800686c:	b480      	push	{r7}
 800686e:	b083      	sub	sp, #12
 8006870:	af00      	add	r7, sp, #0
 8006872:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_DeviceQualifierDesc);
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	220a      	movs	r2, #10
 8006878:	801a      	strh	r2, [r3, #0]

  return USBD_CUSTOM_HID_DeviceQualifierDesc;
 800687a:	4b03      	ldr	r3, [pc, #12]	@ (8006888 <USBD_CUSTOM_HID_GetDeviceQualifierDesc+0x1c>)
}
 800687c:	4618      	mov	r0, r3
 800687e:	370c      	adds	r7, #12
 8006880:	46bd      	mov	sp, r7
 8006882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006886:	4770      	bx	lr
 8006888:	2000007c 	.word	0x2000007c

0800688c <USBD_CUSTOM_HID_RegisterInterface>:
  * @param  fops: CUSTOMHID Interface callback
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_RegisterInterface(USBD_HandleTypeDef *pdev,
                                          USBD_CUSTOM_HID_ItfTypeDef *fops)
{
 800688c:	b480      	push	{r7}
 800688e:	b083      	sub	sp, #12
 8006890:	af00      	add	r7, sp, #0
 8006892:	6078      	str	r0, [r7, #4]
 8006894:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8006896:	683b      	ldr	r3, [r7, #0]
 8006898:	2b00      	cmp	r3, #0
 800689a:	d101      	bne.n	80068a0 <USBD_CUSTOM_HID_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800689c:	2303      	movs	r3, #3
 800689e:	e009      	b.n	80068b4 <USBD_CUSTOM_HID_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80068a6:	687a      	ldr	r2, [r7, #4]
 80068a8:	33b0      	adds	r3, #176	@ 0xb0
 80068aa:	009b      	lsls	r3, r3, #2
 80068ac:	4413      	add	r3, r2
 80068ae:	683a      	ldr	r2, [r7, #0]
 80068b0:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 80068b2:	2300      	movs	r3, #0
}
 80068b4:	4618      	mov	r0, r3
 80068b6:	370c      	adds	r7, #12
 80068b8:	46bd      	mov	sp, r7
 80068ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068be:	4770      	bx	lr

080068c0 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80068c0:	b580      	push	{r7, lr}
 80068c2:	b086      	sub	sp, #24
 80068c4:	af00      	add	r7, sp, #0
 80068c6:	60f8      	str	r0, [r7, #12]
 80068c8:	60b9      	str	r1, [r7, #8]
 80068ca:	4613      	mov	r3, r2
 80068cc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d101      	bne.n	80068d8 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80068d4:	2303      	movs	r3, #3
 80068d6:	e01f      	b.n	8006918 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	2200      	movs	r2, #0
 80068dc:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	2200      	movs	r2, #0
 80068e4:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	2200      	movs	r2, #0
 80068ec:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80068f0:	68bb      	ldr	r3, [r7, #8]
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d003      	beq.n	80068fe <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	68ba      	ldr	r2, [r7, #8]
 80068fa:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	2201      	movs	r2, #1
 8006902:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	79fa      	ldrb	r2, [r7, #7]
 800690a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800690c:	68f8      	ldr	r0, [r7, #12]
 800690e:	f002 f8b1 	bl	8008a74 <USBD_LL_Init>
 8006912:	4603      	mov	r3, r0
 8006914:	75fb      	strb	r3, [r7, #23]

  return ret;
 8006916:	7dfb      	ldrb	r3, [r7, #23]
}
 8006918:	4618      	mov	r0, r3
 800691a:	3718      	adds	r7, #24
 800691c:	46bd      	mov	sp, r7
 800691e:	bd80      	pop	{r7, pc}

08006920 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006920:	b580      	push	{r7, lr}
 8006922:	b084      	sub	sp, #16
 8006924:	af00      	add	r7, sp, #0
 8006926:	6078      	str	r0, [r7, #4]
 8006928:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800692a:	2300      	movs	r3, #0
 800692c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800692e:	683b      	ldr	r3, [r7, #0]
 8006930:	2b00      	cmp	r3, #0
 8006932:	d101      	bne.n	8006938 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8006934:	2303      	movs	r3, #3
 8006936:	e025      	b.n	8006984 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	683a      	ldr	r2, [r7, #0]
 800693c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	32ae      	adds	r2, #174	@ 0xae
 800694a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800694e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006950:	2b00      	cmp	r3, #0
 8006952:	d00f      	beq.n	8006974 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	32ae      	adds	r2, #174	@ 0xae
 800695e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006962:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006964:	f107 020e 	add.w	r2, r7, #14
 8006968:	4610      	mov	r0, r2
 800696a:	4798      	blx	r3
 800696c:	4602      	mov	r2, r0
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800697a:	1c5a      	adds	r2, r3, #1
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 8006982:	2300      	movs	r3, #0
}
 8006984:	4618      	mov	r0, r3
 8006986:	3710      	adds	r7, #16
 8006988:	46bd      	mov	sp, r7
 800698a:	bd80      	pop	{r7, pc}

0800698c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800698c:	b580      	push	{r7, lr}
 800698e:	b082      	sub	sp, #8
 8006990:	af00      	add	r7, sp, #0
 8006992:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8006994:	6878      	ldr	r0, [r7, #4]
 8006996:	f002 f8b9 	bl	8008b0c <USBD_LL_Start>
 800699a:	4603      	mov	r3, r0
}
 800699c:	4618      	mov	r0, r3
 800699e:	3708      	adds	r7, #8
 80069a0:	46bd      	mov	sp, r7
 80069a2:	bd80      	pop	{r7, pc}

080069a4 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 80069a4:	b480      	push	{r7}
 80069a6:	b083      	sub	sp, #12
 80069a8:	af00      	add	r7, sp, #0
 80069aa:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80069ac:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 80069ae:	4618      	mov	r0, r3
 80069b0:	370c      	adds	r7, #12
 80069b2:	46bd      	mov	sp, r7
 80069b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b8:	4770      	bx	lr

080069ba <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80069ba:	b580      	push	{r7, lr}
 80069bc:	b084      	sub	sp, #16
 80069be:	af00      	add	r7, sp, #0
 80069c0:	6078      	str	r0, [r7, #4]
 80069c2:	460b      	mov	r3, r1
 80069c4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80069c6:	2300      	movs	r3, #0
 80069c8:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d009      	beq.n	80069e8 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	78fa      	ldrb	r2, [r7, #3]
 80069de:	4611      	mov	r1, r2
 80069e0:	6878      	ldr	r0, [r7, #4]
 80069e2:	4798      	blx	r3
 80069e4:	4603      	mov	r3, r0
 80069e6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80069e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80069ea:	4618      	mov	r0, r3
 80069ec:	3710      	adds	r7, #16
 80069ee:	46bd      	mov	sp, r7
 80069f0:	bd80      	pop	{r7, pc}

080069f2 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80069f2:	b580      	push	{r7, lr}
 80069f4:	b084      	sub	sp, #16
 80069f6:	af00      	add	r7, sp, #0
 80069f8:	6078      	str	r0, [r7, #4]
 80069fa:	460b      	mov	r3, r1
 80069fc:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80069fe:	2300      	movs	r3, #0
 8006a00:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006a08:	685b      	ldr	r3, [r3, #4]
 8006a0a:	78fa      	ldrb	r2, [r7, #3]
 8006a0c:	4611      	mov	r1, r2
 8006a0e:	6878      	ldr	r0, [r7, #4]
 8006a10:	4798      	blx	r3
 8006a12:	4603      	mov	r3, r0
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d001      	beq.n	8006a1c <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8006a18:	2303      	movs	r3, #3
 8006a1a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006a1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a1e:	4618      	mov	r0, r3
 8006a20:	3710      	adds	r7, #16
 8006a22:	46bd      	mov	sp, r7
 8006a24:	bd80      	pop	{r7, pc}

08006a26 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006a26:	b580      	push	{r7, lr}
 8006a28:	b084      	sub	sp, #16
 8006a2a:	af00      	add	r7, sp, #0
 8006a2c:	6078      	str	r0, [r7, #4]
 8006a2e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8006a36:	6839      	ldr	r1, [r7, #0]
 8006a38:	4618      	mov	r0, r3
 8006a3a:	f001 f90c 	bl	8007c56 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	2201      	movs	r2, #1
 8006a42:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8006a4c:	461a      	mov	r2, r3
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8006a5a:	f003 031f 	and.w	r3, r3, #31
 8006a5e:	2b02      	cmp	r3, #2
 8006a60:	d01a      	beq.n	8006a98 <USBD_LL_SetupStage+0x72>
 8006a62:	2b02      	cmp	r3, #2
 8006a64:	d822      	bhi.n	8006aac <USBD_LL_SetupStage+0x86>
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d002      	beq.n	8006a70 <USBD_LL_SetupStage+0x4a>
 8006a6a:	2b01      	cmp	r3, #1
 8006a6c:	d00a      	beq.n	8006a84 <USBD_LL_SetupStage+0x5e>
 8006a6e:	e01d      	b.n	8006aac <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8006a76:	4619      	mov	r1, r3
 8006a78:	6878      	ldr	r0, [r7, #4]
 8006a7a:	f000 fb63 	bl	8007144 <USBD_StdDevReq>
 8006a7e:	4603      	mov	r3, r0
 8006a80:	73fb      	strb	r3, [r7, #15]
      break;
 8006a82:	e020      	b.n	8006ac6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8006a8a:	4619      	mov	r1, r3
 8006a8c:	6878      	ldr	r0, [r7, #4]
 8006a8e:	f000 fbcb 	bl	8007228 <USBD_StdItfReq>
 8006a92:	4603      	mov	r3, r0
 8006a94:	73fb      	strb	r3, [r7, #15]
      break;
 8006a96:	e016      	b.n	8006ac6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8006a9e:	4619      	mov	r1, r3
 8006aa0:	6878      	ldr	r0, [r7, #4]
 8006aa2:	f000 fc2d 	bl	8007300 <USBD_StdEPReq>
 8006aa6:	4603      	mov	r3, r0
 8006aa8:	73fb      	strb	r3, [r7, #15]
      break;
 8006aaa:	e00c      	b.n	8006ac6 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8006ab2:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8006ab6:	b2db      	uxtb	r3, r3
 8006ab8:	4619      	mov	r1, r3
 8006aba:	6878      	ldr	r0, [r7, #4]
 8006abc:	f002 f886 	bl	8008bcc <USBD_LL_StallEP>
 8006ac0:	4603      	mov	r3, r0
 8006ac2:	73fb      	strb	r3, [r7, #15]
      break;
 8006ac4:	bf00      	nop
  }

  return ret;
 8006ac6:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ac8:	4618      	mov	r0, r3
 8006aca:	3710      	adds	r7, #16
 8006acc:	46bd      	mov	sp, r7
 8006ace:	bd80      	pop	{r7, pc}

08006ad0 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006ad0:	b580      	push	{r7, lr}
 8006ad2:	b086      	sub	sp, #24
 8006ad4:	af00      	add	r7, sp, #0
 8006ad6:	60f8      	str	r0, [r7, #12]
 8006ad8:	460b      	mov	r3, r1
 8006ada:	607a      	str	r2, [r7, #4]
 8006adc:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8006ade:	2300      	movs	r3, #0
 8006ae0:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8006ae2:	7afb      	ldrb	r3, [r7, #11]
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d16e      	bne.n	8006bc6 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8006aee:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8006af6:	2b03      	cmp	r3, #3
 8006af8:	f040 8098 	bne.w	8006c2c <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8006afc:	693b      	ldr	r3, [r7, #16]
 8006afe:	689a      	ldr	r2, [r3, #8]
 8006b00:	693b      	ldr	r3, [r7, #16]
 8006b02:	68db      	ldr	r3, [r3, #12]
 8006b04:	429a      	cmp	r2, r3
 8006b06:	d913      	bls.n	8006b30 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8006b08:	693b      	ldr	r3, [r7, #16]
 8006b0a:	689a      	ldr	r2, [r3, #8]
 8006b0c:	693b      	ldr	r3, [r7, #16]
 8006b0e:	68db      	ldr	r3, [r3, #12]
 8006b10:	1ad2      	subs	r2, r2, r3
 8006b12:	693b      	ldr	r3, [r7, #16]
 8006b14:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8006b16:	693b      	ldr	r3, [r7, #16]
 8006b18:	68da      	ldr	r2, [r3, #12]
 8006b1a:	693b      	ldr	r3, [r7, #16]
 8006b1c:	689b      	ldr	r3, [r3, #8]
 8006b1e:	4293      	cmp	r3, r2
 8006b20:	bf28      	it	cs
 8006b22:	4613      	movcs	r3, r2
 8006b24:	461a      	mov	r2, r3
 8006b26:	6879      	ldr	r1, [r7, #4]
 8006b28:	68f8      	ldr	r0, [r7, #12]
 8006b2a:	f001 f994 	bl	8007e56 <USBD_CtlContinueRx>
 8006b2e:	e07d      	b.n	8006c2c <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8006b36:	f003 031f 	and.w	r3, r3, #31
 8006b3a:	2b02      	cmp	r3, #2
 8006b3c:	d014      	beq.n	8006b68 <USBD_LL_DataOutStage+0x98>
 8006b3e:	2b02      	cmp	r3, #2
 8006b40:	d81d      	bhi.n	8006b7e <USBD_LL_DataOutStage+0xae>
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d002      	beq.n	8006b4c <USBD_LL_DataOutStage+0x7c>
 8006b46:	2b01      	cmp	r3, #1
 8006b48:	d003      	beq.n	8006b52 <USBD_LL_DataOutStage+0x82>
 8006b4a:	e018      	b.n	8006b7e <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8006b4c:	2300      	movs	r3, #0
 8006b4e:	75bb      	strb	r3, [r7, #22]
            break;
 8006b50:	e018      	b.n	8006b84 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8006b58:	b2db      	uxtb	r3, r3
 8006b5a:	4619      	mov	r1, r3
 8006b5c:	68f8      	ldr	r0, [r7, #12]
 8006b5e:	f000 fa64 	bl	800702a <USBD_CoreFindIF>
 8006b62:	4603      	mov	r3, r0
 8006b64:	75bb      	strb	r3, [r7, #22]
            break;
 8006b66:	e00d      	b.n	8006b84 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8006b6e:	b2db      	uxtb	r3, r3
 8006b70:	4619      	mov	r1, r3
 8006b72:	68f8      	ldr	r0, [r7, #12]
 8006b74:	f000 fa66 	bl	8007044 <USBD_CoreFindEP>
 8006b78:	4603      	mov	r3, r0
 8006b7a:	75bb      	strb	r3, [r7, #22]
            break;
 8006b7c:	e002      	b.n	8006b84 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8006b7e:	2300      	movs	r3, #0
 8006b80:	75bb      	strb	r3, [r7, #22]
            break;
 8006b82:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8006b84:	7dbb      	ldrb	r3, [r7, #22]
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d119      	bne.n	8006bbe <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006b90:	b2db      	uxtb	r3, r3
 8006b92:	2b03      	cmp	r3, #3
 8006b94:	d113      	bne.n	8006bbe <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8006b96:	7dba      	ldrb	r2, [r7, #22]
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	32ae      	adds	r2, #174	@ 0xae
 8006b9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ba0:	691b      	ldr	r3, [r3, #16]
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d00b      	beq.n	8006bbe <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8006ba6:	7dba      	ldrb	r2, [r7, #22]
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8006bae:	7dba      	ldrb	r2, [r7, #22]
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	32ae      	adds	r2, #174	@ 0xae
 8006bb4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006bb8:	691b      	ldr	r3, [r3, #16]
 8006bba:	68f8      	ldr	r0, [r7, #12]
 8006bbc:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8006bbe:	68f8      	ldr	r0, [r7, #12]
 8006bc0:	f001 f95a 	bl	8007e78 <USBD_CtlSendStatus>
 8006bc4:	e032      	b.n	8006c2c <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8006bc6:	7afb      	ldrb	r3, [r7, #11]
 8006bc8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006bcc:	b2db      	uxtb	r3, r3
 8006bce:	4619      	mov	r1, r3
 8006bd0:	68f8      	ldr	r0, [r7, #12]
 8006bd2:	f000 fa37 	bl	8007044 <USBD_CoreFindEP>
 8006bd6:	4603      	mov	r3, r0
 8006bd8:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006bda:	7dbb      	ldrb	r3, [r7, #22]
 8006bdc:	2bff      	cmp	r3, #255	@ 0xff
 8006bde:	d025      	beq.n	8006c2c <USBD_LL_DataOutStage+0x15c>
 8006be0:	7dbb      	ldrb	r3, [r7, #22]
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d122      	bne.n	8006c2c <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006bec:	b2db      	uxtb	r3, r3
 8006bee:	2b03      	cmp	r3, #3
 8006bf0:	d117      	bne.n	8006c22 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8006bf2:	7dba      	ldrb	r2, [r7, #22]
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	32ae      	adds	r2, #174	@ 0xae
 8006bf8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006bfc:	699b      	ldr	r3, [r3, #24]
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d00f      	beq.n	8006c22 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8006c02:	7dba      	ldrb	r2, [r7, #22]
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8006c0a:	7dba      	ldrb	r2, [r7, #22]
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	32ae      	adds	r2, #174	@ 0xae
 8006c10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c14:	699b      	ldr	r3, [r3, #24]
 8006c16:	7afa      	ldrb	r2, [r7, #11]
 8006c18:	4611      	mov	r1, r2
 8006c1a:	68f8      	ldr	r0, [r7, #12]
 8006c1c:	4798      	blx	r3
 8006c1e:	4603      	mov	r3, r0
 8006c20:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8006c22:	7dfb      	ldrb	r3, [r7, #23]
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d001      	beq.n	8006c2c <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8006c28:	7dfb      	ldrb	r3, [r7, #23]
 8006c2a:	e000      	b.n	8006c2e <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8006c2c:	2300      	movs	r3, #0
}
 8006c2e:	4618      	mov	r0, r3
 8006c30:	3718      	adds	r7, #24
 8006c32:	46bd      	mov	sp, r7
 8006c34:	bd80      	pop	{r7, pc}

08006c36 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006c36:	b580      	push	{r7, lr}
 8006c38:	b086      	sub	sp, #24
 8006c3a:	af00      	add	r7, sp, #0
 8006c3c:	60f8      	str	r0, [r7, #12]
 8006c3e:	460b      	mov	r3, r1
 8006c40:	607a      	str	r2, [r7, #4]
 8006c42:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8006c44:	7afb      	ldrb	r3, [r7, #11]
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d16f      	bne.n	8006d2a <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	3314      	adds	r3, #20
 8006c4e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8006c56:	2b02      	cmp	r3, #2
 8006c58:	d15a      	bne.n	8006d10 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8006c5a:	693b      	ldr	r3, [r7, #16]
 8006c5c:	689a      	ldr	r2, [r3, #8]
 8006c5e:	693b      	ldr	r3, [r7, #16]
 8006c60:	68db      	ldr	r3, [r3, #12]
 8006c62:	429a      	cmp	r2, r3
 8006c64:	d914      	bls.n	8006c90 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8006c66:	693b      	ldr	r3, [r7, #16]
 8006c68:	689a      	ldr	r2, [r3, #8]
 8006c6a:	693b      	ldr	r3, [r7, #16]
 8006c6c:	68db      	ldr	r3, [r3, #12]
 8006c6e:	1ad2      	subs	r2, r2, r3
 8006c70:	693b      	ldr	r3, [r7, #16]
 8006c72:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8006c74:	693b      	ldr	r3, [r7, #16]
 8006c76:	689b      	ldr	r3, [r3, #8]
 8006c78:	461a      	mov	r2, r3
 8006c7a:	6879      	ldr	r1, [r7, #4]
 8006c7c:	68f8      	ldr	r0, [r7, #12]
 8006c7e:	f001 f8bc 	bl	8007dfa <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006c82:	2300      	movs	r3, #0
 8006c84:	2200      	movs	r2, #0
 8006c86:	2100      	movs	r1, #0
 8006c88:	68f8      	ldr	r0, [r7, #12]
 8006c8a:	f002 f849 	bl	8008d20 <USBD_LL_PrepareReceive>
 8006c8e:	e03f      	b.n	8006d10 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8006c90:	693b      	ldr	r3, [r7, #16]
 8006c92:	68da      	ldr	r2, [r3, #12]
 8006c94:	693b      	ldr	r3, [r7, #16]
 8006c96:	689b      	ldr	r3, [r3, #8]
 8006c98:	429a      	cmp	r2, r3
 8006c9a:	d11c      	bne.n	8006cd6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8006c9c:	693b      	ldr	r3, [r7, #16]
 8006c9e:	685a      	ldr	r2, [r3, #4]
 8006ca0:	693b      	ldr	r3, [r7, #16]
 8006ca2:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8006ca4:	429a      	cmp	r2, r3
 8006ca6:	d316      	bcc.n	8006cd6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8006ca8:	693b      	ldr	r3, [r7, #16]
 8006caa:	685a      	ldr	r2, [r3, #4]
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006cb2:	429a      	cmp	r2, r3
 8006cb4:	d20f      	bcs.n	8006cd6 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006cb6:	2200      	movs	r2, #0
 8006cb8:	2100      	movs	r1, #0
 8006cba:	68f8      	ldr	r0, [r7, #12]
 8006cbc:	f001 f89d 	bl	8007dfa <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	2200      	movs	r2, #0
 8006cc4:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006cc8:	2300      	movs	r3, #0
 8006cca:	2200      	movs	r2, #0
 8006ccc:	2100      	movs	r1, #0
 8006cce:	68f8      	ldr	r0, [r7, #12]
 8006cd0:	f002 f826 	bl	8008d20 <USBD_LL_PrepareReceive>
 8006cd4:	e01c      	b.n	8006d10 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006cdc:	b2db      	uxtb	r3, r3
 8006cde:	2b03      	cmp	r3, #3
 8006ce0:	d10f      	bne.n	8006d02 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006ce8:	68db      	ldr	r3, [r3, #12]
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d009      	beq.n	8006d02 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	2200      	movs	r2, #0
 8006cf2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006cfc:	68db      	ldr	r3, [r3, #12]
 8006cfe:	68f8      	ldr	r0, [r7, #12]
 8006d00:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8006d02:	2180      	movs	r1, #128	@ 0x80
 8006d04:	68f8      	ldr	r0, [r7, #12]
 8006d06:	f001 ff61 	bl	8008bcc <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8006d0a:	68f8      	ldr	r0, [r7, #12]
 8006d0c:	f001 f8c7 	bl	8007e9e <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d03a      	beq.n	8006d90 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8006d1a:	68f8      	ldr	r0, [r7, #12]
 8006d1c:	f7ff fe42 	bl	80069a4 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	2200      	movs	r2, #0
 8006d24:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8006d28:	e032      	b.n	8006d90 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8006d2a:	7afb      	ldrb	r3, [r7, #11]
 8006d2c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8006d30:	b2db      	uxtb	r3, r3
 8006d32:	4619      	mov	r1, r3
 8006d34:	68f8      	ldr	r0, [r7, #12]
 8006d36:	f000 f985 	bl	8007044 <USBD_CoreFindEP>
 8006d3a:	4603      	mov	r3, r0
 8006d3c:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006d3e:	7dfb      	ldrb	r3, [r7, #23]
 8006d40:	2bff      	cmp	r3, #255	@ 0xff
 8006d42:	d025      	beq.n	8006d90 <USBD_LL_DataInStage+0x15a>
 8006d44:	7dfb      	ldrb	r3, [r7, #23]
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d122      	bne.n	8006d90 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006d50:	b2db      	uxtb	r3, r3
 8006d52:	2b03      	cmp	r3, #3
 8006d54:	d11c      	bne.n	8006d90 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8006d56:	7dfa      	ldrb	r2, [r7, #23]
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	32ae      	adds	r2, #174	@ 0xae
 8006d5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d60:	695b      	ldr	r3, [r3, #20]
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d014      	beq.n	8006d90 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8006d66:	7dfa      	ldrb	r2, [r7, #23]
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8006d6e:	7dfa      	ldrb	r2, [r7, #23]
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	32ae      	adds	r2, #174	@ 0xae
 8006d74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d78:	695b      	ldr	r3, [r3, #20]
 8006d7a:	7afa      	ldrb	r2, [r7, #11]
 8006d7c:	4611      	mov	r1, r2
 8006d7e:	68f8      	ldr	r0, [r7, #12]
 8006d80:	4798      	blx	r3
 8006d82:	4603      	mov	r3, r0
 8006d84:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8006d86:	7dbb      	ldrb	r3, [r7, #22]
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d001      	beq.n	8006d90 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8006d8c:	7dbb      	ldrb	r3, [r7, #22]
 8006d8e:	e000      	b.n	8006d92 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8006d90:	2300      	movs	r3, #0
}
 8006d92:	4618      	mov	r0, r3
 8006d94:	3718      	adds	r7, #24
 8006d96:	46bd      	mov	sp, r7
 8006d98:	bd80      	pop	{r7, pc}

08006d9a <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006d9a:	b580      	push	{r7, lr}
 8006d9c:	b084      	sub	sp, #16
 8006d9e:	af00      	add	r7, sp, #0
 8006da0:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8006da2:	2300      	movs	r3, #0
 8006da4:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	2201      	movs	r2, #1
 8006daa:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	2200      	movs	r2, #0
 8006db2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	2200      	movs	r2, #0
 8006dba:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	2200      	movs	r2, #0
 8006dc0:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	2200      	movs	r2, #0
 8006dc8:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d014      	beq.n	8006e00 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006ddc:	685b      	ldr	r3, [r3, #4]
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d00e      	beq.n	8006e00 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006de8:	685b      	ldr	r3, [r3, #4]
 8006dea:	687a      	ldr	r2, [r7, #4]
 8006dec:	6852      	ldr	r2, [r2, #4]
 8006dee:	b2d2      	uxtb	r2, r2
 8006df0:	4611      	mov	r1, r2
 8006df2:	6878      	ldr	r0, [r7, #4]
 8006df4:	4798      	blx	r3
 8006df6:	4603      	mov	r3, r0
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d001      	beq.n	8006e00 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8006dfc:	2303      	movs	r3, #3
 8006dfe:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006e00:	2340      	movs	r3, #64	@ 0x40
 8006e02:	2200      	movs	r2, #0
 8006e04:	2100      	movs	r1, #0
 8006e06:	6878      	ldr	r0, [r7, #4]
 8006e08:	f001 fe9b 	bl	8008b42 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	2201      	movs	r2, #1
 8006e10:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	2240      	movs	r2, #64	@ 0x40
 8006e18:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006e1c:	2340      	movs	r3, #64	@ 0x40
 8006e1e:	2200      	movs	r2, #0
 8006e20:	2180      	movs	r1, #128	@ 0x80
 8006e22:	6878      	ldr	r0, [r7, #4]
 8006e24:	f001 fe8d 	bl	8008b42 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	2201      	movs	r2, #1
 8006e2c:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	2240      	movs	r2, #64	@ 0x40
 8006e32:	621a      	str	r2, [r3, #32]

  return ret;
 8006e34:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e36:	4618      	mov	r0, r3
 8006e38:	3710      	adds	r7, #16
 8006e3a:	46bd      	mov	sp, r7
 8006e3c:	bd80      	pop	{r7, pc}

08006e3e <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006e3e:	b480      	push	{r7}
 8006e40:	b083      	sub	sp, #12
 8006e42:	af00      	add	r7, sp, #0
 8006e44:	6078      	str	r0, [r7, #4]
 8006e46:	460b      	mov	r3, r1
 8006e48:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	78fa      	ldrb	r2, [r7, #3]
 8006e4e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006e50:	2300      	movs	r3, #0
}
 8006e52:	4618      	mov	r0, r3
 8006e54:	370c      	adds	r7, #12
 8006e56:	46bd      	mov	sp, r7
 8006e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e5c:	4770      	bx	lr

08006e5e <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006e5e:	b480      	push	{r7}
 8006e60:	b083      	sub	sp, #12
 8006e62:	af00      	add	r7, sp, #0
 8006e64:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006e6c:	b2db      	uxtb	r3, r3
 8006e6e:	2b04      	cmp	r3, #4
 8006e70:	d006      	beq.n	8006e80 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006e78:	b2da      	uxtb	r2, r3
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	2204      	movs	r2, #4
 8006e84:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8006e88:	2300      	movs	r3, #0
}
 8006e8a:	4618      	mov	r0, r3
 8006e8c:	370c      	adds	r7, #12
 8006e8e:	46bd      	mov	sp, r7
 8006e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e94:	4770      	bx	lr

08006e96 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006e96:	b480      	push	{r7}
 8006e98:	b083      	sub	sp, #12
 8006e9a:	af00      	add	r7, sp, #0
 8006e9c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006ea4:	b2db      	uxtb	r3, r3
 8006ea6:	2b04      	cmp	r3, #4
 8006ea8:	d106      	bne.n	8006eb8 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8006eb0:	b2da      	uxtb	r2, r3
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8006eb8:	2300      	movs	r3, #0
}
 8006eba:	4618      	mov	r0, r3
 8006ebc:	370c      	adds	r7, #12
 8006ebe:	46bd      	mov	sp, r7
 8006ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec4:	4770      	bx	lr

08006ec6 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006ec6:	b580      	push	{r7, lr}
 8006ec8:	b082      	sub	sp, #8
 8006eca:	af00      	add	r7, sp, #0
 8006ecc:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006ed4:	b2db      	uxtb	r3, r3
 8006ed6:	2b03      	cmp	r3, #3
 8006ed8:	d110      	bne.n	8006efc <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d00b      	beq.n	8006efc <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006eea:	69db      	ldr	r3, [r3, #28]
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d005      	beq.n	8006efc <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006ef6:	69db      	ldr	r3, [r3, #28]
 8006ef8:	6878      	ldr	r0, [r7, #4]
 8006efa:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8006efc:	2300      	movs	r3, #0
}
 8006efe:	4618      	mov	r0, r3
 8006f00:	3708      	adds	r7, #8
 8006f02:	46bd      	mov	sp, r7
 8006f04:	bd80      	pop	{r7, pc}

08006f06 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8006f06:	b580      	push	{r7, lr}
 8006f08:	b082      	sub	sp, #8
 8006f0a:	af00      	add	r7, sp, #0
 8006f0c:	6078      	str	r0, [r7, #4]
 8006f0e:	460b      	mov	r3, r1
 8006f10:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	32ae      	adds	r2, #174	@ 0xae
 8006f1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d101      	bne.n	8006f28 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8006f24:	2303      	movs	r3, #3
 8006f26:	e01c      	b.n	8006f62 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006f2e:	b2db      	uxtb	r3, r3
 8006f30:	2b03      	cmp	r3, #3
 8006f32:	d115      	bne.n	8006f60 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	32ae      	adds	r2, #174	@ 0xae
 8006f3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f42:	6a1b      	ldr	r3, [r3, #32]
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d00b      	beq.n	8006f60 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	32ae      	adds	r2, #174	@ 0xae
 8006f52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f56:	6a1b      	ldr	r3, [r3, #32]
 8006f58:	78fa      	ldrb	r2, [r7, #3]
 8006f5a:	4611      	mov	r1, r2
 8006f5c:	6878      	ldr	r0, [r7, #4]
 8006f5e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006f60:	2300      	movs	r3, #0
}
 8006f62:	4618      	mov	r0, r3
 8006f64:	3708      	adds	r7, #8
 8006f66:	46bd      	mov	sp, r7
 8006f68:	bd80      	pop	{r7, pc}

08006f6a <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8006f6a:	b580      	push	{r7, lr}
 8006f6c:	b082      	sub	sp, #8
 8006f6e:	af00      	add	r7, sp, #0
 8006f70:	6078      	str	r0, [r7, #4]
 8006f72:	460b      	mov	r3, r1
 8006f74:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	32ae      	adds	r2, #174	@ 0xae
 8006f80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d101      	bne.n	8006f8c <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8006f88:	2303      	movs	r3, #3
 8006f8a:	e01c      	b.n	8006fc6 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006f92:	b2db      	uxtb	r3, r3
 8006f94:	2b03      	cmp	r3, #3
 8006f96:	d115      	bne.n	8006fc4 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	32ae      	adds	r2, #174	@ 0xae
 8006fa2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006fa6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d00b      	beq.n	8006fc4 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	32ae      	adds	r2, #174	@ 0xae
 8006fb6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006fba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006fbc:	78fa      	ldrb	r2, [r7, #3]
 8006fbe:	4611      	mov	r1, r2
 8006fc0:	6878      	ldr	r0, [r7, #4]
 8006fc2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006fc4:	2300      	movs	r3, #0
}
 8006fc6:	4618      	mov	r0, r3
 8006fc8:	3708      	adds	r7, #8
 8006fca:	46bd      	mov	sp, r7
 8006fcc:	bd80      	pop	{r7, pc}

08006fce <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8006fce:	b480      	push	{r7}
 8006fd0:	b083      	sub	sp, #12
 8006fd2:	af00      	add	r7, sp, #0
 8006fd4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006fd6:	2300      	movs	r3, #0
}
 8006fd8:	4618      	mov	r0, r3
 8006fda:	370c      	adds	r7, #12
 8006fdc:	46bd      	mov	sp, r7
 8006fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe2:	4770      	bx	lr

08006fe4 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8006fe4:	b580      	push	{r7, lr}
 8006fe6:	b084      	sub	sp, #16
 8006fe8:	af00      	add	r7, sp, #0
 8006fea:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8006fec:	2300      	movs	r3, #0
 8006fee:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	2201      	movs	r2, #1
 8006ff4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d00e      	beq.n	8007020 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007008:	685b      	ldr	r3, [r3, #4]
 800700a:	687a      	ldr	r2, [r7, #4]
 800700c:	6852      	ldr	r2, [r2, #4]
 800700e:	b2d2      	uxtb	r2, r2
 8007010:	4611      	mov	r1, r2
 8007012:	6878      	ldr	r0, [r7, #4]
 8007014:	4798      	blx	r3
 8007016:	4603      	mov	r3, r0
 8007018:	2b00      	cmp	r3, #0
 800701a:	d001      	beq.n	8007020 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800701c:	2303      	movs	r3, #3
 800701e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007020:	7bfb      	ldrb	r3, [r7, #15]
}
 8007022:	4618      	mov	r0, r3
 8007024:	3710      	adds	r7, #16
 8007026:	46bd      	mov	sp, r7
 8007028:	bd80      	pop	{r7, pc}

0800702a <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800702a:	b480      	push	{r7}
 800702c:	b083      	sub	sp, #12
 800702e:	af00      	add	r7, sp, #0
 8007030:	6078      	str	r0, [r7, #4]
 8007032:	460b      	mov	r3, r1
 8007034:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007036:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007038:	4618      	mov	r0, r3
 800703a:	370c      	adds	r7, #12
 800703c:	46bd      	mov	sp, r7
 800703e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007042:	4770      	bx	lr

08007044 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007044:	b480      	push	{r7}
 8007046:	b083      	sub	sp, #12
 8007048:	af00      	add	r7, sp, #0
 800704a:	6078      	str	r0, [r7, #4]
 800704c:	460b      	mov	r3, r1
 800704e:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007050:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007052:	4618      	mov	r0, r3
 8007054:	370c      	adds	r7, #12
 8007056:	46bd      	mov	sp, r7
 8007058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800705c:	4770      	bx	lr

0800705e <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800705e:	b580      	push	{r7, lr}
 8007060:	b086      	sub	sp, #24
 8007062:	af00      	add	r7, sp, #0
 8007064:	6078      	str	r0, [r7, #4]
 8007066:	460b      	mov	r3, r1
 8007068:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8007072:	2300      	movs	r3, #0
 8007074:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	885b      	ldrh	r3, [r3, #2]
 800707a:	b29b      	uxth	r3, r3
 800707c:	68fa      	ldr	r2, [r7, #12]
 800707e:	7812      	ldrb	r2, [r2, #0]
 8007080:	4293      	cmp	r3, r2
 8007082:	d91f      	bls.n	80070c4 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	781b      	ldrb	r3, [r3, #0]
 8007088:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800708a:	e013      	b.n	80070b4 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800708c:	f107 030a 	add.w	r3, r7, #10
 8007090:	4619      	mov	r1, r3
 8007092:	6978      	ldr	r0, [r7, #20]
 8007094:	f000 f81b 	bl	80070ce <USBD_GetNextDesc>
 8007098:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800709a:	697b      	ldr	r3, [r7, #20]
 800709c:	785b      	ldrb	r3, [r3, #1]
 800709e:	2b05      	cmp	r3, #5
 80070a0:	d108      	bne.n	80070b4 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 80070a2:	697b      	ldr	r3, [r7, #20]
 80070a4:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 80070a6:	693b      	ldr	r3, [r7, #16]
 80070a8:	789b      	ldrb	r3, [r3, #2]
 80070aa:	78fa      	ldrb	r2, [r7, #3]
 80070ac:	429a      	cmp	r2, r3
 80070ae:	d008      	beq.n	80070c2 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 80070b0:	2300      	movs	r3, #0
 80070b2:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	885b      	ldrh	r3, [r3, #2]
 80070b8:	b29a      	uxth	r2, r3
 80070ba:	897b      	ldrh	r3, [r7, #10]
 80070bc:	429a      	cmp	r2, r3
 80070be:	d8e5      	bhi.n	800708c <USBD_GetEpDesc+0x2e>
 80070c0:	e000      	b.n	80070c4 <USBD_GetEpDesc+0x66>
          break;
 80070c2:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 80070c4:	693b      	ldr	r3, [r7, #16]
}
 80070c6:	4618      	mov	r0, r3
 80070c8:	3718      	adds	r7, #24
 80070ca:	46bd      	mov	sp, r7
 80070cc:	bd80      	pop	{r7, pc}

080070ce <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80070ce:	b480      	push	{r7}
 80070d0:	b085      	sub	sp, #20
 80070d2:	af00      	add	r7, sp, #0
 80070d4:	6078      	str	r0, [r7, #4]
 80070d6:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 80070dc:	683b      	ldr	r3, [r7, #0]
 80070de:	881b      	ldrh	r3, [r3, #0]
 80070e0:	68fa      	ldr	r2, [r7, #12]
 80070e2:	7812      	ldrb	r2, [r2, #0]
 80070e4:	4413      	add	r3, r2
 80070e6:	b29a      	uxth	r2, r3
 80070e8:	683b      	ldr	r3, [r7, #0]
 80070ea:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	781b      	ldrb	r3, [r3, #0]
 80070f0:	461a      	mov	r2, r3
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	4413      	add	r3, r2
 80070f6:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80070f8:	68fb      	ldr	r3, [r7, #12]
}
 80070fa:	4618      	mov	r0, r3
 80070fc:	3714      	adds	r7, #20
 80070fe:	46bd      	mov	sp, r7
 8007100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007104:	4770      	bx	lr

08007106 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8007106:	b480      	push	{r7}
 8007108:	b087      	sub	sp, #28
 800710a:	af00      	add	r7, sp, #0
 800710c:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8007112:	697b      	ldr	r3, [r7, #20]
 8007114:	781b      	ldrb	r3, [r3, #0]
 8007116:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8007118:	697b      	ldr	r3, [r7, #20]
 800711a:	3301      	adds	r3, #1
 800711c:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800711e:	697b      	ldr	r3, [r7, #20]
 8007120:	781b      	ldrb	r3, [r3, #0]
 8007122:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8007124:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8007128:	021b      	lsls	r3, r3, #8
 800712a:	b21a      	sxth	r2, r3
 800712c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007130:	4313      	orrs	r3, r2
 8007132:	b21b      	sxth	r3, r3
 8007134:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8007136:	89fb      	ldrh	r3, [r7, #14]
}
 8007138:	4618      	mov	r0, r3
 800713a:	371c      	adds	r7, #28
 800713c:	46bd      	mov	sp, r7
 800713e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007142:	4770      	bx	lr

08007144 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007144:	b580      	push	{r7, lr}
 8007146:	b084      	sub	sp, #16
 8007148:	af00      	add	r7, sp, #0
 800714a:	6078      	str	r0, [r7, #4]
 800714c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800714e:	2300      	movs	r3, #0
 8007150:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007152:	683b      	ldr	r3, [r7, #0]
 8007154:	781b      	ldrb	r3, [r3, #0]
 8007156:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800715a:	2b40      	cmp	r3, #64	@ 0x40
 800715c:	d005      	beq.n	800716a <USBD_StdDevReq+0x26>
 800715e:	2b40      	cmp	r3, #64	@ 0x40
 8007160:	d857      	bhi.n	8007212 <USBD_StdDevReq+0xce>
 8007162:	2b00      	cmp	r3, #0
 8007164:	d00f      	beq.n	8007186 <USBD_StdDevReq+0x42>
 8007166:	2b20      	cmp	r3, #32
 8007168:	d153      	bne.n	8007212 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	32ae      	adds	r2, #174	@ 0xae
 8007174:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007178:	689b      	ldr	r3, [r3, #8]
 800717a:	6839      	ldr	r1, [r7, #0]
 800717c:	6878      	ldr	r0, [r7, #4]
 800717e:	4798      	blx	r3
 8007180:	4603      	mov	r3, r0
 8007182:	73fb      	strb	r3, [r7, #15]
      break;
 8007184:	e04a      	b.n	800721c <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007186:	683b      	ldr	r3, [r7, #0]
 8007188:	785b      	ldrb	r3, [r3, #1]
 800718a:	2b09      	cmp	r3, #9
 800718c:	d83b      	bhi.n	8007206 <USBD_StdDevReq+0xc2>
 800718e:	a201      	add	r2, pc, #4	@ (adr r2, 8007194 <USBD_StdDevReq+0x50>)
 8007190:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007194:	080071e9 	.word	0x080071e9
 8007198:	080071fd 	.word	0x080071fd
 800719c:	08007207 	.word	0x08007207
 80071a0:	080071f3 	.word	0x080071f3
 80071a4:	08007207 	.word	0x08007207
 80071a8:	080071c7 	.word	0x080071c7
 80071ac:	080071bd 	.word	0x080071bd
 80071b0:	08007207 	.word	0x08007207
 80071b4:	080071df 	.word	0x080071df
 80071b8:	080071d1 	.word	0x080071d1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80071bc:	6839      	ldr	r1, [r7, #0]
 80071be:	6878      	ldr	r0, [r7, #4]
 80071c0:	f000 fa3c 	bl	800763c <USBD_GetDescriptor>
          break;
 80071c4:	e024      	b.n	8007210 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80071c6:	6839      	ldr	r1, [r7, #0]
 80071c8:	6878      	ldr	r0, [r7, #4]
 80071ca:	f000 fba1 	bl	8007910 <USBD_SetAddress>
          break;
 80071ce:	e01f      	b.n	8007210 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80071d0:	6839      	ldr	r1, [r7, #0]
 80071d2:	6878      	ldr	r0, [r7, #4]
 80071d4:	f000 fbe0 	bl	8007998 <USBD_SetConfig>
 80071d8:	4603      	mov	r3, r0
 80071da:	73fb      	strb	r3, [r7, #15]
          break;
 80071dc:	e018      	b.n	8007210 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80071de:	6839      	ldr	r1, [r7, #0]
 80071e0:	6878      	ldr	r0, [r7, #4]
 80071e2:	f000 fc83 	bl	8007aec <USBD_GetConfig>
          break;
 80071e6:	e013      	b.n	8007210 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80071e8:	6839      	ldr	r1, [r7, #0]
 80071ea:	6878      	ldr	r0, [r7, #4]
 80071ec:	f000 fcb4 	bl	8007b58 <USBD_GetStatus>
          break;
 80071f0:	e00e      	b.n	8007210 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80071f2:	6839      	ldr	r1, [r7, #0]
 80071f4:	6878      	ldr	r0, [r7, #4]
 80071f6:	f000 fce3 	bl	8007bc0 <USBD_SetFeature>
          break;
 80071fa:	e009      	b.n	8007210 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80071fc:	6839      	ldr	r1, [r7, #0]
 80071fe:	6878      	ldr	r0, [r7, #4]
 8007200:	f000 fd07 	bl	8007c12 <USBD_ClrFeature>
          break;
 8007204:	e004      	b.n	8007210 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8007206:	6839      	ldr	r1, [r7, #0]
 8007208:	6878      	ldr	r0, [r7, #4]
 800720a:	f000 fd5e 	bl	8007cca <USBD_CtlError>
          break;
 800720e:	bf00      	nop
      }
      break;
 8007210:	e004      	b.n	800721c <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8007212:	6839      	ldr	r1, [r7, #0]
 8007214:	6878      	ldr	r0, [r7, #4]
 8007216:	f000 fd58 	bl	8007cca <USBD_CtlError>
      break;
 800721a:	bf00      	nop
  }

  return ret;
 800721c:	7bfb      	ldrb	r3, [r7, #15]
}
 800721e:	4618      	mov	r0, r3
 8007220:	3710      	adds	r7, #16
 8007222:	46bd      	mov	sp, r7
 8007224:	bd80      	pop	{r7, pc}
 8007226:	bf00      	nop

08007228 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007228:	b580      	push	{r7, lr}
 800722a:	b084      	sub	sp, #16
 800722c:	af00      	add	r7, sp, #0
 800722e:	6078      	str	r0, [r7, #4]
 8007230:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007232:	2300      	movs	r3, #0
 8007234:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007236:	683b      	ldr	r3, [r7, #0]
 8007238:	781b      	ldrb	r3, [r3, #0]
 800723a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800723e:	2b40      	cmp	r3, #64	@ 0x40
 8007240:	d005      	beq.n	800724e <USBD_StdItfReq+0x26>
 8007242:	2b40      	cmp	r3, #64	@ 0x40
 8007244:	d852      	bhi.n	80072ec <USBD_StdItfReq+0xc4>
 8007246:	2b00      	cmp	r3, #0
 8007248:	d001      	beq.n	800724e <USBD_StdItfReq+0x26>
 800724a:	2b20      	cmp	r3, #32
 800724c:	d14e      	bne.n	80072ec <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007254:	b2db      	uxtb	r3, r3
 8007256:	3b01      	subs	r3, #1
 8007258:	2b02      	cmp	r3, #2
 800725a:	d840      	bhi.n	80072de <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800725c:	683b      	ldr	r3, [r7, #0]
 800725e:	889b      	ldrh	r3, [r3, #4]
 8007260:	b2db      	uxtb	r3, r3
 8007262:	2b01      	cmp	r3, #1
 8007264:	d836      	bhi.n	80072d4 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8007266:	683b      	ldr	r3, [r7, #0]
 8007268:	889b      	ldrh	r3, [r3, #4]
 800726a:	b2db      	uxtb	r3, r3
 800726c:	4619      	mov	r1, r3
 800726e:	6878      	ldr	r0, [r7, #4]
 8007270:	f7ff fedb 	bl	800702a <USBD_CoreFindIF>
 8007274:	4603      	mov	r3, r0
 8007276:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007278:	7bbb      	ldrb	r3, [r7, #14]
 800727a:	2bff      	cmp	r3, #255	@ 0xff
 800727c:	d01d      	beq.n	80072ba <USBD_StdItfReq+0x92>
 800727e:	7bbb      	ldrb	r3, [r7, #14]
 8007280:	2b00      	cmp	r3, #0
 8007282:	d11a      	bne.n	80072ba <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8007284:	7bba      	ldrb	r2, [r7, #14]
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	32ae      	adds	r2, #174	@ 0xae
 800728a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800728e:	689b      	ldr	r3, [r3, #8]
 8007290:	2b00      	cmp	r3, #0
 8007292:	d00f      	beq.n	80072b4 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8007294:	7bba      	ldrb	r2, [r7, #14]
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800729c:	7bba      	ldrb	r2, [r7, #14]
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	32ae      	adds	r2, #174	@ 0xae
 80072a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80072a6:	689b      	ldr	r3, [r3, #8]
 80072a8:	6839      	ldr	r1, [r7, #0]
 80072aa:	6878      	ldr	r0, [r7, #4]
 80072ac:	4798      	blx	r3
 80072ae:	4603      	mov	r3, r0
 80072b0:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80072b2:	e004      	b.n	80072be <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 80072b4:	2303      	movs	r3, #3
 80072b6:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80072b8:	e001      	b.n	80072be <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 80072ba:	2303      	movs	r3, #3
 80072bc:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80072be:	683b      	ldr	r3, [r7, #0]
 80072c0:	88db      	ldrh	r3, [r3, #6]
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d110      	bne.n	80072e8 <USBD_StdItfReq+0xc0>
 80072c6:	7bfb      	ldrb	r3, [r7, #15]
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d10d      	bne.n	80072e8 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 80072cc:	6878      	ldr	r0, [r7, #4]
 80072ce:	f000 fdd3 	bl	8007e78 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80072d2:	e009      	b.n	80072e8 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 80072d4:	6839      	ldr	r1, [r7, #0]
 80072d6:	6878      	ldr	r0, [r7, #4]
 80072d8:	f000 fcf7 	bl	8007cca <USBD_CtlError>
          break;
 80072dc:	e004      	b.n	80072e8 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80072de:	6839      	ldr	r1, [r7, #0]
 80072e0:	6878      	ldr	r0, [r7, #4]
 80072e2:	f000 fcf2 	bl	8007cca <USBD_CtlError>
          break;
 80072e6:	e000      	b.n	80072ea <USBD_StdItfReq+0xc2>
          break;
 80072e8:	bf00      	nop
      }
      break;
 80072ea:	e004      	b.n	80072f6 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 80072ec:	6839      	ldr	r1, [r7, #0]
 80072ee:	6878      	ldr	r0, [r7, #4]
 80072f0:	f000 fceb 	bl	8007cca <USBD_CtlError>
      break;
 80072f4:	bf00      	nop
  }

  return ret;
 80072f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80072f8:	4618      	mov	r0, r3
 80072fa:	3710      	adds	r7, #16
 80072fc:	46bd      	mov	sp, r7
 80072fe:	bd80      	pop	{r7, pc}

08007300 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007300:	b580      	push	{r7, lr}
 8007302:	b084      	sub	sp, #16
 8007304:	af00      	add	r7, sp, #0
 8007306:	6078      	str	r0, [r7, #4]
 8007308:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800730a:	2300      	movs	r3, #0
 800730c:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800730e:	683b      	ldr	r3, [r7, #0]
 8007310:	889b      	ldrh	r3, [r3, #4]
 8007312:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007314:	683b      	ldr	r3, [r7, #0]
 8007316:	781b      	ldrb	r3, [r3, #0]
 8007318:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800731c:	2b40      	cmp	r3, #64	@ 0x40
 800731e:	d007      	beq.n	8007330 <USBD_StdEPReq+0x30>
 8007320:	2b40      	cmp	r3, #64	@ 0x40
 8007322:	f200 817f 	bhi.w	8007624 <USBD_StdEPReq+0x324>
 8007326:	2b00      	cmp	r3, #0
 8007328:	d02a      	beq.n	8007380 <USBD_StdEPReq+0x80>
 800732a:	2b20      	cmp	r3, #32
 800732c:	f040 817a 	bne.w	8007624 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8007330:	7bbb      	ldrb	r3, [r7, #14]
 8007332:	4619      	mov	r1, r3
 8007334:	6878      	ldr	r0, [r7, #4]
 8007336:	f7ff fe85 	bl	8007044 <USBD_CoreFindEP>
 800733a:	4603      	mov	r3, r0
 800733c:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800733e:	7b7b      	ldrb	r3, [r7, #13]
 8007340:	2bff      	cmp	r3, #255	@ 0xff
 8007342:	f000 8174 	beq.w	800762e <USBD_StdEPReq+0x32e>
 8007346:	7b7b      	ldrb	r3, [r7, #13]
 8007348:	2b00      	cmp	r3, #0
 800734a:	f040 8170 	bne.w	800762e <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800734e:	7b7a      	ldrb	r2, [r7, #13]
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8007356:	7b7a      	ldrb	r2, [r7, #13]
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	32ae      	adds	r2, #174	@ 0xae
 800735c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007360:	689b      	ldr	r3, [r3, #8]
 8007362:	2b00      	cmp	r3, #0
 8007364:	f000 8163 	beq.w	800762e <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8007368:	7b7a      	ldrb	r2, [r7, #13]
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	32ae      	adds	r2, #174	@ 0xae
 800736e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007372:	689b      	ldr	r3, [r3, #8]
 8007374:	6839      	ldr	r1, [r7, #0]
 8007376:	6878      	ldr	r0, [r7, #4]
 8007378:	4798      	blx	r3
 800737a:	4603      	mov	r3, r0
 800737c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800737e:	e156      	b.n	800762e <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007380:	683b      	ldr	r3, [r7, #0]
 8007382:	785b      	ldrb	r3, [r3, #1]
 8007384:	2b03      	cmp	r3, #3
 8007386:	d008      	beq.n	800739a <USBD_StdEPReq+0x9a>
 8007388:	2b03      	cmp	r3, #3
 800738a:	f300 8145 	bgt.w	8007618 <USBD_StdEPReq+0x318>
 800738e:	2b00      	cmp	r3, #0
 8007390:	f000 809b 	beq.w	80074ca <USBD_StdEPReq+0x1ca>
 8007394:	2b01      	cmp	r3, #1
 8007396:	d03c      	beq.n	8007412 <USBD_StdEPReq+0x112>
 8007398:	e13e      	b.n	8007618 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80073a0:	b2db      	uxtb	r3, r3
 80073a2:	2b02      	cmp	r3, #2
 80073a4:	d002      	beq.n	80073ac <USBD_StdEPReq+0xac>
 80073a6:	2b03      	cmp	r3, #3
 80073a8:	d016      	beq.n	80073d8 <USBD_StdEPReq+0xd8>
 80073aa:	e02c      	b.n	8007406 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80073ac:	7bbb      	ldrb	r3, [r7, #14]
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d00d      	beq.n	80073ce <USBD_StdEPReq+0xce>
 80073b2:	7bbb      	ldrb	r3, [r7, #14]
 80073b4:	2b80      	cmp	r3, #128	@ 0x80
 80073b6:	d00a      	beq.n	80073ce <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80073b8:	7bbb      	ldrb	r3, [r7, #14]
 80073ba:	4619      	mov	r1, r3
 80073bc:	6878      	ldr	r0, [r7, #4]
 80073be:	f001 fc05 	bl	8008bcc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80073c2:	2180      	movs	r1, #128	@ 0x80
 80073c4:	6878      	ldr	r0, [r7, #4]
 80073c6:	f001 fc01 	bl	8008bcc <USBD_LL_StallEP>
 80073ca:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80073cc:	e020      	b.n	8007410 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 80073ce:	6839      	ldr	r1, [r7, #0]
 80073d0:	6878      	ldr	r0, [r7, #4]
 80073d2:	f000 fc7a 	bl	8007cca <USBD_CtlError>
              break;
 80073d6:	e01b      	b.n	8007410 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80073d8:	683b      	ldr	r3, [r7, #0]
 80073da:	885b      	ldrh	r3, [r3, #2]
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d10e      	bne.n	80073fe <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80073e0:	7bbb      	ldrb	r3, [r7, #14]
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d00b      	beq.n	80073fe <USBD_StdEPReq+0xfe>
 80073e6:	7bbb      	ldrb	r3, [r7, #14]
 80073e8:	2b80      	cmp	r3, #128	@ 0x80
 80073ea:	d008      	beq.n	80073fe <USBD_StdEPReq+0xfe>
 80073ec:	683b      	ldr	r3, [r7, #0]
 80073ee:	88db      	ldrh	r3, [r3, #6]
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d104      	bne.n	80073fe <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80073f4:	7bbb      	ldrb	r3, [r7, #14]
 80073f6:	4619      	mov	r1, r3
 80073f8:	6878      	ldr	r0, [r7, #4]
 80073fa:	f001 fbe7 	bl	8008bcc <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80073fe:	6878      	ldr	r0, [r7, #4]
 8007400:	f000 fd3a 	bl	8007e78 <USBD_CtlSendStatus>

              break;
 8007404:	e004      	b.n	8007410 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8007406:	6839      	ldr	r1, [r7, #0]
 8007408:	6878      	ldr	r0, [r7, #4]
 800740a:	f000 fc5e 	bl	8007cca <USBD_CtlError>
              break;
 800740e:	bf00      	nop
          }
          break;
 8007410:	e107      	b.n	8007622 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007418:	b2db      	uxtb	r3, r3
 800741a:	2b02      	cmp	r3, #2
 800741c:	d002      	beq.n	8007424 <USBD_StdEPReq+0x124>
 800741e:	2b03      	cmp	r3, #3
 8007420:	d016      	beq.n	8007450 <USBD_StdEPReq+0x150>
 8007422:	e04b      	b.n	80074bc <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007424:	7bbb      	ldrb	r3, [r7, #14]
 8007426:	2b00      	cmp	r3, #0
 8007428:	d00d      	beq.n	8007446 <USBD_StdEPReq+0x146>
 800742a:	7bbb      	ldrb	r3, [r7, #14]
 800742c:	2b80      	cmp	r3, #128	@ 0x80
 800742e:	d00a      	beq.n	8007446 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007430:	7bbb      	ldrb	r3, [r7, #14]
 8007432:	4619      	mov	r1, r3
 8007434:	6878      	ldr	r0, [r7, #4]
 8007436:	f001 fbc9 	bl	8008bcc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800743a:	2180      	movs	r1, #128	@ 0x80
 800743c:	6878      	ldr	r0, [r7, #4]
 800743e:	f001 fbc5 	bl	8008bcc <USBD_LL_StallEP>
 8007442:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007444:	e040      	b.n	80074c8 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8007446:	6839      	ldr	r1, [r7, #0]
 8007448:	6878      	ldr	r0, [r7, #4]
 800744a:	f000 fc3e 	bl	8007cca <USBD_CtlError>
              break;
 800744e:	e03b      	b.n	80074c8 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007450:	683b      	ldr	r3, [r7, #0]
 8007452:	885b      	ldrh	r3, [r3, #2]
 8007454:	2b00      	cmp	r3, #0
 8007456:	d136      	bne.n	80074c6 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007458:	7bbb      	ldrb	r3, [r7, #14]
 800745a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800745e:	2b00      	cmp	r3, #0
 8007460:	d004      	beq.n	800746c <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8007462:	7bbb      	ldrb	r3, [r7, #14]
 8007464:	4619      	mov	r1, r3
 8007466:	6878      	ldr	r0, [r7, #4]
 8007468:	f001 fbcf 	bl	8008c0a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800746c:	6878      	ldr	r0, [r7, #4]
 800746e:	f000 fd03 	bl	8007e78 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8007472:	7bbb      	ldrb	r3, [r7, #14]
 8007474:	4619      	mov	r1, r3
 8007476:	6878      	ldr	r0, [r7, #4]
 8007478:	f7ff fde4 	bl	8007044 <USBD_CoreFindEP>
 800747c:	4603      	mov	r3, r0
 800747e:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007480:	7b7b      	ldrb	r3, [r7, #13]
 8007482:	2bff      	cmp	r3, #255	@ 0xff
 8007484:	d01f      	beq.n	80074c6 <USBD_StdEPReq+0x1c6>
 8007486:	7b7b      	ldrb	r3, [r7, #13]
 8007488:	2b00      	cmp	r3, #0
 800748a:	d11c      	bne.n	80074c6 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800748c:	7b7a      	ldrb	r2, [r7, #13]
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8007494:	7b7a      	ldrb	r2, [r7, #13]
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	32ae      	adds	r2, #174	@ 0xae
 800749a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800749e:	689b      	ldr	r3, [r3, #8]
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d010      	beq.n	80074c6 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80074a4:	7b7a      	ldrb	r2, [r7, #13]
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	32ae      	adds	r2, #174	@ 0xae
 80074aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80074ae:	689b      	ldr	r3, [r3, #8]
 80074b0:	6839      	ldr	r1, [r7, #0]
 80074b2:	6878      	ldr	r0, [r7, #4]
 80074b4:	4798      	blx	r3
 80074b6:	4603      	mov	r3, r0
 80074b8:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 80074ba:	e004      	b.n	80074c6 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 80074bc:	6839      	ldr	r1, [r7, #0]
 80074be:	6878      	ldr	r0, [r7, #4]
 80074c0:	f000 fc03 	bl	8007cca <USBD_CtlError>
              break;
 80074c4:	e000      	b.n	80074c8 <USBD_StdEPReq+0x1c8>
              break;
 80074c6:	bf00      	nop
          }
          break;
 80074c8:	e0ab      	b.n	8007622 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80074d0:	b2db      	uxtb	r3, r3
 80074d2:	2b02      	cmp	r3, #2
 80074d4:	d002      	beq.n	80074dc <USBD_StdEPReq+0x1dc>
 80074d6:	2b03      	cmp	r3, #3
 80074d8:	d032      	beq.n	8007540 <USBD_StdEPReq+0x240>
 80074da:	e097      	b.n	800760c <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80074dc:	7bbb      	ldrb	r3, [r7, #14]
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d007      	beq.n	80074f2 <USBD_StdEPReq+0x1f2>
 80074e2:	7bbb      	ldrb	r3, [r7, #14]
 80074e4:	2b80      	cmp	r3, #128	@ 0x80
 80074e6:	d004      	beq.n	80074f2 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 80074e8:	6839      	ldr	r1, [r7, #0]
 80074ea:	6878      	ldr	r0, [r7, #4]
 80074ec:	f000 fbed 	bl	8007cca <USBD_CtlError>
                break;
 80074f0:	e091      	b.n	8007616 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80074f2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	da0b      	bge.n	8007512 <USBD_StdEPReq+0x212>
 80074fa:	7bbb      	ldrb	r3, [r7, #14]
 80074fc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007500:	4613      	mov	r3, r2
 8007502:	009b      	lsls	r3, r3, #2
 8007504:	4413      	add	r3, r2
 8007506:	009b      	lsls	r3, r3, #2
 8007508:	3310      	adds	r3, #16
 800750a:	687a      	ldr	r2, [r7, #4]
 800750c:	4413      	add	r3, r2
 800750e:	3304      	adds	r3, #4
 8007510:	e00b      	b.n	800752a <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007512:	7bbb      	ldrb	r3, [r7, #14]
 8007514:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007518:	4613      	mov	r3, r2
 800751a:	009b      	lsls	r3, r3, #2
 800751c:	4413      	add	r3, r2
 800751e:	009b      	lsls	r3, r3, #2
 8007520:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8007524:	687a      	ldr	r2, [r7, #4]
 8007526:	4413      	add	r3, r2
 8007528:	3304      	adds	r3, #4
 800752a:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800752c:	68bb      	ldr	r3, [r7, #8]
 800752e:	2200      	movs	r2, #0
 8007530:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007532:	68bb      	ldr	r3, [r7, #8]
 8007534:	2202      	movs	r2, #2
 8007536:	4619      	mov	r1, r3
 8007538:	6878      	ldr	r0, [r7, #4]
 800753a:	f000 fc43 	bl	8007dc4 <USBD_CtlSendData>
              break;
 800753e:	e06a      	b.n	8007616 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007540:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007544:	2b00      	cmp	r3, #0
 8007546:	da11      	bge.n	800756c <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007548:	7bbb      	ldrb	r3, [r7, #14]
 800754a:	f003 020f 	and.w	r2, r3, #15
 800754e:	6879      	ldr	r1, [r7, #4]
 8007550:	4613      	mov	r3, r2
 8007552:	009b      	lsls	r3, r3, #2
 8007554:	4413      	add	r3, r2
 8007556:	009b      	lsls	r3, r3, #2
 8007558:	440b      	add	r3, r1
 800755a:	3324      	adds	r3, #36	@ 0x24
 800755c:	881b      	ldrh	r3, [r3, #0]
 800755e:	2b00      	cmp	r3, #0
 8007560:	d117      	bne.n	8007592 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8007562:	6839      	ldr	r1, [r7, #0]
 8007564:	6878      	ldr	r0, [r7, #4]
 8007566:	f000 fbb0 	bl	8007cca <USBD_CtlError>
                  break;
 800756a:	e054      	b.n	8007616 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800756c:	7bbb      	ldrb	r3, [r7, #14]
 800756e:	f003 020f 	and.w	r2, r3, #15
 8007572:	6879      	ldr	r1, [r7, #4]
 8007574:	4613      	mov	r3, r2
 8007576:	009b      	lsls	r3, r3, #2
 8007578:	4413      	add	r3, r2
 800757a:	009b      	lsls	r3, r3, #2
 800757c:	440b      	add	r3, r1
 800757e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8007582:	881b      	ldrh	r3, [r3, #0]
 8007584:	2b00      	cmp	r3, #0
 8007586:	d104      	bne.n	8007592 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8007588:	6839      	ldr	r1, [r7, #0]
 800758a:	6878      	ldr	r0, [r7, #4]
 800758c:	f000 fb9d 	bl	8007cca <USBD_CtlError>
                  break;
 8007590:	e041      	b.n	8007616 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007592:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007596:	2b00      	cmp	r3, #0
 8007598:	da0b      	bge.n	80075b2 <USBD_StdEPReq+0x2b2>
 800759a:	7bbb      	ldrb	r3, [r7, #14]
 800759c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80075a0:	4613      	mov	r3, r2
 80075a2:	009b      	lsls	r3, r3, #2
 80075a4:	4413      	add	r3, r2
 80075a6:	009b      	lsls	r3, r3, #2
 80075a8:	3310      	adds	r3, #16
 80075aa:	687a      	ldr	r2, [r7, #4]
 80075ac:	4413      	add	r3, r2
 80075ae:	3304      	adds	r3, #4
 80075b0:	e00b      	b.n	80075ca <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80075b2:	7bbb      	ldrb	r3, [r7, #14]
 80075b4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80075b8:	4613      	mov	r3, r2
 80075ba:	009b      	lsls	r3, r3, #2
 80075bc:	4413      	add	r3, r2
 80075be:	009b      	lsls	r3, r3, #2
 80075c0:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80075c4:	687a      	ldr	r2, [r7, #4]
 80075c6:	4413      	add	r3, r2
 80075c8:	3304      	adds	r3, #4
 80075ca:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80075cc:	7bbb      	ldrb	r3, [r7, #14]
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d002      	beq.n	80075d8 <USBD_StdEPReq+0x2d8>
 80075d2:	7bbb      	ldrb	r3, [r7, #14]
 80075d4:	2b80      	cmp	r3, #128	@ 0x80
 80075d6:	d103      	bne.n	80075e0 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 80075d8:	68bb      	ldr	r3, [r7, #8]
 80075da:	2200      	movs	r2, #0
 80075dc:	601a      	str	r2, [r3, #0]
 80075de:	e00e      	b.n	80075fe <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80075e0:	7bbb      	ldrb	r3, [r7, #14]
 80075e2:	4619      	mov	r1, r3
 80075e4:	6878      	ldr	r0, [r7, #4]
 80075e6:	f001 fb2f 	bl	8008c48 <USBD_LL_IsStallEP>
 80075ea:	4603      	mov	r3, r0
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d003      	beq.n	80075f8 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 80075f0:	68bb      	ldr	r3, [r7, #8]
 80075f2:	2201      	movs	r2, #1
 80075f4:	601a      	str	r2, [r3, #0]
 80075f6:	e002      	b.n	80075fe <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 80075f8:	68bb      	ldr	r3, [r7, #8]
 80075fa:	2200      	movs	r2, #0
 80075fc:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80075fe:	68bb      	ldr	r3, [r7, #8]
 8007600:	2202      	movs	r2, #2
 8007602:	4619      	mov	r1, r3
 8007604:	6878      	ldr	r0, [r7, #4]
 8007606:	f000 fbdd 	bl	8007dc4 <USBD_CtlSendData>
              break;
 800760a:	e004      	b.n	8007616 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800760c:	6839      	ldr	r1, [r7, #0]
 800760e:	6878      	ldr	r0, [r7, #4]
 8007610:	f000 fb5b 	bl	8007cca <USBD_CtlError>
              break;
 8007614:	bf00      	nop
          }
          break;
 8007616:	e004      	b.n	8007622 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8007618:	6839      	ldr	r1, [r7, #0]
 800761a:	6878      	ldr	r0, [r7, #4]
 800761c:	f000 fb55 	bl	8007cca <USBD_CtlError>
          break;
 8007620:	bf00      	nop
      }
      break;
 8007622:	e005      	b.n	8007630 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8007624:	6839      	ldr	r1, [r7, #0]
 8007626:	6878      	ldr	r0, [r7, #4]
 8007628:	f000 fb4f 	bl	8007cca <USBD_CtlError>
      break;
 800762c:	e000      	b.n	8007630 <USBD_StdEPReq+0x330>
      break;
 800762e:	bf00      	nop
  }

  return ret;
 8007630:	7bfb      	ldrb	r3, [r7, #15]
}
 8007632:	4618      	mov	r0, r3
 8007634:	3710      	adds	r7, #16
 8007636:	46bd      	mov	sp, r7
 8007638:	bd80      	pop	{r7, pc}
	...

0800763c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800763c:	b580      	push	{r7, lr}
 800763e:	b084      	sub	sp, #16
 8007640:	af00      	add	r7, sp, #0
 8007642:	6078      	str	r0, [r7, #4]
 8007644:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007646:	2300      	movs	r3, #0
 8007648:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800764a:	2300      	movs	r3, #0
 800764c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800764e:	2300      	movs	r3, #0
 8007650:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007652:	683b      	ldr	r3, [r7, #0]
 8007654:	885b      	ldrh	r3, [r3, #2]
 8007656:	0a1b      	lsrs	r3, r3, #8
 8007658:	b29b      	uxth	r3, r3
 800765a:	3b01      	subs	r3, #1
 800765c:	2b06      	cmp	r3, #6
 800765e:	f200 8128 	bhi.w	80078b2 <USBD_GetDescriptor+0x276>
 8007662:	a201      	add	r2, pc, #4	@ (adr r2, 8007668 <USBD_GetDescriptor+0x2c>)
 8007664:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007668:	08007685 	.word	0x08007685
 800766c:	0800769d 	.word	0x0800769d
 8007670:	080076dd 	.word	0x080076dd
 8007674:	080078b3 	.word	0x080078b3
 8007678:	080078b3 	.word	0x080078b3
 800767c:	08007853 	.word	0x08007853
 8007680:	0800787f 	.word	0x0800787f
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	687a      	ldr	r2, [r7, #4]
 800768e:	7c12      	ldrb	r2, [r2, #16]
 8007690:	f107 0108 	add.w	r1, r7, #8
 8007694:	4610      	mov	r0, r2
 8007696:	4798      	blx	r3
 8007698:	60f8      	str	r0, [r7, #12]
      break;
 800769a:	e112      	b.n	80078c2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	7c1b      	ldrb	r3, [r3, #16]
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d10d      	bne.n	80076c0 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80076aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80076ac:	f107 0208 	add.w	r2, r7, #8
 80076b0:	4610      	mov	r0, r2
 80076b2:	4798      	blx	r3
 80076b4:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	3301      	adds	r3, #1
 80076ba:	2202      	movs	r2, #2
 80076bc:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80076be:	e100      	b.n	80078c2 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80076c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076c8:	f107 0208 	add.w	r2, r7, #8
 80076cc:	4610      	mov	r0, r2
 80076ce:	4798      	blx	r3
 80076d0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	3301      	adds	r3, #1
 80076d6:	2202      	movs	r2, #2
 80076d8:	701a      	strb	r2, [r3, #0]
      break;
 80076da:	e0f2      	b.n	80078c2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80076dc:	683b      	ldr	r3, [r7, #0]
 80076de:	885b      	ldrh	r3, [r3, #2]
 80076e0:	b2db      	uxtb	r3, r3
 80076e2:	2b05      	cmp	r3, #5
 80076e4:	f200 80ac 	bhi.w	8007840 <USBD_GetDescriptor+0x204>
 80076e8:	a201      	add	r2, pc, #4	@ (adr r2, 80076f0 <USBD_GetDescriptor+0xb4>)
 80076ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076ee:	bf00      	nop
 80076f0:	08007709 	.word	0x08007709
 80076f4:	0800773d 	.word	0x0800773d
 80076f8:	08007771 	.word	0x08007771
 80076fc:	080077a5 	.word	0x080077a5
 8007700:	080077d9 	.word	0x080077d9
 8007704:	0800780d 	.word	0x0800780d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800770e:	685b      	ldr	r3, [r3, #4]
 8007710:	2b00      	cmp	r3, #0
 8007712:	d00b      	beq.n	800772c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800771a:	685b      	ldr	r3, [r3, #4]
 800771c:	687a      	ldr	r2, [r7, #4]
 800771e:	7c12      	ldrb	r2, [r2, #16]
 8007720:	f107 0108 	add.w	r1, r7, #8
 8007724:	4610      	mov	r0, r2
 8007726:	4798      	blx	r3
 8007728:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800772a:	e091      	b.n	8007850 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800772c:	6839      	ldr	r1, [r7, #0]
 800772e:	6878      	ldr	r0, [r7, #4]
 8007730:	f000 facb 	bl	8007cca <USBD_CtlError>
            err++;
 8007734:	7afb      	ldrb	r3, [r7, #11]
 8007736:	3301      	adds	r3, #1
 8007738:	72fb      	strb	r3, [r7, #11]
          break;
 800773a:	e089      	b.n	8007850 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007742:	689b      	ldr	r3, [r3, #8]
 8007744:	2b00      	cmp	r3, #0
 8007746:	d00b      	beq.n	8007760 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800774e:	689b      	ldr	r3, [r3, #8]
 8007750:	687a      	ldr	r2, [r7, #4]
 8007752:	7c12      	ldrb	r2, [r2, #16]
 8007754:	f107 0108 	add.w	r1, r7, #8
 8007758:	4610      	mov	r0, r2
 800775a:	4798      	blx	r3
 800775c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800775e:	e077      	b.n	8007850 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007760:	6839      	ldr	r1, [r7, #0]
 8007762:	6878      	ldr	r0, [r7, #4]
 8007764:	f000 fab1 	bl	8007cca <USBD_CtlError>
            err++;
 8007768:	7afb      	ldrb	r3, [r7, #11]
 800776a:	3301      	adds	r3, #1
 800776c:	72fb      	strb	r3, [r7, #11]
          break;
 800776e:	e06f      	b.n	8007850 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007776:	68db      	ldr	r3, [r3, #12]
 8007778:	2b00      	cmp	r3, #0
 800777a:	d00b      	beq.n	8007794 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007782:	68db      	ldr	r3, [r3, #12]
 8007784:	687a      	ldr	r2, [r7, #4]
 8007786:	7c12      	ldrb	r2, [r2, #16]
 8007788:	f107 0108 	add.w	r1, r7, #8
 800778c:	4610      	mov	r0, r2
 800778e:	4798      	blx	r3
 8007790:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007792:	e05d      	b.n	8007850 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007794:	6839      	ldr	r1, [r7, #0]
 8007796:	6878      	ldr	r0, [r7, #4]
 8007798:	f000 fa97 	bl	8007cca <USBD_CtlError>
            err++;
 800779c:	7afb      	ldrb	r3, [r7, #11]
 800779e:	3301      	adds	r3, #1
 80077a0:	72fb      	strb	r3, [r7, #11]
          break;
 80077a2:	e055      	b.n	8007850 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80077aa:	691b      	ldr	r3, [r3, #16]
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d00b      	beq.n	80077c8 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80077b6:	691b      	ldr	r3, [r3, #16]
 80077b8:	687a      	ldr	r2, [r7, #4]
 80077ba:	7c12      	ldrb	r2, [r2, #16]
 80077bc:	f107 0108 	add.w	r1, r7, #8
 80077c0:	4610      	mov	r0, r2
 80077c2:	4798      	blx	r3
 80077c4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80077c6:	e043      	b.n	8007850 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80077c8:	6839      	ldr	r1, [r7, #0]
 80077ca:	6878      	ldr	r0, [r7, #4]
 80077cc:	f000 fa7d 	bl	8007cca <USBD_CtlError>
            err++;
 80077d0:	7afb      	ldrb	r3, [r7, #11]
 80077d2:	3301      	adds	r3, #1
 80077d4:	72fb      	strb	r3, [r7, #11]
          break;
 80077d6:	e03b      	b.n	8007850 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80077de:	695b      	ldr	r3, [r3, #20]
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d00b      	beq.n	80077fc <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80077ea:	695b      	ldr	r3, [r3, #20]
 80077ec:	687a      	ldr	r2, [r7, #4]
 80077ee:	7c12      	ldrb	r2, [r2, #16]
 80077f0:	f107 0108 	add.w	r1, r7, #8
 80077f4:	4610      	mov	r0, r2
 80077f6:	4798      	blx	r3
 80077f8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80077fa:	e029      	b.n	8007850 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80077fc:	6839      	ldr	r1, [r7, #0]
 80077fe:	6878      	ldr	r0, [r7, #4]
 8007800:	f000 fa63 	bl	8007cca <USBD_CtlError>
            err++;
 8007804:	7afb      	ldrb	r3, [r7, #11]
 8007806:	3301      	adds	r3, #1
 8007808:	72fb      	strb	r3, [r7, #11]
          break;
 800780a:	e021      	b.n	8007850 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007812:	699b      	ldr	r3, [r3, #24]
 8007814:	2b00      	cmp	r3, #0
 8007816:	d00b      	beq.n	8007830 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800781e:	699b      	ldr	r3, [r3, #24]
 8007820:	687a      	ldr	r2, [r7, #4]
 8007822:	7c12      	ldrb	r2, [r2, #16]
 8007824:	f107 0108 	add.w	r1, r7, #8
 8007828:	4610      	mov	r0, r2
 800782a:	4798      	blx	r3
 800782c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800782e:	e00f      	b.n	8007850 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007830:	6839      	ldr	r1, [r7, #0]
 8007832:	6878      	ldr	r0, [r7, #4]
 8007834:	f000 fa49 	bl	8007cca <USBD_CtlError>
            err++;
 8007838:	7afb      	ldrb	r3, [r7, #11]
 800783a:	3301      	adds	r3, #1
 800783c:	72fb      	strb	r3, [r7, #11]
          break;
 800783e:	e007      	b.n	8007850 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8007840:	6839      	ldr	r1, [r7, #0]
 8007842:	6878      	ldr	r0, [r7, #4]
 8007844:	f000 fa41 	bl	8007cca <USBD_CtlError>
          err++;
 8007848:	7afb      	ldrb	r3, [r7, #11]
 800784a:	3301      	adds	r3, #1
 800784c:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800784e:	bf00      	nop
      }
      break;
 8007850:	e037      	b.n	80078c2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	7c1b      	ldrb	r3, [r3, #16]
 8007856:	2b00      	cmp	r3, #0
 8007858:	d109      	bne.n	800786e <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007860:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007862:	f107 0208 	add.w	r2, r7, #8
 8007866:	4610      	mov	r0, r2
 8007868:	4798      	blx	r3
 800786a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800786c:	e029      	b.n	80078c2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800786e:	6839      	ldr	r1, [r7, #0]
 8007870:	6878      	ldr	r0, [r7, #4]
 8007872:	f000 fa2a 	bl	8007cca <USBD_CtlError>
        err++;
 8007876:	7afb      	ldrb	r3, [r7, #11]
 8007878:	3301      	adds	r3, #1
 800787a:	72fb      	strb	r3, [r7, #11]
      break;
 800787c:	e021      	b.n	80078c2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	7c1b      	ldrb	r3, [r3, #16]
 8007882:	2b00      	cmp	r3, #0
 8007884:	d10d      	bne.n	80078a2 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800788c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800788e:	f107 0208 	add.w	r2, r7, #8
 8007892:	4610      	mov	r0, r2
 8007894:	4798      	blx	r3
 8007896:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	3301      	adds	r3, #1
 800789c:	2207      	movs	r2, #7
 800789e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80078a0:	e00f      	b.n	80078c2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80078a2:	6839      	ldr	r1, [r7, #0]
 80078a4:	6878      	ldr	r0, [r7, #4]
 80078a6:	f000 fa10 	bl	8007cca <USBD_CtlError>
        err++;
 80078aa:	7afb      	ldrb	r3, [r7, #11]
 80078ac:	3301      	adds	r3, #1
 80078ae:	72fb      	strb	r3, [r7, #11]
      break;
 80078b0:	e007      	b.n	80078c2 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80078b2:	6839      	ldr	r1, [r7, #0]
 80078b4:	6878      	ldr	r0, [r7, #4]
 80078b6:	f000 fa08 	bl	8007cca <USBD_CtlError>
      err++;
 80078ba:	7afb      	ldrb	r3, [r7, #11]
 80078bc:	3301      	adds	r3, #1
 80078be:	72fb      	strb	r3, [r7, #11]
      break;
 80078c0:	bf00      	nop
  }

  if (err != 0U)
 80078c2:	7afb      	ldrb	r3, [r7, #11]
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d11e      	bne.n	8007906 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 80078c8:	683b      	ldr	r3, [r7, #0]
 80078ca:	88db      	ldrh	r3, [r3, #6]
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d016      	beq.n	80078fe <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 80078d0:	893b      	ldrh	r3, [r7, #8]
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d00e      	beq.n	80078f4 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 80078d6:	683b      	ldr	r3, [r7, #0]
 80078d8:	88da      	ldrh	r2, [r3, #6]
 80078da:	893b      	ldrh	r3, [r7, #8]
 80078dc:	4293      	cmp	r3, r2
 80078de:	bf28      	it	cs
 80078e0:	4613      	movcs	r3, r2
 80078e2:	b29b      	uxth	r3, r3
 80078e4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80078e6:	893b      	ldrh	r3, [r7, #8]
 80078e8:	461a      	mov	r2, r3
 80078ea:	68f9      	ldr	r1, [r7, #12]
 80078ec:	6878      	ldr	r0, [r7, #4]
 80078ee:	f000 fa69 	bl	8007dc4 <USBD_CtlSendData>
 80078f2:	e009      	b.n	8007908 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80078f4:	6839      	ldr	r1, [r7, #0]
 80078f6:	6878      	ldr	r0, [r7, #4]
 80078f8:	f000 f9e7 	bl	8007cca <USBD_CtlError>
 80078fc:	e004      	b.n	8007908 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80078fe:	6878      	ldr	r0, [r7, #4]
 8007900:	f000 faba 	bl	8007e78 <USBD_CtlSendStatus>
 8007904:	e000      	b.n	8007908 <USBD_GetDescriptor+0x2cc>
    return;
 8007906:	bf00      	nop
  }
}
 8007908:	3710      	adds	r7, #16
 800790a:	46bd      	mov	sp, r7
 800790c:	bd80      	pop	{r7, pc}
 800790e:	bf00      	nop

08007910 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007910:	b580      	push	{r7, lr}
 8007912:	b084      	sub	sp, #16
 8007914:	af00      	add	r7, sp, #0
 8007916:	6078      	str	r0, [r7, #4]
 8007918:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800791a:	683b      	ldr	r3, [r7, #0]
 800791c:	889b      	ldrh	r3, [r3, #4]
 800791e:	2b00      	cmp	r3, #0
 8007920:	d131      	bne.n	8007986 <USBD_SetAddress+0x76>
 8007922:	683b      	ldr	r3, [r7, #0]
 8007924:	88db      	ldrh	r3, [r3, #6]
 8007926:	2b00      	cmp	r3, #0
 8007928:	d12d      	bne.n	8007986 <USBD_SetAddress+0x76>
 800792a:	683b      	ldr	r3, [r7, #0]
 800792c:	885b      	ldrh	r3, [r3, #2]
 800792e:	2b7f      	cmp	r3, #127	@ 0x7f
 8007930:	d829      	bhi.n	8007986 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007932:	683b      	ldr	r3, [r7, #0]
 8007934:	885b      	ldrh	r3, [r3, #2]
 8007936:	b2db      	uxtb	r3, r3
 8007938:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800793c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007944:	b2db      	uxtb	r3, r3
 8007946:	2b03      	cmp	r3, #3
 8007948:	d104      	bne.n	8007954 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800794a:	6839      	ldr	r1, [r7, #0]
 800794c:	6878      	ldr	r0, [r7, #4]
 800794e:	f000 f9bc 	bl	8007cca <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007952:	e01d      	b.n	8007990 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	7bfa      	ldrb	r2, [r7, #15]
 8007958:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800795c:	7bfb      	ldrb	r3, [r7, #15]
 800795e:	4619      	mov	r1, r3
 8007960:	6878      	ldr	r0, [r7, #4]
 8007962:	f001 f99d 	bl	8008ca0 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8007966:	6878      	ldr	r0, [r7, #4]
 8007968:	f000 fa86 	bl	8007e78 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800796c:	7bfb      	ldrb	r3, [r7, #15]
 800796e:	2b00      	cmp	r3, #0
 8007970:	d004      	beq.n	800797c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	2202      	movs	r2, #2
 8007976:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800797a:	e009      	b.n	8007990 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	2201      	movs	r2, #1
 8007980:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007984:	e004      	b.n	8007990 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007986:	6839      	ldr	r1, [r7, #0]
 8007988:	6878      	ldr	r0, [r7, #4]
 800798a:	f000 f99e 	bl	8007cca <USBD_CtlError>
  }
}
 800798e:	bf00      	nop
 8007990:	bf00      	nop
 8007992:	3710      	adds	r7, #16
 8007994:	46bd      	mov	sp, r7
 8007996:	bd80      	pop	{r7, pc}

08007998 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007998:	b580      	push	{r7, lr}
 800799a:	b084      	sub	sp, #16
 800799c:	af00      	add	r7, sp, #0
 800799e:	6078      	str	r0, [r7, #4]
 80079a0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80079a2:	2300      	movs	r3, #0
 80079a4:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80079a6:	683b      	ldr	r3, [r7, #0]
 80079a8:	885b      	ldrh	r3, [r3, #2]
 80079aa:	b2da      	uxtb	r2, r3
 80079ac:	4b4e      	ldr	r3, [pc, #312]	@ (8007ae8 <USBD_SetConfig+0x150>)
 80079ae:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80079b0:	4b4d      	ldr	r3, [pc, #308]	@ (8007ae8 <USBD_SetConfig+0x150>)
 80079b2:	781b      	ldrb	r3, [r3, #0]
 80079b4:	2b01      	cmp	r3, #1
 80079b6:	d905      	bls.n	80079c4 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80079b8:	6839      	ldr	r1, [r7, #0]
 80079ba:	6878      	ldr	r0, [r7, #4]
 80079bc:	f000 f985 	bl	8007cca <USBD_CtlError>
    return USBD_FAIL;
 80079c0:	2303      	movs	r3, #3
 80079c2:	e08c      	b.n	8007ade <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80079ca:	b2db      	uxtb	r3, r3
 80079cc:	2b02      	cmp	r3, #2
 80079ce:	d002      	beq.n	80079d6 <USBD_SetConfig+0x3e>
 80079d0:	2b03      	cmp	r3, #3
 80079d2:	d029      	beq.n	8007a28 <USBD_SetConfig+0x90>
 80079d4:	e075      	b.n	8007ac2 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80079d6:	4b44      	ldr	r3, [pc, #272]	@ (8007ae8 <USBD_SetConfig+0x150>)
 80079d8:	781b      	ldrb	r3, [r3, #0]
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d020      	beq.n	8007a20 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 80079de:	4b42      	ldr	r3, [pc, #264]	@ (8007ae8 <USBD_SetConfig+0x150>)
 80079e0:	781b      	ldrb	r3, [r3, #0]
 80079e2:	461a      	mov	r2, r3
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80079e8:	4b3f      	ldr	r3, [pc, #252]	@ (8007ae8 <USBD_SetConfig+0x150>)
 80079ea:	781b      	ldrb	r3, [r3, #0]
 80079ec:	4619      	mov	r1, r3
 80079ee:	6878      	ldr	r0, [r7, #4]
 80079f0:	f7fe ffe3 	bl	80069ba <USBD_SetClassConfig>
 80079f4:	4603      	mov	r3, r0
 80079f6:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80079f8:	7bfb      	ldrb	r3, [r7, #15]
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d008      	beq.n	8007a10 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 80079fe:	6839      	ldr	r1, [r7, #0]
 8007a00:	6878      	ldr	r0, [r7, #4]
 8007a02:	f000 f962 	bl	8007cca <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	2202      	movs	r2, #2
 8007a0a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007a0e:	e065      	b.n	8007adc <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8007a10:	6878      	ldr	r0, [r7, #4]
 8007a12:	f000 fa31 	bl	8007e78 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	2203      	movs	r2, #3
 8007a1a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8007a1e:	e05d      	b.n	8007adc <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8007a20:	6878      	ldr	r0, [r7, #4]
 8007a22:	f000 fa29 	bl	8007e78 <USBD_CtlSendStatus>
      break;
 8007a26:	e059      	b.n	8007adc <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8007a28:	4b2f      	ldr	r3, [pc, #188]	@ (8007ae8 <USBD_SetConfig+0x150>)
 8007a2a:	781b      	ldrb	r3, [r3, #0]
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d112      	bne.n	8007a56 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	2202      	movs	r2, #2
 8007a34:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8007a38:	4b2b      	ldr	r3, [pc, #172]	@ (8007ae8 <USBD_SetConfig+0x150>)
 8007a3a:	781b      	ldrb	r3, [r3, #0]
 8007a3c:	461a      	mov	r2, r3
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007a42:	4b29      	ldr	r3, [pc, #164]	@ (8007ae8 <USBD_SetConfig+0x150>)
 8007a44:	781b      	ldrb	r3, [r3, #0]
 8007a46:	4619      	mov	r1, r3
 8007a48:	6878      	ldr	r0, [r7, #4]
 8007a4a:	f7fe ffd2 	bl	80069f2 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8007a4e:	6878      	ldr	r0, [r7, #4]
 8007a50:	f000 fa12 	bl	8007e78 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007a54:	e042      	b.n	8007adc <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8007a56:	4b24      	ldr	r3, [pc, #144]	@ (8007ae8 <USBD_SetConfig+0x150>)
 8007a58:	781b      	ldrb	r3, [r3, #0]
 8007a5a:	461a      	mov	r2, r3
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	685b      	ldr	r3, [r3, #4]
 8007a60:	429a      	cmp	r2, r3
 8007a62:	d02a      	beq.n	8007aba <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	685b      	ldr	r3, [r3, #4]
 8007a68:	b2db      	uxtb	r3, r3
 8007a6a:	4619      	mov	r1, r3
 8007a6c:	6878      	ldr	r0, [r7, #4]
 8007a6e:	f7fe ffc0 	bl	80069f2 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8007a72:	4b1d      	ldr	r3, [pc, #116]	@ (8007ae8 <USBD_SetConfig+0x150>)
 8007a74:	781b      	ldrb	r3, [r3, #0]
 8007a76:	461a      	mov	r2, r3
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007a7c:	4b1a      	ldr	r3, [pc, #104]	@ (8007ae8 <USBD_SetConfig+0x150>)
 8007a7e:	781b      	ldrb	r3, [r3, #0]
 8007a80:	4619      	mov	r1, r3
 8007a82:	6878      	ldr	r0, [r7, #4]
 8007a84:	f7fe ff99 	bl	80069ba <USBD_SetClassConfig>
 8007a88:	4603      	mov	r3, r0
 8007a8a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8007a8c:	7bfb      	ldrb	r3, [r7, #15]
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d00f      	beq.n	8007ab2 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8007a92:	6839      	ldr	r1, [r7, #0]
 8007a94:	6878      	ldr	r0, [r7, #4]
 8007a96:	f000 f918 	bl	8007cca <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	685b      	ldr	r3, [r3, #4]
 8007a9e:	b2db      	uxtb	r3, r3
 8007aa0:	4619      	mov	r1, r3
 8007aa2:	6878      	ldr	r0, [r7, #4]
 8007aa4:	f7fe ffa5 	bl	80069f2 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	2202      	movs	r2, #2
 8007aac:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8007ab0:	e014      	b.n	8007adc <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8007ab2:	6878      	ldr	r0, [r7, #4]
 8007ab4:	f000 f9e0 	bl	8007e78 <USBD_CtlSendStatus>
      break;
 8007ab8:	e010      	b.n	8007adc <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8007aba:	6878      	ldr	r0, [r7, #4]
 8007abc:	f000 f9dc 	bl	8007e78 <USBD_CtlSendStatus>
      break;
 8007ac0:	e00c      	b.n	8007adc <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8007ac2:	6839      	ldr	r1, [r7, #0]
 8007ac4:	6878      	ldr	r0, [r7, #4]
 8007ac6:	f000 f900 	bl	8007cca <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007aca:	4b07      	ldr	r3, [pc, #28]	@ (8007ae8 <USBD_SetConfig+0x150>)
 8007acc:	781b      	ldrb	r3, [r3, #0]
 8007ace:	4619      	mov	r1, r3
 8007ad0:	6878      	ldr	r0, [r7, #4]
 8007ad2:	f7fe ff8e 	bl	80069f2 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8007ad6:	2303      	movs	r3, #3
 8007ad8:	73fb      	strb	r3, [r7, #15]
      break;
 8007ada:	bf00      	nop
  }

  return ret;
 8007adc:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ade:	4618      	mov	r0, r3
 8007ae0:	3710      	adds	r7, #16
 8007ae2:	46bd      	mov	sp, r7
 8007ae4:	bd80      	pop	{r7, pc}
 8007ae6:	bf00      	nop
 8007ae8:	2000064c 	.word	0x2000064c

08007aec <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007aec:	b580      	push	{r7, lr}
 8007aee:	b082      	sub	sp, #8
 8007af0:	af00      	add	r7, sp, #0
 8007af2:	6078      	str	r0, [r7, #4]
 8007af4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007af6:	683b      	ldr	r3, [r7, #0]
 8007af8:	88db      	ldrh	r3, [r3, #6]
 8007afa:	2b01      	cmp	r3, #1
 8007afc:	d004      	beq.n	8007b08 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007afe:	6839      	ldr	r1, [r7, #0]
 8007b00:	6878      	ldr	r0, [r7, #4]
 8007b02:	f000 f8e2 	bl	8007cca <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8007b06:	e023      	b.n	8007b50 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007b0e:	b2db      	uxtb	r3, r3
 8007b10:	2b02      	cmp	r3, #2
 8007b12:	dc02      	bgt.n	8007b1a <USBD_GetConfig+0x2e>
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	dc03      	bgt.n	8007b20 <USBD_GetConfig+0x34>
 8007b18:	e015      	b.n	8007b46 <USBD_GetConfig+0x5a>
 8007b1a:	2b03      	cmp	r3, #3
 8007b1c:	d00b      	beq.n	8007b36 <USBD_GetConfig+0x4a>
 8007b1e:	e012      	b.n	8007b46 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	2200      	movs	r2, #0
 8007b24:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	3308      	adds	r3, #8
 8007b2a:	2201      	movs	r2, #1
 8007b2c:	4619      	mov	r1, r3
 8007b2e:	6878      	ldr	r0, [r7, #4]
 8007b30:	f000 f948 	bl	8007dc4 <USBD_CtlSendData>
        break;
 8007b34:	e00c      	b.n	8007b50 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	3304      	adds	r3, #4
 8007b3a:	2201      	movs	r2, #1
 8007b3c:	4619      	mov	r1, r3
 8007b3e:	6878      	ldr	r0, [r7, #4]
 8007b40:	f000 f940 	bl	8007dc4 <USBD_CtlSendData>
        break;
 8007b44:	e004      	b.n	8007b50 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8007b46:	6839      	ldr	r1, [r7, #0]
 8007b48:	6878      	ldr	r0, [r7, #4]
 8007b4a:	f000 f8be 	bl	8007cca <USBD_CtlError>
        break;
 8007b4e:	bf00      	nop
}
 8007b50:	bf00      	nop
 8007b52:	3708      	adds	r7, #8
 8007b54:	46bd      	mov	sp, r7
 8007b56:	bd80      	pop	{r7, pc}

08007b58 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007b58:	b580      	push	{r7, lr}
 8007b5a:	b082      	sub	sp, #8
 8007b5c:	af00      	add	r7, sp, #0
 8007b5e:	6078      	str	r0, [r7, #4]
 8007b60:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007b68:	b2db      	uxtb	r3, r3
 8007b6a:	3b01      	subs	r3, #1
 8007b6c:	2b02      	cmp	r3, #2
 8007b6e:	d81e      	bhi.n	8007bae <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007b70:	683b      	ldr	r3, [r7, #0]
 8007b72:	88db      	ldrh	r3, [r3, #6]
 8007b74:	2b02      	cmp	r3, #2
 8007b76:	d004      	beq.n	8007b82 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8007b78:	6839      	ldr	r1, [r7, #0]
 8007b7a:	6878      	ldr	r0, [r7, #4]
 8007b7c:	f000 f8a5 	bl	8007cca <USBD_CtlError>
        break;
 8007b80:	e01a      	b.n	8007bb8 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
#else
      pdev->dev_config_status = 0U;
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	2200      	movs	r2, #0
 8007b86:	60da      	str	r2, [r3, #12]
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d005      	beq.n	8007b9e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	68db      	ldr	r3, [r3, #12]
 8007b96:	f043 0202 	orr.w	r2, r3, #2
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	330c      	adds	r3, #12
 8007ba2:	2202      	movs	r2, #2
 8007ba4:	4619      	mov	r1, r3
 8007ba6:	6878      	ldr	r0, [r7, #4]
 8007ba8:	f000 f90c 	bl	8007dc4 <USBD_CtlSendData>
      break;
 8007bac:	e004      	b.n	8007bb8 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8007bae:	6839      	ldr	r1, [r7, #0]
 8007bb0:	6878      	ldr	r0, [r7, #4]
 8007bb2:	f000 f88a 	bl	8007cca <USBD_CtlError>
      break;
 8007bb6:	bf00      	nop
  }
}
 8007bb8:	bf00      	nop
 8007bba:	3708      	adds	r7, #8
 8007bbc:	46bd      	mov	sp, r7
 8007bbe:	bd80      	pop	{r7, pc}

08007bc0 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007bc0:	b580      	push	{r7, lr}
 8007bc2:	b082      	sub	sp, #8
 8007bc4:	af00      	add	r7, sp, #0
 8007bc6:	6078      	str	r0, [r7, #4]
 8007bc8:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007bca:	683b      	ldr	r3, [r7, #0]
 8007bcc:	885b      	ldrh	r3, [r3, #2]
 8007bce:	2b01      	cmp	r3, #1
 8007bd0:	d107      	bne.n	8007be2 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	2201      	movs	r2, #1
 8007bd6:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8007bda:	6878      	ldr	r0, [r7, #4]
 8007bdc:	f000 f94c 	bl	8007e78 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8007be0:	e013      	b.n	8007c0a <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8007be2:	683b      	ldr	r3, [r7, #0]
 8007be4:	885b      	ldrh	r3, [r3, #2]
 8007be6:	2b02      	cmp	r3, #2
 8007be8:	d10b      	bne.n	8007c02 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8007bea:	683b      	ldr	r3, [r7, #0]
 8007bec:	889b      	ldrh	r3, [r3, #4]
 8007bee:	0a1b      	lsrs	r3, r3, #8
 8007bf0:	b29b      	uxth	r3, r3
 8007bf2:	b2da      	uxtb	r2, r3
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8007bfa:	6878      	ldr	r0, [r7, #4]
 8007bfc:	f000 f93c 	bl	8007e78 <USBD_CtlSendStatus>
}
 8007c00:	e003      	b.n	8007c0a <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8007c02:	6839      	ldr	r1, [r7, #0]
 8007c04:	6878      	ldr	r0, [r7, #4]
 8007c06:	f000 f860 	bl	8007cca <USBD_CtlError>
}
 8007c0a:	bf00      	nop
 8007c0c:	3708      	adds	r7, #8
 8007c0e:	46bd      	mov	sp, r7
 8007c10:	bd80      	pop	{r7, pc}

08007c12 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007c12:	b580      	push	{r7, lr}
 8007c14:	b082      	sub	sp, #8
 8007c16:	af00      	add	r7, sp, #0
 8007c18:	6078      	str	r0, [r7, #4]
 8007c1a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007c22:	b2db      	uxtb	r3, r3
 8007c24:	3b01      	subs	r3, #1
 8007c26:	2b02      	cmp	r3, #2
 8007c28:	d80b      	bhi.n	8007c42 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007c2a:	683b      	ldr	r3, [r7, #0]
 8007c2c:	885b      	ldrh	r3, [r3, #2]
 8007c2e:	2b01      	cmp	r3, #1
 8007c30:	d10c      	bne.n	8007c4c <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	2200      	movs	r2, #0
 8007c36:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8007c3a:	6878      	ldr	r0, [r7, #4]
 8007c3c:	f000 f91c 	bl	8007e78 <USBD_CtlSendStatus>
      }
      break;
 8007c40:	e004      	b.n	8007c4c <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8007c42:	6839      	ldr	r1, [r7, #0]
 8007c44:	6878      	ldr	r0, [r7, #4]
 8007c46:	f000 f840 	bl	8007cca <USBD_CtlError>
      break;
 8007c4a:	e000      	b.n	8007c4e <USBD_ClrFeature+0x3c>
      break;
 8007c4c:	bf00      	nop
  }
}
 8007c4e:	bf00      	nop
 8007c50:	3708      	adds	r7, #8
 8007c52:	46bd      	mov	sp, r7
 8007c54:	bd80      	pop	{r7, pc}

08007c56 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007c56:	b580      	push	{r7, lr}
 8007c58:	b084      	sub	sp, #16
 8007c5a:	af00      	add	r7, sp, #0
 8007c5c:	6078      	str	r0, [r7, #4]
 8007c5e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8007c60:	683b      	ldr	r3, [r7, #0]
 8007c62:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	781a      	ldrb	r2, [r3, #0]
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	3301      	adds	r3, #1
 8007c70:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	781a      	ldrb	r2, [r3, #0]
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	3301      	adds	r3, #1
 8007c7e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8007c80:	68f8      	ldr	r0, [r7, #12]
 8007c82:	f7ff fa40 	bl	8007106 <SWAPBYTE>
 8007c86:	4603      	mov	r3, r0
 8007c88:	461a      	mov	r2, r3
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	3301      	adds	r3, #1
 8007c92:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	3301      	adds	r3, #1
 8007c98:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8007c9a:	68f8      	ldr	r0, [r7, #12]
 8007c9c:	f7ff fa33 	bl	8007106 <SWAPBYTE>
 8007ca0:	4603      	mov	r3, r0
 8007ca2:	461a      	mov	r2, r3
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	3301      	adds	r3, #1
 8007cac:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	3301      	adds	r3, #1
 8007cb2:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8007cb4:	68f8      	ldr	r0, [r7, #12]
 8007cb6:	f7ff fa26 	bl	8007106 <SWAPBYTE>
 8007cba:	4603      	mov	r3, r0
 8007cbc:	461a      	mov	r2, r3
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	80da      	strh	r2, [r3, #6]
}
 8007cc2:	bf00      	nop
 8007cc4:	3710      	adds	r7, #16
 8007cc6:	46bd      	mov	sp, r7
 8007cc8:	bd80      	pop	{r7, pc}

08007cca <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007cca:	b580      	push	{r7, lr}
 8007ccc:	b082      	sub	sp, #8
 8007cce:	af00      	add	r7, sp, #0
 8007cd0:	6078      	str	r0, [r7, #4]
 8007cd2:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8007cd4:	2180      	movs	r1, #128	@ 0x80
 8007cd6:	6878      	ldr	r0, [r7, #4]
 8007cd8:	f000 ff78 	bl	8008bcc <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8007cdc:	2100      	movs	r1, #0
 8007cde:	6878      	ldr	r0, [r7, #4]
 8007ce0:	f000 ff74 	bl	8008bcc <USBD_LL_StallEP>
}
 8007ce4:	bf00      	nop
 8007ce6:	3708      	adds	r7, #8
 8007ce8:	46bd      	mov	sp, r7
 8007cea:	bd80      	pop	{r7, pc}

08007cec <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007cec:	b580      	push	{r7, lr}
 8007cee:	b086      	sub	sp, #24
 8007cf0:	af00      	add	r7, sp, #0
 8007cf2:	60f8      	str	r0, [r7, #12]
 8007cf4:	60b9      	str	r1, [r7, #8]
 8007cf6:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007cf8:	2300      	movs	r3, #0
 8007cfa:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d042      	beq.n	8007d88 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 8007d06:	6938      	ldr	r0, [r7, #16]
 8007d08:	f000 f842 	bl	8007d90 <USBD_GetLen>
 8007d0c:	4603      	mov	r3, r0
 8007d0e:	3301      	adds	r3, #1
 8007d10:	005b      	lsls	r3, r3, #1
 8007d12:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007d16:	d808      	bhi.n	8007d2a <USBD_GetString+0x3e>
 8007d18:	6938      	ldr	r0, [r7, #16]
 8007d1a:	f000 f839 	bl	8007d90 <USBD_GetLen>
 8007d1e:	4603      	mov	r3, r0
 8007d20:	3301      	adds	r3, #1
 8007d22:	b29b      	uxth	r3, r3
 8007d24:	005b      	lsls	r3, r3, #1
 8007d26:	b29a      	uxth	r2, r3
 8007d28:	e001      	b.n	8007d2e <USBD_GetString+0x42>
 8007d2a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8007d32:	7dfb      	ldrb	r3, [r7, #23]
 8007d34:	68ba      	ldr	r2, [r7, #8]
 8007d36:	4413      	add	r3, r2
 8007d38:	687a      	ldr	r2, [r7, #4]
 8007d3a:	7812      	ldrb	r2, [r2, #0]
 8007d3c:	701a      	strb	r2, [r3, #0]
  idx++;
 8007d3e:	7dfb      	ldrb	r3, [r7, #23]
 8007d40:	3301      	adds	r3, #1
 8007d42:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8007d44:	7dfb      	ldrb	r3, [r7, #23]
 8007d46:	68ba      	ldr	r2, [r7, #8]
 8007d48:	4413      	add	r3, r2
 8007d4a:	2203      	movs	r2, #3
 8007d4c:	701a      	strb	r2, [r3, #0]
  idx++;
 8007d4e:	7dfb      	ldrb	r3, [r7, #23]
 8007d50:	3301      	adds	r3, #1
 8007d52:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8007d54:	e013      	b.n	8007d7e <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 8007d56:	7dfb      	ldrb	r3, [r7, #23]
 8007d58:	68ba      	ldr	r2, [r7, #8]
 8007d5a:	4413      	add	r3, r2
 8007d5c:	693a      	ldr	r2, [r7, #16]
 8007d5e:	7812      	ldrb	r2, [r2, #0]
 8007d60:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8007d62:	693b      	ldr	r3, [r7, #16]
 8007d64:	3301      	adds	r3, #1
 8007d66:	613b      	str	r3, [r7, #16]
    idx++;
 8007d68:	7dfb      	ldrb	r3, [r7, #23]
 8007d6a:	3301      	adds	r3, #1
 8007d6c:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8007d6e:	7dfb      	ldrb	r3, [r7, #23]
 8007d70:	68ba      	ldr	r2, [r7, #8]
 8007d72:	4413      	add	r3, r2
 8007d74:	2200      	movs	r2, #0
 8007d76:	701a      	strb	r2, [r3, #0]
    idx++;
 8007d78:	7dfb      	ldrb	r3, [r7, #23]
 8007d7a:	3301      	adds	r3, #1
 8007d7c:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8007d7e:	693b      	ldr	r3, [r7, #16]
 8007d80:	781b      	ldrb	r3, [r3, #0]
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d1e7      	bne.n	8007d56 <USBD_GetString+0x6a>
 8007d86:	e000      	b.n	8007d8a <USBD_GetString+0x9e>
    return;
 8007d88:	bf00      	nop
  }
}
 8007d8a:	3718      	adds	r7, #24
 8007d8c:	46bd      	mov	sp, r7
 8007d8e:	bd80      	pop	{r7, pc}

08007d90 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007d90:	b480      	push	{r7}
 8007d92:	b085      	sub	sp, #20
 8007d94:	af00      	add	r7, sp, #0
 8007d96:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007d98:	2300      	movs	r3, #0
 8007d9a:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8007da0:	e005      	b.n	8007dae <USBD_GetLen+0x1e>
  {
    len++;
 8007da2:	7bfb      	ldrb	r3, [r7, #15]
 8007da4:	3301      	adds	r3, #1
 8007da6:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8007da8:	68bb      	ldr	r3, [r7, #8]
 8007daa:	3301      	adds	r3, #1
 8007dac:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8007dae:	68bb      	ldr	r3, [r7, #8]
 8007db0:	781b      	ldrb	r3, [r3, #0]
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d1f5      	bne.n	8007da2 <USBD_GetLen+0x12>
  }

  return len;
 8007db6:	7bfb      	ldrb	r3, [r7, #15]
}
 8007db8:	4618      	mov	r0, r3
 8007dba:	3714      	adds	r7, #20
 8007dbc:	46bd      	mov	sp, r7
 8007dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dc2:	4770      	bx	lr

08007dc4 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8007dc4:	b580      	push	{r7, lr}
 8007dc6:	b084      	sub	sp, #16
 8007dc8:	af00      	add	r7, sp, #0
 8007dca:	60f8      	str	r0, [r7, #12]
 8007dcc:	60b9      	str	r1, [r7, #8]
 8007dce:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	2202      	movs	r2, #2
 8007dd4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	687a      	ldr	r2, [r7, #4]
 8007ddc:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	687a      	ldr	r2, [r7, #4]
 8007de2:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	68ba      	ldr	r2, [r7, #8]
 8007de8:	2100      	movs	r1, #0
 8007dea:	68f8      	ldr	r0, [r7, #12]
 8007dec:	f000 ff77 	bl	8008cde <USBD_LL_Transmit>

  return USBD_OK;
 8007df0:	2300      	movs	r3, #0
}
 8007df2:	4618      	mov	r0, r3
 8007df4:	3710      	adds	r7, #16
 8007df6:	46bd      	mov	sp, r7
 8007df8:	bd80      	pop	{r7, pc}

08007dfa <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8007dfa:	b580      	push	{r7, lr}
 8007dfc:	b084      	sub	sp, #16
 8007dfe:	af00      	add	r7, sp, #0
 8007e00:	60f8      	str	r0, [r7, #12]
 8007e02:	60b9      	str	r1, [r7, #8]
 8007e04:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	68ba      	ldr	r2, [r7, #8]
 8007e0a:	2100      	movs	r1, #0
 8007e0c:	68f8      	ldr	r0, [r7, #12]
 8007e0e:	f000 ff66 	bl	8008cde <USBD_LL_Transmit>

  return USBD_OK;
 8007e12:	2300      	movs	r3, #0
}
 8007e14:	4618      	mov	r0, r3
 8007e16:	3710      	adds	r7, #16
 8007e18:	46bd      	mov	sp, r7
 8007e1a:	bd80      	pop	{r7, pc}

08007e1c <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8007e1c:	b580      	push	{r7, lr}
 8007e1e:	b084      	sub	sp, #16
 8007e20:	af00      	add	r7, sp, #0
 8007e22:	60f8      	str	r0, [r7, #12]
 8007e24:	60b9      	str	r1, [r7, #8]
 8007e26:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	2203      	movs	r2, #3
 8007e2c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	687a      	ldr	r2, [r7, #4]
 8007e34:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	687a      	ldr	r2, [r7, #4]
 8007e3c:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	68ba      	ldr	r2, [r7, #8]
 8007e44:	2100      	movs	r1, #0
 8007e46:	68f8      	ldr	r0, [r7, #12]
 8007e48:	f000 ff6a 	bl	8008d20 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007e4c:	2300      	movs	r3, #0
}
 8007e4e:	4618      	mov	r0, r3
 8007e50:	3710      	adds	r7, #16
 8007e52:	46bd      	mov	sp, r7
 8007e54:	bd80      	pop	{r7, pc}

08007e56 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8007e56:	b580      	push	{r7, lr}
 8007e58:	b084      	sub	sp, #16
 8007e5a:	af00      	add	r7, sp, #0
 8007e5c:	60f8      	str	r0, [r7, #12]
 8007e5e:	60b9      	str	r1, [r7, #8]
 8007e60:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	68ba      	ldr	r2, [r7, #8]
 8007e66:	2100      	movs	r1, #0
 8007e68:	68f8      	ldr	r0, [r7, #12]
 8007e6a:	f000 ff59 	bl	8008d20 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007e6e:	2300      	movs	r3, #0
}
 8007e70:	4618      	mov	r0, r3
 8007e72:	3710      	adds	r7, #16
 8007e74:	46bd      	mov	sp, r7
 8007e76:	bd80      	pop	{r7, pc}

08007e78 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007e78:	b580      	push	{r7, lr}
 8007e7a:	b082      	sub	sp, #8
 8007e7c:	af00      	add	r7, sp, #0
 8007e7e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	2204      	movs	r2, #4
 8007e84:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007e88:	2300      	movs	r3, #0
 8007e8a:	2200      	movs	r2, #0
 8007e8c:	2100      	movs	r1, #0
 8007e8e:	6878      	ldr	r0, [r7, #4]
 8007e90:	f000 ff25 	bl	8008cde <USBD_LL_Transmit>

  return USBD_OK;
 8007e94:	2300      	movs	r3, #0
}
 8007e96:	4618      	mov	r0, r3
 8007e98:	3708      	adds	r7, #8
 8007e9a:	46bd      	mov	sp, r7
 8007e9c:	bd80      	pop	{r7, pc}

08007e9e <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007e9e:	b580      	push	{r7, lr}
 8007ea0:	b082      	sub	sp, #8
 8007ea2:	af00      	add	r7, sp, #0
 8007ea4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	2205      	movs	r2, #5
 8007eaa:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007eae:	2300      	movs	r3, #0
 8007eb0:	2200      	movs	r2, #0
 8007eb2:	2100      	movs	r1, #0
 8007eb4:	6878      	ldr	r0, [r7, #4]
 8007eb6:	f000 ff33 	bl	8008d20 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007eba:	2300      	movs	r3, #0
}
 8007ebc:	4618      	mov	r0, r3
 8007ebe:	3708      	adds	r7, #8
 8007ec0:	46bd      	mov	sp, r7
 8007ec2:	bd80      	pop	{r7, pc}

08007ec4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007ec4:	b580      	push	{r7, lr}
 8007ec6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007ec8:	2200      	movs	r2, #0
 8007eca:	4912      	ldr	r1, [pc, #72]	@ (8007f14 <MX_USB_DEVICE_Init+0x50>)
 8007ecc:	4812      	ldr	r0, [pc, #72]	@ (8007f18 <MX_USB_DEVICE_Init+0x54>)
 8007ece:	f7fe fcf7 	bl	80068c0 <USBD_Init>
 8007ed2:	4603      	mov	r3, r0
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d001      	beq.n	8007edc <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007ed8:	f7f8 fe3a 	bl	8000b50 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CUSTOM_HID) != USBD_OK)
 8007edc:	490f      	ldr	r1, [pc, #60]	@ (8007f1c <MX_USB_DEVICE_Init+0x58>)
 8007ede:	480e      	ldr	r0, [pc, #56]	@ (8007f18 <MX_USB_DEVICE_Init+0x54>)
 8007ee0:	f7fe fd1e 	bl	8006920 <USBD_RegisterClass>
 8007ee4:	4603      	mov	r3, r0
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d001      	beq.n	8007eee <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8007eea:	f7f8 fe31 	bl	8000b50 <Error_Handler>
  }
  if (USBD_CUSTOM_HID_RegisterInterface(&hUsbDeviceFS, &USBD_CustomHID_fops_FS) != USBD_OK)
 8007eee:	490c      	ldr	r1, [pc, #48]	@ (8007f20 <MX_USB_DEVICE_Init+0x5c>)
 8007ef0:	4809      	ldr	r0, [pc, #36]	@ (8007f18 <MX_USB_DEVICE_Init+0x54>)
 8007ef2:	f7fe fccb 	bl	800688c <USBD_CUSTOM_HID_RegisterInterface>
 8007ef6:	4603      	mov	r3, r0
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	d001      	beq.n	8007f00 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8007efc:	f7f8 fe28 	bl	8000b50 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007f00:	4805      	ldr	r0, [pc, #20]	@ (8007f18 <MX_USB_DEVICE_Init+0x54>)
 8007f02:	f7fe fd43 	bl	800698c <USBD_Start>
 8007f06:	4603      	mov	r3, r0
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d001      	beq.n	8007f10 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8007f0c:	f7f8 fe20 	bl	8000b50 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007f10:	bf00      	nop
 8007f12:	bd80      	pop	{r7, pc}
 8007f14:	200004e8 	.word	0x200004e8
 8007f18:	20000650 	.word	0x20000650
 8007f1c:	2000000c 	.word	0x2000000c
 8007f20:	200004cc 	.word	0x200004cc

08007f24 <CUSTOM_HID_Init_FS>:
/**
  * @brief  Initializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_Init_FS(void)
{
 8007f24:	b480      	push	{r7}
 8007f26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8007f28:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8007f2a:	4618      	mov	r0, r3
 8007f2c:	46bd      	mov	sp, r7
 8007f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f32:	4770      	bx	lr

08007f34 <CUSTOM_HID_DeInit_FS>:
/**
  * @brief  DeInitializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_DeInit_FS(void)
{
 8007f34:	b480      	push	{r7}
 8007f36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 8007f38:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8007f3a:	4618      	mov	r0, r3
 8007f3c:	46bd      	mov	sp, r7
 8007f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f42:	4770      	bx	lr

08007f44 <CUSTOM_HID_OutEvent_FS>:
  * @param  event_idx: Event index
  * @param  state: Event state
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_OutEvent_FS(uint8_t event_idx, uint8_t state)
{
 8007f44:	b580      	push	{r7, lr}
 8007f46:	b086      	sub	sp, #24
 8007f48:	af00      	add	r7, sp, #0
 8007f4a:	4603      	mov	r3, r0
 8007f4c:	460a      	mov	r2, r1
 8007f4e:	71fb      	strb	r3, [r7, #7]
 8007f50:	4613      	mov	r3, r2
 8007f52:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN 6 */
	USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)hUsbDeviceFS.pClassDataCmsit[hUsbDeviceFS.classId];
 8007f54:	4b6f      	ldr	r3, [pc, #444]	@ (8008114 <CUSTOM_HID_OutEvent_FS+0x1d0>)
 8007f56:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007f5a:	4a6e      	ldr	r2, [pc, #440]	@ (8008114 <CUSTOM_HID_OutEvent_FS+0x1d0>)
 8007f5c:	33b0      	adds	r3, #176	@ 0xb0
 8007f5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007f62:	613b      	str	r3, [r7, #16]
	g_hhid = hhid;
 8007f64:	4a6c      	ldr	r2, [pc, #432]	@ (8008118 <CUSTOM_HID_OutEvent_FS+0x1d4>)
 8007f66:	693b      	ldr	r3, [r7, #16]
 8007f68:	6013      	str	r3, [r2, #0]
	switch (event_idx)
 8007f6a:	79fb      	ldrb	r3, [r7, #7]
 8007f6c:	3b01      	subs	r3, #1
 8007f6e:	2b10      	cmp	r3, #16
 8007f70:	f200 80bc 	bhi.w	80080ec <CUSTOM_HID_OutEvent_FS+0x1a8>
 8007f74:	a201      	add	r2, pc, #4	@ (adr r2, 8007f7c <CUSTOM_HID_OutEvent_FS+0x38>)
 8007f76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f7a:	bf00      	nop
 8007f7c:	08007fd5 	.word	0x08007fd5
 8007f80:	080080ed 	.word	0x080080ed
 8007f84:	08007fdf 	.word	0x08007fdf
 8007f88:	080080ed 	.word	0x080080ed
 8007f8c:	08007fcb 	.word	0x08007fcb
 8007f90:	080080ed 	.word	0x080080ed
 8007f94:	080080ed 	.word	0x080080ed
 8007f98:	080080ed 	.word	0x080080ed
 8007f9c:	080080ed 	.word	0x080080ed
 8007fa0:	0800800b 	.word	0x0800800b
 8007fa4:	08007ffd 	.word	0x08007ffd
 8007fa8:	08007fe9 	.word	0x08007fe9
 8007fac:	08007ff3 	.word	0x08007ff3
 8007fb0:	080080ed 	.word	0x080080ed
 8007fb4:	080080ed 	.word	0x080080ed
 8007fb8:	080080ed 	.word	0x080080ed
 8007fbc:	08007fc1 	.word	0x08007fc1
	{
	case HID_ID_NEWEFREP:
		create_new_effect(state);
 8007fc0:	79bb      	ldrb	r3, [r7, #6]
 8007fc2:	4618      	mov	r0, r3
 8007fc4:	f000 f920 	bl	8008208 <create_new_effect>
		break;
 8007fc8:	e095      	b.n	80080f6 <CUSTOM_HID_OutEvent_FS+0x1b2>

	case HID_ID_CONSTREP:
		process_set_constant_force((const FFB_SetConstantForce_Data_t*) hhid->Report_buf);
 8007fca:	693b      	ldr	r3, [r7, #16]
 8007fcc:	4618      	mov	r0, r3
 8007fce:	f000 f975 	bl	80082bc <process_set_constant_force>
		break;
 8007fd2:	e090      	b.n	80080f6 <CUSTOM_HID_OutEvent_FS+0x1b2>

	case HID_ID_EFFREP:
		process_set_effect((const FFB_SetEffect_t*) hhid->Report_buf);
 8007fd4:	693b      	ldr	r3, [r7, #16]
 8007fd6:	4618      	mov	r0, r3
 8007fd8:	f000 f998 	bl	800830c <process_set_effect>
		break;
 8007fdc:	e08b      	b.n	80080f6 <CUSTOM_HID_OutEvent_FS+0x1b2>

	case HID_ID_CONDREP:
		process_set_condition((const FFB_SetCondition_Data_t*) hhid->Report_buf);
 8007fde:	693b      	ldr	r3, [r7, #16]
 8007fe0:	4618      	mov	r0, r3
 8007fe2:	f000 f9d7 	bl	8008394 <process_set_condition>
		break;
 8007fe6:	e086      	b.n	80080f6 <CUSTOM_HID_OutEvent_FS+0x1b2>

	case HID_ID_CTRLREP:
		handle_ffb_control(state); // state = command bitmask
 8007fe8:	79bb      	ldrb	r3, [r7, #6]
 8007fea:	4618      	mov	r0, r3
 8007fec:	f000 fa86 	bl	80084fc <handle_ffb_control>
		break;
 8007ff0:	e081      	b.n	80080f6 <CUSTOM_HID_OutEvent_FS+0x1b2>

	case HID_ID_GAINREP:
		set_global_gain(state);
 8007ff2:	79bb      	ldrb	r3, [r7, #6]
 8007ff4:	4618      	mov	r0, r3
 8007ff6:	f000 fab9 	bl	800856c <set_global_gain>
		break;
 8007ffa:	e07c      	b.n	80080f6 <CUSTOM_HID_OutEvent_FS+0x1b2>

	case HID_ID_BLKFRREP:
		free_effect(state - 1); // state = effect block index
 8007ffc:	79bb      	ldrb	r3, [r7, #6]
 8007ffe:	3b01      	subs	r3, #1
 8008000:	b2db      	uxtb	r3, r3
 8008002:	4618      	mov	r0, r3
 8008004:	f000 fac4 	bl	8008590 <free_effect>
		break;
 8008008:	e075      	b.n	80080f6 <CUSTOM_HID_OutEvent_FS+0x1b2>

	case HID_ID_EFOPREP:
	{
		const FFB_EffOp_Data_t* effop = (const FFB_EffOp_Data_t*) hhid->Report_buf;
 800800a:	693b      	ldr	r3, [r7, #16]
 800800c:	60fb      	str	r3, [r7, #12]
		uint8_t id = effop->effectBlockIndex - 1;
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	785b      	ldrb	r3, [r3, #1]
 8008012:	3b01      	subs	r3, #1
 8008014:	72fb      	strb	r3, [r7, #11]

		if (id >= MAX_EFFECTS)
 8008016:	7afb      	ldrb	r3, [r7, #11]
 8008018:	2b27      	cmp	r3, #39	@ 0x27
 800801a:	d869      	bhi.n	80080f0 <CUSTOM_HID_OutEvent_FS+0x1ac>
			break;

		switch (effop->state)
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	789b      	ldrb	r3, [r3, #2]
 8008020:	2b03      	cmp	r3, #3
 8008022:	d058      	beq.n	80080d6 <CUSTOM_HID_OutEvent_FS+0x192>
 8008024:	2b03      	cmp	r3, #3
 8008026:	dc65      	bgt.n	80080f4 <CUSTOM_HID_OutEvent_FS+0x1b0>
 8008028:	2b01      	cmp	r3, #1
 800802a:	d002      	beq.n	8008032 <CUSTOM_HID_OutEvent_FS+0xee>
 800802c:	2b02      	cmp	r3, #2
 800802e:	d020      	beq.n	8008072 <CUSTOM_HID_OutEvent_FS+0x12e>

			case 3: // Stop
				effects[id].state = 0;
				break;
		}
		break;
 8008030:	e060      	b.n	80080f4 <CUSTOM_HID_OutEvent_FS+0x1b0>
				effects[id].state = 1;
 8008032:	7afa      	ldrb	r2, [r7, #11]
 8008034:	4939      	ldr	r1, [pc, #228]	@ (800811c <CUSTOM_HID_OutEvent_FS+0x1d8>)
 8008036:	4613      	mov	r3, r2
 8008038:	011b      	lsls	r3, r3, #4
 800803a:	1a9b      	subs	r3, r3, r2
 800803c:	009b      	lsls	r3, r3, #2
 800803e:	440b      	add	r3, r1
 8008040:	2201      	movs	r2, #1
 8008042:	701a      	strb	r2, [r3, #0]
				effects[id].startTime = HAL_GetTick() + effects[id].startDelay;
 8008044:	f7f8 ffcc 	bl	8000fe0 <HAL_GetTick>
 8008048:	4601      	mov	r1, r0
 800804a:	7afa      	ldrb	r2, [r7, #11]
 800804c:	4833      	ldr	r0, [pc, #204]	@ (800811c <CUSTOM_HID_OutEvent_FS+0x1d8>)
 800804e:	4613      	mov	r3, r2
 8008050:	011b      	lsls	r3, r3, #4
 8008052:	1a9b      	subs	r3, r3, r2
 8008054:	009b      	lsls	r3, r3, #2
 8008056:	4403      	add	r3, r0
 8008058:	3330      	adds	r3, #48	@ 0x30
 800805a:	881b      	ldrh	r3, [r3, #0]
 800805c:	7afa      	ldrb	r2, [r7, #11]
 800805e:	4419      	add	r1, r3
 8008060:	482e      	ldr	r0, [pc, #184]	@ (800811c <CUSTOM_HID_OutEvent_FS+0x1d8>)
 8008062:	4613      	mov	r3, r2
 8008064:	011b      	lsls	r3, r3, #4
 8008066:	1a9b      	subs	r3, r3, r2
 8008068:	009b      	lsls	r3, r3, #2
 800806a:	4403      	add	r3, r0
 800806c:	3334      	adds	r3, #52	@ 0x34
 800806e:	6019      	str	r1, [r3, #0]
				break;
 8008070:	e03b      	b.n	80080ea <CUSTOM_HID_OutEvent_FS+0x1a6>
				for (int i = 0; i < MAX_EFFECTS; i++) effects[i].state = 0;
 8008072:	2300      	movs	r3, #0
 8008074:	617b      	str	r3, [r7, #20]
 8008076:	e00b      	b.n	8008090 <CUSTOM_HID_OutEvent_FS+0x14c>
 8008078:	4928      	ldr	r1, [pc, #160]	@ (800811c <CUSTOM_HID_OutEvent_FS+0x1d8>)
 800807a:	697a      	ldr	r2, [r7, #20]
 800807c:	4613      	mov	r3, r2
 800807e:	011b      	lsls	r3, r3, #4
 8008080:	1a9b      	subs	r3, r3, r2
 8008082:	009b      	lsls	r3, r3, #2
 8008084:	440b      	add	r3, r1
 8008086:	2200      	movs	r2, #0
 8008088:	701a      	strb	r2, [r3, #0]
 800808a:	697b      	ldr	r3, [r7, #20]
 800808c:	3301      	adds	r3, #1
 800808e:	617b      	str	r3, [r7, #20]
 8008090:	697b      	ldr	r3, [r7, #20]
 8008092:	2b27      	cmp	r3, #39	@ 0x27
 8008094:	ddf0      	ble.n	8008078 <CUSTOM_HID_OutEvent_FS+0x134>
				effects[id].state = 1;
 8008096:	7afa      	ldrb	r2, [r7, #11]
 8008098:	4920      	ldr	r1, [pc, #128]	@ (800811c <CUSTOM_HID_OutEvent_FS+0x1d8>)
 800809a:	4613      	mov	r3, r2
 800809c:	011b      	lsls	r3, r3, #4
 800809e:	1a9b      	subs	r3, r3, r2
 80080a0:	009b      	lsls	r3, r3, #2
 80080a2:	440b      	add	r3, r1
 80080a4:	2201      	movs	r2, #1
 80080a6:	701a      	strb	r2, [r3, #0]
				effects[id].startTime = HAL_GetTick() + effects[id].startDelay;
 80080a8:	f7f8 ff9a 	bl	8000fe0 <HAL_GetTick>
 80080ac:	4601      	mov	r1, r0
 80080ae:	7afa      	ldrb	r2, [r7, #11]
 80080b0:	481a      	ldr	r0, [pc, #104]	@ (800811c <CUSTOM_HID_OutEvent_FS+0x1d8>)
 80080b2:	4613      	mov	r3, r2
 80080b4:	011b      	lsls	r3, r3, #4
 80080b6:	1a9b      	subs	r3, r3, r2
 80080b8:	009b      	lsls	r3, r3, #2
 80080ba:	4403      	add	r3, r0
 80080bc:	3330      	adds	r3, #48	@ 0x30
 80080be:	881b      	ldrh	r3, [r3, #0]
 80080c0:	7afa      	ldrb	r2, [r7, #11]
 80080c2:	4419      	add	r1, r3
 80080c4:	4815      	ldr	r0, [pc, #84]	@ (800811c <CUSTOM_HID_OutEvent_FS+0x1d8>)
 80080c6:	4613      	mov	r3, r2
 80080c8:	011b      	lsls	r3, r3, #4
 80080ca:	1a9b      	subs	r3, r3, r2
 80080cc:	009b      	lsls	r3, r3, #2
 80080ce:	4403      	add	r3, r0
 80080d0:	3334      	adds	r3, #52	@ 0x34
 80080d2:	6019      	str	r1, [r3, #0]
				break;
 80080d4:	e009      	b.n	80080ea <CUSTOM_HID_OutEvent_FS+0x1a6>
				effects[id].state = 0;
 80080d6:	7afa      	ldrb	r2, [r7, #11]
 80080d8:	4910      	ldr	r1, [pc, #64]	@ (800811c <CUSTOM_HID_OutEvent_FS+0x1d8>)
 80080da:	4613      	mov	r3, r2
 80080dc:	011b      	lsls	r3, r3, #4
 80080de:	1a9b      	subs	r3, r3, r2
 80080e0:	009b      	lsls	r3, r3, #2
 80080e2:	440b      	add	r3, r1
 80080e4:	2200      	movs	r2, #0
 80080e6:	701a      	strb	r2, [r3, #0]
				break;
 80080e8:	bf00      	nop
		break;
 80080ea:	e003      	b.n	80080f4 <CUSTOM_HID_OutEvent_FS+0x1b0>
	}

	default:
		break;
 80080ec:	bf00      	nop
 80080ee:	e002      	b.n	80080f6 <CUSTOM_HID_OutEvent_FS+0x1b2>
			break;
 80080f0:	bf00      	nop
 80080f2:	e000      	b.n	80080f6 <CUSTOM_HID_OutEvent_FS+0x1b2>
		break;
 80080f4:	bf00      	nop
	}

	/* Start next USB packet transfer once data processing is completed */
	if (USBD_CUSTOM_HID_ReceivePacket(&hUsbDeviceFS) != (uint8_t)USBD_OK)
 80080f6:	4807      	ldr	r0, [pc, #28]	@ (8008114 <CUSTOM_HID_OutEvent_FS+0x1d0>)
 80080f8:	f7fe fb66 	bl	80067c8 <USBD_CUSTOM_HID_ReceivePacket>
 80080fc:	4603      	mov	r3, r0
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d002      	beq.n	8008108 <CUSTOM_HID_OutEvent_FS+0x1c4>
	{
		return -1;
 8008102:	f04f 33ff 	mov.w	r3, #4294967295
 8008106:	e000      	b.n	800810a <CUSTOM_HID_OutEvent_FS+0x1c6>
	}

	return (USBD_OK);
 8008108:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800810a:	4618      	mov	r0, r3
 800810c:	3718      	adds	r7, #24
 800810e:	46bd      	mov	sp, r7
 8008110:	bd80      	pop	{r7, pc}
 8008112:	bf00      	nop
 8008114:	20000650 	.word	0x20000650
 8008118:	2000092c 	.word	0x2000092c
 800811c:	20000930 	.word	0x20000930

08008120 <CUSTOM_HID_GetReport>:
  * @param  event_idx: event index
  * @param  state: event state
  * @retval return pointer to HID report
  */
static uint8_t *CUSTOM_HID_GetReport(uint16_t *ReportLength)
{
 8008120:	b480      	push	{r7}
 8008122:	b085      	sub	sp, #20
 8008124:	af00      	add	r7, sp, #0
 8008126:	6078      	str	r0, [r7, #4]
	static uint8_t reportBuffer[sizeof(FFB_BlockLoad_Feature_Data_t)];

	uint8_t report_id = hUsbDeviceFS.request.bRequest == CUSTOM_HID_REQ_GET_REPORT
 8008128:	4b1c      	ldr	r3, [pc, #112]	@ (800819c <CUSTOM_HID_GetReport+0x7c>)
 800812a:	f893 32ab 	ldrb.w	r3, [r3, #683]	@ 0x2ab
 800812e:	2b01      	cmp	r3, #1
 8008130:	d104      	bne.n	800813c <CUSTOM_HID_GetReport+0x1c>
	                  ? hUsbDeviceFS.request.wValue & 0xFF
 8008132:	4b1a      	ldr	r3, [pc, #104]	@ (800819c <CUSTOM_HID_GetReport+0x7c>)
 8008134:	f8b3 32ac 	ldrh.w	r3, [r3, #684]	@ 0x2ac
	uint8_t report_id = hUsbDeviceFS.request.bRequest == CUSTOM_HID_REQ_GET_REPORT
 8008138:	b2db      	uxtb	r3, r3
 800813a:	e000      	b.n	800813e <CUSTOM_HID_GetReport+0x1e>
 800813c:	2300      	movs	r3, #0
 800813e:	73fb      	strb	r3, [r7, #15]
	                  : 0;

	switch (report_id)
 8008140:	7bfb      	ldrb	r3, [r7, #15]
 8008142:	2b12      	cmp	r3, #18
 8008144:	d002      	beq.n	800814c <CUSTOM_HID_GetReport+0x2c>
 8008146:	2b13      	cmp	r3, #19
 8008148:	d00e      	beq.n	8008168 <CUSTOM_HID_GetReport+0x48>
 800814a:	e018      	b.n	800817e <CUSTOM_HID_GetReport+0x5e>
	{
	case HID_ID_BLKLDREP:
		blockLoadReport.reportId = HID_ID_BLKLDREP;
 800814c:	4b14      	ldr	r3, [pc, #80]	@ (80081a0 <CUSTOM_HID_GetReport+0x80>)
 800814e:	2212      	movs	r2, #18
 8008150:	701a      	strb	r2, [r3, #0]
		memcpy(reportBuffer, &blockLoadReport, sizeof(FFB_BlockLoad_Feature_Data_t));
 8008152:	4b14      	ldr	r3, [pc, #80]	@ (80081a4 <CUSTOM_HID_GetReport+0x84>)
 8008154:	4a12      	ldr	r2, [pc, #72]	@ (80081a0 <CUSTOM_HID_GetReport+0x80>)
 8008156:	e892 0003 	ldmia.w	r2, {r0, r1}
 800815a:	6018      	str	r0, [r3, #0]
 800815c:	3304      	adds	r3, #4
 800815e:	7019      	strb	r1, [r3, #0]
		*ReportLength = sizeof(FFB_BlockLoad_Feature_Data_t);
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	2205      	movs	r2, #5
 8008164:	801a      	strh	r2, [r3, #0]
		break;
 8008166:	e011      	b.n	800818c <CUSTOM_HID_GetReport+0x6c>
			.reportId = HID_ID_POOLREP,
			.ramPoolSize = MAX_EFFECTS * sizeof(FFB_Effect),
			.maxSimultaneousEffects = MAX_EFFECTS,
			.memoryManagement = 1
		};
		memcpy(reportBuffer, &poolReport, sizeof(poolReport));
 8008168:	4b0e      	ldr	r3, [pc, #56]	@ (80081a4 <CUSTOM_HID_GetReport+0x84>)
 800816a:	4a0f      	ldr	r2, [pc, #60]	@ (80081a8 <CUSTOM_HID_GetReport+0x88>)
 800816c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8008170:	6018      	str	r0, [r3, #0]
 8008172:	3304      	adds	r3, #4
 8008174:	7019      	strb	r1, [r3, #0]
		*ReportLength = sizeof(poolReport);
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	2205      	movs	r2, #5
 800817a:	801a      	strh	r2, [r3, #0]
		break;
 800817c:	e006      	b.n	800818c <CUSTOM_HID_GetReport+0x6c>
	}

	default:
		reportBuffer[0] = 0;
 800817e:	4b09      	ldr	r3, [pc, #36]	@ (80081a4 <CUSTOM_HID_GetReport+0x84>)
 8008180:	2200      	movs	r2, #0
 8008182:	701a      	strb	r2, [r3, #0]
		*ReportLength = 1;
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	2201      	movs	r2, #1
 8008188:	801a      	strh	r2, [r3, #0]
		break;
 800818a:	bf00      	nop
	}

	return reportBuffer;
 800818c:	4b05      	ldr	r3, [pc, #20]	@ (80081a4 <CUSTOM_HID_GetReport+0x84>)
}
 800818e:	4618      	mov	r0, r3
 8008190:	3714      	adds	r7, #20
 8008192:	46bd      	mov	sp, r7
 8008194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008198:	4770      	bx	lr
 800819a:	bf00      	nop
 800819c:	20000650 	.word	0x20000650
 80081a0:	20001290 	.word	0x20001290
 80081a4:	20001298 	.word	0x20001298
 80081a8:	200004e0 	.word	0x200004e0

080081ac <find_free_effect>:

/* USER CODE END 7 */

/* USER CODE BEGIN PRIVATE_FUNCTIONS_IMPLEMENTATION */
int find_free_effect(void)
{
 80081ac:	b480      	push	{r7}
 80081ae:	b083      	sub	sp, #12
 80081b0:	af00      	add	r7, sp, #0
	for (int i = 0; i < MAX_EFFECTS; i++)
 80081b2:	2300      	movs	r3, #0
 80081b4:	607b      	str	r3, [r7, #4]
 80081b6:	e01a      	b.n	80081ee <find_free_effect+0x42>
	{
		if (effects[i].state == 0 && effects[i].type == 0)
 80081b8:	4912      	ldr	r1, [pc, #72]	@ (8008204 <find_free_effect+0x58>)
 80081ba:	687a      	ldr	r2, [r7, #4]
 80081bc:	4613      	mov	r3, r2
 80081be:	011b      	lsls	r3, r3, #4
 80081c0:	1a9b      	subs	r3, r3, r2
 80081c2:	009b      	lsls	r3, r3, #2
 80081c4:	440b      	add	r3, r1
 80081c6:	781b      	ldrb	r3, [r3, #0]
 80081c8:	b2db      	uxtb	r3, r3
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d10c      	bne.n	80081e8 <find_free_effect+0x3c>
 80081ce:	490d      	ldr	r1, [pc, #52]	@ (8008204 <find_free_effect+0x58>)
 80081d0:	687a      	ldr	r2, [r7, #4]
 80081d2:	4613      	mov	r3, r2
 80081d4:	011b      	lsls	r3, r3, #4
 80081d6:	1a9b      	subs	r3, r3, r2
 80081d8:	009b      	lsls	r3, r3, #2
 80081da:	440b      	add	r3, r1
 80081dc:	3301      	adds	r3, #1
 80081de:	781b      	ldrb	r3, [r3, #0]
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d101      	bne.n	80081e8 <find_free_effect+0x3c>
			return i;
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	e007      	b.n	80081f8 <find_free_effect+0x4c>
	for (int i = 0; i < MAX_EFFECTS; i++)
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	3301      	adds	r3, #1
 80081ec:	607b      	str	r3, [r7, #4]
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	2b27      	cmp	r3, #39	@ 0x27
 80081f2:	dde1      	ble.n	80081b8 <find_free_effect+0xc>
	}
	return -1;
 80081f4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80081f8:	4618      	mov	r0, r3
 80081fa:	370c      	adds	r7, #12
 80081fc:	46bd      	mov	sp, r7
 80081fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008202:	4770      	bx	lr
 8008204:	20000930 	.word	0x20000930

08008208 <create_new_effect>:

void create_new_effect(uint8_t effect_type)
{
 8008208:	b580      	push	{r7, lr}
 800820a:	b084      	sub	sp, #16
 800820c:	af00      	add	r7, sp, #0
 800820e:	4603      	mov	r3, r0
 8008210:	71fb      	strb	r3, [r7, #7]
	int id = find_free_effect();
 8008212:	f7ff ffcb 	bl	80081ac <find_free_effect>
 8008216:	60f8      	str	r0, [r7, #12]
	if (id == -1)
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800821e:	d10e      	bne.n	800823e <create_new_effect+0x36>
	{
		blockLoadReport.reportId = HID_ID_BLKLDREP;
 8008220:	4b24      	ldr	r3, [pc, #144]	@ (80082b4 <create_new_effect+0xac>)
 8008222:	2212      	movs	r2, #18
 8008224:	701a      	strb	r2, [r3, #0]
		blockLoadReport.loadStatus = 2; // Load error
 8008226:	4b23      	ldr	r3, [pc, #140]	@ (80082b4 <create_new_effect+0xac>)
 8008228:	2202      	movs	r2, #2
 800822a:	709a      	strb	r2, [r3, #2]
		blockLoadReport.effectBlockIndex = 0;
 800822c:	4b21      	ldr	r3, [pc, #132]	@ (80082b4 <create_new_effect+0xac>)
 800822e:	2200      	movs	r2, #0
 8008230:	705a      	strb	r2, [r3, #1]
		blockLoadReport.ramPoolAvailable = 0;
 8008232:	4b20      	ldr	r3, [pc, #128]	@ (80082b4 <create_new_effect+0xac>)
 8008234:	2200      	movs	r2, #0
 8008236:	70da      	strb	r2, [r3, #3]
 8008238:	2200      	movs	r2, #0
 800823a:	711a      	strb	r2, [r3, #4]
		return;
 800823c:	e037      	b.n	80082ae <create_new_effect+0xa6>
	}

	memset(&effects[id], 0, sizeof(FFB_Effect)); // Clean slate
 800823e:	68fa      	ldr	r2, [r7, #12]
 8008240:	4613      	mov	r3, r2
 8008242:	011b      	lsls	r3, r3, #4
 8008244:	1a9b      	subs	r3, r3, r2
 8008246:	009b      	lsls	r3, r3, #2
 8008248:	4a1b      	ldr	r2, [pc, #108]	@ (80082b8 <create_new_effect+0xb0>)
 800824a:	4413      	add	r3, r2
 800824c:	223c      	movs	r2, #60	@ 0x3c
 800824e:	2100      	movs	r1, #0
 8008250:	4618      	mov	r0, r3
 8008252:	f001 fafb 	bl	800984c <memset>
	effects[id].type = effect_type;
 8008256:	4918      	ldr	r1, [pc, #96]	@ (80082b8 <create_new_effect+0xb0>)
 8008258:	68fa      	ldr	r2, [r7, #12]
 800825a:	4613      	mov	r3, r2
 800825c:	011b      	lsls	r3, r3, #4
 800825e:	1a9b      	subs	r3, r3, r2
 8008260:	009b      	lsls	r3, r3, #2
 8008262:	440b      	add	r3, r1
 8008264:	3301      	adds	r3, #1
 8008266:	79fa      	ldrb	r2, [r7, #7]
 8008268:	701a      	strb	r2, [r3, #0]
	effects[id].gain = 255; // default full gain
 800826a:	4913      	ldr	r1, [pc, #76]	@ (80082b8 <create_new_effect+0xb0>)
 800826c:	68fa      	ldr	r2, [r7, #12]
 800826e:	4613      	mov	r3, r2
 8008270:	011b      	lsls	r3, r3, #4
 8008272:	1a9b      	subs	r3, r3, r2
 8008274:	009b      	lsls	r3, r3, #2
 8008276:	440b      	add	r3, r1
 8008278:	3304      	adds	r3, #4
 800827a:	22ff      	movs	r2, #255	@ 0xff
 800827c:	701a      	strb	r2, [r3, #0]

	blockLoadReport.reportId = HID_ID_BLKLDREP;
 800827e:	4b0d      	ldr	r3, [pc, #52]	@ (80082b4 <create_new_effect+0xac>)
 8008280:	2212      	movs	r2, #18
 8008282:	701a      	strb	r2, [r3, #0]
	blockLoadReport.effectBlockIndex = id + 1;
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	b2db      	uxtb	r3, r3
 8008288:	3301      	adds	r3, #1
 800828a:	b2da      	uxtb	r2, r3
 800828c:	4b09      	ldr	r3, [pc, #36]	@ (80082b4 <create_new_effect+0xac>)
 800828e:	705a      	strb	r2, [r3, #1]
	blockLoadReport.loadStatus = 1; // Success
 8008290:	4b08      	ldr	r3, [pc, #32]	@ (80082b4 <create_new_effect+0xac>)
 8008292:	2201      	movs	r2, #1
 8008294:	709a      	strb	r2, [r3, #2]
	blockLoadReport.ramPoolAvailable = (MAX_EFFECTS - (id + 1)) * sizeof(FFB_Effect);
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	f1c3 0327 	rsb	r3, r3, #39	@ 0x27
 800829c:	b29b      	uxth	r3, r3
 800829e:	461a      	mov	r2, r3
 80082a0:	0112      	lsls	r2, r2, #4
 80082a2:	1ad3      	subs	r3, r2, r3
 80082a4:	009b      	lsls	r3, r3, #2
 80082a6:	b29a      	uxth	r2, r3
 80082a8:	4b02      	ldr	r3, [pc, #8]	@ (80082b4 <create_new_effect+0xac>)
 80082aa:	f8a3 2003 	strh.w	r2, [r3, #3]

	//send_status_report();
}
 80082ae:	3710      	adds	r7, #16
 80082b0:	46bd      	mov	sp, r7
 80082b2:	bd80      	pop	{r7, pc}
 80082b4:	20001290 	.word	0x20001290
 80082b8:	20000930 	.word	0x20000930

080082bc <process_set_constant_force>:


void process_set_constant_force(const FFB_SetConstantForce_Data_t* report)
{
 80082bc:	b480      	push	{r7}
 80082be:	b085      	sub	sp, #20
 80082c0:	af00      	add	r7, sp, #0
 80082c2:	6078      	str	r0, [r7, #4]
	if (report->effectBlockIndex == 0 || report->effectBlockIndex > MAX_EFFECTS)
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	785b      	ldrb	r3, [r3, #1]
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d016      	beq.n	80082fa <process_set_constant_force+0x3e>
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	785b      	ldrb	r3, [r3, #1]
 80082d0:	2b28      	cmp	r3, #40	@ 0x28
 80082d2:	d812      	bhi.n	80082fa <process_set_constant_force+0x3e>
		return;

	uint8_t id = report->effectBlockIndex - 1;
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	785b      	ldrb	r3, [r3, #1]
 80082d8:	3b01      	subs	r3, #1
 80082da:	73fb      	strb	r3, [r7, #15]
	effects[id].magnitude = report->magnitude;
 80082dc:	7bfa      	ldrb	r2, [r7, #15]
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80082e4:	b218      	sxth	r0, r3
 80082e6:	4908      	ldr	r1, [pc, #32]	@ (8008308 <process_set_constant_force+0x4c>)
 80082e8:	4613      	mov	r3, r2
 80082ea:	011b      	lsls	r3, r3, #4
 80082ec:	1a9b      	subs	r3, r3, r2
 80082ee:	009b      	lsls	r3, r3, #2
 80082f0:	440b      	add	r3, r1
 80082f2:	3306      	adds	r3, #6
 80082f4:	4602      	mov	r2, r0
 80082f6:	801a      	strh	r2, [r3, #0]
 80082f8:	e000      	b.n	80082fc <process_set_constant_force+0x40>
		return;
 80082fa:	bf00      	nop
}
 80082fc:	3714      	adds	r7, #20
 80082fe:	46bd      	mov	sp, r7
 8008300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008304:	4770      	bx	lr
 8008306:	bf00      	nop
 8008308:	20000930 	.word	0x20000930

0800830c <process_set_effect>:

void process_set_effect(const FFB_SetEffect_t* report)
{
 800830c:	b480      	push	{r7}
 800830e:	b085      	sub	sp, #20
 8008310:	af00      	add	r7, sp, #0
 8008312:	6078      	str	r0, [r7, #4]
	if (report->effectBlockIndex == 0 || report->effectBlockIndex > MAX_EFFECTS)
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	785b      	ldrb	r3, [r3, #1]
 8008318:	2b00      	cmp	r3, #0
 800831a:	d032      	beq.n	8008382 <process_set_effect+0x76>
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	785b      	ldrb	r3, [r3, #1]
 8008320:	2b28      	cmp	r3, #40	@ 0x28
 8008322:	d82e      	bhi.n	8008382 <process_set_effect+0x76>
		return;

	uint8_t id = report->effectBlockIndex - 1;
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	785b      	ldrb	r3, [r3, #1]
 8008328:	3b01      	subs	r3, #1
 800832a:	73fb      	strb	r3, [r7, #15]
	FFB_Effect* effect = &effects[id];
 800832c:	7bfa      	ldrb	r2, [r7, #15]
 800832e:	4613      	mov	r3, r2
 8008330:	011b      	lsls	r3, r3, #4
 8008332:	1a9b      	subs	r3, r3, r2
 8008334:	009b      	lsls	r3, r3, #2
 8008336:	4a16      	ldr	r2, [pc, #88]	@ (8008390 <process_set_effect+0x84>)
 8008338:	4413      	add	r3, r2
 800833a:	60bb      	str	r3, [r7, #8]

	effect->type = report->effectType;
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	789a      	ldrb	r2, [r3, #2]
 8008340:	68bb      	ldr	r3, [r7, #8]
 8008342:	705a      	strb	r2, [r3, #1]
	effect->gain = report->gain;
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	7ada      	ldrb	r2, [r3, #11]
 8008348:	68bb      	ldr	r3, [r7, #8]
 800834a:	711a      	strb	r2, [r3, #4]
	effect->duration = report->duration;
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8008352:	b29b      	uxth	r3, r3
 8008354:	461a      	mov	r2, r3
 8008356:	68bb      	ldr	r3, [r7, #8]
 8008358:	621a      	str	r2, [r3, #32]
	effect->samplePeriod = report->samplePeriod;
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 8008360:	b29a      	uxth	r2, r3
 8008362:	68bb      	ldr	r3, [r7, #8]
 8008364:	871a      	strh	r2, [r3, #56]	@ 0x38
	effect->startDelay = report->startDelay;
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	f8b3 3009 	ldrh.w	r3, [r3, #9]
 800836c:	b29a      	uxth	r2, r3
 800836e:	68bb      	ldr	r3, [r7, #8]
 8008370:	861a      	strh	r2, [r3, #48]	@ 0x30
	effect->offset = 0;
 8008372:	68bb      	ldr	r3, [r7, #8]
 8008374:	2200      	movs	r2, #0
 8008376:	805a      	strh	r2, [r3, #2]
	effect->useEnvelope = false;
 8008378:	68bb      	ldr	r3, [r7, #8]
 800837a:	2200      	movs	r2, #0
 800837c:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
 8008380:	e000      	b.n	8008384 <process_set_effect+0x78>
		return;
 8008382:	bf00      	nop

	//send_status_report();
}
 8008384:	3714      	adds	r7, #20
 8008386:	46bd      	mov	sp, r7
 8008388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800838c:	4770      	bx	lr
 800838e:	bf00      	nop
 8008390:	20000930 	.word	0x20000930

08008394 <process_set_condition>:

void process_set_condition(const FFB_SetCondition_Data_t* report)
{
 8008394:	b480      	push	{r7}
 8008396:	b085      	sub	sp, #20
 8008398:	af00      	add	r7, sp, #0
 800839a:	6078      	str	r0, [r7, #4]
	if (report->effectBlockIndex == 0 || report->effectBlockIndex > MAX_EFFECTS)
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	785b      	ldrb	r3, [r3, #1]
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	d05e      	beq.n	8008462 <process_set_condition+0xce>
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	785b      	ldrb	r3, [r3, #1]
 80083a8:	2b28      	cmp	r3, #40	@ 0x28
 80083aa:	d85a      	bhi.n	8008462 <process_set_condition+0xce>
		return;

	uint8_t id = report->effectBlockIndex - 1;
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	785b      	ldrb	r3, [r3, #1]
 80083b0:	3b01      	subs	r3, #1
 80083b2:	73fb      	strb	r3, [r7, #15]
	uint8_t axis = report->parameterBlockOffset;
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	789b      	ldrb	r3, [r3, #2]
 80083b8:	73bb      	strb	r3, [r7, #14]

	if (axis >= MAX_AXIS)
 80083ba:	7bbb      	ldrb	r3, [r7, #14]
 80083bc:	2b00      	cmp	r3, #0
 80083be:	d152      	bne.n	8008466 <process_set_condition+0xd2>
		return;

	FFB_Effect_Condition* cond = &effects[id].conditions[axis];
 80083c0:	7bf9      	ldrb	r1, [r7, #15]
 80083c2:	7bbb      	ldrb	r3, [r7, #14]
 80083c4:	461a      	mov	r2, r3
 80083c6:	0052      	lsls	r2, r2, #1
 80083c8:	441a      	add	r2, r3
 80083ca:	0093      	lsls	r3, r2, #2
 80083cc:	461a      	mov	r2, r3
 80083ce:	460b      	mov	r3, r1
 80083d0:	011b      	lsls	r3, r3, #4
 80083d2:	1a5b      	subs	r3, r3, r1
 80083d4:	009b      	lsls	r3, r3, #2
 80083d6:	4413      	add	r3, r2
 80083d8:	3310      	adds	r3, #16
 80083da:	4a26      	ldr	r2, [pc, #152]	@ (8008474 <process_set_condition+0xe0>)
 80083dc:	4413      	add	r3, r2
 80083de:	60bb      	str	r3, [r7, #8]

	cond->cpOffset = report->cpOffset;
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	f9b3 3003 	ldrsh.w	r3, [r3, #3]
 80083e6:	b21a      	sxth	r2, r3
 80083e8:	68bb      	ldr	r3, [r7, #8]
 80083ea:	801a      	strh	r2, [r3, #0]
	cond->positiveCoefficient = report->positiveCoefficient;
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	f9b3 3005 	ldrsh.w	r3, [r3, #5]
 80083f2:	b21a      	sxth	r2, r3
 80083f4:	68bb      	ldr	r3, [r7, #8]
 80083f6:	805a      	strh	r2, [r3, #2]
	cond->negativeCoefficient = report->negativeCoefficient;
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	f9b3 3007 	ldrsh.w	r3, [r3, #7]
 80083fe:	b21a      	sxth	r2, r3
 8008400:	68bb      	ldr	r3, [r7, #8]
 8008402:	809a      	strh	r2, [r3, #4]
	cond->positiveSaturation = report->positiveSaturation ? report->positiveSaturation : 0x7FFF;
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	f8b3 3009 	ldrh.w	r3, [r3, #9]
 800840a:	b29b      	uxth	r3, r3
 800840c:	2b00      	cmp	r3, #0
 800840e:	d004      	beq.n	800841a <process_set_condition+0x86>
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	f8b3 3009 	ldrh.w	r3, [r3, #9]
 8008416:	b29a      	uxth	r2, r3
 8008418:	e001      	b.n	800841e <process_set_condition+0x8a>
 800841a:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 800841e:	68bb      	ldr	r3, [r7, #8]
 8008420:	80da      	strh	r2, [r3, #6]
	cond->negativeSaturation = report->negativeSaturation ? report->negativeSaturation : 0x7FFF;
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	f8b3 300b 	ldrh.w	r3, [r3, #11]
 8008428:	b29b      	uxth	r3, r3
 800842a:	2b00      	cmp	r3, #0
 800842c:	d004      	beq.n	8008438 <process_set_condition+0xa4>
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	f8b3 300b 	ldrh.w	r3, [r3, #11]
 8008434:	b29a      	uxth	r2, r3
 8008436:	e001      	b.n	800843c <process_set_condition+0xa8>
 8008438:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 800843c:	68bb      	ldr	r3, [r7, #8]
 800843e:	811a      	strh	r2, [r3, #8]
	cond->deadBand = report->deadBand;
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	f8b3 300d 	ldrh.w	r3, [r3, #13]
 8008446:	b29a      	uxth	r2, r3
 8008448:	68bb      	ldr	r3, [r7, #8]
 800844a:	815a      	strh	r2, [r3, #10]

	effects[id].useSingleCondition = (MAX_AXIS == 1 || report->parameterBlockOffset == 0);
 800844c:	7bfa      	ldrb	r2, [r7, #15]
 800844e:	4909      	ldr	r1, [pc, #36]	@ (8008474 <process_set_condition+0xe0>)
 8008450:	4613      	mov	r3, r2
 8008452:	011b      	lsls	r3, r3, #4
 8008454:	1a9b      	subs	r3, r3, r2
 8008456:	009b      	lsls	r3, r3, #2
 8008458:	440b      	add	r3, r1
 800845a:	333b      	adds	r3, #59	@ 0x3b
 800845c:	2201      	movs	r2, #1
 800845e:	701a      	strb	r2, [r3, #0]
 8008460:	e002      	b.n	8008468 <process_set_condition+0xd4>
		return;
 8008462:	bf00      	nop
 8008464:	e000      	b.n	8008468 <process_set_condition+0xd4>
		return;
 8008466:	bf00      	nop
}
 8008468:	3714      	adds	r7, #20
 800846a:	46bd      	mov	sp, r7
 800846c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008470:	4770      	bx	lr
 8008472:	bf00      	nop
 8008474:	20000930 	.word	0x20000930

08008478 <stop_all_effects>:


void stop_all_effects(void)
{
 8008478:	b480      	push	{r7}
 800847a:	b083      	sub	sp, #12
 800847c:	af00      	add	r7, sp, #0
	for (int i = 0; i < MAX_EFFECTS; i++)
 800847e:	2300      	movs	r3, #0
 8008480:	607b      	str	r3, [r7, #4]
 8008482:	e00b      	b.n	800849c <stop_all_effects+0x24>
	{
		effects[i].state = 0;
 8008484:	490a      	ldr	r1, [pc, #40]	@ (80084b0 <stop_all_effects+0x38>)
 8008486:	687a      	ldr	r2, [r7, #4]
 8008488:	4613      	mov	r3, r2
 800848a:	011b      	lsls	r3, r3, #4
 800848c:	1a9b      	subs	r3, r3, r2
 800848e:	009b      	lsls	r3, r3, #2
 8008490:	440b      	add	r3, r1
 8008492:	2200      	movs	r2, #0
 8008494:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < MAX_EFFECTS; i++)
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	3301      	adds	r3, #1
 800849a:	607b      	str	r3, [r7, #4]
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	2b27      	cmp	r3, #39	@ 0x27
 80084a0:	ddf0      	ble.n	8008484 <stop_all_effects+0xc>
	}
}
 80084a2:	bf00      	nop
 80084a4:	bf00      	nop
 80084a6:	370c      	adds	r7, #12
 80084a8:	46bd      	mov	sp, r7
 80084aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ae:	4770      	bx	lr
 80084b0:	20000930 	.word	0x20000930

080084b4 <reset_all_effects>:

void reset_all_effects(void)
{
 80084b4:	b580      	push	{r7, lr}
 80084b6:	af00      	add	r7, sp, #0
	memset(effects, 0, sizeof(effects));
 80084b8:	f44f 6216 	mov.w	r2, #2400	@ 0x960
 80084bc:	2100      	movs	r1, #0
 80084be:	4802      	ldr	r0, [pc, #8]	@ (80084c8 <reset_all_effects+0x14>)
 80084c0:	f001 f9c4 	bl	800984c <memset>
}
 80084c4:	bf00      	nop
 80084c6:	bd80      	pop	{r7, pc}
 80084c8:	20000930 	.word	0x20000930

080084cc <pause_all_effects>:

void pause_all_effects(void)
{
 80084cc:	b480      	push	{r7}
 80084ce:	af00      	add	r7, sp, #0
	ffb_active = false;
 80084d0:	4b03      	ldr	r3, [pc, #12]	@ (80084e0 <pause_all_effects+0x14>)
 80084d2:	2200      	movs	r2, #0
 80084d4:	701a      	strb	r2, [r3, #0]
}
 80084d6:	bf00      	nop
 80084d8:	46bd      	mov	sp, r7
 80084da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084de:	4770      	bx	lr
 80084e0:	20001295 	.word	0x20001295

080084e4 <resume_effects>:

void resume_effects(void)
{
 80084e4:	b480      	push	{r7}
 80084e6:	af00      	add	r7, sp, #0
	ffb_active = true;
 80084e8:	4b03      	ldr	r3, [pc, #12]	@ (80084f8 <resume_effects+0x14>)
 80084ea:	2201      	movs	r2, #1
 80084ec:	701a      	strb	r2, [r3, #0]
}
 80084ee:	bf00      	nop
 80084f0:	46bd      	mov	sp, r7
 80084f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084f6:	4770      	bx	lr
 80084f8:	20001295 	.word	0x20001295

080084fc <handle_ffb_control>:

void handle_ffb_control(uint8_t command)
{
 80084fc:	b580      	push	{r7, lr}
 80084fe:	b082      	sub	sp, #8
 8008500:	af00      	add	r7, sp, #0
 8008502:	4603      	mov	r3, r0
 8008504:	71fb      	strb	r3, [r7, #7]
	if (command & 0x01) ffb_active = true;   // Enable actuators
 8008506:	79fb      	ldrb	r3, [r7, #7]
 8008508:	f003 0301 	and.w	r3, r3, #1
 800850c:	2b00      	cmp	r3, #0
 800850e:	d002      	beq.n	8008516 <handle_ffb_control+0x1a>
 8008510:	4b15      	ldr	r3, [pc, #84]	@ (8008568 <handle_ffb_control+0x6c>)
 8008512:	2201      	movs	r2, #1
 8008514:	701a      	strb	r2, [r3, #0]
	if (command & 0x02) ffb_active = false;  // Disable actuators
 8008516:	79fb      	ldrb	r3, [r7, #7]
 8008518:	f003 0302 	and.w	r3, r3, #2
 800851c:	2b00      	cmp	r3, #0
 800851e:	d002      	beq.n	8008526 <handle_ffb_control+0x2a>
 8008520:	4b11      	ldr	r3, [pc, #68]	@ (8008568 <handle_ffb_control+0x6c>)
 8008522:	2200      	movs	r2, #0
 8008524:	701a      	strb	r2, [r3, #0]
	if (command & 0x04) stop_all_effects();  // Stop all
 8008526:	79fb      	ldrb	r3, [r7, #7]
 8008528:	f003 0304 	and.w	r3, r3, #4
 800852c:	2b00      	cmp	r3, #0
 800852e:	d001      	beq.n	8008534 <handle_ffb_control+0x38>
 8008530:	f7ff ffa2 	bl	8008478 <stop_all_effects>
	if (command & 0x08) reset_all_effects(); // Reset
 8008534:	79fb      	ldrb	r3, [r7, #7]
 8008536:	f003 0308 	and.w	r3, r3, #8
 800853a:	2b00      	cmp	r3, #0
 800853c:	d001      	beq.n	8008542 <handle_ffb_control+0x46>
 800853e:	f7ff ffb9 	bl	80084b4 <reset_all_effects>
	if (command & 0x10) pause_all_effects(); // Pause
 8008542:	79fb      	ldrb	r3, [r7, #7]
 8008544:	f003 0310 	and.w	r3, r3, #16
 8008548:	2b00      	cmp	r3, #0
 800854a:	d001      	beq.n	8008550 <handle_ffb_control+0x54>
 800854c:	f7ff ffbe 	bl	80084cc <pause_all_effects>
	if (command & 0x20) resume_effects();    // Continue
 8008550:	79fb      	ldrb	r3, [r7, #7]
 8008552:	f003 0320 	and.w	r3, r3, #32
 8008556:	2b00      	cmp	r3, #0
 8008558:	d001      	beq.n	800855e <handle_ffb_control+0x62>
 800855a:	f7ff ffc3 	bl	80084e4 <resume_effects>

	//send_status_report();
}
 800855e:	bf00      	nop
 8008560:	3708      	adds	r7, #8
 8008562:	46bd      	mov	sp, r7
 8008564:	bd80      	pop	{r7, pc}
 8008566:	bf00      	nop
 8008568:	20001295 	.word	0x20001295

0800856c <set_global_gain>:

void set_global_gain(uint8_t gain)
{
 800856c:	b480      	push	{r7}
 800856e:	b083      	sub	sp, #12
 8008570:	af00      	add	r7, sp, #0
 8008572:	4603      	mov	r3, r0
 8008574:	71fb      	strb	r3, [r7, #7]
	global_gain = gain;
 8008576:	f997 2007 	ldrsb.w	r2, [r7, #7]
 800857a:	4b04      	ldr	r3, [pc, #16]	@ (800858c <set_global_gain+0x20>)
 800857c:	701a      	strb	r2, [r3, #0]
}
 800857e:	bf00      	nop
 8008580:	370c      	adds	r7, #12
 8008582:	46bd      	mov	sp, r7
 8008584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008588:	4770      	bx	lr
 800858a:	bf00      	nop
 800858c:	20000088 	.word	0x20000088

08008590 <free_effect>:

void free_effect(uint8_t index)
{
 8008590:	b580      	push	{r7, lr}
 8008592:	b082      	sub	sp, #8
 8008594:	af00      	add	r7, sp, #0
 8008596:	4603      	mov	r3, r0
 8008598:	71fb      	strb	r3, [r7, #7]
	if (index >= MAX_EFFECTS)
 800859a:	79fb      	ldrb	r3, [r7, #7]
 800859c:	2b27      	cmp	r3, #39	@ 0x27
 800859e:	d80c      	bhi.n	80085ba <free_effect+0x2a>
		return;

	memset(&effects[index], 0, sizeof(FFB_Effect));
 80085a0:	79fa      	ldrb	r2, [r7, #7]
 80085a2:	4613      	mov	r3, r2
 80085a4:	011b      	lsls	r3, r3, #4
 80085a6:	1a9b      	subs	r3, r3, r2
 80085a8:	009b      	lsls	r3, r3, #2
 80085aa:	4a06      	ldr	r2, [pc, #24]	@ (80085c4 <free_effect+0x34>)
 80085ac:	4413      	add	r3, r2
 80085ae:	223c      	movs	r2, #60	@ 0x3c
 80085b0:	2100      	movs	r1, #0
 80085b2:	4618      	mov	r0, r3
 80085b4:	f001 f94a 	bl	800984c <memset>
 80085b8:	e000      	b.n	80085bc <free_effect+0x2c>
		return;
 80085ba:	bf00      	nop
}
 80085bc:	3708      	adds	r7, #8
 80085be:	46bd      	mov	sp, r7
 80085c0:	bd80      	pop	{r7, pc}
 80085c2:	bf00      	nop
 80085c4:	20000930 	.word	0x20000930

080085c8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80085c8:	b480      	push	{r7}
 80085ca:	b083      	sub	sp, #12
 80085cc:	af00      	add	r7, sp, #0
 80085ce:	4603      	mov	r3, r0
 80085d0:	6039      	str	r1, [r7, #0]
 80085d2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80085d4:	683b      	ldr	r3, [r7, #0]
 80085d6:	2212      	movs	r2, #18
 80085d8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80085da:	4b03      	ldr	r3, [pc, #12]	@ (80085e8 <USBD_FS_DeviceDescriptor+0x20>)
}
 80085dc:	4618      	mov	r0, r3
 80085de:	370c      	adds	r7, #12
 80085e0:	46bd      	mov	sp, r7
 80085e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085e6:	4770      	bx	lr
 80085e8:	20000504 	.word	0x20000504

080085ec <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80085ec:	b480      	push	{r7}
 80085ee:	b083      	sub	sp, #12
 80085f0:	af00      	add	r7, sp, #0
 80085f2:	4603      	mov	r3, r0
 80085f4:	6039      	str	r1, [r7, #0]
 80085f6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80085f8:	683b      	ldr	r3, [r7, #0]
 80085fa:	2204      	movs	r2, #4
 80085fc:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80085fe:	4b03      	ldr	r3, [pc, #12]	@ (800860c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008600:	4618      	mov	r0, r3
 8008602:	370c      	adds	r7, #12
 8008604:	46bd      	mov	sp, r7
 8008606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800860a:	4770      	bx	lr
 800860c:	20000518 	.word	0x20000518

08008610 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008610:	b580      	push	{r7, lr}
 8008612:	b082      	sub	sp, #8
 8008614:	af00      	add	r7, sp, #0
 8008616:	4603      	mov	r3, r0
 8008618:	6039      	str	r1, [r7, #0]
 800861a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800861c:	79fb      	ldrb	r3, [r7, #7]
 800861e:	2b00      	cmp	r3, #0
 8008620:	d105      	bne.n	800862e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008622:	683a      	ldr	r2, [r7, #0]
 8008624:	4907      	ldr	r1, [pc, #28]	@ (8008644 <USBD_FS_ProductStrDescriptor+0x34>)
 8008626:	4808      	ldr	r0, [pc, #32]	@ (8008648 <USBD_FS_ProductStrDescriptor+0x38>)
 8008628:	f7ff fb60 	bl	8007cec <USBD_GetString>
 800862c:	e004      	b.n	8008638 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800862e:	683a      	ldr	r2, [r7, #0]
 8008630:	4904      	ldr	r1, [pc, #16]	@ (8008644 <USBD_FS_ProductStrDescriptor+0x34>)
 8008632:	4805      	ldr	r0, [pc, #20]	@ (8008648 <USBD_FS_ProductStrDescriptor+0x38>)
 8008634:	f7ff fb5a 	bl	8007cec <USBD_GetString>
  }
  return USBD_StrDesc;
 8008638:	4b02      	ldr	r3, [pc, #8]	@ (8008644 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800863a:	4618      	mov	r0, r3
 800863c:	3708      	adds	r7, #8
 800863e:	46bd      	mov	sp, r7
 8008640:	bd80      	pop	{r7, pc}
 8008642:	bf00      	nop
 8008644:	200012a0 	.word	0x200012a0
 8008648:	080098bc 	.word	0x080098bc

0800864c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800864c:	b580      	push	{r7, lr}
 800864e:	b082      	sub	sp, #8
 8008650:	af00      	add	r7, sp, #0
 8008652:	4603      	mov	r3, r0
 8008654:	6039      	str	r1, [r7, #0]
 8008656:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008658:	683a      	ldr	r2, [r7, #0]
 800865a:	4904      	ldr	r1, [pc, #16]	@ (800866c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800865c:	4804      	ldr	r0, [pc, #16]	@ (8008670 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800865e:	f7ff fb45 	bl	8007cec <USBD_GetString>
  return USBD_StrDesc;
 8008662:	4b02      	ldr	r3, [pc, #8]	@ (800866c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008664:	4618      	mov	r0, r3
 8008666:	3708      	adds	r7, #8
 8008668:	46bd      	mov	sp, r7
 800866a:	bd80      	pop	{r7, pc}
 800866c:	200012a0 	.word	0x200012a0
 8008670:	080098dc 	.word	0x080098dc

08008674 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008674:	b580      	push	{r7, lr}
 8008676:	b082      	sub	sp, #8
 8008678:	af00      	add	r7, sp, #0
 800867a:	4603      	mov	r3, r0
 800867c:	6039      	str	r1, [r7, #0]
 800867e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008680:	683b      	ldr	r3, [r7, #0]
 8008682:	221a      	movs	r2, #26
 8008684:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8008686:	f000 f843 	bl	8008710 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800868a:	4b02      	ldr	r3, [pc, #8]	@ (8008694 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800868c:	4618      	mov	r0, r3
 800868e:	3708      	adds	r7, #8
 8008690:	46bd      	mov	sp, r7
 8008692:	bd80      	pop	{r7, pc}
 8008694:	2000051c 	.word	0x2000051c

08008698 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008698:	b580      	push	{r7, lr}
 800869a:	b082      	sub	sp, #8
 800869c:	af00      	add	r7, sp, #0
 800869e:	4603      	mov	r3, r0
 80086a0:	6039      	str	r1, [r7, #0]
 80086a2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80086a4:	79fb      	ldrb	r3, [r7, #7]
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d105      	bne.n	80086b6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80086aa:	683a      	ldr	r2, [r7, #0]
 80086ac:	4907      	ldr	r1, [pc, #28]	@ (80086cc <USBD_FS_ConfigStrDescriptor+0x34>)
 80086ae:	4808      	ldr	r0, [pc, #32]	@ (80086d0 <USBD_FS_ConfigStrDescriptor+0x38>)
 80086b0:	f7ff fb1c 	bl	8007cec <USBD_GetString>
 80086b4:	e004      	b.n	80086c0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80086b6:	683a      	ldr	r2, [r7, #0]
 80086b8:	4904      	ldr	r1, [pc, #16]	@ (80086cc <USBD_FS_ConfigStrDescriptor+0x34>)
 80086ba:	4805      	ldr	r0, [pc, #20]	@ (80086d0 <USBD_FS_ConfigStrDescriptor+0x38>)
 80086bc:	f7ff fb16 	bl	8007cec <USBD_GetString>
  }
  return USBD_StrDesc;
 80086c0:	4b02      	ldr	r3, [pc, #8]	@ (80086cc <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80086c2:	4618      	mov	r0, r3
 80086c4:	3708      	adds	r7, #8
 80086c6:	46bd      	mov	sp, r7
 80086c8:	bd80      	pop	{r7, pc}
 80086ca:	bf00      	nop
 80086cc:	200012a0 	.word	0x200012a0
 80086d0:	080098f0 	.word	0x080098f0

080086d4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80086d4:	b580      	push	{r7, lr}
 80086d6:	b082      	sub	sp, #8
 80086d8:	af00      	add	r7, sp, #0
 80086da:	4603      	mov	r3, r0
 80086dc:	6039      	str	r1, [r7, #0]
 80086de:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80086e0:	79fb      	ldrb	r3, [r7, #7]
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	d105      	bne.n	80086f2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80086e6:	683a      	ldr	r2, [r7, #0]
 80086e8:	4907      	ldr	r1, [pc, #28]	@ (8008708 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80086ea:	4808      	ldr	r0, [pc, #32]	@ (800870c <USBD_FS_InterfaceStrDescriptor+0x38>)
 80086ec:	f7ff fafe 	bl	8007cec <USBD_GetString>
 80086f0:	e004      	b.n	80086fc <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80086f2:	683a      	ldr	r2, [r7, #0]
 80086f4:	4904      	ldr	r1, [pc, #16]	@ (8008708 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80086f6:	4805      	ldr	r0, [pc, #20]	@ (800870c <USBD_FS_InterfaceStrDescriptor+0x38>)
 80086f8:	f7ff faf8 	bl	8007cec <USBD_GetString>
  }
  return USBD_StrDesc;
 80086fc:	4b02      	ldr	r3, [pc, #8]	@ (8008708 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80086fe:	4618      	mov	r0, r3
 8008700:	3708      	adds	r7, #8
 8008702:	46bd      	mov	sp, r7
 8008704:	bd80      	pop	{r7, pc}
 8008706:	bf00      	nop
 8008708:	200012a0 	.word	0x200012a0
 800870c:	08009904 	.word	0x08009904

08008710 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008710:	b580      	push	{r7, lr}
 8008712:	b084      	sub	sp, #16
 8008714:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8008716:	4b0f      	ldr	r3, [pc, #60]	@ (8008754 <Get_SerialNum+0x44>)
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800871c:	4b0e      	ldr	r3, [pc, #56]	@ (8008758 <Get_SerialNum+0x48>)
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008722:	4b0e      	ldr	r3, [pc, #56]	@ (800875c <Get_SerialNum+0x4c>)
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008728:	68fa      	ldr	r2, [r7, #12]
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	4413      	add	r3, r2
 800872e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	2b00      	cmp	r3, #0
 8008734:	d009      	beq.n	800874a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8008736:	2208      	movs	r2, #8
 8008738:	4909      	ldr	r1, [pc, #36]	@ (8008760 <Get_SerialNum+0x50>)
 800873a:	68f8      	ldr	r0, [r7, #12]
 800873c:	f000 f814 	bl	8008768 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008740:	2204      	movs	r2, #4
 8008742:	4908      	ldr	r1, [pc, #32]	@ (8008764 <Get_SerialNum+0x54>)
 8008744:	68b8      	ldr	r0, [r7, #8]
 8008746:	f000 f80f 	bl	8008768 <IntToUnicode>
  }
}
 800874a:	bf00      	nop
 800874c:	3710      	adds	r7, #16
 800874e:	46bd      	mov	sp, r7
 8008750:	bd80      	pop	{r7, pc}
 8008752:	bf00      	nop
 8008754:	1fff7a10 	.word	0x1fff7a10
 8008758:	1fff7a14 	.word	0x1fff7a14
 800875c:	1fff7a18 	.word	0x1fff7a18
 8008760:	2000051e 	.word	0x2000051e
 8008764:	2000052e 	.word	0x2000052e

08008768 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008768:	b480      	push	{r7}
 800876a:	b087      	sub	sp, #28
 800876c:	af00      	add	r7, sp, #0
 800876e:	60f8      	str	r0, [r7, #12]
 8008770:	60b9      	str	r1, [r7, #8]
 8008772:	4613      	mov	r3, r2
 8008774:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8008776:	2300      	movs	r3, #0
 8008778:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800877a:	2300      	movs	r3, #0
 800877c:	75fb      	strb	r3, [r7, #23]
 800877e:	e027      	b.n	80087d0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	0f1b      	lsrs	r3, r3, #28
 8008784:	2b09      	cmp	r3, #9
 8008786:	d80b      	bhi.n	80087a0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	0f1b      	lsrs	r3, r3, #28
 800878c:	b2da      	uxtb	r2, r3
 800878e:	7dfb      	ldrb	r3, [r7, #23]
 8008790:	005b      	lsls	r3, r3, #1
 8008792:	4619      	mov	r1, r3
 8008794:	68bb      	ldr	r3, [r7, #8]
 8008796:	440b      	add	r3, r1
 8008798:	3230      	adds	r2, #48	@ 0x30
 800879a:	b2d2      	uxtb	r2, r2
 800879c:	701a      	strb	r2, [r3, #0]
 800879e:	e00a      	b.n	80087b6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	0f1b      	lsrs	r3, r3, #28
 80087a4:	b2da      	uxtb	r2, r3
 80087a6:	7dfb      	ldrb	r3, [r7, #23]
 80087a8:	005b      	lsls	r3, r3, #1
 80087aa:	4619      	mov	r1, r3
 80087ac:	68bb      	ldr	r3, [r7, #8]
 80087ae:	440b      	add	r3, r1
 80087b0:	3237      	adds	r2, #55	@ 0x37
 80087b2:	b2d2      	uxtb	r2, r2
 80087b4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	011b      	lsls	r3, r3, #4
 80087ba:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80087bc:	7dfb      	ldrb	r3, [r7, #23]
 80087be:	005b      	lsls	r3, r3, #1
 80087c0:	3301      	adds	r3, #1
 80087c2:	68ba      	ldr	r2, [r7, #8]
 80087c4:	4413      	add	r3, r2
 80087c6:	2200      	movs	r2, #0
 80087c8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80087ca:	7dfb      	ldrb	r3, [r7, #23]
 80087cc:	3301      	adds	r3, #1
 80087ce:	75fb      	strb	r3, [r7, #23]
 80087d0:	7dfa      	ldrb	r2, [r7, #23]
 80087d2:	79fb      	ldrb	r3, [r7, #7]
 80087d4:	429a      	cmp	r2, r3
 80087d6:	d3d3      	bcc.n	8008780 <IntToUnicode+0x18>
  }
}
 80087d8:	bf00      	nop
 80087da:	bf00      	nop
 80087dc:	371c      	adds	r7, #28
 80087de:	46bd      	mov	sp, r7
 80087e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087e4:	4770      	bx	lr
	...

080087e8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80087e8:	b580      	push	{r7, lr}
 80087ea:	b08a      	sub	sp, #40	@ 0x28
 80087ec:	af00      	add	r7, sp, #0
 80087ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80087f0:	f107 0314 	add.w	r3, r7, #20
 80087f4:	2200      	movs	r2, #0
 80087f6:	601a      	str	r2, [r3, #0]
 80087f8:	605a      	str	r2, [r3, #4]
 80087fa:	609a      	str	r2, [r3, #8]
 80087fc:	60da      	str	r2, [r3, #12]
 80087fe:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008808:	d13a      	bne.n	8008880 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800880a:	2300      	movs	r3, #0
 800880c:	613b      	str	r3, [r7, #16]
 800880e:	4b1e      	ldr	r3, [pc, #120]	@ (8008888 <HAL_PCD_MspInit+0xa0>)
 8008810:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008812:	4a1d      	ldr	r2, [pc, #116]	@ (8008888 <HAL_PCD_MspInit+0xa0>)
 8008814:	f043 0301 	orr.w	r3, r3, #1
 8008818:	6313      	str	r3, [r2, #48]	@ 0x30
 800881a:	4b1b      	ldr	r3, [pc, #108]	@ (8008888 <HAL_PCD_MspInit+0xa0>)
 800881c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800881e:	f003 0301 	and.w	r3, r3, #1
 8008822:	613b      	str	r3, [r7, #16]
 8008824:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8008826:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800882a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800882c:	2302      	movs	r3, #2
 800882e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008830:	2300      	movs	r3, #0
 8008832:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008834:	2303      	movs	r3, #3
 8008836:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8008838:	230a      	movs	r3, #10
 800883a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800883c:	f107 0314 	add.w	r3, r7, #20
 8008840:	4619      	mov	r1, r3
 8008842:	4812      	ldr	r0, [pc, #72]	@ (800888c <HAL_PCD_MspInit+0xa4>)
 8008844:	f7f8 fcde 	bl	8001204 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008848:	4b0f      	ldr	r3, [pc, #60]	@ (8008888 <HAL_PCD_MspInit+0xa0>)
 800884a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800884c:	4a0e      	ldr	r2, [pc, #56]	@ (8008888 <HAL_PCD_MspInit+0xa0>)
 800884e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008852:	6353      	str	r3, [r2, #52]	@ 0x34
 8008854:	2300      	movs	r3, #0
 8008856:	60fb      	str	r3, [r7, #12]
 8008858:	4b0b      	ldr	r3, [pc, #44]	@ (8008888 <HAL_PCD_MspInit+0xa0>)
 800885a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800885c:	4a0a      	ldr	r2, [pc, #40]	@ (8008888 <HAL_PCD_MspInit+0xa0>)
 800885e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8008862:	6453      	str	r3, [r2, #68]	@ 0x44
 8008864:	4b08      	ldr	r3, [pc, #32]	@ (8008888 <HAL_PCD_MspInit+0xa0>)
 8008866:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008868:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800886c:	60fb      	str	r3, [r7, #12]
 800886e:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8008870:	2200      	movs	r2, #0
 8008872:	2100      	movs	r1, #0
 8008874:	2043      	movs	r0, #67	@ 0x43
 8008876:	f7f8 fc9b 	bl	80011b0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800887a:	2043      	movs	r0, #67	@ 0x43
 800887c:	f7f8 fcb4 	bl	80011e8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8008880:	bf00      	nop
 8008882:	3728      	adds	r7, #40	@ 0x28
 8008884:	46bd      	mov	sp, r7
 8008886:	bd80      	pop	{r7, pc}
 8008888:	40023800 	.word	0x40023800
 800888c:	40020000 	.word	0x40020000

08008890 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008890:	b580      	push	{r7, lr}
 8008892:	b082      	sub	sp, #8
 8008894:	af00      	add	r7, sp, #0
 8008896:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80088a4:	4619      	mov	r1, r3
 80088a6:	4610      	mov	r0, r2
 80088a8:	f7fe f8bd 	bl	8006a26 <USBD_LL_SetupStage>
}
 80088ac:	bf00      	nop
 80088ae:	3708      	adds	r7, #8
 80088b0:	46bd      	mov	sp, r7
 80088b2:	bd80      	pop	{r7, pc}

080088b4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80088b4:	b580      	push	{r7, lr}
 80088b6:	b082      	sub	sp, #8
 80088b8:	af00      	add	r7, sp, #0
 80088ba:	6078      	str	r0, [r7, #4]
 80088bc:	460b      	mov	r3, r1
 80088be:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 80088c6:	78fa      	ldrb	r2, [r7, #3]
 80088c8:	6879      	ldr	r1, [r7, #4]
 80088ca:	4613      	mov	r3, r2
 80088cc:	00db      	lsls	r3, r3, #3
 80088ce:	4413      	add	r3, r2
 80088d0:	009b      	lsls	r3, r3, #2
 80088d2:	440b      	add	r3, r1
 80088d4:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80088d8:	681a      	ldr	r2, [r3, #0]
 80088da:	78fb      	ldrb	r3, [r7, #3]
 80088dc:	4619      	mov	r1, r3
 80088de:	f7fe f8f7 	bl	8006ad0 <USBD_LL_DataOutStage>
}
 80088e2:	bf00      	nop
 80088e4:	3708      	adds	r7, #8
 80088e6:	46bd      	mov	sp, r7
 80088e8:	bd80      	pop	{r7, pc}

080088ea <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80088ea:	b580      	push	{r7, lr}
 80088ec:	b082      	sub	sp, #8
 80088ee:	af00      	add	r7, sp, #0
 80088f0:	6078      	str	r0, [r7, #4]
 80088f2:	460b      	mov	r3, r1
 80088f4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 80088fc:	78fa      	ldrb	r2, [r7, #3]
 80088fe:	6879      	ldr	r1, [r7, #4]
 8008900:	4613      	mov	r3, r2
 8008902:	00db      	lsls	r3, r3, #3
 8008904:	4413      	add	r3, r2
 8008906:	009b      	lsls	r3, r3, #2
 8008908:	440b      	add	r3, r1
 800890a:	3320      	adds	r3, #32
 800890c:	681a      	ldr	r2, [r3, #0]
 800890e:	78fb      	ldrb	r3, [r7, #3]
 8008910:	4619      	mov	r1, r3
 8008912:	f7fe f990 	bl	8006c36 <USBD_LL_DataInStage>
}
 8008916:	bf00      	nop
 8008918:	3708      	adds	r7, #8
 800891a:	46bd      	mov	sp, r7
 800891c:	bd80      	pop	{r7, pc}

0800891e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800891e:	b580      	push	{r7, lr}
 8008920:	b082      	sub	sp, #8
 8008922:	af00      	add	r7, sp, #0
 8008924:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800892c:	4618      	mov	r0, r3
 800892e:	f7fe faca 	bl	8006ec6 <USBD_LL_SOF>
}
 8008932:	bf00      	nop
 8008934:	3708      	adds	r7, #8
 8008936:	46bd      	mov	sp, r7
 8008938:	bd80      	pop	{r7, pc}

0800893a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800893a:	b580      	push	{r7, lr}
 800893c:	b084      	sub	sp, #16
 800893e:	af00      	add	r7, sp, #0
 8008940:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8008942:	2301      	movs	r3, #1
 8008944:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	79db      	ldrb	r3, [r3, #7]
 800894a:	2b00      	cmp	r3, #0
 800894c:	d102      	bne.n	8008954 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800894e:	2300      	movs	r3, #0
 8008950:	73fb      	strb	r3, [r7, #15]
 8008952:	e008      	b.n	8008966 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	79db      	ldrb	r3, [r3, #7]
 8008958:	2b02      	cmp	r3, #2
 800895a:	d102      	bne.n	8008962 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800895c:	2301      	movs	r3, #1
 800895e:	73fb      	strb	r3, [r7, #15]
 8008960:	e001      	b.n	8008966 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8008962:	f7f8 f8f5 	bl	8000b50 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800896c:	7bfa      	ldrb	r2, [r7, #15]
 800896e:	4611      	mov	r1, r2
 8008970:	4618      	mov	r0, r3
 8008972:	f7fe fa64 	bl	8006e3e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800897c:	4618      	mov	r0, r3
 800897e:	f7fe fa0c 	bl	8006d9a <USBD_LL_Reset>
}
 8008982:	bf00      	nop
 8008984:	3710      	adds	r7, #16
 8008986:	46bd      	mov	sp, r7
 8008988:	bd80      	pop	{r7, pc}
	...

0800898c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800898c:	b580      	push	{r7, lr}
 800898e:	b082      	sub	sp, #8
 8008990:	af00      	add	r7, sp, #0
 8008992:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800899a:	4618      	mov	r0, r3
 800899c:	f7fe fa5f 	bl	8006e5e <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	687a      	ldr	r2, [r7, #4]
 80089ac:	6812      	ldr	r2, [r2, #0]
 80089ae:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80089b2:	f043 0301 	orr.w	r3, r3, #1
 80089b6:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	7adb      	ldrb	r3, [r3, #11]
 80089bc:	2b00      	cmp	r3, #0
 80089be:	d005      	beq.n	80089cc <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80089c0:	4b04      	ldr	r3, [pc, #16]	@ (80089d4 <HAL_PCD_SuspendCallback+0x48>)
 80089c2:	691b      	ldr	r3, [r3, #16]
 80089c4:	4a03      	ldr	r2, [pc, #12]	@ (80089d4 <HAL_PCD_SuspendCallback+0x48>)
 80089c6:	f043 0306 	orr.w	r3, r3, #6
 80089ca:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80089cc:	bf00      	nop
 80089ce:	3708      	adds	r7, #8
 80089d0:	46bd      	mov	sp, r7
 80089d2:	bd80      	pop	{r7, pc}
 80089d4:	e000ed00 	.word	0xe000ed00

080089d8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80089d8:	b580      	push	{r7, lr}
 80089da:	b082      	sub	sp, #8
 80089dc:	af00      	add	r7, sp, #0
 80089de:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80089e6:	4618      	mov	r0, r3
 80089e8:	f7fe fa55 	bl	8006e96 <USBD_LL_Resume>
}
 80089ec:	bf00      	nop
 80089ee:	3708      	adds	r7, #8
 80089f0:	46bd      	mov	sp, r7
 80089f2:	bd80      	pop	{r7, pc}

080089f4 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80089f4:	b580      	push	{r7, lr}
 80089f6:	b082      	sub	sp, #8
 80089f8:	af00      	add	r7, sp, #0
 80089fa:	6078      	str	r0, [r7, #4]
 80089fc:	460b      	mov	r3, r1
 80089fe:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008a06:	78fa      	ldrb	r2, [r7, #3]
 8008a08:	4611      	mov	r1, r2
 8008a0a:	4618      	mov	r0, r3
 8008a0c:	f7fe faad 	bl	8006f6a <USBD_LL_IsoOUTIncomplete>
}
 8008a10:	bf00      	nop
 8008a12:	3708      	adds	r7, #8
 8008a14:	46bd      	mov	sp, r7
 8008a16:	bd80      	pop	{r7, pc}

08008a18 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008a18:	b580      	push	{r7, lr}
 8008a1a:	b082      	sub	sp, #8
 8008a1c:	af00      	add	r7, sp, #0
 8008a1e:	6078      	str	r0, [r7, #4]
 8008a20:	460b      	mov	r3, r1
 8008a22:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008a2a:	78fa      	ldrb	r2, [r7, #3]
 8008a2c:	4611      	mov	r1, r2
 8008a2e:	4618      	mov	r0, r3
 8008a30:	f7fe fa69 	bl	8006f06 <USBD_LL_IsoINIncomplete>
}
 8008a34:	bf00      	nop
 8008a36:	3708      	adds	r7, #8
 8008a38:	46bd      	mov	sp, r7
 8008a3a:	bd80      	pop	{r7, pc}

08008a3c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008a3c:	b580      	push	{r7, lr}
 8008a3e:	b082      	sub	sp, #8
 8008a40:	af00      	add	r7, sp, #0
 8008a42:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008a4a:	4618      	mov	r0, r3
 8008a4c:	f7fe fabf 	bl	8006fce <USBD_LL_DevConnected>
}
 8008a50:	bf00      	nop
 8008a52:	3708      	adds	r7, #8
 8008a54:	46bd      	mov	sp, r7
 8008a56:	bd80      	pop	{r7, pc}

08008a58 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008a58:	b580      	push	{r7, lr}
 8008a5a:	b082      	sub	sp, #8
 8008a5c:	af00      	add	r7, sp, #0
 8008a5e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008a66:	4618      	mov	r0, r3
 8008a68:	f7fe fabc 	bl	8006fe4 <USBD_LL_DevDisconnected>
}
 8008a6c:	bf00      	nop
 8008a6e:	3708      	adds	r7, #8
 8008a70:	46bd      	mov	sp, r7
 8008a72:	bd80      	pop	{r7, pc}

08008a74 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008a74:	b580      	push	{r7, lr}
 8008a76:	b082      	sub	sp, #8
 8008a78:	af00      	add	r7, sp, #0
 8008a7a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	781b      	ldrb	r3, [r3, #0]
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	d13c      	bne.n	8008afe <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8008a84:	4a20      	ldr	r2, [pc, #128]	@ (8008b08 <USBD_LL_Init+0x94>)
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	4a1e      	ldr	r2, [pc, #120]	@ (8008b08 <USBD_LL_Init+0x94>)
 8008a90:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008a94:	4b1c      	ldr	r3, [pc, #112]	@ (8008b08 <USBD_LL_Init+0x94>)
 8008a96:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8008a9a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8008a9c:	4b1a      	ldr	r3, [pc, #104]	@ (8008b08 <USBD_LL_Init+0x94>)
 8008a9e:	2204      	movs	r2, #4
 8008aa0:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8008aa2:	4b19      	ldr	r3, [pc, #100]	@ (8008b08 <USBD_LL_Init+0x94>)
 8008aa4:	2202      	movs	r2, #2
 8008aa6:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008aa8:	4b17      	ldr	r3, [pc, #92]	@ (8008b08 <USBD_LL_Init+0x94>)
 8008aaa:	2200      	movs	r2, #0
 8008aac:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8008aae:	4b16      	ldr	r3, [pc, #88]	@ (8008b08 <USBD_LL_Init+0x94>)
 8008ab0:	2202      	movs	r2, #2
 8008ab2:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008ab4:	4b14      	ldr	r3, [pc, #80]	@ (8008b08 <USBD_LL_Init+0x94>)
 8008ab6:	2200      	movs	r2, #0
 8008ab8:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8008aba:	4b13      	ldr	r3, [pc, #76]	@ (8008b08 <USBD_LL_Init+0x94>)
 8008abc:	2200      	movs	r2, #0
 8008abe:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8008ac0:	4b11      	ldr	r3, [pc, #68]	@ (8008b08 <USBD_LL_Init+0x94>)
 8008ac2:	2200      	movs	r2, #0
 8008ac4:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8008ac6:	4b10      	ldr	r3, [pc, #64]	@ (8008b08 <USBD_LL_Init+0x94>)
 8008ac8:	2200      	movs	r2, #0
 8008aca:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8008acc:	4b0e      	ldr	r3, [pc, #56]	@ (8008b08 <USBD_LL_Init+0x94>)
 8008ace:	2200      	movs	r2, #0
 8008ad0:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8008ad2:	480d      	ldr	r0, [pc, #52]	@ (8008b08 <USBD_LL_Init+0x94>)
 8008ad4:	f7f8 fd4b 	bl	800156e <HAL_PCD_Init>
 8008ad8:	4603      	mov	r3, r0
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	d001      	beq.n	8008ae2 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8008ade:	f7f8 f837 	bl	8000b50 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8008ae2:	2180      	movs	r1, #128	@ 0x80
 8008ae4:	4808      	ldr	r0, [pc, #32]	@ (8008b08 <USBD_LL_Init+0x94>)
 8008ae6:	f7f9 ff60 	bl	80029aa <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8008aea:	2240      	movs	r2, #64	@ 0x40
 8008aec:	2100      	movs	r1, #0
 8008aee:	4806      	ldr	r0, [pc, #24]	@ (8008b08 <USBD_LL_Init+0x94>)
 8008af0:	f7f9 ff14 	bl	800291c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8008af4:	2280      	movs	r2, #128	@ 0x80
 8008af6:	2101      	movs	r1, #1
 8008af8:	4803      	ldr	r0, [pc, #12]	@ (8008b08 <USBD_LL_Init+0x94>)
 8008afa:	f7f9 ff0f 	bl	800291c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8008afe:	2300      	movs	r3, #0
}
 8008b00:	4618      	mov	r0, r3
 8008b02:	3708      	adds	r7, #8
 8008b04:	46bd      	mov	sp, r7
 8008b06:	bd80      	pop	{r7, pc}
 8008b08:	200014a0 	.word	0x200014a0

08008b0c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008b0c:	b580      	push	{r7, lr}
 8008b0e:	b084      	sub	sp, #16
 8008b10:	af00      	add	r7, sp, #0
 8008b12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008b14:	2300      	movs	r3, #0
 8008b16:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008b18:	2300      	movs	r3, #0
 8008b1a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008b22:	4618      	mov	r0, r3
 8008b24:	f7f8 fe32 	bl	800178c <HAL_PCD_Start>
 8008b28:	4603      	mov	r3, r0
 8008b2a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008b2c:	7bfb      	ldrb	r3, [r7, #15]
 8008b2e:	4618      	mov	r0, r3
 8008b30:	f000 f930 	bl	8008d94 <USBD_Get_USB_Status>
 8008b34:	4603      	mov	r3, r0
 8008b36:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008b38:	7bbb      	ldrb	r3, [r7, #14]
}
 8008b3a:	4618      	mov	r0, r3
 8008b3c:	3710      	adds	r7, #16
 8008b3e:	46bd      	mov	sp, r7
 8008b40:	bd80      	pop	{r7, pc}

08008b42 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8008b42:	b580      	push	{r7, lr}
 8008b44:	b084      	sub	sp, #16
 8008b46:	af00      	add	r7, sp, #0
 8008b48:	6078      	str	r0, [r7, #4]
 8008b4a:	4608      	mov	r0, r1
 8008b4c:	4611      	mov	r1, r2
 8008b4e:	461a      	mov	r2, r3
 8008b50:	4603      	mov	r3, r0
 8008b52:	70fb      	strb	r3, [r7, #3]
 8008b54:	460b      	mov	r3, r1
 8008b56:	70bb      	strb	r3, [r7, #2]
 8008b58:	4613      	mov	r3, r2
 8008b5a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008b5c:	2300      	movs	r3, #0
 8008b5e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008b60:	2300      	movs	r3, #0
 8008b62:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8008b6a:	78bb      	ldrb	r3, [r7, #2]
 8008b6c:	883a      	ldrh	r2, [r7, #0]
 8008b6e:	78f9      	ldrb	r1, [r7, #3]
 8008b70:	f7f9 fb06 	bl	8002180 <HAL_PCD_EP_Open>
 8008b74:	4603      	mov	r3, r0
 8008b76:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008b78:	7bfb      	ldrb	r3, [r7, #15]
 8008b7a:	4618      	mov	r0, r3
 8008b7c:	f000 f90a 	bl	8008d94 <USBD_Get_USB_Status>
 8008b80:	4603      	mov	r3, r0
 8008b82:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008b84:	7bbb      	ldrb	r3, [r7, #14]
}
 8008b86:	4618      	mov	r0, r3
 8008b88:	3710      	adds	r7, #16
 8008b8a:	46bd      	mov	sp, r7
 8008b8c:	bd80      	pop	{r7, pc}

08008b8e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008b8e:	b580      	push	{r7, lr}
 8008b90:	b084      	sub	sp, #16
 8008b92:	af00      	add	r7, sp, #0
 8008b94:	6078      	str	r0, [r7, #4]
 8008b96:	460b      	mov	r3, r1
 8008b98:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008b9a:	2300      	movs	r3, #0
 8008b9c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008b9e:	2300      	movs	r3, #0
 8008ba0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008ba8:	78fa      	ldrb	r2, [r7, #3]
 8008baa:	4611      	mov	r1, r2
 8008bac:	4618      	mov	r0, r3
 8008bae:	f7f9 fb51 	bl	8002254 <HAL_PCD_EP_Close>
 8008bb2:	4603      	mov	r3, r0
 8008bb4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008bb6:	7bfb      	ldrb	r3, [r7, #15]
 8008bb8:	4618      	mov	r0, r3
 8008bba:	f000 f8eb 	bl	8008d94 <USBD_Get_USB_Status>
 8008bbe:	4603      	mov	r3, r0
 8008bc0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008bc2:	7bbb      	ldrb	r3, [r7, #14]
}
 8008bc4:	4618      	mov	r0, r3
 8008bc6:	3710      	adds	r7, #16
 8008bc8:	46bd      	mov	sp, r7
 8008bca:	bd80      	pop	{r7, pc}

08008bcc <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008bcc:	b580      	push	{r7, lr}
 8008bce:	b084      	sub	sp, #16
 8008bd0:	af00      	add	r7, sp, #0
 8008bd2:	6078      	str	r0, [r7, #4]
 8008bd4:	460b      	mov	r3, r1
 8008bd6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008bd8:	2300      	movs	r3, #0
 8008bda:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008bdc:	2300      	movs	r3, #0
 8008bde:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008be6:	78fa      	ldrb	r2, [r7, #3]
 8008be8:	4611      	mov	r1, r2
 8008bea:	4618      	mov	r0, r3
 8008bec:	f7f9 fbf1 	bl	80023d2 <HAL_PCD_EP_SetStall>
 8008bf0:	4603      	mov	r3, r0
 8008bf2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008bf4:	7bfb      	ldrb	r3, [r7, #15]
 8008bf6:	4618      	mov	r0, r3
 8008bf8:	f000 f8cc 	bl	8008d94 <USBD_Get_USB_Status>
 8008bfc:	4603      	mov	r3, r0
 8008bfe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008c00:	7bbb      	ldrb	r3, [r7, #14]
}
 8008c02:	4618      	mov	r0, r3
 8008c04:	3710      	adds	r7, #16
 8008c06:	46bd      	mov	sp, r7
 8008c08:	bd80      	pop	{r7, pc}

08008c0a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008c0a:	b580      	push	{r7, lr}
 8008c0c:	b084      	sub	sp, #16
 8008c0e:	af00      	add	r7, sp, #0
 8008c10:	6078      	str	r0, [r7, #4]
 8008c12:	460b      	mov	r3, r1
 8008c14:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008c16:	2300      	movs	r3, #0
 8008c18:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008c1a:	2300      	movs	r3, #0
 8008c1c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008c24:	78fa      	ldrb	r2, [r7, #3]
 8008c26:	4611      	mov	r1, r2
 8008c28:	4618      	mov	r0, r3
 8008c2a:	f7f9 fc35 	bl	8002498 <HAL_PCD_EP_ClrStall>
 8008c2e:	4603      	mov	r3, r0
 8008c30:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008c32:	7bfb      	ldrb	r3, [r7, #15]
 8008c34:	4618      	mov	r0, r3
 8008c36:	f000 f8ad 	bl	8008d94 <USBD_Get_USB_Status>
 8008c3a:	4603      	mov	r3, r0
 8008c3c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008c3e:	7bbb      	ldrb	r3, [r7, #14]
}
 8008c40:	4618      	mov	r0, r3
 8008c42:	3710      	adds	r7, #16
 8008c44:	46bd      	mov	sp, r7
 8008c46:	bd80      	pop	{r7, pc}

08008c48 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008c48:	b480      	push	{r7}
 8008c4a:	b085      	sub	sp, #20
 8008c4c:	af00      	add	r7, sp, #0
 8008c4e:	6078      	str	r0, [r7, #4]
 8008c50:	460b      	mov	r3, r1
 8008c52:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008c5a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008c5c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	da0b      	bge.n	8008c7c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008c64:	78fb      	ldrb	r3, [r7, #3]
 8008c66:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008c6a:	68f9      	ldr	r1, [r7, #12]
 8008c6c:	4613      	mov	r3, r2
 8008c6e:	00db      	lsls	r3, r3, #3
 8008c70:	4413      	add	r3, r2
 8008c72:	009b      	lsls	r3, r3, #2
 8008c74:	440b      	add	r3, r1
 8008c76:	3316      	adds	r3, #22
 8008c78:	781b      	ldrb	r3, [r3, #0]
 8008c7a:	e00b      	b.n	8008c94 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008c7c:	78fb      	ldrb	r3, [r7, #3]
 8008c7e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008c82:	68f9      	ldr	r1, [r7, #12]
 8008c84:	4613      	mov	r3, r2
 8008c86:	00db      	lsls	r3, r3, #3
 8008c88:	4413      	add	r3, r2
 8008c8a:	009b      	lsls	r3, r3, #2
 8008c8c:	440b      	add	r3, r1
 8008c8e:	f203 2356 	addw	r3, r3, #598	@ 0x256
 8008c92:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008c94:	4618      	mov	r0, r3
 8008c96:	3714      	adds	r7, #20
 8008c98:	46bd      	mov	sp, r7
 8008c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c9e:	4770      	bx	lr

08008ca0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008ca0:	b580      	push	{r7, lr}
 8008ca2:	b084      	sub	sp, #16
 8008ca4:	af00      	add	r7, sp, #0
 8008ca6:	6078      	str	r0, [r7, #4]
 8008ca8:	460b      	mov	r3, r1
 8008caa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008cac:	2300      	movs	r3, #0
 8008cae:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008cb0:	2300      	movs	r3, #0
 8008cb2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008cba:	78fa      	ldrb	r2, [r7, #3]
 8008cbc:	4611      	mov	r1, r2
 8008cbe:	4618      	mov	r0, r3
 8008cc0:	f7f9 fa3a 	bl	8002138 <HAL_PCD_SetAddress>
 8008cc4:	4603      	mov	r3, r0
 8008cc6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008cc8:	7bfb      	ldrb	r3, [r7, #15]
 8008cca:	4618      	mov	r0, r3
 8008ccc:	f000 f862 	bl	8008d94 <USBD_Get_USB_Status>
 8008cd0:	4603      	mov	r3, r0
 8008cd2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008cd4:	7bbb      	ldrb	r3, [r7, #14]
}
 8008cd6:	4618      	mov	r0, r3
 8008cd8:	3710      	adds	r7, #16
 8008cda:	46bd      	mov	sp, r7
 8008cdc:	bd80      	pop	{r7, pc}

08008cde <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008cde:	b580      	push	{r7, lr}
 8008ce0:	b086      	sub	sp, #24
 8008ce2:	af00      	add	r7, sp, #0
 8008ce4:	60f8      	str	r0, [r7, #12]
 8008ce6:	607a      	str	r2, [r7, #4]
 8008ce8:	603b      	str	r3, [r7, #0]
 8008cea:	460b      	mov	r3, r1
 8008cec:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008cee:	2300      	movs	r3, #0
 8008cf0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008cf2:	2300      	movs	r3, #0
 8008cf4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008cf6:	68fb      	ldr	r3, [r7, #12]
 8008cf8:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8008cfc:	7af9      	ldrb	r1, [r7, #11]
 8008cfe:	683b      	ldr	r3, [r7, #0]
 8008d00:	687a      	ldr	r2, [r7, #4]
 8008d02:	f7f9 fb2c 	bl	800235e <HAL_PCD_EP_Transmit>
 8008d06:	4603      	mov	r3, r0
 8008d08:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008d0a:	7dfb      	ldrb	r3, [r7, #23]
 8008d0c:	4618      	mov	r0, r3
 8008d0e:	f000 f841 	bl	8008d94 <USBD_Get_USB_Status>
 8008d12:	4603      	mov	r3, r0
 8008d14:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008d16:	7dbb      	ldrb	r3, [r7, #22]
}
 8008d18:	4618      	mov	r0, r3
 8008d1a:	3718      	adds	r7, #24
 8008d1c:	46bd      	mov	sp, r7
 8008d1e:	bd80      	pop	{r7, pc}

08008d20 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008d20:	b580      	push	{r7, lr}
 8008d22:	b086      	sub	sp, #24
 8008d24:	af00      	add	r7, sp, #0
 8008d26:	60f8      	str	r0, [r7, #12]
 8008d28:	607a      	str	r2, [r7, #4]
 8008d2a:	603b      	str	r3, [r7, #0]
 8008d2c:	460b      	mov	r3, r1
 8008d2e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008d30:	2300      	movs	r3, #0
 8008d32:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008d34:	2300      	movs	r3, #0
 8008d36:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008d38:	68fb      	ldr	r3, [r7, #12]
 8008d3a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8008d3e:	7af9      	ldrb	r1, [r7, #11]
 8008d40:	683b      	ldr	r3, [r7, #0]
 8008d42:	687a      	ldr	r2, [r7, #4]
 8008d44:	f7f9 fad0 	bl	80022e8 <HAL_PCD_EP_Receive>
 8008d48:	4603      	mov	r3, r0
 8008d4a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008d4c:	7dfb      	ldrb	r3, [r7, #23]
 8008d4e:	4618      	mov	r0, r3
 8008d50:	f000 f820 	bl	8008d94 <USBD_Get_USB_Status>
 8008d54:	4603      	mov	r3, r0
 8008d56:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008d58:	7dbb      	ldrb	r3, [r7, #22]
}
 8008d5a:	4618      	mov	r0, r3
 8008d5c:	3718      	adds	r7, #24
 8008d5e:	46bd      	mov	sp, r7
 8008d60:	bd80      	pop	{r7, pc}
	...

08008d64 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8008d64:	b480      	push	{r7}
 8008d66:	b083      	sub	sp, #12
 8008d68:	af00      	add	r7, sp, #0
 8008d6a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CUSTOM_HID_HandleTypeDef)/4+1)];/* On 32-bit boundary */
  return mem;
 8008d6c:	4b03      	ldr	r3, [pc, #12]	@ (8008d7c <USBD_static_malloc+0x18>)
}
 8008d6e:	4618      	mov	r0, r3
 8008d70:	370c      	adds	r7, #12
 8008d72:	46bd      	mov	sp, r7
 8008d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d78:	4770      	bx	lr
 8008d7a:	bf00      	nop
 8008d7c:	20001984 	.word	0x20001984

08008d80 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008d80:	b480      	push	{r7}
 8008d82:	b083      	sub	sp, #12
 8008d84:	af00      	add	r7, sp, #0
 8008d86:	6078      	str	r0, [r7, #4]

}
 8008d88:	bf00      	nop
 8008d8a:	370c      	adds	r7, #12
 8008d8c:	46bd      	mov	sp, r7
 8008d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d92:	4770      	bx	lr

08008d94 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008d94:	b480      	push	{r7}
 8008d96:	b085      	sub	sp, #20
 8008d98:	af00      	add	r7, sp, #0
 8008d9a:	4603      	mov	r3, r0
 8008d9c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008d9e:	2300      	movs	r3, #0
 8008da0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008da2:	79fb      	ldrb	r3, [r7, #7]
 8008da4:	2b03      	cmp	r3, #3
 8008da6:	d817      	bhi.n	8008dd8 <USBD_Get_USB_Status+0x44>
 8008da8:	a201      	add	r2, pc, #4	@ (adr r2, 8008db0 <USBD_Get_USB_Status+0x1c>)
 8008daa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008dae:	bf00      	nop
 8008db0:	08008dc1 	.word	0x08008dc1
 8008db4:	08008dc7 	.word	0x08008dc7
 8008db8:	08008dcd 	.word	0x08008dcd
 8008dbc:	08008dd3 	.word	0x08008dd3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008dc0:	2300      	movs	r3, #0
 8008dc2:	73fb      	strb	r3, [r7, #15]
    break;
 8008dc4:	e00b      	b.n	8008dde <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008dc6:	2303      	movs	r3, #3
 8008dc8:	73fb      	strb	r3, [r7, #15]
    break;
 8008dca:	e008      	b.n	8008dde <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008dcc:	2301      	movs	r3, #1
 8008dce:	73fb      	strb	r3, [r7, #15]
    break;
 8008dd0:	e005      	b.n	8008dde <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008dd2:	2303      	movs	r3, #3
 8008dd4:	73fb      	strb	r3, [r7, #15]
    break;
 8008dd6:	e002      	b.n	8008dde <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008dd8:	2303      	movs	r3, #3
 8008dda:	73fb      	strb	r3, [r7, #15]
    break;
 8008ddc:	bf00      	nop
  }
  return usb_status;
 8008dde:	7bfb      	ldrb	r3, [r7, #15]
}
 8008de0:	4618      	mov	r0, r3
 8008de2:	3714      	adds	r7, #20
 8008de4:	46bd      	mov	sp, r7
 8008de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dea:	4770      	bx	lr

08008dec <sinf>:
 8008dec:	ee10 3a10 	vmov	r3, s0
 8008df0:	b507      	push	{r0, r1, r2, lr}
 8008df2:	4a1f      	ldr	r2, [pc, #124]	@ (8008e70 <sinf+0x84>)
 8008df4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008df8:	4293      	cmp	r3, r2
 8008dfa:	d807      	bhi.n	8008e0c <sinf+0x20>
 8008dfc:	eddf 0a1d 	vldr	s1, [pc, #116]	@ 8008e74 <sinf+0x88>
 8008e00:	2000      	movs	r0, #0
 8008e02:	b003      	add	sp, #12
 8008e04:	f85d eb04 	ldr.w	lr, [sp], #4
 8008e08:	f000 b88e 	b.w	8008f28 <__kernel_sinf>
 8008e0c:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8008e10:	d304      	bcc.n	8008e1c <sinf+0x30>
 8008e12:	ee30 0a40 	vsub.f32	s0, s0, s0
 8008e16:	b003      	add	sp, #12
 8008e18:	f85d fb04 	ldr.w	pc, [sp], #4
 8008e1c:	4668      	mov	r0, sp
 8008e1e:	f000 f8cb 	bl	8008fb8 <__ieee754_rem_pio2f>
 8008e22:	f000 0003 	and.w	r0, r0, #3
 8008e26:	2801      	cmp	r0, #1
 8008e28:	d00a      	beq.n	8008e40 <sinf+0x54>
 8008e2a:	2802      	cmp	r0, #2
 8008e2c:	d00f      	beq.n	8008e4e <sinf+0x62>
 8008e2e:	b9c0      	cbnz	r0, 8008e62 <sinf+0x76>
 8008e30:	eddd 0a01 	vldr	s1, [sp, #4]
 8008e34:	ed9d 0a00 	vldr	s0, [sp]
 8008e38:	2001      	movs	r0, #1
 8008e3a:	f000 f875 	bl	8008f28 <__kernel_sinf>
 8008e3e:	e7ea      	b.n	8008e16 <sinf+0x2a>
 8008e40:	eddd 0a01 	vldr	s1, [sp, #4]
 8008e44:	ed9d 0a00 	vldr	s0, [sp]
 8008e48:	f000 f816 	bl	8008e78 <__kernel_cosf>
 8008e4c:	e7e3      	b.n	8008e16 <sinf+0x2a>
 8008e4e:	eddd 0a01 	vldr	s1, [sp, #4]
 8008e52:	ed9d 0a00 	vldr	s0, [sp]
 8008e56:	2001      	movs	r0, #1
 8008e58:	f000 f866 	bl	8008f28 <__kernel_sinf>
 8008e5c:	eeb1 0a40 	vneg.f32	s0, s0
 8008e60:	e7d9      	b.n	8008e16 <sinf+0x2a>
 8008e62:	eddd 0a01 	vldr	s1, [sp, #4]
 8008e66:	ed9d 0a00 	vldr	s0, [sp]
 8008e6a:	f000 f805 	bl	8008e78 <__kernel_cosf>
 8008e6e:	e7f5      	b.n	8008e5c <sinf+0x70>
 8008e70:	3f490fd8 	.word	0x3f490fd8
 8008e74:	00000000 	.word	0x00000000

08008e78 <__kernel_cosf>:
 8008e78:	ee10 3a10 	vmov	r3, s0
 8008e7c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008e80:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 8008e84:	eef0 6a40 	vmov.f32	s13, s0
 8008e88:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8008e8c:	d204      	bcs.n	8008e98 <__kernel_cosf+0x20>
 8008e8e:	eefd 7ae6 	vcvt.s32.f32	s15, s13
 8008e92:	ee17 2a90 	vmov	r2, s15
 8008e96:	b342      	cbz	r2, 8008eea <__kernel_cosf+0x72>
 8008e98:	ee26 7aa6 	vmul.f32	s14, s13, s13
 8008e9c:	eddf 7a1a 	vldr	s15, [pc, #104]	@ 8008f08 <__kernel_cosf+0x90>
 8008ea0:	ed9f 6a1a 	vldr	s12, [pc, #104]	@ 8008f0c <__kernel_cosf+0x94>
 8008ea4:	4a1a      	ldr	r2, [pc, #104]	@ (8008f10 <__kernel_cosf+0x98>)
 8008ea6:	eea7 6a27 	vfma.f32	s12, s14, s15
 8008eaa:	4293      	cmp	r3, r2
 8008eac:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8008f14 <__kernel_cosf+0x9c>
 8008eb0:	eee6 7a07 	vfma.f32	s15, s12, s14
 8008eb4:	ed9f 6a18 	vldr	s12, [pc, #96]	@ 8008f18 <__kernel_cosf+0xa0>
 8008eb8:	eea7 6a87 	vfma.f32	s12, s15, s14
 8008ebc:	eddf 7a17 	vldr	s15, [pc, #92]	@ 8008f1c <__kernel_cosf+0xa4>
 8008ec0:	eee6 7a07 	vfma.f32	s15, s12, s14
 8008ec4:	ed9f 6a16 	vldr	s12, [pc, #88]	@ 8008f20 <__kernel_cosf+0xa8>
 8008ec8:	eea7 6a87 	vfma.f32	s12, s15, s14
 8008ecc:	ee60 0ae6 	vnmul.f32	s1, s1, s13
 8008ed0:	ee26 6a07 	vmul.f32	s12, s12, s14
 8008ed4:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8008ed8:	eee7 0a06 	vfma.f32	s1, s14, s12
 8008edc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008ee0:	d804      	bhi.n	8008eec <__kernel_cosf+0x74>
 8008ee2:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8008ee6:	ee30 0a67 	vsub.f32	s0, s0, s15
 8008eea:	4770      	bx	lr
 8008eec:	4a0d      	ldr	r2, [pc, #52]	@ (8008f24 <__kernel_cosf+0xac>)
 8008eee:	4293      	cmp	r3, r2
 8008ef0:	bf9a      	itte	ls
 8008ef2:	f103 437f 	addls.w	r3, r3, #4278190080	@ 0xff000000
 8008ef6:	ee07 3a10 	vmovls	s14, r3
 8008efa:	eeb5 7a02 	vmovhi.f32	s14, #82	@ 0x3e900000  0.2812500
 8008efe:	ee30 0a47 	vsub.f32	s0, s0, s14
 8008f02:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8008f06:	e7ec      	b.n	8008ee2 <__kernel_cosf+0x6a>
 8008f08:	ad47d74e 	.word	0xad47d74e
 8008f0c:	310f74f6 	.word	0x310f74f6
 8008f10:	3e999999 	.word	0x3e999999
 8008f14:	b493f27c 	.word	0xb493f27c
 8008f18:	37d00d01 	.word	0x37d00d01
 8008f1c:	bab60b61 	.word	0xbab60b61
 8008f20:	3d2aaaab 	.word	0x3d2aaaab
 8008f24:	3f480000 	.word	0x3f480000

08008f28 <__kernel_sinf>:
 8008f28:	ee10 3a10 	vmov	r3, s0
 8008f2c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008f30:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 8008f34:	d204      	bcs.n	8008f40 <__kernel_sinf+0x18>
 8008f36:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8008f3a:	ee17 3a90 	vmov	r3, s15
 8008f3e:	b35b      	cbz	r3, 8008f98 <__kernel_sinf+0x70>
 8008f40:	ee20 7a00 	vmul.f32	s14, s0, s0
 8008f44:	eddf 7a15 	vldr	s15, [pc, #84]	@ 8008f9c <__kernel_sinf+0x74>
 8008f48:	ed9f 6a15 	vldr	s12, [pc, #84]	@ 8008fa0 <__kernel_sinf+0x78>
 8008f4c:	eea7 6a27 	vfma.f32	s12, s14, s15
 8008f50:	eddf 7a14 	vldr	s15, [pc, #80]	@ 8008fa4 <__kernel_sinf+0x7c>
 8008f54:	eee6 7a07 	vfma.f32	s15, s12, s14
 8008f58:	ed9f 6a13 	vldr	s12, [pc, #76]	@ 8008fa8 <__kernel_sinf+0x80>
 8008f5c:	eea7 6a87 	vfma.f32	s12, s15, s14
 8008f60:	eddf 7a12 	vldr	s15, [pc, #72]	@ 8008fac <__kernel_sinf+0x84>
 8008f64:	ee60 6a07 	vmul.f32	s13, s0, s14
 8008f68:	eee6 7a07 	vfma.f32	s15, s12, s14
 8008f6c:	b930      	cbnz	r0, 8008f7c <__kernel_sinf+0x54>
 8008f6e:	ed9f 6a10 	vldr	s12, [pc, #64]	@ 8008fb0 <__kernel_sinf+0x88>
 8008f72:	eea7 6a27 	vfma.f32	s12, s14, s15
 8008f76:	eea6 0a26 	vfma.f32	s0, s12, s13
 8008f7a:	4770      	bx	lr
 8008f7c:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8008f80:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 8008f84:	eee0 7a86 	vfma.f32	s15, s1, s12
 8008f88:	eed7 0a87 	vfnms.f32	s1, s15, s14
 8008f8c:	eddf 7a09 	vldr	s15, [pc, #36]	@ 8008fb4 <__kernel_sinf+0x8c>
 8008f90:	eee6 0aa7 	vfma.f32	s1, s13, s15
 8008f94:	ee30 0a60 	vsub.f32	s0, s0, s1
 8008f98:	4770      	bx	lr
 8008f9a:	bf00      	nop
 8008f9c:	2f2ec9d3 	.word	0x2f2ec9d3
 8008fa0:	b2d72f34 	.word	0xb2d72f34
 8008fa4:	3638ef1b 	.word	0x3638ef1b
 8008fa8:	b9500d01 	.word	0xb9500d01
 8008fac:	3c088889 	.word	0x3c088889
 8008fb0:	be2aaaab 	.word	0xbe2aaaab
 8008fb4:	3e2aaaab 	.word	0x3e2aaaab

08008fb8 <__ieee754_rem_pio2f>:
 8008fb8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008fba:	ee10 6a10 	vmov	r6, s0
 8008fbe:	4b88      	ldr	r3, [pc, #544]	@ (80091e0 <__ieee754_rem_pio2f+0x228>)
 8008fc0:	f026 4500 	bic.w	r5, r6, #2147483648	@ 0x80000000
 8008fc4:	429d      	cmp	r5, r3
 8008fc6:	b087      	sub	sp, #28
 8008fc8:	4604      	mov	r4, r0
 8008fca:	d805      	bhi.n	8008fd8 <__ieee754_rem_pio2f+0x20>
 8008fcc:	2300      	movs	r3, #0
 8008fce:	ed80 0a00 	vstr	s0, [r0]
 8008fd2:	6043      	str	r3, [r0, #4]
 8008fd4:	2000      	movs	r0, #0
 8008fd6:	e022      	b.n	800901e <__ieee754_rem_pio2f+0x66>
 8008fd8:	4b82      	ldr	r3, [pc, #520]	@ (80091e4 <__ieee754_rem_pio2f+0x22c>)
 8008fda:	429d      	cmp	r5, r3
 8008fdc:	d83a      	bhi.n	8009054 <__ieee754_rem_pio2f+0x9c>
 8008fde:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 8008fe2:	2e00      	cmp	r6, #0
 8008fe4:	ed9f 7a80 	vldr	s14, [pc, #512]	@ 80091e8 <__ieee754_rem_pio2f+0x230>
 8008fe8:	4a80      	ldr	r2, [pc, #512]	@ (80091ec <__ieee754_rem_pio2f+0x234>)
 8008fea:	f023 030f 	bic.w	r3, r3, #15
 8008fee:	dd18      	ble.n	8009022 <__ieee754_rem_pio2f+0x6a>
 8008ff0:	4293      	cmp	r3, r2
 8008ff2:	ee70 7a47 	vsub.f32	s15, s0, s14
 8008ff6:	bf09      	itett	eq
 8008ff8:	ed9f 7a7d 	vldreq	s14, [pc, #500]	@ 80091f0 <__ieee754_rem_pio2f+0x238>
 8008ffc:	eddf 6a7d 	vldrne	s13, [pc, #500]	@ 80091f4 <__ieee754_rem_pio2f+0x23c>
 8009000:	eddf 6a7d 	vldreq	s13, [pc, #500]	@ 80091f8 <__ieee754_rem_pio2f+0x240>
 8009004:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 8009008:	ee37 7ae6 	vsub.f32	s14, s15, s13
 800900c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8009010:	ed80 7a00 	vstr	s14, [r0]
 8009014:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8009018:	edc0 7a01 	vstr	s15, [r0, #4]
 800901c:	2001      	movs	r0, #1
 800901e:	b007      	add	sp, #28
 8009020:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009022:	4293      	cmp	r3, r2
 8009024:	ee70 7a07 	vadd.f32	s15, s0, s14
 8009028:	bf09      	itett	eq
 800902a:	ed9f 7a71 	vldreq	s14, [pc, #452]	@ 80091f0 <__ieee754_rem_pio2f+0x238>
 800902e:	eddf 6a71 	vldrne	s13, [pc, #452]	@ 80091f4 <__ieee754_rem_pio2f+0x23c>
 8009032:	eddf 6a71 	vldreq	s13, [pc, #452]	@ 80091f8 <__ieee754_rem_pio2f+0x240>
 8009036:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 800903a:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800903e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8009042:	ed80 7a00 	vstr	s14, [r0]
 8009046:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800904a:	edc0 7a01 	vstr	s15, [r0, #4]
 800904e:	f04f 30ff 	mov.w	r0, #4294967295
 8009052:	e7e4      	b.n	800901e <__ieee754_rem_pio2f+0x66>
 8009054:	4b69      	ldr	r3, [pc, #420]	@ (80091fc <__ieee754_rem_pio2f+0x244>)
 8009056:	429d      	cmp	r5, r3
 8009058:	d873      	bhi.n	8009142 <__ieee754_rem_pio2f+0x18a>
 800905a:	f000 f8dd 	bl	8009218 <fabsf>
 800905e:	ed9f 7a68 	vldr	s14, [pc, #416]	@ 8009200 <__ieee754_rem_pio2f+0x248>
 8009062:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8009066:	eee0 7a07 	vfma.f32	s15, s0, s14
 800906a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800906e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8009072:	ee17 0a90 	vmov	r0, s15
 8009076:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 80091e8 <__ieee754_rem_pio2f+0x230>
 800907a:	eea7 0a67 	vfms.f32	s0, s14, s15
 800907e:	281f      	cmp	r0, #31
 8009080:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 80091f4 <__ieee754_rem_pio2f+0x23c>
 8009084:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009088:	eeb1 6a47 	vneg.f32	s12, s14
 800908c:	ee70 6a67 	vsub.f32	s13, s0, s15
 8009090:	ee16 1a90 	vmov	r1, s13
 8009094:	dc09      	bgt.n	80090aa <__ieee754_rem_pio2f+0xf2>
 8009096:	4a5b      	ldr	r2, [pc, #364]	@ (8009204 <__ieee754_rem_pio2f+0x24c>)
 8009098:	1e47      	subs	r7, r0, #1
 800909a:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 800909e:	f852 2027 	ldr.w	r2, [r2, r7, lsl #2]
 80090a2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80090a6:	4293      	cmp	r3, r2
 80090a8:	d107      	bne.n	80090ba <__ieee754_rem_pio2f+0x102>
 80090aa:	f3c1 52c7 	ubfx	r2, r1, #23, #8
 80090ae:	ebc2 52d5 	rsb	r2, r2, r5, lsr #23
 80090b2:	2a08      	cmp	r2, #8
 80090b4:	ea4f 53e5 	mov.w	r3, r5, asr #23
 80090b8:	dc14      	bgt.n	80090e4 <__ieee754_rem_pio2f+0x12c>
 80090ba:	6021      	str	r1, [r4, #0]
 80090bc:	ed94 7a00 	vldr	s14, [r4]
 80090c0:	ee30 0a47 	vsub.f32	s0, s0, s14
 80090c4:	2e00      	cmp	r6, #0
 80090c6:	ee30 0a67 	vsub.f32	s0, s0, s15
 80090ca:	ed84 0a01 	vstr	s0, [r4, #4]
 80090ce:	daa6      	bge.n	800901e <__ieee754_rem_pio2f+0x66>
 80090d0:	eeb1 7a47 	vneg.f32	s14, s14
 80090d4:	eeb1 0a40 	vneg.f32	s0, s0
 80090d8:	ed84 7a00 	vstr	s14, [r4]
 80090dc:	ed84 0a01 	vstr	s0, [r4, #4]
 80090e0:	4240      	negs	r0, r0
 80090e2:	e79c      	b.n	800901e <__ieee754_rem_pio2f+0x66>
 80090e4:	eddf 5a42 	vldr	s11, [pc, #264]	@ 80091f0 <__ieee754_rem_pio2f+0x238>
 80090e8:	eef0 6a40 	vmov.f32	s13, s0
 80090ec:	eee6 6a25 	vfma.f32	s13, s12, s11
 80090f0:	ee70 7a66 	vsub.f32	s15, s0, s13
 80090f4:	eee6 7a25 	vfma.f32	s15, s12, s11
 80090f8:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 80091f8 <__ieee754_rem_pio2f+0x240>
 80090fc:	eed7 7a25 	vfnms.f32	s15, s14, s11
 8009100:	ee76 5ae7 	vsub.f32	s11, s13, s15
 8009104:	ee15 2a90 	vmov	r2, s11
 8009108:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 800910c:	1a5b      	subs	r3, r3, r1
 800910e:	2b19      	cmp	r3, #25
 8009110:	dc04      	bgt.n	800911c <__ieee754_rem_pio2f+0x164>
 8009112:	edc4 5a00 	vstr	s11, [r4]
 8009116:	eeb0 0a66 	vmov.f32	s0, s13
 800911a:	e7cf      	b.n	80090bc <__ieee754_rem_pio2f+0x104>
 800911c:	eddf 5a3a 	vldr	s11, [pc, #232]	@ 8009208 <__ieee754_rem_pio2f+0x250>
 8009120:	eeb0 0a66 	vmov.f32	s0, s13
 8009124:	eea6 0a25 	vfma.f32	s0, s12, s11
 8009128:	ee76 7ac0 	vsub.f32	s15, s13, s0
 800912c:	eddf 6a37 	vldr	s13, [pc, #220]	@ 800920c <__ieee754_rem_pio2f+0x254>
 8009130:	eee6 7a25 	vfma.f32	s15, s12, s11
 8009134:	eed7 7a26 	vfnms.f32	s15, s14, s13
 8009138:	ee30 7a67 	vsub.f32	s14, s0, s15
 800913c:	ed84 7a00 	vstr	s14, [r4]
 8009140:	e7bc      	b.n	80090bc <__ieee754_rem_pio2f+0x104>
 8009142:	f1b5 4fff 	cmp.w	r5, #2139095040	@ 0x7f800000
 8009146:	d306      	bcc.n	8009156 <__ieee754_rem_pio2f+0x19e>
 8009148:	ee70 7a40 	vsub.f32	s15, s0, s0
 800914c:	edc0 7a01 	vstr	s15, [r0, #4]
 8009150:	edc0 7a00 	vstr	s15, [r0]
 8009154:	e73e      	b.n	8008fd4 <__ieee754_rem_pio2f+0x1c>
 8009156:	15ea      	asrs	r2, r5, #23
 8009158:	3a86      	subs	r2, #134	@ 0x86
 800915a:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 800915e:	ee07 3a90 	vmov	s15, r3
 8009162:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8009166:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 8009210 <__ieee754_rem_pio2f+0x258>
 800916a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800916e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8009172:	ed8d 7a03 	vstr	s14, [sp, #12]
 8009176:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800917a:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800917e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8009182:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8009186:	ed8d 7a04 	vstr	s14, [sp, #16]
 800918a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800918e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8009192:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009196:	edcd 7a05 	vstr	s15, [sp, #20]
 800919a:	d11e      	bne.n	80091da <__ieee754_rem_pio2f+0x222>
 800919c:	eeb5 7a40 	vcmp.f32	s14, #0.0
 80091a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80091a4:	bf0c      	ite	eq
 80091a6:	2301      	moveq	r3, #1
 80091a8:	2302      	movne	r3, #2
 80091aa:	491a      	ldr	r1, [pc, #104]	@ (8009214 <__ieee754_rem_pio2f+0x25c>)
 80091ac:	9101      	str	r1, [sp, #4]
 80091ae:	2102      	movs	r1, #2
 80091b0:	9100      	str	r1, [sp, #0]
 80091b2:	a803      	add	r0, sp, #12
 80091b4:	4621      	mov	r1, r4
 80091b6:	f000 f837 	bl	8009228 <__kernel_rem_pio2f>
 80091ba:	2e00      	cmp	r6, #0
 80091bc:	f6bf af2f 	bge.w	800901e <__ieee754_rem_pio2f+0x66>
 80091c0:	edd4 7a00 	vldr	s15, [r4]
 80091c4:	eef1 7a67 	vneg.f32	s15, s15
 80091c8:	edc4 7a00 	vstr	s15, [r4]
 80091cc:	edd4 7a01 	vldr	s15, [r4, #4]
 80091d0:	eef1 7a67 	vneg.f32	s15, s15
 80091d4:	edc4 7a01 	vstr	s15, [r4, #4]
 80091d8:	e782      	b.n	80090e0 <__ieee754_rem_pio2f+0x128>
 80091da:	2303      	movs	r3, #3
 80091dc:	e7e5      	b.n	80091aa <__ieee754_rem_pio2f+0x1f2>
 80091de:	bf00      	nop
 80091e0:	3f490fd8 	.word	0x3f490fd8
 80091e4:	4016cbe3 	.word	0x4016cbe3
 80091e8:	3fc90f80 	.word	0x3fc90f80
 80091ec:	3fc90fd0 	.word	0x3fc90fd0
 80091f0:	37354400 	.word	0x37354400
 80091f4:	37354443 	.word	0x37354443
 80091f8:	2e85a308 	.word	0x2e85a308
 80091fc:	43490f80 	.word	0x43490f80
 8009200:	3f22f984 	.word	0x3f22f984
 8009204:	08009934 	.word	0x08009934
 8009208:	2e85a300 	.word	0x2e85a300
 800920c:	248d3132 	.word	0x248d3132
 8009210:	43800000 	.word	0x43800000
 8009214:	080099b4 	.word	0x080099b4

08009218 <fabsf>:
 8009218:	ee10 3a10 	vmov	r3, s0
 800921c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8009220:	ee00 3a10 	vmov	s0, r3
 8009224:	4770      	bx	lr
	...

08009228 <__kernel_rem_pio2f>:
 8009228:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800922c:	ed2d 8b04 	vpush	{d8-d9}
 8009230:	b0d9      	sub	sp, #356	@ 0x164
 8009232:	4690      	mov	r8, r2
 8009234:	9001      	str	r0, [sp, #4]
 8009236:	4ab6      	ldr	r2, [pc, #728]	@ (8009510 <__kernel_rem_pio2f+0x2e8>)
 8009238:	9866      	ldr	r0, [sp, #408]	@ 0x198
 800923a:	f118 0f04 	cmn.w	r8, #4
 800923e:	f852 a020 	ldr.w	sl, [r2, r0, lsl #2]
 8009242:	460f      	mov	r7, r1
 8009244:	f103 3bff 	add.w	fp, r3, #4294967295
 8009248:	db26      	blt.n	8009298 <__kernel_rem_pio2f+0x70>
 800924a:	f1b8 0203 	subs.w	r2, r8, #3
 800924e:	bf48      	it	mi
 8009250:	f108 0204 	addmi.w	r2, r8, #4
 8009254:	10d2      	asrs	r2, r2, #3
 8009256:	1c55      	adds	r5, r2, #1
 8009258:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 800925a:	ed9f 7ab1 	vldr	s14, [pc, #708]	@ 8009520 <__kernel_rem_pio2f+0x2f8>
 800925e:	00e8      	lsls	r0, r5, #3
 8009260:	eba2 060b 	sub.w	r6, r2, fp
 8009264:	9002      	str	r0, [sp, #8]
 8009266:	eba8 05c5 	sub.w	r5, r8, r5, lsl #3
 800926a:	eb0a 0c0b 	add.w	ip, sl, fp
 800926e:	ac1c      	add	r4, sp, #112	@ 0x70
 8009270:	eb01 0e86 	add.w	lr, r1, r6, lsl #2
 8009274:	2000      	movs	r0, #0
 8009276:	4560      	cmp	r0, ip
 8009278:	dd10      	ble.n	800929c <__kernel_rem_pio2f+0x74>
 800927a:	a91c      	add	r1, sp, #112	@ 0x70
 800927c:	eb01 0083 	add.w	r0, r1, r3, lsl #2
 8009280:	f50d 7988 	add.w	r9, sp, #272	@ 0x110
 8009284:	2600      	movs	r6, #0
 8009286:	4556      	cmp	r6, sl
 8009288:	dc24      	bgt.n	80092d4 <__kernel_rem_pio2f+0xac>
 800928a:	f8dd e004 	ldr.w	lr, [sp, #4]
 800928e:	eddf 7aa4 	vldr	s15, [pc, #656]	@ 8009520 <__kernel_rem_pio2f+0x2f8>
 8009292:	4684      	mov	ip, r0
 8009294:	2400      	movs	r4, #0
 8009296:	e016      	b.n	80092c6 <__kernel_rem_pio2f+0x9e>
 8009298:	2200      	movs	r2, #0
 800929a:	e7dc      	b.n	8009256 <__kernel_rem_pio2f+0x2e>
 800929c:	42c6      	cmn	r6, r0
 800929e:	bf5d      	ittte	pl
 80092a0:	f85e 1020 	ldrpl.w	r1, [lr, r0, lsl #2]
 80092a4:	ee07 1a90 	vmovpl	s15, r1
 80092a8:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 80092ac:	eef0 7a47 	vmovmi.f32	s15, s14
 80092b0:	ece4 7a01 	vstmia	r4!, {s15}
 80092b4:	3001      	adds	r0, #1
 80092b6:	e7de      	b.n	8009276 <__kernel_rem_pio2f+0x4e>
 80092b8:	ecfe 6a01 	vldmia	lr!, {s13}
 80092bc:	ed3c 7a01 	vldmdb	ip!, {s14}
 80092c0:	eee6 7a87 	vfma.f32	s15, s13, s14
 80092c4:	3401      	adds	r4, #1
 80092c6:	455c      	cmp	r4, fp
 80092c8:	ddf6      	ble.n	80092b8 <__kernel_rem_pio2f+0x90>
 80092ca:	ece9 7a01 	vstmia	r9!, {s15}
 80092ce:	3601      	adds	r6, #1
 80092d0:	3004      	adds	r0, #4
 80092d2:	e7d8      	b.n	8009286 <__kernel_rem_pio2f+0x5e>
 80092d4:	a908      	add	r1, sp, #32
 80092d6:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80092da:	9104      	str	r1, [sp, #16]
 80092dc:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 80092de:	eddf 8a8f 	vldr	s17, [pc, #572]	@ 800951c <__kernel_rem_pio2f+0x2f4>
 80092e2:	ed9f 9a8d 	vldr	s18, [pc, #564]	@ 8009518 <__kernel_rem_pio2f+0x2f0>
 80092e6:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 80092ea:	9203      	str	r2, [sp, #12]
 80092ec:	4654      	mov	r4, sl
 80092ee:	00a2      	lsls	r2, r4, #2
 80092f0:	9205      	str	r2, [sp, #20]
 80092f2:	aa58      	add	r2, sp, #352	@ 0x160
 80092f4:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 80092f8:	ed12 0a14 	vldr	s0, [r2, #-80]	@ 0xffffffb0
 80092fc:	a944      	add	r1, sp, #272	@ 0x110
 80092fe:	aa08      	add	r2, sp, #32
 8009300:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 8009304:	4694      	mov	ip, r2
 8009306:	4626      	mov	r6, r4
 8009308:	2e00      	cmp	r6, #0
 800930a:	dc4c      	bgt.n	80093a6 <__kernel_rem_pio2f+0x17e>
 800930c:	4628      	mov	r0, r5
 800930e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8009312:	f000 f9f1 	bl	80096f8 <scalbnf>
 8009316:	eeb0 8a40 	vmov.f32	s16, s0
 800931a:	eeb4 0a00 	vmov.f32	s0, #64	@ 0x3e000000  0.125
 800931e:	ee28 0a00 	vmul.f32	s0, s16, s0
 8009322:	f000 fa4f 	bl	80097c4 <floorf>
 8009326:	eef2 7a00 	vmov.f32	s15, #32	@ 0x41000000  8.0
 800932a:	eea0 8a67 	vfms.f32	s16, s0, s15
 800932e:	2d00      	cmp	r5, #0
 8009330:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009334:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 8009338:	ee17 9a90 	vmov	r9, s15
 800933c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009340:	ee38 8a67 	vsub.f32	s16, s16, s15
 8009344:	dd41      	ble.n	80093ca <__kernel_rem_pio2f+0x1a2>
 8009346:	f104 3cff 	add.w	ip, r4, #4294967295
 800934a:	a908      	add	r1, sp, #32
 800934c:	f1c5 0e08 	rsb	lr, r5, #8
 8009350:	f851 602c 	ldr.w	r6, [r1, ip, lsl #2]
 8009354:	fa46 f00e 	asr.w	r0, r6, lr
 8009358:	4481      	add	r9, r0
 800935a:	fa00 f00e 	lsl.w	r0, r0, lr
 800935e:	1a36      	subs	r6, r6, r0
 8009360:	f1c5 0007 	rsb	r0, r5, #7
 8009364:	f841 602c 	str.w	r6, [r1, ip, lsl #2]
 8009368:	4106      	asrs	r6, r0
 800936a:	2e00      	cmp	r6, #0
 800936c:	dd3c      	ble.n	80093e8 <__kernel_rem_pio2f+0x1c0>
 800936e:	f04f 0e00 	mov.w	lr, #0
 8009372:	f109 0901 	add.w	r9, r9, #1
 8009376:	4670      	mov	r0, lr
 8009378:	4574      	cmp	r4, lr
 800937a:	dc68      	bgt.n	800944e <__kernel_rem_pio2f+0x226>
 800937c:	2d00      	cmp	r5, #0
 800937e:	dd03      	ble.n	8009388 <__kernel_rem_pio2f+0x160>
 8009380:	2d01      	cmp	r5, #1
 8009382:	d074      	beq.n	800946e <__kernel_rem_pio2f+0x246>
 8009384:	2d02      	cmp	r5, #2
 8009386:	d07d      	beq.n	8009484 <__kernel_rem_pio2f+0x25c>
 8009388:	2e02      	cmp	r6, #2
 800938a:	d12d      	bne.n	80093e8 <__kernel_rem_pio2f+0x1c0>
 800938c:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8009390:	ee30 8a48 	vsub.f32	s16, s0, s16
 8009394:	b340      	cbz	r0, 80093e8 <__kernel_rem_pio2f+0x1c0>
 8009396:	4628      	mov	r0, r5
 8009398:	9306      	str	r3, [sp, #24]
 800939a:	f000 f9ad 	bl	80096f8 <scalbnf>
 800939e:	9b06      	ldr	r3, [sp, #24]
 80093a0:	ee38 8a40 	vsub.f32	s16, s16, s0
 80093a4:	e020      	b.n	80093e8 <__kernel_rem_pio2f+0x1c0>
 80093a6:	ee60 7a28 	vmul.f32	s15, s0, s17
 80093aa:	3e01      	subs	r6, #1
 80093ac:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80093b0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80093b4:	eea7 0ac9 	vfms.f32	s0, s15, s18
 80093b8:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80093bc:	ecac 0a01 	vstmia	ip!, {s0}
 80093c0:	ed30 0a01 	vldmdb	r0!, {s0}
 80093c4:	ee37 0a80 	vadd.f32	s0, s15, s0
 80093c8:	e79e      	b.n	8009308 <__kernel_rem_pio2f+0xe0>
 80093ca:	d105      	bne.n	80093d8 <__kernel_rem_pio2f+0x1b0>
 80093cc:	1e60      	subs	r0, r4, #1
 80093ce:	a908      	add	r1, sp, #32
 80093d0:	f851 6020 	ldr.w	r6, [r1, r0, lsl #2]
 80093d4:	11f6      	asrs	r6, r6, #7
 80093d6:	e7c8      	b.n	800936a <__kernel_rem_pio2f+0x142>
 80093d8:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 80093dc:	eeb4 8ae7 	vcmpe.f32	s16, s15
 80093e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80093e4:	da31      	bge.n	800944a <__kernel_rem_pio2f+0x222>
 80093e6:	2600      	movs	r6, #0
 80093e8:	eeb5 8a40 	vcmp.f32	s16, #0.0
 80093ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80093f0:	f040 8098 	bne.w	8009524 <__kernel_rem_pio2f+0x2fc>
 80093f4:	1e60      	subs	r0, r4, #1
 80093f6:	2200      	movs	r2, #0
 80093f8:	4550      	cmp	r0, sl
 80093fa:	da4b      	bge.n	8009494 <__kernel_rem_pio2f+0x26c>
 80093fc:	2a00      	cmp	r2, #0
 80093fe:	d065      	beq.n	80094cc <__kernel_rem_pio2f+0x2a4>
 8009400:	3c01      	subs	r4, #1
 8009402:	ab08      	add	r3, sp, #32
 8009404:	3d08      	subs	r5, #8
 8009406:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800940a:	2b00      	cmp	r3, #0
 800940c:	d0f8      	beq.n	8009400 <__kernel_rem_pio2f+0x1d8>
 800940e:	4628      	mov	r0, r5
 8009410:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8009414:	f000 f970 	bl	80096f8 <scalbnf>
 8009418:	1c63      	adds	r3, r4, #1
 800941a:	aa44      	add	r2, sp, #272	@ 0x110
 800941c:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 800951c <__kernel_rem_pio2f+0x2f4>
 8009420:	0099      	lsls	r1, r3, #2
 8009422:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8009426:	4623      	mov	r3, r4
 8009428:	2b00      	cmp	r3, #0
 800942a:	f280 80a9 	bge.w	8009580 <__kernel_rem_pio2f+0x358>
 800942e:	4623      	mov	r3, r4
 8009430:	2b00      	cmp	r3, #0
 8009432:	f2c0 80c7 	blt.w	80095c4 <__kernel_rem_pio2f+0x39c>
 8009436:	aa44      	add	r2, sp, #272	@ 0x110
 8009438:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 800943c:	f8df c0d4 	ldr.w	ip, [pc, #212]	@ 8009514 <__kernel_rem_pio2f+0x2ec>
 8009440:	eddf 7a37 	vldr	s15, [pc, #220]	@ 8009520 <__kernel_rem_pio2f+0x2f8>
 8009444:	2000      	movs	r0, #0
 8009446:	1ae2      	subs	r2, r4, r3
 8009448:	e0b1      	b.n	80095ae <__kernel_rem_pio2f+0x386>
 800944a:	2602      	movs	r6, #2
 800944c:	e78f      	b.n	800936e <__kernel_rem_pio2f+0x146>
 800944e:	f852 1b04 	ldr.w	r1, [r2], #4
 8009452:	b948      	cbnz	r0, 8009468 <__kernel_rem_pio2f+0x240>
 8009454:	b121      	cbz	r1, 8009460 <__kernel_rem_pio2f+0x238>
 8009456:	f5c1 7180 	rsb	r1, r1, #256	@ 0x100
 800945a:	f842 1c04 	str.w	r1, [r2, #-4]
 800945e:	2101      	movs	r1, #1
 8009460:	f10e 0e01 	add.w	lr, lr, #1
 8009464:	4608      	mov	r0, r1
 8009466:	e787      	b.n	8009378 <__kernel_rem_pio2f+0x150>
 8009468:	f1c1 01ff 	rsb	r1, r1, #255	@ 0xff
 800946c:	e7f5      	b.n	800945a <__kernel_rem_pio2f+0x232>
 800946e:	f104 3cff 	add.w	ip, r4, #4294967295
 8009472:	aa08      	add	r2, sp, #32
 8009474:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 8009478:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800947c:	a908      	add	r1, sp, #32
 800947e:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 8009482:	e781      	b.n	8009388 <__kernel_rem_pio2f+0x160>
 8009484:	f104 3cff 	add.w	ip, r4, #4294967295
 8009488:	aa08      	add	r2, sp, #32
 800948a:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 800948e:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8009492:	e7f3      	b.n	800947c <__kernel_rem_pio2f+0x254>
 8009494:	a908      	add	r1, sp, #32
 8009496:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 800949a:	3801      	subs	r0, #1
 800949c:	430a      	orrs	r2, r1
 800949e:	e7ab      	b.n	80093f8 <__kernel_rem_pio2f+0x1d0>
 80094a0:	3201      	adds	r2, #1
 80094a2:	f850 6d04 	ldr.w	r6, [r0, #-4]!
 80094a6:	2e00      	cmp	r6, #0
 80094a8:	d0fa      	beq.n	80094a0 <__kernel_rem_pio2f+0x278>
 80094aa:	9905      	ldr	r1, [sp, #20]
 80094ac:	f501 71b0 	add.w	r1, r1, #352	@ 0x160
 80094b0:	eb0d 0001 	add.w	r0, sp, r1
 80094b4:	18e6      	adds	r6, r4, r3
 80094b6:	a91c      	add	r1, sp, #112	@ 0x70
 80094b8:	f104 0c01 	add.w	ip, r4, #1
 80094bc:	384c      	subs	r0, #76	@ 0x4c
 80094be:	eb01 0686 	add.w	r6, r1, r6, lsl #2
 80094c2:	4422      	add	r2, r4
 80094c4:	4562      	cmp	r2, ip
 80094c6:	da04      	bge.n	80094d2 <__kernel_rem_pio2f+0x2aa>
 80094c8:	4614      	mov	r4, r2
 80094ca:	e710      	b.n	80092ee <__kernel_rem_pio2f+0xc6>
 80094cc:	9804      	ldr	r0, [sp, #16]
 80094ce:	2201      	movs	r2, #1
 80094d0:	e7e7      	b.n	80094a2 <__kernel_rem_pio2f+0x27a>
 80094d2:	9903      	ldr	r1, [sp, #12]
 80094d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80094d8:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 80094dc:	9105      	str	r1, [sp, #20]
 80094de:	ee07 1a90 	vmov	s15, r1
 80094e2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80094e6:	2400      	movs	r4, #0
 80094e8:	ece6 7a01 	vstmia	r6!, {s15}
 80094ec:	eddf 7a0c 	vldr	s15, [pc, #48]	@ 8009520 <__kernel_rem_pio2f+0x2f8>
 80094f0:	46b1      	mov	r9, r6
 80094f2:	455c      	cmp	r4, fp
 80094f4:	dd04      	ble.n	8009500 <__kernel_rem_pio2f+0x2d8>
 80094f6:	ece0 7a01 	vstmia	r0!, {s15}
 80094fa:	f10c 0c01 	add.w	ip, ip, #1
 80094fe:	e7e1      	b.n	80094c4 <__kernel_rem_pio2f+0x29c>
 8009500:	ecfe 6a01 	vldmia	lr!, {s13}
 8009504:	ed39 7a01 	vldmdb	r9!, {s14}
 8009508:	3401      	adds	r4, #1
 800950a:	eee6 7a87 	vfma.f32	s15, s13, s14
 800950e:	e7f0      	b.n	80094f2 <__kernel_rem_pio2f+0x2ca>
 8009510:	08009cf8 	.word	0x08009cf8
 8009514:	08009ccc 	.word	0x08009ccc
 8009518:	43800000 	.word	0x43800000
 800951c:	3b800000 	.word	0x3b800000
 8009520:	00000000 	.word	0x00000000
 8009524:	9b02      	ldr	r3, [sp, #8]
 8009526:	eeb0 0a48 	vmov.f32	s0, s16
 800952a:	eba3 0008 	sub.w	r0, r3, r8
 800952e:	f000 f8e3 	bl	80096f8 <scalbnf>
 8009532:	ed1f 7a07 	vldr	s14, [pc, #-28]	@ 8009518 <__kernel_rem_pio2f+0x2f0>
 8009536:	eeb4 0ac7 	vcmpe.f32	s0, s14
 800953a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800953e:	db19      	blt.n	8009574 <__kernel_rem_pio2f+0x34c>
 8009540:	ed5f 7a0a 	vldr	s15, [pc, #-40]	@ 800951c <__kernel_rem_pio2f+0x2f4>
 8009544:	ee60 7a27 	vmul.f32	s15, s0, s15
 8009548:	aa08      	add	r2, sp, #32
 800954a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800954e:	3508      	adds	r5, #8
 8009550:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009554:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8009558:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800955c:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8009560:	ee10 3a10 	vmov	r3, s0
 8009564:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8009568:	ee17 3a90 	vmov	r3, s15
 800956c:	3401      	adds	r4, #1
 800956e:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8009572:	e74c      	b.n	800940e <__kernel_rem_pio2f+0x1e6>
 8009574:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8009578:	aa08      	add	r2, sp, #32
 800957a:	ee10 3a10 	vmov	r3, s0
 800957e:	e7f6      	b.n	800956e <__kernel_rem_pio2f+0x346>
 8009580:	a808      	add	r0, sp, #32
 8009582:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 8009586:	9001      	str	r0, [sp, #4]
 8009588:	ee07 0a90 	vmov	s15, r0
 800958c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009590:	3b01      	subs	r3, #1
 8009592:	ee67 7a80 	vmul.f32	s15, s15, s0
 8009596:	ee20 0a07 	vmul.f32	s0, s0, s14
 800959a:	ed62 7a01 	vstmdb	r2!, {s15}
 800959e:	e743      	b.n	8009428 <__kernel_rem_pio2f+0x200>
 80095a0:	ecfc 6a01 	vldmia	ip!, {s13}
 80095a4:	ecb5 7a01 	vldmia	r5!, {s14}
 80095a8:	eee6 7a87 	vfma.f32	s15, s13, s14
 80095ac:	3001      	adds	r0, #1
 80095ae:	4550      	cmp	r0, sl
 80095b0:	dc01      	bgt.n	80095b6 <__kernel_rem_pio2f+0x38e>
 80095b2:	4290      	cmp	r0, r2
 80095b4:	ddf4      	ble.n	80095a0 <__kernel_rem_pio2f+0x378>
 80095b6:	a858      	add	r0, sp, #352	@ 0x160
 80095b8:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 80095bc:	ed42 7a28 	vstr	s15, [r2, #-160]	@ 0xffffff60
 80095c0:	3b01      	subs	r3, #1
 80095c2:	e735      	b.n	8009430 <__kernel_rem_pio2f+0x208>
 80095c4:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 80095c6:	2b02      	cmp	r3, #2
 80095c8:	dc09      	bgt.n	80095de <__kernel_rem_pio2f+0x3b6>
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	dc27      	bgt.n	800961e <__kernel_rem_pio2f+0x3f6>
 80095ce:	d040      	beq.n	8009652 <__kernel_rem_pio2f+0x42a>
 80095d0:	f009 0007 	and.w	r0, r9, #7
 80095d4:	b059      	add	sp, #356	@ 0x164
 80095d6:	ecbd 8b04 	vpop	{d8-d9}
 80095da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80095de:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 80095e0:	2b03      	cmp	r3, #3
 80095e2:	d1f5      	bne.n	80095d0 <__kernel_rem_pio2f+0x3a8>
 80095e4:	aa30      	add	r2, sp, #192	@ 0xc0
 80095e6:	1f0b      	subs	r3, r1, #4
 80095e8:	4413      	add	r3, r2
 80095ea:	461a      	mov	r2, r3
 80095ec:	4620      	mov	r0, r4
 80095ee:	2800      	cmp	r0, #0
 80095f0:	dc50      	bgt.n	8009694 <__kernel_rem_pio2f+0x46c>
 80095f2:	4622      	mov	r2, r4
 80095f4:	2a01      	cmp	r2, #1
 80095f6:	dc5d      	bgt.n	80096b4 <__kernel_rem_pio2f+0x48c>
 80095f8:	ab30      	add	r3, sp, #192	@ 0xc0
 80095fa:	ed5f 7a37 	vldr	s15, [pc, #-220]	@ 8009520 <__kernel_rem_pio2f+0x2f8>
 80095fe:	440b      	add	r3, r1
 8009600:	2c01      	cmp	r4, #1
 8009602:	dc67      	bgt.n	80096d4 <__kernel_rem_pio2f+0x4ac>
 8009604:	eddd 6a30 	vldr	s13, [sp, #192]	@ 0xc0
 8009608:	ed9d 7a31 	vldr	s14, [sp, #196]	@ 0xc4
 800960c:	2e00      	cmp	r6, #0
 800960e:	d167      	bne.n	80096e0 <__kernel_rem_pio2f+0x4b8>
 8009610:	edc7 6a00 	vstr	s13, [r7]
 8009614:	ed87 7a01 	vstr	s14, [r7, #4]
 8009618:	edc7 7a02 	vstr	s15, [r7, #8]
 800961c:	e7d8      	b.n	80095d0 <__kernel_rem_pio2f+0x3a8>
 800961e:	ab30      	add	r3, sp, #192	@ 0xc0
 8009620:	ed1f 7a41 	vldr	s14, [pc, #-260]	@ 8009520 <__kernel_rem_pio2f+0x2f8>
 8009624:	440b      	add	r3, r1
 8009626:	4622      	mov	r2, r4
 8009628:	2a00      	cmp	r2, #0
 800962a:	da24      	bge.n	8009676 <__kernel_rem_pio2f+0x44e>
 800962c:	b34e      	cbz	r6, 8009682 <__kernel_rem_pio2f+0x45a>
 800962e:	eef1 7a47 	vneg.f32	s15, s14
 8009632:	edc7 7a00 	vstr	s15, [r7]
 8009636:	eddd 7a30 	vldr	s15, [sp, #192]	@ 0xc0
 800963a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800963e:	aa31      	add	r2, sp, #196	@ 0xc4
 8009640:	2301      	movs	r3, #1
 8009642:	429c      	cmp	r4, r3
 8009644:	da20      	bge.n	8009688 <__kernel_rem_pio2f+0x460>
 8009646:	b10e      	cbz	r6, 800964c <__kernel_rem_pio2f+0x424>
 8009648:	eef1 7a67 	vneg.f32	s15, s15
 800964c:	edc7 7a01 	vstr	s15, [r7, #4]
 8009650:	e7be      	b.n	80095d0 <__kernel_rem_pio2f+0x3a8>
 8009652:	ab30      	add	r3, sp, #192	@ 0xc0
 8009654:	ed5f 7a4e 	vldr	s15, [pc, #-312]	@ 8009520 <__kernel_rem_pio2f+0x2f8>
 8009658:	440b      	add	r3, r1
 800965a:	2c00      	cmp	r4, #0
 800965c:	da05      	bge.n	800966a <__kernel_rem_pio2f+0x442>
 800965e:	b10e      	cbz	r6, 8009664 <__kernel_rem_pio2f+0x43c>
 8009660:	eef1 7a67 	vneg.f32	s15, s15
 8009664:	edc7 7a00 	vstr	s15, [r7]
 8009668:	e7b2      	b.n	80095d0 <__kernel_rem_pio2f+0x3a8>
 800966a:	ed33 7a01 	vldmdb	r3!, {s14}
 800966e:	3c01      	subs	r4, #1
 8009670:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009674:	e7f1      	b.n	800965a <__kernel_rem_pio2f+0x432>
 8009676:	ed73 7a01 	vldmdb	r3!, {s15}
 800967a:	3a01      	subs	r2, #1
 800967c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009680:	e7d2      	b.n	8009628 <__kernel_rem_pio2f+0x400>
 8009682:	eef0 7a47 	vmov.f32	s15, s14
 8009686:	e7d4      	b.n	8009632 <__kernel_rem_pio2f+0x40a>
 8009688:	ecb2 7a01 	vldmia	r2!, {s14}
 800968c:	3301      	adds	r3, #1
 800968e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009692:	e7d6      	b.n	8009642 <__kernel_rem_pio2f+0x41a>
 8009694:	ed72 7a01 	vldmdb	r2!, {s15}
 8009698:	edd2 6a01 	vldr	s13, [r2, #4]
 800969c:	ee37 7aa6 	vadd.f32	s14, s15, s13
 80096a0:	3801      	subs	r0, #1
 80096a2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80096a6:	ed82 7a00 	vstr	s14, [r2]
 80096aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80096ae:	edc2 7a01 	vstr	s15, [r2, #4]
 80096b2:	e79c      	b.n	80095ee <__kernel_rem_pio2f+0x3c6>
 80096b4:	ed73 7a01 	vldmdb	r3!, {s15}
 80096b8:	edd3 6a01 	vldr	s13, [r3, #4]
 80096bc:	ee37 7aa6 	vadd.f32	s14, s15, s13
 80096c0:	3a01      	subs	r2, #1
 80096c2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80096c6:	ed83 7a00 	vstr	s14, [r3]
 80096ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80096ce:	edc3 7a01 	vstr	s15, [r3, #4]
 80096d2:	e78f      	b.n	80095f4 <__kernel_rem_pio2f+0x3cc>
 80096d4:	ed33 7a01 	vldmdb	r3!, {s14}
 80096d8:	3c01      	subs	r4, #1
 80096da:	ee77 7a87 	vadd.f32	s15, s15, s14
 80096de:	e78f      	b.n	8009600 <__kernel_rem_pio2f+0x3d8>
 80096e0:	eef1 6a66 	vneg.f32	s13, s13
 80096e4:	eeb1 7a47 	vneg.f32	s14, s14
 80096e8:	edc7 6a00 	vstr	s13, [r7]
 80096ec:	ed87 7a01 	vstr	s14, [r7, #4]
 80096f0:	eef1 7a67 	vneg.f32	s15, s15
 80096f4:	e790      	b.n	8009618 <__kernel_rem_pio2f+0x3f0>
 80096f6:	bf00      	nop

080096f8 <scalbnf>:
 80096f8:	ee10 3a10 	vmov	r3, s0
 80096fc:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 8009700:	d02b      	beq.n	800975a <scalbnf+0x62>
 8009702:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 8009706:	d302      	bcc.n	800970e <scalbnf+0x16>
 8009708:	ee30 0a00 	vadd.f32	s0, s0, s0
 800970c:	4770      	bx	lr
 800970e:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 8009712:	d123      	bne.n	800975c <scalbnf+0x64>
 8009714:	4b24      	ldr	r3, [pc, #144]	@ (80097a8 <scalbnf+0xb0>)
 8009716:	eddf 7a25 	vldr	s15, [pc, #148]	@ 80097ac <scalbnf+0xb4>
 800971a:	4298      	cmp	r0, r3
 800971c:	ee20 0a27 	vmul.f32	s0, s0, s15
 8009720:	db17      	blt.n	8009752 <scalbnf+0x5a>
 8009722:	ee10 3a10 	vmov	r3, s0
 8009726:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800972a:	3a19      	subs	r2, #25
 800972c:	f24c 3150 	movw	r1, #50000	@ 0xc350
 8009730:	4288      	cmp	r0, r1
 8009732:	dd15      	ble.n	8009760 <scalbnf+0x68>
 8009734:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 80097b0 <scalbnf+0xb8>
 8009738:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 80097b4 <scalbnf+0xbc>
 800973c:	ee10 3a10 	vmov	r3, s0
 8009740:	eeb0 7a67 	vmov.f32	s14, s15
 8009744:	2b00      	cmp	r3, #0
 8009746:	bfb8      	it	lt
 8009748:	eef0 7a66 	vmovlt.f32	s15, s13
 800974c:	ee27 0a87 	vmul.f32	s0, s15, s14
 8009750:	4770      	bx	lr
 8009752:	eddf 7a19 	vldr	s15, [pc, #100]	@ 80097b8 <scalbnf+0xc0>
 8009756:	ee27 0a80 	vmul.f32	s0, s15, s0
 800975a:	4770      	bx	lr
 800975c:	0dd2      	lsrs	r2, r2, #23
 800975e:	e7e5      	b.n	800972c <scalbnf+0x34>
 8009760:	4410      	add	r0, r2
 8009762:	28fe      	cmp	r0, #254	@ 0xfe
 8009764:	dce6      	bgt.n	8009734 <scalbnf+0x3c>
 8009766:	2800      	cmp	r0, #0
 8009768:	dd06      	ble.n	8009778 <scalbnf+0x80>
 800976a:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800976e:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8009772:	ee00 3a10 	vmov	s0, r3
 8009776:	4770      	bx	lr
 8009778:	f110 0f16 	cmn.w	r0, #22
 800977c:	da09      	bge.n	8009792 <scalbnf+0x9a>
 800977e:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 80097b8 <scalbnf+0xc0>
 8009782:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 80097bc <scalbnf+0xc4>
 8009786:	ee10 3a10 	vmov	r3, s0
 800978a:	eeb0 7a67 	vmov.f32	s14, s15
 800978e:	2b00      	cmp	r3, #0
 8009790:	e7d9      	b.n	8009746 <scalbnf+0x4e>
 8009792:	3019      	adds	r0, #25
 8009794:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8009798:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800979c:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 80097c0 <scalbnf+0xc8>
 80097a0:	ee07 3a90 	vmov	s15, r3
 80097a4:	e7d7      	b.n	8009756 <scalbnf+0x5e>
 80097a6:	bf00      	nop
 80097a8:	ffff3cb0 	.word	0xffff3cb0
 80097ac:	4c000000 	.word	0x4c000000
 80097b0:	7149f2ca 	.word	0x7149f2ca
 80097b4:	f149f2ca 	.word	0xf149f2ca
 80097b8:	0da24260 	.word	0x0da24260
 80097bc:	8da24260 	.word	0x8da24260
 80097c0:	33000000 	.word	0x33000000

080097c4 <floorf>:
 80097c4:	ee10 3a10 	vmov	r3, s0
 80097c8:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 80097cc:	3a7f      	subs	r2, #127	@ 0x7f
 80097ce:	2a16      	cmp	r2, #22
 80097d0:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80097d4:	dc2b      	bgt.n	800982e <floorf+0x6a>
 80097d6:	2a00      	cmp	r2, #0
 80097d8:	da12      	bge.n	8009800 <floorf+0x3c>
 80097da:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8009840 <floorf+0x7c>
 80097de:	ee30 0a27 	vadd.f32	s0, s0, s15
 80097e2:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80097e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80097ea:	dd06      	ble.n	80097fa <floorf+0x36>
 80097ec:	2b00      	cmp	r3, #0
 80097ee:	da24      	bge.n	800983a <floorf+0x76>
 80097f0:	2900      	cmp	r1, #0
 80097f2:	4b14      	ldr	r3, [pc, #80]	@ (8009844 <floorf+0x80>)
 80097f4:	bf08      	it	eq
 80097f6:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 80097fa:	ee00 3a10 	vmov	s0, r3
 80097fe:	4770      	bx	lr
 8009800:	4911      	ldr	r1, [pc, #68]	@ (8009848 <floorf+0x84>)
 8009802:	4111      	asrs	r1, r2
 8009804:	420b      	tst	r3, r1
 8009806:	d0fa      	beq.n	80097fe <floorf+0x3a>
 8009808:	eddf 7a0d 	vldr	s15, [pc, #52]	@ 8009840 <floorf+0x7c>
 800980c:	ee30 0a27 	vadd.f32	s0, s0, s15
 8009810:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8009814:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009818:	ddef      	ble.n	80097fa <floorf+0x36>
 800981a:	2b00      	cmp	r3, #0
 800981c:	bfbe      	ittt	lt
 800981e:	f44f 0000 	movlt.w	r0, #8388608	@ 0x800000
 8009822:	fa40 f202 	asrlt.w	r2, r0, r2
 8009826:	189b      	addlt	r3, r3, r2
 8009828:	ea23 0301 	bic.w	r3, r3, r1
 800982c:	e7e5      	b.n	80097fa <floorf+0x36>
 800982e:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 8009832:	d3e4      	bcc.n	80097fe <floorf+0x3a>
 8009834:	ee30 0a00 	vadd.f32	s0, s0, s0
 8009838:	4770      	bx	lr
 800983a:	2300      	movs	r3, #0
 800983c:	e7dd      	b.n	80097fa <floorf+0x36>
 800983e:	bf00      	nop
 8009840:	7149f2ca 	.word	0x7149f2ca
 8009844:	bf800000 	.word	0xbf800000
 8009848:	007fffff 	.word	0x007fffff

0800984c <memset>:
 800984c:	4402      	add	r2, r0
 800984e:	4603      	mov	r3, r0
 8009850:	4293      	cmp	r3, r2
 8009852:	d100      	bne.n	8009856 <memset+0xa>
 8009854:	4770      	bx	lr
 8009856:	f803 1b01 	strb.w	r1, [r3], #1
 800985a:	e7f9      	b.n	8009850 <memset+0x4>

0800985c <__libc_init_array>:
 800985c:	b570      	push	{r4, r5, r6, lr}
 800985e:	4d0d      	ldr	r5, [pc, #52]	@ (8009894 <__libc_init_array+0x38>)
 8009860:	4c0d      	ldr	r4, [pc, #52]	@ (8009898 <__libc_init_array+0x3c>)
 8009862:	1b64      	subs	r4, r4, r5
 8009864:	10a4      	asrs	r4, r4, #2
 8009866:	2600      	movs	r6, #0
 8009868:	42a6      	cmp	r6, r4
 800986a:	d109      	bne.n	8009880 <__libc_init_array+0x24>
 800986c:	4d0b      	ldr	r5, [pc, #44]	@ (800989c <__libc_init_array+0x40>)
 800986e:	4c0c      	ldr	r4, [pc, #48]	@ (80098a0 <__libc_init_array+0x44>)
 8009870:	f000 f818 	bl	80098a4 <_init>
 8009874:	1b64      	subs	r4, r4, r5
 8009876:	10a4      	asrs	r4, r4, #2
 8009878:	2600      	movs	r6, #0
 800987a:	42a6      	cmp	r6, r4
 800987c:	d105      	bne.n	800988a <__libc_init_array+0x2e>
 800987e:	bd70      	pop	{r4, r5, r6, pc}
 8009880:	f855 3b04 	ldr.w	r3, [r5], #4
 8009884:	4798      	blx	r3
 8009886:	3601      	adds	r6, #1
 8009888:	e7ee      	b.n	8009868 <__libc_init_array+0xc>
 800988a:	f855 3b04 	ldr.w	r3, [r5], #4
 800988e:	4798      	blx	r3
 8009890:	3601      	adds	r6, #1
 8009892:	e7f2      	b.n	800987a <__libc_init_array+0x1e>
 8009894:	08009d0c 	.word	0x08009d0c
 8009898:	08009d0c 	.word	0x08009d0c
 800989c:	08009d0c 	.word	0x08009d0c
 80098a0:	08009d10 	.word	0x08009d10

080098a4 <_init>:
 80098a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80098a6:	bf00      	nop
 80098a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80098aa:	bc08      	pop	{r3}
 80098ac:	469e      	mov	lr, r3
 80098ae:	4770      	bx	lr

080098b0 <_fini>:
 80098b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80098b2:	bf00      	nop
 80098b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80098b6:	bc08      	pop	{r3}
 80098b8:	469e      	mov	lr, r3
 80098ba:	4770      	bx	lr
