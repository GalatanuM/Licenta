
SimulareVolan.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007168  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  080072f0  080072f0  000082f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007360  08007360  00009614  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08007360  08007360  00008360  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007368  08007368  00009614  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007368  08007368  00008368  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800736c  0800736c  0000836c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000614  20000000  08007370  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00009614  2**0
                  CONTENTS
 10 .bss          00000a90  20000614  20000614  00009614  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200010a4  200010a4  00009614  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00009614  2**0
                  CONTENTS, READONLY
 13 .debug_info   00012553  00000000  00000000  00009644  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003011  00000000  00000000  0001bb97  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001090  00000000  00000000  0001eba8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000c97  00000000  00000000  0001fc38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000217bf  00000000  00000000  000208cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00014900  00000000  00000000  0004208e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c1c7f  00000000  00000000  0005698e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0011860d  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000044e8  00000000  00000000  00118650  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006c  00000000  00000000  0011cb38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000614 	.word	0x20000614
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080072d8 	.word	0x080072d8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000618 	.word	0x20000618
 80001c4:	080072d8 	.word	0x080072d8

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b988 	b.w	80004f0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	468e      	mov	lr, r1
 8000200:	4604      	mov	r4, r0
 8000202:	4688      	mov	r8, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d962      	bls.n	80002d4 <__udivmoddi4+0xdc>
 800020e:	fab2 f682 	clz	r6, r2
 8000212:	b14e      	cbz	r6, 8000228 <__udivmoddi4+0x30>
 8000214:	f1c6 0320 	rsb	r3, r6, #32
 8000218:	fa01 f806 	lsl.w	r8, r1, r6
 800021c:	fa20 f303 	lsr.w	r3, r0, r3
 8000220:	40b7      	lsls	r7, r6
 8000222:	ea43 0808 	orr.w	r8, r3, r8
 8000226:	40b4      	lsls	r4, r6
 8000228:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800022c:	fa1f fc87 	uxth.w	ip, r7
 8000230:	fbb8 f1fe 	udiv	r1, r8, lr
 8000234:	0c23      	lsrs	r3, r4, #16
 8000236:	fb0e 8811 	mls	r8, lr, r1, r8
 800023a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023e:	fb01 f20c 	mul.w	r2, r1, ip
 8000242:	429a      	cmp	r2, r3
 8000244:	d909      	bls.n	800025a <__udivmoddi4+0x62>
 8000246:	18fb      	adds	r3, r7, r3
 8000248:	f101 30ff 	add.w	r0, r1, #4294967295
 800024c:	f080 80ea 	bcs.w	8000424 <__udivmoddi4+0x22c>
 8000250:	429a      	cmp	r2, r3
 8000252:	f240 80e7 	bls.w	8000424 <__udivmoddi4+0x22c>
 8000256:	3902      	subs	r1, #2
 8000258:	443b      	add	r3, r7
 800025a:	1a9a      	subs	r2, r3, r2
 800025c:	b2a3      	uxth	r3, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800026a:	fb00 fc0c 	mul.w	ip, r0, ip
 800026e:	459c      	cmp	ip, r3
 8000270:	d909      	bls.n	8000286 <__udivmoddi4+0x8e>
 8000272:	18fb      	adds	r3, r7, r3
 8000274:	f100 32ff 	add.w	r2, r0, #4294967295
 8000278:	f080 80d6 	bcs.w	8000428 <__udivmoddi4+0x230>
 800027c:	459c      	cmp	ip, r3
 800027e:	f240 80d3 	bls.w	8000428 <__udivmoddi4+0x230>
 8000282:	443b      	add	r3, r7
 8000284:	3802      	subs	r0, #2
 8000286:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028a:	eba3 030c 	sub.w	r3, r3, ip
 800028e:	2100      	movs	r1, #0
 8000290:	b11d      	cbz	r5, 800029a <__udivmoddi4+0xa2>
 8000292:	40f3      	lsrs	r3, r6
 8000294:	2200      	movs	r2, #0
 8000296:	e9c5 3200 	strd	r3, r2, [r5]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d905      	bls.n	80002ae <__udivmoddi4+0xb6>
 80002a2:	b10d      	cbz	r5, 80002a8 <__udivmoddi4+0xb0>
 80002a4:	e9c5 0100 	strd	r0, r1, [r5]
 80002a8:	2100      	movs	r1, #0
 80002aa:	4608      	mov	r0, r1
 80002ac:	e7f5      	b.n	800029a <__udivmoddi4+0xa2>
 80002ae:	fab3 f183 	clz	r1, r3
 80002b2:	2900      	cmp	r1, #0
 80002b4:	d146      	bne.n	8000344 <__udivmoddi4+0x14c>
 80002b6:	4573      	cmp	r3, lr
 80002b8:	d302      	bcc.n	80002c0 <__udivmoddi4+0xc8>
 80002ba:	4282      	cmp	r2, r0
 80002bc:	f200 8105 	bhi.w	80004ca <__udivmoddi4+0x2d2>
 80002c0:	1a84      	subs	r4, r0, r2
 80002c2:	eb6e 0203 	sbc.w	r2, lr, r3
 80002c6:	2001      	movs	r0, #1
 80002c8:	4690      	mov	r8, r2
 80002ca:	2d00      	cmp	r5, #0
 80002cc:	d0e5      	beq.n	800029a <__udivmoddi4+0xa2>
 80002ce:	e9c5 4800 	strd	r4, r8, [r5]
 80002d2:	e7e2      	b.n	800029a <__udivmoddi4+0xa2>
 80002d4:	2a00      	cmp	r2, #0
 80002d6:	f000 8090 	beq.w	80003fa <__udivmoddi4+0x202>
 80002da:	fab2 f682 	clz	r6, r2
 80002de:	2e00      	cmp	r6, #0
 80002e0:	f040 80a4 	bne.w	800042c <__udivmoddi4+0x234>
 80002e4:	1a8a      	subs	r2, r1, r2
 80002e6:	0c03      	lsrs	r3, r0, #16
 80002e8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002ec:	b280      	uxth	r0, r0
 80002ee:	b2bc      	uxth	r4, r7
 80002f0:	2101      	movs	r1, #1
 80002f2:	fbb2 fcfe 	udiv	ip, r2, lr
 80002f6:	fb0e 221c 	mls	r2, lr, ip, r2
 80002fa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002fe:	fb04 f20c 	mul.w	r2, r4, ip
 8000302:	429a      	cmp	r2, r3
 8000304:	d907      	bls.n	8000316 <__udivmoddi4+0x11e>
 8000306:	18fb      	adds	r3, r7, r3
 8000308:	f10c 38ff 	add.w	r8, ip, #4294967295
 800030c:	d202      	bcs.n	8000314 <__udivmoddi4+0x11c>
 800030e:	429a      	cmp	r2, r3
 8000310:	f200 80e0 	bhi.w	80004d4 <__udivmoddi4+0x2dc>
 8000314:	46c4      	mov	ip, r8
 8000316:	1a9b      	subs	r3, r3, r2
 8000318:	fbb3 f2fe 	udiv	r2, r3, lr
 800031c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000320:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000324:	fb02 f404 	mul.w	r4, r2, r4
 8000328:	429c      	cmp	r4, r3
 800032a:	d907      	bls.n	800033c <__udivmoddi4+0x144>
 800032c:	18fb      	adds	r3, r7, r3
 800032e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x142>
 8000334:	429c      	cmp	r4, r3
 8000336:	f200 80ca 	bhi.w	80004ce <__udivmoddi4+0x2d6>
 800033a:	4602      	mov	r2, r0
 800033c:	1b1b      	subs	r3, r3, r4
 800033e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000342:	e7a5      	b.n	8000290 <__udivmoddi4+0x98>
 8000344:	f1c1 0620 	rsb	r6, r1, #32
 8000348:	408b      	lsls	r3, r1
 800034a:	fa22 f706 	lsr.w	r7, r2, r6
 800034e:	431f      	orrs	r7, r3
 8000350:	fa0e f401 	lsl.w	r4, lr, r1
 8000354:	fa20 f306 	lsr.w	r3, r0, r6
 8000358:	fa2e fe06 	lsr.w	lr, lr, r6
 800035c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000360:	4323      	orrs	r3, r4
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	fa1f fc87 	uxth.w	ip, r7
 800036a:	fbbe f0f9 	udiv	r0, lr, r9
 800036e:	0c1c      	lsrs	r4, r3, #16
 8000370:	fb09 ee10 	mls	lr, r9, r0, lr
 8000374:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000378:	fb00 fe0c 	mul.w	lr, r0, ip
 800037c:	45a6      	cmp	lr, r4
 800037e:	fa02 f201 	lsl.w	r2, r2, r1
 8000382:	d909      	bls.n	8000398 <__udivmoddi4+0x1a0>
 8000384:	193c      	adds	r4, r7, r4
 8000386:	f100 3aff 	add.w	sl, r0, #4294967295
 800038a:	f080 809c 	bcs.w	80004c6 <__udivmoddi4+0x2ce>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f240 8099 	bls.w	80004c6 <__udivmoddi4+0x2ce>
 8000394:	3802      	subs	r0, #2
 8000396:	443c      	add	r4, r7
 8000398:	eba4 040e 	sub.w	r4, r4, lr
 800039c:	fa1f fe83 	uxth.w	lr, r3
 80003a0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003a4:	fb09 4413 	mls	r4, r9, r3, r4
 80003a8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003ac:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b0:	45a4      	cmp	ip, r4
 80003b2:	d908      	bls.n	80003c6 <__udivmoddi4+0x1ce>
 80003b4:	193c      	adds	r4, r7, r4
 80003b6:	f103 3eff 	add.w	lr, r3, #4294967295
 80003ba:	f080 8082 	bcs.w	80004c2 <__udivmoddi4+0x2ca>
 80003be:	45a4      	cmp	ip, r4
 80003c0:	d97f      	bls.n	80004c2 <__udivmoddi4+0x2ca>
 80003c2:	3b02      	subs	r3, #2
 80003c4:	443c      	add	r4, r7
 80003c6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003ca:	eba4 040c 	sub.w	r4, r4, ip
 80003ce:	fba0 ec02 	umull	lr, ip, r0, r2
 80003d2:	4564      	cmp	r4, ip
 80003d4:	4673      	mov	r3, lr
 80003d6:	46e1      	mov	r9, ip
 80003d8:	d362      	bcc.n	80004a0 <__udivmoddi4+0x2a8>
 80003da:	d05f      	beq.n	800049c <__udivmoddi4+0x2a4>
 80003dc:	b15d      	cbz	r5, 80003f6 <__udivmoddi4+0x1fe>
 80003de:	ebb8 0203 	subs.w	r2, r8, r3
 80003e2:	eb64 0409 	sbc.w	r4, r4, r9
 80003e6:	fa04 f606 	lsl.w	r6, r4, r6
 80003ea:	fa22 f301 	lsr.w	r3, r2, r1
 80003ee:	431e      	orrs	r6, r3
 80003f0:	40cc      	lsrs	r4, r1
 80003f2:	e9c5 6400 	strd	r6, r4, [r5]
 80003f6:	2100      	movs	r1, #0
 80003f8:	e74f      	b.n	800029a <__udivmoddi4+0xa2>
 80003fa:	fbb1 fcf2 	udiv	ip, r1, r2
 80003fe:	0c01      	lsrs	r1, r0, #16
 8000400:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000404:	b280      	uxth	r0, r0
 8000406:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800040a:	463b      	mov	r3, r7
 800040c:	4638      	mov	r0, r7
 800040e:	463c      	mov	r4, r7
 8000410:	46b8      	mov	r8, r7
 8000412:	46be      	mov	lr, r7
 8000414:	2620      	movs	r6, #32
 8000416:	fbb1 f1f7 	udiv	r1, r1, r7
 800041a:	eba2 0208 	sub.w	r2, r2, r8
 800041e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000422:	e766      	b.n	80002f2 <__udivmoddi4+0xfa>
 8000424:	4601      	mov	r1, r0
 8000426:	e718      	b.n	800025a <__udivmoddi4+0x62>
 8000428:	4610      	mov	r0, r2
 800042a:	e72c      	b.n	8000286 <__udivmoddi4+0x8e>
 800042c:	f1c6 0220 	rsb	r2, r6, #32
 8000430:	fa2e f302 	lsr.w	r3, lr, r2
 8000434:	40b7      	lsls	r7, r6
 8000436:	40b1      	lsls	r1, r6
 8000438:	fa20 f202 	lsr.w	r2, r0, r2
 800043c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000440:	430a      	orrs	r2, r1
 8000442:	fbb3 f8fe 	udiv	r8, r3, lr
 8000446:	b2bc      	uxth	r4, r7
 8000448:	fb0e 3318 	mls	r3, lr, r8, r3
 800044c:	0c11      	lsrs	r1, r2, #16
 800044e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000452:	fb08 f904 	mul.w	r9, r8, r4
 8000456:	40b0      	lsls	r0, r6
 8000458:	4589      	cmp	r9, r1
 800045a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800045e:	b280      	uxth	r0, r0
 8000460:	d93e      	bls.n	80004e0 <__udivmoddi4+0x2e8>
 8000462:	1879      	adds	r1, r7, r1
 8000464:	f108 3cff 	add.w	ip, r8, #4294967295
 8000468:	d201      	bcs.n	800046e <__udivmoddi4+0x276>
 800046a:	4589      	cmp	r9, r1
 800046c:	d81f      	bhi.n	80004ae <__udivmoddi4+0x2b6>
 800046e:	eba1 0109 	sub.w	r1, r1, r9
 8000472:	fbb1 f9fe 	udiv	r9, r1, lr
 8000476:	fb09 f804 	mul.w	r8, r9, r4
 800047a:	fb0e 1119 	mls	r1, lr, r9, r1
 800047e:	b292      	uxth	r2, r2
 8000480:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000484:	4542      	cmp	r2, r8
 8000486:	d229      	bcs.n	80004dc <__udivmoddi4+0x2e4>
 8000488:	18ba      	adds	r2, r7, r2
 800048a:	f109 31ff 	add.w	r1, r9, #4294967295
 800048e:	d2c4      	bcs.n	800041a <__udivmoddi4+0x222>
 8000490:	4542      	cmp	r2, r8
 8000492:	d2c2      	bcs.n	800041a <__udivmoddi4+0x222>
 8000494:	f1a9 0102 	sub.w	r1, r9, #2
 8000498:	443a      	add	r2, r7
 800049a:	e7be      	b.n	800041a <__udivmoddi4+0x222>
 800049c:	45f0      	cmp	r8, lr
 800049e:	d29d      	bcs.n	80003dc <__udivmoddi4+0x1e4>
 80004a0:	ebbe 0302 	subs.w	r3, lr, r2
 80004a4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004a8:	3801      	subs	r0, #1
 80004aa:	46e1      	mov	r9, ip
 80004ac:	e796      	b.n	80003dc <__udivmoddi4+0x1e4>
 80004ae:	eba7 0909 	sub.w	r9, r7, r9
 80004b2:	4449      	add	r1, r9
 80004b4:	f1a8 0c02 	sub.w	ip, r8, #2
 80004b8:	fbb1 f9fe 	udiv	r9, r1, lr
 80004bc:	fb09 f804 	mul.w	r8, r9, r4
 80004c0:	e7db      	b.n	800047a <__udivmoddi4+0x282>
 80004c2:	4673      	mov	r3, lr
 80004c4:	e77f      	b.n	80003c6 <__udivmoddi4+0x1ce>
 80004c6:	4650      	mov	r0, sl
 80004c8:	e766      	b.n	8000398 <__udivmoddi4+0x1a0>
 80004ca:	4608      	mov	r0, r1
 80004cc:	e6fd      	b.n	80002ca <__udivmoddi4+0xd2>
 80004ce:	443b      	add	r3, r7
 80004d0:	3a02      	subs	r2, #2
 80004d2:	e733      	b.n	800033c <__udivmoddi4+0x144>
 80004d4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d8:	443b      	add	r3, r7
 80004da:	e71c      	b.n	8000316 <__udivmoddi4+0x11e>
 80004dc:	4649      	mov	r1, r9
 80004de:	e79c      	b.n	800041a <__udivmoddi4+0x222>
 80004e0:	eba1 0109 	sub.w	r1, r1, r9
 80004e4:	46c4      	mov	ip, r8
 80004e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004ea:	fb09 f804 	mul.w	r8, r9, r4
 80004ee:	e7c4      	b.n	800047a <__udivmoddi4+0x282>

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <HAL_TIM_IC_CaptureCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80004f4:	b480      	push	{r7}
 80004f6:	b083      	sub	sp, #12
 80004f8:	af00      	add	r7, sp, #0
 80004fa:	6078      	str	r0, [r7, #4]
	reportContainer.steering = __HAL_TIM_GET_COUNTER(htim);
 80004fc:	687b      	ldr	r3, [r7, #4]
 80004fe:	681b      	ldr	r3, [r3, #0]
 8000500:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000502:	b21a      	sxth	r2, r3
 8000504:	4b03      	ldr	r3, [pc, #12]	@ (8000514 <HAL_TIM_IC_CaptureCallback+0x20>)
 8000506:	809a      	strh	r2, [r3, #4]
	//reportContainer.throttle = __HAL_TIM_GET_COUNTER(htim);
	//reportContainer.brake = __HAL_TIM_GET_COUNTER(htim);
	//reportContainer.clutch = __HAL_TIM_GET_COUNTER(htim);
}
 8000508:	bf00      	nop
 800050a:	370c      	adds	r7, #12
 800050c:	46bd      	mov	sp, r7
 800050e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000512:	4770      	bx	lr
 8000514:	20000678 	.word	0x20000678

08000518 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800051c:	f000 fa24 	bl	8000968 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000520:	f000 f830 	bl	8000584 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000524:	f000 f8ec 	bl	8000700 <MX_GPIO_Init>
  MX_TIM3_Init();
 8000528:	f000 f896 	bl	8000658 <MX_TIM3_Init>
  MX_USB_DEVICE_Init();
 800052c:	f006 fa32 	bl	8006994 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Encoder_Start_IT(&htim3, TIM_CHANNEL_ALL);
 8000530:	213c      	movs	r1, #60	@ 0x3c
 8000532:	4811      	ldr	r0, [pc, #68]	@ (8000578 <main+0x60>)
 8000534:	f002 fcac 	bl	8002e90 <HAL_TIM_Encoder_Start_IT>
  reportContainer.report_id = 0x10;
 8000538:	4b10      	ldr	r3, [pc, #64]	@ (800057c <main+0x64>)
 800053a:	2210      	movs	r2, #16
 800053c:	701a      	strb	r2, [r3, #0]
  reportContainer.buttons = 0x01;
 800053e:	4b0f      	ldr	r3, [pc, #60]	@ (800057c <main+0x64>)
 8000540:	2201      	movs	r2, #1
 8000542:	709a      	strb	r2, [r3, #2]
  reportContainer.padding1 = 0;
 8000544:	4b0d      	ldr	r3, [pc, #52]	@ (800057c <main+0x64>)
 8000546:	2200      	movs	r2, #0
 8000548:	705a      	strb	r2, [r3, #1]
  reportContainer.padding2 = 0;
 800054a:	4b0c      	ldr	r3, [pc, #48]	@ (800057c <main+0x64>)
 800054c:	2200      	movs	r2, #0
 800054e:	70da      	strb	r2, [r3, #3]
  reportContainer.throttle = 0;
 8000550:	4b0a      	ldr	r3, [pc, #40]	@ (800057c <main+0x64>)
 8000552:	2200      	movs	r2, #0
 8000554:	80da      	strh	r2, [r3, #6]
  reportContainer.brake = 0;
 8000556:	4b09      	ldr	r3, [pc, #36]	@ (800057c <main+0x64>)
 8000558:	2200      	movs	r2, #0
 800055a:	811a      	strh	r2, [r3, #8]
  reportContainer.clutch = 0;
 800055c:	4b07      	ldr	r3, [pc, #28]	@ (800057c <main+0x64>)
 800055e:	2200      	movs	r2, #0
 8000560:	815a      	strh	r2, [r3, #10]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, (uint8_t *)&reportContainer, 12);
 8000562:	220c      	movs	r2, #12
 8000564:	4905      	ldr	r1, [pc, #20]	@ (800057c <main+0x64>)
 8000566:	4806      	ldr	r0, [pc, #24]	@ (8000580 <main+0x68>)
 8000568:	f004 fd88 	bl	800507c <USBD_CUSTOM_HID_SendReport>
	  HAL_Delay(10);
 800056c:	200a      	movs	r0, #10
 800056e:	f000 fa6d 	bl	8000a4c <HAL_Delay>
  {
 8000572:	bf00      	nop
 8000574:	e7f5      	b.n	8000562 <main+0x4a>
 8000576:	bf00      	nop
 8000578:	20000630 	.word	0x20000630
 800057c:	20000678 	.word	0x20000678
 8000580:	2000068c 	.word	0x2000068c

08000584 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b094      	sub	sp, #80	@ 0x50
 8000588:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800058a:	f107 0320 	add.w	r3, r7, #32
 800058e:	2230      	movs	r2, #48	@ 0x30
 8000590:	2100      	movs	r1, #0
 8000592:	4618      	mov	r0, r3
 8000594:	f006 fe74 	bl	8007280 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000598:	f107 030c 	add.w	r3, r7, #12
 800059c:	2200      	movs	r2, #0
 800059e:	601a      	str	r2, [r3, #0]
 80005a0:	605a      	str	r2, [r3, #4]
 80005a2:	609a      	str	r2, [r3, #8]
 80005a4:	60da      	str	r2, [r3, #12]
 80005a6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005a8:	2300      	movs	r3, #0
 80005aa:	60bb      	str	r3, [r7, #8]
 80005ac:	4b28      	ldr	r3, [pc, #160]	@ (8000650 <SystemClock_Config+0xcc>)
 80005ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005b0:	4a27      	ldr	r2, [pc, #156]	@ (8000650 <SystemClock_Config+0xcc>)
 80005b2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80005b6:	6413      	str	r3, [r2, #64]	@ 0x40
 80005b8:	4b25      	ldr	r3, [pc, #148]	@ (8000650 <SystemClock_Config+0xcc>)
 80005ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005bc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80005c0:	60bb      	str	r3, [r7, #8]
 80005c2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005c4:	2300      	movs	r3, #0
 80005c6:	607b      	str	r3, [r7, #4]
 80005c8:	4b22      	ldr	r3, [pc, #136]	@ (8000654 <SystemClock_Config+0xd0>)
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	4a21      	ldr	r2, [pc, #132]	@ (8000654 <SystemClock_Config+0xd0>)
 80005ce:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80005d2:	6013      	str	r3, [r2, #0]
 80005d4:	4b1f      	ldr	r3, [pc, #124]	@ (8000654 <SystemClock_Config+0xd0>)
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80005dc:	607b      	str	r3, [r7, #4]
 80005de:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005e0:	2301      	movs	r3, #1
 80005e2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005e4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80005e8:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005ea:	2302      	movs	r3, #2
 80005ec:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005ee:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80005f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80005f4:	2304      	movs	r3, #4
 80005f6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80005f8:	23a8      	movs	r3, #168	@ 0xa8
 80005fa:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005fc:	2302      	movs	r3, #2
 80005fe:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000600:	2307      	movs	r3, #7
 8000602:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000604:	f107 0320 	add.w	r3, r7, #32
 8000608:	4618      	mov	r0, r3
 800060a:	f001 ff2b 	bl	8002464 <HAL_RCC_OscConfig>
 800060e:	4603      	mov	r3, r0
 8000610:	2b00      	cmp	r3, #0
 8000612:	d001      	beq.n	8000618 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000614:	f000 f8aa 	bl	800076c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000618:	230f      	movs	r3, #15
 800061a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800061c:	2302      	movs	r3, #2
 800061e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000620:	2300      	movs	r3, #0
 8000622:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000624:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000628:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800062a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800062e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000630:	f107 030c 	add.w	r3, r7, #12
 8000634:	2105      	movs	r1, #5
 8000636:	4618      	mov	r0, r3
 8000638:	f002 f98c 	bl	8002954 <HAL_RCC_ClockConfig>
 800063c:	4603      	mov	r3, r0
 800063e:	2b00      	cmp	r3, #0
 8000640:	d001      	beq.n	8000646 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000642:	f000 f893 	bl	800076c <Error_Handler>
  }
}
 8000646:	bf00      	nop
 8000648:	3750      	adds	r7, #80	@ 0x50
 800064a:	46bd      	mov	sp, r7
 800064c:	bd80      	pop	{r7, pc}
 800064e:	bf00      	nop
 8000650:	40023800 	.word	0x40023800
 8000654:	40007000 	.word	0x40007000

08000658 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b08c      	sub	sp, #48	@ 0x30
 800065c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800065e:	f107 030c 	add.w	r3, r7, #12
 8000662:	2224      	movs	r2, #36	@ 0x24
 8000664:	2100      	movs	r1, #0
 8000666:	4618      	mov	r0, r3
 8000668:	f006 fe0a 	bl	8007280 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800066c:	1d3b      	adds	r3, r7, #4
 800066e:	2200      	movs	r2, #0
 8000670:	601a      	str	r2, [r3, #0]
 8000672:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000674:	4b20      	ldr	r3, [pc, #128]	@ (80006f8 <MX_TIM3_Init+0xa0>)
 8000676:	4a21      	ldr	r2, [pc, #132]	@ (80006fc <MX_TIM3_Init+0xa4>)
 8000678:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800067a:	4b1f      	ldr	r3, [pc, #124]	@ (80006f8 <MX_TIM3_Init+0xa0>)
 800067c:	2200      	movs	r2, #0
 800067e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000680:	4b1d      	ldr	r3, [pc, #116]	@ (80006f8 <MX_TIM3_Init+0xa0>)
 8000682:	2200      	movs	r2, #0
 8000684:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000686:	4b1c      	ldr	r3, [pc, #112]	@ (80006f8 <MX_TIM3_Init+0xa0>)
 8000688:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800068c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800068e:	4b1a      	ldr	r3, [pc, #104]	@ (80006f8 <MX_TIM3_Init+0xa0>)
 8000690:	2200      	movs	r2, #0
 8000692:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000694:	4b18      	ldr	r3, [pc, #96]	@ (80006f8 <MX_TIM3_Init+0xa0>)
 8000696:	2200      	movs	r2, #0
 8000698:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800069a:	2303      	movs	r3, #3
 800069c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 800069e:	2302      	movs	r3, #2
 80006a0:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80006a2:	2301      	movs	r3, #1
 80006a4:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80006a6:	2300      	movs	r3, #0
 80006a8:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80006aa:	2300      	movs	r3, #0
 80006ac:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 80006ae:	2302      	movs	r3, #2
 80006b0:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80006b2:	2301      	movs	r3, #1
 80006b4:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80006b6:	2300      	movs	r3, #0
 80006b8:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 80006ba:	2300      	movs	r3, #0
 80006bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80006be:	f107 030c 	add.w	r3, r7, #12
 80006c2:	4619      	mov	r1, r3
 80006c4:	480c      	ldr	r0, [pc, #48]	@ (80006f8 <MX_TIM3_Init+0xa0>)
 80006c6:	f002 fb3d 	bl	8002d44 <HAL_TIM_Encoder_Init>
 80006ca:	4603      	mov	r3, r0
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d001      	beq.n	80006d4 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 80006d0:	f000 f84c 	bl	800076c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80006d4:	2300      	movs	r3, #0
 80006d6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006d8:	2300      	movs	r3, #0
 80006da:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80006dc:	1d3b      	adds	r3, r7, #4
 80006de:	4619      	mov	r1, r3
 80006e0:	4805      	ldr	r0, [pc, #20]	@ (80006f8 <MX_TIM3_Init+0xa0>)
 80006e2:	f002 fe6d 	bl	80033c0 <HAL_TIMEx_MasterConfigSynchronization>
 80006e6:	4603      	mov	r3, r0
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d001      	beq.n	80006f0 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 80006ec:	f000 f83e 	bl	800076c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80006f0:	bf00      	nop
 80006f2:	3730      	adds	r7, #48	@ 0x30
 80006f4:	46bd      	mov	sp, r7
 80006f6:	bd80      	pop	{r7, pc}
 80006f8:	20000630 	.word	0x20000630
 80006fc:	40000400 	.word	0x40000400

08000700 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000700:	b480      	push	{r7}
 8000702:	b085      	sub	sp, #20
 8000704:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000706:	2300      	movs	r3, #0
 8000708:	60fb      	str	r3, [r7, #12]
 800070a:	4b17      	ldr	r3, [pc, #92]	@ (8000768 <MX_GPIO_Init+0x68>)
 800070c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800070e:	4a16      	ldr	r2, [pc, #88]	@ (8000768 <MX_GPIO_Init+0x68>)
 8000710:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000714:	6313      	str	r3, [r2, #48]	@ 0x30
 8000716:	4b14      	ldr	r3, [pc, #80]	@ (8000768 <MX_GPIO_Init+0x68>)
 8000718:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800071a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800071e:	60fb      	str	r3, [r7, #12]
 8000720:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000722:	2300      	movs	r3, #0
 8000724:	60bb      	str	r3, [r7, #8]
 8000726:	4b10      	ldr	r3, [pc, #64]	@ (8000768 <MX_GPIO_Init+0x68>)
 8000728:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800072a:	4a0f      	ldr	r2, [pc, #60]	@ (8000768 <MX_GPIO_Init+0x68>)
 800072c:	f043 0301 	orr.w	r3, r3, #1
 8000730:	6313      	str	r3, [r2, #48]	@ 0x30
 8000732:	4b0d      	ldr	r3, [pc, #52]	@ (8000768 <MX_GPIO_Init+0x68>)
 8000734:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000736:	f003 0301 	and.w	r3, r3, #1
 800073a:	60bb      	str	r3, [r7, #8]
 800073c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800073e:	2300      	movs	r3, #0
 8000740:	607b      	str	r3, [r7, #4]
 8000742:	4b09      	ldr	r3, [pc, #36]	@ (8000768 <MX_GPIO_Init+0x68>)
 8000744:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000746:	4a08      	ldr	r2, [pc, #32]	@ (8000768 <MX_GPIO_Init+0x68>)
 8000748:	f043 0302 	orr.w	r3, r3, #2
 800074c:	6313      	str	r3, [r2, #48]	@ 0x30
 800074e:	4b06      	ldr	r3, [pc, #24]	@ (8000768 <MX_GPIO_Init+0x68>)
 8000750:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000752:	f003 0302 	and.w	r3, r3, #2
 8000756:	607b      	str	r3, [r7, #4]
 8000758:	687b      	ldr	r3, [r7, #4]

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800075a:	bf00      	nop
 800075c:	3714      	adds	r7, #20
 800075e:	46bd      	mov	sp, r7
 8000760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000764:	4770      	bx	lr
 8000766:	bf00      	nop
 8000768:	40023800 	.word	0x40023800

0800076c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800076c:	b480      	push	{r7}
 800076e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000770:	b672      	cpsid	i
}
 8000772:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000774:	bf00      	nop
 8000776:	e7fd      	b.n	8000774 <Error_Handler+0x8>

08000778 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000778:	b480      	push	{r7}
 800077a:	b083      	sub	sp, #12
 800077c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800077e:	2300      	movs	r3, #0
 8000780:	607b      	str	r3, [r7, #4]
 8000782:	4b10      	ldr	r3, [pc, #64]	@ (80007c4 <HAL_MspInit+0x4c>)
 8000784:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000786:	4a0f      	ldr	r2, [pc, #60]	@ (80007c4 <HAL_MspInit+0x4c>)
 8000788:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800078c:	6453      	str	r3, [r2, #68]	@ 0x44
 800078e:	4b0d      	ldr	r3, [pc, #52]	@ (80007c4 <HAL_MspInit+0x4c>)
 8000790:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000792:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000796:	607b      	str	r3, [r7, #4]
 8000798:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800079a:	2300      	movs	r3, #0
 800079c:	603b      	str	r3, [r7, #0]
 800079e:	4b09      	ldr	r3, [pc, #36]	@ (80007c4 <HAL_MspInit+0x4c>)
 80007a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007a2:	4a08      	ldr	r2, [pc, #32]	@ (80007c4 <HAL_MspInit+0x4c>)
 80007a4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80007a8:	6413      	str	r3, [r2, #64]	@ 0x40
 80007aa:	4b06      	ldr	r3, [pc, #24]	@ (80007c4 <HAL_MspInit+0x4c>)
 80007ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80007b2:	603b      	str	r3, [r7, #0]
 80007b4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007b6:	bf00      	nop
 80007b8:	370c      	adds	r7, #12
 80007ba:	46bd      	mov	sp, r7
 80007bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c0:	4770      	bx	lr
 80007c2:	bf00      	nop
 80007c4:	40023800 	.word	0x40023800

080007c8 <HAL_TIM_Encoder_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_encoder: TIM_Encoder handle pointer
  * @retval None
  */
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b08a      	sub	sp, #40	@ 0x28
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007d0:	f107 0314 	add.w	r3, r7, #20
 80007d4:	2200      	movs	r2, #0
 80007d6:	601a      	str	r2, [r3, #0]
 80007d8:	605a      	str	r2, [r3, #4]
 80007da:	609a      	str	r2, [r3, #8]
 80007dc:	60da      	str	r2, [r3, #12]
 80007de:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	4a1d      	ldr	r2, [pc, #116]	@ (800085c <HAL_TIM_Encoder_MspInit+0x94>)
 80007e6:	4293      	cmp	r3, r2
 80007e8:	d133      	bne.n	8000852 <HAL_TIM_Encoder_MspInit+0x8a>
  {
    /* USER CODE BEGIN TIM3_MspInit 0 */

    /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80007ea:	2300      	movs	r3, #0
 80007ec:	613b      	str	r3, [r7, #16]
 80007ee:	4b1c      	ldr	r3, [pc, #112]	@ (8000860 <HAL_TIM_Encoder_MspInit+0x98>)
 80007f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007f2:	4a1b      	ldr	r2, [pc, #108]	@ (8000860 <HAL_TIM_Encoder_MspInit+0x98>)
 80007f4:	f043 0302 	orr.w	r3, r3, #2
 80007f8:	6413      	str	r3, [r2, #64]	@ 0x40
 80007fa:	4b19      	ldr	r3, [pc, #100]	@ (8000860 <HAL_TIM_Encoder_MspInit+0x98>)
 80007fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007fe:	f003 0302 	and.w	r3, r3, #2
 8000802:	613b      	str	r3, [r7, #16]
 8000804:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000806:	2300      	movs	r3, #0
 8000808:	60fb      	str	r3, [r7, #12]
 800080a:	4b15      	ldr	r3, [pc, #84]	@ (8000860 <HAL_TIM_Encoder_MspInit+0x98>)
 800080c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800080e:	4a14      	ldr	r2, [pc, #80]	@ (8000860 <HAL_TIM_Encoder_MspInit+0x98>)
 8000810:	f043 0302 	orr.w	r3, r3, #2
 8000814:	6313      	str	r3, [r2, #48]	@ 0x30
 8000816:	4b12      	ldr	r3, [pc, #72]	@ (8000860 <HAL_TIM_Encoder_MspInit+0x98>)
 8000818:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800081a:	f003 0302 	and.w	r3, r3, #2
 800081e:	60fb      	str	r3, [r7, #12]
 8000820:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000822:	2330      	movs	r3, #48	@ 0x30
 8000824:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000826:	2302      	movs	r3, #2
 8000828:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800082a:	2300      	movs	r3, #0
 800082c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800082e:	2300      	movs	r3, #0
 8000830:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000832:	2302      	movs	r3, #2
 8000834:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000836:	f107 0314 	add.w	r3, r7, #20
 800083a:	4619      	mov	r1, r3
 800083c:	4809      	ldr	r0, [pc, #36]	@ (8000864 <HAL_TIM_Encoder_MspInit+0x9c>)
 800083e:	f000 fa3b 	bl	8000cb8 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000842:	2200      	movs	r2, #0
 8000844:	2100      	movs	r1, #0
 8000846:	201d      	movs	r0, #29
 8000848:	f000 f9ff 	bl	8000c4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800084c:	201d      	movs	r0, #29
 800084e:	f000 fa18 	bl	8000c82 <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM3_MspInit 1 */

  }

}
 8000852:	bf00      	nop
 8000854:	3728      	adds	r7, #40	@ 0x28
 8000856:	46bd      	mov	sp, r7
 8000858:	bd80      	pop	{r7, pc}
 800085a:	bf00      	nop
 800085c:	40000400 	.word	0x40000400
 8000860:	40023800 	.word	0x40023800
 8000864:	40020400 	.word	0x40020400

08000868 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000868:	b480      	push	{r7}
 800086a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800086c:	bf00      	nop
 800086e:	e7fd      	b.n	800086c <NMI_Handler+0x4>

08000870 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000870:	b480      	push	{r7}
 8000872:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000874:	bf00      	nop
 8000876:	e7fd      	b.n	8000874 <HardFault_Handler+0x4>

08000878 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000878:	b480      	push	{r7}
 800087a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800087c:	bf00      	nop
 800087e:	e7fd      	b.n	800087c <MemManage_Handler+0x4>

08000880 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000880:	b480      	push	{r7}
 8000882:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000884:	bf00      	nop
 8000886:	e7fd      	b.n	8000884 <BusFault_Handler+0x4>

08000888 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000888:	b480      	push	{r7}
 800088a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800088c:	bf00      	nop
 800088e:	e7fd      	b.n	800088c <UsageFault_Handler+0x4>

08000890 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000890:	b480      	push	{r7}
 8000892:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000894:	bf00      	nop
 8000896:	46bd      	mov	sp, r7
 8000898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800089c:	4770      	bx	lr

0800089e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800089e:	b480      	push	{r7}
 80008a0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008a2:	bf00      	nop
 80008a4:	46bd      	mov	sp, r7
 80008a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008aa:	4770      	bx	lr

080008ac <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008ac:	b480      	push	{r7}
 80008ae:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008b0:	bf00      	nop
 80008b2:	46bd      	mov	sp, r7
 80008b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b8:	4770      	bx	lr

080008ba <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008ba:	b580      	push	{r7, lr}
 80008bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008be:	f000 f8a5 	bl	8000a0c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008c2:	bf00      	nop
 80008c4:	bd80      	pop	{r7, pc}
	...

080008c8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80008cc:	4802      	ldr	r0, [pc, #8]	@ (80008d8 <TIM3_IRQHandler+0x10>)
 80008ce:	f002 fb8d 	bl	8002fec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80008d2:	bf00      	nop
 80008d4:	bd80      	pop	{r7, pc}
 80008d6:	bf00      	nop
 80008d8:	20000630 	.word	0x20000630

080008dc <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80008e0:	4802      	ldr	r0, [pc, #8]	@ (80008ec <OTG_FS_IRQHandler+0x10>)
 80008e2:	f000 fcc9 	bl	8001278 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80008e6:	bf00      	nop
 80008e8:	bd80      	pop	{r7, pc}
 80008ea:	bf00      	nop
 80008ec:	20000b68 	.word	0x20000b68

080008f0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80008f0:	b480      	push	{r7}
 80008f2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80008f4:	4b06      	ldr	r3, [pc, #24]	@ (8000910 <SystemInit+0x20>)
 80008f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80008fa:	4a05      	ldr	r2, [pc, #20]	@ (8000910 <SystemInit+0x20>)
 80008fc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000900:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000904:	bf00      	nop
 8000906:	46bd      	mov	sp, r7
 8000908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090c:	4770      	bx	lr
 800090e:	bf00      	nop
 8000910:	e000ed00 	.word	0xe000ed00

08000914 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000914:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800094c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000918:	f7ff ffea 	bl	80008f0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800091c:	480c      	ldr	r0, [pc, #48]	@ (8000950 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800091e:	490d      	ldr	r1, [pc, #52]	@ (8000954 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000920:	4a0d      	ldr	r2, [pc, #52]	@ (8000958 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000922:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000924:	e002      	b.n	800092c <LoopCopyDataInit>

08000926 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000926:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000928:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800092a:	3304      	adds	r3, #4

0800092c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800092c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800092e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000930:	d3f9      	bcc.n	8000926 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000932:	4a0a      	ldr	r2, [pc, #40]	@ (800095c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000934:	4c0a      	ldr	r4, [pc, #40]	@ (8000960 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000936:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000938:	e001      	b.n	800093e <LoopFillZerobss>

0800093a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800093a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800093c:	3204      	adds	r2, #4

0800093e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800093e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000940:	d3fb      	bcc.n	800093a <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8000942:	f006 fca5 	bl	8007290 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000946:	f7ff fde7 	bl	8000518 <main>
  bx  lr    
 800094a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800094c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000950:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000954:	20000614 	.word	0x20000614
  ldr r2, =_sidata
 8000958:	08007370 	.word	0x08007370
  ldr r2, =_sbss
 800095c:	20000614 	.word	0x20000614
  ldr r4, =_ebss
 8000960:	200010a4 	.word	0x200010a4

08000964 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000964:	e7fe      	b.n	8000964 <ADC_IRQHandler>
	...

08000968 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800096c:	4b0e      	ldr	r3, [pc, #56]	@ (80009a8 <HAL_Init+0x40>)
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	4a0d      	ldr	r2, [pc, #52]	@ (80009a8 <HAL_Init+0x40>)
 8000972:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000976:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000978:	4b0b      	ldr	r3, [pc, #44]	@ (80009a8 <HAL_Init+0x40>)
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	4a0a      	ldr	r2, [pc, #40]	@ (80009a8 <HAL_Init+0x40>)
 800097e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000982:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000984:	4b08      	ldr	r3, [pc, #32]	@ (80009a8 <HAL_Init+0x40>)
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	4a07      	ldr	r2, [pc, #28]	@ (80009a8 <HAL_Init+0x40>)
 800098a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800098e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000990:	2003      	movs	r0, #3
 8000992:	f000 f94f 	bl	8000c34 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000996:	200f      	movs	r0, #15
 8000998:	f000 f808 	bl	80009ac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800099c:	f7ff feec 	bl	8000778 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80009a0:	2300      	movs	r3, #0
}
 80009a2:	4618      	mov	r0, r3
 80009a4:	bd80      	pop	{r7, pc}
 80009a6:	bf00      	nop
 80009a8:	40023c00 	.word	0x40023c00

080009ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b082      	sub	sp, #8
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80009b4:	4b12      	ldr	r3, [pc, #72]	@ (8000a00 <HAL_InitTick+0x54>)
 80009b6:	681a      	ldr	r2, [r3, #0]
 80009b8:	4b12      	ldr	r3, [pc, #72]	@ (8000a04 <HAL_InitTick+0x58>)
 80009ba:	781b      	ldrb	r3, [r3, #0]
 80009bc:	4619      	mov	r1, r3
 80009be:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80009c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80009c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80009ca:	4618      	mov	r0, r3
 80009cc:	f000 f967 	bl	8000c9e <HAL_SYSTICK_Config>
 80009d0:	4603      	mov	r3, r0
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d001      	beq.n	80009da <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80009d6:	2301      	movs	r3, #1
 80009d8:	e00e      	b.n	80009f8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	2b0f      	cmp	r3, #15
 80009de:	d80a      	bhi.n	80009f6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009e0:	2200      	movs	r2, #0
 80009e2:	6879      	ldr	r1, [r7, #4]
 80009e4:	f04f 30ff 	mov.w	r0, #4294967295
 80009e8:	f000 f92f 	bl	8000c4a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80009ec:	4a06      	ldr	r2, [pc, #24]	@ (8000a08 <HAL_InitTick+0x5c>)
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80009f2:	2300      	movs	r3, #0
 80009f4:	e000      	b.n	80009f8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80009f6:	2301      	movs	r3, #1
}
 80009f8:	4618      	mov	r0, r3
 80009fa:	3708      	adds	r7, #8
 80009fc:	46bd      	mov	sp, r7
 80009fe:	bd80      	pop	{r7, pc}
 8000a00:	20000000 	.word	0x20000000
 8000a04:	20000008 	.word	0x20000008
 8000a08:	20000004 	.word	0x20000004

08000a0c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a10:	4b06      	ldr	r3, [pc, #24]	@ (8000a2c <HAL_IncTick+0x20>)
 8000a12:	781b      	ldrb	r3, [r3, #0]
 8000a14:	461a      	mov	r2, r3
 8000a16:	4b06      	ldr	r3, [pc, #24]	@ (8000a30 <HAL_IncTick+0x24>)
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	4413      	add	r3, r2
 8000a1c:	4a04      	ldr	r2, [pc, #16]	@ (8000a30 <HAL_IncTick+0x24>)
 8000a1e:	6013      	str	r3, [r2, #0]
}
 8000a20:	bf00      	nop
 8000a22:	46bd      	mov	sp, r7
 8000a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a28:	4770      	bx	lr
 8000a2a:	bf00      	nop
 8000a2c:	20000008 	.word	0x20000008
 8000a30:	20000684 	.word	0x20000684

08000a34 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a34:	b480      	push	{r7}
 8000a36:	af00      	add	r7, sp, #0
  return uwTick;
 8000a38:	4b03      	ldr	r3, [pc, #12]	@ (8000a48 <HAL_GetTick+0x14>)
 8000a3a:	681b      	ldr	r3, [r3, #0]
}
 8000a3c:	4618      	mov	r0, r3
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a44:	4770      	bx	lr
 8000a46:	bf00      	nop
 8000a48:	20000684 	.word	0x20000684

08000a4c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b084      	sub	sp, #16
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a54:	f7ff ffee 	bl	8000a34 <HAL_GetTick>
 8000a58:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a5e:	68fb      	ldr	r3, [r7, #12]
 8000a60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a64:	d005      	beq.n	8000a72 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000a66:	4b0a      	ldr	r3, [pc, #40]	@ (8000a90 <HAL_Delay+0x44>)
 8000a68:	781b      	ldrb	r3, [r3, #0]
 8000a6a:	461a      	mov	r2, r3
 8000a6c:	68fb      	ldr	r3, [r7, #12]
 8000a6e:	4413      	add	r3, r2
 8000a70:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000a72:	bf00      	nop
 8000a74:	f7ff ffde 	bl	8000a34 <HAL_GetTick>
 8000a78:	4602      	mov	r2, r0
 8000a7a:	68bb      	ldr	r3, [r7, #8]
 8000a7c:	1ad3      	subs	r3, r2, r3
 8000a7e:	68fa      	ldr	r2, [r7, #12]
 8000a80:	429a      	cmp	r2, r3
 8000a82:	d8f7      	bhi.n	8000a74 <HAL_Delay+0x28>
  {
  }
}
 8000a84:	bf00      	nop
 8000a86:	bf00      	nop
 8000a88:	3710      	adds	r7, #16
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	bd80      	pop	{r7, pc}
 8000a8e:	bf00      	nop
 8000a90:	20000008 	.word	0x20000008

08000a94 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a94:	b480      	push	{r7}
 8000a96:	b085      	sub	sp, #20
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	f003 0307 	and.w	r3, r3, #7
 8000aa2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000aa4:	4b0c      	ldr	r3, [pc, #48]	@ (8000ad8 <__NVIC_SetPriorityGrouping+0x44>)
 8000aa6:	68db      	ldr	r3, [r3, #12]
 8000aa8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000aaa:	68ba      	ldr	r2, [r7, #8]
 8000aac:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000ab0:	4013      	ands	r3, r2
 8000ab2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ab4:	68fb      	ldr	r3, [r7, #12]
 8000ab6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ab8:	68bb      	ldr	r3, [r7, #8]
 8000aba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000abc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000ac0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ac4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ac6:	4a04      	ldr	r2, [pc, #16]	@ (8000ad8 <__NVIC_SetPriorityGrouping+0x44>)
 8000ac8:	68bb      	ldr	r3, [r7, #8]
 8000aca:	60d3      	str	r3, [r2, #12]
}
 8000acc:	bf00      	nop
 8000ace:	3714      	adds	r7, #20
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad6:	4770      	bx	lr
 8000ad8:	e000ed00 	.word	0xe000ed00

08000adc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000adc:	b480      	push	{r7}
 8000ade:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ae0:	4b04      	ldr	r3, [pc, #16]	@ (8000af4 <__NVIC_GetPriorityGrouping+0x18>)
 8000ae2:	68db      	ldr	r3, [r3, #12]
 8000ae4:	0a1b      	lsrs	r3, r3, #8
 8000ae6:	f003 0307 	and.w	r3, r3, #7
}
 8000aea:	4618      	mov	r0, r3
 8000aec:	46bd      	mov	sp, r7
 8000aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af2:	4770      	bx	lr
 8000af4:	e000ed00 	.word	0xe000ed00

08000af8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000af8:	b480      	push	{r7}
 8000afa:	b083      	sub	sp, #12
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	4603      	mov	r3, r0
 8000b00:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	db0b      	blt.n	8000b22 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b0a:	79fb      	ldrb	r3, [r7, #7]
 8000b0c:	f003 021f 	and.w	r2, r3, #31
 8000b10:	4907      	ldr	r1, [pc, #28]	@ (8000b30 <__NVIC_EnableIRQ+0x38>)
 8000b12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b16:	095b      	lsrs	r3, r3, #5
 8000b18:	2001      	movs	r0, #1
 8000b1a:	fa00 f202 	lsl.w	r2, r0, r2
 8000b1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000b22:	bf00      	nop
 8000b24:	370c      	adds	r7, #12
 8000b26:	46bd      	mov	sp, r7
 8000b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2c:	4770      	bx	lr
 8000b2e:	bf00      	nop
 8000b30:	e000e100 	.word	0xe000e100

08000b34 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b34:	b480      	push	{r7}
 8000b36:	b083      	sub	sp, #12
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	6039      	str	r1, [r7, #0]
 8000b3e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	db0a      	blt.n	8000b5e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b48:	683b      	ldr	r3, [r7, #0]
 8000b4a:	b2da      	uxtb	r2, r3
 8000b4c:	490c      	ldr	r1, [pc, #48]	@ (8000b80 <__NVIC_SetPriority+0x4c>)
 8000b4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b52:	0112      	lsls	r2, r2, #4
 8000b54:	b2d2      	uxtb	r2, r2
 8000b56:	440b      	add	r3, r1
 8000b58:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b5c:	e00a      	b.n	8000b74 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b5e:	683b      	ldr	r3, [r7, #0]
 8000b60:	b2da      	uxtb	r2, r3
 8000b62:	4908      	ldr	r1, [pc, #32]	@ (8000b84 <__NVIC_SetPriority+0x50>)
 8000b64:	79fb      	ldrb	r3, [r7, #7]
 8000b66:	f003 030f 	and.w	r3, r3, #15
 8000b6a:	3b04      	subs	r3, #4
 8000b6c:	0112      	lsls	r2, r2, #4
 8000b6e:	b2d2      	uxtb	r2, r2
 8000b70:	440b      	add	r3, r1
 8000b72:	761a      	strb	r2, [r3, #24]
}
 8000b74:	bf00      	nop
 8000b76:	370c      	adds	r7, #12
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7e:	4770      	bx	lr
 8000b80:	e000e100 	.word	0xe000e100
 8000b84:	e000ed00 	.word	0xe000ed00

08000b88 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	b089      	sub	sp, #36	@ 0x24
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	60f8      	str	r0, [r7, #12]
 8000b90:	60b9      	str	r1, [r7, #8]
 8000b92:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b94:	68fb      	ldr	r3, [r7, #12]
 8000b96:	f003 0307 	and.w	r3, r3, #7
 8000b9a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b9c:	69fb      	ldr	r3, [r7, #28]
 8000b9e:	f1c3 0307 	rsb	r3, r3, #7
 8000ba2:	2b04      	cmp	r3, #4
 8000ba4:	bf28      	it	cs
 8000ba6:	2304      	movcs	r3, #4
 8000ba8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000baa:	69fb      	ldr	r3, [r7, #28]
 8000bac:	3304      	adds	r3, #4
 8000bae:	2b06      	cmp	r3, #6
 8000bb0:	d902      	bls.n	8000bb8 <NVIC_EncodePriority+0x30>
 8000bb2:	69fb      	ldr	r3, [r7, #28]
 8000bb4:	3b03      	subs	r3, #3
 8000bb6:	e000      	b.n	8000bba <NVIC_EncodePriority+0x32>
 8000bb8:	2300      	movs	r3, #0
 8000bba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bbc:	f04f 32ff 	mov.w	r2, #4294967295
 8000bc0:	69bb      	ldr	r3, [r7, #24]
 8000bc2:	fa02 f303 	lsl.w	r3, r2, r3
 8000bc6:	43da      	mvns	r2, r3
 8000bc8:	68bb      	ldr	r3, [r7, #8]
 8000bca:	401a      	ands	r2, r3
 8000bcc:	697b      	ldr	r3, [r7, #20]
 8000bce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000bd0:	f04f 31ff 	mov.w	r1, #4294967295
 8000bd4:	697b      	ldr	r3, [r7, #20]
 8000bd6:	fa01 f303 	lsl.w	r3, r1, r3
 8000bda:	43d9      	mvns	r1, r3
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000be0:	4313      	orrs	r3, r2
         );
}
 8000be2:	4618      	mov	r0, r3
 8000be4:	3724      	adds	r7, #36	@ 0x24
 8000be6:	46bd      	mov	sp, r7
 8000be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bec:	4770      	bx	lr
	...

08000bf0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b082      	sub	sp, #8
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	3b01      	subs	r3, #1
 8000bfc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000c00:	d301      	bcc.n	8000c06 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c02:	2301      	movs	r3, #1
 8000c04:	e00f      	b.n	8000c26 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c06:	4a0a      	ldr	r2, [pc, #40]	@ (8000c30 <SysTick_Config+0x40>)
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	3b01      	subs	r3, #1
 8000c0c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c0e:	210f      	movs	r1, #15
 8000c10:	f04f 30ff 	mov.w	r0, #4294967295
 8000c14:	f7ff ff8e 	bl	8000b34 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c18:	4b05      	ldr	r3, [pc, #20]	@ (8000c30 <SysTick_Config+0x40>)
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c1e:	4b04      	ldr	r3, [pc, #16]	@ (8000c30 <SysTick_Config+0x40>)
 8000c20:	2207      	movs	r2, #7
 8000c22:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c24:	2300      	movs	r3, #0
}
 8000c26:	4618      	mov	r0, r3
 8000c28:	3708      	adds	r7, #8
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	bd80      	pop	{r7, pc}
 8000c2e:	bf00      	nop
 8000c30:	e000e010 	.word	0xe000e010

08000c34 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b082      	sub	sp, #8
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c3c:	6878      	ldr	r0, [r7, #4]
 8000c3e:	f7ff ff29 	bl	8000a94 <__NVIC_SetPriorityGrouping>
}
 8000c42:	bf00      	nop
 8000c44:	3708      	adds	r7, #8
 8000c46:	46bd      	mov	sp, r7
 8000c48:	bd80      	pop	{r7, pc}

08000c4a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c4a:	b580      	push	{r7, lr}
 8000c4c:	b086      	sub	sp, #24
 8000c4e:	af00      	add	r7, sp, #0
 8000c50:	4603      	mov	r3, r0
 8000c52:	60b9      	str	r1, [r7, #8]
 8000c54:	607a      	str	r2, [r7, #4]
 8000c56:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c58:	2300      	movs	r3, #0
 8000c5a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c5c:	f7ff ff3e 	bl	8000adc <__NVIC_GetPriorityGrouping>
 8000c60:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c62:	687a      	ldr	r2, [r7, #4]
 8000c64:	68b9      	ldr	r1, [r7, #8]
 8000c66:	6978      	ldr	r0, [r7, #20]
 8000c68:	f7ff ff8e 	bl	8000b88 <NVIC_EncodePriority>
 8000c6c:	4602      	mov	r2, r0
 8000c6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c72:	4611      	mov	r1, r2
 8000c74:	4618      	mov	r0, r3
 8000c76:	f7ff ff5d 	bl	8000b34 <__NVIC_SetPriority>
}
 8000c7a:	bf00      	nop
 8000c7c:	3718      	adds	r7, #24
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bd80      	pop	{r7, pc}

08000c82 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c82:	b580      	push	{r7, lr}
 8000c84:	b082      	sub	sp, #8
 8000c86:	af00      	add	r7, sp, #0
 8000c88:	4603      	mov	r3, r0
 8000c8a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c90:	4618      	mov	r0, r3
 8000c92:	f7ff ff31 	bl	8000af8 <__NVIC_EnableIRQ>
}
 8000c96:	bf00      	nop
 8000c98:	3708      	adds	r7, #8
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	bd80      	pop	{r7, pc}

08000c9e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c9e:	b580      	push	{r7, lr}
 8000ca0:	b082      	sub	sp, #8
 8000ca2:	af00      	add	r7, sp, #0
 8000ca4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ca6:	6878      	ldr	r0, [r7, #4]
 8000ca8:	f7ff ffa2 	bl	8000bf0 <SysTick_Config>
 8000cac:	4603      	mov	r3, r0
}
 8000cae:	4618      	mov	r0, r3
 8000cb0:	3708      	adds	r7, #8
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	bd80      	pop	{r7, pc}
	...

08000cb8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	b089      	sub	sp, #36	@ 0x24
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]
 8000cc0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000cce:	2300      	movs	r3, #0
 8000cd0:	61fb      	str	r3, [r7, #28]
 8000cd2:	e16b      	b.n	8000fac <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000cd4:	2201      	movs	r2, #1
 8000cd6:	69fb      	ldr	r3, [r7, #28]
 8000cd8:	fa02 f303 	lsl.w	r3, r2, r3
 8000cdc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000cde:	683b      	ldr	r3, [r7, #0]
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	697a      	ldr	r2, [r7, #20]
 8000ce4:	4013      	ands	r3, r2
 8000ce6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000ce8:	693a      	ldr	r2, [r7, #16]
 8000cea:	697b      	ldr	r3, [r7, #20]
 8000cec:	429a      	cmp	r2, r3
 8000cee:	f040 815a 	bne.w	8000fa6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000cf2:	683b      	ldr	r3, [r7, #0]
 8000cf4:	685b      	ldr	r3, [r3, #4]
 8000cf6:	f003 0303 	and.w	r3, r3, #3
 8000cfa:	2b01      	cmp	r3, #1
 8000cfc:	d005      	beq.n	8000d0a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000cfe:	683b      	ldr	r3, [r7, #0]
 8000d00:	685b      	ldr	r3, [r3, #4]
 8000d02:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000d06:	2b02      	cmp	r3, #2
 8000d08:	d130      	bne.n	8000d6c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	689b      	ldr	r3, [r3, #8]
 8000d0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000d10:	69fb      	ldr	r3, [r7, #28]
 8000d12:	005b      	lsls	r3, r3, #1
 8000d14:	2203      	movs	r2, #3
 8000d16:	fa02 f303 	lsl.w	r3, r2, r3
 8000d1a:	43db      	mvns	r3, r3
 8000d1c:	69ba      	ldr	r2, [r7, #24]
 8000d1e:	4013      	ands	r3, r2
 8000d20:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000d22:	683b      	ldr	r3, [r7, #0]
 8000d24:	68da      	ldr	r2, [r3, #12]
 8000d26:	69fb      	ldr	r3, [r7, #28]
 8000d28:	005b      	lsls	r3, r3, #1
 8000d2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d2e:	69ba      	ldr	r2, [r7, #24]
 8000d30:	4313      	orrs	r3, r2
 8000d32:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	69ba      	ldr	r2, [r7, #24]
 8000d38:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	685b      	ldr	r3, [r3, #4]
 8000d3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000d40:	2201      	movs	r2, #1
 8000d42:	69fb      	ldr	r3, [r7, #28]
 8000d44:	fa02 f303 	lsl.w	r3, r2, r3
 8000d48:	43db      	mvns	r3, r3
 8000d4a:	69ba      	ldr	r2, [r7, #24]
 8000d4c:	4013      	ands	r3, r2
 8000d4e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000d50:	683b      	ldr	r3, [r7, #0]
 8000d52:	685b      	ldr	r3, [r3, #4]
 8000d54:	091b      	lsrs	r3, r3, #4
 8000d56:	f003 0201 	and.w	r2, r3, #1
 8000d5a:	69fb      	ldr	r3, [r7, #28]
 8000d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d60:	69ba      	ldr	r2, [r7, #24]
 8000d62:	4313      	orrs	r3, r2
 8000d64:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	69ba      	ldr	r2, [r7, #24]
 8000d6a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000d6c:	683b      	ldr	r3, [r7, #0]
 8000d6e:	685b      	ldr	r3, [r3, #4]
 8000d70:	f003 0303 	and.w	r3, r3, #3
 8000d74:	2b03      	cmp	r3, #3
 8000d76:	d017      	beq.n	8000da8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	68db      	ldr	r3, [r3, #12]
 8000d7c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000d7e:	69fb      	ldr	r3, [r7, #28]
 8000d80:	005b      	lsls	r3, r3, #1
 8000d82:	2203      	movs	r2, #3
 8000d84:	fa02 f303 	lsl.w	r3, r2, r3
 8000d88:	43db      	mvns	r3, r3
 8000d8a:	69ba      	ldr	r2, [r7, #24]
 8000d8c:	4013      	ands	r3, r2
 8000d8e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000d90:	683b      	ldr	r3, [r7, #0]
 8000d92:	689a      	ldr	r2, [r3, #8]
 8000d94:	69fb      	ldr	r3, [r7, #28]
 8000d96:	005b      	lsls	r3, r3, #1
 8000d98:	fa02 f303 	lsl.w	r3, r2, r3
 8000d9c:	69ba      	ldr	r2, [r7, #24]
 8000d9e:	4313      	orrs	r3, r2
 8000da0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	69ba      	ldr	r2, [r7, #24]
 8000da6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000da8:	683b      	ldr	r3, [r7, #0]
 8000daa:	685b      	ldr	r3, [r3, #4]
 8000dac:	f003 0303 	and.w	r3, r3, #3
 8000db0:	2b02      	cmp	r3, #2
 8000db2:	d123      	bne.n	8000dfc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000db4:	69fb      	ldr	r3, [r7, #28]
 8000db6:	08da      	lsrs	r2, r3, #3
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	3208      	adds	r2, #8
 8000dbc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000dc0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000dc2:	69fb      	ldr	r3, [r7, #28]
 8000dc4:	f003 0307 	and.w	r3, r3, #7
 8000dc8:	009b      	lsls	r3, r3, #2
 8000dca:	220f      	movs	r2, #15
 8000dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd0:	43db      	mvns	r3, r3
 8000dd2:	69ba      	ldr	r2, [r7, #24]
 8000dd4:	4013      	ands	r3, r2
 8000dd6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000dd8:	683b      	ldr	r3, [r7, #0]
 8000dda:	691a      	ldr	r2, [r3, #16]
 8000ddc:	69fb      	ldr	r3, [r7, #28]
 8000dde:	f003 0307 	and.w	r3, r3, #7
 8000de2:	009b      	lsls	r3, r3, #2
 8000de4:	fa02 f303 	lsl.w	r3, r2, r3
 8000de8:	69ba      	ldr	r2, [r7, #24]
 8000dea:	4313      	orrs	r3, r2
 8000dec:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000dee:	69fb      	ldr	r3, [r7, #28]
 8000df0:	08da      	lsrs	r2, r3, #3
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	3208      	adds	r2, #8
 8000df6:	69b9      	ldr	r1, [r7, #24]
 8000df8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000e02:	69fb      	ldr	r3, [r7, #28]
 8000e04:	005b      	lsls	r3, r3, #1
 8000e06:	2203      	movs	r2, #3
 8000e08:	fa02 f303 	lsl.w	r3, r2, r3
 8000e0c:	43db      	mvns	r3, r3
 8000e0e:	69ba      	ldr	r2, [r7, #24]
 8000e10:	4013      	ands	r3, r2
 8000e12:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000e14:	683b      	ldr	r3, [r7, #0]
 8000e16:	685b      	ldr	r3, [r3, #4]
 8000e18:	f003 0203 	and.w	r2, r3, #3
 8000e1c:	69fb      	ldr	r3, [r7, #28]
 8000e1e:	005b      	lsls	r3, r3, #1
 8000e20:	fa02 f303 	lsl.w	r3, r2, r3
 8000e24:	69ba      	ldr	r2, [r7, #24]
 8000e26:	4313      	orrs	r3, r2
 8000e28:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	69ba      	ldr	r2, [r7, #24]
 8000e2e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000e30:	683b      	ldr	r3, [r7, #0]
 8000e32:	685b      	ldr	r3, [r3, #4]
 8000e34:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	f000 80b4 	beq.w	8000fa6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e3e:	2300      	movs	r3, #0
 8000e40:	60fb      	str	r3, [r7, #12]
 8000e42:	4b60      	ldr	r3, [pc, #384]	@ (8000fc4 <HAL_GPIO_Init+0x30c>)
 8000e44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e46:	4a5f      	ldr	r2, [pc, #380]	@ (8000fc4 <HAL_GPIO_Init+0x30c>)
 8000e48:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000e4c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000e4e:	4b5d      	ldr	r3, [pc, #372]	@ (8000fc4 <HAL_GPIO_Init+0x30c>)
 8000e50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e52:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000e56:	60fb      	str	r3, [r7, #12]
 8000e58:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000e5a:	4a5b      	ldr	r2, [pc, #364]	@ (8000fc8 <HAL_GPIO_Init+0x310>)
 8000e5c:	69fb      	ldr	r3, [r7, #28]
 8000e5e:	089b      	lsrs	r3, r3, #2
 8000e60:	3302      	adds	r3, #2
 8000e62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e66:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000e68:	69fb      	ldr	r3, [r7, #28]
 8000e6a:	f003 0303 	and.w	r3, r3, #3
 8000e6e:	009b      	lsls	r3, r3, #2
 8000e70:	220f      	movs	r2, #15
 8000e72:	fa02 f303 	lsl.w	r3, r2, r3
 8000e76:	43db      	mvns	r3, r3
 8000e78:	69ba      	ldr	r2, [r7, #24]
 8000e7a:	4013      	ands	r3, r2
 8000e7c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	4a52      	ldr	r2, [pc, #328]	@ (8000fcc <HAL_GPIO_Init+0x314>)
 8000e82:	4293      	cmp	r3, r2
 8000e84:	d02b      	beq.n	8000ede <HAL_GPIO_Init+0x226>
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	4a51      	ldr	r2, [pc, #324]	@ (8000fd0 <HAL_GPIO_Init+0x318>)
 8000e8a:	4293      	cmp	r3, r2
 8000e8c:	d025      	beq.n	8000eda <HAL_GPIO_Init+0x222>
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	4a50      	ldr	r2, [pc, #320]	@ (8000fd4 <HAL_GPIO_Init+0x31c>)
 8000e92:	4293      	cmp	r3, r2
 8000e94:	d01f      	beq.n	8000ed6 <HAL_GPIO_Init+0x21e>
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	4a4f      	ldr	r2, [pc, #316]	@ (8000fd8 <HAL_GPIO_Init+0x320>)
 8000e9a:	4293      	cmp	r3, r2
 8000e9c:	d019      	beq.n	8000ed2 <HAL_GPIO_Init+0x21a>
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	4a4e      	ldr	r2, [pc, #312]	@ (8000fdc <HAL_GPIO_Init+0x324>)
 8000ea2:	4293      	cmp	r3, r2
 8000ea4:	d013      	beq.n	8000ece <HAL_GPIO_Init+0x216>
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	4a4d      	ldr	r2, [pc, #308]	@ (8000fe0 <HAL_GPIO_Init+0x328>)
 8000eaa:	4293      	cmp	r3, r2
 8000eac:	d00d      	beq.n	8000eca <HAL_GPIO_Init+0x212>
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	4a4c      	ldr	r2, [pc, #304]	@ (8000fe4 <HAL_GPIO_Init+0x32c>)
 8000eb2:	4293      	cmp	r3, r2
 8000eb4:	d007      	beq.n	8000ec6 <HAL_GPIO_Init+0x20e>
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	4a4b      	ldr	r2, [pc, #300]	@ (8000fe8 <HAL_GPIO_Init+0x330>)
 8000eba:	4293      	cmp	r3, r2
 8000ebc:	d101      	bne.n	8000ec2 <HAL_GPIO_Init+0x20a>
 8000ebe:	2307      	movs	r3, #7
 8000ec0:	e00e      	b.n	8000ee0 <HAL_GPIO_Init+0x228>
 8000ec2:	2308      	movs	r3, #8
 8000ec4:	e00c      	b.n	8000ee0 <HAL_GPIO_Init+0x228>
 8000ec6:	2306      	movs	r3, #6
 8000ec8:	e00a      	b.n	8000ee0 <HAL_GPIO_Init+0x228>
 8000eca:	2305      	movs	r3, #5
 8000ecc:	e008      	b.n	8000ee0 <HAL_GPIO_Init+0x228>
 8000ece:	2304      	movs	r3, #4
 8000ed0:	e006      	b.n	8000ee0 <HAL_GPIO_Init+0x228>
 8000ed2:	2303      	movs	r3, #3
 8000ed4:	e004      	b.n	8000ee0 <HAL_GPIO_Init+0x228>
 8000ed6:	2302      	movs	r3, #2
 8000ed8:	e002      	b.n	8000ee0 <HAL_GPIO_Init+0x228>
 8000eda:	2301      	movs	r3, #1
 8000edc:	e000      	b.n	8000ee0 <HAL_GPIO_Init+0x228>
 8000ede:	2300      	movs	r3, #0
 8000ee0:	69fa      	ldr	r2, [r7, #28]
 8000ee2:	f002 0203 	and.w	r2, r2, #3
 8000ee6:	0092      	lsls	r2, r2, #2
 8000ee8:	4093      	lsls	r3, r2
 8000eea:	69ba      	ldr	r2, [r7, #24]
 8000eec:	4313      	orrs	r3, r2
 8000eee:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000ef0:	4935      	ldr	r1, [pc, #212]	@ (8000fc8 <HAL_GPIO_Init+0x310>)
 8000ef2:	69fb      	ldr	r3, [r7, #28]
 8000ef4:	089b      	lsrs	r3, r3, #2
 8000ef6:	3302      	adds	r3, #2
 8000ef8:	69ba      	ldr	r2, [r7, #24]
 8000efa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000efe:	4b3b      	ldr	r3, [pc, #236]	@ (8000fec <HAL_GPIO_Init+0x334>)
 8000f00:	689b      	ldr	r3, [r3, #8]
 8000f02:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f04:	693b      	ldr	r3, [r7, #16]
 8000f06:	43db      	mvns	r3, r3
 8000f08:	69ba      	ldr	r2, [r7, #24]
 8000f0a:	4013      	ands	r3, r2
 8000f0c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000f0e:	683b      	ldr	r3, [r7, #0]
 8000f10:	685b      	ldr	r3, [r3, #4]
 8000f12:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d003      	beq.n	8000f22 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8000f1a:	69ba      	ldr	r2, [r7, #24]
 8000f1c:	693b      	ldr	r3, [r7, #16]
 8000f1e:	4313      	orrs	r3, r2
 8000f20:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000f22:	4a32      	ldr	r2, [pc, #200]	@ (8000fec <HAL_GPIO_Init+0x334>)
 8000f24:	69bb      	ldr	r3, [r7, #24]
 8000f26:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000f28:	4b30      	ldr	r3, [pc, #192]	@ (8000fec <HAL_GPIO_Init+0x334>)
 8000f2a:	68db      	ldr	r3, [r3, #12]
 8000f2c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f2e:	693b      	ldr	r3, [r7, #16]
 8000f30:	43db      	mvns	r3, r3
 8000f32:	69ba      	ldr	r2, [r7, #24]
 8000f34:	4013      	ands	r3, r2
 8000f36:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000f38:	683b      	ldr	r3, [r7, #0]
 8000f3a:	685b      	ldr	r3, [r3, #4]
 8000f3c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d003      	beq.n	8000f4c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8000f44:	69ba      	ldr	r2, [r7, #24]
 8000f46:	693b      	ldr	r3, [r7, #16]
 8000f48:	4313      	orrs	r3, r2
 8000f4a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000f4c:	4a27      	ldr	r2, [pc, #156]	@ (8000fec <HAL_GPIO_Init+0x334>)
 8000f4e:	69bb      	ldr	r3, [r7, #24]
 8000f50:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000f52:	4b26      	ldr	r3, [pc, #152]	@ (8000fec <HAL_GPIO_Init+0x334>)
 8000f54:	685b      	ldr	r3, [r3, #4]
 8000f56:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f58:	693b      	ldr	r3, [r7, #16]
 8000f5a:	43db      	mvns	r3, r3
 8000f5c:	69ba      	ldr	r2, [r7, #24]
 8000f5e:	4013      	ands	r3, r2
 8000f60:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000f62:	683b      	ldr	r3, [r7, #0]
 8000f64:	685b      	ldr	r3, [r3, #4]
 8000f66:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d003      	beq.n	8000f76 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8000f6e:	69ba      	ldr	r2, [r7, #24]
 8000f70:	693b      	ldr	r3, [r7, #16]
 8000f72:	4313      	orrs	r3, r2
 8000f74:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000f76:	4a1d      	ldr	r2, [pc, #116]	@ (8000fec <HAL_GPIO_Init+0x334>)
 8000f78:	69bb      	ldr	r3, [r7, #24]
 8000f7a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000f7c:	4b1b      	ldr	r3, [pc, #108]	@ (8000fec <HAL_GPIO_Init+0x334>)
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f82:	693b      	ldr	r3, [r7, #16]
 8000f84:	43db      	mvns	r3, r3
 8000f86:	69ba      	ldr	r2, [r7, #24]
 8000f88:	4013      	ands	r3, r2
 8000f8a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000f8c:	683b      	ldr	r3, [r7, #0]
 8000f8e:	685b      	ldr	r3, [r3, #4]
 8000f90:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d003      	beq.n	8000fa0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8000f98:	69ba      	ldr	r2, [r7, #24]
 8000f9a:	693b      	ldr	r3, [r7, #16]
 8000f9c:	4313      	orrs	r3, r2
 8000f9e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000fa0:	4a12      	ldr	r2, [pc, #72]	@ (8000fec <HAL_GPIO_Init+0x334>)
 8000fa2:	69bb      	ldr	r3, [r7, #24]
 8000fa4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000fa6:	69fb      	ldr	r3, [r7, #28]
 8000fa8:	3301      	adds	r3, #1
 8000faa:	61fb      	str	r3, [r7, #28]
 8000fac:	69fb      	ldr	r3, [r7, #28]
 8000fae:	2b0f      	cmp	r3, #15
 8000fb0:	f67f ae90 	bls.w	8000cd4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000fb4:	bf00      	nop
 8000fb6:	bf00      	nop
 8000fb8:	3724      	adds	r7, #36	@ 0x24
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc0:	4770      	bx	lr
 8000fc2:	bf00      	nop
 8000fc4:	40023800 	.word	0x40023800
 8000fc8:	40013800 	.word	0x40013800
 8000fcc:	40020000 	.word	0x40020000
 8000fd0:	40020400 	.word	0x40020400
 8000fd4:	40020800 	.word	0x40020800
 8000fd8:	40020c00 	.word	0x40020c00
 8000fdc:	40021000 	.word	0x40021000
 8000fe0:	40021400 	.word	0x40021400
 8000fe4:	40021800 	.word	0x40021800
 8000fe8:	40021c00 	.word	0x40021c00
 8000fec:	40013c00 	.word	0x40013c00

08000ff0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b086      	sub	sp, #24
 8000ff4:	af02      	add	r7, sp, #8
 8000ff6:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d101      	bne.n	8001002 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000ffe:	2301      	movs	r3, #1
 8001000:	e101      	b.n	8001206 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 800100e:	b2db      	uxtb	r3, r3
 8001010:	2b00      	cmp	r3, #0
 8001012:	d106      	bne.n	8001022 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	2200      	movs	r2, #0
 8001018:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800101c:	6878      	ldr	r0, [r7, #4]
 800101e:	f005 fe2d 	bl	8006c7c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	2203      	movs	r2, #3
 8001026:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 800102a:	68bb      	ldr	r3, [r7, #8]
 800102c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001030:	d102      	bne.n	8001038 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	2200      	movs	r2, #0
 8001036:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	4618      	mov	r0, r3
 800103e:	f002 fb66 	bl	800370e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	6818      	ldr	r0, [r3, #0]
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	7c1a      	ldrb	r2, [r3, #16]
 800104a:	f88d 2000 	strb.w	r2, [sp]
 800104e:	3304      	adds	r3, #4
 8001050:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001052:	f002 fa45 	bl	80034e0 <USB_CoreInit>
 8001056:	4603      	mov	r3, r0
 8001058:	2b00      	cmp	r3, #0
 800105a:	d005      	beq.n	8001068 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	2202      	movs	r2, #2
 8001060:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001064:	2301      	movs	r3, #1
 8001066:	e0ce      	b.n	8001206 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	2100      	movs	r1, #0
 800106e:	4618      	mov	r0, r3
 8001070:	f002 fb5e 	bl	8003730 <USB_SetCurrentMode>
 8001074:	4603      	mov	r3, r0
 8001076:	2b00      	cmp	r3, #0
 8001078:	d005      	beq.n	8001086 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	2202      	movs	r2, #2
 800107e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001082:	2301      	movs	r3, #1
 8001084:	e0bf      	b.n	8001206 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001086:	2300      	movs	r3, #0
 8001088:	73fb      	strb	r3, [r7, #15]
 800108a:	e04a      	b.n	8001122 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800108c:	7bfa      	ldrb	r2, [r7, #15]
 800108e:	6879      	ldr	r1, [r7, #4]
 8001090:	4613      	mov	r3, r2
 8001092:	00db      	lsls	r3, r3, #3
 8001094:	4413      	add	r3, r2
 8001096:	009b      	lsls	r3, r3, #2
 8001098:	440b      	add	r3, r1
 800109a:	3315      	adds	r3, #21
 800109c:	2201      	movs	r2, #1
 800109e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80010a0:	7bfa      	ldrb	r2, [r7, #15]
 80010a2:	6879      	ldr	r1, [r7, #4]
 80010a4:	4613      	mov	r3, r2
 80010a6:	00db      	lsls	r3, r3, #3
 80010a8:	4413      	add	r3, r2
 80010aa:	009b      	lsls	r3, r3, #2
 80010ac:	440b      	add	r3, r1
 80010ae:	3314      	adds	r3, #20
 80010b0:	7bfa      	ldrb	r2, [r7, #15]
 80010b2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80010b4:	7bfa      	ldrb	r2, [r7, #15]
 80010b6:	7bfb      	ldrb	r3, [r7, #15]
 80010b8:	b298      	uxth	r0, r3
 80010ba:	6879      	ldr	r1, [r7, #4]
 80010bc:	4613      	mov	r3, r2
 80010be:	00db      	lsls	r3, r3, #3
 80010c0:	4413      	add	r3, r2
 80010c2:	009b      	lsls	r3, r3, #2
 80010c4:	440b      	add	r3, r1
 80010c6:	332e      	adds	r3, #46	@ 0x2e
 80010c8:	4602      	mov	r2, r0
 80010ca:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80010cc:	7bfa      	ldrb	r2, [r7, #15]
 80010ce:	6879      	ldr	r1, [r7, #4]
 80010d0:	4613      	mov	r3, r2
 80010d2:	00db      	lsls	r3, r3, #3
 80010d4:	4413      	add	r3, r2
 80010d6:	009b      	lsls	r3, r3, #2
 80010d8:	440b      	add	r3, r1
 80010da:	3318      	adds	r3, #24
 80010dc:	2200      	movs	r2, #0
 80010de:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80010e0:	7bfa      	ldrb	r2, [r7, #15]
 80010e2:	6879      	ldr	r1, [r7, #4]
 80010e4:	4613      	mov	r3, r2
 80010e6:	00db      	lsls	r3, r3, #3
 80010e8:	4413      	add	r3, r2
 80010ea:	009b      	lsls	r3, r3, #2
 80010ec:	440b      	add	r3, r1
 80010ee:	331c      	adds	r3, #28
 80010f0:	2200      	movs	r2, #0
 80010f2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80010f4:	7bfa      	ldrb	r2, [r7, #15]
 80010f6:	6879      	ldr	r1, [r7, #4]
 80010f8:	4613      	mov	r3, r2
 80010fa:	00db      	lsls	r3, r3, #3
 80010fc:	4413      	add	r3, r2
 80010fe:	009b      	lsls	r3, r3, #2
 8001100:	440b      	add	r3, r1
 8001102:	3320      	adds	r3, #32
 8001104:	2200      	movs	r2, #0
 8001106:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001108:	7bfa      	ldrb	r2, [r7, #15]
 800110a:	6879      	ldr	r1, [r7, #4]
 800110c:	4613      	mov	r3, r2
 800110e:	00db      	lsls	r3, r3, #3
 8001110:	4413      	add	r3, r2
 8001112:	009b      	lsls	r3, r3, #2
 8001114:	440b      	add	r3, r1
 8001116:	3324      	adds	r3, #36	@ 0x24
 8001118:	2200      	movs	r2, #0
 800111a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800111c:	7bfb      	ldrb	r3, [r7, #15]
 800111e:	3301      	adds	r3, #1
 8001120:	73fb      	strb	r3, [r7, #15]
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	791b      	ldrb	r3, [r3, #4]
 8001126:	7bfa      	ldrb	r2, [r7, #15]
 8001128:	429a      	cmp	r2, r3
 800112a:	d3af      	bcc.n	800108c <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800112c:	2300      	movs	r3, #0
 800112e:	73fb      	strb	r3, [r7, #15]
 8001130:	e044      	b.n	80011bc <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001132:	7bfa      	ldrb	r2, [r7, #15]
 8001134:	6879      	ldr	r1, [r7, #4]
 8001136:	4613      	mov	r3, r2
 8001138:	00db      	lsls	r3, r3, #3
 800113a:	4413      	add	r3, r2
 800113c:	009b      	lsls	r3, r3, #2
 800113e:	440b      	add	r3, r1
 8001140:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8001144:	2200      	movs	r2, #0
 8001146:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001148:	7bfa      	ldrb	r2, [r7, #15]
 800114a:	6879      	ldr	r1, [r7, #4]
 800114c:	4613      	mov	r3, r2
 800114e:	00db      	lsls	r3, r3, #3
 8001150:	4413      	add	r3, r2
 8001152:	009b      	lsls	r3, r3, #2
 8001154:	440b      	add	r3, r1
 8001156:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 800115a:	7bfa      	ldrb	r2, [r7, #15]
 800115c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800115e:	7bfa      	ldrb	r2, [r7, #15]
 8001160:	6879      	ldr	r1, [r7, #4]
 8001162:	4613      	mov	r3, r2
 8001164:	00db      	lsls	r3, r3, #3
 8001166:	4413      	add	r3, r2
 8001168:	009b      	lsls	r3, r3, #2
 800116a:	440b      	add	r3, r1
 800116c:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8001170:	2200      	movs	r2, #0
 8001172:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001174:	7bfa      	ldrb	r2, [r7, #15]
 8001176:	6879      	ldr	r1, [r7, #4]
 8001178:	4613      	mov	r3, r2
 800117a:	00db      	lsls	r3, r3, #3
 800117c:	4413      	add	r3, r2
 800117e:	009b      	lsls	r3, r3, #2
 8001180:	440b      	add	r3, r1
 8001182:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8001186:	2200      	movs	r2, #0
 8001188:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800118a:	7bfa      	ldrb	r2, [r7, #15]
 800118c:	6879      	ldr	r1, [r7, #4]
 800118e:	4613      	mov	r3, r2
 8001190:	00db      	lsls	r3, r3, #3
 8001192:	4413      	add	r3, r2
 8001194:	009b      	lsls	r3, r3, #2
 8001196:	440b      	add	r3, r1
 8001198:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800119c:	2200      	movs	r2, #0
 800119e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80011a0:	7bfa      	ldrb	r2, [r7, #15]
 80011a2:	6879      	ldr	r1, [r7, #4]
 80011a4:	4613      	mov	r3, r2
 80011a6:	00db      	lsls	r3, r3, #3
 80011a8:	4413      	add	r3, r2
 80011aa:	009b      	lsls	r3, r3, #2
 80011ac:	440b      	add	r3, r1
 80011ae:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80011b2:	2200      	movs	r2, #0
 80011b4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80011b6:	7bfb      	ldrb	r3, [r7, #15]
 80011b8:	3301      	adds	r3, #1
 80011ba:	73fb      	strb	r3, [r7, #15]
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	791b      	ldrb	r3, [r3, #4]
 80011c0:	7bfa      	ldrb	r2, [r7, #15]
 80011c2:	429a      	cmp	r2, r3
 80011c4:	d3b5      	bcc.n	8001132 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	6818      	ldr	r0, [r3, #0]
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	7c1a      	ldrb	r2, [r3, #16]
 80011ce:	f88d 2000 	strb.w	r2, [sp]
 80011d2:	3304      	adds	r3, #4
 80011d4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80011d6:	f002 faf7 	bl	80037c8 <USB_DevInit>
 80011da:	4603      	mov	r3, r0
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d005      	beq.n	80011ec <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	2202      	movs	r2, #2
 80011e4:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80011e8:	2301      	movs	r3, #1
 80011ea:	e00c      	b.n	8001206 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	2200      	movs	r2, #0
 80011f0:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	2201      	movs	r2, #1
 80011f6:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	4618      	mov	r0, r3
 8001200:	f003 fb41 	bl	8004886 <USB_DevDisconnect>

  return HAL_OK;
 8001204:	2300      	movs	r3, #0
}
 8001206:	4618      	mov	r0, r3
 8001208:	3710      	adds	r7, #16
 800120a:	46bd      	mov	sp, r7
 800120c:	bd80      	pop	{r7, pc}

0800120e <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800120e:	b580      	push	{r7, lr}
 8001210:	b084      	sub	sp, #16
 8001212:	af00      	add	r7, sp, #0
 8001214:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001222:	2b01      	cmp	r3, #1
 8001224:	d101      	bne.n	800122a <HAL_PCD_Start+0x1c>
 8001226:	2302      	movs	r3, #2
 8001228:	e022      	b.n	8001270 <HAL_PCD_Start+0x62>
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	2201      	movs	r2, #1
 800122e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	68db      	ldr	r3, [r3, #12]
 8001236:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800123a:	2b00      	cmp	r3, #0
 800123c:	d009      	beq.n	8001252 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8001242:	2b01      	cmp	r3, #1
 8001244:	d105      	bne.n	8001252 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001246:	68fb      	ldr	r3, [r7, #12]
 8001248:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800124a:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800124e:	68fb      	ldr	r3, [r7, #12]
 8001250:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	4618      	mov	r0, r3
 8001258:	f002 fa48 	bl	80036ec <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	4618      	mov	r0, r3
 8001262:	f003 faef 	bl	8004844 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	2200      	movs	r2, #0
 800126a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800126e:	2300      	movs	r3, #0
}
 8001270:	4618      	mov	r0, r3
 8001272:	3710      	adds	r7, #16
 8001274:	46bd      	mov	sp, r7
 8001276:	bd80      	pop	{r7, pc}

08001278 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001278:	b590      	push	{r4, r7, lr}
 800127a:	b08d      	sub	sp, #52	@ 0x34
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001286:	6a3b      	ldr	r3, [r7, #32]
 8001288:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	4618      	mov	r0, r3
 8001290:	f003 fbad 	bl	80049ee <USB_GetMode>
 8001294:	4603      	mov	r3, r0
 8001296:	2b00      	cmp	r3, #0
 8001298:	f040 848c 	bne.w	8001bb4 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	4618      	mov	r0, r3
 80012a2:	f003 fb11 	bl	80048c8 <USB_ReadInterrupts>
 80012a6:	4603      	mov	r3, r0
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	f000 8482 	beq.w	8001bb2 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80012ae:	69fb      	ldr	r3, [r7, #28]
 80012b0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80012b4:	689b      	ldr	r3, [r3, #8]
 80012b6:	0a1b      	lsrs	r3, r3, #8
 80012b8:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	4618      	mov	r0, r3
 80012c8:	f003 fafe 	bl	80048c8 <USB_ReadInterrupts>
 80012cc:	4603      	mov	r3, r0
 80012ce:	f003 0302 	and.w	r3, r3, #2
 80012d2:	2b02      	cmp	r3, #2
 80012d4:	d107      	bne.n	80012e6 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	695a      	ldr	r2, [r3, #20]
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	f002 0202 	and.w	r2, r2, #2
 80012e4:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	4618      	mov	r0, r3
 80012ec:	f003 faec 	bl	80048c8 <USB_ReadInterrupts>
 80012f0:	4603      	mov	r3, r0
 80012f2:	f003 0310 	and.w	r3, r3, #16
 80012f6:	2b10      	cmp	r3, #16
 80012f8:	d161      	bne.n	80013be <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	699a      	ldr	r2, [r3, #24]
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	f022 0210 	bic.w	r2, r2, #16
 8001308:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800130a:	6a3b      	ldr	r3, [r7, #32]
 800130c:	6a1b      	ldr	r3, [r3, #32]
 800130e:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8001310:	69bb      	ldr	r3, [r7, #24]
 8001312:	f003 020f 	and.w	r2, r3, #15
 8001316:	4613      	mov	r3, r2
 8001318:	00db      	lsls	r3, r3, #3
 800131a:	4413      	add	r3, r2
 800131c:	009b      	lsls	r3, r3, #2
 800131e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001322:	687a      	ldr	r2, [r7, #4]
 8001324:	4413      	add	r3, r2
 8001326:	3304      	adds	r3, #4
 8001328:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800132a:	69bb      	ldr	r3, [r7, #24]
 800132c:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8001330:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8001334:	d124      	bne.n	8001380 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001336:	69ba      	ldr	r2, [r7, #24]
 8001338:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 800133c:	4013      	ands	r3, r2
 800133e:	2b00      	cmp	r3, #0
 8001340:	d035      	beq.n	80013ae <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001342:	697b      	ldr	r3, [r7, #20]
 8001344:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001346:	69bb      	ldr	r3, [r7, #24]
 8001348:	091b      	lsrs	r3, r3, #4
 800134a:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800134c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001350:	b29b      	uxth	r3, r3
 8001352:	461a      	mov	r2, r3
 8001354:	6a38      	ldr	r0, [r7, #32]
 8001356:	f003 f923 	bl	80045a0 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800135a:	697b      	ldr	r3, [r7, #20]
 800135c:	68da      	ldr	r2, [r3, #12]
 800135e:	69bb      	ldr	r3, [r7, #24]
 8001360:	091b      	lsrs	r3, r3, #4
 8001362:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001366:	441a      	add	r2, r3
 8001368:	697b      	ldr	r3, [r7, #20]
 800136a:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800136c:	697b      	ldr	r3, [r7, #20]
 800136e:	695a      	ldr	r2, [r3, #20]
 8001370:	69bb      	ldr	r3, [r7, #24]
 8001372:	091b      	lsrs	r3, r3, #4
 8001374:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001378:	441a      	add	r2, r3
 800137a:	697b      	ldr	r3, [r7, #20]
 800137c:	615a      	str	r2, [r3, #20]
 800137e:	e016      	b.n	80013ae <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8001380:	69bb      	ldr	r3, [r7, #24]
 8001382:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8001386:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800138a:	d110      	bne.n	80013ae <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8001392:	2208      	movs	r2, #8
 8001394:	4619      	mov	r1, r3
 8001396:	6a38      	ldr	r0, [r7, #32]
 8001398:	f003 f902 	bl	80045a0 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800139c:	697b      	ldr	r3, [r7, #20]
 800139e:	695a      	ldr	r2, [r3, #20]
 80013a0:	69bb      	ldr	r3, [r7, #24]
 80013a2:	091b      	lsrs	r3, r3, #4
 80013a4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80013a8:	441a      	add	r2, r3
 80013aa:	697b      	ldr	r3, [r7, #20]
 80013ac:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	699a      	ldr	r2, [r3, #24]
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	f042 0210 	orr.w	r2, r2, #16
 80013bc:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	4618      	mov	r0, r3
 80013c4:	f003 fa80 	bl	80048c8 <USB_ReadInterrupts>
 80013c8:	4603      	mov	r3, r0
 80013ca:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80013ce:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80013d2:	f040 80a7 	bne.w	8001524 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80013d6:	2300      	movs	r3, #0
 80013d8:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	4618      	mov	r0, r3
 80013e0:	f003 fa85 	bl	80048ee <USB_ReadDevAllOutEpInterrupt>
 80013e4:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 80013e6:	e099      	b.n	800151c <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80013e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80013ea:	f003 0301 	and.w	r3, r3, #1
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	f000 808e 	beq.w	8001510 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80013fa:	b2d2      	uxtb	r2, r2
 80013fc:	4611      	mov	r1, r2
 80013fe:	4618      	mov	r0, r3
 8001400:	f003 faa9 	bl	8004956 <USB_ReadDevOutEPInterrupt>
 8001404:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001406:	693b      	ldr	r3, [r7, #16]
 8001408:	f003 0301 	and.w	r3, r3, #1
 800140c:	2b00      	cmp	r3, #0
 800140e:	d00c      	beq.n	800142a <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001410:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001412:	015a      	lsls	r2, r3, #5
 8001414:	69fb      	ldr	r3, [r7, #28]
 8001416:	4413      	add	r3, r2
 8001418:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800141c:	461a      	mov	r2, r3
 800141e:	2301      	movs	r3, #1
 8001420:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001422:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001424:	6878      	ldr	r0, [r7, #4]
 8001426:	f000 fe8b 	bl	8002140 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800142a:	693b      	ldr	r3, [r7, #16]
 800142c:	f003 0308 	and.w	r3, r3, #8
 8001430:	2b00      	cmp	r3, #0
 8001432:	d00c      	beq.n	800144e <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001434:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001436:	015a      	lsls	r2, r3, #5
 8001438:	69fb      	ldr	r3, [r7, #28]
 800143a:	4413      	add	r3, r2
 800143c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001440:	461a      	mov	r2, r3
 8001442:	2308      	movs	r3, #8
 8001444:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8001446:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001448:	6878      	ldr	r0, [r7, #4]
 800144a:	f000 ff61 	bl	8002310 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800144e:	693b      	ldr	r3, [r7, #16]
 8001450:	f003 0310 	and.w	r3, r3, #16
 8001454:	2b00      	cmp	r3, #0
 8001456:	d008      	beq.n	800146a <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001458:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800145a:	015a      	lsls	r2, r3, #5
 800145c:	69fb      	ldr	r3, [r7, #28]
 800145e:	4413      	add	r3, r2
 8001460:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001464:	461a      	mov	r2, r3
 8001466:	2310      	movs	r3, #16
 8001468:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800146a:	693b      	ldr	r3, [r7, #16]
 800146c:	f003 0302 	and.w	r3, r3, #2
 8001470:	2b00      	cmp	r3, #0
 8001472:	d030      	beq.n	80014d6 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8001474:	6a3b      	ldr	r3, [r7, #32]
 8001476:	695b      	ldr	r3, [r3, #20]
 8001478:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800147c:	2b80      	cmp	r3, #128	@ 0x80
 800147e:	d109      	bne.n	8001494 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8001480:	69fb      	ldr	r3, [r7, #28]
 8001482:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001486:	685b      	ldr	r3, [r3, #4]
 8001488:	69fa      	ldr	r2, [r7, #28]
 800148a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800148e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001492:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8001494:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001496:	4613      	mov	r3, r2
 8001498:	00db      	lsls	r3, r3, #3
 800149a:	4413      	add	r3, r2
 800149c:	009b      	lsls	r3, r3, #2
 800149e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80014a2:	687a      	ldr	r2, [r7, #4]
 80014a4:	4413      	add	r3, r2
 80014a6:	3304      	adds	r3, #4
 80014a8:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80014aa:	697b      	ldr	r3, [r7, #20]
 80014ac:	78db      	ldrb	r3, [r3, #3]
 80014ae:	2b01      	cmp	r3, #1
 80014b0:	d108      	bne.n	80014c4 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80014b2:	697b      	ldr	r3, [r7, #20]
 80014b4:	2200      	movs	r2, #0
 80014b6:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80014b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014ba:	b2db      	uxtb	r3, r3
 80014bc:	4619      	mov	r1, r3
 80014be:	6878      	ldr	r0, [r7, #4]
 80014c0:	f005 fce2 	bl	8006e88 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80014c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014c6:	015a      	lsls	r2, r3, #5
 80014c8:	69fb      	ldr	r3, [r7, #28]
 80014ca:	4413      	add	r3, r2
 80014cc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80014d0:	461a      	mov	r2, r3
 80014d2:	2302      	movs	r3, #2
 80014d4:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80014d6:	693b      	ldr	r3, [r7, #16]
 80014d8:	f003 0320 	and.w	r3, r3, #32
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d008      	beq.n	80014f2 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80014e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014e2:	015a      	lsls	r2, r3, #5
 80014e4:	69fb      	ldr	r3, [r7, #28]
 80014e6:	4413      	add	r3, r2
 80014e8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80014ec:	461a      	mov	r2, r3
 80014ee:	2320      	movs	r3, #32
 80014f0:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80014f2:	693b      	ldr	r3, [r7, #16]
 80014f4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d009      	beq.n	8001510 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80014fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014fe:	015a      	lsls	r2, r3, #5
 8001500:	69fb      	ldr	r3, [r7, #28]
 8001502:	4413      	add	r3, r2
 8001504:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001508:	461a      	mov	r2, r3
 800150a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800150e:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8001510:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001512:	3301      	adds	r3, #1
 8001514:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8001516:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001518:	085b      	lsrs	r3, r3, #1
 800151a:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800151c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800151e:	2b00      	cmp	r3, #0
 8001520:	f47f af62 	bne.w	80013e8 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	4618      	mov	r0, r3
 800152a:	f003 f9cd 	bl	80048c8 <USB_ReadInterrupts>
 800152e:	4603      	mov	r3, r0
 8001530:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001534:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8001538:	f040 80db 	bne.w	80016f2 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	4618      	mov	r0, r3
 8001542:	f003 f9ee 	bl	8004922 <USB_ReadDevAllInEpInterrupt>
 8001546:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8001548:	2300      	movs	r3, #0
 800154a:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 800154c:	e0cd      	b.n	80016ea <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800154e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001550:	f003 0301 	and.w	r3, r3, #1
 8001554:	2b00      	cmp	r3, #0
 8001556:	f000 80c2 	beq.w	80016de <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001560:	b2d2      	uxtb	r2, r2
 8001562:	4611      	mov	r1, r2
 8001564:	4618      	mov	r0, r3
 8001566:	f003 fa14 	bl	8004992 <USB_ReadDevInEPInterrupt>
 800156a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800156c:	693b      	ldr	r3, [r7, #16]
 800156e:	f003 0301 	and.w	r3, r3, #1
 8001572:	2b00      	cmp	r3, #0
 8001574:	d057      	beq.n	8001626 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001576:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001578:	f003 030f 	and.w	r3, r3, #15
 800157c:	2201      	movs	r2, #1
 800157e:	fa02 f303 	lsl.w	r3, r2, r3
 8001582:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001584:	69fb      	ldr	r3, [r7, #28]
 8001586:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800158a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	43db      	mvns	r3, r3
 8001590:	69f9      	ldr	r1, [r7, #28]
 8001592:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8001596:	4013      	ands	r3, r2
 8001598:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800159a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800159c:	015a      	lsls	r2, r3, #5
 800159e:	69fb      	ldr	r3, [r7, #28]
 80015a0:	4413      	add	r3, r2
 80015a2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80015a6:	461a      	mov	r2, r3
 80015a8:	2301      	movs	r3, #1
 80015aa:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	799b      	ldrb	r3, [r3, #6]
 80015b0:	2b01      	cmp	r3, #1
 80015b2:	d132      	bne.n	800161a <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80015b4:	6879      	ldr	r1, [r7, #4]
 80015b6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80015b8:	4613      	mov	r3, r2
 80015ba:	00db      	lsls	r3, r3, #3
 80015bc:	4413      	add	r3, r2
 80015be:	009b      	lsls	r3, r3, #2
 80015c0:	440b      	add	r3, r1
 80015c2:	3320      	adds	r3, #32
 80015c4:	6819      	ldr	r1, [r3, #0]
 80015c6:	6878      	ldr	r0, [r7, #4]
 80015c8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80015ca:	4613      	mov	r3, r2
 80015cc:	00db      	lsls	r3, r3, #3
 80015ce:	4413      	add	r3, r2
 80015d0:	009b      	lsls	r3, r3, #2
 80015d2:	4403      	add	r3, r0
 80015d4:	331c      	adds	r3, #28
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	4419      	add	r1, r3
 80015da:	6878      	ldr	r0, [r7, #4]
 80015dc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80015de:	4613      	mov	r3, r2
 80015e0:	00db      	lsls	r3, r3, #3
 80015e2:	4413      	add	r3, r2
 80015e4:	009b      	lsls	r3, r3, #2
 80015e6:	4403      	add	r3, r0
 80015e8:	3320      	adds	r3, #32
 80015ea:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80015ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d113      	bne.n	800161a <HAL_PCD_IRQHandler+0x3a2>
 80015f2:	6879      	ldr	r1, [r7, #4]
 80015f4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80015f6:	4613      	mov	r3, r2
 80015f8:	00db      	lsls	r3, r3, #3
 80015fa:	4413      	add	r3, r2
 80015fc:	009b      	lsls	r3, r3, #2
 80015fe:	440b      	add	r3, r1
 8001600:	3324      	adds	r3, #36	@ 0x24
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	2b00      	cmp	r3, #0
 8001606:	d108      	bne.n	800161a <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	6818      	ldr	r0, [r3, #0]
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8001612:	461a      	mov	r2, r3
 8001614:	2101      	movs	r1, #1
 8001616:	f003 fa1b 	bl	8004a50 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800161a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800161c:	b2db      	uxtb	r3, r3
 800161e:	4619      	mov	r1, r3
 8001620:	6878      	ldr	r0, [r7, #4]
 8001622:	f005 fbac 	bl	8006d7e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8001626:	693b      	ldr	r3, [r7, #16]
 8001628:	f003 0308 	and.w	r3, r3, #8
 800162c:	2b00      	cmp	r3, #0
 800162e:	d008      	beq.n	8001642 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001630:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001632:	015a      	lsls	r2, r3, #5
 8001634:	69fb      	ldr	r3, [r7, #28]
 8001636:	4413      	add	r3, r2
 8001638:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800163c:	461a      	mov	r2, r3
 800163e:	2308      	movs	r3, #8
 8001640:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8001642:	693b      	ldr	r3, [r7, #16]
 8001644:	f003 0310 	and.w	r3, r3, #16
 8001648:	2b00      	cmp	r3, #0
 800164a:	d008      	beq.n	800165e <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800164c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800164e:	015a      	lsls	r2, r3, #5
 8001650:	69fb      	ldr	r3, [r7, #28]
 8001652:	4413      	add	r3, r2
 8001654:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001658:	461a      	mov	r2, r3
 800165a:	2310      	movs	r3, #16
 800165c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800165e:	693b      	ldr	r3, [r7, #16]
 8001660:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001664:	2b00      	cmp	r3, #0
 8001666:	d008      	beq.n	800167a <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8001668:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800166a:	015a      	lsls	r2, r3, #5
 800166c:	69fb      	ldr	r3, [r7, #28]
 800166e:	4413      	add	r3, r2
 8001670:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001674:	461a      	mov	r2, r3
 8001676:	2340      	movs	r3, #64	@ 0x40
 8001678:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800167a:	693b      	ldr	r3, [r7, #16]
 800167c:	f003 0302 	and.w	r3, r3, #2
 8001680:	2b00      	cmp	r3, #0
 8001682:	d023      	beq.n	80016cc <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8001684:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001686:	6a38      	ldr	r0, [r7, #32]
 8001688:	f002 fa02 	bl	8003a90 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800168c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800168e:	4613      	mov	r3, r2
 8001690:	00db      	lsls	r3, r3, #3
 8001692:	4413      	add	r3, r2
 8001694:	009b      	lsls	r3, r3, #2
 8001696:	3310      	adds	r3, #16
 8001698:	687a      	ldr	r2, [r7, #4]
 800169a:	4413      	add	r3, r2
 800169c:	3304      	adds	r3, #4
 800169e:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80016a0:	697b      	ldr	r3, [r7, #20]
 80016a2:	78db      	ldrb	r3, [r3, #3]
 80016a4:	2b01      	cmp	r3, #1
 80016a6:	d108      	bne.n	80016ba <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80016a8:	697b      	ldr	r3, [r7, #20]
 80016aa:	2200      	movs	r2, #0
 80016ac:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80016ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016b0:	b2db      	uxtb	r3, r3
 80016b2:	4619      	mov	r1, r3
 80016b4:	6878      	ldr	r0, [r7, #4]
 80016b6:	f005 fbf9 	bl	8006eac <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80016ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016bc:	015a      	lsls	r2, r3, #5
 80016be:	69fb      	ldr	r3, [r7, #28]
 80016c0:	4413      	add	r3, r2
 80016c2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80016c6:	461a      	mov	r2, r3
 80016c8:	2302      	movs	r3, #2
 80016ca:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80016cc:	693b      	ldr	r3, [r7, #16]
 80016ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d003      	beq.n	80016de <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80016d6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80016d8:	6878      	ldr	r0, [r7, #4]
 80016da:	f000 fca5 	bl	8002028 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80016de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016e0:	3301      	adds	r3, #1
 80016e2:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80016e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80016e6:	085b      	lsrs	r3, r3, #1
 80016e8:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80016ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	f47f af2e 	bne.w	800154e <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	4618      	mov	r0, r3
 80016f8:	f003 f8e6 	bl	80048c8 <USB_ReadInterrupts>
 80016fc:	4603      	mov	r3, r0
 80016fe:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8001702:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8001706:	d122      	bne.n	800174e <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001708:	69fb      	ldr	r3, [r7, #28]
 800170a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800170e:	685b      	ldr	r3, [r3, #4]
 8001710:	69fa      	ldr	r2, [r7, #28]
 8001712:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001716:	f023 0301 	bic.w	r3, r3, #1
 800171a:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8001722:	2b01      	cmp	r3, #1
 8001724:	d108      	bne.n	8001738 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	2200      	movs	r2, #0
 800172a:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800172e:	2100      	movs	r1, #0
 8001730:	6878      	ldr	r0, [r7, #4]
 8001732:	f000 fe8b 	bl	800244c <HAL_PCDEx_LPM_Callback>
 8001736:	e002      	b.n	800173e <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8001738:	6878      	ldr	r0, [r7, #4]
 800173a:	f005 fb97 	bl	8006e6c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	695a      	ldr	r2, [r3, #20]
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 800174c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	4618      	mov	r0, r3
 8001754:	f003 f8b8 	bl	80048c8 <USB_ReadInterrupts>
 8001758:	4603      	mov	r3, r0
 800175a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800175e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001762:	d112      	bne.n	800178a <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8001764:	69fb      	ldr	r3, [r7, #28]
 8001766:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800176a:	689b      	ldr	r3, [r3, #8]
 800176c:	f003 0301 	and.w	r3, r3, #1
 8001770:	2b01      	cmp	r3, #1
 8001772:	d102      	bne.n	800177a <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001774:	6878      	ldr	r0, [r7, #4]
 8001776:	f005 fb53 	bl	8006e20 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	695a      	ldr	r2, [r3, #20]
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8001788:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	4618      	mov	r0, r3
 8001790:	f003 f89a 	bl	80048c8 <USB_ReadInterrupts>
 8001794:	4603      	mov	r3, r0
 8001796:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800179a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800179e:	f040 80b7 	bne.w	8001910 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80017a2:	69fb      	ldr	r3, [r7, #28]
 80017a4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80017a8:	685b      	ldr	r3, [r3, #4]
 80017aa:	69fa      	ldr	r2, [r7, #28]
 80017ac:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80017b0:	f023 0301 	bic.w	r3, r3, #1
 80017b4:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	2110      	movs	r1, #16
 80017bc:	4618      	mov	r0, r3
 80017be:	f002 f967 	bl	8003a90 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80017c2:	2300      	movs	r3, #0
 80017c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80017c6:	e046      	b.n	8001856 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80017c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80017ca:	015a      	lsls	r2, r3, #5
 80017cc:	69fb      	ldr	r3, [r7, #28]
 80017ce:	4413      	add	r3, r2
 80017d0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80017d4:	461a      	mov	r2, r3
 80017d6:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80017da:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80017dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80017de:	015a      	lsls	r2, r3, #5
 80017e0:	69fb      	ldr	r3, [r7, #28]
 80017e2:	4413      	add	r3, r2
 80017e4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80017ec:	0151      	lsls	r1, r2, #5
 80017ee:	69fa      	ldr	r2, [r7, #28]
 80017f0:	440a      	add	r2, r1
 80017f2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80017f6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80017fa:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80017fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80017fe:	015a      	lsls	r2, r3, #5
 8001800:	69fb      	ldr	r3, [r7, #28]
 8001802:	4413      	add	r3, r2
 8001804:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001808:	461a      	mov	r2, r3
 800180a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800180e:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8001810:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001812:	015a      	lsls	r2, r3, #5
 8001814:	69fb      	ldr	r3, [r7, #28]
 8001816:	4413      	add	r3, r2
 8001818:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001820:	0151      	lsls	r1, r2, #5
 8001822:	69fa      	ldr	r2, [r7, #28]
 8001824:	440a      	add	r2, r1
 8001826:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800182a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800182e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8001830:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001832:	015a      	lsls	r2, r3, #5
 8001834:	69fb      	ldr	r3, [r7, #28]
 8001836:	4413      	add	r3, r2
 8001838:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001840:	0151      	lsls	r1, r2, #5
 8001842:	69fa      	ldr	r2, [r7, #28]
 8001844:	440a      	add	r2, r1
 8001846:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800184a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800184e:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001850:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001852:	3301      	adds	r3, #1
 8001854:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	791b      	ldrb	r3, [r3, #4]
 800185a:	461a      	mov	r2, r3
 800185c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800185e:	4293      	cmp	r3, r2
 8001860:	d3b2      	bcc.n	80017c8 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8001862:	69fb      	ldr	r3, [r7, #28]
 8001864:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001868:	69db      	ldr	r3, [r3, #28]
 800186a:	69fa      	ldr	r2, [r7, #28]
 800186c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001870:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8001874:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	7bdb      	ldrb	r3, [r3, #15]
 800187a:	2b00      	cmp	r3, #0
 800187c:	d016      	beq.n	80018ac <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800187e:	69fb      	ldr	r3, [r7, #28]
 8001880:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001884:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001888:	69fa      	ldr	r2, [r7, #28]
 800188a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800188e:	f043 030b 	orr.w	r3, r3, #11
 8001892:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8001896:	69fb      	ldr	r3, [r7, #28]
 8001898:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800189c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800189e:	69fa      	ldr	r2, [r7, #28]
 80018a0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80018a4:	f043 030b 	orr.w	r3, r3, #11
 80018a8:	6453      	str	r3, [r2, #68]	@ 0x44
 80018aa:	e015      	b.n	80018d8 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80018ac:	69fb      	ldr	r3, [r7, #28]
 80018ae:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80018b2:	695b      	ldr	r3, [r3, #20]
 80018b4:	69fa      	ldr	r2, [r7, #28]
 80018b6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80018ba:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80018be:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 80018c2:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80018c4:	69fb      	ldr	r3, [r7, #28]
 80018c6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80018ca:	691b      	ldr	r3, [r3, #16]
 80018cc:	69fa      	ldr	r2, [r7, #28]
 80018ce:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80018d2:	f043 030b 	orr.w	r3, r3, #11
 80018d6:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80018d8:	69fb      	ldr	r3, [r7, #28]
 80018da:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	69fa      	ldr	r2, [r7, #28]
 80018e2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80018e6:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80018ea:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	6818      	ldr	r0, [r3, #0]
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80018fa:	461a      	mov	r2, r3
 80018fc:	f003 f8a8 	bl	8004a50 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	695a      	ldr	r2, [r3, #20]
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 800190e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	4618      	mov	r0, r3
 8001916:	f002 ffd7 	bl	80048c8 <USB_ReadInterrupts>
 800191a:	4603      	mov	r3, r0
 800191c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001920:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001924:	d123      	bne.n	800196e <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	4618      	mov	r0, r3
 800192c:	f003 f86d 	bl	8004a0a <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	4618      	mov	r0, r3
 8001936:	f002 f924 	bl	8003b82 <USB_GetDevSpeed>
 800193a:	4603      	mov	r3, r0
 800193c:	461a      	mov	r2, r3
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681c      	ldr	r4, [r3, #0]
 8001946:	f001 f9f1 	bl	8002d2c <HAL_RCC_GetHCLKFreq>
 800194a:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001950:	461a      	mov	r2, r3
 8001952:	4620      	mov	r0, r4
 8001954:	f001 fe28 	bl	80035a8 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8001958:	6878      	ldr	r0, [r7, #4]
 800195a:	f005 fa38 	bl	8006dce <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	695a      	ldr	r2, [r3, #20]
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 800196c:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	4618      	mov	r0, r3
 8001974:	f002 ffa8 	bl	80048c8 <USB_ReadInterrupts>
 8001978:	4603      	mov	r3, r0
 800197a:	f003 0308 	and.w	r3, r3, #8
 800197e:	2b08      	cmp	r3, #8
 8001980:	d10a      	bne.n	8001998 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8001982:	6878      	ldr	r0, [r7, #4]
 8001984:	f005 fa15 	bl	8006db2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	695a      	ldr	r2, [r3, #20]
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	f002 0208 	and.w	r2, r2, #8
 8001996:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	4618      	mov	r0, r3
 800199e:	f002 ff93 	bl	80048c8 <USB_ReadInterrupts>
 80019a2:	4603      	mov	r3, r0
 80019a4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80019a8:	2b80      	cmp	r3, #128	@ 0x80
 80019aa:	d123      	bne.n	80019f4 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80019ac:	6a3b      	ldr	r3, [r7, #32]
 80019ae:	699b      	ldr	r3, [r3, #24]
 80019b0:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80019b4:	6a3b      	ldr	r3, [r7, #32]
 80019b6:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80019b8:	2301      	movs	r3, #1
 80019ba:	627b      	str	r3, [r7, #36]	@ 0x24
 80019bc:	e014      	b.n	80019e8 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80019be:	6879      	ldr	r1, [r7, #4]
 80019c0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80019c2:	4613      	mov	r3, r2
 80019c4:	00db      	lsls	r3, r3, #3
 80019c6:	4413      	add	r3, r2
 80019c8:	009b      	lsls	r3, r3, #2
 80019ca:	440b      	add	r3, r1
 80019cc:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80019d0:	781b      	ldrb	r3, [r3, #0]
 80019d2:	2b01      	cmp	r3, #1
 80019d4:	d105      	bne.n	80019e2 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80019d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019d8:	b2db      	uxtb	r3, r3
 80019da:	4619      	mov	r1, r3
 80019dc:	6878      	ldr	r0, [r7, #4]
 80019de:	f000 faf2 	bl	8001fc6 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80019e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019e4:	3301      	adds	r3, #1
 80019e6:	627b      	str	r3, [r7, #36]	@ 0x24
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	791b      	ldrb	r3, [r3, #4]
 80019ec:	461a      	mov	r2, r3
 80019ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019f0:	4293      	cmp	r3, r2
 80019f2:	d3e4      	bcc.n	80019be <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	4618      	mov	r0, r3
 80019fa:	f002 ff65 	bl	80048c8 <USB_ReadInterrupts>
 80019fe:	4603      	mov	r3, r0
 8001a00:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001a04:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8001a08:	d13c      	bne.n	8001a84 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001a0a:	2301      	movs	r3, #1
 8001a0c:	627b      	str	r3, [r7, #36]	@ 0x24
 8001a0e:	e02b      	b.n	8001a68 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8001a10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a12:	015a      	lsls	r2, r3, #5
 8001a14:	69fb      	ldr	r3, [r7, #28]
 8001a16:	4413      	add	r3, r2
 8001a18:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001a20:	6879      	ldr	r1, [r7, #4]
 8001a22:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001a24:	4613      	mov	r3, r2
 8001a26:	00db      	lsls	r3, r3, #3
 8001a28:	4413      	add	r3, r2
 8001a2a:	009b      	lsls	r3, r3, #2
 8001a2c:	440b      	add	r3, r1
 8001a2e:	3318      	adds	r3, #24
 8001a30:	781b      	ldrb	r3, [r3, #0]
 8001a32:	2b01      	cmp	r3, #1
 8001a34:	d115      	bne.n	8001a62 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8001a36:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	da12      	bge.n	8001a62 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8001a3c:	6879      	ldr	r1, [r7, #4]
 8001a3e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001a40:	4613      	mov	r3, r2
 8001a42:	00db      	lsls	r3, r3, #3
 8001a44:	4413      	add	r3, r2
 8001a46:	009b      	lsls	r3, r3, #2
 8001a48:	440b      	add	r3, r1
 8001a4a:	3317      	adds	r3, #23
 8001a4c:	2201      	movs	r2, #1
 8001a4e:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8001a50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a52:	b2db      	uxtb	r3, r3
 8001a54:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001a58:	b2db      	uxtb	r3, r3
 8001a5a:	4619      	mov	r1, r3
 8001a5c:	6878      	ldr	r0, [r7, #4]
 8001a5e:	f000 fab2 	bl	8001fc6 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001a62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a64:	3301      	adds	r3, #1
 8001a66:	627b      	str	r3, [r7, #36]	@ 0x24
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	791b      	ldrb	r3, [r3, #4]
 8001a6c:	461a      	mov	r2, r3
 8001a6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a70:	4293      	cmp	r3, r2
 8001a72:	d3cd      	bcc.n	8001a10 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	695a      	ldr	r2, [r3, #20]
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8001a82:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	4618      	mov	r0, r3
 8001a8a:	f002 ff1d 	bl	80048c8 <USB_ReadInterrupts>
 8001a8e:	4603      	mov	r3, r0
 8001a90:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001a94:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8001a98:	d156      	bne.n	8001b48 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001a9a:	2301      	movs	r3, #1
 8001a9c:	627b      	str	r3, [r7, #36]	@ 0x24
 8001a9e:	e045      	b.n	8001b2c <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8001aa0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001aa2:	015a      	lsls	r2, r3, #5
 8001aa4:	69fb      	ldr	r3, [r7, #28]
 8001aa6:	4413      	add	r3, r2
 8001aa8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001ab0:	6879      	ldr	r1, [r7, #4]
 8001ab2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001ab4:	4613      	mov	r3, r2
 8001ab6:	00db      	lsls	r3, r3, #3
 8001ab8:	4413      	add	r3, r2
 8001aba:	009b      	lsls	r3, r3, #2
 8001abc:	440b      	add	r3, r1
 8001abe:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8001ac2:	781b      	ldrb	r3, [r3, #0]
 8001ac4:	2b01      	cmp	r3, #1
 8001ac6:	d12e      	bne.n	8001b26 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001ac8:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	da2b      	bge.n	8001b26 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8001ace:	69bb      	ldr	r3, [r7, #24]
 8001ad0:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8001ada:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001ade:	429a      	cmp	r2, r3
 8001ae0:	d121      	bne.n	8001b26 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8001ae2:	6879      	ldr	r1, [r7, #4]
 8001ae4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001ae6:	4613      	mov	r3, r2
 8001ae8:	00db      	lsls	r3, r3, #3
 8001aea:	4413      	add	r3, r2
 8001aec:	009b      	lsls	r3, r3, #2
 8001aee:	440b      	add	r3, r1
 8001af0:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8001af4:	2201      	movs	r2, #1
 8001af6:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8001af8:	6a3b      	ldr	r3, [r7, #32]
 8001afa:	699b      	ldr	r3, [r3, #24]
 8001afc:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8001b00:	6a3b      	ldr	r3, [r7, #32]
 8001b02:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8001b04:	6a3b      	ldr	r3, [r7, #32]
 8001b06:	695b      	ldr	r3, [r3, #20]
 8001b08:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d10a      	bne.n	8001b26 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8001b10:	69fb      	ldr	r3, [r7, #28]
 8001b12:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001b16:	685b      	ldr	r3, [r3, #4]
 8001b18:	69fa      	ldr	r2, [r7, #28]
 8001b1a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001b1e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001b22:	6053      	str	r3, [r2, #4]
            break;
 8001b24:	e008      	b.n	8001b38 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001b26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b28:	3301      	adds	r3, #1
 8001b2a:	627b      	str	r3, [r7, #36]	@ 0x24
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	791b      	ldrb	r3, [r3, #4]
 8001b30:	461a      	mov	r2, r3
 8001b32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b34:	4293      	cmp	r3, r2
 8001b36:	d3b3      	bcc.n	8001aa0 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	695a      	ldr	r2, [r3, #20]
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8001b46:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	f002 febb 	bl	80048c8 <USB_ReadInterrupts>
 8001b52:	4603      	mov	r3, r0
 8001b54:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8001b58:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001b5c:	d10a      	bne.n	8001b74 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8001b5e:	6878      	ldr	r0, [r7, #4]
 8001b60:	f005 f9b6 	bl	8006ed0 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	695a      	ldr	r2, [r3, #20]
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8001b72:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	4618      	mov	r0, r3
 8001b7a:	f002 fea5 	bl	80048c8 <USB_ReadInterrupts>
 8001b7e:	4603      	mov	r3, r0
 8001b80:	f003 0304 	and.w	r3, r3, #4
 8001b84:	2b04      	cmp	r3, #4
 8001b86:	d115      	bne.n	8001bb4 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	685b      	ldr	r3, [r3, #4]
 8001b8e:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8001b90:	69bb      	ldr	r3, [r7, #24]
 8001b92:	f003 0304 	and.w	r3, r3, #4
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d002      	beq.n	8001ba0 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8001b9a:	6878      	ldr	r0, [r7, #4]
 8001b9c:	f005 f9a6 	bl	8006eec <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	6859      	ldr	r1, [r3, #4]
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	69ba      	ldr	r2, [r7, #24]
 8001bac:	430a      	orrs	r2, r1
 8001bae:	605a      	str	r2, [r3, #4]
 8001bb0:	e000      	b.n	8001bb4 <HAL_PCD_IRQHandler+0x93c>
      return;
 8001bb2:	bf00      	nop
    }
  }
}
 8001bb4:	3734      	adds	r7, #52	@ 0x34
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bd90      	pop	{r4, r7, pc}

08001bba <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001bba:	b580      	push	{r7, lr}
 8001bbc:	b082      	sub	sp, #8
 8001bbe:	af00      	add	r7, sp, #0
 8001bc0:	6078      	str	r0, [r7, #4]
 8001bc2:	460b      	mov	r3, r1
 8001bc4:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001bcc:	2b01      	cmp	r3, #1
 8001bce:	d101      	bne.n	8001bd4 <HAL_PCD_SetAddress+0x1a>
 8001bd0:	2302      	movs	r3, #2
 8001bd2:	e012      	b.n	8001bfa <HAL_PCD_SetAddress+0x40>
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	2201      	movs	r2, #1
 8001bd8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	78fa      	ldrb	r2, [r7, #3]
 8001be0:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	78fa      	ldrb	r2, [r7, #3]
 8001be8:	4611      	mov	r1, r2
 8001bea:	4618      	mov	r0, r3
 8001bec:	f002 fe04 	bl	80047f8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8001bf8:	2300      	movs	r3, #0
}
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	3708      	adds	r7, #8
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	bd80      	pop	{r7, pc}

08001c02 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001c02:	b580      	push	{r7, lr}
 8001c04:	b084      	sub	sp, #16
 8001c06:	af00      	add	r7, sp, #0
 8001c08:	6078      	str	r0, [r7, #4]
 8001c0a:	4608      	mov	r0, r1
 8001c0c:	4611      	mov	r1, r2
 8001c0e:	461a      	mov	r2, r3
 8001c10:	4603      	mov	r3, r0
 8001c12:	70fb      	strb	r3, [r7, #3]
 8001c14:	460b      	mov	r3, r1
 8001c16:	803b      	strh	r3, [r7, #0]
 8001c18:	4613      	mov	r3, r2
 8001c1a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001c20:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	da0f      	bge.n	8001c48 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001c28:	78fb      	ldrb	r3, [r7, #3]
 8001c2a:	f003 020f 	and.w	r2, r3, #15
 8001c2e:	4613      	mov	r3, r2
 8001c30:	00db      	lsls	r3, r3, #3
 8001c32:	4413      	add	r3, r2
 8001c34:	009b      	lsls	r3, r3, #2
 8001c36:	3310      	adds	r3, #16
 8001c38:	687a      	ldr	r2, [r7, #4]
 8001c3a:	4413      	add	r3, r2
 8001c3c:	3304      	adds	r3, #4
 8001c3e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	2201      	movs	r2, #1
 8001c44:	705a      	strb	r2, [r3, #1]
 8001c46:	e00f      	b.n	8001c68 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001c48:	78fb      	ldrb	r3, [r7, #3]
 8001c4a:	f003 020f 	and.w	r2, r3, #15
 8001c4e:	4613      	mov	r3, r2
 8001c50:	00db      	lsls	r3, r3, #3
 8001c52:	4413      	add	r3, r2
 8001c54:	009b      	lsls	r3, r3, #2
 8001c56:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001c5a:	687a      	ldr	r2, [r7, #4]
 8001c5c:	4413      	add	r3, r2
 8001c5e:	3304      	adds	r3, #4
 8001c60:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	2200      	movs	r2, #0
 8001c66:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001c68:	78fb      	ldrb	r3, [r7, #3]
 8001c6a:	f003 030f 	and.w	r3, r3, #15
 8001c6e:	b2da      	uxtb	r2, r3
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8001c74:	883b      	ldrh	r3, [r7, #0]
 8001c76:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	78ba      	ldrb	r2, [r7, #2]
 8001c82:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	785b      	ldrb	r3, [r3, #1]
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d004      	beq.n	8001c96 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	781b      	ldrb	r3, [r3, #0]
 8001c90:	461a      	mov	r2, r3
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001c96:	78bb      	ldrb	r3, [r7, #2]
 8001c98:	2b02      	cmp	r3, #2
 8001c9a:	d102      	bne.n	8001ca2 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001ca8:	2b01      	cmp	r3, #1
 8001caa:	d101      	bne.n	8001cb0 <HAL_PCD_EP_Open+0xae>
 8001cac:	2302      	movs	r3, #2
 8001cae:	e00e      	b.n	8001cce <HAL_PCD_EP_Open+0xcc>
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	2201      	movs	r2, #1
 8001cb4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	68f9      	ldr	r1, [r7, #12]
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	f001 ff84 	bl	8003bcc <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8001ccc:	7afb      	ldrb	r3, [r7, #11]
}
 8001cce:	4618      	mov	r0, r3
 8001cd0:	3710      	adds	r7, #16
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	bd80      	pop	{r7, pc}

08001cd6 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001cd6:	b580      	push	{r7, lr}
 8001cd8:	b084      	sub	sp, #16
 8001cda:	af00      	add	r7, sp, #0
 8001cdc:	6078      	str	r0, [r7, #4]
 8001cde:	460b      	mov	r3, r1
 8001ce0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001ce2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	da0f      	bge.n	8001d0a <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001cea:	78fb      	ldrb	r3, [r7, #3]
 8001cec:	f003 020f 	and.w	r2, r3, #15
 8001cf0:	4613      	mov	r3, r2
 8001cf2:	00db      	lsls	r3, r3, #3
 8001cf4:	4413      	add	r3, r2
 8001cf6:	009b      	lsls	r3, r3, #2
 8001cf8:	3310      	adds	r3, #16
 8001cfa:	687a      	ldr	r2, [r7, #4]
 8001cfc:	4413      	add	r3, r2
 8001cfe:	3304      	adds	r3, #4
 8001d00:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	2201      	movs	r2, #1
 8001d06:	705a      	strb	r2, [r3, #1]
 8001d08:	e00f      	b.n	8001d2a <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001d0a:	78fb      	ldrb	r3, [r7, #3]
 8001d0c:	f003 020f 	and.w	r2, r3, #15
 8001d10:	4613      	mov	r3, r2
 8001d12:	00db      	lsls	r3, r3, #3
 8001d14:	4413      	add	r3, r2
 8001d16:	009b      	lsls	r3, r3, #2
 8001d18:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001d1c:	687a      	ldr	r2, [r7, #4]
 8001d1e:	4413      	add	r3, r2
 8001d20:	3304      	adds	r3, #4
 8001d22:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	2200      	movs	r2, #0
 8001d28:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8001d2a:	78fb      	ldrb	r3, [r7, #3]
 8001d2c:	f003 030f 	and.w	r3, r3, #15
 8001d30:	b2da      	uxtb	r2, r3
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001d3c:	2b01      	cmp	r3, #1
 8001d3e:	d101      	bne.n	8001d44 <HAL_PCD_EP_Close+0x6e>
 8001d40:	2302      	movs	r3, #2
 8001d42:	e00e      	b.n	8001d62 <HAL_PCD_EP_Close+0x8c>
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	2201      	movs	r2, #1
 8001d48:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	68f9      	ldr	r1, [r7, #12]
 8001d52:	4618      	mov	r0, r3
 8001d54:	f001 ffc2 	bl	8003cdc <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8001d60:	2300      	movs	r3, #0
}
 8001d62:	4618      	mov	r0, r3
 8001d64:	3710      	adds	r7, #16
 8001d66:	46bd      	mov	sp, r7
 8001d68:	bd80      	pop	{r7, pc}

08001d6a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001d6a:	b580      	push	{r7, lr}
 8001d6c:	b086      	sub	sp, #24
 8001d6e:	af00      	add	r7, sp, #0
 8001d70:	60f8      	str	r0, [r7, #12]
 8001d72:	607a      	str	r2, [r7, #4]
 8001d74:	603b      	str	r3, [r7, #0]
 8001d76:	460b      	mov	r3, r1
 8001d78:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001d7a:	7afb      	ldrb	r3, [r7, #11]
 8001d7c:	f003 020f 	and.w	r2, r3, #15
 8001d80:	4613      	mov	r3, r2
 8001d82:	00db      	lsls	r3, r3, #3
 8001d84:	4413      	add	r3, r2
 8001d86:	009b      	lsls	r3, r3, #2
 8001d88:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001d8c:	68fa      	ldr	r2, [r7, #12]
 8001d8e:	4413      	add	r3, r2
 8001d90:	3304      	adds	r3, #4
 8001d92:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001d94:	697b      	ldr	r3, [r7, #20]
 8001d96:	687a      	ldr	r2, [r7, #4]
 8001d98:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001d9a:	697b      	ldr	r3, [r7, #20]
 8001d9c:	683a      	ldr	r2, [r7, #0]
 8001d9e:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8001da0:	697b      	ldr	r3, [r7, #20]
 8001da2:	2200      	movs	r2, #0
 8001da4:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8001da6:	697b      	ldr	r3, [r7, #20]
 8001da8:	2200      	movs	r2, #0
 8001daa:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001dac:	7afb      	ldrb	r3, [r7, #11]
 8001dae:	f003 030f 	and.w	r3, r3, #15
 8001db2:	b2da      	uxtb	r2, r3
 8001db4:	697b      	ldr	r3, [r7, #20]
 8001db6:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	799b      	ldrb	r3, [r3, #6]
 8001dbc:	2b01      	cmp	r3, #1
 8001dbe:	d102      	bne.n	8001dc6 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001dc0:	687a      	ldr	r2, [r7, #4]
 8001dc2:	697b      	ldr	r3, [r7, #20]
 8001dc4:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	6818      	ldr	r0, [r3, #0]
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	799b      	ldrb	r3, [r3, #6]
 8001dce:	461a      	mov	r2, r3
 8001dd0:	6979      	ldr	r1, [r7, #20]
 8001dd2:	f002 f85f 	bl	8003e94 <USB_EPStartXfer>

  return HAL_OK;
 8001dd6:	2300      	movs	r3, #0
}
 8001dd8:	4618      	mov	r0, r3
 8001dda:	3718      	adds	r7, #24
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	bd80      	pop	{r7, pc}

08001de0 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b086      	sub	sp, #24
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	60f8      	str	r0, [r7, #12]
 8001de8:	607a      	str	r2, [r7, #4]
 8001dea:	603b      	str	r3, [r7, #0]
 8001dec:	460b      	mov	r3, r1
 8001dee:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001df0:	7afb      	ldrb	r3, [r7, #11]
 8001df2:	f003 020f 	and.w	r2, r3, #15
 8001df6:	4613      	mov	r3, r2
 8001df8:	00db      	lsls	r3, r3, #3
 8001dfa:	4413      	add	r3, r2
 8001dfc:	009b      	lsls	r3, r3, #2
 8001dfe:	3310      	adds	r3, #16
 8001e00:	68fa      	ldr	r2, [r7, #12]
 8001e02:	4413      	add	r3, r2
 8001e04:	3304      	adds	r3, #4
 8001e06:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001e08:	697b      	ldr	r3, [r7, #20]
 8001e0a:	687a      	ldr	r2, [r7, #4]
 8001e0c:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001e0e:	697b      	ldr	r3, [r7, #20]
 8001e10:	683a      	ldr	r2, [r7, #0]
 8001e12:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8001e14:	697b      	ldr	r3, [r7, #20]
 8001e16:	2200      	movs	r2, #0
 8001e18:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8001e1a:	697b      	ldr	r3, [r7, #20]
 8001e1c:	2201      	movs	r2, #1
 8001e1e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001e20:	7afb      	ldrb	r3, [r7, #11]
 8001e22:	f003 030f 	and.w	r3, r3, #15
 8001e26:	b2da      	uxtb	r2, r3
 8001e28:	697b      	ldr	r3, [r7, #20]
 8001e2a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	799b      	ldrb	r3, [r3, #6]
 8001e30:	2b01      	cmp	r3, #1
 8001e32:	d102      	bne.n	8001e3a <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001e34:	687a      	ldr	r2, [r7, #4]
 8001e36:	697b      	ldr	r3, [r7, #20]
 8001e38:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	6818      	ldr	r0, [r3, #0]
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	799b      	ldrb	r3, [r3, #6]
 8001e42:	461a      	mov	r2, r3
 8001e44:	6979      	ldr	r1, [r7, #20]
 8001e46:	f002 f825 	bl	8003e94 <USB_EPStartXfer>

  return HAL_OK;
 8001e4a:	2300      	movs	r3, #0
}
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	3718      	adds	r7, #24
 8001e50:	46bd      	mov	sp, r7
 8001e52:	bd80      	pop	{r7, pc}

08001e54 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b084      	sub	sp, #16
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
 8001e5c:	460b      	mov	r3, r1
 8001e5e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001e60:	78fb      	ldrb	r3, [r7, #3]
 8001e62:	f003 030f 	and.w	r3, r3, #15
 8001e66:	687a      	ldr	r2, [r7, #4]
 8001e68:	7912      	ldrb	r2, [r2, #4]
 8001e6a:	4293      	cmp	r3, r2
 8001e6c:	d901      	bls.n	8001e72 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001e6e:	2301      	movs	r3, #1
 8001e70:	e04f      	b.n	8001f12 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001e72:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	da0f      	bge.n	8001e9a <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001e7a:	78fb      	ldrb	r3, [r7, #3]
 8001e7c:	f003 020f 	and.w	r2, r3, #15
 8001e80:	4613      	mov	r3, r2
 8001e82:	00db      	lsls	r3, r3, #3
 8001e84:	4413      	add	r3, r2
 8001e86:	009b      	lsls	r3, r3, #2
 8001e88:	3310      	adds	r3, #16
 8001e8a:	687a      	ldr	r2, [r7, #4]
 8001e8c:	4413      	add	r3, r2
 8001e8e:	3304      	adds	r3, #4
 8001e90:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	2201      	movs	r2, #1
 8001e96:	705a      	strb	r2, [r3, #1]
 8001e98:	e00d      	b.n	8001eb6 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001e9a:	78fa      	ldrb	r2, [r7, #3]
 8001e9c:	4613      	mov	r3, r2
 8001e9e:	00db      	lsls	r3, r3, #3
 8001ea0:	4413      	add	r3, r2
 8001ea2:	009b      	lsls	r3, r3, #2
 8001ea4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001ea8:	687a      	ldr	r2, [r7, #4]
 8001eaa:	4413      	add	r3, r2
 8001eac:	3304      	adds	r3, #4
 8001eae:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	2201      	movs	r2, #1
 8001eba:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001ebc:	78fb      	ldrb	r3, [r7, #3]
 8001ebe:	f003 030f 	and.w	r3, r3, #15
 8001ec2:	b2da      	uxtb	r2, r3
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001ece:	2b01      	cmp	r3, #1
 8001ed0:	d101      	bne.n	8001ed6 <HAL_PCD_EP_SetStall+0x82>
 8001ed2:	2302      	movs	r3, #2
 8001ed4:	e01d      	b.n	8001f12 <HAL_PCD_EP_SetStall+0xbe>
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	2201      	movs	r2, #1
 8001eda:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	68f9      	ldr	r1, [r7, #12]
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	f002 fbb3 	bl	8004650 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001eea:	78fb      	ldrb	r3, [r7, #3]
 8001eec:	f003 030f 	and.w	r3, r3, #15
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d109      	bne.n	8001f08 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	6818      	ldr	r0, [r3, #0]
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	7999      	ldrb	r1, [r3, #6]
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8001f02:	461a      	mov	r2, r3
 8001f04:	f002 fda4 	bl	8004a50 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8001f10:	2300      	movs	r3, #0
}
 8001f12:	4618      	mov	r0, r3
 8001f14:	3710      	adds	r7, #16
 8001f16:	46bd      	mov	sp, r7
 8001f18:	bd80      	pop	{r7, pc}

08001f1a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001f1a:	b580      	push	{r7, lr}
 8001f1c:	b084      	sub	sp, #16
 8001f1e:	af00      	add	r7, sp, #0
 8001f20:	6078      	str	r0, [r7, #4]
 8001f22:	460b      	mov	r3, r1
 8001f24:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001f26:	78fb      	ldrb	r3, [r7, #3]
 8001f28:	f003 030f 	and.w	r3, r3, #15
 8001f2c:	687a      	ldr	r2, [r7, #4]
 8001f2e:	7912      	ldrb	r2, [r2, #4]
 8001f30:	4293      	cmp	r3, r2
 8001f32:	d901      	bls.n	8001f38 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001f34:	2301      	movs	r3, #1
 8001f36:	e042      	b.n	8001fbe <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001f38:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	da0f      	bge.n	8001f60 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001f40:	78fb      	ldrb	r3, [r7, #3]
 8001f42:	f003 020f 	and.w	r2, r3, #15
 8001f46:	4613      	mov	r3, r2
 8001f48:	00db      	lsls	r3, r3, #3
 8001f4a:	4413      	add	r3, r2
 8001f4c:	009b      	lsls	r3, r3, #2
 8001f4e:	3310      	adds	r3, #16
 8001f50:	687a      	ldr	r2, [r7, #4]
 8001f52:	4413      	add	r3, r2
 8001f54:	3304      	adds	r3, #4
 8001f56:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	2201      	movs	r2, #1
 8001f5c:	705a      	strb	r2, [r3, #1]
 8001f5e:	e00f      	b.n	8001f80 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001f60:	78fb      	ldrb	r3, [r7, #3]
 8001f62:	f003 020f 	and.w	r2, r3, #15
 8001f66:	4613      	mov	r3, r2
 8001f68:	00db      	lsls	r3, r3, #3
 8001f6a:	4413      	add	r3, r2
 8001f6c:	009b      	lsls	r3, r3, #2
 8001f6e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001f72:	687a      	ldr	r2, [r7, #4]
 8001f74:	4413      	add	r3, r2
 8001f76:	3304      	adds	r3, #4
 8001f78:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	2200      	movs	r2, #0
 8001f84:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001f86:	78fb      	ldrb	r3, [r7, #3]
 8001f88:	f003 030f 	and.w	r3, r3, #15
 8001f8c:	b2da      	uxtb	r2, r3
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001f98:	2b01      	cmp	r3, #1
 8001f9a:	d101      	bne.n	8001fa0 <HAL_PCD_EP_ClrStall+0x86>
 8001f9c:	2302      	movs	r3, #2
 8001f9e:	e00e      	b.n	8001fbe <HAL_PCD_EP_ClrStall+0xa4>
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	2201      	movs	r2, #1
 8001fa4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	68f9      	ldr	r1, [r7, #12]
 8001fae:	4618      	mov	r0, r3
 8001fb0:	f002 fbbc 	bl	800472c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8001fbc:	2300      	movs	r3, #0
}
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	3710      	adds	r7, #16
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	bd80      	pop	{r7, pc}

08001fc6 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001fc6:	b580      	push	{r7, lr}
 8001fc8:	b084      	sub	sp, #16
 8001fca:	af00      	add	r7, sp, #0
 8001fcc:	6078      	str	r0, [r7, #4]
 8001fce:	460b      	mov	r3, r1
 8001fd0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8001fd2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	da0c      	bge.n	8001ff4 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001fda:	78fb      	ldrb	r3, [r7, #3]
 8001fdc:	f003 020f 	and.w	r2, r3, #15
 8001fe0:	4613      	mov	r3, r2
 8001fe2:	00db      	lsls	r3, r3, #3
 8001fe4:	4413      	add	r3, r2
 8001fe6:	009b      	lsls	r3, r3, #2
 8001fe8:	3310      	adds	r3, #16
 8001fea:	687a      	ldr	r2, [r7, #4]
 8001fec:	4413      	add	r3, r2
 8001fee:	3304      	adds	r3, #4
 8001ff0:	60fb      	str	r3, [r7, #12]
 8001ff2:	e00c      	b.n	800200e <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001ff4:	78fb      	ldrb	r3, [r7, #3]
 8001ff6:	f003 020f 	and.w	r2, r3, #15
 8001ffa:	4613      	mov	r3, r2
 8001ffc:	00db      	lsls	r3, r3, #3
 8001ffe:	4413      	add	r3, r2
 8002000:	009b      	lsls	r3, r3, #2
 8002002:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002006:	687a      	ldr	r2, [r7, #4]
 8002008:	4413      	add	r3, r2
 800200a:	3304      	adds	r3, #4
 800200c:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	68f9      	ldr	r1, [r7, #12]
 8002014:	4618      	mov	r0, r3
 8002016:	f002 f9db 	bl	80043d0 <USB_EPStopXfer>
 800201a:	4603      	mov	r3, r0
 800201c:	72fb      	strb	r3, [r7, #11]

  return ret;
 800201e:	7afb      	ldrb	r3, [r7, #11]
}
 8002020:	4618      	mov	r0, r3
 8002022:	3710      	adds	r7, #16
 8002024:	46bd      	mov	sp, r7
 8002026:	bd80      	pop	{r7, pc}

08002028 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	b08a      	sub	sp, #40	@ 0x28
 800202c:	af02      	add	r7, sp, #8
 800202e:	6078      	str	r0, [r7, #4]
 8002030:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002038:	697b      	ldr	r3, [r7, #20]
 800203a:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800203c:	683a      	ldr	r2, [r7, #0]
 800203e:	4613      	mov	r3, r2
 8002040:	00db      	lsls	r3, r3, #3
 8002042:	4413      	add	r3, r2
 8002044:	009b      	lsls	r3, r3, #2
 8002046:	3310      	adds	r3, #16
 8002048:	687a      	ldr	r2, [r7, #4]
 800204a:	4413      	add	r3, r2
 800204c:	3304      	adds	r3, #4
 800204e:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	695a      	ldr	r2, [r3, #20]
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	691b      	ldr	r3, [r3, #16]
 8002058:	429a      	cmp	r2, r3
 800205a:	d901      	bls.n	8002060 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800205c:	2301      	movs	r3, #1
 800205e:	e06b      	b.n	8002138 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	691a      	ldr	r2, [r3, #16]
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	695b      	ldr	r3, [r3, #20]
 8002068:	1ad3      	subs	r3, r2, r3
 800206a:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	689b      	ldr	r3, [r3, #8]
 8002070:	69fa      	ldr	r2, [r7, #28]
 8002072:	429a      	cmp	r2, r3
 8002074:	d902      	bls.n	800207c <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	689b      	ldr	r3, [r3, #8]
 800207a:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800207c:	69fb      	ldr	r3, [r7, #28]
 800207e:	3303      	adds	r3, #3
 8002080:	089b      	lsrs	r3, r3, #2
 8002082:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002084:	e02a      	b.n	80020dc <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	691a      	ldr	r2, [r3, #16]
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	695b      	ldr	r3, [r3, #20]
 800208e:	1ad3      	subs	r3, r2, r3
 8002090:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	689b      	ldr	r3, [r3, #8]
 8002096:	69fa      	ldr	r2, [r7, #28]
 8002098:	429a      	cmp	r2, r3
 800209a:	d902      	bls.n	80020a2 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	689b      	ldr	r3, [r3, #8]
 80020a0:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80020a2:	69fb      	ldr	r3, [r7, #28]
 80020a4:	3303      	adds	r3, #3
 80020a6:	089b      	lsrs	r3, r3, #2
 80020a8:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	68d9      	ldr	r1, [r3, #12]
 80020ae:	683b      	ldr	r3, [r7, #0]
 80020b0:	b2da      	uxtb	r2, r3
 80020b2:	69fb      	ldr	r3, [r7, #28]
 80020b4:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80020ba:	9300      	str	r3, [sp, #0]
 80020bc:	4603      	mov	r3, r0
 80020be:	6978      	ldr	r0, [r7, #20]
 80020c0:	f002 fa30 	bl	8004524 <USB_WritePacket>

    ep->xfer_buff  += len;
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	68da      	ldr	r2, [r3, #12]
 80020c8:	69fb      	ldr	r3, [r7, #28]
 80020ca:	441a      	add	r2, r3
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	695a      	ldr	r2, [r3, #20]
 80020d4:	69fb      	ldr	r3, [r7, #28]
 80020d6:	441a      	add	r2, r3
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80020dc:	683b      	ldr	r3, [r7, #0]
 80020de:	015a      	lsls	r2, r3, #5
 80020e0:	693b      	ldr	r3, [r7, #16]
 80020e2:	4413      	add	r3, r2
 80020e4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80020e8:	699b      	ldr	r3, [r3, #24]
 80020ea:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80020ec:	69ba      	ldr	r2, [r7, #24]
 80020ee:	429a      	cmp	r2, r3
 80020f0:	d809      	bhi.n	8002106 <PCD_WriteEmptyTxFifo+0xde>
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	695a      	ldr	r2, [r3, #20]
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80020fa:	429a      	cmp	r2, r3
 80020fc:	d203      	bcs.n	8002106 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	691b      	ldr	r3, [r3, #16]
 8002102:	2b00      	cmp	r3, #0
 8002104:	d1bf      	bne.n	8002086 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	691a      	ldr	r2, [r3, #16]
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	695b      	ldr	r3, [r3, #20]
 800210e:	429a      	cmp	r2, r3
 8002110:	d811      	bhi.n	8002136 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002112:	683b      	ldr	r3, [r7, #0]
 8002114:	f003 030f 	and.w	r3, r3, #15
 8002118:	2201      	movs	r2, #1
 800211a:	fa02 f303 	lsl.w	r3, r2, r3
 800211e:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002120:	693b      	ldr	r3, [r7, #16]
 8002122:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002126:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002128:	68bb      	ldr	r3, [r7, #8]
 800212a:	43db      	mvns	r3, r3
 800212c:	6939      	ldr	r1, [r7, #16]
 800212e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8002132:	4013      	ands	r3, r2
 8002134:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8002136:	2300      	movs	r3, #0
}
 8002138:	4618      	mov	r0, r3
 800213a:	3720      	adds	r7, #32
 800213c:	46bd      	mov	sp, r7
 800213e:	bd80      	pop	{r7, pc}

08002140 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	b088      	sub	sp, #32
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
 8002148:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002150:	69fb      	ldr	r3, [r7, #28]
 8002152:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8002154:	69fb      	ldr	r3, [r7, #28]
 8002156:	333c      	adds	r3, #60	@ 0x3c
 8002158:	3304      	adds	r3, #4
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800215e:	683b      	ldr	r3, [r7, #0]
 8002160:	015a      	lsls	r2, r3, #5
 8002162:	69bb      	ldr	r3, [r7, #24]
 8002164:	4413      	add	r3, r2
 8002166:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800216a:	689b      	ldr	r3, [r3, #8]
 800216c:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	799b      	ldrb	r3, [r3, #6]
 8002172:	2b01      	cmp	r3, #1
 8002174:	d17b      	bne.n	800226e <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8002176:	693b      	ldr	r3, [r7, #16]
 8002178:	f003 0308 	and.w	r3, r3, #8
 800217c:	2b00      	cmp	r3, #0
 800217e:	d015      	beq.n	80021ac <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002180:	697b      	ldr	r3, [r7, #20]
 8002182:	4a61      	ldr	r2, [pc, #388]	@ (8002308 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002184:	4293      	cmp	r3, r2
 8002186:	f240 80b9 	bls.w	80022fc <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800218a:	693b      	ldr	r3, [r7, #16]
 800218c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002190:	2b00      	cmp	r3, #0
 8002192:	f000 80b3 	beq.w	80022fc <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002196:	683b      	ldr	r3, [r7, #0]
 8002198:	015a      	lsls	r2, r3, #5
 800219a:	69bb      	ldr	r3, [r7, #24]
 800219c:	4413      	add	r3, r2
 800219e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80021a2:	461a      	mov	r2, r3
 80021a4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80021a8:	6093      	str	r3, [r2, #8]
 80021aa:	e0a7      	b.n	80022fc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80021ac:	693b      	ldr	r3, [r7, #16]
 80021ae:	f003 0320 	and.w	r3, r3, #32
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d009      	beq.n	80021ca <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80021b6:	683b      	ldr	r3, [r7, #0]
 80021b8:	015a      	lsls	r2, r3, #5
 80021ba:	69bb      	ldr	r3, [r7, #24]
 80021bc:	4413      	add	r3, r2
 80021be:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80021c2:	461a      	mov	r2, r3
 80021c4:	2320      	movs	r3, #32
 80021c6:	6093      	str	r3, [r2, #8]
 80021c8:	e098      	b.n	80022fc <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80021ca:	693b      	ldr	r3, [r7, #16]
 80021cc:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	f040 8093 	bne.w	80022fc <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80021d6:	697b      	ldr	r3, [r7, #20]
 80021d8:	4a4b      	ldr	r2, [pc, #300]	@ (8002308 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80021da:	4293      	cmp	r3, r2
 80021dc:	d90f      	bls.n	80021fe <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80021de:	693b      	ldr	r3, [r7, #16]
 80021e0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d00a      	beq.n	80021fe <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80021e8:	683b      	ldr	r3, [r7, #0]
 80021ea:	015a      	lsls	r2, r3, #5
 80021ec:	69bb      	ldr	r3, [r7, #24]
 80021ee:	4413      	add	r3, r2
 80021f0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80021f4:	461a      	mov	r2, r3
 80021f6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80021fa:	6093      	str	r3, [r2, #8]
 80021fc:	e07e      	b.n	80022fc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80021fe:	683a      	ldr	r2, [r7, #0]
 8002200:	4613      	mov	r3, r2
 8002202:	00db      	lsls	r3, r3, #3
 8002204:	4413      	add	r3, r2
 8002206:	009b      	lsls	r3, r3, #2
 8002208:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800220c:	687a      	ldr	r2, [r7, #4]
 800220e:	4413      	add	r3, r2
 8002210:	3304      	adds	r3, #4
 8002212:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	6a1a      	ldr	r2, [r3, #32]
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	0159      	lsls	r1, r3, #5
 800221c:	69bb      	ldr	r3, [r7, #24]
 800221e:	440b      	add	r3, r1
 8002220:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002224:	691b      	ldr	r3, [r3, #16]
 8002226:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800222a:	1ad2      	subs	r2, r2, r3
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8002230:	683b      	ldr	r3, [r7, #0]
 8002232:	2b00      	cmp	r3, #0
 8002234:	d114      	bne.n	8002260 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	691b      	ldr	r3, [r3, #16]
 800223a:	2b00      	cmp	r3, #0
 800223c:	d109      	bne.n	8002252 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	6818      	ldr	r0, [r3, #0]
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002248:	461a      	mov	r2, r3
 800224a:	2101      	movs	r1, #1
 800224c:	f002 fc00 	bl	8004a50 <USB_EP0_OutStart>
 8002250:	e006      	b.n	8002260 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	68da      	ldr	r2, [r3, #12]
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	695b      	ldr	r3, [r3, #20]
 800225a:	441a      	add	r2, r3
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002260:	683b      	ldr	r3, [r7, #0]
 8002262:	b2db      	uxtb	r3, r3
 8002264:	4619      	mov	r1, r3
 8002266:	6878      	ldr	r0, [r7, #4]
 8002268:	f004 fd6e 	bl	8006d48 <HAL_PCD_DataOutStageCallback>
 800226c:	e046      	b.n	80022fc <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800226e:	697b      	ldr	r3, [r7, #20]
 8002270:	4a26      	ldr	r2, [pc, #152]	@ (800230c <PCD_EP_OutXfrComplete_int+0x1cc>)
 8002272:	4293      	cmp	r3, r2
 8002274:	d124      	bne.n	80022c0 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002276:	693b      	ldr	r3, [r7, #16]
 8002278:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800227c:	2b00      	cmp	r3, #0
 800227e:	d00a      	beq.n	8002296 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002280:	683b      	ldr	r3, [r7, #0]
 8002282:	015a      	lsls	r2, r3, #5
 8002284:	69bb      	ldr	r3, [r7, #24]
 8002286:	4413      	add	r3, r2
 8002288:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800228c:	461a      	mov	r2, r3
 800228e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002292:	6093      	str	r3, [r2, #8]
 8002294:	e032      	b.n	80022fc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002296:	693b      	ldr	r3, [r7, #16]
 8002298:	f003 0320 	and.w	r3, r3, #32
 800229c:	2b00      	cmp	r3, #0
 800229e:	d008      	beq.n	80022b2 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80022a0:	683b      	ldr	r3, [r7, #0]
 80022a2:	015a      	lsls	r2, r3, #5
 80022a4:	69bb      	ldr	r3, [r7, #24]
 80022a6:	4413      	add	r3, r2
 80022a8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80022ac:	461a      	mov	r2, r3
 80022ae:	2320      	movs	r3, #32
 80022b0:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80022b2:	683b      	ldr	r3, [r7, #0]
 80022b4:	b2db      	uxtb	r3, r3
 80022b6:	4619      	mov	r1, r3
 80022b8:	6878      	ldr	r0, [r7, #4]
 80022ba:	f004 fd45 	bl	8006d48 <HAL_PCD_DataOutStageCallback>
 80022be:	e01d      	b.n	80022fc <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d114      	bne.n	80022f0 <PCD_EP_OutXfrComplete_int+0x1b0>
 80022c6:	6879      	ldr	r1, [r7, #4]
 80022c8:	683a      	ldr	r2, [r7, #0]
 80022ca:	4613      	mov	r3, r2
 80022cc:	00db      	lsls	r3, r3, #3
 80022ce:	4413      	add	r3, r2
 80022d0:	009b      	lsls	r3, r3, #2
 80022d2:	440b      	add	r3, r1
 80022d4:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d108      	bne.n	80022f0 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	6818      	ldr	r0, [r3, #0]
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80022e8:	461a      	mov	r2, r3
 80022ea:	2100      	movs	r1, #0
 80022ec:	f002 fbb0 	bl	8004a50 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80022f0:	683b      	ldr	r3, [r7, #0]
 80022f2:	b2db      	uxtb	r3, r3
 80022f4:	4619      	mov	r1, r3
 80022f6:	6878      	ldr	r0, [r7, #4]
 80022f8:	f004 fd26 	bl	8006d48 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80022fc:	2300      	movs	r3, #0
}
 80022fe:	4618      	mov	r0, r3
 8002300:	3720      	adds	r7, #32
 8002302:	46bd      	mov	sp, r7
 8002304:	bd80      	pop	{r7, pc}
 8002306:	bf00      	nop
 8002308:	4f54300a 	.word	0x4f54300a
 800230c:	4f54310a 	.word	0x4f54310a

08002310 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	b086      	sub	sp, #24
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
 8002318:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002320:	697b      	ldr	r3, [r7, #20]
 8002322:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8002324:	697b      	ldr	r3, [r7, #20]
 8002326:	333c      	adds	r3, #60	@ 0x3c
 8002328:	3304      	adds	r3, #4
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800232e:	683b      	ldr	r3, [r7, #0]
 8002330:	015a      	lsls	r2, r3, #5
 8002332:	693b      	ldr	r3, [r7, #16]
 8002334:	4413      	add	r3, r2
 8002336:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800233a:	689b      	ldr	r3, [r3, #8]
 800233c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	4a15      	ldr	r2, [pc, #84]	@ (8002398 <PCD_EP_OutSetupPacket_int+0x88>)
 8002342:	4293      	cmp	r3, r2
 8002344:	d90e      	bls.n	8002364 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002346:	68bb      	ldr	r3, [r7, #8]
 8002348:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800234c:	2b00      	cmp	r3, #0
 800234e:	d009      	beq.n	8002364 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002350:	683b      	ldr	r3, [r7, #0]
 8002352:	015a      	lsls	r2, r3, #5
 8002354:	693b      	ldr	r3, [r7, #16]
 8002356:	4413      	add	r3, r2
 8002358:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800235c:	461a      	mov	r2, r3
 800235e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002362:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002364:	6878      	ldr	r0, [r7, #4]
 8002366:	f004 fcdd 	bl	8006d24 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	4a0a      	ldr	r2, [pc, #40]	@ (8002398 <PCD_EP_OutSetupPacket_int+0x88>)
 800236e:	4293      	cmp	r3, r2
 8002370:	d90c      	bls.n	800238c <PCD_EP_OutSetupPacket_int+0x7c>
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	799b      	ldrb	r3, [r3, #6]
 8002376:	2b01      	cmp	r3, #1
 8002378:	d108      	bne.n	800238c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	6818      	ldr	r0, [r3, #0]
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002384:	461a      	mov	r2, r3
 8002386:	2101      	movs	r1, #1
 8002388:	f002 fb62 	bl	8004a50 <USB_EP0_OutStart>
  }

  return HAL_OK;
 800238c:	2300      	movs	r3, #0
}
 800238e:	4618      	mov	r0, r3
 8002390:	3718      	adds	r7, #24
 8002392:	46bd      	mov	sp, r7
 8002394:	bd80      	pop	{r7, pc}
 8002396:	bf00      	nop
 8002398:	4f54300a 	.word	0x4f54300a

0800239c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800239c:	b480      	push	{r7}
 800239e:	b085      	sub	sp, #20
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
 80023a4:	460b      	mov	r3, r1
 80023a6:	70fb      	strb	r3, [r7, #3]
 80023a8:	4613      	mov	r3, r2
 80023aa:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023b2:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80023b4:	78fb      	ldrb	r3, [r7, #3]
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d107      	bne.n	80023ca <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80023ba:	883b      	ldrh	r3, [r7, #0]
 80023bc:	0419      	lsls	r1, r3, #16
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	68ba      	ldr	r2, [r7, #8]
 80023c4:	430a      	orrs	r2, r1
 80023c6:	629a      	str	r2, [r3, #40]	@ 0x28
 80023c8:	e028      	b.n	800241c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023d0:	0c1b      	lsrs	r3, r3, #16
 80023d2:	68ba      	ldr	r2, [r7, #8]
 80023d4:	4413      	add	r3, r2
 80023d6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80023d8:	2300      	movs	r3, #0
 80023da:	73fb      	strb	r3, [r7, #15]
 80023dc:	e00d      	b.n	80023fa <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681a      	ldr	r2, [r3, #0]
 80023e2:	7bfb      	ldrb	r3, [r7, #15]
 80023e4:	3340      	adds	r3, #64	@ 0x40
 80023e6:	009b      	lsls	r3, r3, #2
 80023e8:	4413      	add	r3, r2
 80023ea:	685b      	ldr	r3, [r3, #4]
 80023ec:	0c1b      	lsrs	r3, r3, #16
 80023ee:	68ba      	ldr	r2, [r7, #8]
 80023f0:	4413      	add	r3, r2
 80023f2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80023f4:	7bfb      	ldrb	r3, [r7, #15]
 80023f6:	3301      	adds	r3, #1
 80023f8:	73fb      	strb	r3, [r7, #15]
 80023fa:	7bfa      	ldrb	r2, [r7, #15]
 80023fc:	78fb      	ldrb	r3, [r7, #3]
 80023fe:	3b01      	subs	r3, #1
 8002400:	429a      	cmp	r2, r3
 8002402:	d3ec      	bcc.n	80023de <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002404:	883b      	ldrh	r3, [r7, #0]
 8002406:	0418      	lsls	r0, r3, #16
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	6819      	ldr	r1, [r3, #0]
 800240c:	78fb      	ldrb	r3, [r7, #3]
 800240e:	3b01      	subs	r3, #1
 8002410:	68ba      	ldr	r2, [r7, #8]
 8002412:	4302      	orrs	r2, r0
 8002414:	3340      	adds	r3, #64	@ 0x40
 8002416:	009b      	lsls	r3, r3, #2
 8002418:	440b      	add	r3, r1
 800241a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800241c:	2300      	movs	r3, #0
}
 800241e:	4618      	mov	r0, r3
 8002420:	3714      	adds	r7, #20
 8002422:	46bd      	mov	sp, r7
 8002424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002428:	4770      	bx	lr

0800242a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800242a:	b480      	push	{r7}
 800242c:	b083      	sub	sp, #12
 800242e:	af00      	add	r7, sp, #0
 8002430:	6078      	str	r0, [r7, #4]
 8002432:	460b      	mov	r3, r1
 8002434:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	887a      	ldrh	r2, [r7, #2]
 800243c:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800243e:	2300      	movs	r3, #0
}
 8002440:	4618      	mov	r0, r3
 8002442:	370c      	adds	r7, #12
 8002444:	46bd      	mov	sp, r7
 8002446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244a:	4770      	bx	lr

0800244c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800244c:	b480      	push	{r7}
 800244e:	b083      	sub	sp, #12
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
 8002454:	460b      	mov	r3, r1
 8002456:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8002458:	bf00      	nop
 800245a:	370c      	adds	r7, #12
 800245c:	46bd      	mov	sp, r7
 800245e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002462:	4770      	bx	lr

08002464 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	b086      	sub	sp, #24
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	2b00      	cmp	r3, #0
 8002470:	d101      	bne.n	8002476 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002472:	2301      	movs	r3, #1
 8002474:	e267      	b.n	8002946 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f003 0301 	and.w	r3, r3, #1
 800247e:	2b00      	cmp	r3, #0
 8002480:	d075      	beq.n	800256e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002482:	4b88      	ldr	r3, [pc, #544]	@ (80026a4 <HAL_RCC_OscConfig+0x240>)
 8002484:	689b      	ldr	r3, [r3, #8]
 8002486:	f003 030c 	and.w	r3, r3, #12
 800248a:	2b04      	cmp	r3, #4
 800248c:	d00c      	beq.n	80024a8 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800248e:	4b85      	ldr	r3, [pc, #532]	@ (80026a4 <HAL_RCC_OscConfig+0x240>)
 8002490:	689b      	ldr	r3, [r3, #8]
 8002492:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002496:	2b08      	cmp	r3, #8
 8002498:	d112      	bne.n	80024c0 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800249a:	4b82      	ldr	r3, [pc, #520]	@ (80026a4 <HAL_RCC_OscConfig+0x240>)
 800249c:	685b      	ldr	r3, [r3, #4]
 800249e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80024a2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80024a6:	d10b      	bne.n	80024c0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024a8:	4b7e      	ldr	r3, [pc, #504]	@ (80026a4 <HAL_RCC_OscConfig+0x240>)
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d05b      	beq.n	800256c <HAL_RCC_OscConfig+0x108>
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	685b      	ldr	r3, [r3, #4]
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d157      	bne.n	800256c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80024bc:	2301      	movs	r3, #1
 80024be:	e242      	b.n	8002946 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	685b      	ldr	r3, [r3, #4]
 80024c4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80024c8:	d106      	bne.n	80024d8 <HAL_RCC_OscConfig+0x74>
 80024ca:	4b76      	ldr	r3, [pc, #472]	@ (80026a4 <HAL_RCC_OscConfig+0x240>)
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	4a75      	ldr	r2, [pc, #468]	@ (80026a4 <HAL_RCC_OscConfig+0x240>)
 80024d0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80024d4:	6013      	str	r3, [r2, #0]
 80024d6:	e01d      	b.n	8002514 <HAL_RCC_OscConfig+0xb0>
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	685b      	ldr	r3, [r3, #4]
 80024dc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80024e0:	d10c      	bne.n	80024fc <HAL_RCC_OscConfig+0x98>
 80024e2:	4b70      	ldr	r3, [pc, #448]	@ (80026a4 <HAL_RCC_OscConfig+0x240>)
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	4a6f      	ldr	r2, [pc, #444]	@ (80026a4 <HAL_RCC_OscConfig+0x240>)
 80024e8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80024ec:	6013      	str	r3, [r2, #0]
 80024ee:	4b6d      	ldr	r3, [pc, #436]	@ (80026a4 <HAL_RCC_OscConfig+0x240>)
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	4a6c      	ldr	r2, [pc, #432]	@ (80026a4 <HAL_RCC_OscConfig+0x240>)
 80024f4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80024f8:	6013      	str	r3, [r2, #0]
 80024fa:	e00b      	b.n	8002514 <HAL_RCC_OscConfig+0xb0>
 80024fc:	4b69      	ldr	r3, [pc, #420]	@ (80026a4 <HAL_RCC_OscConfig+0x240>)
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	4a68      	ldr	r2, [pc, #416]	@ (80026a4 <HAL_RCC_OscConfig+0x240>)
 8002502:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002506:	6013      	str	r3, [r2, #0]
 8002508:	4b66      	ldr	r3, [pc, #408]	@ (80026a4 <HAL_RCC_OscConfig+0x240>)
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	4a65      	ldr	r2, [pc, #404]	@ (80026a4 <HAL_RCC_OscConfig+0x240>)
 800250e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002512:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	685b      	ldr	r3, [r3, #4]
 8002518:	2b00      	cmp	r3, #0
 800251a:	d013      	beq.n	8002544 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800251c:	f7fe fa8a 	bl	8000a34 <HAL_GetTick>
 8002520:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002522:	e008      	b.n	8002536 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002524:	f7fe fa86 	bl	8000a34 <HAL_GetTick>
 8002528:	4602      	mov	r2, r0
 800252a:	693b      	ldr	r3, [r7, #16]
 800252c:	1ad3      	subs	r3, r2, r3
 800252e:	2b64      	cmp	r3, #100	@ 0x64
 8002530:	d901      	bls.n	8002536 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002532:	2303      	movs	r3, #3
 8002534:	e207      	b.n	8002946 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002536:	4b5b      	ldr	r3, [pc, #364]	@ (80026a4 <HAL_RCC_OscConfig+0x240>)
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800253e:	2b00      	cmp	r3, #0
 8002540:	d0f0      	beq.n	8002524 <HAL_RCC_OscConfig+0xc0>
 8002542:	e014      	b.n	800256e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002544:	f7fe fa76 	bl	8000a34 <HAL_GetTick>
 8002548:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800254a:	e008      	b.n	800255e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800254c:	f7fe fa72 	bl	8000a34 <HAL_GetTick>
 8002550:	4602      	mov	r2, r0
 8002552:	693b      	ldr	r3, [r7, #16]
 8002554:	1ad3      	subs	r3, r2, r3
 8002556:	2b64      	cmp	r3, #100	@ 0x64
 8002558:	d901      	bls.n	800255e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800255a:	2303      	movs	r3, #3
 800255c:	e1f3      	b.n	8002946 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800255e:	4b51      	ldr	r3, [pc, #324]	@ (80026a4 <HAL_RCC_OscConfig+0x240>)
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002566:	2b00      	cmp	r3, #0
 8002568:	d1f0      	bne.n	800254c <HAL_RCC_OscConfig+0xe8>
 800256a:	e000      	b.n	800256e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800256c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f003 0302 	and.w	r3, r3, #2
 8002576:	2b00      	cmp	r3, #0
 8002578:	d063      	beq.n	8002642 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800257a:	4b4a      	ldr	r3, [pc, #296]	@ (80026a4 <HAL_RCC_OscConfig+0x240>)
 800257c:	689b      	ldr	r3, [r3, #8]
 800257e:	f003 030c 	and.w	r3, r3, #12
 8002582:	2b00      	cmp	r3, #0
 8002584:	d00b      	beq.n	800259e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002586:	4b47      	ldr	r3, [pc, #284]	@ (80026a4 <HAL_RCC_OscConfig+0x240>)
 8002588:	689b      	ldr	r3, [r3, #8]
 800258a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800258e:	2b08      	cmp	r3, #8
 8002590:	d11c      	bne.n	80025cc <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002592:	4b44      	ldr	r3, [pc, #272]	@ (80026a4 <HAL_RCC_OscConfig+0x240>)
 8002594:	685b      	ldr	r3, [r3, #4]
 8002596:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800259a:	2b00      	cmp	r3, #0
 800259c:	d116      	bne.n	80025cc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800259e:	4b41      	ldr	r3, [pc, #260]	@ (80026a4 <HAL_RCC_OscConfig+0x240>)
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f003 0302 	and.w	r3, r3, #2
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d005      	beq.n	80025b6 <HAL_RCC_OscConfig+0x152>
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	68db      	ldr	r3, [r3, #12]
 80025ae:	2b01      	cmp	r3, #1
 80025b0:	d001      	beq.n	80025b6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80025b2:	2301      	movs	r3, #1
 80025b4:	e1c7      	b.n	8002946 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025b6:	4b3b      	ldr	r3, [pc, #236]	@ (80026a4 <HAL_RCC_OscConfig+0x240>)
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	691b      	ldr	r3, [r3, #16]
 80025c2:	00db      	lsls	r3, r3, #3
 80025c4:	4937      	ldr	r1, [pc, #220]	@ (80026a4 <HAL_RCC_OscConfig+0x240>)
 80025c6:	4313      	orrs	r3, r2
 80025c8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025ca:	e03a      	b.n	8002642 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	68db      	ldr	r3, [r3, #12]
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d020      	beq.n	8002616 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80025d4:	4b34      	ldr	r3, [pc, #208]	@ (80026a8 <HAL_RCC_OscConfig+0x244>)
 80025d6:	2201      	movs	r2, #1
 80025d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025da:	f7fe fa2b 	bl	8000a34 <HAL_GetTick>
 80025de:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025e0:	e008      	b.n	80025f4 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80025e2:	f7fe fa27 	bl	8000a34 <HAL_GetTick>
 80025e6:	4602      	mov	r2, r0
 80025e8:	693b      	ldr	r3, [r7, #16]
 80025ea:	1ad3      	subs	r3, r2, r3
 80025ec:	2b02      	cmp	r3, #2
 80025ee:	d901      	bls.n	80025f4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80025f0:	2303      	movs	r3, #3
 80025f2:	e1a8      	b.n	8002946 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025f4:	4b2b      	ldr	r3, [pc, #172]	@ (80026a4 <HAL_RCC_OscConfig+0x240>)
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f003 0302 	and.w	r3, r3, #2
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d0f0      	beq.n	80025e2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002600:	4b28      	ldr	r3, [pc, #160]	@ (80026a4 <HAL_RCC_OscConfig+0x240>)
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	691b      	ldr	r3, [r3, #16]
 800260c:	00db      	lsls	r3, r3, #3
 800260e:	4925      	ldr	r1, [pc, #148]	@ (80026a4 <HAL_RCC_OscConfig+0x240>)
 8002610:	4313      	orrs	r3, r2
 8002612:	600b      	str	r3, [r1, #0]
 8002614:	e015      	b.n	8002642 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002616:	4b24      	ldr	r3, [pc, #144]	@ (80026a8 <HAL_RCC_OscConfig+0x244>)
 8002618:	2200      	movs	r2, #0
 800261a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800261c:	f7fe fa0a 	bl	8000a34 <HAL_GetTick>
 8002620:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002622:	e008      	b.n	8002636 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002624:	f7fe fa06 	bl	8000a34 <HAL_GetTick>
 8002628:	4602      	mov	r2, r0
 800262a:	693b      	ldr	r3, [r7, #16]
 800262c:	1ad3      	subs	r3, r2, r3
 800262e:	2b02      	cmp	r3, #2
 8002630:	d901      	bls.n	8002636 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002632:	2303      	movs	r3, #3
 8002634:	e187      	b.n	8002946 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002636:	4b1b      	ldr	r3, [pc, #108]	@ (80026a4 <HAL_RCC_OscConfig+0x240>)
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f003 0302 	and.w	r3, r3, #2
 800263e:	2b00      	cmp	r3, #0
 8002640:	d1f0      	bne.n	8002624 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f003 0308 	and.w	r3, r3, #8
 800264a:	2b00      	cmp	r3, #0
 800264c:	d036      	beq.n	80026bc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	695b      	ldr	r3, [r3, #20]
 8002652:	2b00      	cmp	r3, #0
 8002654:	d016      	beq.n	8002684 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002656:	4b15      	ldr	r3, [pc, #84]	@ (80026ac <HAL_RCC_OscConfig+0x248>)
 8002658:	2201      	movs	r2, #1
 800265a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800265c:	f7fe f9ea 	bl	8000a34 <HAL_GetTick>
 8002660:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002662:	e008      	b.n	8002676 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002664:	f7fe f9e6 	bl	8000a34 <HAL_GetTick>
 8002668:	4602      	mov	r2, r0
 800266a:	693b      	ldr	r3, [r7, #16]
 800266c:	1ad3      	subs	r3, r2, r3
 800266e:	2b02      	cmp	r3, #2
 8002670:	d901      	bls.n	8002676 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002672:	2303      	movs	r3, #3
 8002674:	e167      	b.n	8002946 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002676:	4b0b      	ldr	r3, [pc, #44]	@ (80026a4 <HAL_RCC_OscConfig+0x240>)
 8002678:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800267a:	f003 0302 	and.w	r3, r3, #2
 800267e:	2b00      	cmp	r3, #0
 8002680:	d0f0      	beq.n	8002664 <HAL_RCC_OscConfig+0x200>
 8002682:	e01b      	b.n	80026bc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002684:	4b09      	ldr	r3, [pc, #36]	@ (80026ac <HAL_RCC_OscConfig+0x248>)
 8002686:	2200      	movs	r2, #0
 8002688:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800268a:	f7fe f9d3 	bl	8000a34 <HAL_GetTick>
 800268e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002690:	e00e      	b.n	80026b0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002692:	f7fe f9cf 	bl	8000a34 <HAL_GetTick>
 8002696:	4602      	mov	r2, r0
 8002698:	693b      	ldr	r3, [r7, #16]
 800269a:	1ad3      	subs	r3, r2, r3
 800269c:	2b02      	cmp	r3, #2
 800269e:	d907      	bls.n	80026b0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80026a0:	2303      	movs	r3, #3
 80026a2:	e150      	b.n	8002946 <HAL_RCC_OscConfig+0x4e2>
 80026a4:	40023800 	.word	0x40023800
 80026a8:	42470000 	.word	0x42470000
 80026ac:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026b0:	4b88      	ldr	r3, [pc, #544]	@ (80028d4 <HAL_RCC_OscConfig+0x470>)
 80026b2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80026b4:	f003 0302 	and.w	r3, r3, #2
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d1ea      	bne.n	8002692 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f003 0304 	and.w	r3, r3, #4
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	f000 8097 	beq.w	80027f8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80026ca:	2300      	movs	r3, #0
 80026cc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80026ce:	4b81      	ldr	r3, [pc, #516]	@ (80028d4 <HAL_RCC_OscConfig+0x470>)
 80026d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d10f      	bne.n	80026fa <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80026da:	2300      	movs	r3, #0
 80026dc:	60bb      	str	r3, [r7, #8]
 80026de:	4b7d      	ldr	r3, [pc, #500]	@ (80028d4 <HAL_RCC_OscConfig+0x470>)
 80026e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026e2:	4a7c      	ldr	r2, [pc, #496]	@ (80028d4 <HAL_RCC_OscConfig+0x470>)
 80026e4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80026e8:	6413      	str	r3, [r2, #64]	@ 0x40
 80026ea:	4b7a      	ldr	r3, [pc, #488]	@ (80028d4 <HAL_RCC_OscConfig+0x470>)
 80026ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80026f2:	60bb      	str	r3, [r7, #8]
 80026f4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80026f6:	2301      	movs	r3, #1
 80026f8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026fa:	4b77      	ldr	r3, [pc, #476]	@ (80028d8 <HAL_RCC_OscConfig+0x474>)
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002702:	2b00      	cmp	r3, #0
 8002704:	d118      	bne.n	8002738 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002706:	4b74      	ldr	r3, [pc, #464]	@ (80028d8 <HAL_RCC_OscConfig+0x474>)
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	4a73      	ldr	r2, [pc, #460]	@ (80028d8 <HAL_RCC_OscConfig+0x474>)
 800270c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002710:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002712:	f7fe f98f 	bl	8000a34 <HAL_GetTick>
 8002716:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002718:	e008      	b.n	800272c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800271a:	f7fe f98b 	bl	8000a34 <HAL_GetTick>
 800271e:	4602      	mov	r2, r0
 8002720:	693b      	ldr	r3, [r7, #16]
 8002722:	1ad3      	subs	r3, r2, r3
 8002724:	2b02      	cmp	r3, #2
 8002726:	d901      	bls.n	800272c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002728:	2303      	movs	r3, #3
 800272a:	e10c      	b.n	8002946 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800272c:	4b6a      	ldr	r3, [pc, #424]	@ (80028d8 <HAL_RCC_OscConfig+0x474>)
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002734:	2b00      	cmp	r3, #0
 8002736:	d0f0      	beq.n	800271a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	689b      	ldr	r3, [r3, #8]
 800273c:	2b01      	cmp	r3, #1
 800273e:	d106      	bne.n	800274e <HAL_RCC_OscConfig+0x2ea>
 8002740:	4b64      	ldr	r3, [pc, #400]	@ (80028d4 <HAL_RCC_OscConfig+0x470>)
 8002742:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002744:	4a63      	ldr	r2, [pc, #396]	@ (80028d4 <HAL_RCC_OscConfig+0x470>)
 8002746:	f043 0301 	orr.w	r3, r3, #1
 800274a:	6713      	str	r3, [r2, #112]	@ 0x70
 800274c:	e01c      	b.n	8002788 <HAL_RCC_OscConfig+0x324>
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	689b      	ldr	r3, [r3, #8]
 8002752:	2b05      	cmp	r3, #5
 8002754:	d10c      	bne.n	8002770 <HAL_RCC_OscConfig+0x30c>
 8002756:	4b5f      	ldr	r3, [pc, #380]	@ (80028d4 <HAL_RCC_OscConfig+0x470>)
 8002758:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800275a:	4a5e      	ldr	r2, [pc, #376]	@ (80028d4 <HAL_RCC_OscConfig+0x470>)
 800275c:	f043 0304 	orr.w	r3, r3, #4
 8002760:	6713      	str	r3, [r2, #112]	@ 0x70
 8002762:	4b5c      	ldr	r3, [pc, #368]	@ (80028d4 <HAL_RCC_OscConfig+0x470>)
 8002764:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002766:	4a5b      	ldr	r2, [pc, #364]	@ (80028d4 <HAL_RCC_OscConfig+0x470>)
 8002768:	f043 0301 	orr.w	r3, r3, #1
 800276c:	6713      	str	r3, [r2, #112]	@ 0x70
 800276e:	e00b      	b.n	8002788 <HAL_RCC_OscConfig+0x324>
 8002770:	4b58      	ldr	r3, [pc, #352]	@ (80028d4 <HAL_RCC_OscConfig+0x470>)
 8002772:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002774:	4a57      	ldr	r2, [pc, #348]	@ (80028d4 <HAL_RCC_OscConfig+0x470>)
 8002776:	f023 0301 	bic.w	r3, r3, #1
 800277a:	6713      	str	r3, [r2, #112]	@ 0x70
 800277c:	4b55      	ldr	r3, [pc, #340]	@ (80028d4 <HAL_RCC_OscConfig+0x470>)
 800277e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002780:	4a54      	ldr	r2, [pc, #336]	@ (80028d4 <HAL_RCC_OscConfig+0x470>)
 8002782:	f023 0304 	bic.w	r3, r3, #4
 8002786:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	689b      	ldr	r3, [r3, #8]
 800278c:	2b00      	cmp	r3, #0
 800278e:	d015      	beq.n	80027bc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002790:	f7fe f950 	bl	8000a34 <HAL_GetTick>
 8002794:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002796:	e00a      	b.n	80027ae <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002798:	f7fe f94c 	bl	8000a34 <HAL_GetTick>
 800279c:	4602      	mov	r2, r0
 800279e:	693b      	ldr	r3, [r7, #16]
 80027a0:	1ad3      	subs	r3, r2, r3
 80027a2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80027a6:	4293      	cmp	r3, r2
 80027a8:	d901      	bls.n	80027ae <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80027aa:	2303      	movs	r3, #3
 80027ac:	e0cb      	b.n	8002946 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027ae:	4b49      	ldr	r3, [pc, #292]	@ (80028d4 <HAL_RCC_OscConfig+0x470>)
 80027b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027b2:	f003 0302 	and.w	r3, r3, #2
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d0ee      	beq.n	8002798 <HAL_RCC_OscConfig+0x334>
 80027ba:	e014      	b.n	80027e6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027bc:	f7fe f93a 	bl	8000a34 <HAL_GetTick>
 80027c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027c2:	e00a      	b.n	80027da <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027c4:	f7fe f936 	bl	8000a34 <HAL_GetTick>
 80027c8:	4602      	mov	r2, r0
 80027ca:	693b      	ldr	r3, [r7, #16]
 80027cc:	1ad3      	subs	r3, r2, r3
 80027ce:	f241 3288 	movw	r2, #5000	@ 0x1388
 80027d2:	4293      	cmp	r3, r2
 80027d4:	d901      	bls.n	80027da <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80027d6:	2303      	movs	r3, #3
 80027d8:	e0b5      	b.n	8002946 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027da:	4b3e      	ldr	r3, [pc, #248]	@ (80028d4 <HAL_RCC_OscConfig+0x470>)
 80027dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027de:	f003 0302 	and.w	r3, r3, #2
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d1ee      	bne.n	80027c4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80027e6:	7dfb      	ldrb	r3, [r7, #23]
 80027e8:	2b01      	cmp	r3, #1
 80027ea:	d105      	bne.n	80027f8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80027ec:	4b39      	ldr	r3, [pc, #228]	@ (80028d4 <HAL_RCC_OscConfig+0x470>)
 80027ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027f0:	4a38      	ldr	r2, [pc, #224]	@ (80028d4 <HAL_RCC_OscConfig+0x470>)
 80027f2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80027f6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	699b      	ldr	r3, [r3, #24]
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	f000 80a1 	beq.w	8002944 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002802:	4b34      	ldr	r3, [pc, #208]	@ (80028d4 <HAL_RCC_OscConfig+0x470>)
 8002804:	689b      	ldr	r3, [r3, #8]
 8002806:	f003 030c 	and.w	r3, r3, #12
 800280a:	2b08      	cmp	r3, #8
 800280c:	d05c      	beq.n	80028c8 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	699b      	ldr	r3, [r3, #24]
 8002812:	2b02      	cmp	r3, #2
 8002814:	d141      	bne.n	800289a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002816:	4b31      	ldr	r3, [pc, #196]	@ (80028dc <HAL_RCC_OscConfig+0x478>)
 8002818:	2200      	movs	r2, #0
 800281a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800281c:	f7fe f90a 	bl	8000a34 <HAL_GetTick>
 8002820:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002822:	e008      	b.n	8002836 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002824:	f7fe f906 	bl	8000a34 <HAL_GetTick>
 8002828:	4602      	mov	r2, r0
 800282a:	693b      	ldr	r3, [r7, #16]
 800282c:	1ad3      	subs	r3, r2, r3
 800282e:	2b02      	cmp	r3, #2
 8002830:	d901      	bls.n	8002836 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002832:	2303      	movs	r3, #3
 8002834:	e087      	b.n	8002946 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002836:	4b27      	ldr	r3, [pc, #156]	@ (80028d4 <HAL_RCC_OscConfig+0x470>)
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800283e:	2b00      	cmp	r3, #0
 8002840:	d1f0      	bne.n	8002824 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	69da      	ldr	r2, [r3, #28]
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	6a1b      	ldr	r3, [r3, #32]
 800284a:	431a      	orrs	r2, r3
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002850:	019b      	lsls	r3, r3, #6
 8002852:	431a      	orrs	r2, r3
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002858:	085b      	lsrs	r3, r3, #1
 800285a:	3b01      	subs	r3, #1
 800285c:	041b      	lsls	r3, r3, #16
 800285e:	431a      	orrs	r2, r3
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002864:	061b      	lsls	r3, r3, #24
 8002866:	491b      	ldr	r1, [pc, #108]	@ (80028d4 <HAL_RCC_OscConfig+0x470>)
 8002868:	4313      	orrs	r3, r2
 800286a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800286c:	4b1b      	ldr	r3, [pc, #108]	@ (80028dc <HAL_RCC_OscConfig+0x478>)
 800286e:	2201      	movs	r2, #1
 8002870:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002872:	f7fe f8df 	bl	8000a34 <HAL_GetTick>
 8002876:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002878:	e008      	b.n	800288c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800287a:	f7fe f8db 	bl	8000a34 <HAL_GetTick>
 800287e:	4602      	mov	r2, r0
 8002880:	693b      	ldr	r3, [r7, #16]
 8002882:	1ad3      	subs	r3, r2, r3
 8002884:	2b02      	cmp	r3, #2
 8002886:	d901      	bls.n	800288c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002888:	2303      	movs	r3, #3
 800288a:	e05c      	b.n	8002946 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800288c:	4b11      	ldr	r3, [pc, #68]	@ (80028d4 <HAL_RCC_OscConfig+0x470>)
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002894:	2b00      	cmp	r3, #0
 8002896:	d0f0      	beq.n	800287a <HAL_RCC_OscConfig+0x416>
 8002898:	e054      	b.n	8002944 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800289a:	4b10      	ldr	r3, [pc, #64]	@ (80028dc <HAL_RCC_OscConfig+0x478>)
 800289c:	2200      	movs	r2, #0
 800289e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028a0:	f7fe f8c8 	bl	8000a34 <HAL_GetTick>
 80028a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028a6:	e008      	b.n	80028ba <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028a8:	f7fe f8c4 	bl	8000a34 <HAL_GetTick>
 80028ac:	4602      	mov	r2, r0
 80028ae:	693b      	ldr	r3, [r7, #16]
 80028b0:	1ad3      	subs	r3, r2, r3
 80028b2:	2b02      	cmp	r3, #2
 80028b4:	d901      	bls.n	80028ba <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80028b6:	2303      	movs	r3, #3
 80028b8:	e045      	b.n	8002946 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028ba:	4b06      	ldr	r3, [pc, #24]	@ (80028d4 <HAL_RCC_OscConfig+0x470>)
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d1f0      	bne.n	80028a8 <HAL_RCC_OscConfig+0x444>
 80028c6:	e03d      	b.n	8002944 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	699b      	ldr	r3, [r3, #24]
 80028cc:	2b01      	cmp	r3, #1
 80028ce:	d107      	bne.n	80028e0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80028d0:	2301      	movs	r3, #1
 80028d2:	e038      	b.n	8002946 <HAL_RCC_OscConfig+0x4e2>
 80028d4:	40023800 	.word	0x40023800
 80028d8:	40007000 	.word	0x40007000
 80028dc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80028e0:	4b1b      	ldr	r3, [pc, #108]	@ (8002950 <HAL_RCC_OscConfig+0x4ec>)
 80028e2:	685b      	ldr	r3, [r3, #4]
 80028e4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	699b      	ldr	r3, [r3, #24]
 80028ea:	2b01      	cmp	r3, #1
 80028ec:	d028      	beq.n	8002940 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80028f8:	429a      	cmp	r2, r3
 80028fa:	d121      	bne.n	8002940 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002906:	429a      	cmp	r2, r3
 8002908:	d11a      	bne.n	8002940 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800290a:	68fa      	ldr	r2, [r7, #12]
 800290c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002910:	4013      	ands	r3, r2
 8002912:	687a      	ldr	r2, [r7, #4]
 8002914:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002916:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002918:	4293      	cmp	r3, r2
 800291a:	d111      	bne.n	8002940 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002926:	085b      	lsrs	r3, r3, #1
 8002928:	3b01      	subs	r3, #1
 800292a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800292c:	429a      	cmp	r2, r3
 800292e:	d107      	bne.n	8002940 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800293a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800293c:	429a      	cmp	r2, r3
 800293e:	d001      	beq.n	8002944 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002940:	2301      	movs	r3, #1
 8002942:	e000      	b.n	8002946 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002944:	2300      	movs	r3, #0
}
 8002946:	4618      	mov	r0, r3
 8002948:	3718      	adds	r7, #24
 800294a:	46bd      	mov	sp, r7
 800294c:	bd80      	pop	{r7, pc}
 800294e:	bf00      	nop
 8002950:	40023800 	.word	0x40023800

08002954 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002954:	b580      	push	{r7, lr}
 8002956:	b084      	sub	sp, #16
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
 800295c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	2b00      	cmp	r3, #0
 8002962:	d101      	bne.n	8002968 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002964:	2301      	movs	r3, #1
 8002966:	e0cc      	b.n	8002b02 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002968:	4b68      	ldr	r3, [pc, #416]	@ (8002b0c <HAL_RCC_ClockConfig+0x1b8>)
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f003 0307 	and.w	r3, r3, #7
 8002970:	683a      	ldr	r2, [r7, #0]
 8002972:	429a      	cmp	r2, r3
 8002974:	d90c      	bls.n	8002990 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002976:	4b65      	ldr	r3, [pc, #404]	@ (8002b0c <HAL_RCC_ClockConfig+0x1b8>)
 8002978:	683a      	ldr	r2, [r7, #0]
 800297a:	b2d2      	uxtb	r2, r2
 800297c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800297e:	4b63      	ldr	r3, [pc, #396]	@ (8002b0c <HAL_RCC_ClockConfig+0x1b8>)
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f003 0307 	and.w	r3, r3, #7
 8002986:	683a      	ldr	r2, [r7, #0]
 8002988:	429a      	cmp	r2, r3
 800298a:	d001      	beq.n	8002990 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800298c:	2301      	movs	r3, #1
 800298e:	e0b8      	b.n	8002b02 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f003 0302 	and.w	r3, r3, #2
 8002998:	2b00      	cmp	r3, #0
 800299a:	d020      	beq.n	80029de <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f003 0304 	and.w	r3, r3, #4
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d005      	beq.n	80029b4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80029a8:	4b59      	ldr	r3, [pc, #356]	@ (8002b10 <HAL_RCC_ClockConfig+0x1bc>)
 80029aa:	689b      	ldr	r3, [r3, #8]
 80029ac:	4a58      	ldr	r2, [pc, #352]	@ (8002b10 <HAL_RCC_ClockConfig+0x1bc>)
 80029ae:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80029b2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f003 0308 	and.w	r3, r3, #8
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d005      	beq.n	80029cc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80029c0:	4b53      	ldr	r3, [pc, #332]	@ (8002b10 <HAL_RCC_ClockConfig+0x1bc>)
 80029c2:	689b      	ldr	r3, [r3, #8]
 80029c4:	4a52      	ldr	r2, [pc, #328]	@ (8002b10 <HAL_RCC_ClockConfig+0x1bc>)
 80029c6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80029ca:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80029cc:	4b50      	ldr	r3, [pc, #320]	@ (8002b10 <HAL_RCC_ClockConfig+0x1bc>)
 80029ce:	689b      	ldr	r3, [r3, #8]
 80029d0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	689b      	ldr	r3, [r3, #8]
 80029d8:	494d      	ldr	r1, [pc, #308]	@ (8002b10 <HAL_RCC_ClockConfig+0x1bc>)
 80029da:	4313      	orrs	r3, r2
 80029dc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f003 0301 	and.w	r3, r3, #1
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d044      	beq.n	8002a74 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	685b      	ldr	r3, [r3, #4]
 80029ee:	2b01      	cmp	r3, #1
 80029f0:	d107      	bne.n	8002a02 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029f2:	4b47      	ldr	r3, [pc, #284]	@ (8002b10 <HAL_RCC_ClockConfig+0x1bc>)
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d119      	bne.n	8002a32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029fe:	2301      	movs	r3, #1
 8002a00:	e07f      	b.n	8002b02 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	685b      	ldr	r3, [r3, #4]
 8002a06:	2b02      	cmp	r3, #2
 8002a08:	d003      	beq.n	8002a12 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002a0e:	2b03      	cmp	r3, #3
 8002a10:	d107      	bne.n	8002a22 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a12:	4b3f      	ldr	r3, [pc, #252]	@ (8002b10 <HAL_RCC_ClockConfig+0x1bc>)
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d109      	bne.n	8002a32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a1e:	2301      	movs	r3, #1
 8002a20:	e06f      	b.n	8002b02 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a22:	4b3b      	ldr	r3, [pc, #236]	@ (8002b10 <HAL_RCC_ClockConfig+0x1bc>)
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f003 0302 	and.w	r3, r3, #2
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d101      	bne.n	8002a32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a2e:	2301      	movs	r3, #1
 8002a30:	e067      	b.n	8002b02 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002a32:	4b37      	ldr	r3, [pc, #220]	@ (8002b10 <HAL_RCC_ClockConfig+0x1bc>)
 8002a34:	689b      	ldr	r3, [r3, #8]
 8002a36:	f023 0203 	bic.w	r2, r3, #3
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	685b      	ldr	r3, [r3, #4]
 8002a3e:	4934      	ldr	r1, [pc, #208]	@ (8002b10 <HAL_RCC_ClockConfig+0x1bc>)
 8002a40:	4313      	orrs	r3, r2
 8002a42:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002a44:	f7fd fff6 	bl	8000a34 <HAL_GetTick>
 8002a48:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a4a:	e00a      	b.n	8002a62 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a4c:	f7fd fff2 	bl	8000a34 <HAL_GetTick>
 8002a50:	4602      	mov	r2, r0
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	1ad3      	subs	r3, r2, r3
 8002a56:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a5a:	4293      	cmp	r3, r2
 8002a5c:	d901      	bls.n	8002a62 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002a5e:	2303      	movs	r3, #3
 8002a60:	e04f      	b.n	8002b02 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a62:	4b2b      	ldr	r3, [pc, #172]	@ (8002b10 <HAL_RCC_ClockConfig+0x1bc>)
 8002a64:	689b      	ldr	r3, [r3, #8]
 8002a66:	f003 020c 	and.w	r2, r3, #12
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	685b      	ldr	r3, [r3, #4]
 8002a6e:	009b      	lsls	r3, r3, #2
 8002a70:	429a      	cmp	r2, r3
 8002a72:	d1eb      	bne.n	8002a4c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002a74:	4b25      	ldr	r3, [pc, #148]	@ (8002b0c <HAL_RCC_ClockConfig+0x1b8>)
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f003 0307 	and.w	r3, r3, #7
 8002a7c:	683a      	ldr	r2, [r7, #0]
 8002a7e:	429a      	cmp	r2, r3
 8002a80:	d20c      	bcs.n	8002a9c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a82:	4b22      	ldr	r3, [pc, #136]	@ (8002b0c <HAL_RCC_ClockConfig+0x1b8>)
 8002a84:	683a      	ldr	r2, [r7, #0]
 8002a86:	b2d2      	uxtb	r2, r2
 8002a88:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a8a:	4b20      	ldr	r3, [pc, #128]	@ (8002b0c <HAL_RCC_ClockConfig+0x1b8>)
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f003 0307 	and.w	r3, r3, #7
 8002a92:	683a      	ldr	r2, [r7, #0]
 8002a94:	429a      	cmp	r2, r3
 8002a96:	d001      	beq.n	8002a9c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002a98:	2301      	movs	r3, #1
 8002a9a:	e032      	b.n	8002b02 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f003 0304 	and.w	r3, r3, #4
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d008      	beq.n	8002aba <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002aa8:	4b19      	ldr	r3, [pc, #100]	@ (8002b10 <HAL_RCC_ClockConfig+0x1bc>)
 8002aaa:	689b      	ldr	r3, [r3, #8]
 8002aac:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	68db      	ldr	r3, [r3, #12]
 8002ab4:	4916      	ldr	r1, [pc, #88]	@ (8002b10 <HAL_RCC_ClockConfig+0x1bc>)
 8002ab6:	4313      	orrs	r3, r2
 8002ab8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f003 0308 	and.w	r3, r3, #8
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d009      	beq.n	8002ada <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002ac6:	4b12      	ldr	r3, [pc, #72]	@ (8002b10 <HAL_RCC_ClockConfig+0x1bc>)
 8002ac8:	689b      	ldr	r3, [r3, #8]
 8002aca:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	691b      	ldr	r3, [r3, #16]
 8002ad2:	00db      	lsls	r3, r3, #3
 8002ad4:	490e      	ldr	r1, [pc, #56]	@ (8002b10 <HAL_RCC_ClockConfig+0x1bc>)
 8002ad6:	4313      	orrs	r3, r2
 8002ad8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002ada:	f000 f821 	bl	8002b20 <HAL_RCC_GetSysClockFreq>
 8002ade:	4602      	mov	r2, r0
 8002ae0:	4b0b      	ldr	r3, [pc, #44]	@ (8002b10 <HAL_RCC_ClockConfig+0x1bc>)
 8002ae2:	689b      	ldr	r3, [r3, #8]
 8002ae4:	091b      	lsrs	r3, r3, #4
 8002ae6:	f003 030f 	and.w	r3, r3, #15
 8002aea:	490a      	ldr	r1, [pc, #40]	@ (8002b14 <HAL_RCC_ClockConfig+0x1c0>)
 8002aec:	5ccb      	ldrb	r3, [r1, r3]
 8002aee:	fa22 f303 	lsr.w	r3, r2, r3
 8002af2:	4a09      	ldr	r2, [pc, #36]	@ (8002b18 <HAL_RCC_ClockConfig+0x1c4>)
 8002af4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002af6:	4b09      	ldr	r3, [pc, #36]	@ (8002b1c <HAL_RCC_ClockConfig+0x1c8>)
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	4618      	mov	r0, r3
 8002afc:	f7fd ff56 	bl	80009ac <HAL_InitTick>

  return HAL_OK;
 8002b00:	2300      	movs	r3, #0
}
 8002b02:	4618      	mov	r0, r3
 8002b04:	3710      	adds	r7, #16
 8002b06:	46bd      	mov	sp, r7
 8002b08:	bd80      	pop	{r7, pc}
 8002b0a:	bf00      	nop
 8002b0c:	40023c00 	.word	0x40023c00
 8002b10:	40023800 	.word	0x40023800
 8002b14:	08007350 	.word	0x08007350
 8002b18:	20000000 	.word	0x20000000
 8002b1c:	20000004 	.word	0x20000004

08002b20 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b20:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002b24:	b094      	sub	sp, #80	@ 0x50
 8002b26:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002b28:	2300      	movs	r3, #0
 8002b2a:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8002b2c:	2300      	movs	r3, #0
 8002b2e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8002b30:	2300      	movs	r3, #0
 8002b32:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8002b34:	2300      	movs	r3, #0
 8002b36:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002b38:	4b79      	ldr	r3, [pc, #484]	@ (8002d20 <HAL_RCC_GetSysClockFreq+0x200>)
 8002b3a:	689b      	ldr	r3, [r3, #8]
 8002b3c:	f003 030c 	and.w	r3, r3, #12
 8002b40:	2b08      	cmp	r3, #8
 8002b42:	d00d      	beq.n	8002b60 <HAL_RCC_GetSysClockFreq+0x40>
 8002b44:	2b08      	cmp	r3, #8
 8002b46:	f200 80e1 	bhi.w	8002d0c <HAL_RCC_GetSysClockFreq+0x1ec>
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d002      	beq.n	8002b54 <HAL_RCC_GetSysClockFreq+0x34>
 8002b4e:	2b04      	cmp	r3, #4
 8002b50:	d003      	beq.n	8002b5a <HAL_RCC_GetSysClockFreq+0x3a>
 8002b52:	e0db      	b.n	8002d0c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002b54:	4b73      	ldr	r3, [pc, #460]	@ (8002d24 <HAL_RCC_GetSysClockFreq+0x204>)
 8002b56:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002b58:	e0db      	b.n	8002d12 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002b5a:	4b73      	ldr	r3, [pc, #460]	@ (8002d28 <HAL_RCC_GetSysClockFreq+0x208>)
 8002b5c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002b5e:	e0d8      	b.n	8002d12 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002b60:	4b6f      	ldr	r3, [pc, #444]	@ (8002d20 <HAL_RCC_GetSysClockFreq+0x200>)
 8002b62:	685b      	ldr	r3, [r3, #4]
 8002b64:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002b68:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002b6a:	4b6d      	ldr	r3, [pc, #436]	@ (8002d20 <HAL_RCC_GetSysClockFreq+0x200>)
 8002b6c:	685b      	ldr	r3, [r3, #4]
 8002b6e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d063      	beq.n	8002c3e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b76:	4b6a      	ldr	r3, [pc, #424]	@ (8002d20 <HAL_RCC_GetSysClockFreq+0x200>)
 8002b78:	685b      	ldr	r3, [r3, #4]
 8002b7a:	099b      	lsrs	r3, r3, #6
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002b80:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002b82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002b84:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b88:	633b      	str	r3, [r7, #48]	@ 0x30
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	637b      	str	r3, [r7, #52]	@ 0x34
 8002b8e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002b92:	4622      	mov	r2, r4
 8002b94:	462b      	mov	r3, r5
 8002b96:	f04f 0000 	mov.w	r0, #0
 8002b9a:	f04f 0100 	mov.w	r1, #0
 8002b9e:	0159      	lsls	r1, r3, #5
 8002ba0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002ba4:	0150      	lsls	r0, r2, #5
 8002ba6:	4602      	mov	r2, r0
 8002ba8:	460b      	mov	r3, r1
 8002baa:	4621      	mov	r1, r4
 8002bac:	1a51      	subs	r1, r2, r1
 8002bae:	6139      	str	r1, [r7, #16]
 8002bb0:	4629      	mov	r1, r5
 8002bb2:	eb63 0301 	sbc.w	r3, r3, r1
 8002bb6:	617b      	str	r3, [r7, #20]
 8002bb8:	f04f 0200 	mov.w	r2, #0
 8002bbc:	f04f 0300 	mov.w	r3, #0
 8002bc0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002bc4:	4659      	mov	r1, fp
 8002bc6:	018b      	lsls	r3, r1, #6
 8002bc8:	4651      	mov	r1, sl
 8002bca:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002bce:	4651      	mov	r1, sl
 8002bd0:	018a      	lsls	r2, r1, #6
 8002bd2:	4651      	mov	r1, sl
 8002bd4:	ebb2 0801 	subs.w	r8, r2, r1
 8002bd8:	4659      	mov	r1, fp
 8002bda:	eb63 0901 	sbc.w	r9, r3, r1
 8002bde:	f04f 0200 	mov.w	r2, #0
 8002be2:	f04f 0300 	mov.w	r3, #0
 8002be6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002bea:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002bee:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002bf2:	4690      	mov	r8, r2
 8002bf4:	4699      	mov	r9, r3
 8002bf6:	4623      	mov	r3, r4
 8002bf8:	eb18 0303 	adds.w	r3, r8, r3
 8002bfc:	60bb      	str	r3, [r7, #8]
 8002bfe:	462b      	mov	r3, r5
 8002c00:	eb49 0303 	adc.w	r3, r9, r3
 8002c04:	60fb      	str	r3, [r7, #12]
 8002c06:	f04f 0200 	mov.w	r2, #0
 8002c0a:	f04f 0300 	mov.w	r3, #0
 8002c0e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002c12:	4629      	mov	r1, r5
 8002c14:	024b      	lsls	r3, r1, #9
 8002c16:	4621      	mov	r1, r4
 8002c18:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002c1c:	4621      	mov	r1, r4
 8002c1e:	024a      	lsls	r2, r1, #9
 8002c20:	4610      	mov	r0, r2
 8002c22:	4619      	mov	r1, r3
 8002c24:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002c26:	2200      	movs	r2, #0
 8002c28:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002c2a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002c2c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002c30:	f7fd faca 	bl	80001c8 <__aeabi_uldivmod>
 8002c34:	4602      	mov	r2, r0
 8002c36:	460b      	mov	r3, r1
 8002c38:	4613      	mov	r3, r2
 8002c3a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002c3c:	e058      	b.n	8002cf0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c3e:	4b38      	ldr	r3, [pc, #224]	@ (8002d20 <HAL_RCC_GetSysClockFreq+0x200>)
 8002c40:	685b      	ldr	r3, [r3, #4]
 8002c42:	099b      	lsrs	r3, r3, #6
 8002c44:	2200      	movs	r2, #0
 8002c46:	4618      	mov	r0, r3
 8002c48:	4611      	mov	r1, r2
 8002c4a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002c4e:	623b      	str	r3, [r7, #32]
 8002c50:	2300      	movs	r3, #0
 8002c52:	627b      	str	r3, [r7, #36]	@ 0x24
 8002c54:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002c58:	4642      	mov	r2, r8
 8002c5a:	464b      	mov	r3, r9
 8002c5c:	f04f 0000 	mov.w	r0, #0
 8002c60:	f04f 0100 	mov.w	r1, #0
 8002c64:	0159      	lsls	r1, r3, #5
 8002c66:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002c6a:	0150      	lsls	r0, r2, #5
 8002c6c:	4602      	mov	r2, r0
 8002c6e:	460b      	mov	r3, r1
 8002c70:	4641      	mov	r1, r8
 8002c72:	ebb2 0a01 	subs.w	sl, r2, r1
 8002c76:	4649      	mov	r1, r9
 8002c78:	eb63 0b01 	sbc.w	fp, r3, r1
 8002c7c:	f04f 0200 	mov.w	r2, #0
 8002c80:	f04f 0300 	mov.w	r3, #0
 8002c84:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002c88:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002c8c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002c90:	ebb2 040a 	subs.w	r4, r2, sl
 8002c94:	eb63 050b 	sbc.w	r5, r3, fp
 8002c98:	f04f 0200 	mov.w	r2, #0
 8002c9c:	f04f 0300 	mov.w	r3, #0
 8002ca0:	00eb      	lsls	r3, r5, #3
 8002ca2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002ca6:	00e2      	lsls	r2, r4, #3
 8002ca8:	4614      	mov	r4, r2
 8002caa:	461d      	mov	r5, r3
 8002cac:	4643      	mov	r3, r8
 8002cae:	18e3      	adds	r3, r4, r3
 8002cb0:	603b      	str	r3, [r7, #0]
 8002cb2:	464b      	mov	r3, r9
 8002cb4:	eb45 0303 	adc.w	r3, r5, r3
 8002cb8:	607b      	str	r3, [r7, #4]
 8002cba:	f04f 0200 	mov.w	r2, #0
 8002cbe:	f04f 0300 	mov.w	r3, #0
 8002cc2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002cc6:	4629      	mov	r1, r5
 8002cc8:	028b      	lsls	r3, r1, #10
 8002cca:	4621      	mov	r1, r4
 8002ccc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002cd0:	4621      	mov	r1, r4
 8002cd2:	028a      	lsls	r2, r1, #10
 8002cd4:	4610      	mov	r0, r2
 8002cd6:	4619      	mov	r1, r3
 8002cd8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002cda:	2200      	movs	r2, #0
 8002cdc:	61bb      	str	r3, [r7, #24]
 8002cde:	61fa      	str	r2, [r7, #28]
 8002ce0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002ce4:	f7fd fa70 	bl	80001c8 <__aeabi_uldivmod>
 8002ce8:	4602      	mov	r2, r0
 8002cea:	460b      	mov	r3, r1
 8002cec:	4613      	mov	r3, r2
 8002cee:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002cf0:	4b0b      	ldr	r3, [pc, #44]	@ (8002d20 <HAL_RCC_GetSysClockFreq+0x200>)
 8002cf2:	685b      	ldr	r3, [r3, #4]
 8002cf4:	0c1b      	lsrs	r3, r3, #16
 8002cf6:	f003 0303 	and.w	r3, r3, #3
 8002cfa:	3301      	adds	r3, #1
 8002cfc:	005b      	lsls	r3, r3, #1
 8002cfe:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8002d00:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002d02:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002d04:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d08:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002d0a:	e002      	b.n	8002d12 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002d0c:	4b05      	ldr	r3, [pc, #20]	@ (8002d24 <HAL_RCC_GetSysClockFreq+0x204>)
 8002d0e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002d10:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002d12:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8002d14:	4618      	mov	r0, r3
 8002d16:	3750      	adds	r7, #80	@ 0x50
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002d1e:	bf00      	nop
 8002d20:	40023800 	.word	0x40023800
 8002d24:	00f42400 	.word	0x00f42400
 8002d28:	007a1200 	.word	0x007a1200

08002d2c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d2c:	b480      	push	{r7}
 8002d2e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002d30:	4b03      	ldr	r3, [pc, #12]	@ (8002d40 <HAL_RCC_GetHCLKFreq+0x14>)
 8002d32:	681b      	ldr	r3, [r3, #0]
}
 8002d34:	4618      	mov	r0, r3
 8002d36:	46bd      	mov	sp, r7
 8002d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3c:	4770      	bx	lr
 8002d3e:	bf00      	nop
 8002d40:	20000000 	.word	0x20000000

08002d44 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	b086      	sub	sp, #24
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
 8002d4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d101      	bne.n	8002d58 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8002d54:	2301      	movs	r3, #1
 8002d56:	e097      	b.n	8002e88 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002d5e:	b2db      	uxtb	r3, r3
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d106      	bne.n	8002d72 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	2200      	movs	r2, #0
 8002d68:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8002d6c:	6878      	ldr	r0, [r7, #4]
 8002d6e:	f7fd fd2b 	bl	80007c8 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	2202      	movs	r2, #2
 8002d76:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	689b      	ldr	r3, [r3, #8]
 8002d80:	687a      	ldr	r2, [r7, #4]
 8002d82:	6812      	ldr	r2, [r2, #0]
 8002d84:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002d88:	f023 0307 	bic.w	r3, r3, #7
 8002d8c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681a      	ldr	r2, [r3, #0]
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	3304      	adds	r3, #4
 8002d96:	4619      	mov	r1, r3
 8002d98:	4610      	mov	r0, r2
 8002d9a:	f000 fa3f 	bl	800321c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	689b      	ldr	r3, [r3, #8]
 8002da4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	699b      	ldr	r3, [r3, #24]
 8002dac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	6a1b      	ldr	r3, [r3, #32]
 8002db4:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8002db6:	683b      	ldr	r3, [r7, #0]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	697a      	ldr	r2, [r7, #20]
 8002dbc:	4313      	orrs	r3, r2
 8002dbe:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8002dc0:	693b      	ldr	r3, [r7, #16]
 8002dc2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002dc6:	f023 0303 	bic.w	r3, r3, #3
 8002dca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8002dcc:	683b      	ldr	r3, [r7, #0]
 8002dce:	689a      	ldr	r2, [r3, #8]
 8002dd0:	683b      	ldr	r3, [r7, #0]
 8002dd2:	699b      	ldr	r3, [r3, #24]
 8002dd4:	021b      	lsls	r3, r3, #8
 8002dd6:	4313      	orrs	r3, r2
 8002dd8:	693a      	ldr	r2, [r7, #16]
 8002dda:	4313      	orrs	r3, r2
 8002ddc:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8002dde:	693b      	ldr	r3, [r7, #16]
 8002de0:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8002de4:	f023 030c 	bic.w	r3, r3, #12
 8002de8:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8002dea:	693b      	ldr	r3, [r7, #16]
 8002dec:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002df0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002df4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8002df6:	683b      	ldr	r3, [r7, #0]
 8002df8:	68da      	ldr	r2, [r3, #12]
 8002dfa:	683b      	ldr	r3, [r7, #0]
 8002dfc:	69db      	ldr	r3, [r3, #28]
 8002dfe:	021b      	lsls	r3, r3, #8
 8002e00:	4313      	orrs	r3, r2
 8002e02:	693a      	ldr	r2, [r7, #16]
 8002e04:	4313      	orrs	r3, r2
 8002e06:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8002e08:	683b      	ldr	r3, [r7, #0]
 8002e0a:	691b      	ldr	r3, [r3, #16]
 8002e0c:	011a      	lsls	r2, r3, #4
 8002e0e:	683b      	ldr	r3, [r7, #0]
 8002e10:	6a1b      	ldr	r3, [r3, #32]
 8002e12:	031b      	lsls	r3, r3, #12
 8002e14:	4313      	orrs	r3, r2
 8002e16:	693a      	ldr	r2, [r7, #16]
 8002e18:	4313      	orrs	r3, r2
 8002e1a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8002e22:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8002e2a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8002e2c:	683b      	ldr	r3, [r7, #0]
 8002e2e:	685a      	ldr	r2, [r3, #4]
 8002e30:	683b      	ldr	r3, [r7, #0]
 8002e32:	695b      	ldr	r3, [r3, #20]
 8002e34:	011b      	lsls	r3, r3, #4
 8002e36:	4313      	orrs	r3, r2
 8002e38:	68fa      	ldr	r2, [r7, #12]
 8002e3a:	4313      	orrs	r3, r2
 8002e3c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	697a      	ldr	r2, [r7, #20]
 8002e44:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	693a      	ldr	r2, [r7, #16]
 8002e4c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	68fa      	ldr	r2, [r7, #12]
 8002e54:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	2201      	movs	r2, #1
 8002e5a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	2201      	movs	r2, #1
 8002e62:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	2201      	movs	r2, #1
 8002e6a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	2201      	movs	r2, #1
 8002e72:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	2201      	movs	r2, #1
 8002e7a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	2201      	movs	r2, #1
 8002e82:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002e86:	2300      	movs	r3, #0
}
 8002e88:	4618      	mov	r0, r3
 8002e8a:	3718      	adds	r7, #24
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	bd80      	pop	{r7, pc}

08002e90 <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002e90:	b580      	push	{r7, lr}
 8002e92:	b084      	sub	sp, #16
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	6078      	str	r0, [r7, #4]
 8002e98:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002ea0:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002ea8:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002eb0:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8002eb8:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8002eba:	683b      	ldr	r3, [r7, #0]
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d110      	bne.n	8002ee2 <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8002ec0:	7bfb      	ldrb	r3, [r7, #15]
 8002ec2:	2b01      	cmp	r3, #1
 8002ec4:	d102      	bne.n	8002ecc <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8002ec6:	7b7b      	ldrb	r3, [r7, #13]
 8002ec8:	2b01      	cmp	r3, #1
 8002eca:	d001      	beq.n	8002ed0 <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 8002ecc:	2301      	movs	r3, #1
 8002ece:	e089      	b.n	8002fe4 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	2202      	movs	r2, #2
 8002ed4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	2202      	movs	r2, #2
 8002edc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002ee0:	e031      	b.n	8002f46 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8002ee2:	683b      	ldr	r3, [r7, #0]
 8002ee4:	2b04      	cmp	r3, #4
 8002ee6:	d110      	bne.n	8002f0a <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8002ee8:	7bbb      	ldrb	r3, [r7, #14]
 8002eea:	2b01      	cmp	r3, #1
 8002eec:	d102      	bne.n	8002ef4 <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8002eee:	7b3b      	ldrb	r3, [r7, #12]
 8002ef0:	2b01      	cmp	r3, #1
 8002ef2:	d001      	beq.n	8002ef8 <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 8002ef4:	2301      	movs	r3, #1
 8002ef6:	e075      	b.n	8002fe4 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	2202      	movs	r2, #2
 8002efc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	2202      	movs	r2, #2
 8002f04:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002f08:	e01d      	b.n	8002f46 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8002f0a:	7bfb      	ldrb	r3, [r7, #15]
 8002f0c:	2b01      	cmp	r3, #1
 8002f0e:	d108      	bne.n	8002f22 <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8002f10:	7bbb      	ldrb	r3, [r7, #14]
 8002f12:	2b01      	cmp	r3, #1
 8002f14:	d105      	bne.n	8002f22 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8002f16:	7b7b      	ldrb	r3, [r7, #13]
 8002f18:	2b01      	cmp	r3, #1
 8002f1a:	d102      	bne.n	8002f22 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8002f1c:	7b3b      	ldrb	r3, [r7, #12]
 8002f1e:	2b01      	cmp	r3, #1
 8002f20:	d001      	beq.n	8002f26 <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 8002f22:	2301      	movs	r3, #1
 8002f24:	e05e      	b.n	8002fe4 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	2202      	movs	r2, #2
 8002f2a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	2202      	movs	r2, #2
 8002f32:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	2202      	movs	r2, #2
 8002f3a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	2202      	movs	r2, #2
 8002f42:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 8002f46:	683b      	ldr	r3, [r7, #0]
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d003      	beq.n	8002f54 <HAL_TIM_Encoder_Start_IT+0xc4>
 8002f4c:	683b      	ldr	r3, [r7, #0]
 8002f4e:	2b04      	cmp	r3, #4
 8002f50:	d010      	beq.n	8002f74 <HAL_TIM_Encoder_Start_IT+0xe4>
 8002f52:	e01f      	b.n	8002f94 <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	2201      	movs	r2, #1
 8002f5a:	2100      	movs	r1, #0
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	f000 fa09 	bl	8003374 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	68da      	ldr	r2, [r3, #12]
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f042 0202 	orr.w	r2, r2, #2
 8002f70:	60da      	str	r2, [r3, #12]
      break;
 8002f72:	e02e      	b.n	8002fd2 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	2201      	movs	r2, #1
 8002f7a:	2104      	movs	r1, #4
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	f000 f9f9 	bl	8003374 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	68da      	ldr	r2, [r3, #12]
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f042 0204 	orr.w	r2, r2, #4
 8002f90:	60da      	str	r2, [r3, #12]
      break;
 8002f92:	e01e      	b.n	8002fd2 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	2201      	movs	r2, #1
 8002f9a:	2100      	movs	r1, #0
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	f000 f9e9 	bl	8003374 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	2201      	movs	r2, #1
 8002fa8:	2104      	movs	r1, #4
 8002faa:	4618      	mov	r0, r3
 8002fac:	f000 f9e2 	bl	8003374 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	68da      	ldr	r2, [r3, #12]
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f042 0202 	orr.w	r2, r2, #2
 8002fbe:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	68da      	ldr	r2, [r3, #12]
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f042 0204 	orr.w	r2, r2, #4
 8002fce:	60da      	str	r2, [r3, #12]
      break;
 8002fd0:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	681a      	ldr	r2, [r3, #0]
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f042 0201 	orr.w	r2, r2, #1
 8002fe0:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8002fe2:	2300      	movs	r3, #0
}
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	3710      	adds	r7, #16
 8002fe8:	46bd      	mov	sp, r7
 8002fea:	bd80      	pop	{r7, pc}

08002fec <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002fec:	b580      	push	{r7, lr}
 8002fee:	b084      	sub	sp, #16
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	68db      	ldr	r3, [r3, #12]
 8002ffa:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	691b      	ldr	r3, [r3, #16]
 8003002:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003004:	68bb      	ldr	r3, [r7, #8]
 8003006:	f003 0302 	and.w	r3, r3, #2
 800300a:	2b00      	cmp	r3, #0
 800300c:	d020      	beq.n	8003050 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	f003 0302 	and.w	r3, r3, #2
 8003014:	2b00      	cmp	r3, #0
 8003016:	d01b      	beq.n	8003050 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f06f 0202 	mvn.w	r2, #2
 8003020:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	2201      	movs	r2, #1
 8003026:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	699b      	ldr	r3, [r3, #24]
 800302e:	f003 0303 	and.w	r3, r3, #3
 8003032:	2b00      	cmp	r3, #0
 8003034:	d003      	beq.n	800303e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003036:	6878      	ldr	r0, [r7, #4]
 8003038:	f7fd fa5c 	bl	80004f4 <HAL_TIM_IC_CaptureCallback>
 800303c:	e005      	b.n	800304a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800303e:	6878      	ldr	r0, [r7, #4]
 8003040:	f000 f8ce 	bl	80031e0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003044:	6878      	ldr	r0, [r7, #4]
 8003046:	f000 f8d5 	bl	80031f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	2200      	movs	r2, #0
 800304e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003050:	68bb      	ldr	r3, [r7, #8]
 8003052:	f003 0304 	and.w	r3, r3, #4
 8003056:	2b00      	cmp	r3, #0
 8003058:	d020      	beq.n	800309c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	f003 0304 	and.w	r3, r3, #4
 8003060:	2b00      	cmp	r3, #0
 8003062:	d01b      	beq.n	800309c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f06f 0204 	mvn.w	r2, #4
 800306c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	2202      	movs	r2, #2
 8003072:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	699b      	ldr	r3, [r3, #24]
 800307a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800307e:	2b00      	cmp	r3, #0
 8003080:	d003      	beq.n	800308a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003082:	6878      	ldr	r0, [r7, #4]
 8003084:	f7fd fa36 	bl	80004f4 <HAL_TIM_IC_CaptureCallback>
 8003088:	e005      	b.n	8003096 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800308a:	6878      	ldr	r0, [r7, #4]
 800308c:	f000 f8a8 	bl	80031e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003090:	6878      	ldr	r0, [r7, #4]
 8003092:	f000 f8af 	bl	80031f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	2200      	movs	r2, #0
 800309a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800309c:	68bb      	ldr	r3, [r7, #8]
 800309e:	f003 0308 	and.w	r3, r3, #8
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d020      	beq.n	80030e8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	f003 0308 	and.w	r3, r3, #8
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d01b      	beq.n	80030e8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f06f 0208 	mvn.w	r2, #8
 80030b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	2204      	movs	r2, #4
 80030be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	69db      	ldr	r3, [r3, #28]
 80030c6:	f003 0303 	and.w	r3, r3, #3
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d003      	beq.n	80030d6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80030ce:	6878      	ldr	r0, [r7, #4]
 80030d0:	f7fd fa10 	bl	80004f4 <HAL_TIM_IC_CaptureCallback>
 80030d4:	e005      	b.n	80030e2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80030d6:	6878      	ldr	r0, [r7, #4]
 80030d8:	f000 f882 	bl	80031e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030dc:	6878      	ldr	r0, [r7, #4]
 80030de:	f000 f889 	bl	80031f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	2200      	movs	r2, #0
 80030e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80030e8:	68bb      	ldr	r3, [r7, #8]
 80030ea:	f003 0310 	and.w	r3, r3, #16
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d020      	beq.n	8003134 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	f003 0310 	and.w	r3, r3, #16
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d01b      	beq.n	8003134 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f06f 0210 	mvn.w	r2, #16
 8003104:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	2208      	movs	r2, #8
 800310a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	69db      	ldr	r3, [r3, #28]
 8003112:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003116:	2b00      	cmp	r3, #0
 8003118:	d003      	beq.n	8003122 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800311a:	6878      	ldr	r0, [r7, #4]
 800311c:	f7fd f9ea 	bl	80004f4 <HAL_TIM_IC_CaptureCallback>
 8003120:	e005      	b.n	800312e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003122:	6878      	ldr	r0, [r7, #4]
 8003124:	f000 f85c 	bl	80031e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003128:	6878      	ldr	r0, [r7, #4]
 800312a:	f000 f863 	bl	80031f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	2200      	movs	r2, #0
 8003132:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003134:	68bb      	ldr	r3, [r7, #8]
 8003136:	f003 0301 	and.w	r3, r3, #1
 800313a:	2b00      	cmp	r3, #0
 800313c:	d00c      	beq.n	8003158 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	f003 0301 	and.w	r3, r3, #1
 8003144:	2b00      	cmp	r3, #0
 8003146:	d007      	beq.n	8003158 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f06f 0201 	mvn.w	r2, #1
 8003150:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003152:	6878      	ldr	r0, [r7, #4]
 8003154:	f000 f83a 	bl	80031cc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003158:	68bb      	ldr	r3, [r7, #8]
 800315a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800315e:	2b00      	cmp	r3, #0
 8003160:	d00c      	beq.n	800317c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003168:	2b00      	cmp	r3, #0
 800316a:	d007      	beq.n	800317c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003174:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003176:	6878      	ldr	r0, [r7, #4]
 8003178:	f000 f9a8 	bl	80034cc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800317c:	68bb      	ldr	r3, [r7, #8]
 800317e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003182:	2b00      	cmp	r3, #0
 8003184:	d00c      	beq.n	80031a0 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800318c:	2b00      	cmp	r3, #0
 800318e:	d007      	beq.n	80031a0 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003198:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800319a:	6878      	ldr	r0, [r7, #4]
 800319c:	f000 f834 	bl	8003208 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80031a0:	68bb      	ldr	r3, [r7, #8]
 80031a2:	f003 0320 	and.w	r3, r3, #32
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d00c      	beq.n	80031c4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	f003 0320 	and.w	r3, r3, #32
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d007      	beq.n	80031c4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f06f 0220 	mvn.w	r2, #32
 80031bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80031be:	6878      	ldr	r0, [r7, #4]
 80031c0:	f000 f97a 	bl	80034b8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80031c4:	bf00      	nop
 80031c6:	3710      	adds	r7, #16
 80031c8:	46bd      	mov	sp, r7
 80031ca:	bd80      	pop	{r7, pc}

080031cc <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80031cc:	b480      	push	{r7}
 80031ce:	b083      	sub	sp, #12
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80031d4:	bf00      	nop
 80031d6:	370c      	adds	r7, #12
 80031d8:	46bd      	mov	sp, r7
 80031da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031de:	4770      	bx	lr

080031e0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80031e0:	b480      	push	{r7}
 80031e2:	b083      	sub	sp, #12
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80031e8:	bf00      	nop
 80031ea:	370c      	adds	r7, #12
 80031ec:	46bd      	mov	sp, r7
 80031ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f2:	4770      	bx	lr

080031f4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80031f4:	b480      	push	{r7}
 80031f6:	b083      	sub	sp, #12
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80031fc:	bf00      	nop
 80031fe:	370c      	adds	r7, #12
 8003200:	46bd      	mov	sp, r7
 8003202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003206:	4770      	bx	lr

08003208 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003208:	b480      	push	{r7}
 800320a:	b083      	sub	sp, #12
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003210:	bf00      	nop
 8003212:	370c      	adds	r7, #12
 8003214:	46bd      	mov	sp, r7
 8003216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321a:	4770      	bx	lr

0800321c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800321c:	b480      	push	{r7}
 800321e:	b085      	sub	sp, #20
 8003220:	af00      	add	r7, sp, #0
 8003222:	6078      	str	r0, [r7, #4]
 8003224:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	4a46      	ldr	r2, [pc, #280]	@ (8003348 <TIM_Base_SetConfig+0x12c>)
 8003230:	4293      	cmp	r3, r2
 8003232:	d013      	beq.n	800325c <TIM_Base_SetConfig+0x40>
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800323a:	d00f      	beq.n	800325c <TIM_Base_SetConfig+0x40>
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	4a43      	ldr	r2, [pc, #268]	@ (800334c <TIM_Base_SetConfig+0x130>)
 8003240:	4293      	cmp	r3, r2
 8003242:	d00b      	beq.n	800325c <TIM_Base_SetConfig+0x40>
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	4a42      	ldr	r2, [pc, #264]	@ (8003350 <TIM_Base_SetConfig+0x134>)
 8003248:	4293      	cmp	r3, r2
 800324a:	d007      	beq.n	800325c <TIM_Base_SetConfig+0x40>
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	4a41      	ldr	r2, [pc, #260]	@ (8003354 <TIM_Base_SetConfig+0x138>)
 8003250:	4293      	cmp	r3, r2
 8003252:	d003      	beq.n	800325c <TIM_Base_SetConfig+0x40>
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	4a40      	ldr	r2, [pc, #256]	@ (8003358 <TIM_Base_SetConfig+0x13c>)
 8003258:	4293      	cmp	r3, r2
 800325a:	d108      	bne.n	800326e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003262:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003264:	683b      	ldr	r3, [r7, #0]
 8003266:	685b      	ldr	r3, [r3, #4]
 8003268:	68fa      	ldr	r2, [r7, #12]
 800326a:	4313      	orrs	r3, r2
 800326c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	4a35      	ldr	r2, [pc, #212]	@ (8003348 <TIM_Base_SetConfig+0x12c>)
 8003272:	4293      	cmp	r3, r2
 8003274:	d02b      	beq.n	80032ce <TIM_Base_SetConfig+0xb2>
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800327c:	d027      	beq.n	80032ce <TIM_Base_SetConfig+0xb2>
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	4a32      	ldr	r2, [pc, #200]	@ (800334c <TIM_Base_SetConfig+0x130>)
 8003282:	4293      	cmp	r3, r2
 8003284:	d023      	beq.n	80032ce <TIM_Base_SetConfig+0xb2>
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	4a31      	ldr	r2, [pc, #196]	@ (8003350 <TIM_Base_SetConfig+0x134>)
 800328a:	4293      	cmp	r3, r2
 800328c:	d01f      	beq.n	80032ce <TIM_Base_SetConfig+0xb2>
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	4a30      	ldr	r2, [pc, #192]	@ (8003354 <TIM_Base_SetConfig+0x138>)
 8003292:	4293      	cmp	r3, r2
 8003294:	d01b      	beq.n	80032ce <TIM_Base_SetConfig+0xb2>
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	4a2f      	ldr	r2, [pc, #188]	@ (8003358 <TIM_Base_SetConfig+0x13c>)
 800329a:	4293      	cmp	r3, r2
 800329c:	d017      	beq.n	80032ce <TIM_Base_SetConfig+0xb2>
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	4a2e      	ldr	r2, [pc, #184]	@ (800335c <TIM_Base_SetConfig+0x140>)
 80032a2:	4293      	cmp	r3, r2
 80032a4:	d013      	beq.n	80032ce <TIM_Base_SetConfig+0xb2>
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	4a2d      	ldr	r2, [pc, #180]	@ (8003360 <TIM_Base_SetConfig+0x144>)
 80032aa:	4293      	cmp	r3, r2
 80032ac:	d00f      	beq.n	80032ce <TIM_Base_SetConfig+0xb2>
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	4a2c      	ldr	r2, [pc, #176]	@ (8003364 <TIM_Base_SetConfig+0x148>)
 80032b2:	4293      	cmp	r3, r2
 80032b4:	d00b      	beq.n	80032ce <TIM_Base_SetConfig+0xb2>
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	4a2b      	ldr	r2, [pc, #172]	@ (8003368 <TIM_Base_SetConfig+0x14c>)
 80032ba:	4293      	cmp	r3, r2
 80032bc:	d007      	beq.n	80032ce <TIM_Base_SetConfig+0xb2>
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	4a2a      	ldr	r2, [pc, #168]	@ (800336c <TIM_Base_SetConfig+0x150>)
 80032c2:	4293      	cmp	r3, r2
 80032c4:	d003      	beq.n	80032ce <TIM_Base_SetConfig+0xb2>
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	4a29      	ldr	r2, [pc, #164]	@ (8003370 <TIM_Base_SetConfig+0x154>)
 80032ca:	4293      	cmp	r3, r2
 80032cc:	d108      	bne.n	80032e0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80032d4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80032d6:	683b      	ldr	r3, [r7, #0]
 80032d8:	68db      	ldr	r3, [r3, #12]
 80032da:	68fa      	ldr	r2, [r7, #12]
 80032dc:	4313      	orrs	r3, r2
 80032de:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80032e6:	683b      	ldr	r3, [r7, #0]
 80032e8:	695b      	ldr	r3, [r3, #20]
 80032ea:	4313      	orrs	r3, r2
 80032ec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	68fa      	ldr	r2, [r7, #12]
 80032f2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80032f4:	683b      	ldr	r3, [r7, #0]
 80032f6:	689a      	ldr	r2, [r3, #8]
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80032fc:	683b      	ldr	r3, [r7, #0]
 80032fe:	681a      	ldr	r2, [r3, #0]
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	4a10      	ldr	r2, [pc, #64]	@ (8003348 <TIM_Base_SetConfig+0x12c>)
 8003308:	4293      	cmp	r3, r2
 800330a:	d003      	beq.n	8003314 <TIM_Base_SetConfig+0xf8>
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	4a12      	ldr	r2, [pc, #72]	@ (8003358 <TIM_Base_SetConfig+0x13c>)
 8003310:	4293      	cmp	r3, r2
 8003312:	d103      	bne.n	800331c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003314:	683b      	ldr	r3, [r7, #0]
 8003316:	691a      	ldr	r2, [r3, #16]
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2201      	movs	r2, #1
 8003320:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	691b      	ldr	r3, [r3, #16]
 8003326:	f003 0301 	and.w	r3, r3, #1
 800332a:	2b01      	cmp	r3, #1
 800332c:	d105      	bne.n	800333a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	691b      	ldr	r3, [r3, #16]
 8003332:	f023 0201 	bic.w	r2, r3, #1
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	611a      	str	r2, [r3, #16]
  }
}
 800333a:	bf00      	nop
 800333c:	3714      	adds	r7, #20
 800333e:	46bd      	mov	sp, r7
 8003340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003344:	4770      	bx	lr
 8003346:	bf00      	nop
 8003348:	40010000 	.word	0x40010000
 800334c:	40000400 	.word	0x40000400
 8003350:	40000800 	.word	0x40000800
 8003354:	40000c00 	.word	0x40000c00
 8003358:	40010400 	.word	0x40010400
 800335c:	40014000 	.word	0x40014000
 8003360:	40014400 	.word	0x40014400
 8003364:	40014800 	.word	0x40014800
 8003368:	40001800 	.word	0x40001800
 800336c:	40001c00 	.word	0x40001c00
 8003370:	40002000 	.word	0x40002000

08003374 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003374:	b480      	push	{r7}
 8003376:	b087      	sub	sp, #28
 8003378:	af00      	add	r7, sp, #0
 800337a:	60f8      	str	r0, [r7, #12]
 800337c:	60b9      	str	r1, [r7, #8]
 800337e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003380:	68bb      	ldr	r3, [r7, #8]
 8003382:	f003 031f 	and.w	r3, r3, #31
 8003386:	2201      	movs	r2, #1
 8003388:	fa02 f303 	lsl.w	r3, r2, r3
 800338c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	6a1a      	ldr	r2, [r3, #32]
 8003392:	697b      	ldr	r3, [r7, #20]
 8003394:	43db      	mvns	r3, r3
 8003396:	401a      	ands	r2, r3
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	6a1a      	ldr	r2, [r3, #32]
 80033a0:	68bb      	ldr	r3, [r7, #8]
 80033a2:	f003 031f 	and.w	r3, r3, #31
 80033a6:	6879      	ldr	r1, [r7, #4]
 80033a8:	fa01 f303 	lsl.w	r3, r1, r3
 80033ac:	431a      	orrs	r2, r3
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	621a      	str	r2, [r3, #32]
}
 80033b2:	bf00      	nop
 80033b4:	371c      	adds	r7, #28
 80033b6:	46bd      	mov	sp, r7
 80033b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033bc:	4770      	bx	lr
	...

080033c0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80033c0:	b480      	push	{r7}
 80033c2:	b085      	sub	sp, #20
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	6078      	str	r0, [r7, #4]
 80033c8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80033d0:	2b01      	cmp	r3, #1
 80033d2:	d101      	bne.n	80033d8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80033d4:	2302      	movs	r3, #2
 80033d6:	e05a      	b.n	800348e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	2201      	movs	r2, #1
 80033dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	2202      	movs	r2, #2
 80033e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	685b      	ldr	r3, [r3, #4]
 80033ee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	689b      	ldr	r3, [r3, #8]
 80033f6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80033fe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003400:	683b      	ldr	r3, [r7, #0]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	68fa      	ldr	r2, [r7, #12]
 8003406:	4313      	orrs	r3, r2
 8003408:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	68fa      	ldr	r2, [r7, #12]
 8003410:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	4a21      	ldr	r2, [pc, #132]	@ (800349c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003418:	4293      	cmp	r3, r2
 800341a:	d022      	beq.n	8003462 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003424:	d01d      	beq.n	8003462 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	4a1d      	ldr	r2, [pc, #116]	@ (80034a0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800342c:	4293      	cmp	r3, r2
 800342e:	d018      	beq.n	8003462 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	4a1b      	ldr	r2, [pc, #108]	@ (80034a4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003436:	4293      	cmp	r3, r2
 8003438:	d013      	beq.n	8003462 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	4a1a      	ldr	r2, [pc, #104]	@ (80034a8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003440:	4293      	cmp	r3, r2
 8003442:	d00e      	beq.n	8003462 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	4a18      	ldr	r2, [pc, #96]	@ (80034ac <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800344a:	4293      	cmp	r3, r2
 800344c:	d009      	beq.n	8003462 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	4a17      	ldr	r2, [pc, #92]	@ (80034b0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003454:	4293      	cmp	r3, r2
 8003456:	d004      	beq.n	8003462 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	4a15      	ldr	r2, [pc, #84]	@ (80034b4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800345e:	4293      	cmp	r3, r2
 8003460:	d10c      	bne.n	800347c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003462:	68bb      	ldr	r3, [r7, #8]
 8003464:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003468:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800346a:	683b      	ldr	r3, [r7, #0]
 800346c:	685b      	ldr	r3, [r3, #4]
 800346e:	68ba      	ldr	r2, [r7, #8]
 8003470:	4313      	orrs	r3, r2
 8003472:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	68ba      	ldr	r2, [r7, #8]
 800347a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2201      	movs	r2, #1
 8003480:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2200      	movs	r2, #0
 8003488:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800348c:	2300      	movs	r3, #0
}
 800348e:	4618      	mov	r0, r3
 8003490:	3714      	adds	r7, #20
 8003492:	46bd      	mov	sp, r7
 8003494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003498:	4770      	bx	lr
 800349a:	bf00      	nop
 800349c:	40010000 	.word	0x40010000
 80034a0:	40000400 	.word	0x40000400
 80034a4:	40000800 	.word	0x40000800
 80034a8:	40000c00 	.word	0x40000c00
 80034ac:	40010400 	.word	0x40010400
 80034b0:	40014000 	.word	0x40014000
 80034b4:	40001800 	.word	0x40001800

080034b8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80034b8:	b480      	push	{r7}
 80034ba:	b083      	sub	sp, #12
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80034c0:	bf00      	nop
 80034c2:	370c      	adds	r7, #12
 80034c4:	46bd      	mov	sp, r7
 80034c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ca:	4770      	bx	lr

080034cc <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80034cc:	b480      	push	{r7}
 80034ce:	b083      	sub	sp, #12
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80034d4:	bf00      	nop
 80034d6:	370c      	adds	r7, #12
 80034d8:	46bd      	mov	sp, r7
 80034da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034de:	4770      	bx	lr

080034e0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80034e0:	b084      	sub	sp, #16
 80034e2:	b580      	push	{r7, lr}
 80034e4:	b084      	sub	sp, #16
 80034e6:	af00      	add	r7, sp, #0
 80034e8:	6078      	str	r0, [r7, #4]
 80034ea:	f107 001c 	add.w	r0, r7, #28
 80034ee:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80034f2:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80034f6:	2b01      	cmp	r3, #1
 80034f8:	d123      	bne.n	8003542 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034fe:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	68db      	ldr	r3, [r3, #12]
 800350a:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 800350e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003512:	687a      	ldr	r2, [r7, #4]
 8003514:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	68db      	ldr	r3, [r3, #12]
 800351a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003522:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8003526:	2b01      	cmp	r3, #1
 8003528:	d105      	bne.n	8003536 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	68db      	ldr	r3, [r3, #12]
 800352e:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003536:	6878      	ldr	r0, [r7, #4]
 8003538:	f001 fae8 	bl	8004b0c <USB_CoreReset>
 800353c:	4603      	mov	r3, r0
 800353e:	73fb      	strb	r3, [r7, #15]
 8003540:	e01b      	b.n	800357a <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	68db      	ldr	r3, [r3, #12]
 8003546:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800354e:	6878      	ldr	r0, [r7, #4]
 8003550:	f001 fadc 	bl	8004b0c <USB_CoreReset>
 8003554:	4603      	mov	r3, r0
 8003556:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8003558:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800355c:	2b00      	cmp	r3, #0
 800355e:	d106      	bne.n	800356e <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003564:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	639a      	str	r2, [r3, #56]	@ 0x38
 800356c:	e005      	b.n	800357a <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003572:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800357a:	7fbb      	ldrb	r3, [r7, #30]
 800357c:	2b01      	cmp	r3, #1
 800357e:	d10b      	bne.n	8003598 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	689b      	ldr	r3, [r3, #8]
 8003584:	f043 0206 	orr.w	r2, r3, #6
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	689b      	ldr	r3, [r3, #8]
 8003590:	f043 0220 	orr.w	r2, r3, #32
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8003598:	7bfb      	ldrb	r3, [r7, #15]
}
 800359a:	4618      	mov	r0, r3
 800359c:	3710      	adds	r7, #16
 800359e:	46bd      	mov	sp, r7
 80035a0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80035a4:	b004      	add	sp, #16
 80035a6:	4770      	bx	lr

080035a8 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80035a8:	b480      	push	{r7}
 80035aa:	b087      	sub	sp, #28
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	60f8      	str	r0, [r7, #12]
 80035b0:	60b9      	str	r1, [r7, #8]
 80035b2:	4613      	mov	r3, r2
 80035b4:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80035b6:	79fb      	ldrb	r3, [r7, #7]
 80035b8:	2b02      	cmp	r3, #2
 80035ba:	d165      	bne.n	8003688 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80035bc:	68bb      	ldr	r3, [r7, #8]
 80035be:	4a41      	ldr	r2, [pc, #260]	@ (80036c4 <USB_SetTurnaroundTime+0x11c>)
 80035c0:	4293      	cmp	r3, r2
 80035c2:	d906      	bls.n	80035d2 <USB_SetTurnaroundTime+0x2a>
 80035c4:	68bb      	ldr	r3, [r7, #8]
 80035c6:	4a40      	ldr	r2, [pc, #256]	@ (80036c8 <USB_SetTurnaroundTime+0x120>)
 80035c8:	4293      	cmp	r3, r2
 80035ca:	d202      	bcs.n	80035d2 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80035cc:	230f      	movs	r3, #15
 80035ce:	617b      	str	r3, [r7, #20]
 80035d0:	e062      	b.n	8003698 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80035d2:	68bb      	ldr	r3, [r7, #8]
 80035d4:	4a3c      	ldr	r2, [pc, #240]	@ (80036c8 <USB_SetTurnaroundTime+0x120>)
 80035d6:	4293      	cmp	r3, r2
 80035d8:	d306      	bcc.n	80035e8 <USB_SetTurnaroundTime+0x40>
 80035da:	68bb      	ldr	r3, [r7, #8]
 80035dc:	4a3b      	ldr	r2, [pc, #236]	@ (80036cc <USB_SetTurnaroundTime+0x124>)
 80035de:	4293      	cmp	r3, r2
 80035e0:	d202      	bcs.n	80035e8 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80035e2:	230e      	movs	r3, #14
 80035e4:	617b      	str	r3, [r7, #20]
 80035e6:	e057      	b.n	8003698 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80035e8:	68bb      	ldr	r3, [r7, #8]
 80035ea:	4a38      	ldr	r2, [pc, #224]	@ (80036cc <USB_SetTurnaroundTime+0x124>)
 80035ec:	4293      	cmp	r3, r2
 80035ee:	d306      	bcc.n	80035fe <USB_SetTurnaroundTime+0x56>
 80035f0:	68bb      	ldr	r3, [r7, #8]
 80035f2:	4a37      	ldr	r2, [pc, #220]	@ (80036d0 <USB_SetTurnaroundTime+0x128>)
 80035f4:	4293      	cmp	r3, r2
 80035f6:	d202      	bcs.n	80035fe <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80035f8:	230d      	movs	r3, #13
 80035fa:	617b      	str	r3, [r7, #20]
 80035fc:	e04c      	b.n	8003698 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80035fe:	68bb      	ldr	r3, [r7, #8]
 8003600:	4a33      	ldr	r2, [pc, #204]	@ (80036d0 <USB_SetTurnaroundTime+0x128>)
 8003602:	4293      	cmp	r3, r2
 8003604:	d306      	bcc.n	8003614 <USB_SetTurnaroundTime+0x6c>
 8003606:	68bb      	ldr	r3, [r7, #8]
 8003608:	4a32      	ldr	r2, [pc, #200]	@ (80036d4 <USB_SetTurnaroundTime+0x12c>)
 800360a:	4293      	cmp	r3, r2
 800360c:	d802      	bhi.n	8003614 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800360e:	230c      	movs	r3, #12
 8003610:	617b      	str	r3, [r7, #20]
 8003612:	e041      	b.n	8003698 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8003614:	68bb      	ldr	r3, [r7, #8]
 8003616:	4a2f      	ldr	r2, [pc, #188]	@ (80036d4 <USB_SetTurnaroundTime+0x12c>)
 8003618:	4293      	cmp	r3, r2
 800361a:	d906      	bls.n	800362a <USB_SetTurnaroundTime+0x82>
 800361c:	68bb      	ldr	r3, [r7, #8]
 800361e:	4a2e      	ldr	r2, [pc, #184]	@ (80036d8 <USB_SetTurnaroundTime+0x130>)
 8003620:	4293      	cmp	r3, r2
 8003622:	d802      	bhi.n	800362a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8003624:	230b      	movs	r3, #11
 8003626:	617b      	str	r3, [r7, #20]
 8003628:	e036      	b.n	8003698 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800362a:	68bb      	ldr	r3, [r7, #8]
 800362c:	4a2a      	ldr	r2, [pc, #168]	@ (80036d8 <USB_SetTurnaroundTime+0x130>)
 800362e:	4293      	cmp	r3, r2
 8003630:	d906      	bls.n	8003640 <USB_SetTurnaroundTime+0x98>
 8003632:	68bb      	ldr	r3, [r7, #8]
 8003634:	4a29      	ldr	r2, [pc, #164]	@ (80036dc <USB_SetTurnaroundTime+0x134>)
 8003636:	4293      	cmp	r3, r2
 8003638:	d802      	bhi.n	8003640 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800363a:	230a      	movs	r3, #10
 800363c:	617b      	str	r3, [r7, #20]
 800363e:	e02b      	b.n	8003698 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8003640:	68bb      	ldr	r3, [r7, #8]
 8003642:	4a26      	ldr	r2, [pc, #152]	@ (80036dc <USB_SetTurnaroundTime+0x134>)
 8003644:	4293      	cmp	r3, r2
 8003646:	d906      	bls.n	8003656 <USB_SetTurnaroundTime+0xae>
 8003648:	68bb      	ldr	r3, [r7, #8]
 800364a:	4a25      	ldr	r2, [pc, #148]	@ (80036e0 <USB_SetTurnaroundTime+0x138>)
 800364c:	4293      	cmp	r3, r2
 800364e:	d202      	bcs.n	8003656 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8003650:	2309      	movs	r3, #9
 8003652:	617b      	str	r3, [r7, #20]
 8003654:	e020      	b.n	8003698 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8003656:	68bb      	ldr	r3, [r7, #8]
 8003658:	4a21      	ldr	r2, [pc, #132]	@ (80036e0 <USB_SetTurnaroundTime+0x138>)
 800365a:	4293      	cmp	r3, r2
 800365c:	d306      	bcc.n	800366c <USB_SetTurnaroundTime+0xc4>
 800365e:	68bb      	ldr	r3, [r7, #8]
 8003660:	4a20      	ldr	r2, [pc, #128]	@ (80036e4 <USB_SetTurnaroundTime+0x13c>)
 8003662:	4293      	cmp	r3, r2
 8003664:	d802      	bhi.n	800366c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8003666:	2308      	movs	r3, #8
 8003668:	617b      	str	r3, [r7, #20]
 800366a:	e015      	b.n	8003698 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800366c:	68bb      	ldr	r3, [r7, #8]
 800366e:	4a1d      	ldr	r2, [pc, #116]	@ (80036e4 <USB_SetTurnaroundTime+0x13c>)
 8003670:	4293      	cmp	r3, r2
 8003672:	d906      	bls.n	8003682 <USB_SetTurnaroundTime+0xda>
 8003674:	68bb      	ldr	r3, [r7, #8]
 8003676:	4a1c      	ldr	r2, [pc, #112]	@ (80036e8 <USB_SetTurnaroundTime+0x140>)
 8003678:	4293      	cmp	r3, r2
 800367a:	d202      	bcs.n	8003682 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800367c:	2307      	movs	r3, #7
 800367e:	617b      	str	r3, [r7, #20]
 8003680:	e00a      	b.n	8003698 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8003682:	2306      	movs	r3, #6
 8003684:	617b      	str	r3, [r7, #20]
 8003686:	e007      	b.n	8003698 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8003688:	79fb      	ldrb	r3, [r7, #7]
 800368a:	2b00      	cmp	r3, #0
 800368c:	d102      	bne.n	8003694 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800368e:	2309      	movs	r3, #9
 8003690:	617b      	str	r3, [r7, #20]
 8003692:	e001      	b.n	8003698 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8003694:	2309      	movs	r3, #9
 8003696:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	68db      	ldr	r3, [r3, #12]
 800369c:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	68da      	ldr	r2, [r3, #12]
 80036a8:	697b      	ldr	r3, [r7, #20]
 80036aa:	029b      	lsls	r3, r3, #10
 80036ac:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 80036b0:	431a      	orrs	r2, r3
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80036b6:	2300      	movs	r3, #0
}
 80036b8:	4618      	mov	r0, r3
 80036ba:	371c      	adds	r7, #28
 80036bc:	46bd      	mov	sp, r7
 80036be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c2:	4770      	bx	lr
 80036c4:	00d8acbf 	.word	0x00d8acbf
 80036c8:	00e4e1c0 	.word	0x00e4e1c0
 80036cc:	00f42400 	.word	0x00f42400
 80036d0:	01067380 	.word	0x01067380
 80036d4:	011a499f 	.word	0x011a499f
 80036d8:	01312cff 	.word	0x01312cff
 80036dc:	014ca43f 	.word	0x014ca43f
 80036e0:	016e3600 	.word	0x016e3600
 80036e4:	01a6ab1f 	.word	0x01a6ab1f
 80036e8:	01e84800 	.word	0x01e84800

080036ec <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80036ec:	b480      	push	{r7}
 80036ee:	b083      	sub	sp, #12
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	689b      	ldr	r3, [r3, #8]
 80036f8:	f043 0201 	orr.w	r2, r3, #1
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003700:	2300      	movs	r3, #0
}
 8003702:	4618      	mov	r0, r3
 8003704:	370c      	adds	r7, #12
 8003706:	46bd      	mov	sp, r7
 8003708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370c:	4770      	bx	lr

0800370e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800370e:	b480      	push	{r7}
 8003710:	b083      	sub	sp, #12
 8003712:	af00      	add	r7, sp, #0
 8003714:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	689b      	ldr	r3, [r3, #8]
 800371a:	f023 0201 	bic.w	r2, r3, #1
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003722:	2300      	movs	r3, #0
}
 8003724:	4618      	mov	r0, r3
 8003726:	370c      	adds	r7, #12
 8003728:	46bd      	mov	sp, r7
 800372a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372e:	4770      	bx	lr

08003730 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8003730:	b580      	push	{r7, lr}
 8003732:	b084      	sub	sp, #16
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]
 8003738:	460b      	mov	r3, r1
 800373a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800373c:	2300      	movs	r3, #0
 800373e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	68db      	ldr	r3, [r3, #12]
 8003744:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800374c:	78fb      	ldrb	r3, [r7, #3]
 800374e:	2b01      	cmp	r3, #1
 8003750:	d115      	bne.n	800377e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	68db      	ldr	r3, [r3, #12]
 8003756:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800375e:	200a      	movs	r0, #10
 8003760:	f7fd f974 	bl	8000a4c <HAL_Delay>
      ms += 10U;
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	330a      	adds	r3, #10
 8003768:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800376a:	6878      	ldr	r0, [r7, #4]
 800376c:	f001 f93f 	bl	80049ee <USB_GetMode>
 8003770:	4603      	mov	r3, r0
 8003772:	2b01      	cmp	r3, #1
 8003774:	d01e      	beq.n	80037b4 <USB_SetCurrentMode+0x84>
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	2bc7      	cmp	r3, #199	@ 0xc7
 800377a:	d9f0      	bls.n	800375e <USB_SetCurrentMode+0x2e>
 800377c:	e01a      	b.n	80037b4 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800377e:	78fb      	ldrb	r3, [r7, #3]
 8003780:	2b00      	cmp	r3, #0
 8003782:	d115      	bne.n	80037b0 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	68db      	ldr	r3, [r3, #12]
 8003788:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8003790:	200a      	movs	r0, #10
 8003792:	f7fd f95b 	bl	8000a4c <HAL_Delay>
      ms += 10U;
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	330a      	adds	r3, #10
 800379a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800379c:	6878      	ldr	r0, [r7, #4]
 800379e:	f001 f926 	bl	80049ee <USB_GetMode>
 80037a2:	4603      	mov	r3, r0
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d005      	beq.n	80037b4 <USB_SetCurrentMode+0x84>
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	2bc7      	cmp	r3, #199	@ 0xc7
 80037ac:	d9f0      	bls.n	8003790 <USB_SetCurrentMode+0x60>
 80037ae:	e001      	b.n	80037b4 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80037b0:	2301      	movs	r3, #1
 80037b2:	e005      	b.n	80037c0 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	2bc8      	cmp	r3, #200	@ 0xc8
 80037b8:	d101      	bne.n	80037be <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80037ba:	2301      	movs	r3, #1
 80037bc:	e000      	b.n	80037c0 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80037be:	2300      	movs	r3, #0
}
 80037c0:	4618      	mov	r0, r3
 80037c2:	3710      	adds	r7, #16
 80037c4:	46bd      	mov	sp, r7
 80037c6:	bd80      	pop	{r7, pc}

080037c8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80037c8:	b084      	sub	sp, #16
 80037ca:	b580      	push	{r7, lr}
 80037cc:	b086      	sub	sp, #24
 80037ce:	af00      	add	r7, sp, #0
 80037d0:	6078      	str	r0, [r7, #4]
 80037d2:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80037d6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80037da:	2300      	movs	r3, #0
 80037dc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80037e2:	2300      	movs	r3, #0
 80037e4:	613b      	str	r3, [r7, #16]
 80037e6:	e009      	b.n	80037fc <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80037e8:	687a      	ldr	r2, [r7, #4]
 80037ea:	693b      	ldr	r3, [r7, #16]
 80037ec:	3340      	adds	r3, #64	@ 0x40
 80037ee:	009b      	lsls	r3, r3, #2
 80037f0:	4413      	add	r3, r2
 80037f2:	2200      	movs	r2, #0
 80037f4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80037f6:	693b      	ldr	r3, [r7, #16]
 80037f8:	3301      	adds	r3, #1
 80037fa:	613b      	str	r3, [r7, #16]
 80037fc:	693b      	ldr	r3, [r7, #16]
 80037fe:	2b0e      	cmp	r3, #14
 8003800:	d9f2      	bls.n	80037e8 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8003802:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8003806:	2b00      	cmp	r3, #0
 8003808:	d11c      	bne.n	8003844 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003810:	685b      	ldr	r3, [r3, #4]
 8003812:	68fa      	ldr	r2, [r7, #12]
 8003814:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003818:	f043 0302 	orr.w	r3, r3, #2
 800381c:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003822:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800382e:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800383a:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	639a      	str	r2, [r3, #56]	@ 0x38
 8003842:	e00b      	b.n	800385c <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003848:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003854:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8003862:	461a      	mov	r2, r3
 8003864:	2300      	movs	r3, #0
 8003866:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003868:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800386c:	2b01      	cmp	r3, #1
 800386e:	d10d      	bne.n	800388c <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8003870:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003874:	2b00      	cmp	r3, #0
 8003876:	d104      	bne.n	8003882 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8003878:	2100      	movs	r1, #0
 800387a:	6878      	ldr	r0, [r7, #4]
 800387c:	f000 f968 	bl	8003b50 <USB_SetDevSpeed>
 8003880:	e008      	b.n	8003894 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003882:	2101      	movs	r1, #1
 8003884:	6878      	ldr	r0, [r7, #4]
 8003886:	f000 f963 	bl	8003b50 <USB_SetDevSpeed>
 800388a:	e003      	b.n	8003894 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800388c:	2103      	movs	r1, #3
 800388e:	6878      	ldr	r0, [r7, #4]
 8003890:	f000 f95e 	bl	8003b50 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003894:	2110      	movs	r1, #16
 8003896:	6878      	ldr	r0, [r7, #4]
 8003898:	f000 f8fa 	bl	8003a90 <USB_FlushTxFifo>
 800389c:	4603      	mov	r3, r0
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d001      	beq.n	80038a6 <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 80038a2:	2301      	movs	r3, #1
 80038a4:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80038a6:	6878      	ldr	r0, [r7, #4]
 80038a8:	f000 f924 	bl	8003af4 <USB_FlushRxFifo>
 80038ac:	4603      	mov	r3, r0
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d001      	beq.n	80038b6 <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 80038b2:	2301      	movs	r3, #1
 80038b4:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80038bc:	461a      	mov	r2, r3
 80038be:	2300      	movs	r3, #0
 80038c0:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80038c8:	461a      	mov	r2, r3
 80038ca:	2300      	movs	r3, #0
 80038cc:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80038d4:	461a      	mov	r2, r3
 80038d6:	2300      	movs	r3, #0
 80038d8:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80038da:	2300      	movs	r3, #0
 80038dc:	613b      	str	r3, [r7, #16]
 80038de:	e043      	b.n	8003968 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80038e0:	693b      	ldr	r3, [r7, #16]
 80038e2:	015a      	lsls	r2, r3, #5
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	4413      	add	r3, r2
 80038e8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80038f2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80038f6:	d118      	bne.n	800392a <USB_DevInit+0x162>
    {
      if (i == 0U)
 80038f8:	693b      	ldr	r3, [r7, #16]
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d10a      	bne.n	8003914 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80038fe:	693b      	ldr	r3, [r7, #16]
 8003900:	015a      	lsls	r2, r3, #5
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	4413      	add	r3, r2
 8003906:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800390a:	461a      	mov	r2, r3
 800390c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8003910:	6013      	str	r3, [r2, #0]
 8003912:	e013      	b.n	800393c <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003914:	693b      	ldr	r3, [r7, #16]
 8003916:	015a      	lsls	r2, r3, #5
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	4413      	add	r3, r2
 800391c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003920:	461a      	mov	r2, r3
 8003922:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8003926:	6013      	str	r3, [r2, #0]
 8003928:	e008      	b.n	800393c <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800392a:	693b      	ldr	r3, [r7, #16]
 800392c:	015a      	lsls	r2, r3, #5
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	4413      	add	r3, r2
 8003932:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003936:	461a      	mov	r2, r3
 8003938:	2300      	movs	r3, #0
 800393a:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800393c:	693b      	ldr	r3, [r7, #16]
 800393e:	015a      	lsls	r2, r3, #5
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	4413      	add	r3, r2
 8003944:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003948:	461a      	mov	r2, r3
 800394a:	2300      	movs	r3, #0
 800394c:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800394e:	693b      	ldr	r3, [r7, #16]
 8003950:	015a      	lsls	r2, r3, #5
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	4413      	add	r3, r2
 8003956:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800395a:	461a      	mov	r2, r3
 800395c:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003960:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003962:	693b      	ldr	r3, [r7, #16]
 8003964:	3301      	adds	r3, #1
 8003966:	613b      	str	r3, [r7, #16]
 8003968:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800396c:	461a      	mov	r2, r3
 800396e:	693b      	ldr	r3, [r7, #16]
 8003970:	4293      	cmp	r3, r2
 8003972:	d3b5      	bcc.n	80038e0 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003974:	2300      	movs	r3, #0
 8003976:	613b      	str	r3, [r7, #16]
 8003978:	e043      	b.n	8003a02 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800397a:	693b      	ldr	r3, [r7, #16]
 800397c:	015a      	lsls	r2, r3, #5
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	4413      	add	r3, r2
 8003982:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800398c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003990:	d118      	bne.n	80039c4 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8003992:	693b      	ldr	r3, [r7, #16]
 8003994:	2b00      	cmp	r3, #0
 8003996:	d10a      	bne.n	80039ae <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003998:	693b      	ldr	r3, [r7, #16]
 800399a:	015a      	lsls	r2, r3, #5
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	4413      	add	r3, r2
 80039a0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80039a4:	461a      	mov	r2, r3
 80039a6:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80039aa:	6013      	str	r3, [r2, #0]
 80039ac:	e013      	b.n	80039d6 <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80039ae:	693b      	ldr	r3, [r7, #16]
 80039b0:	015a      	lsls	r2, r3, #5
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	4413      	add	r3, r2
 80039b6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80039ba:	461a      	mov	r2, r3
 80039bc:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80039c0:	6013      	str	r3, [r2, #0]
 80039c2:	e008      	b.n	80039d6 <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80039c4:	693b      	ldr	r3, [r7, #16]
 80039c6:	015a      	lsls	r2, r3, #5
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	4413      	add	r3, r2
 80039cc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80039d0:	461a      	mov	r2, r3
 80039d2:	2300      	movs	r3, #0
 80039d4:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80039d6:	693b      	ldr	r3, [r7, #16]
 80039d8:	015a      	lsls	r2, r3, #5
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	4413      	add	r3, r2
 80039de:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80039e2:	461a      	mov	r2, r3
 80039e4:	2300      	movs	r3, #0
 80039e6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80039e8:	693b      	ldr	r3, [r7, #16]
 80039ea:	015a      	lsls	r2, r3, #5
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	4413      	add	r3, r2
 80039f0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80039f4:	461a      	mov	r2, r3
 80039f6:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80039fa:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80039fc:	693b      	ldr	r3, [r7, #16]
 80039fe:	3301      	adds	r3, #1
 8003a00:	613b      	str	r3, [r7, #16]
 8003a02:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8003a06:	461a      	mov	r2, r3
 8003a08:	693b      	ldr	r3, [r7, #16]
 8003a0a:	4293      	cmp	r3, r2
 8003a0c:	d3b5      	bcc.n	800397a <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003a14:	691b      	ldr	r3, [r3, #16]
 8003a16:	68fa      	ldr	r2, [r7, #12]
 8003a18:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003a1c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003a20:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	2200      	movs	r2, #0
 8003a26:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8003a2e:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8003a30:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d105      	bne.n	8003a44 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	699b      	ldr	r3, [r3, #24]
 8003a3c:	f043 0210 	orr.w	r2, r3, #16
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	699a      	ldr	r2, [r3, #24]
 8003a48:	4b10      	ldr	r3, [pc, #64]	@ (8003a8c <USB_DevInit+0x2c4>)
 8003a4a:	4313      	orrs	r3, r2
 8003a4c:	687a      	ldr	r2, [r7, #4]
 8003a4e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8003a50:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d005      	beq.n	8003a64 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	699b      	ldr	r3, [r3, #24]
 8003a5c:	f043 0208 	orr.w	r2, r3, #8
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8003a64:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8003a68:	2b01      	cmp	r3, #1
 8003a6a:	d107      	bne.n	8003a7c <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	699b      	ldr	r3, [r3, #24]
 8003a70:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003a74:	f043 0304 	orr.w	r3, r3, #4
 8003a78:	687a      	ldr	r2, [r7, #4]
 8003a7a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8003a7c:	7dfb      	ldrb	r3, [r7, #23]
}
 8003a7e:	4618      	mov	r0, r3
 8003a80:	3718      	adds	r7, #24
 8003a82:	46bd      	mov	sp, r7
 8003a84:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003a88:	b004      	add	sp, #16
 8003a8a:	4770      	bx	lr
 8003a8c:	803c3800 	.word	0x803c3800

08003a90 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003a90:	b480      	push	{r7}
 8003a92:	b085      	sub	sp, #20
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	6078      	str	r0, [r7, #4]
 8003a98:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8003a9a:	2300      	movs	r3, #0
 8003a9c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	3301      	adds	r3, #1
 8003aa2:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003aaa:	d901      	bls.n	8003ab0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8003aac:	2303      	movs	r3, #3
 8003aae:	e01b      	b.n	8003ae8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	691b      	ldr	r3, [r3, #16]
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	daf2      	bge.n	8003a9e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8003ab8:	2300      	movs	r3, #0
 8003aba:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003abc:	683b      	ldr	r3, [r7, #0]
 8003abe:	019b      	lsls	r3, r3, #6
 8003ac0:	f043 0220 	orr.w	r2, r3, #32
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	3301      	adds	r3, #1
 8003acc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003ad4:	d901      	bls.n	8003ada <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8003ad6:	2303      	movs	r3, #3
 8003ad8:	e006      	b.n	8003ae8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	691b      	ldr	r3, [r3, #16]
 8003ade:	f003 0320 	and.w	r3, r3, #32
 8003ae2:	2b20      	cmp	r3, #32
 8003ae4:	d0f0      	beq.n	8003ac8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8003ae6:	2300      	movs	r3, #0
}
 8003ae8:	4618      	mov	r0, r3
 8003aea:	3714      	adds	r7, #20
 8003aec:	46bd      	mov	sp, r7
 8003aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af2:	4770      	bx	lr

08003af4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003af4:	b480      	push	{r7}
 8003af6:	b085      	sub	sp, #20
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003afc:	2300      	movs	r3, #0
 8003afe:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	3301      	adds	r3, #1
 8003b04:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003b0c:	d901      	bls.n	8003b12 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8003b0e:	2303      	movs	r3, #3
 8003b10:	e018      	b.n	8003b44 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	691b      	ldr	r3, [r3, #16]
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	daf2      	bge.n	8003b00 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8003b1a:	2300      	movs	r3, #0
 8003b1c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	2210      	movs	r2, #16
 8003b22:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	3301      	adds	r3, #1
 8003b28:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003b30:	d901      	bls.n	8003b36 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8003b32:	2303      	movs	r3, #3
 8003b34:	e006      	b.n	8003b44 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	691b      	ldr	r3, [r3, #16]
 8003b3a:	f003 0310 	and.w	r3, r3, #16
 8003b3e:	2b10      	cmp	r3, #16
 8003b40:	d0f0      	beq.n	8003b24 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8003b42:	2300      	movs	r3, #0
}
 8003b44:	4618      	mov	r0, r3
 8003b46:	3714      	adds	r7, #20
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4e:	4770      	bx	lr

08003b50 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8003b50:	b480      	push	{r7}
 8003b52:	b085      	sub	sp, #20
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]
 8003b58:	460b      	mov	r3, r1
 8003b5a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003b66:	681a      	ldr	r2, [r3, #0]
 8003b68:	78fb      	ldrb	r3, [r7, #3]
 8003b6a:	68f9      	ldr	r1, [r7, #12]
 8003b6c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003b70:	4313      	orrs	r3, r2
 8003b72:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8003b74:	2300      	movs	r3, #0
}
 8003b76:	4618      	mov	r0, r3
 8003b78:	3714      	adds	r7, #20
 8003b7a:	46bd      	mov	sp, r7
 8003b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b80:	4770      	bx	lr

08003b82 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8003b82:	b480      	push	{r7}
 8003b84:	b087      	sub	sp, #28
 8003b86:	af00      	add	r7, sp, #0
 8003b88:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8003b8e:	693b      	ldr	r3, [r7, #16]
 8003b90:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003b94:	689b      	ldr	r3, [r3, #8]
 8003b96:	f003 0306 	and.w	r3, r3, #6
 8003b9a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d102      	bne.n	8003ba8 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8003ba2:	2300      	movs	r3, #0
 8003ba4:	75fb      	strb	r3, [r7, #23]
 8003ba6:	e00a      	b.n	8003bbe <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	2b02      	cmp	r3, #2
 8003bac:	d002      	beq.n	8003bb4 <USB_GetDevSpeed+0x32>
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	2b06      	cmp	r3, #6
 8003bb2:	d102      	bne.n	8003bba <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8003bb4:	2302      	movs	r3, #2
 8003bb6:	75fb      	strb	r3, [r7, #23]
 8003bb8:	e001      	b.n	8003bbe <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8003bba:	230f      	movs	r3, #15
 8003bbc:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8003bbe:	7dfb      	ldrb	r3, [r7, #23]
}
 8003bc0:	4618      	mov	r0, r3
 8003bc2:	371c      	adds	r7, #28
 8003bc4:	46bd      	mov	sp, r7
 8003bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bca:	4770      	bx	lr

08003bcc <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8003bcc:	b480      	push	{r7}
 8003bce:	b085      	sub	sp, #20
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	6078      	str	r0, [r7, #4]
 8003bd4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003bda:	683b      	ldr	r3, [r7, #0]
 8003bdc:	781b      	ldrb	r3, [r3, #0]
 8003bde:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003be0:	683b      	ldr	r3, [r7, #0]
 8003be2:	785b      	ldrb	r3, [r3, #1]
 8003be4:	2b01      	cmp	r3, #1
 8003be6:	d13a      	bne.n	8003c5e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003bee:	69da      	ldr	r2, [r3, #28]
 8003bf0:	683b      	ldr	r3, [r7, #0]
 8003bf2:	781b      	ldrb	r3, [r3, #0]
 8003bf4:	f003 030f 	and.w	r3, r3, #15
 8003bf8:	2101      	movs	r1, #1
 8003bfa:	fa01 f303 	lsl.w	r3, r1, r3
 8003bfe:	b29b      	uxth	r3, r3
 8003c00:	68f9      	ldr	r1, [r7, #12]
 8003c02:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003c06:	4313      	orrs	r3, r2
 8003c08:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8003c0a:	68bb      	ldr	r3, [r7, #8]
 8003c0c:	015a      	lsls	r2, r3, #5
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	4413      	add	r3, r2
 8003c12:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d155      	bne.n	8003ccc <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003c20:	68bb      	ldr	r3, [r7, #8]
 8003c22:	015a      	lsls	r2, r3, #5
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	4413      	add	r3, r2
 8003c28:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003c2c:	681a      	ldr	r2, [r3, #0]
 8003c2e:	683b      	ldr	r3, [r7, #0]
 8003c30:	689b      	ldr	r3, [r3, #8]
 8003c32:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003c36:	683b      	ldr	r3, [r7, #0]
 8003c38:	791b      	ldrb	r3, [r3, #4]
 8003c3a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003c3c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003c3e:	68bb      	ldr	r3, [r7, #8]
 8003c40:	059b      	lsls	r3, r3, #22
 8003c42:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003c44:	4313      	orrs	r3, r2
 8003c46:	68ba      	ldr	r2, [r7, #8]
 8003c48:	0151      	lsls	r1, r2, #5
 8003c4a:	68fa      	ldr	r2, [r7, #12]
 8003c4c:	440a      	add	r2, r1
 8003c4e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003c52:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003c56:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003c5a:	6013      	str	r3, [r2, #0]
 8003c5c:	e036      	b.n	8003ccc <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003c64:	69da      	ldr	r2, [r3, #28]
 8003c66:	683b      	ldr	r3, [r7, #0]
 8003c68:	781b      	ldrb	r3, [r3, #0]
 8003c6a:	f003 030f 	and.w	r3, r3, #15
 8003c6e:	2101      	movs	r1, #1
 8003c70:	fa01 f303 	lsl.w	r3, r1, r3
 8003c74:	041b      	lsls	r3, r3, #16
 8003c76:	68f9      	ldr	r1, [r7, #12]
 8003c78:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003c7c:	4313      	orrs	r3, r2
 8003c7e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8003c80:	68bb      	ldr	r3, [r7, #8]
 8003c82:	015a      	lsls	r2, r3, #5
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	4413      	add	r3, r2
 8003c88:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d11a      	bne.n	8003ccc <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003c96:	68bb      	ldr	r3, [r7, #8]
 8003c98:	015a      	lsls	r2, r3, #5
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	4413      	add	r3, r2
 8003c9e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003ca2:	681a      	ldr	r2, [r3, #0]
 8003ca4:	683b      	ldr	r3, [r7, #0]
 8003ca6:	689b      	ldr	r3, [r3, #8]
 8003ca8:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8003cac:	683b      	ldr	r3, [r7, #0]
 8003cae:	791b      	ldrb	r3, [r3, #4]
 8003cb0:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003cb2:	430b      	orrs	r3, r1
 8003cb4:	4313      	orrs	r3, r2
 8003cb6:	68ba      	ldr	r2, [r7, #8]
 8003cb8:	0151      	lsls	r1, r2, #5
 8003cba:	68fa      	ldr	r2, [r7, #12]
 8003cbc:	440a      	add	r2, r1
 8003cbe:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003cc2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003cc6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003cca:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8003ccc:	2300      	movs	r3, #0
}
 8003cce:	4618      	mov	r0, r3
 8003cd0:	3714      	adds	r7, #20
 8003cd2:	46bd      	mov	sp, r7
 8003cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd8:	4770      	bx	lr
	...

08003cdc <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8003cdc:	b480      	push	{r7}
 8003cde:	b085      	sub	sp, #20
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	6078      	str	r0, [r7, #4]
 8003ce4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003cea:	683b      	ldr	r3, [r7, #0]
 8003cec:	781b      	ldrb	r3, [r3, #0]
 8003cee:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8003cf0:	683b      	ldr	r3, [r7, #0]
 8003cf2:	785b      	ldrb	r3, [r3, #1]
 8003cf4:	2b01      	cmp	r3, #1
 8003cf6:	d161      	bne.n	8003dbc <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003cf8:	68bb      	ldr	r3, [r7, #8]
 8003cfa:	015a      	lsls	r2, r3, #5
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	4413      	add	r3, r2
 8003d00:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003d0a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003d0e:	d11f      	bne.n	8003d50 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8003d10:	68bb      	ldr	r3, [r7, #8]
 8003d12:	015a      	lsls	r2, r3, #5
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	4413      	add	r3, r2
 8003d18:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	68ba      	ldr	r2, [r7, #8]
 8003d20:	0151      	lsls	r1, r2, #5
 8003d22:	68fa      	ldr	r2, [r7, #12]
 8003d24:	440a      	add	r2, r1
 8003d26:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003d2a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8003d2e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8003d30:	68bb      	ldr	r3, [r7, #8]
 8003d32:	015a      	lsls	r2, r3, #5
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	4413      	add	r3, r2
 8003d38:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	68ba      	ldr	r2, [r7, #8]
 8003d40:	0151      	lsls	r1, r2, #5
 8003d42:	68fa      	ldr	r2, [r7, #12]
 8003d44:	440a      	add	r2, r1
 8003d46:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003d4a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003d4e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003d56:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003d58:	683b      	ldr	r3, [r7, #0]
 8003d5a:	781b      	ldrb	r3, [r3, #0]
 8003d5c:	f003 030f 	and.w	r3, r3, #15
 8003d60:	2101      	movs	r1, #1
 8003d62:	fa01 f303 	lsl.w	r3, r1, r3
 8003d66:	b29b      	uxth	r3, r3
 8003d68:	43db      	mvns	r3, r3
 8003d6a:	68f9      	ldr	r1, [r7, #12]
 8003d6c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003d70:	4013      	ands	r3, r2
 8003d72:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003d7a:	69da      	ldr	r2, [r3, #28]
 8003d7c:	683b      	ldr	r3, [r7, #0]
 8003d7e:	781b      	ldrb	r3, [r3, #0]
 8003d80:	f003 030f 	and.w	r3, r3, #15
 8003d84:	2101      	movs	r1, #1
 8003d86:	fa01 f303 	lsl.w	r3, r1, r3
 8003d8a:	b29b      	uxth	r3, r3
 8003d8c:	43db      	mvns	r3, r3
 8003d8e:	68f9      	ldr	r1, [r7, #12]
 8003d90:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003d94:	4013      	ands	r3, r2
 8003d96:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8003d98:	68bb      	ldr	r3, [r7, #8]
 8003d9a:	015a      	lsls	r2, r3, #5
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	4413      	add	r3, r2
 8003da0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003da4:	681a      	ldr	r2, [r3, #0]
 8003da6:	68bb      	ldr	r3, [r7, #8]
 8003da8:	0159      	lsls	r1, r3, #5
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	440b      	add	r3, r1
 8003dae:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003db2:	4619      	mov	r1, r3
 8003db4:	4b35      	ldr	r3, [pc, #212]	@ (8003e8c <USB_DeactivateEndpoint+0x1b0>)
 8003db6:	4013      	ands	r3, r2
 8003db8:	600b      	str	r3, [r1, #0]
 8003dba:	e060      	b.n	8003e7e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003dbc:	68bb      	ldr	r3, [r7, #8]
 8003dbe:	015a      	lsls	r2, r3, #5
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	4413      	add	r3, r2
 8003dc4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003dce:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003dd2:	d11f      	bne.n	8003e14 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003dd4:	68bb      	ldr	r3, [r7, #8]
 8003dd6:	015a      	lsls	r2, r3, #5
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	4413      	add	r3, r2
 8003ddc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	68ba      	ldr	r2, [r7, #8]
 8003de4:	0151      	lsls	r1, r2, #5
 8003de6:	68fa      	ldr	r2, [r7, #12]
 8003de8:	440a      	add	r2, r1
 8003dea:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003dee:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8003df2:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8003df4:	68bb      	ldr	r3, [r7, #8]
 8003df6:	015a      	lsls	r2, r3, #5
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	4413      	add	r3, r2
 8003dfc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	68ba      	ldr	r2, [r7, #8]
 8003e04:	0151      	lsls	r1, r2, #5
 8003e06:	68fa      	ldr	r2, [r7, #12]
 8003e08:	440a      	add	r2, r1
 8003e0a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003e0e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003e12:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003e1a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003e1c:	683b      	ldr	r3, [r7, #0]
 8003e1e:	781b      	ldrb	r3, [r3, #0]
 8003e20:	f003 030f 	and.w	r3, r3, #15
 8003e24:	2101      	movs	r1, #1
 8003e26:	fa01 f303 	lsl.w	r3, r1, r3
 8003e2a:	041b      	lsls	r3, r3, #16
 8003e2c:	43db      	mvns	r3, r3
 8003e2e:	68f9      	ldr	r1, [r7, #12]
 8003e30:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003e34:	4013      	ands	r3, r2
 8003e36:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003e3e:	69da      	ldr	r2, [r3, #28]
 8003e40:	683b      	ldr	r3, [r7, #0]
 8003e42:	781b      	ldrb	r3, [r3, #0]
 8003e44:	f003 030f 	and.w	r3, r3, #15
 8003e48:	2101      	movs	r1, #1
 8003e4a:	fa01 f303 	lsl.w	r3, r1, r3
 8003e4e:	041b      	lsls	r3, r3, #16
 8003e50:	43db      	mvns	r3, r3
 8003e52:	68f9      	ldr	r1, [r7, #12]
 8003e54:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003e58:	4013      	ands	r3, r2
 8003e5a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8003e5c:	68bb      	ldr	r3, [r7, #8]
 8003e5e:	015a      	lsls	r2, r3, #5
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	4413      	add	r3, r2
 8003e64:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003e68:	681a      	ldr	r2, [r3, #0]
 8003e6a:	68bb      	ldr	r3, [r7, #8]
 8003e6c:	0159      	lsls	r1, r3, #5
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	440b      	add	r3, r1
 8003e72:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003e76:	4619      	mov	r1, r3
 8003e78:	4b05      	ldr	r3, [pc, #20]	@ (8003e90 <USB_DeactivateEndpoint+0x1b4>)
 8003e7a:	4013      	ands	r3, r2
 8003e7c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8003e7e:	2300      	movs	r3, #0
}
 8003e80:	4618      	mov	r0, r3
 8003e82:	3714      	adds	r7, #20
 8003e84:	46bd      	mov	sp, r7
 8003e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e8a:	4770      	bx	lr
 8003e8c:	ec337800 	.word	0xec337800
 8003e90:	eff37800 	.word	0xeff37800

08003e94 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8003e94:	b580      	push	{r7, lr}
 8003e96:	b08a      	sub	sp, #40	@ 0x28
 8003e98:	af02      	add	r7, sp, #8
 8003e9a:	60f8      	str	r0, [r7, #12]
 8003e9c:	60b9      	str	r1, [r7, #8]
 8003e9e:	4613      	mov	r3, r2
 8003ea0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8003ea6:	68bb      	ldr	r3, [r7, #8]
 8003ea8:	781b      	ldrb	r3, [r3, #0]
 8003eaa:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003eac:	68bb      	ldr	r3, [r7, #8]
 8003eae:	785b      	ldrb	r3, [r3, #1]
 8003eb0:	2b01      	cmp	r3, #1
 8003eb2:	f040 817f 	bne.w	80041b4 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8003eb6:	68bb      	ldr	r3, [r7, #8]
 8003eb8:	691b      	ldr	r3, [r3, #16]
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d132      	bne.n	8003f24 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003ebe:	69bb      	ldr	r3, [r7, #24]
 8003ec0:	015a      	lsls	r2, r3, #5
 8003ec2:	69fb      	ldr	r3, [r7, #28]
 8003ec4:	4413      	add	r3, r2
 8003ec6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003eca:	691b      	ldr	r3, [r3, #16]
 8003ecc:	69ba      	ldr	r2, [r7, #24]
 8003ece:	0151      	lsls	r1, r2, #5
 8003ed0:	69fa      	ldr	r2, [r7, #28]
 8003ed2:	440a      	add	r2, r1
 8003ed4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003ed8:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8003edc:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8003ee0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003ee2:	69bb      	ldr	r3, [r7, #24]
 8003ee4:	015a      	lsls	r2, r3, #5
 8003ee6:	69fb      	ldr	r3, [r7, #28]
 8003ee8:	4413      	add	r3, r2
 8003eea:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003eee:	691b      	ldr	r3, [r3, #16]
 8003ef0:	69ba      	ldr	r2, [r7, #24]
 8003ef2:	0151      	lsls	r1, r2, #5
 8003ef4:	69fa      	ldr	r2, [r7, #28]
 8003ef6:	440a      	add	r2, r1
 8003ef8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003efc:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8003f00:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003f02:	69bb      	ldr	r3, [r7, #24]
 8003f04:	015a      	lsls	r2, r3, #5
 8003f06:	69fb      	ldr	r3, [r7, #28]
 8003f08:	4413      	add	r3, r2
 8003f0a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003f0e:	691b      	ldr	r3, [r3, #16]
 8003f10:	69ba      	ldr	r2, [r7, #24]
 8003f12:	0151      	lsls	r1, r2, #5
 8003f14:	69fa      	ldr	r2, [r7, #28]
 8003f16:	440a      	add	r2, r1
 8003f18:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003f1c:	0cdb      	lsrs	r3, r3, #19
 8003f1e:	04db      	lsls	r3, r3, #19
 8003f20:	6113      	str	r3, [r2, #16]
 8003f22:	e097      	b.n	8004054 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003f24:	69bb      	ldr	r3, [r7, #24]
 8003f26:	015a      	lsls	r2, r3, #5
 8003f28:	69fb      	ldr	r3, [r7, #28]
 8003f2a:	4413      	add	r3, r2
 8003f2c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003f30:	691b      	ldr	r3, [r3, #16]
 8003f32:	69ba      	ldr	r2, [r7, #24]
 8003f34:	0151      	lsls	r1, r2, #5
 8003f36:	69fa      	ldr	r2, [r7, #28]
 8003f38:	440a      	add	r2, r1
 8003f3a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003f3e:	0cdb      	lsrs	r3, r3, #19
 8003f40:	04db      	lsls	r3, r3, #19
 8003f42:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003f44:	69bb      	ldr	r3, [r7, #24]
 8003f46:	015a      	lsls	r2, r3, #5
 8003f48:	69fb      	ldr	r3, [r7, #28]
 8003f4a:	4413      	add	r3, r2
 8003f4c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003f50:	691b      	ldr	r3, [r3, #16]
 8003f52:	69ba      	ldr	r2, [r7, #24]
 8003f54:	0151      	lsls	r1, r2, #5
 8003f56:	69fa      	ldr	r2, [r7, #28]
 8003f58:	440a      	add	r2, r1
 8003f5a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003f5e:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8003f62:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8003f66:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8003f68:	69bb      	ldr	r3, [r7, #24]
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d11a      	bne.n	8003fa4 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8003f6e:	68bb      	ldr	r3, [r7, #8]
 8003f70:	691a      	ldr	r2, [r3, #16]
 8003f72:	68bb      	ldr	r3, [r7, #8]
 8003f74:	689b      	ldr	r3, [r3, #8]
 8003f76:	429a      	cmp	r2, r3
 8003f78:	d903      	bls.n	8003f82 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8003f7a:	68bb      	ldr	r3, [r7, #8]
 8003f7c:	689a      	ldr	r2, [r3, #8]
 8003f7e:	68bb      	ldr	r3, [r7, #8]
 8003f80:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003f82:	69bb      	ldr	r3, [r7, #24]
 8003f84:	015a      	lsls	r2, r3, #5
 8003f86:	69fb      	ldr	r3, [r7, #28]
 8003f88:	4413      	add	r3, r2
 8003f8a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003f8e:	691b      	ldr	r3, [r3, #16]
 8003f90:	69ba      	ldr	r2, [r7, #24]
 8003f92:	0151      	lsls	r1, r2, #5
 8003f94:	69fa      	ldr	r2, [r7, #28]
 8003f96:	440a      	add	r2, r1
 8003f98:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003f9c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8003fa0:	6113      	str	r3, [r2, #16]
 8003fa2:	e044      	b.n	800402e <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8003fa4:	68bb      	ldr	r3, [r7, #8]
 8003fa6:	691a      	ldr	r2, [r3, #16]
 8003fa8:	68bb      	ldr	r3, [r7, #8]
 8003faa:	689b      	ldr	r3, [r3, #8]
 8003fac:	4413      	add	r3, r2
 8003fae:	1e5a      	subs	r2, r3, #1
 8003fb0:	68bb      	ldr	r3, [r7, #8]
 8003fb2:	689b      	ldr	r3, [r3, #8]
 8003fb4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fb8:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 8003fba:	69bb      	ldr	r3, [r7, #24]
 8003fbc:	015a      	lsls	r2, r3, #5
 8003fbe:	69fb      	ldr	r3, [r7, #28]
 8003fc0:	4413      	add	r3, r2
 8003fc2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003fc6:	691a      	ldr	r2, [r3, #16]
 8003fc8:	8afb      	ldrh	r3, [r7, #22]
 8003fca:	04d9      	lsls	r1, r3, #19
 8003fcc:	4ba4      	ldr	r3, [pc, #656]	@ (8004260 <USB_EPStartXfer+0x3cc>)
 8003fce:	400b      	ands	r3, r1
 8003fd0:	69b9      	ldr	r1, [r7, #24]
 8003fd2:	0148      	lsls	r0, r1, #5
 8003fd4:	69f9      	ldr	r1, [r7, #28]
 8003fd6:	4401      	add	r1, r0
 8003fd8:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8003fdc:	4313      	orrs	r3, r2
 8003fde:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 8003fe0:	68bb      	ldr	r3, [r7, #8]
 8003fe2:	791b      	ldrb	r3, [r3, #4]
 8003fe4:	2b01      	cmp	r3, #1
 8003fe6:	d122      	bne.n	800402e <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8003fe8:	69bb      	ldr	r3, [r7, #24]
 8003fea:	015a      	lsls	r2, r3, #5
 8003fec:	69fb      	ldr	r3, [r7, #28]
 8003fee:	4413      	add	r3, r2
 8003ff0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003ff4:	691b      	ldr	r3, [r3, #16]
 8003ff6:	69ba      	ldr	r2, [r7, #24]
 8003ff8:	0151      	lsls	r1, r2, #5
 8003ffa:	69fa      	ldr	r2, [r7, #28]
 8003ffc:	440a      	add	r2, r1
 8003ffe:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004002:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8004006:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 8004008:	69bb      	ldr	r3, [r7, #24]
 800400a:	015a      	lsls	r2, r3, #5
 800400c:	69fb      	ldr	r3, [r7, #28]
 800400e:	4413      	add	r3, r2
 8004010:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004014:	691a      	ldr	r2, [r3, #16]
 8004016:	8afb      	ldrh	r3, [r7, #22]
 8004018:	075b      	lsls	r3, r3, #29
 800401a:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 800401e:	69b9      	ldr	r1, [r7, #24]
 8004020:	0148      	lsls	r0, r1, #5
 8004022:	69f9      	ldr	r1, [r7, #28]
 8004024:	4401      	add	r1, r0
 8004026:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800402a:	4313      	orrs	r3, r2
 800402c:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800402e:	69bb      	ldr	r3, [r7, #24]
 8004030:	015a      	lsls	r2, r3, #5
 8004032:	69fb      	ldr	r3, [r7, #28]
 8004034:	4413      	add	r3, r2
 8004036:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800403a:	691a      	ldr	r2, [r3, #16]
 800403c:	68bb      	ldr	r3, [r7, #8]
 800403e:	691b      	ldr	r3, [r3, #16]
 8004040:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004044:	69b9      	ldr	r1, [r7, #24]
 8004046:	0148      	lsls	r0, r1, #5
 8004048:	69f9      	ldr	r1, [r7, #28]
 800404a:	4401      	add	r1, r0
 800404c:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8004050:	4313      	orrs	r3, r2
 8004052:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004054:	79fb      	ldrb	r3, [r7, #7]
 8004056:	2b01      	cmp	r3, #1
 8004058:	d14b      	bne.n	80040f2 <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800405a:	68bb      	ldr	r3, [r7, #8]
 800405c:	69db      	ldr	r3, [r3, #28]
 800405e:	2b00      	cmp	r3, #0
 8004060:	d009      	beq.n	8004076 <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004062:	69bb      	ldr	r3, [r7, #24]
 8004064:	015a      	lsls	r2, r3, #5
 8004066:	69fb      	ldr	r3, [r7, #28]
 8004068:	4413      	add	r3, r2
 800406a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800406e:	461a      	mov	r2, r3
 8004070:	68bb      	ldr	r3, [r7, #8]
 8004072:	69db      	ldr	r3, [r3, #28]
 8004074:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8004076:	68bb      	ldr	r3, [r7, #8]
 8004078:	791b      	ldrb	r3, [r3, #4]
 800407a:	2b01      	cmp	r3, #1
 800407c:	d128      	bne.n	80040d0 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800407e:	69fb      	ldr	r3, [r7, #28]
 8004080:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004084:	689b      	ldr	r3, [r3, #8]
 8004086:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800408a:	2b00      	cmp	r3, #0
 800408c:	d110      	bne.n	80040b0 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800408e:	69bb      	ldr	r3, [r7, #24]
 8004090:	015a      	lsls	r2, r3, #5
 8004092:	69fb      	ldr	r3, [r7, #28]
 8004094:	4413      	add	r3, r2
 8004096:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	69ba      	ldr	r2, [r7, #24]
 800409e:	0151      	lsls	r1, r2, #5
 80040a0:	69fa      	ldr	r2, [r7, #28]
 80040a2:	440a      	add	r2, r1
 80040a4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80040a8:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80040ac:	6013      	str	r3, [r2, #0]
 80040ae:	e00f      	b.n	80040d0 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80040b0:	69bb      	ldr	r3, [r7, #24]
 80040b2:	015a      	lsls	r2, r3, #5
 80040b4:	69fb      	ldr	r3, [r7, #28]
 80040b6:	4413      	add	r3, r2
 80040b8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	69ba      	ldr	r2, [r7, #24]
 80040c0:	0151      	lsls	r1, r2, #5
 80040c2:	69fa      	ldr	r2, [r7, #28]
 80040c4:	440a      	add	r2, r1
 80040c6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80040ca:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80040ce:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80040d0:	69bb      	ldr	r3, [r7, #24]
 80040d2:	015a      	lsls	r2, r3, #5
 80040d4:	69fb      	ldr	r3, [r7, #28]
 80040d6:	4413      	add	r3, r2
 80040d8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	69ba      	ldr	r2, [r7, #24]
 80040e0:	0151      	lsls	r1, r2, #5
 80040e2:	69fa      	ldr	r2, [r7, #28]
 80040e4:	440a      	add	r2, r1
 80040e6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80040ea:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80040ee:	6013      	str	r3, [r2, #0]
 80040f0:	e166      	b.n	80043c0 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80040f2:	69bb      	ldr	r3, [r7, #24]
 80040f4:	015a      	lsls	r2, r3, #5
 80040f6:	69fb      	ldr	r3, [r7, #28]
 80040f8:	4413      	add	r3, r2
 80040fa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	69ba      	ldr	r2, [r7, #24]
 8004102:	0151      	lsls	r1, r2, #5
 8004104:	69fa      	ldr	r2, [r7, #28]
 8004106:	440a      	add	r2, r1
 8004108:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800410c:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8004110:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004112:	68bb      	ldr	r3, [r7, #8]
 8004114:	791b      	ldrb	r3, [r3, #4]
 8004116:	2b01      	cmp	r3, #1
 8004118:	d015      	beq.n	8004146 <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800411a:	68bb      	ldr	r3, [r7, #8]
 800411c:	691b      	ldr	r3, [r3, #16]
 800411e:	2b00      	cmp	r3, #0
 8004120:	f000 814e 	beq.w	80043c0 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004124:	69fb      	ldr	r3, [r7, #28]
 8004126:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800412a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800412c:	68bb      	ldr	r3, [r7, #8]
 800412e:	781b      	ldrb	r3, [r3, #0]
 8004130:	f003 030f 	and.w	r3, r3, #15
 8004134:	2101      	movs	r1, #1
 8004136:	fa01 f303 	lsl.w	r3, r1, r3
 800413a:	69f9      	ldr	r1, [r7, #28]
 800413c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004140:	4313      	orrs	r3, r2
 8004142:	634b      	str	r3, [r1, #52]	@ 0x34
 8004144:	e13c      	b.n	80043c0 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004146:	69fb      	ldr	r3, [r7, #28]
 8004148:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800414c:	689b      	ldr	r3, [r3, #8]
 800414e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004152:	2b00      	cmp	r3, #0
 8004154:	d110      	bne.n	8004178 <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004156:	69bb      	ldr	r3, [r7, #24]
 8004158:	015a      	lsls	r2, r3, #5
 800415a:	69fb      	ldr	r3, [r7, #28]
 800415c:	4413      	add	r3, r2
 800415e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	69ba      	ldr	r2, [r7, #24]
 8004166:	0151      	lsls	r1, r2, #5
 8004168:	69fa      	ldr	r2, [r7, #28]
 800416a:	440a      	add	r2, r1
 800416c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004170:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8004174:	6013      	str	r3, [r2, #0]
 8004176:	e00f      	b.n	8004198 <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004178:	69bb      	ldr	r3, [r7, #24]
 800417a:	015a      	lsls	r2, r3, #5
 800417c:	69fb      	ldr	r3, [r7, #28]
 800417e:	4413      	add	r3, r2
 8004180:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	69ba      	ldr	r2, [r7, #24]
 8004188:	0151      	lsls	r1, r2, #5
 800418a:	69fa      	ldr	r2, [r7, #28]
 800418c:	440a      	add	r2, r1
 800418e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004192:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004196:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8004198:	68bb      	ldr	r3, [r7, #8]
 800419a:	68d9      	ldr	r1, [r3, #12]
 800419c:	68bb      	ldr	r3, [r7, #8]
 800419e:	781a      	ldrb	r2, [r3, #0]
 80041a0:	68bb      	ldr	r3, [r7, #8]
 80041a2:	691b      	ldr	r3, [r3, #16]
 80041a4:	b298      	uxth	r0, r3
 80041a6:	79fb      	ldrb	r3, [r7, #7]
 80041a8:	9300      	str	r3, [sp, #0]
 80041aa:	4603      	mov	r3, r0
 80041ac:	68f8      	ldr	r0, [r7, #12]
 80041ae:	f000 f9b9 	bl	8004524 <USB_WritePacket>
 80041b2:	e105      	b.n	80043c0 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80041b4:	69bb      	ldr	r3, [r7, #24]
 80041b6:	015a      	lsls	r2, r3, #5
 80041b8:	69fb      	ldr	r3, [r7, #28]
 80041ba:	4413      	add	r3, r2
 80041bc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80041c0:	691b      	ldr	r3, [r3, #16]
 80041c2:	69ba      	ldr	r2, [r7, #24]
 80041c4:	0151      	lsls	r1, r2, #5
 80041c6:	69fa      	ldr	r2, [r7, #28]
 80041c8:	440a      	add	r2, r1
 80041ca:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80041ce:	0cdb      	lsrs	r3, r3, #19
 80041d0:	04db      	lsls	r3, r3, #19
 80041d2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80041d4:	69bb      	ldr	r3, [r7, #24]
 80041d6:	015a      	lsls	r2, r3, #5
 80041d8:	69fb      	ldr	r3, [r7, #28]
 80041da:	4413      	add	r3, r2
 80041dc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80041e0:	691b      	ldr	r3, [r3, #16]
 80041e2:	69ba      	ldr	r2, [r7, #24]
 80041e4:	0151      	lsls	r1, r2, #5
 80041e6:	69fa      	ldr	r2, [r7, #28]
 80041e8:	440a      	add	r2, r1
 80041ea:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80041ee:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80041f2:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80041f6:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 80041f8:	69bb      	ldr	r3, [r7, #24]
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d132      	bne.n	8004264 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 80041fe:	68bb      	ldr	r3, [r7, #8]
 8004200:	691b      	ldr	r3, [r3, #16]
 8004202:	2b00      	cmp	r3, #0
 8004204:	d003      	beq.n	800420e <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 8004206:	68bb      	ldr	r3, [r7, #8]
 8004208:	689a      	ldr	r2, [r3, #8]
 800420a:	68bb      	ldr	r3, [r7, #8]
 800420c:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 800420e:	68bb      	ldr	r3, [r7, #8]
 8004210:	689a      	ldr	r2, [r3, #8]
 8004212:	68bb      	ldr	r3, [r7, #8]
 8004214:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8004216:	69bb      	ldr	r3, [r7, #24]
 8004218:	015a      	lsls	r2, r3, #5
 800421a:	69fb      	ldr	r3, [r7, #28]
 800421c:	4413      	add	r3, r2
 800421e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004222:	691a      	ldr	r2, [r3, #16]
 8004224:	68bb      	ldr	r3, [r7, #8]
 8004226:	6a1b      	ldr	r3, [r3, #32]
 8004228:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800422c:	69b9      	ldr	r1, [r7, #24]
 800422e:	0148      	lsls	r0, r1, #5
 8004230:	69f9      	ldr	r1, [r7, #28]
 8004232:	4401      	add	r1, r0
 8004234:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8004238:	4313      	orrs	r3, r2
 800423a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800423c:	69bb      	ldr	r3, [r7, #24]
 800423e:	015a      	lsls	r2, r3, #5
 8004240:	69fb      	ldr	r3, [r7, #28]
 8004242:	4413      	add	r3, r2
 8004244:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004248:	691b      	ldr	r3, [r3, #16]
 800424a:	69ba      	ldr	r2, [r7, #24]
 800424c:	0151      	lsls	r1, r2, #5
 800424e:	69fa      	ldr	r2, [r7, #28]
 8004250:	440a      	add	r2, r1
 8004252:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004256:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800425a:	6113      	str	r3, [r2, #16]
 800425c:	e062      	b.n	8004324 <USB_EPStartXfer+0x490>
 800425e:	bf00      	nop
 8004260:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8004264:	68bb      	ldr	r3, [r7, #8]
 8004266:	691b      	ldr	r3, [r3, #16]
 8004268:	2b00      	cmp	r3, #0
 800426a:	d123      	bne.n	80042b4 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800426c:	69bb      	ldr	r3, [r7, #24]
 800426e:	015a      	lsls	r2, r3, #5
 8004270:	69fb      	ldr	r3, [r7, #28]
 8004272:	4413      	add	r3, r2
 8004274:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004278:	691a      	ldr	r2, [r3, #16]
 800427a:	68bb      	ldr	r3, [r7, #8]
 800427c:	689b      	ldr	r3, [r3, #8]
 800427e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004282:	69b9      	ldr	r1, [r7, #24]
 8004284:	0148      	lsls	r0, r1, #5
 8004286:	69f9      	ldr	r1, [r7, #28]
 8004288:	4401      	add	r1, r0
 800428a:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800428e:	4313      	orrs	r3, r2
 8004290:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004292:	69bb      	ldr	r3, [r7, #24]
 8004294:	015a      	lsls	r2, r3, #5
 8004296:	69fb      	ldr	r3, [r7, #28]
 8004298:	4413      	add	r3, r2
 800429a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800429e:	691b      	ldr	r3, [r3, #16]
 80042a0:	69ba      	ldr	r2, [r7, #24]
 80042a2:	0151      	lsls	r1, r2, #5
 80042a4:	69fa      	ldr	r2, [r7, #28]
 80042a6:	440a      	add	r2, r1
 80042a8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80042ac:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80042b0:	6113      	str	r3, [r2, #16]
 80042b2:	e037      	b.n	8004324 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80042b4:	68bb      	ldr	r3, [r7, #8]
 80042b6:	691a      	ldr	r2, [r3, #16]
 80042b8:	68bb      	ldr	r3, [r7, #8]
 80042ba:	689b      	ldr	r3, [r3, #8]
 80042bc:	4413      	add	r3, r2
 80042be:	1e5a      	subs	r2, r3, #1
 80042c0:	68bb      	ldr	r3, [r7, #8]
 80042c2:	689b      	ldr	r3, [r3, #8]
 80042c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80042c8:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 80042ca:	68bb      	ldr	r3, [r7, #8]
 80042cc:	689b      	ldr	r3, [r3, #8]
 80042ce:	8afa      	ldrh	r2, [r7, #22]
 80042d0:	fb03 f202 	mul.w	r2, r3, r2
 80042d4:	68bb      	ldr	r3, [r7, #8]
 80042d6:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80042d8:	69bb      	ldr	r3, [r7, #24]
 80042da:	015a      	lsls	r2, r3, #5
 80042dc:	69fb      	ldr	r3, [r7, #28]
 80042de:	4413      	add	r3, r2
 80042e0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80042e4:	691a      	ldr	r2, [r3, #16]
 80042e6:	8afb      	ldrh	r3, [r7, #22]
 80042e8:	04d9      	lsls	r1, r3, #19
 80042ea:	4b38      	ldr	r3, [pc, #224]	@ (80043cc <USB_EPStartXfer+0x538>)
 80042ec:	400b      	ands	r3, r1
 80042ee:	69b9      	ldr	r1, [r7, #24]
 80042f0:	0148      	lsls	r0, r1, #5
 80042f2:	69f9      	ldr	r1, [r7, #28]
 80042f4:	4401      	add	r1, r0
 80042f6:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80042fa:	4313      	orrs	r3, r2
 80042fc:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80042fe:	69bb      	ldr	r3, [r7, #24]
 8004300:	015a      	lsls	r2, r3, #5
 8004302:	69fb      	ldr	r3, [r7, #28]
 8004304:	4413      	add	r3, r2
 8004306:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800430a:	691a      	ldr	r2, [r3, #16]
 800430c:	68bb      	ldr	r3, [r7, #8]
 800430e:	6a1b      	ldr	r3, [r3, #32]
 8004310:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004314:	69b9      	ldr	r1, [r7, #24]
 8004316:	0148      	lsls	r0, r1, #5
 8004318:	69f9      	ldr	r1, [r7, #28]
 800431a:	4401      	add	r1, r0
 800431c:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8004320:	4313      	orrs	r3, r2
 8004322:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8004324:	79fb      	ldrb	r3, [r7, #7]
 8004326:	2b01      	cmp	r3, #1
 8004328:	d10d      	bne.n	8004346 <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800432a:	68bb      	ldr	r3, [r7, #8]
 800432c:	68db      	ldr	r3, [r3, #12]
 800432e:	2b00      	cmp	r3, #0
 8004330:	d009      	beq.n	8004346 <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004332:	68bb      	ldr	r3, [r7, #8]
 8004334:	68d9      	ldr	r1, [r3, #12]
 8004336:	69bb      	ldr	r3, [r7, #24]
 8004338:	015a      	lsls	r2, r3, #5
 800433a:	69fb      	ldr	r3, [r7, #28]
 800433c:	4413      	add	r3, r2
 800433e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004342:	460a      	mov	r2, r1
 8004344:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8004346:	68bb      	ldr	r3, [r7, #8]
 8004348:	791b      	ldrb	r3, [r3, #4]
 800434a:	2b01      	cmp	r3, #1
 800434c:	d128      	bne.n	80043a0 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800434e:	69fb      	ldr	r3, [r7, #28]
 8004350:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004354:	689b      	ldr	r3, [r3, #8]
 8004356:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800435a:	2b00      	cmp	r3, #0
 800435c:	d110      	bne.n	8004380 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800435e:	69bb      	ldr	r3, [r7, #24]
 8004360:	015a      	lsls	r2, r3, #5
 8004362:	69fb      	ldr	r3, [r7, #28]
 8004364:	4413      	add	r3, r2
 8004366:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	69ba      	ldr	r2, [r7, #24]
 800436e:	0151      	lsls	r1, r2, #5
 8004370:	69fa      	ldr	r2, [r7, #28]
 8004372:	440a      	add	r2, r1
 8004374:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004378:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800437c:	6013      	str	r3, [r2, #0]
 800437e:	e00f      	b.n	80043a0 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8004380:	69bb      	ldr	r3, [r7, #24]
 8004382:	015a      	lsls	r2, r3, #5
 8004384:	69fb      	ldr	r3, [r7, #28]
 8004386:	4413      	add	r3, r2
 8004388:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	69ba      	ldr	r2, [r7, #24]
 8004390:	0151      	lsls	r1, r2, #5
 8004392:	69fa      	ldr	r2, [r7, #28]
 8004394:	440a      	add	r2, r1
 8004396:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800439a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800439e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80043a0:	69bb      	ldr	r3, [r7, #24]
 80043a2:	015a      	lsls	r2, r3, #5
 80043a4:	69fb      	ldr	r3, [r7, #28]
 80043a6:	4413      	add	r3, r2
 80043a8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	69ba      	ldr	r2, [r7, #24]
 80043b0:	0151      	lsls	r1, r2, #5
 80043b2:	69fa      	ldr	r2, [r7, #28]
 80043b4:	440a      	add	r2, r1
 80043b6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80043ba:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80043be:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80043c0:	2300      	movs	r3, #0
}
 80043c2:	4618      	mov	r0, r3
 80043c4:	3720      	adds	r7, #32
 80043c6:	46bd      	mov	sp, r7
 80043c8:	bd80      	pop	{r7, pc}
 80043ca:	bf00      	nop
 80043cc:	1ff80000 	.word	0x1ff80000

080043d0 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80043d0:	b480      	push	{r7}
 80043d2:	b087      	sub	sp, #28
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	6078      	str	r0, [r7, #4]
 80043d8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80043da:	2300      	movs	r3, #0
 80043dc:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80043de:	2300      	movs	r3, #0
 80043e0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80043e6:	683b      	ldr	r3, [r7, #0]
 80043e8:	785b      	ldrb	r3, [r3, #1]
 80043ea:	2b01      	cmp	r3, #1
 80043ec:	d14a      	bne.n	8004484 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80043ee:	683b      	ldr	r3, [r7, #0]
 80043f0:	781b      	ldrb	r3, [r3, #0]
 80043f2:	015a      	lsls	r2, r3, #5
 80043f4:	693b      	ldr	r3, [r7, #16]
 80043f6:	4413      	add	r3, r2
 80043f8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004402:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004406:	f040 8086 	bne.w	8004516 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800440a:	683b      	ldr	r3, [r7, #0]
 800440c:	781b      	ldrb	r3, [r3, #0]
 800440e:	015a      	lsls	r2, r3, #5
 8004410:	693b      	ldr	r3, [r7, #16]
 8004412:	4413      	add	r3, r2
 8004414:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	683a      	ldr	r2, [r7, #0]
 800441c:	7812      	ldrb	r2, [r2, #0]
 800441e:	0151      	lsls	r1, r2, #5
 8004420:	693a      	ldr	r2, [r7, #16]
 8004422:	440a      	add	r2, r1
 8004424:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004428:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800442c:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800442e:	683b      	ldr	r3, [r7, #0]
 8004430:	781b      	ldrb	r3, [r3, #0]
 8004432:	015a      	lsls	r2, r3, #5
 8004434:	693b      	ldr	r3, [r7, #16]
 8004436:	4413      	add	r3, r2
 8004438:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	683a      	ldr	r2, [r7, #0]
 8004440:	7812      	ldrb	r2, [r2, #0]
 8004442:	0151      	lsls	r1, r2, #5
 8004444:	693a      	ldr	r2, [r7, #16]
 8004446:	440a      	add	r2, r1
 8004448:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800444c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004450:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	3301      	adds	r3, #1
 8004456:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	f242 7210 	movw	r2, #10000	@ 0x2710
 800445e:	4293      	cmp	r3, r2
 8004460:	d902      	bls.n	8004468 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8004462:	2301      	movs	r3, #1
 8004464:	75fb      	strb	r3, [r7, #23]
          break;
 8004466:	e056      	b.n	8004516 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8004468:	683b      	ldr	r3, [r7, #0]
 800446a:	781b      	ldrb	r3, [r3, #0]
 800446c:	015a      	lsls	r2, r3, #5
 800446e:	693b      	ldr	r3, [r7, #16]
 8004470:	4413      	add	r3, r2
 8004472:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800447c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004480:	d0e7      	beq.n	8004452 <USB_EPStopXfer+0x82>
 8004482:	e048      	b.n	8004516 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004484:	683b      	ldr	r3, [r7, #0]
 8004486:	781b      	ldrb	r3, [r3, #0]
 8004488:	015a      	lsls	r2, r3, #5
 800448a:	693b      	ldr	r3, [r7, #16]
 800448c:	4413      	add	r3, r2
 800448e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004498:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800449c:	d13b      	bne.n	8004516 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800449e:	683b      	ldr	r3, [r7, #0]
 80044a0:	781b      	ldrb	r3, [r3, #0]
 80044a2:	015a      	lsls	r2, r3, #5
 80044a4:	693b      	ldr	r3, [r7, #16]
 80044a6:	4413      	add	r3, r2
 80044a8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	683a      	ldr	r2, [r7, #0]
 80044b0:	7812      	ldrb	r2, [r2, #0]
 80044b2:	0151      	lsls	r1, r2, #5
 80044b4:	693a      	ldr	r2, [r7, #16]
 80044b6:	440a      	add	r2, r1
 80044b8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80044bc:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80044c0:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80044c2:	683b      	ldr	r3, [r7, #0]
 80044c4:	781b      	ldrb	r3, [r3, #0]
 80044c6:	015a      	lsls	r2, r3, #5
 80044c8:	693b      	ldr	r3, [r7, #16]
 80044ca:	4413      	add	r3, r2
 80044cc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	683a      	ldr	r2, [r7, #0]
 80044d4:	7812      	ldrb	r2, [r2, #0]
 80044d6:	0151      	lsls	r1, r2, #5
 80044d8:	693a      	ldr	r2, [r7, #16]
 80044da:	440a      	add	r2, r1
 80044dc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80044e0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80044e4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	3301      	adds	r3, #1
 80044ea:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	f242 7210 	movw	r2, #10000	@ 0x2710
 80044f2:	4293      	cmp	r3, r2
 80044f4:	d902      	bls.n	80044fc <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80044f6:	2301      	movs	r3, #1
 80044f8:	75fb      	strb	r3, [r7, #23]
          break;
 80044fa:	e00c      	b.n	8004516 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80044fc:	683b      	ldr	r3, [r7, #0]
 80044fe:	781b      	ldrb	r3, [r3, #0]
 8004500:	015a      	lsls	r2, r3, #5
 8004502:	693b      	ldr	r3, [r7, #16]
 8004504:	4413      	add	r3, r2
 8004506:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004510:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004514:	d0e7      	beq.n	80044e6 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8004516:	7dfb      	ldrb	r3, [r7, #23]
}
 8004518:	4618      	mov	r0, r3
 800451a:	371c      	adds	r7, #28
 800451c:	46bd      	mov	sp, r7
 800451e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004522:	4770      	bx	lr

08004524 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8004524:	b480      	push	{r7}
 8004526:	b089      	sub	sp, #36	@ 0x24
 8004528:	af00      	add	r7, sp, #0
 800452a:	60f8      	str	r0, [r7, #12]
 800452c:	60b9      	str	r1, [r7, #8]
 800452e:	4611      	mov	r1, r2
 8004530:	461a      	mov	r2, r3
 8004532:	460b      	mov	r3, r1
 8004534:	71fb      	strb	r3, [r7, #7]
 8004536:	4613      	mov	r3, r2
 8004538:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800453e:	68bb      	ldr	r3, [r7, #8]
 8004540:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8004542:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8004546:	2b00      	cmp	r3, #0
 8004548:	d123      	bne.n	8004592 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800454a:	88bb      	ldrh	r3, [r7, #4]
 800454c:	3303      	adds	r3, #3
 800454e:	089b      	lsrs	r3, r3, #2
 8004550:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8004552:	2300      	movs	r3, #0
 8004554:	61bb      	str	r3, [r7, #24]
 8004556:	e018      	b.n	800458a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8004558:	79fb      	ldrb	r3, [r7, #7]
 800455a:	031a      	lsls	r2, r3, #12
 800455c:	697b      	ldr	r3, [r7, #20]
 800455e:	4413      	add	r3, r2
 8004560:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004564:	461a      	mov	r2, r3
 8004566:	69fb      	ldr	r3, [r7, #28]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	6013      	str	r3, [r2, #0]
      pSrc++;
 800456c:	69fb      	ldr	r3, [r7, #28]
 800456e:	3301      	adds	r3, #1
 8004570:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004572:	69fb      	ldr	r3, [r7, #28]
 8004574:	3301      	adds	r3, #1
 8004576:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004578:	69fb      	ldr	r3, [r7, #28]
 800457a:	3301      	adds	r3, #1
 800457c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800457e:	69fb      	ldr	r3, [r7, #28]
 8004580:	3301      	adds	r3, #1
 8004582:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8004584:	69bb      	ldr	r3, [r7, #24]
 8004586:	3301      	adds	r3, #1
 8004588:	61bb      	str	r3, [r7, #24]
 800458a:	69ba      	ldr	r2, [r7, #24]
 800458c:	693b      	ldr	r3, [r7, #16]
 800458e:	429a      	cmp	r2, r3
 8004590:	d3e2      	bcc.n	8004558 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8004592:	2300      	movs	r3, #0
}
 8004594:	4618      	mov	r0, r3
 8004596:	3724      	adds	r7, #36	@ 0x24
 8004598:	46bd      	mov	sp, r7
 800459a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800459e:	4770      	bx	lr

080045a0 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80045a0:	b480      	push	{r7}
 80045a2:	b08b      	sub	sp, #44	@ 0x2c
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	60f8      	str	r0, [r7, #12]
 80045a8:	60b9      	str	r1, [r7, #8]
 80045aa:	4613      	mov	r3, r2
 80045ac:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80045b2:	68bb      	ldr	r3, [r7, #8]
 80045b4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80045b6:	88fb      	ldrh	r3, [r7, #6]
 80045b8:	089b      	lsrs	r3, r3, #2
 80045ba:	b29b      	uxth	r3, r3
 80045bc:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80045be:	88fb      	ldrh	r3, [r7, #6]
 80045c0:	f003 0303 	and.w	r3, r3, #3
 80045c4:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80045c6:	2300      	movs	r3, #0
 80045c8:	623b      	str	r3, [r7, #32]
 80045ca:	e014      	b.n	80045f6 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80045cc:	69bb      	ldr	r3, [r7, #24]
 80045ce:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80045d2:	681a      	ldr	r2, [r3, #0]
 80045d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045d6:	601a      	str	r2, [r3, #0]
    pDest++;
 80045d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045da:	3301      	adds	r3, #1
 80045dc:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80045de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045e0:	3301      	adds	r3, #1
 80045e2:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80045e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045e6:	3301      	adds	r3, #1
 80045e8:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80045ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045ec:	3301      	adds	r3, #1
 80045ee:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 80045f0:	6a3b      	ldr	r3, [r7, #32]
 80045f2:	3301      	adds	r3, #1
 80045f4:	623b      	str	r3, [r7, #32]
 80045f6:	6a3a      	ldr	r2, [r7, #32]
 80045f8:	697b      	ldr	r3, [r7, #20]
 80045fa:	429a      	cmp	r2, r3
 80045fc:	d3e6      	bcc.n	80045cc <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80045fe:	8bfb      	ldrh	r3, [r7, #30]
 8004600:	2b00      	cmp	r3, #0
 8004602:	d01e      	beq.n	8004642 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8004604:	2300      	movs	r3, #0
 8004606:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8004608:	69bb      	ldr	r3, [r7, #24]
 800460a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800460e:	461a      	mov	r2, r3
 8004610:	f107 0310 	add.w	r3, r7, #16
 8004614:	6812      	ldr	r2, [r2, #0]
 8004616:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8004618:	693a      	ldr	r2, [r7, #16]
 800461a:	6a3b      	ldr	r3, [r7, #32]
 800461c:	b2db      	uxtb	r3, r3
 800461e:	00db      	lsls	r3, r3, #3
 8004620:	fa22 f303 	lsr.w	r3, r2, r3
 8004624:	b2da      	uxtb	r2, r3
 8004626:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004628:	701a      	strb	r2, [r3, #0]
      i++;
 800462a:	6a3b      	ldr	r3, [r7, #32]
 800462c:	3301      	adds	r3, #1
 800462e:	623b      	str	r3, [r7, #32]
      pDest++;
 8004630:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004632:	3301      	adds	r3, #1
 8004634:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8004636:	8bfb      	ldrh	r3, [r7, #30]
 8004638:	3b01      	subs	r3, #1
 800463a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800463c:	8bfb      	ldrh	r3, [r7, #30]
 800463e:	2b00      	cmp	r3, #0
 8004640:	d1ea      	bne.n	8004618 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8004642:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8004644:	4618      	mov	r0, r3
 8004646:	372c      	adds	r7, #44	@ 0x2c
 8004648:	46bd      	mov	sp, r7
 800464a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800464e:	4770      	bx	lr

08004650 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8004650:	b480      	push	{r7}
 8004652:	b085      	sub	sp, #20
 8004654:	af00      	add	r7, sp, #0
 8004656:	6078      	str	r0, [r7, #4]
 8004658:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800465e:	683b      	ldr	r3, [r7, #0]
 8004660:	781b      	ldrb	r3, [r3, #0]
 8004662:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004664:	683b      	ldr	r3, [r7, #0]
 8004666:	785b      	ldrb	r3, [r3, #1]
 8004668:	2b01      	cmp	r3, #1
 800466a:	d12c      	bne.n	80046c6 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800466c:	68bb      	ldr	r3, [r7, #8]
 800466e:	015a      	lsls	r2, r3, #5
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	4413      	add	r3, r2
 8004674:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	2b00      	cmp	r3, #0
 800467c:	db12      	blt.n	80046a4 <USB_EPSetStall+0x54>
 800467e:	68bb      	ldr	r3, [r7, #8]
 8004680:	2b00      	cmp	r3, #0
 8004682:	d00f      	beq.n	80046a4 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8004684:	68bb      	ldr	r3, [r7, #8]
 8004686:	015a      	lsls	r2, r3, #5
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	4413      	add	r3, r2
 800468c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	68ba      	ldr	r2, [r7, #8]
 8004694:	0151      	lsls	r1, r2, #5
 8004696:	68fa      	ldr	r2, [r7, #12]
 8004698:	440a      	add	r2, r1
 800469a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800469e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80046a2:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80046a4:	68bb      	ldr	r3, [r7, #8]
 80046a6:	015a      	lsls	r2, r3, #5
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	4413      	add	r3, r2
 80046ac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	68ba      	ldr	r2, [r7, #8]
 80046b4:	0151      	lsls	r1, r2, #5
 80046b6:	68fa      	ldr	r2, [r7, #12]
 80046b8:	440a      	add	r2, r1
 80046ba:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80046be:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80046c2:	6013      	str	r3, [r2, #0]
 80046c4:	e02b      	b.n	800471e <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80046c6:	68bb      	ldr	r3, [r7, #8]
 80046c8:	015a      	lsls	r2, r3, #5
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	4413      	add	r3, r2
 80046ce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	db12      	blt.n	80046fe <USB_EPSetStall+0xae>
 80046d8:	68bb      	ldr	r3, [r7, #8]
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d00f      	beq.n	80046fe <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80046de:	68bb      	ldr	r3, [r7, #8]
 80046e0:	015a      	lsls	r2, r3, #5
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	4413      	add	r3, r2
 80046e6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	68ba      	ldr	r2, [r7, #8]
 80046ee:	0151      	lsls	r1, r2, #5
 80046f0:	68fa      	ldr	r2, [r7, #12]
 80046f2:	440a      	add	r2, r1
 80046f4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80046f8:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80046fc:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80046fe:	68bb      	ldr	r3, [r7, #8]
 8004700:	015a      	lsls	r2, r3, #5
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	4413      	add	r3, r2
 8004706:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	68ba      	ldr	r2, [r7, #8]
 800470e:	0151      	lsls	r1, r2, #5
 8004710:	68fa      	ldr	r2, [r7, #12]
 8004712:	440a      	add	r2, r1
 8004714:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004718:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800471c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800471e:	2300      	movs	r3, #0
}
 8004720:	4618      	mov	r0, r3
 8004722:	3714      	adds	r7, #20
 8004724:	46bd      	mov	sp, r7
 8004726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800472a:	4770      	bx	lr

0800472c <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800472c:	b480      	push	{r7}
 800472e:	b085      	sub	sp, #20
 8004730:	af00      	add	r7, sp, #0
 8004732:	6078      	str	r0, [r7, #4]
 8004734:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800473a:	683b      	ldr	r3, [r7, #0]
 800473c:	781b      	ldrb	r3, [r3, #0]
 800473e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004740:	683b      	ldr	r3, [r7, #0]
 8004742:	785b      	ldrb	r3, [r3, #1]
 8004744:	2b01      	cmp	r3, #1
 8004746:	d128      	bne.n	800479a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004748:	68bb      	ldr	r3, [r7, #8]
 800474a:	015a      	lsls	r2, r3, #5
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	4413      	add	r3, r2
 8004750:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	68ba      	ldr	r2, [r7, #8]
 8004758:	0151      	lsls	r1, r2, #5
 800475a:	68fa      	ldr	r2, [r7, #12]
 800475c:	440a      	add	r2, r1
 800475e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004762:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004766:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004768:	683b      	ldr	r3, [r7, #0]
 800476a:	791b      	ldrb	r3, [r3, #4]
 800476c:	2b03      	cmp	r3, #3
 800476e:	d003      	beq.n	8004778 <USB_EPClearStall+0x4c>
 8004770:	683b      	ldr	r3, [r7, #0]
 8004772:	791b      	ldrb	r3, [r3, #4]
 8004774:	2b02      	cmp	r3, #2
 8004776:	d138      	bne.n	80047ea <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004778:	68bb      	ldr	r3, [r7, #8]
 800477a:	015a      	lsls	r2, r3, #5
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	4413      	add	r3, r2
 8004780:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	68ba      	ldr	r2, [r7, #8]
 8004788:	0151      	lsls	r1, r2, #5
 800478a:	68fa      	ldr	r2, [r7, #12]
 800478c:	440a      	add	r2, r1
 800478e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004792:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004796:	6013      	str	r3, [r2, #0]
 8004798:	e027      	b.n	80047ea <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800479a:	68bb      	ldr	r3, [r7, #8]
 800479c:	015a      	lsls	r2, r3, #5
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	4413      	add	r3, r2
 80047a2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	68ba      	ldr	r2, [r7, #8]
 80047aa:	0151      	lsls	r1, r2, #5
 80047ac:	68fa      	ldr	r2, [r7, #12]
 80047ae:	440a      	add	r2, r1
 80047b0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80047b4:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80047b8:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80047ba:	683b      	ldr	r3, [r7, #0]
 80047bc:	791b      	ldrb	r3, [r3, #4]
 80047be:	2b03      	cmp	r3, #3
 80047c0:	d003      	beq.n	80047ca <USB_EPClearStall+0x9e>
 80047c2:	683b      	ldr	r3, [r7, #0]
 80047c4:	791b      	ldrb	r3, [r3, #4]
 80047c6:	2b02      	cmp	r3, #2
 80047c8:	d10f      	bne.n	80047ea <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80047ca:	68bb      	ldr	r3, [r7, #8]
 80047cc:	015a      	lsls	r2, r3, #5
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	4413      	add	r3, r2
 80047d2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	68ba      	ldr	r2, [r7, #8]
 80047da:	0151      	lsls	r1, r2, #5
 80047dc:	68fa      	ldr	r2, [r7, #12]
 80047de:	440a      	add	r2, r1
 80047e0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80047e4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80047e8:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80047ea:	2300      	movs	r3, #0
}
 80047ec:	4618      	mov	r0, r3
 80047ee:	3714      	adds	r7, #20
 80047f0:	46bd      	mov	sp, r7
 80047f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f6:	4770      	bx	lr

080047f8 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80047f8:	b480      	push	{r7}
 80047fa:	b085      	sub	sp, #20
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	6078      	str	r0, [r7, #4]
 8004800:	460b      	mov	r3, r1
 8004802:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	68fa      	ldr	r2, [r7, #12]
 8004812:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004816:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800481a:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004822:	681a      	ldr	r2, [r3, #0]
 8004824:	78fb      	ldrb	r3, [r7, #3]
 8004826:	011b      	lsls	r3, r3, #4
 8004828:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 800482c:	68f9      	ldr	r1, [r7, #12]
 800482e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004832:	4313      	orrs	r3, r2
 8004834:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8004836:	2300      	movs	r3, #0
}
 8004838:	4618      	mov	r0, r3
 800483a:	3714      	adds	r7, #20
 800483c:	46bd      	mov	sp, r7
 800483e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004842:	4770      	bx	lr

08004844 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8004844:	b480      	push	{r7}
 8004846:	b085      	sub	sp, #20
 8004848:	af00      	add	r7, sp, #0
 800484a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	68fa      	ldr	r2, [r7, #12]
 800485a:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800485e:	f023 0303 	bic.w	r3, r3, #3
 8004862:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800486a:	685b      	ldr	r3, [r3, #4]
 800486c:	68fa      	ldr	r2, [r7, #12]
 800486e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004872:	f023 0302 	bic.w	r3, r3, #2
 8004876:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004878:	2300      	movs	r3, #0
}
 800487a:	4618      	mov	r0, r3
 800487c:	3714      	adds	r7, #20
 800487e:	46bd      	mov	sp, r7
 8004880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004884:	4770      	bx	lr

08004886 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8004886:	b480      	push	{r7}
 8004888:	b085      	sub	sp, #20
 800488a:	af00      	add	r7, sp, #0
 800488c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	68fa      	ldr	r2, [r7, #12]
 800489c:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80048a0:	f023 0303 	bic.w	r3, r3, #3
 80048a4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80048ac:	685b      	ldr	r3, [r3, #4]
 80048ae:	68fa      	ldr	r2, [r7, #12]
 80048b0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80048b4:	f043 0302 	orr.w	r3, r3, #2
 80048b8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80048ba:	2300      	movs	r3, #0
}
 80048bc:	4618      	mov	r0, r3
 80048be:	3714      	adds	r7, #20
 80048c0:	46bd      	mov	sp, r7
 80048c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c6:	4770      	bx	lr

080048c8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 80048c8:	b480      	push	{r7}
 80048ca:	b085      	sub	sp, #20
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	695b      	ldr	r3, [r3, #20]
 80048d4:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	699b      	ldr	r3, [r3, #24]
 80048da:	68fa      	ldr	r2, [r7, #12]
 80048dc:	4013      	ands	r3, r2
 80048de:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80048e0:	68fb      	ldr	r3, [r7, #12]
}
 80048e2:	4618      	mov	r0, r3
 80048e4:	3714      	adds	r7, #20
 80048e6:	46bd      	mov	sp, r7
 80048e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ec:	4770      	bx	lr

080048ee <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80048ee:	b480      	push	{r7}
 80048f0:	b085      	sub	sp, #20
 80048f2:	af00      	add	r7, sp, #0
 80048f4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004900:	699b      	ldr	r3, [r3, #24]
 8004902:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800490a:	69db      	ldr	r3, [r3, #28]
 800490c:	68ba      	ldr	r2, [r7, #8]
 800490e:	4013      	ands	r3, r2
 8004910:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8004912:	68bb      	ldr	r3, [r7, #8]
 8004914:	0c1b      	lsrs	r3, r3, #16
}
 8004916:	4618      	mov	r0, r3
 8004918:	3714      	adds	r7, #20
 800491a:	46bd      	mov	sp, r7
 800491c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004920:	4770      	bx	lr

08004922 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8004922:	b480      	push	{r7}
 8004924:	b085      	sub	sp, #20
 8004926:	af00      	add	r7, sp, #0
 8004928:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004934:	699b      	ldr	r3, [r3, #24]
 8004936:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800493e:	69db      	ldr	r3, [r3, #28]
 8004940:	68ba      	ldr	r2, [r7, #8]
 8004942:	4013      	ands	r3, r2
 8004944:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8004946:	68bb      	ldr	r3, [r7, #8]
 8004948:	b29b      	uxth	r3, r3
}
 800494a:	4618      	mov	r0, r3
 800494c:	3714      	adds	r7, #20
 800494e:	46bd      	mov	sp, r7
 8004950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004954:	4770      	bx	lr

08004956 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004956:	b480      	push	{r7}
 8004958:	b085      	sub	sp, #20
 800495a:	af00      	add	r7, sp, #0
 800495c:	6078      	str	r0, [r7, #4]
 800495e:	460b      	mov	r3, r1
 8004960:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8004966:	78fb      	ldrb	r3, [r7, #3]
 8004968:	015a      	lsls	r2, r3, #5
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	4413      	add	r3, r2
 800496e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004972:	689b      	ldr	r3, [r3, #8]
 8004974:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800497c:	695b      	ldr	r3, [r3, #20]
 800497e:	68ba      	ldr	r2, [r7, #8]
 8004980:	4013      	ands	r3, r2
 8004982:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004984:	68bb      	ldr	r3, [r7, #8]
}
 8004986:	4618      	mov	r0, r3
 8004988:	3714      	adds	r7, #20
 800498a:	46bd      	mov	sp, r7
 800498c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004990:	4770      	bx	lr

08004992 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004992:	b480      	push	{r7}
 8004994:	b087      	sub	sp, #28
 8004996:	af00      	add	r7, sp, #0
 8004998:	6078      	str	r0, [r7, #4]
 800499a:	460b      	mov	r3, r1
 800499c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80049a2:	697b      	ldr	r3, [r7, #20]
 80049a4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80049a8:	691b      	ldr	r3, [r3, #16]
 80049aa:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80049ac:	697b      	ldr	r3, [r7, #20]
 80049ae:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80049b2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80049b4:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80049b6:	78fb      	ldrb	r3, [r7, #3]
 80049b8:	f003 030f 	and.w	r3, r3, #15
 80049bc:	68fa      	ldr	r2, [r7, #12]
 80049be:	fa22 f303 	lsr.w	r3, r2, r3
 80049c2:	01db      	lsls	r3, r3, #7
 80049c4:	b2db      	uxtb	r3, r3
 80049c6:	693a      	ldr	r2, [r7, #16]
 80049c8:	4313      	orrs	r3, r2
 80049ca:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80049cc:	78fb      	ldrb	r3, [r7, #3]
 80049ce:	015a      	lsls	r2, r3, #5
 80049d0:	697b      	ldr	r3, [r7, #20]
 80049d2:	4413      	add	r3, r2
 80049d4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80049d8:	689b      	ldr	r3, [r3, #8]
 80049da:	693a      	ldr	r2, [r7, #16]
 80049dc:	4013      	ands	r3, r2
 80049de:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80049e0:	68bb      	ldr	r3, [r7, #8]
}
 80049e2:	4618      	mov	r0, r3
 80049e4:	371c      	adds	r7, #28
 80049e6:	46bd      	mov	sp, r7
 80049e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ec:	4770      	bx	lr

080049ee <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80049ee:	b480      	push	{r7}
 80049f0:	b083      	sub	sp, #12
 80049f2:	af00      	add	r7, sp, #0
 80049f4:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	695b      	ldr	r3, [r3, #20]
 80049fa:	f003 0301 	and.w	r3, r3, #1
}
 80049fe:	4618      	mov	r0, r3
 8004a00:	370c      	adds	r7, #12
 8004a02:	46bd      	mov	sp, r7
 8004a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a08:	4770      	bx	lr

08004a0a <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8004a0a:	b480      	push	{r7}
 8004a0c:	b085      	sub	sp, #20
 8004a0e:	af00      	add	r7, sp, #0
 8004a10:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	68fa      	ldr	r2, [r7, #12]
 8004a20:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004a24:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8004a28:	f023 0307 	bic.w	r3, r3, #7
 8004a2c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004a34:	685b      	ldr	r3, [r3, #4]
 8004a36:	68fa      	ldr	r2, [r7, #12]
 8004a38:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004a3c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004a40:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004a42:	2300      	movs	r3, #0
}
 8004a44:	4618      	mov	r0, r3
 8004a46:	3714      	adds	r7, #20
 8004a48:	46bd      	mov	sp, r7
 8004a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a4e:	4770      	bx	lr

08004a50 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8004a50:	b480      	push	{r7}
 8004a52:	b087      	sub	sp, #28
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	60f8      	str	r0, [r7, #12]
 8004a58:	460b      	mov	r3, r1
 8004a5a:	607a      	str	r2, [r7, #4]
 8004a5c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	333c      	adds	r3, #60	@ 0x3c
 8004a66:	3304      	adds	r3, #4
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8004a6c:	693b      	ldr	r3, [r7, #16]
 8004a6e:	4a26      	ldr	r2, [pc, #152]	@ (8004b08 <USB_EP0_OutStart+0xb8>)
 8004a70:	4293      	cmp	r3, r2
 8004a72:	d90a      	bls.n	8004a8a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004a74:	697b      	ldr	r3, [r7, #20]
 8004a76:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004a80:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004a84:	d101      	bne.n	8004a8a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8004a86:	2300      	movs	r3, #0
 8004a88:	e037      	b.n	8004afa <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8004a8a:	697b      	ldr	r3, [r7, #20]
 8004a8c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004a90:	461a      	mov	r2, r3
 8004a92:	2300      	movs	r3, #0
 8004a94:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004a96:	697b      	ldr	r3, [r7, #20]
 8004a98:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004a9c:	691b      	ldr	r3, [r3, #16]
 8004a9e:	697a      	ldr	r2, [r7, #20]
 8004aa0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004aa4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004aa8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8004aaa:	697b      	ldr	r3, [r7, #20]
 8004aac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004ab0:	691b      	ldr	r3, [r3, #16]
 8004ab2:	697a      	ldr	r2, [r7, #20]
 8004ab4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004ab8:	f043 0318 	orr.w	r3, r3, #24
 8004abc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8004abe:	697b      	ldr	r3, [r7, #20]
 8004ac0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004ac4:	691b      	ldr	r3, [r3, #16]
 8004ac6:	697a      	ldr	r2, [r7, #20]
 8004ac8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004acc:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8004ad0:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8004ad2:	7afb      	ldrb	r3, [r7, #11]
 8004ad4:	2b01      	cmp	r3, #1
 8004ad6:	d10f      	bne.n	8004af8 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8004ad8:	697b      	ldr	r3, [r7, #20]
 8004ada:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004ade:	461a      	mov	r2, r3
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8004ae4:	697b      	ldr	r3, [r7, #20]
 8004ae6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	697a      	ldr	r2, [r7, #20]
 8004aee:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004af2:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8004af6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004af8:	2300      	movs	r3, #0
}
 8004afa:	4618      	mov	r0, r3
 8004afc:	371c      	adds	r7, #28
 8004afe:	46bd      	mov	sp, r7
 8004b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b04:	4770      	bx	lr
 8004b06:	bf00      	nop
 8004b08:	4f54300a 	.word	0x4f54300a

08004b0c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004b0c:	b480      	push	{r7}
 8004b0e:	b085      	sub	sp, #20
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004b14:	2300      	movs	r3, #0
 8004b16:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	3301      	adds	r3, #1
 8004b1c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004b24:	d901      	bls.n	8004b2a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004b26:	2303      	movs	r3, #3
 8004b28:	e01b      	b.n	8004b62 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	691b      	ldr	r3, [r3, #16]
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	daf2      	bge.n	8004b18 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004b32:	2300      	movs	r3, #0
 8004b34:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	691b      	ldr	r3, [r3, #16]
 8004b3a:	f043 0201 	orr.w	r2, r3, #1
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	3301      	adds	r3, #1
 8004b46:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004b4e:	d901      	bls.n	8004b54 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004b50:	2303      	movs	r3, #3
 8004b52:	e006      	b.n	8004b62 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	691b      	ldr	r3, [r3, #16]
 8004b58:	f003 0301 	and.w	r3, r3, #1
 8004b5c:	2b01      	cmp	r3, #1
 8004b5e:	d0f0      	beq.n	8004b42 <USB_CoreReset+0x36>

  return HAL_OK;
 8004b60:	2300      	movs	r3, #0
}
 8004b62:	4618      	mov	r0, r3
 8004b64:	3714      	adds	r7, #20
 8004b66:	46bd      	mov	sp, r7
 8004b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b6c:	4770      	bx	lr
	...

08004b70 <USBD_CUSTOM_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004b70:	b580      	push	{r7, lr}
 8004b72:	b084      	sub	sp, #16
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	6078      	str	r0, [r7, #4]
 8004b78:	460b      	mov	r3, r1
 8004b7a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)USBD_malloc(sizeof(USBD_CUSTOM_HID_HandleTypeDef));
 8004b7c:	2054      	movs	r0, #84	@ 0x54
 8004b7e:	f002 fb3b 	bl	80071f8 <USBD_static_malloc>
 8004b82:	60f8      	str	r0, [r7, #12]

  if (hhid == NULL)
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d109      	bne.n	8004b9e <USBD_CUSTOM_HID_Init+0x2e>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	32b0      	adds	r2, #176	@ 0xb0
 8004b94:	2100      	movs	r1, #0
 8004b96:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8004b9a:	2302      	movs	r3, #2
 8004b9c:	e08b      	b.n	8004cb6 <USBD_CUSTOM_HID_Init+0x146>
  }

  pdev->pClassDataCmsit[pdev->classId] = (void *)hhid;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	32b0      	adds	r2, #176	@ 0xb0
 8004ba8:	68f9      	ldr	r1, [r7, #12]
 8004baa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	32b0      	adds	r2, #176	@ 0xb0
 8004bb8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  /* Get the Endpoints addresses allocated for this class instance */
  CUSTOMHIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
  CUSTOMHIDOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	7c1b      	ldrb	r3, [r3, #16]
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d11b      	bne.n	8004c02 <USBD_CUSTOM_HID_Init+0x92>
  {
    pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].bInterval = CUSTOM_HID_HS_BINTERVAL;
 8004bca:	4b3d      	ldr	r3, [pc, #244]	@ (8004cc0 <USBD_CUSTOM_HID_Init+0x150>)
 8004bcc:	781b      	ldrb	r3, [r3, #0]
 8004bce:	f003 020f 	and.w	r2, r3, #15
 8004bd2:	6879      	ldr	r1, [r7, #4]
 8004bd4:	4613      	mov	r3, r2
 8004bd6:	009b      	lsls	r3, r3, #2
 8004bd8:	4413      	add	r3, r2
 8004bda:	009b      	lsls	r3, r3, #2
 8004bdc:	440b      	add	r3, r1
 8004bde:	3326      	adds	r3, #38	@ 0x26
 8004be0:	2205      	movs	r2, #5
 8004be2:	801a      	strh	r2, [r3, #0]
    pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].bInterval = CUSTOM_HID_HS_BINTERVAL;
 8004be4:	4b37      	ldr	r3, [pc, #220]	@ (8004cc4 <USBD_CUSTOM_HID_Init+0x154>)
 8004be6:	781b      	ldrb	r3, [r3, #0]
 8004be8:	f003 020f 	and.w	r2, r3, #15
 8004bec:	6879      	ldr	r1, [r7, #4]
 8004bee:	4613      	mov	r3, r2
 8004bf0:	009b      	lsls	r3, r3, #2
 8004bf2:	4413      	add	r3, r2
 8004bf4:	009b      	lsls	r3, r3, #2
 8004bf6:	440b      	add	r3, r1
 8004bf8:	f503 73b3 	add.w	r3, r3, #358	@ 0x166
 8004bfc:	2205      	movs	r2, #5
 8004bfe:	801a      	strh	r2, [r3, #0]
 8004c00:	e01a      	b.n	8004c38 <USBD_CUSTOM_HID_Init+0xc8>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].bInterval = CUSTOM_HID_FS_BINTERVAL;
 8004c02:	4b2f      	ldr	r3, [pc, #188]	@ (8004cc0 <USBD_CUSTOM_HID_Init+0x150>)
 8004c04:	781b      	ldrb	r3, [r3, #0]
 8004c06:	f003 020f 	and.w	r2, r3, #15
 8004c0a:	6879      	ldr	r1, [r7, #4]
 8004c0c:	4613      	mov	r3, r2
 8004c0e:	009b      	lsls	r3, r3, #2
 8004c10:	4413      	add	r3, r2
 8004c12:	009b      	lsls	r3, r3, #2
 8004c14:	440b      	add	r3, r1
 8004c16:	3326      	adds	r3, #38	@ 0x26
 8004c18:	2205      	movs	r2, #5
 8004c1a:	801a      	strh	r2, [r3, #0]
    pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].bInterval = CUSTOM_HID_FS_BINTERVAL;
 8004c1c:	4b29      	ldr	r3, [pc, #164]	@ (8004cc4 <USBD_CUSTOM_HID_Init+0x154>)
 8004c1e:	781b      	ldrb	r3, [r3, #0]
 8004c20:	f003 020f 	and.w	r2, r3, #15
 8004c24:	6879      	ldr	r1, [r7, #4]
 8004c26:	4613      	mov	r3, r2
 8004c28:	009b      	lsls	r3, r3, #2
 8004c2a:	4413      	add	r3, r2
 8004c2c:	009b      	lsls	r3, r3, #2
 8004c2e:	440b      	add	r3, r1
 8004c30:	f503 73b3 	add.w	r3, r3, #358	@ 0x166
 8004c34:	2205      	movs	r2, #5
 8004c36:	801a      	strh	r2, [r3, #0]
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, CUSTOMHIDInEpAdd, USBD_EP_TYPE_INTR,
 8004c38:	4b21      	ldr	r3, [pc, #132]	@ (8004cc0 <USBD_CUSTOM_HID_Init+0x150>)
 8004c3a:	7819      	ldrb	r1, [r3, #0]
 8004c3c:	2302      	movs	r3, #2
 8004c3e:	2203      	movs	r2, #3
 8004c40:	6878      	ldr	r0, [r7, #4]
 8004c42:	f002 f9c8 	bl	8006fd6 <USBD_LL_OpenEP>
                       CUSTOM_HID_EPIN_SIZE);

  pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].is_used = 1U;
 8004c46:	4b1e      	ldr	r3, [pc, #120]	@ (8004cc0 <USBD_CUSTOM_HID_Init+0x150>)
 8004c48:	781b      	ldrb	r3, [r3, #0]
 8004c4a:	f003 020f 	and.w	r2, r3, #15
 8004c4e:	6879      	ldr	r1, [r7, #4]
 8004c50:	4613      	mov	r3, r2
 8004c52:	009b      	lsls	r3, r3, #2
 8004c54:	4413      	add	r3, r2
 8004c56:	009b      	lsls	r3, r3, #2
 8004c58:	440b      	add	r3, r1
 8004c5a:	3324      	adds	r3, #36	@ 0x24
 8004c5c:	2201      	movs	r2, #1
 8004c5e:	801a      	strh	r2, [r3, #0]

  /* Open EP OUT */
  (void)USBD_LL_OpenEP(pdev, CUSTOMHIDOutEpAdd, USBD_EP_TYPE_INTR,
 8004c60:	4b18      	ldr	r3, [pc, #96]	@ (8004cc4 <USBD_CUSTOM_HID_Init+0x154>)
 8004c62:	7819      	ldrb	r1, [r3, #0]
 8004c64:	2302      	movs	r3, #2
 8004c66:	2203      	movs	r2, #3
 8004c68:	6878      	ldr	r0, [r7, #4]
 8004c6a:	f002 f9b4 	bl	8006fd6 <USBD_LL_OpenEP>
                       CUSTOM_HID_EPOUT_SIZE);

  pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].is_used = 1U;
 8004c6e:	4b15      	ldr	r3, [pc, #84]	@ (8004cc4 <USBD_CUSTOM_HID_Init+0x154>)
 8004c70:	781b      	ldrb	r3, [r3, #0]
 8004c72:	f003 020f 	and.w	r2, r3, #15
 8004c76:	6879      	ldr	r1, [r7, #4]
 8004c78:	4613      	mov	r3, r2
 8004c7a:	009b      	lsls	r3, r3, #2
 8004c7c:	4413      	add	r3, r2
 8004c7e:	009b      	lsls	r3, r3, #2
 8004c80:	440b      	add	r3, r1
 8004c82:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8004c86:	2201      	movs	r2, #1
 8004c88:	801a      	strh	r2, [r3, #0]

  hhid->state = CUSTOM_HID_IDLE;
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	2200      	movs	r2, #0
 8004c8e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8004c98:	687a      	ldr	r2, [r7, #4]
 8004c9a:	33b0      	adds	r3, #176	@ 0xb0
 8004c9c:	009b      	lsls	r3, r3, #2
 8004c9e:	4413      	add	r3, r2
 8004ca0:	685b      	ldr	r3, [r3, #4]
 8004ca2:	685b      	ldr	r3, [r3, #4]
 8004ca4:	4798      	blx	r3

#ifndef USBD_CUSTOMHID_OUT_PREPARE_RECEIVE_DISABLED
  /* Prepare Out endpoint to receive 1st packet */
  (void)USBD_LL_PrepareReceive(pdev, CUSTOMHIDOutEpAdd, hhid->Report_buf,
 8004ca6:	4b07      	ldr	r3, [pc, #28]	@ (8004cc4 <USBD_CUSTOM_HID_Init+0x154>)
 8004ca8:	7819      	ldrb	r1, [r3, #0]
 8004caa:	68fa      	ldr	r2, [r7, #12]
 8004cac:	2340      	movs	r3, #64	@ 0x40
 8004cae:	6878      	ldr	r0, [r7, #4]
 8004cb0:	f002 fa80 	bl	80071b4 <USBD_LL_PrepareReceive>
                               USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);
#endif /* USBD_CUSTOMHID_OUT_PREPARE_RECEIVE_DISABLED */

  return (uint8_t)USBD_OK;
 8004cb4:	2300      	movs	r3, #0
}
 8004cb6:	4618      	mov	r0, r3
 8004cb8:	3710      	adds	r7, #16
 8004cba:	46bd      	mov	sp, r7
 8004cbc:	bd80      	pop	{r7, pc}
 8004cbe:	bf00      	nop
 8004cc0:	20000086 	.word	0x20000086
 8004cc4:	20000087 	.word	0x20000087

08004cc8 <USBD_CUSTOM_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004cc8:	b580      	push	{r7, lr}
 8004cca:	b082      	sub	sp, #8
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	6078      	str	r0, [r7, #4]
 8004cd0:	460b      	mov	r3, r1
 8004cd2:	70fb      	strb	r3, [r7, #3]
  CUSTOMHIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
  CUSTOMHIDOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close CUSTOM_HID EP IN */
  (void)USBD_LL_CloseEP(pdev, CUSTOMHIDInEpAdd);
 8004cd4:	4b37      	ldr	r3, [pc, #220]	@ (8004db4 <USBD_CUSTOM_HID_DeInit+0xec>)
 8004cd6:	781b      	ldrb	r3, [r3, #0]
 8004cd8:	4619      	mov	r1, r3
 8004cda:	6878      	ldr	r0, [r7, #4]
 8004cdc:	f002 f9a1 	bl	8007022 <USBD_LL_CloseEP>
  pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].is_used = 0U;
 8004ce0:	4b34      	ldr	r3, [pc, #208]	@ (8004db4 <USBD_CUSTOM_HID_DeInit+0xec>)
 8004ce2:	781b      	ldrb	r3, [r3, #0]
 8004ce4:	f003 020f 	and.w	r2, r3, #15
 8004ce8:	6879      	ldr	r1, [r7, #4]
 8004cea:	4613      	mov	r3, r2
 8004cec:	009b      	lsls	r3, r3, #2
 8004cee:	4413      	add	r3, r2
 8004cf0:	009b      	lsls	r3, r3, #2
 8004cf2:	440b      	add	r3, r1
 8004cf4:	3324      	adds	r3, #36	@ 0x24
 8004cf6:	2200      	movs	r2, #0
 8004cf8:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].bInterval = 0U;
 8004cfa:	4b2e      	ldr	r3, [pc, #184]	@ (8004db4 <USBD_CUSTOM_HID_DeInit+0xec>)
 8004cfc:	781b      	ldrb	r3, [r3, #0]
 8004cfe:	f003 020f 	and.w	r2, r3, #15
 8004d02:	6879      	ldr	r1, [r7, #4]
 8004d04:	4613      	mov	r3, r2
 8004d06:	009b      	lsls	r3, r3, #2
 8004d08:	4413      	add	r3, r2
 8004d0a:	009b      	lsls	r3, r3, #2
 8004d0c:	440b      	add	r3, r1
 8004d0e:	3326      	adds	r3, #38	@ 0x26
 8004d10:	2200      	movs	r2, #0
 8004d12:	801a      	strh	r2, [r3, #0]

  /* Close CUSTOM_HID EP OUT */
  (void)USBD_LL_CloseEP(pdev, CUSTOMHIDOutEpAdd);
 8004d14:	4b28      	ldr	r3, [pc, #160]	@ (8004db8 <USBD_CUSTOM_HID_DeInit+0xf0>)
 8004d16:	781b      	ldrb	r3, [r3, #0]
 8004d18:	4619      	mov	r1, r3
 8004d1a:	6878      	ldr	r0, [r7, #4]
 8004d1c:	f002 f981 	bl	8007022 <USBD_LL_CloseEP>
  pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].is_used = 0U;
 8004d20:	4b25      	ldr	r3, [pc, #148]	@ (8004db8 <USBD_CUSTOM_HID_DeInit+0xf0>)
 8004d22:	781b      	ldrb	r3, [r3, #0]
 8004d24:	f003 020f 	and.w	r2, r3, #15
 8004d28:	6879      	ldr	r1, [r7, #4]
 8004d2a:	4613      	mov	r3, r2
 8004d2c:	009b      	lsls	r3, r3, #2
 8004d2e:	4413      	add	r3, r2
 8004d30:	009b      	lsls	r3, r3, #2
 8004d32:	440b      	add	r3, r1
 8004d34:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8004d38:	2200      	movs	r2, #0
 8004d3a:	801a      	strh	r2, [r3, #0]
  pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].bInterval = 0U;
 8004d3c:	4b1e      	ldr	r3, [pc, #120]	@ (8004db8 <USBD_CUSTOM_HID_DeInit+0xf0>)
 8004d3e:	781b      	ldrb	r3, [r3, #0]
 8004d40:	f003 020f 	and.w	r2, r3, #15
 8004d44:	6879      	ldr	r1, [r7, #4]
 8004d46:	4613      	mov	r3, r2
 8004d48:	009b      	lsls	r3, r3, #2
 8004d4a:	4413      	add	r3, r2
 8004d4c:	009b      	lsls	r3, r3, #2
 8004d4e:	440b      	add	r3, r1
 8004d50:	f503 73b3 	add.w	r3, r3, #358	@ 0x166
 8004d54:	2200      	movs	r2, #0
 8004d56:	801a      	strh	r2, [r3, #0]

  /* Free allocated memory */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	32b0      	adds	r2, #176	@ 0xb0
 8004d62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d01f      	beq.n	8004daa <USBD_CUSTOM_HID_DeInit+0xe2>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8004d70:	687a      	ldr	r2, [r7, #4]
 8004d72:	33b0      	adds	r3, #176	@ 0xb0
 8004d74:	009b      	lsls	r3, r3, #2
 8004d76:	4413      	add	r3, r2
 8004d78:	685b      	ldr	r3, [r3, #4]
 8004d7a:	689b      	ldr	r3, [r3, #8]
 8004d7c:	4798      	blx	r3
    USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	32b0      	adds	r2, #176	@ 0xb0
 8004d88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004d8c:	4618      	mov	r0, r3
 8004d8e:	f002 fa41 	bl	8007214 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	32b0      	adds	r2, #176	@ 0xb0
 8004d9c:	2100      	movs	r1, #0
 8004d9e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	2200      	movs	r2, #0
 8004da6:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8004daa:	2300      	movs	r3, #0
}
 8004dac:	4618      	mov	r0, r3
 8004dae:	3708      	adds	r7, #8
 8004db0:	46bd      	mov	sp, r7
 8004db2:	bd80      	pop	{r7, pc}
 8004db4:	20000086 	.word	0x20000086
 8004db8:	20000087 	.word	0x20000087

08004dbc <USBD_CUSTOM_HID_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_Setup(USBD_HandleTypeDef *pdev,
                                     USBD_SetupReqTypedef *req)
{
 8004dbc:	b580      	push	{r7, lr}
 8004dbe:	b088      	sub	sp, #32
 8004dc0:	af00      	add	r7, sp, #0
 8004dc2:	6078      	str	r0, [r7, #4]
 8004dc4:	6039      	str	r1, [r7, #0]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	32b0      	adds	r2, #176	@ 0xb0
 8004dd0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004dd4:	613b      	str	r3, [r7, #16]
  uint16_t len = 0U;
 8004dd6:	2300      	movs	r3, #0
 8004dd8:	83fb      	strh	r3, [r7, #30]
#ifdef USBD_CUSTOMHID_CTRL_REQ_GET_REPORT_ENABLED
  uint16_t ReportLength = 0U;
 8004dda:	2300      	movs	r3, #0
 8004ddc:	81fb      	strh	r3, [r7, #14]
#endif /* USBD_CUSTOMHID_CTRL_REQ_GET_REPORT_ENABLED */
  uint8_t  *pbuf = NULL;
 8004dde:	2300      	movs	r3, #0
 8004de0:	61bb      	str	r3, [r7, #24]
  uint16_t status_info = 0U;
 8004de2:	2300      	movs	r3, #0
 8004de4:	81bb      	strh	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 8004de6:	2300      	movs	r3, #0
 8004de8:	75fb      	strb	r3, [r7, #23]

  if (hhid == NULL)
 8004dea:	693b      	ldr	r3, [r7, #16]
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d101      	bne.n	8004df4 <USBD_CUSTOM_HID_Setup+0x38>
  {
    return (uint8_t)USBD_FAIL;
 8004df0:	2303      	movs	r3, #3
 8004df2:	e13c      	b.n	800506e <USBD_CUSTOM_HID_Setup+0x2b2>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004df4:	683b      	ldr	r3, [r7, #0]
 8004df6:	781b      	ldrb	r3, [r3, #0]
 8004df8:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	f000 808e 	beq.w	8004f1e <USBD_CUSTOM_HID_Setup+0x162>
 8004e02:	2b20      	cmp	r3, #32
 8004e04:	f040 812b 	bne.w	800505e <USBD_CUSTOM_HID_Setup+0x2a2>
  {
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
 8004e08:	683b      	ldr	r3, [r7, #0]
 8004e0a:	785b      	ldrb	r3, [r3, #1]
 8004e0c:	3b01      	subs	r3, #1
 8004e0e:	2b0a      	cmp	r3, #10
 8004e10:	d87d      	bhi.n	8004f0e <USBD_CUSTOM_HID_Setup+0x152>
 8004e12:	a201      	add	r2, pc, #4	@ (adr r2, 8004e18 <USBD_CUSTOM_HID_Setup+0x5c>)
 8004e14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e18:	08004ea3 	.word	0x08004ea3
 8004e1c:	08004e75 	.word	0x08004e75
 8004e20:	08004e53 	.word	0x08004e53
 8004e24:	08004f0f 	.word	0x08004f0f
 8004e28:	08004f0f 	.word	0x08004f0f
 8004e2c:	08004f0f 	.word	0x08004f0f
 8004e30:	08004f0f 	.word	0x08004f0f
 8004e34:	08004f0f 	.word	0x08004f0f
 8004e38:	08004e85 	.word	0x08004e85
 8004e3c:	08004e63 	.word	0x08004e63
 8004e40:	08004e45 	.word	0x08004e45
      {
        case CUSTOM_HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 8004e44:	683b      	ldr	r3, [r7, #0]
 8004e46:	885b      	ldrh	r3, [r3, #2]
 8004e48:	b2db      	uxtb	r3, r3
 8004e4a:	461a      	mov	r2, r3
 8004e4c:	693b      	ldr	r3, [r7, #16]
 8004e4e:	641a      	str	r2, [r3, #64]	@ 0x40
          break;
 8004e50:	e064      	b.n	8004f1c <USBD_CUSTOM_HID_Setup+0x160>

        case CUSTOM_HID_REQ_GET_PROTOCOL:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 8004e52:	693b      	ldr	r3, [r7, #16]
 8004e54:	3340      	adds	r3, #64	@ 0x40
 8004e56:	2201      	movs	r2, #1
 8004e58:	4619      	mov	r1, r3
 8004e5a:	6878      	ldr	r0, [r7, #4]
 8004e5c:	f001 fd1a 	bl	8006894 <USBD_CtlSendData>
          break;
 8004e60:	e05c      	b.n	8004f1c <USBD_CUSTOM_HID_Setup+0x160>

        case CUSTOM_HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8004e62:	683b      	ldr	r3, [r7, #0]
 8004e64:	885b      	ldrh	r3, [r3, #2]
 8004e66:	0a1b      	lsrs	r3, r3, #8
 8004e68:	b29b      	uxth	r3, r3
 8004e6a:	b2db      	uxtb	r3, r3
 8004e6c:	461a      	mov	r2, r3
 8004e6e:	693b      	ldr	r3, [r7, #16]
 8004e70:	645a      	str	r2, [r3, #68]	@ 0x44
          break;
 8004e72:	e053      	b.n	8004f1c <USBD_CUSTOM_HID_Setup+0x160>

        case CUSTOM_HID_REQ_GET_IDLE:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 8004e74:	693b      	ldr	r3, [r7, #16]
 8004e76:	3344      	adds	r3, #68	@ 0x44
 8004e78:	2201      	movs	r2, #1
 8004e7a:	4619      	mov	r1, r3
 8004e7c:	6878      	ldr	r0, [r7, #4]
 8004e7e:	f001 fd09 	bl	8006894 <USBD_CtlSendData>
          break;
 8004e82:	e04b      	b.n	8004f1c <USBD_CUSTOM_HID_Setup+0x160>
            ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->CtrlReqComplete(req->bRequest,
                                                                                            req->wLength);
          }
#endif /* USBD_CUSTOMHID_CTRL_REQ_COMPLETE_CALLBACK_ENABLED */
#ifndef USBD_CUSTOMHID_EP0_OUT_PREPARE_RECEIVE_DISABLED
          hhid->IsReportAvailable = 1U;
 8004e84:	693b      	ldr	r3, [r7, #16]
 8004e86:	2201      	movs	r2, #1
 8004e88:	64da      	str	r2, [r3, #76]	@ 0x4c
          (void)USBD_CtlPrepareRx(pdev, hhid->Report_buf,
 8004e8a:	6939      	ldr	r1, [r7, #16]
                                  MIN(req->wLength, USBD_CUSTOMHID_OUTREPORT_BUF_SIZE));
 8004e8c:	683b      	ldr	r3, [r7, #0]
 8004e8e:	88db      	ldrh	r3, [r3, #6]
 8004e90:	2b40      	cmp	r3, #64	@ 0x40
 8004e92:	bf28      	it	cs
 8004e94:	2340      	movcs	r3, #64	@ 0x40
 8004e96:	b29b      	uxth	r3, r3
          (void)USBD_CtlPrepareRx(pdev, hhid->Report_buf,
 8004e98:	461a      	mov	r2, r3
 8004e9a:	6878      	ldr	r0, [r7, #4]
 8004e9c:	f001 fd26 	bl	80068ec <USBD_CtlPrepareRx>
#endif /* USBD_CUSTOMHID_EP0_OUT_PREPARE_RECEIVE_DISABLED */
          break;
 8004ea0:	e03c      	b.n	8004f1c <USBD_CUSTOM_HID_Setup+0x160>
#ifdef USBD_CUSTOMHID_CTRL_REQ_GET_REPORT_ENABLED
        case CUSTOM_HID_REQ_GET_REPORT:
          if (((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->GetReport != NULL)
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8004ea8:	687a      	ldr	r2, [r7, #4]
 8004eaa:	33b0      	adds	r3, #176	@ 0xb0
 8004eac:	009b      	lsls	r3, r3, #2
 8004eae:	4413      	add	r3, r2
 8004eb0:	685b      	ldr	r3, [r3, #4]
 8004eb2:	691b      	ldr	r3, [r3, #16]
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d010      	beq.n	8004eda <USBD_CUSTOM_HID_Setup+0x11e>
          {
            ReportLength = req->wLength;
 8004eb8:	683b      	ldr	r3, [r7, #0]
 8004eba:	88db      	ldrh	r3, [r3, #6]
 8004ebc:	81fb      	strh	r3, [r7, #14]

            /* Get report data buffer */
            pbuf = ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->GetReport(&ReportLength);
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8004ec4:	687a      	ldr	r2, [r7, #4]
 8004ec6:	33b0      	adds	r3, #176	@ 0xb0
 8004ec8:	009b      	lsls	r3, r3, #2
 8004eca:	4413      	add	r3, r2
 8004ecc:	685b      	ldr	r3, [r3, #4]
 8004ece:	691b      	ldr	r3, [r3, #16]
 8004ed0:	f107 020e 	add.w	r2, r7, #14
 8004ed4:	4610      	mov	r0, r2
 8004ed6:	4798      	blx	r3
 8004ed8:	61b8      	str	r0, [r7, #24]
          }

          if ((pbuf != NULL) && (ReportLength != 0U))
 8004eda:	69bb      	ldr	r3, [r7, #24]
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d011      	beq.n	8004f04 <USBD_CUSTOM_HID_Setup+0x148>
 8004ee0:	89fb      	ldrh	r3, [r7, #14]
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d00e      	beq.n	8004f04 <USBD_CUSTOM_HID_Setup+0x148>
          {
            len = MIN(ReportLength, req->wLength);
 8004ee6:	683b      	ldr	r3, [r7, #0]
 8004ee8:	88da      	ldrh	r2, [r3, #6]
 8004eea:	89fb      	ldrh	r3, [r7, #14]
 8004eec:	4293      	cmp	r3, r2
 8004eee:	bf28      	it	cs
 8004ef0:	4613      	movcs	r3, r2
 8004ef2:	83fb      	strh	r3, [r7, #30]

            /* Send the report data over EP0 */
            (void)USBD_CtlSendData(pdev, pbuf, len);
 8004ef4:	8bfb      	ldrh	r3, [r7, #30]
 8004ef6:	461a      	mov	r2, r3
 8004ef8:	69b9      	ldr	r1, [r7, #24]
 8004efa:	6878      	ldr	r0, [r7, #4]
 8004efc:	f001 fcca 	bl	8006894 <USBD_CtlSendData>
 8004f00:	bf00      	nop
#else
            /* Stall EP0 if no data available */
            USBD_CtlError(pdev, req);
#endif /* USBD_CUSTOMHID_CTRL_REQ_COMPLETE_CALLBACK_ENABLED */
          }
          break;
 8004f02:	e00b      	b.n	8004f1c <USBD_CUSTOM_HID_Setup+0x160>
            USBD_CtlError(pdev, req);
 8004f04:	6839      	ldr	r1, [r7, #0]
 8004f06:	6878      	ldr	r0, [r7, #4]
 8004f08:	f001 fc47 	bl	800679a <USBD_CtlError>
          break;
 8004f0c:	e006      	b.n	8004f1c <USBD_CUSTOM_HID_Setup+0x160>
#endif /* USBD_CUSTOMHID_CTRL_REQ_GET_REPORT_ENABLED */

        default:
          USBD_CtlError(pdev, req);
 8004f0e:	6839      	ldr	r1, [r7, #0]
 8004f10:	6878      	ldr	r0, [r7, #4]
 8004f12:	f001 fc42 	bl	800679a <USBD_CtlError>
          ret = USBD_FAIL;
 8004f16:	2303      	movs	r3, #3
 8004f18:	75fb      	strb	r3, [r7, #23]
          break;
 8004f1a:	bf00      	nop
      }
      break;
 8004f1c:	e0a6      	b.n	800506c <USBD_CUSTOM_HID_Setup+0x2b0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8004f1e:	683b      	ldr	r3, [r7, #0]
 8004f20:	785b      	ldrb	r3, [r3, #1]
 8004f22:	2b0b      	cmp	r3, #11
 8004f24:	f200 8092 	bhi.w	800504c <USBD_CUSTOM_HID_Setup+0x290>
 8004f28:	a201      	add	r2, pc, #4	@ (adr r2, 8004f30 <USBD_CUSTOM_HID_Setup+0x174>)
 8004f2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f2e:	bf00      	nop
 8004f30:	08004f61 	.word	0x08004f61
 8004f34:	0800505b 	.word	0x0800505b
 8004f38:	0800504d 	.word	0x0800504d
 8004f3c:	0800504d 	.word	0x0800504d
 8004f40:	0800504d 	.word	0x0800504d
 8004f44:	0800504d 	.word	0x0800504d
 8004f48:	08004f8b 	.word	0x08004f8b
 8004f4c:	0800504d 	.word	0x0800504d
 8004f50:	0800504d 	.word	0x0800504d
 8004f54:	0800504d 	.word	0x0800504d
 8004f58:	08004ffb 	.word	0x08004ffb
 8004f5c:	08005025 	.word	0x08005025
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8004f66:	b2db      	uxtb	r3, r3
 8004f68:	2b03      	cmp	r3, #3
 8004f6a:	d107      	bne.n	8004f7c <USBD_CUSTOM_HID_Setup+0x1c0>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8004f6c:	f107 030c 	add.w	r3, r7, #12
 8004f70:	2202      	movs	r2, #2
 8004f72:	4619      	mov	r1, r3
 8004f74:	6878      	ldr	r0, [r7, #4]
 8004f76:	f001 fc8d 	bl	8006894 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8004f7a:	e06f      	b.n	800505c <USBD_CUSTOM_HID_Setup+0x2a0>
            USBD_CtlError(pdev, req);
 8004f7c:	6839      	ldr	r1, [r7, #0]
 8004f7e:	6878      	ldr	r0, [r7, #4]
 8004f80:	f001 fc0b 	bl	800679a <USBD_CtlError>
            ret = USBD_FAIL;
 8004f84:	2303      	movs	r3, #3
 8004f86:	75fb      	strb	r3, [r7, #23]
          break;
 8004f88:	e068      	b.n	800505c <USBD_CUSTOM_HID_Setup+0x2a0>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == CUSTOM_HID_REPORT_DESC)
 8004f8a:	683b      	ldr	r3, [r7, #0]
 8004f8c:	885b      	ldrh	r3, [r3, #2]
 8004f8e:	0a1b      	lsrs	r3, r3, #8
 8004f90:	b29b      	uxth	r3, r3
 8004f92:	2b22      	cmp	r3, #34	@ 0x22
 8004f94:	d112      	bne.n	8004fbc <USBD_CUSTOM_HID_Setup+0x200>
          {
            len = MIN(USBD_CUSTOM_HID_REPORT_DESC_SIZE, req->wLength);
 8004f96:	683b      	ldr	r3, [r7, #0]
 8004f98:	88db      	ldrh	r3, [r3, #6]
 8004f9a:	f240 5226 	movw	r2, #1318	@ 0x526
 8004f9e:	4293      	cmp	r3, r2
 8004fa0:	bf28      	it	cs
 8004fa2:	4613      	movcs	r3, r2
 8004fa4:	83fb      	strh	r3, [r7, #30]
            pbuf = ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->pReport;
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8004fac:	687a      	ldr	r2, [r7, #4]
 8004fae:	33b0      	adds	r3, #176	@ 0xb0
 8004fb0:	009b      	lsls	r3, r3, #2
 8004fb2:	4413      	add	r3, r2
 8004fb4:	685b      	ldr	r3, [r3, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	61bb      	str	r3, [r7, #24]
 8004fba:	e00d      	b.n	8004fd8 <USBD_CUSTOM_HID_Setup+0x21c>
          }
          else
          {
            if ((req->wValue >> 8) == CUSTOM_HID_DESCRIPTOR_TYPE)
 8004fbc:	683b      	ldr	r3, [r7, #0]
 8004fbe:	885b      	ldrh	r3, [r3, #2]
 8004fc0:	0a1b      	lsrs	r3, r3, #8
 8004fc2:	b29b      	uxth	r3, r3
 8004fc4:	2b21      	cmp	r3, #33	@ 0x21
 8004fc6:	d107      	bne.n	8004fd8 <USBD_CUSTOM_HID_Setup+0x21c>
            {
              pbuf = USBD_CUSTOM_HID_Desc;
 8004fc8:	4b2b      	ldr	r3, [pc, #172]	@ (8005078 <USBD_CUSTOM_HID_Setup+0x2bc>)
 8004fca:	61bb      	str	r3, [r7, #24]
              len = MIN(USB_CUSTOM_HID_DESC_SIZ, req->wLength);
 8004fcc:	683b      	ldr	r3, [r7, #0]
 8004fce:	88db      	ldrh	r3, [r3, #6]
 8004fd0:	2b09      	cmp	r3, #9
 8004fd2:	bf28      	it	cs
 8004fd4:	2309      	movcs	r3, #9
 8004fd6:	83fb      	strh	r3, [r7, #30]
            }
          }

          if (pbuf != NULL)
 8004fd8:	69bb      	ldr	r3, [r7, #24]
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d006      	beq.n	8004fec <USBD_CUSTOM_HID_Setup+0x230>
          {
            (void)USBD_CtlSendData(pdev, pbuf, len);
 8004fde:	8bfb      	ldrh	r3, [r7, #30]
 8004fe0:	461a      	mov	r2, r3
 8004fe2:	69b9      	ldr	r1, [r7, #24]
 8004fe4:	6878      	ldr	r0, [r7, #4]
 8004fe6:	f001 fc55 	bl	8006894 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8004fea:	e037      	b.n	800505c <USBD_CUSTOM_HID_Setup+0x2a0>
            USBD_CtlError(pdev, req);
 8004fec:	6839      	ldr	r1, [r7, #0]
 8004fee:	6878      	ldr	r0, [r7, #4]
 8004ff0:	f001 fbd3 	bl	800679a <USBD_CtlError>
            ret = USBD_FAIL;
 8004ff4:	2303      	movs	r3, #3
 8004ff6:	75fb      	strb	r3, [r7, #23]
          break;
 8004ff8:	e030      	b.n	800505c <USBD_CUSTOM_HID_Setup+0x2a0>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005000:	b2db      	uxtb	r3, r3
 8005002:	2b03      	cmp	r3, #3
 8005004:	d107      	bne.n	8005016 <USBD_CUSTOM_HID_Setup+0x25a>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 8005006:	693b      	ldr	r3, [r7, #16]
 8005008:	3348      	adds	r3, #72	@ 0x48
 800500a:	2201      	movs	r2, #1
 800500c:	4619      	mov	r1, r3
 800500e:	6878      	ldr	r0, [r7, #4]
 8005010:	f001 fc40 	bl	8006894 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005014:	e022      	b.n	800505c <USBD_CUSTOM_HID_Setup+0x2a0>
            USBD_CtlError(pdev, req);
 8005016:	6839      	ldr	r1, [r7, #0]
 8005018:	6878      	ldr	r0, [r7, #4]
 800501a:	f001 fbbe 	bl	800679a <USBD_CtlError>
            ret = USBD_FAIL;
 800501e:	2303      	movs	r3, #3
 8005020:	75fb      	strb	r3, [r7, #23]
          break;
 8005022:	e01b      	b.n	800505c <USBD_CUSTOM_HID_Setup+0x2a0>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800502a:	b2db      	uxtb	r3, r3
 800502c:	2b03      	cmp	r3, #3
 800502e:	d106      	bne.n	800503e <USBD_CUSTOM_HID_Setup+0x282>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 8005030:	683b      	ldr	r3, [r7, #0]
 8005032:	885b      	ldrh	r3, [r3, #2]
 8005034:	b2db      	uxtb	r3, r3
 8005036:	461a      	mov	r2, r3
 8005038:	693b      	ldr	r3, [r7, #16]
 800503a:	649a      	str	r2, [r3, #72]	@ 0x48
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800503c:	e00e      	b.n	800505c <USBD_CUSTOM_HID_Setup+0x2a0>
            USBD_CtlError(pdev, req);
 800503e:	6839      	ldr	r1, [r7, #0]
 8005040:	6878      	ldr	r0, [r7, #4]
 8005042:	f001 fbaa 	bl	800679a <USBD_CtlError>
            ret = USBD_FAIL;
 8005046:	2303      	movs	r3, #3
 8005048:	75fb      	strb	r3, [r7, #23]
          break;
 800504a:	e007      	b.n	800505c <USBD_CUSTOM_HID_Setup+0x2a0>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800504c:	6839      	ldr	r1, [r7, #0]
 800504e:	6878      	ldr	r0, [r7, #4]
 8005050:	f001 fba3 	bl	800679a <USBD_CtlError>
          ret = USBD_FAIL;
 8005054:	2303      	movs	r3, #3
 8005056:	75fb      	strb	r3, [r7, #23]
          break;
 8005058:	e000      	b.n	800505c <USBD_CUSTOM_HID_Setup+0x2a0>
          break;
 800505a:	bf00      	nop
      }
      break;
 800505c:	e006      	b.n	800506c <USBD_CUSTOM_HID_Setup+0x2b0>

    default:
      USBD_CtlError(pdev, req);
 800505e:	6839      	ldr	r1, [r7, #0]
 8005060:	6878      	ldr	r0, [r7, #4]
 8005062:	f001 fb9a 	bl	800679a <USBD_CtlError>
      ret = USBD_FAIL;
 8005066:	2303      	movs	r3, #3
 8005068:	75fb      	strb	r3, [r7, #23]
      break;
 800506a:	bf00      	nop
  }
  return (uint8_t)ret;
 800506c:	7dfb      	ldrb	r3, [r7, #23]
}
 800506e:	4618      	mov	r0, r3
 8005070:	3720      	adds	r7, #32
 8005072:	46bd      	mov	sp, r7
 8005074:	bd80      	pop	{r7, pc}
 8005076:	bf00      	nop
 8005078:	20000070 	.word	0x20000070

0800507c <USBD_CUSTOM_HID_SendReport>:
{
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CUSTOM_HID_SendReport(USBD_HandleTypeDef *pdev,
                                   uint8_t *report, uint16_t len)
{
 800507c:	b580      	push	{r7, lr}
 800507e:	b086      	sub	sp, #24
 8005080:	af00      	add	r7, sp, #0
 8005082:	60f8      	str	r0, [r7, #12]
 8005084:	60b9      	str	r1, [r7, #8]
 8005086:	4613      	mov	r3, r2
 8005088:	80fb      	strh	r3, [r7, #6]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	32b0      	adds	r2, #176	@ 0xb0
 8005094:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005098:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hhid == NULL)
 800509a:	697b      	ldr	r3, [r7, #20]
 800509c:	2b00      	cmp	r3, #0
 800509e:	d101      	bne.n	80050a4 <USBD_CUSTOM_HID_SendReport+0x28>
  {
    return (uint8_t)USBD_FAIL;
 80050a0:	2303      	movs	r3, #3
 80050a2:	e019      	b.n	80050d8 <USBD_CUSTOM_HID_SendReport+0x5c>
#ifdef USE_USBD_COMPOSITE
  /* Get Endpoint IN address allocated for this class instance */
  CUSTOMHIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, ClassId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80050aa:	b2db      	uxtb	r3, r3
 80050ac:	2b03      	cmp	r3, #3
 80050ae:	d112      	bne.n	80050d6 <USBD_CUSTOM_HID_SendReport+0x5a>
  {
    if (hhid->state == CUSTOM_HID_IDLE)
 80050b0:	697b      	ldr	r3, [r7, #20]
 80050b2:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d10b      	bne.n	80050d2 <USBD_CUSTOM_HID_SendReport+0x56>
    {
      hhid->state = CUSTOM_HID_BUSY;
 80050ba:	697b      	ldr	r3, [r7, #20]
 80050bc:	2201      	movs	r2, #1
 80050be:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      (void)USBD_LL_Transmit(pdev, CUSTOMHIDInEpAdd, report, len);
 80050c2:	4b07      	ldr	r3, [pc, #28]	@ (80050e0 <USBD_CUSTOM_HID_SendReport+0x64>)
 80050c4:	7819      	ldrb	r1, [r3, #0]
 80050c6:	88fb      	ldrh	r3, [r7, #6]
 80050c8:	68ba      	ldr	r2, [r7, #8]
 80050ca:	68f8      	ldr	r0, [r7, #12]
 80050cc:	f002 f851 	bl	8007172 <USBD_LL_Transmit>
 80050d0:	e001      	b.n	80050d6 <USBD_CUSTOM_HID_SendReport+0x5a>
    }
    else
    {
      return (uint8_t)USBD_BUSY;
 80050d2:	2301      	movs	r3, #1
 80050d4:	e000      	b.n	80050d8 <USBD_CUSTOM_HID_SendReport+0x5c>
    }
  }
  return (uint8_t)USBD_OK;
 80050d6:	2300      	movs	r3, #0
}
 80050d8:	4618      	mov	r0, r3
 80050da:	3718      	adds	r7, #24
 80050dc:	46bd      	mov	sp, r7
 80050de:	bd80      	pop	{r7, pc}
 80050e0:	20000086 	.word	0x20000086

080050e4 <USBD_CUSTOM_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetFSCfgDesc(uint16_t *length)
{
 80050e4:	b580      	push	{r7, lr}
 80050e6:	b084      	sub	sp, #16
 80050e8:	af00      	add	r7, sp, #0
 80050ea:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPIN_ADDR);
 80050ec:	2181      	movs	r1, #129	@ 0x81
 80050ee:	4815      	ldr	r0, [pc, #84]	@ (8005144 <USBD_CUSTOM_HID_GetFSCfgDesc+0x60>)
 80050f0:	f000 fd1d 	bl	8005b2e <USBD_GetEpDesc>
 80050f4:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPOUT_ADDR);
 80050f6:	2101      	movs	r1, #1
 80050f8:	4812      	ldr	r0, [pc, #72]	@ (8005144 <USBD_CUSTOM_HID_GetFSCfgDesc+0x60>)
 80050fa:	f000 fd18 	bl	8005b2e <USBD_GetEpDesc>
 80050fe:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	2b00      	cmp	r3, #0
 8005104:	d009      	beq.n	800511a <USBD_CUSTOM_HID_GetFSCfgDesc+0x36>
  {
    pEpInDesc->wMaxPacketSize = CUSTOM_HID_EPIN_SIZE;
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	2200      	movs	r2, #0
 800510a:	f042 0202 	orr.w	r2, r2, #2
 800510e:	711a      	strb	r2, [r3, #4]
 8005110:	2200      	movs	r2, #0
 8005112:	715a      	strb	r2, [r3, #5]
    pEpInDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	2205      	movs	r2, #5
 8005118:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800511a:	68bb      	ldr	r3, [r7, #8]
 800511c:	2b00      	cmp	r3, #0
 800511e:	d009      	beq.n	8005134 <USBD_CUSTOM_HID_GetFSCfgDesc+0x50>
  {
    pEpOutDesc->wMaxPacketSize = CUSTOM_HID_EPOUT_SIZE;
 8005120:	68bb      	ldr	r3, [r7, #8]
 8005122:	2200      	movs	r2, #0
 8005124:	f042 0202 	orr.w	r2, r2, #2
 8005128:	711a      	strb	r2, [r3, #4]
 800512a:	2200      	movs	r2, #0
 800512c:	715a      	strb	r2, [r3, #5]
    pEpOutDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
 800512e:	68bb      	ldr	r3, [r7, #8]
 8005130:	2205      	movs	r2, #5
 8005132:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgDesc);
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	2229      	movs	r2, #41	@ 0x29
 8005138:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgDesc;
 800513a:	4b02      	ldr	r3, [pc, #8]	@ (8005144 <USBD_CUSTOM_HID_GetFSCfgDesc+0x60>)
}
 800513c:	4618      	mov	r0, r3
 800513e:	3710      	adds	r7, #16
 8005140:	46bd      	mov	sp, r7
 8005142:	bd80      	pop	{r7, pc}
 8005144:	20000044 	.word	0x20000044

08005148 <USBD_CUSTOM_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetHSCfgDesc(uint16_t *length)
{
 8005148:	b580      	push	{r7, lr}
 800514a:	b084      	sub	sp, #16
 800514c:	af00      	add	r7, sp, #0
 800514e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPIN_ADDR);
 8005150:	2181      	movs	r1, #129	@ 0x81
 8005152:	4815      	ldr	r0, [pc, #84]	@ (80051a8 <USBD_CUSTOM_HID_GetHSCfgDesc+0x60>)
 8005154:	f000 fceb 	bl	8005b2e <USBD_GetEpDesc>
 8005158:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPOUT_ADDR);
 800515a:	2101      	movs	r1, #1
 800515c:	4812      	ldr	r0, [pc, #72]	@ (80051a8 <USBD_CUSTOM_HID_GetHSCfgDesc+0x60>)
 800515e:	f000 fce6 	bl	8005b2e <USBD_GetEpDesc>
 8005162:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	2b00      	cmp	r3, #0
 8005168:	d009      	beq.n	800517e <USBD_CUSTOM_HID_GetHSCfgDesc+0x36>
  {
    pEpInDesc->wMaxPacketSize = CUSTOM_HID_EPIN_SIZE;
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	2200      	movs	r2, #0
 800516e:	f042 0202 	orr.w	r2, r2, #2
 8005172:	711a      	strb	r2, [r3, #4]
 8005174:	2200      	movs	r2, #0
 8005176:	715a      	strb	r2, [r3, #5]
    pEpInDesc->bInterval = CUSTOM_HID_HS_BINTERVAL;
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	2205      	movs	r2, #5
 800517c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800517e:	68bb      	ldr	r3, [r7, #8]
 8005180:	2b00      	cmp	r3, #0
 8005182:	d009      	beq.n	8005198 <USBD_CUSTOM_HID_GetHSCfgDesc+0x50>
  {
    pEpOutDesc->wMaxPacketSize = CUSTOM_HID_EPOUT_SIZE;
 8005184:	68bb      	ldr	r3, [r7, #8]
 8005186:	2200      	movs	r2, #0
 8005188:	f042 0202 	orr.w	r2, r2, #2
 800518c:	711a      	strb	r2, [r3, #4]
 800518e:	2200      	movs	r2, #0
 8005190:	715a      	strb	r2, [r3, #5]
    pEpOutDesc->bInterval = CUSTOM_HID_HS_BINTERVAL;
 8005192:	68bb      	ldr	r3, [r7, #8]
 8005194:	2205      	movs	r2, #5
 8005196:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgDesc);
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	2229      	movs	r2, #41	@ 0x29
 800519c:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgDesc;
 800519e:	4b02      	ldr	r3, [pc, #8]	@ (80051a8 <USBD_CUSTOM_HID_GetHSCfgDesc+0x60>)
}
 80051a0:	4618      	mov	r0, r3
 80051a2:	3710      	adds	r7, #16
 80051a4:	46bd      	mov	sp, r7
 80051a6:	bd80      	pop	{r7, pc}
 80051a8:	20000044 	.word	0x20000044

080051ac <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80051ac:	b580      	push	{r7, lr}
 80051ae:	b084      	sub	sp, #16
 80051b0:	af00      	add	r7, sp, #0
 80051b2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPIN_ADDR);
 80051b4:	2181      	movs	r1, #129	@ 0x81
 80051b6:	4815      	ldr	r0, [pc, #84]	@ (800520c <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x60>)
 80051b8:	f000 fcb9 	bl	8005b2e <USBD_GetEpDesc>
 80051bc:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPOUT_ADDR);
 80051be:	2101      	movs	r1, #1
 80051c0:	4812      	ldr	r0, [pc, #72]	@ (800520c <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x60>)
 80051c2:	f000 fcb4 	bl	8005b2e <USBD_GetEpDesc>
 80051c6:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d009      	beq.n	80051e2 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x36>
  {
    pEpInDesc->wMaxPacketSize = CUSTOM_HID_EPIN_SIZE;
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	2200      	movs	r2, #0
 80051d2:	f042 0202 	orr.w	r2, r2, #2
 80051d6:	711a      	strb	r2, [r3, #4]
 80051d8:	2200      	movs	r2, #0
 80051da:	715a      	strb	r2, [r3, #5]
    pEpInDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	2205      	movs	r2, #5
 80051e0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80051e2:	68bb      	ldr	r3, [r7, #8]
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d009      	beq.n	80051fc <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x50>
  {
    pEpOutDesc->wMaxPacketSize = CUSTOM_HID_EPOUT_SIZE;
 80051e8:	68bb      	ldr	r3, [r7, #8]
 80051ea:	2200      	movs	r2, #0
 80051ec:	f042 0202 	orr.w	r2, r2, #2
 80051f0:	711a      	strb	r2, [r3, #4]
 80051f2:	2200      	movs	r2, #0
 80051f4:	715a      	strb	r2, [r3, #5]
    pEpOutDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
 80051f6:	68bb      	ldr	r3, [r7, #8]
 80051f8:	2205      	movs	r2, #5
 80051fa:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgDesc);
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	2229      	movs	r2, #41	@ 0x29
 8005200:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgDesc;
 8005202:	4b02      	ldr	r3, [pc, #8]	@ (800520c <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x60>)
}
 8005204:	4618      	mov	r0, r3
 8005206:	3710      	adds	r7, #16
 8005208:	46bd      	mov	sp, r7
 800520a:	bd80      	pop	{r7, pc}
 800520c:	20000044 	.word	0x20000044

08005210 <USBD_CUSTOM_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005210:	b480      	push	{r7}
 8005212:	b083      	sub	sp, #12
 8005214:	af00      	add	r7, sp, #0
 8005216:	6078      	str	r0, [r7, #4]
 8005218:	460b      	mov	r3, r1
 800521a:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId])->state = CUSTOM_HID_IDLE;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	32b0      	adds	r2, #176	@ 0xb0
 8005226:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800522a:	2200      	movs	r2, #0
 800522c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  return (uint8_t)USBD_OK;
 8005230:	2300      	movs	r3, #0
}
 8005232:	4618      	mov	r0, r3
 8005234:	370c      	adds	r7, #12
 8005236:	46bd      	mov	sp, r7
 8005238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800523c:	4770      	bx	lr

0800523e <USBD_CUSTOM_HID_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800523e:	b580      	push	{r7, lr}
 8005240:	b084      	sub	sp, #16
 8005242:	af00      	add	r7, sp, #0
 8005244:	6078      	str	r0, [r7, #4]
 8005246:	460b      	mov	r3, r1
 8005248:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	32b0      	adds	r2, #176	@ 0xb0
 8005254:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005258:	2b00      	cmp	r3, #0
 800525a:	d101      	bne.n	8005260 <USBD_CUSTOM_HID_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800525c:	2303      	movs	r3, #3
 800525e:	e017      	b.n	8005290 <USBD_CUSTOM_HID_DataOut+0x52>
  }

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	32b0      	adds	r2, #176	@ 0xb0
 800526a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800526e:	60fb      	str	r3, [r7, #12]

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application processing */
  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->OutEvent(hhid->Report_buf[0],
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005276:	687a      	ldr	r2, [r7, #4]
 8005278:	33b0      	adds	r3, #176	@ 0xb0
 800527a:	009b      	lsls	r3, r3, #2
 800527c:	4413      	add	r3, r2
 800527e:	685b      	ldr	r3, [r3, #4]
 8005280:	68db      	ldr	r3, [r3, #12]
 8005282:	68fa      	ldr	r2, [r7, #12]
 8005284:	7810      	ldrb	r0, [r2, #0]
 8005286:	68fa      	ldr	r2, [r7, #12]
 8005288:	7852      	ldrb	r2, [r2, #1]
 800528a:	4611      	mov	r1, r2
 800528c:	4798      	blx	r3
                                                                           hhid->Report_buf[1]);

  return (uint8_t)USBD_OK;
 800528e:	2300      	movs	r3, #0
}
 8005290:	4618      	mov	r0, r3
 8005292:	3710      	adds	r7, #16
 8005294:	46bd      	mov	sp, r7
 8005296:	bd80      	pop	{r7, pc}

08005298 <USBD_CUSTOM_HID_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8005298:	b580      	push	{r7, lr}
 800529a:	b084      	sub	sp, #16
 800529c:	af00      	add	r7, sp, #0
 800529e:	6078      	str	r0, [r7, #4]
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	32b0      	adds	r2, #176	@ 0xb0
 80052aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d101      	bne.n	80052b6 <USBD_CUSTOM_HID_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 80052b2:	2303      	movs	r3, #3
 80052b4:	e00f      	b.n	80052d6 <USBD_CUSTOM_HID_ReceivePacket+0x3e>
#ifdef USE_USBD_COMPOSITE
  /* Get OUT Endpoint address allocated for this class instance */
  CUSTOMHIDOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	32b0      	adds	r2, #176	@ 0xb0
 80052c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80052c4:	60fb      	str	r3, [r7, #12]

  /* Resume USB Out process */
  (void)USBD_LL_PrepareReceive(pdev, CUSTOMHIDOutEpAdd, hhid->Report_buf,
 80052c6:	4b06      	ldr	r3, [pc, #24]	@ (80052e0 <USBD_CUSTOM_HID_ReceivePacket+0x48>)
 80052c8:	7819      	ldrb	r1, [r3, #0]
 80052ca:	68fa      	ldr	r2, [r7, #12]
 80052cc:	2340      	movs	r3, #64	@ 0x40
 80052ce:	6878      	ldr	r0, [r7, #4]
 80052d0:	f001 ff70 	bl	80071b4 <USBD_LL_PrepareReceive>
                               USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);

  return (uint8_t)USBD_OK;
 80052d4:	2300      	movs	r3, #0
}
 80052d6:	4618      	mov	r0, r3
 80052d8:	3710      	adds	r7, #16
 80052da:	46bd      	mov	sp, r7
 80052dc:	bd80      	pop	{r7, pc}
 80052de:	bf00      	nop
 80052e0:	20000087 	.word	0x20000087

080052e4 <USBD_CUSTOM_HID_EP0_RxReady>:
  *         Handles control request data.
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80052e4:	b580      	push	{r7, lr}
 80052e6:	b084      	sub	sp, #16
 80052e8:	af00      	add	r7, sp, #0
 80052ea:	6078      	str	r0, [r7, #4]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	32b0      	adds	r2, #176	@ 0xb0
 80052f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80052fa:	60fb      	str	r3, [r7, #12]

  if (hhid == NULL)
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d101      	bne.n	8005306 <USBD_CUSTOM_HID_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8005302:	2303      	movs	r3, #3
 8005304:	e016      	b.n	8005334 <USBD_CUSTOM_HID_EP0_RxReady+0x50>
  }

  if (hhid->IsReportAvailable == 1U)
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800530a:	2b01      	cmp	r3, #1
 800530c:	d111      	bne.n	8005332 <USBD_CUSTOM_HID_EP0_RxReady+0x4e>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->OutEvent(hhid->Report_buf[0],
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005314:	687a      	ldr	r2, [r7, #4]
 8005316:	33b0      	adds	r3, #176	@ 0xb0
 8005318:	009b      	lsls	r3, r3, #2
 800531a:	4413      	add	r3, r2
 800531c:	685b      	ldr	r3, [r3, #4]
 800531e:	68db      	ldr	r3, [r3, #12]
 8005320:	68fa      	ldr	r2, [r7, #12]
 8005322:	7810      	ldrb	r0, [r2, #0]
 8005324:	68fa      	ldr	r2, [r7, #12]
 8005326:	7852      	ldrb	r2, [r2, #1]
 8005328:	4611      	mov	r1, r2
 800532a:	4798      	blx	r3
                                                                             hhid->Report_buf[1]);
    hhid->IsReportAvailable = 0U;
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	2200      	movs	r2, #0
 8005330:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  return (uint8_t)USBD_OK;
 8005332:	2300      	movs	r3, #0
}
 8005334:	4618      	mov	r0, r3
 8005336:	3710      	adds	r7, #16
 8005338:	46bd      	mov	sp, r7
 800533a:	bd80      	pop	{r7, pc}

0800533c <USBD_CUSTOM_HID_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 800533c:	b480      	push	{r7}
 800533e:	b083      	sub	sp, #12
 8005340:	af00      	add	r7, sp, #0
 8005342:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_DeviceQualifierDesc);
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	220a      	movs	r2, #10
 8005348:	801a      	strh	r2, [r3, #0]

  return USBD_CUSTOM_HID_DeviceQualifierDesc;
 800534a:	4b03      	ldr	r3, [pc, #12]	@ (8005358 <USBD_CUSTOM_HID_GetDeviceQualifierDesc+0x1c>)
}
 800534c:	4618      	mov	r0, r3
 800534e:	370c      	adds	r7, #12
 8005350:	46bd      	mov	sp, r7
 8005352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005356:	4770      	bx	lr
 8005358:	2000007c 	.word	0x2000007c

0800535c <USBD_CUSTOM_HID_RegisterInterface>:
  * @param  fops: CUSTOMHID Interface callback
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_RegisterInterface(USBD_HandleTypeDef *pdev,
                                          USBD_CUSTOM_HID_ItfTypeDef *fops)
{
 800535c:	b480      	push	{r7}
 800535e:	b083      	sub	sp, #12
 8005360:	af00      	add	r7, sp, #0
 8005362:	6078      	str	r0, [r7, #4]
 8005364:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8005366:	683b      	ldr	r3, [r7, #0]
 8005368:	2b00      	cmp	r3, #0
 800536a:	d101      	bne.n	8005370 <USBD_CUSTOM_HID_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800536c:	2303      	movs	r3, #3
 800536e:	e009      	b.n	8005384 <USBD_CUSTOM_HID_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005376:	687a      	ldr	r2, [r7, #4]
 8005378:	33b0      	adds	r3, #176	@ 0xb0
 800537a:	009b      	lsls	r3, r3, #2
 800537c:	4413      	add	r3, r2
 800537e:	683a      	ldr	r2, [r7, #0]
 8005380:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8005382:	2300      	movs	r3, #0
}
 8005384:	4618      	mov	r0, r3
 8005386:	370c      	adds	r7, #12
 8005388:	46bd      	mov	sp, r7
 800538a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800538e:	4770      	bx	lr

08005390 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8005390:	b580      	push	{r7, lr}
 8005392:	b086      	sub	sp, #24
 8005394:	af00      	add	r7, sp, #0
 8005396:	60f8      	str	r0, [r7, #12]
 8005398:	60b9      	str	r1, [r7, #8]
 800539a:	4613      	mov	r3, r2
 800539c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d101      	bne.n	80053a8 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80053a4:	2303      	movs	r3, #3
 80053a6:	e01f      	b.n	80053e8 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	2200      	movs	r2, #0
 80053ac:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	2200      	movs	r2, #0
 80053b4:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	2200      	movs	r2, #0
 80053bc:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80053c0:	68bb      	ldr	r3, [r7, #8]
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d003      	beq.n	80053ce <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	68ba      	ldr	r2, [r7, #8]
 80053ca:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	2201      	movs	r2, #1
 80053d2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	79fa      	ldrb	r2, [r7, #7]
 80053da:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80053dc:	68f8      	ldr	r0, [r7, #12]
 80053de:	f001 fd93 	bl	8006f08 <USBD_LL_Init>
 80053e2:	4603      	mov	r3, r0
 80053e4:	75fb      	strb	r3, [r7, #23]

  return ret;
 80053e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80053e8:	4618      	mov	r0, r3
 80053ea:	3718      	adds	r7, #24
 80053ec:	46bd      	mov	sp, r7
 80053ee:	bd80      	pop	{r7, pc}

080053f0 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80053f0:	b580      	push	{r7, lr}
 80053f2:	b084      	sub	sp, #16
 80053f4:	af00      	add	r7, sp, #0
 80053f6:	6078      	str	r0, [r7, #4]
 80053f8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80053fa:	2300      	movs	r3, #0
 80053fc:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80053fe:	683b      	ldr	r3, [r7, #0]
 8005400:	2b00      	cmp	r3, #0
 8005402:	d101      	bne.n	8005408 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8005404:	2303      	movs	r3, #3
 8005406:	e025      	b.n	8005454 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	683a      	ldr	r2, [r7, #0]
 800540c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	32ae      	adds	r2, #174	@ 0xae
 800541a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800541e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005420:	2b00      	cmp	r3, #0
 8005422:	d00f      	beq.n	8005444 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	32ae      	adds	r2, #174	@ 0xae
 800542e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005432:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005434:	f107 020e 	add.w	r2, r7, #14
 8005438:	4610      	mov	r0, r2
 800543a:	4798      	blx	r3
 800543c:	4602      	mov	r2, r0
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800544a:	1c5a      	adds	r2, r3, #1
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 8005452:	2300      	movs	r3, #0
}
 8005454:	4618      	mov	r0, r3
 8005456:	3710      	adds	r7, #16
 8005458:	46bd      	mov	sp, r7
 800545a:	bd80      	pop	{r7, pc}

0800545c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800545c:	b580      	push	{r7, lr}
 800545e:	b082      	sub	sp, #8
 8005460:	af00      	add	r7, sp, #0
 8005462:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8005464:	6878      	ldr	r0, [r7, #4]
 8005466:	f001 fd9b 	bl	8006fa0 <USBD_LL_Start>
 800546a:	4603      	mov	r3, r0
}
 800546c:	4618      	mov	r0, r3
 800546e:	3708      	adds	r7, #8
 8005470:	46bd      	mov	sp, r7
 8005472:	bd80      	pop	{r7, pc}

08005474 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8005474:	b480      	push	{r7}
 8005476:	b083      	sub	sp, #12
 8005478:	af00      	add	r7, sp, #0
 800547a:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800547c:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800547e:	4618      	mov	r0, r3
 8005480:	370c      	adds	r7, #12
 8005482:	46bd      	mov	sp, r7
 8005484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005488:	4770      	bx	lr

0800548a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800548a:	b580      	push	{r7, lr}
 800548c:	b084      	sub	sp, #16
 800548e:	af00      	add	r7, sp, #0
 8005490:	6078      	str	r0, [r7, #4]
 8005492:	460b      	mov	r3, r1
 8005494:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8005496:	2300      	movs	r3, #0
 8005498:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d009      	beq.n	80054b8 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	78fa      	ldrb	r2, [r7, #3]
 80054ae:	4611      	mov	r1, r2
 80054b0:	6878      	ldr	r0, [r7, #4]
 80054b2:	4798      	blx	r3
 80054b4:	4603      	mov	r3, r0
 80054b6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80054b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80054ba:	4618      	mov	r0, r3
 80054bc:	3710      	adds	r7, #16
 80054be:	46bd      	mov	sp, r7
 80054c0:	bd80      	pop	{r7, pc}

080054c2 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80054c2:	b580      	push	{r7, lr}
 80054c4:	b084      	sub	sp, #16
 80054c6:	af00      	add	r7, sp, #0
 80054c8:	6078      	str	r0, [r7, #4]
 80054ca:	460b      	mov	r3, r1
 80054cc:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80054ce:	2300      	movs	r3, #0
 80054d0:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80054d8:	685b      	ldr	r3, [r3, #4]
 80054da:	78fa      	ldrb	r2, [r7, #3]
 80054dc:	4611      	mov	r1, r2
 80054de:	6878      	ldr	r0, [r7, #4]
 80054e0:	4798      	blx	r3
 80054e2:	4603      	mov	r3, r0
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d001      	beq.n	80054ec <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80054e8:	2303      	movs	r3, #3
 80054ea:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80054ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80054ee:	4618      	mov	r0, r3
 80054f0:	3710      	adds	r7, #16
 80054f2:	46bd      	mov	sp, r7
 80054f4:	bd80      	pop	{r7, pc}

080054f6 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80054f6:	b580      	push	{r7, lr}
 80054f8:	b084      	sub	sp, #16
 80054fa:	af00      	add	r7, sp, #0
 80054fc:	6078      	str	r0, [r7, #4]
 80054fe:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8005506:	6839      	ldr	r1, [r7, #0]
 8005508:	4618      	mov	r0, r3
 800550a:	f001 f90c 	bl	8006726 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	2201      	movs	r2, #1
 8005512:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800551c:	461a      	mov	r2, r3
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800552a:	f003 031f 	and.w	r3, r3, #31
 800552e:	2b02      	cmp	r3, #2
 8005530:	d01a      	beq.n	8005568 <USBD_LL_SetupStage+0x72>
 8005532:	2b02      	cmp	r3, #2
 8005534:	d822      	bhi.n	800557c <USBD_LL_SetupStage+0x86>
 8005536:	2b00      	cmp	r3, #0
 8005538:	d002      	beq.n	8005540 <USBD_LL_SetupStage+0x4a>
 800553a:	2b01      	cmp	r3, #1
 800553c:	d00a      	beq.n	8005554 <USBD_LL_SetupStage+0x5e>
 800553e:	e01d      	b.n	800557c <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8005546:	4619      	mov	r1, r3
 8005548:	6878      	ldr	r0, [r7, #4]
 800554a:	f000 fb63 	bl	8005c14 <USBD_StdDevReq>
 800554e:	4603      	mov	r3, r0
 8005550:	73fb      	strb	r3, [r7, #15]
      break;
 8005552:	e020      	b.n	8005596 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800555a:	4619      	mov	r1, r3
 800555c:	6878      	ldr	r0, [r7, #4]
 800555e:	f000 fbcb 	bl	8005cf8 <USBD_StdItfReq>
 8005562:	4603      	mov	r3, r0
 8005564:	73fb      	strb	r3, [r7, #15]
      break;
 8005566:	e016      	b.n	8005596 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800556e:	4619      	mov	r1, r3
 8005570:	6878      	ldr	r0, [r7, #4]
 8005572:	f000 fc2d 	bl	8005dd0 <USBD_StdEPReq>
 8005576:	4603      	mov	r3, r0
 8005578:	73fb      	strb	r3, [r7, #15]
      break;
 800557a:	e00c      	b.n	8005596 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8005582:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8005586:	b2db      	uxtb	r3, r3
 8005588:	4619      	mov	r1, r3
 800558a:	6878      	ldr	r0, [r7, #4]
 800558c:	f001 fd68 	bl	8007060 <USBD_LL_StallEP>
 8005590:	4603      	mov	r3, r0
 8005592:	73fb      	strb	r3, [r7, #15]
      break;
 8005594:	bf00      	nop
  }

  return ret;
 8005596:	7bfb      	ldrb	r3, [r7, #15]
}
 8005598:	4618      	mov	r0, r3
 800559a:	3710      	adds	r7, #16
 800559c:	46bd      	mov	sp, r7
 800559e:	bd80      	pop	{r7, pc}

080055a0 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80055a0:	b580      	push	{r7, lr}
 80055a2:	b086      	sub	sp, #24
 80055a4:	af00      	add	r7, sp, #0
 80055a6:	60f8      	str	r0, [r7, #12]
 80055a8:	460b      	mov	r3, r1
 80055aa:	607a      	str	r2, [r7, #4]
 80055ac:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 80055ae:	2300      	movs	r3, #0
 80055b0:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 80055b2:	7afb      	ldrb	r3, [r7, #11]
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d16e      	bne.n	8005696 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 80055be:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80055c6:	2b03      	cmp	r3, #3
 80055c8:	f040 8098 	bne.w	80056fc <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 80055cc:	693b      	ldr	r3, [r7, #16]
 80055ce:	689a      	ldr	r2, [r3, #8]
 80055d0:	693b      	ldr	r3, [r7, #16]
 80055d2:	68db      	ldr	r3, [r3, #12]
 80055d4:	429a      	cmp	r2, r3
 80055d6:	d913      	bls.n	8005600 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 80055d8:	693b      	ldr	r3, [r7, #16]
 80055da:	689a      	ldr	r2, [r3, #8]
 80055dc:	693b      	ldr	r3, [r7, #16]
 80055de:	68db      	ldr	r3, [r3, #12]
 80055e0:	1ad2      	subs	r2, r2, r3
 80055e2:	693b      	ldr	r3, [r7, #16]
 80055e4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80055e6:	693b      	ldr	r3, [r7, #16]
 80055e8:	68da      	ldr	r2, [r3, #12]
 80055ea:	693b      	ldr	r3, [r7, #16]
 80055ec:	689b      	ldr	r3, [r3, #8]
 80055ee:	4293      	cmp	r3, r2
 80055f0:	bf28      	it	cs
 80055f2:	4613      	movcs	r3, r2
 80055f4:	461a      	mov	r2, r3
 80055f6:	6879      	ldr	r1, [r7, #4]
 80055f8:	68f8      	ldr	r0, [r7, #12]
 80055fa:	f001 f994 	bl	8006926 <USBD_CtlContinueRx>
 80055fe:	e07d      	b.n	80056fc <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8005606:	f003 031f 	and.w	r3, r3, #31
 800560a:	2b02      	cmp	r3, #2
 800560c:	d014      	beq.n	8005638 <USBD_LL_DataOutStage+0x98>
 800560e:	2b02      	cmp	r3, #2
 8005610:	d81d      	bhi.n	800564e <USBD_LL_DataOutStage+0xae>
 8005612:	2b00      	cmp	r3, #0
 8005614:	d002      	beq.n	800561c <USBD_LL_DataOutStage+0x7c>
 8005616:	2b01      	cmp	r3, #1
 8005618:	d003      	beq.n	8005622 <USBD_LL_DataOutStage+0x82>
 800561a:	e018      	b.n	800564e <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800561c:	2300      	movs	r3, #0
 800561e:	75bb      	strb	r3, [r7, #22]
            break;
 8005620:	e018      	b.n	8005654 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8005628:	b2db      	uxtb	r3, r3
 800562a:	4619      	mov	r1, r3
 800562c:	68f8      	ldr	r0, [r7, #12]
 800562e:	f000 fa64 	bl	8005afa <USBD_CoreFindIF>
 8005632:	4603      	mov	r3, r0
 8005634:	75bb      	strb	r3, [r7, #22]
            break;
 8005636:	e00d      	b.n	8005654 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800563e:	b2db      	uxtb	r3, r3
 8005640:	4619      	mov	r1, r3
 8005642:	68f8      	ldr	r0, [r7, #12]
 8005644:	f000 fa66 	bl	8005b14 <USBD_CoreFindEP>
 8005648:	4603      	mov	r3, r0
 800564a:	75bb      	strb	r3, [r7, #22]
            break;
 800564c:	e002      	b.n	8005654 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800564e:	2300      	movs	r3, #0
 8005650:	75bb      	strb	r3, [r7, #22]
            break;
 8005652:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8005654:	7dbb      	ldrb	r3, [r7, #22]
 8005656:	2b00      	cmp	r3, #0
 8005658:	d119      	bne.n	800568e <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005660:	b2db      	uxtb	r3, r3
 8005662:	2b03      	cmp	r3, #3
 8005664:	d113      	bne.n	800568e <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8005666:	7dba      	ldrb	r2, [r7, #22]
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	32ae      	adds	r2, #174	@ 0xae
 800566c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005670:	691b      	ldr	r3, [r3, #16]
 8005672:	2b00      	cmp	r3, #0
 8005674:	d00b      	beq.n	800568e <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8005676:	7dba      	ldrb	r2, [r7, #22]
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800567e:	7dba      	ldrb	r2, [r7, #22]
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	32ae      	adds	r2, #174	@ 0xae
 8005684:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005688:	691b      	ldr	r3, [r3, #16]
 800568a:	68f8      	ldr	r0, [r7, #12]
 800568c:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800568e:	68f8      	ldr	r0, [r7, #12]
 8005690:	f001 f95a 	bl	8006948 <USBD_CtlSendStatus>
 8005694:	e032      	b.n	80056fc <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8005696:	7afb      	ldrb	r3, [r7, #11]
 8005698:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800569c:	b2db      	uxtb	r3, r3
 800569e:	4619      	mov	r1, r3
 80056a0:	68f8      	ldr	r0, [r7, #12]
 80056a2:	f000 fa37 	bl	8005b14 <USBD_CoreFindEP>
 80056a6:	4603      	mov	r3, r0
 80056a8:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80056aa:	7dbb      	ldrb	r3, [r7, #22]
 80056ac:	2bff      	cmp	r3, #255	@ 0xff
 80056ae:	d025      	beq.n	80056fc <USBD_LL_DataOutStage+0x15c>
 80056b0:	7dbb      	ldrb	r3, [r7, #22]
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d122      	bne.n	80056fc <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80056bc:	b2db      	uxtb	r3, r3
 80056be:	2b03      	cmp	r3, #3
 80056c0:	d117      	bne.n	80056f2 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 80056c2:	7dba      	ldrb	r2, [r7, #22]
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	32ae      	adds	r2, #174	@ 0xae
 80056c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80056cc:	699b      	ldr	r3, [r3, #24]
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d00f      	beq.n	80056f2 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 80056d2:	7dba      	ldrb	r2, [r7, #22]
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 80056da:	7dba      	ldrb	r2, [r7, #22]
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	32ae      	adds	r2, #174	@ 0xae
 80056e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80056e4:	699b      	ldr	r3, [r3, #24]
 80056e6:	7afa      	ldrb	r2, [r7, #11]
 80056e8:	4611      	mov	r1, r2
 80056ea:	68f8      	ldr	r0, [r7, #12]
 80056ec:	4798      	blx	r3
 80056ee:	4603      	mov	r3, r0
 80056f0:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 80056f2:	7dfb      	ldrb	r3, [r7, #23]
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d001      	beq.n	80056fc <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 80056f8:	7dfb      	ldrb	r3, [r7, #23]
 80056fa:	e000      	b.n	80056fe <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 80056fc:	2300      	movs	r3, #0
}
 80056fe:	4618      	mov	r0, r3
 8005700:	3718      	adds	r7, #24
 8005702:	46bd      	mov	sp, r7
 8005704:	bd80      	pop	{r7, pc}

08005706 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8005706:	b580      	push	{r7, lr}
 8005708:	b086      	sub	sp, #24
 800570a:	af00      	add	r7, sp, #0
 800570c:	60f8      	str	r0, [r7, #12]
 800570e:	460b      	mov	r3, r1
 8005710:	607a      	str	r2, [r7, #4]
 8005712:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8005714:	7afb      	ldrb	r3, [r7, #11]
 8005716:	2b00      	cmp	r3, #0
 8005718:	d16f      	bne.n	80057fa <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	3314      	adds	r3, #20
 800571e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8005726:	2b02      	cmp	r3, #2
 8005728:	d15a      	bne.n	80057e0 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800572a:	693b      	ldr	r3, [r7, #16]
 800572c:	689a      	ldr	r2, [r3, #8]
 800572e:	693b      	ldr	r3, [r7, #16]
 8005730:	68db      	ldr	r3, [r3, #12]
 8005732:	429a      	cmp	r2, r3
 8005734:	d914      	bls.n	8005760 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8005736:	693b      	ldr	r3, [r7, #16]
 8005738:	689a      	ldr	r2, [r3, #8]
 800573a:	693b      	ldr	r3, [r7, #16]
 800573c:	68db      	ldr	r3, [r3, #12]
 800573e:	1ad2      	subs	r2, r2, r3
 8005740:	693b      	ldr	r3, [r7, #16]
 8005742:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8005744:	693b      	ldr	r3, [r7, #16]
 8005746:	689b      	ldr	r3, [r3, #8]
 8005748:	461a      	mov	r2, r3
 800574a:	6879      	ldr	r1, [r7, #4]
 800574c:	68f8      	ldr	r0, [r7, #12]
 800574e:	f001 f8bc 	bl	80068ca <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005752:	2300      	movs	r3, #0
 8005754:	2200      	movs	r2, #0
 8005756:	2100      	movs	r1, #0
 8005758:	68f8      	ldr	r0, [r7, #12]
 800575a:	f001 fd2b 	bl	80071b4 <USBD_LL_PrepareReceive>
 800575e:	e03f      	b.n	80057e0 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8005760:	693b      	ldr	r3, [r7, #16]
 8005762:	68da      	ldr	r2, [r3, #12]
 8005764:	693b      	ldr	r3, [r7, #16]
 8005766:	689b      	ldr	r3, [r3, #8]
 8005768:	429a      	cmp	r2, r3
 800576a:	d11c      	bne.n	80057a6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800576c:	693b      	ldr	r3, [r7, #16]
 800576e:	685a      	ldr	r2, [r3, #4]
 8005770:	693b      	ldr	r3, [r7, #16]
 8005772:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8005774:	429a      	cmp	r2, r3
 8005776:	d316      	bcc.n	80057a6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8005778:	693b      	ldr	r3, [r7, #16]
 800577a:	685a      	ldr	r2, [r3, #4]
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8005782:	429a      	cmp	r2, r3
 8005784:	d20f      	bcs.n	80057a6 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8005786:	2200      	movs	r2, #0
 8005788:	2100      	movs	r1, #0
 800578a:	68f8      	ldr	r0, [r7, #12]
 800578c:	f001 f89d 	bl	80068ca <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	2200      	movs	r2, #0
 8005794:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005798:	2300      	movs	r3, #0
 800579a:	2200      	movs	r2, #0
 800579c:	2100      	movs	r1, #0
 800579e:	68f8      	ldr	r0, [r7, #12]
 80057a0:	f001 fd08 	bl	80071b4 <USBD_LL_PrepareReceive>
 80057a4:	e01c      	b.n	80057e0 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80057ac:	b2db      	uxtb	r3, r3
 80057ae:	2b03      	cmp	r3, #3
 80057b0:	d10f      	bne.n	80057d2 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80057b8:	68db      	ldr	r3, [r3, #12]
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d009      	beq.n	80057d2 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	2200      	movs	r2, #0
 80057c2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80057cc:	68db      	ldr	r3, [r3, #12]
 80057ce:	68f8      	ldr	r0, [r7, #12]
 80057d0:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80057d2:	2180      	movs	r1, #128	@ 0x80
 80057d4:	68f8      	ldr	r0, [r7, #12]
 80057d6:	f001 fc43 	bl	8007060 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80057da:	68f8      	ldr	r0, [r7, #12]
 80057dc:	f001 f8c7 	bl	800696e <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d03a      	beq.n	8005860 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 80057ea:	68f8      	ldr	r0, [r7, #12]
 80057ec:	f7ff fe42 	bl	8005474 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	2200      	movs	r2, #0
 80057f4:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 80057f8:	e032      	b.n	8005860 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80057fa:	7afb      	ldrb	r3, [r7, #11]
 80057fc:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005800:	b2db      	uxtb	r3, r3
 8005802:	4619      	mov	r1, r3
 8005804:	68f8      	ldr	r0, [r7, #12]
 8005806:	f000 f985 	bl	8005b14 <USBD_CoreFindEP>
 800580a:	4603      	mov	r3, r0
 800580c:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800580e:	7dfb      	ldrb	r3, [r7, #23]
 8005810:	2bff      	cmp	r3, #255	@ 0xff
 8005812:	d025      	beq.n	8005860 <USBD_LL_DataInStage+0x15a>
 8005814:	7dfb      	ldrb	r3, [r7, #23]
 8005816:	2b00      	cmp	r3, #0
 8005818:	d122      	bne.n	8005860 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005820:	b2db      	uxtb	r3, r3
 8005822:	2b03      	cmp	r3, #3
 8005824:	d11c      	bne.n	8005860 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8005826:	7dfa      	ldrb	r2, [r7, #23]
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	32ae      	adds	r2, #174	@ 0xae
 800582c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005830:	695b      	ldr	r3, [r3, #20]
 8005832:	2b00      	cmp	r3, #0
 8005834:	d014      	beq.n	8005860 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8005836:	7dfa      	ldrb	r2, [r7, #23]
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800583e:	7dfa      	ldrb	r2, [r7, #23]
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	32ae      	adds	r2, #174	@ 0xae
 8005844:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005848:	695b      	ldr	r3, [r3, #20]
 800584a:	7afa      	ldrb	r2, [r7, #11]
 800584c:	4611      	mov	r1, r2
 800584e:	68f8      	ldr	r0, [r7, #12]
 8005850:	4798      	blx	r3
 8005852:	4603      	mov	r3, r0
 8005854:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8005856:	7dbb      	ldrb	r3, [r7, #22]
 8005858:	2b00      	cmp	r3, #0
 800585a:	d001      	beq.n	8005860 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800585c:	7dbb      	ldrb	r3, [r7, #22]
 800585e:	e000      	b.n	8005862 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8005860:	2300      	movs	r3, #0
}
 8005862:	4618      	mov	r0, r3
 8005864:	3718      	adds	r7, #24
 8005866:	46bd      	mov	sp, r7
 8005868:	bd80      	pop	{r7, pc}

0800586a <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800586a:	b580      	push	{r7, lr}
 800586c:	b084      	sub	sp, #16
 800586e:	af00      	add	r7, sp, #0
 8005870:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8005872:	2300      	movs	r3, #0
 8005874:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	2201      	movs	r2, #1
 800587a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	2200      	movs	r2, #0
 8005882:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	2200      	movs	r2, #0
 800588a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	2200      	movs	r2, #0
 8005890:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	2200      	movs	r2, #0
 8005898:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d014      	beq.n	80058d0 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80058ac:	685b      	ldr	r3, [r3, #4]
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d00e      	beq.n	80058d0 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80058b8:	685b      	ldr	r3, [r3, #4]
 80058ba:	687a      	ldr	r2, [r7, #4]
 80058bc:	6852      	ldr	r2, [r2, #4]
 80058be:	b2d2      	uxtb	r2, r2
 80058c0:	4611      	mov	r1, r2
 80058c2:	6878      	ldr	r0, [r7, #4]
 80058c4:	4798      	blx	r3
 80058c6:	4603      	mov	r3, r0
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d001      	beq.n	80058d0 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 80058cc:	2303      	movs	r3, #3
 80058ce:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80058d0:	2340      	movs	r3, #64	@ 0x40
 80058d2:	2200      	movs	r2, #0
 80058d4:	2100      	movs	r1, #0
 80058d6:	6878      	ldr	r0, [r7, #4]
 80058d8:	f001 fb7d 	bl	8006fd6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	2201      	movs	r2, #1
 80058e0:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	2240      	movs	r2, #64	@ 0x40
 80058e8:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80058ec:	2340      	movs	r3, #64	@ 0x40
 80058ee:	2200      	movs	r2, #0
 80058f0:	2180      	movs	r1, #128	@ 0x80
 80058f2:	6878      	ldr	r0, [r7, #4]
 80058f4:	f001 fb6f 	bl	8006fd6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	2201      	movs	r2, #1
 80058fc:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	2240      	movs	r2, #64	@ 0x40
 8005902:	621a      	str	r2, [r3, #32]

  return ret;
 8005904:	7bfb      	ldrb	r3, [r7, #15]
}
 8005906:	4618      	mov	r0, r3
 8005908:	3710      	adds	r7, #16
 800590a:	46bd      	mov	sp, r7
 800590c:	bd80      	pop	{r7, pc}

0800590e <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800590e:	b480      	push	{r7}
 8005910:	b083      	sub	sp, #12
 8005912:	af00      	add	r7, sp, #0
 8005914:	6078      	str	r0, [r7, #4]
 8005916:	460b      	mov	r3, r1
 8005918:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	78fa      	ldrb	r2, [r7, #3]
 800591e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8005920:	2300      	movs	r3, #0
}
 8005922:	4618      	mov	r0, r3
 8005924:	370c      	adds	r7, #12
 8005926:	46bd      	mov	sp, r7
 8005928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800592c:	4770      	bx	lr

0800592e <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800592e:	b480      	push	{r7}
 8005930:	b083      	sub	sp, #12
 8005932:	af00      	add	r7, sp, #0
 8005934:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800593c:	b2db      	uxtb	r3, r3
 800593e:	2b04      	cmp	r3, #4
 8005940:	d006      	beq.n	8005950 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005948:	b2da      	uxtb	r2, r3
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	2204      	movs	r2, #4
 8005954:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8005958:	2300      	movs	r3, #0
}
 800595a:	4618      	mov	r0, r3
 800595c:	370c      	adds	r7, #12
 800595e:	46bd      	mov	sp, r7
 8005960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005964:	4770      	bx	lr

08005966 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8005966:	b480      	push	{r7}
 8005968:	b083      	sub	sp, #12
 800596a:	af00      	add	r7, sp, #0
 800596c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005974:	b2db      	uxtb	r3, r3
 8005976:	2b04      	cmp	r3, #4
 8005978:	d106      	bne.n	8005988 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8005980:	b2da      	uxtb	r2, r3
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8005988:	2300      	movs	r3, #0
}
 800598a:	4618      	mov	r0, r3
 800598c:	370c      	adds	r7, #12
 800598e:	46bd      	mov	sp, r7
 8005990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005994:	4770      	bx	lr

08005996 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8005996:	b580      	push	{r7, lr}
 8005998:	b082      	sub	sp, #8
 800599a:	af00      	add	r7, sp, #0
 800599c:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80059a4:	b2db      	uxtb	r3, r3
 80059a6:	2b03      	cmp	r3, #3
 80059a8:	d110      	bne.n	80059cc <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d00b      	beq.n	80059cc <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80059ba:	69db      	ldr	r3, [r3, #28]
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d005      	beq.n	80059cc <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80059c6:	69db      	ldr	r3, [r3, #28]
 80059c8:	6878      	ldr	r0, [r7, #4]
 80059ca:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 80059cc:	2300      	movs	r3, #0
}
 80059ce:	4618      	mov	r0, r3
 80059d0:	3708      	adds	r7, #8
 80059d2:	46bd      	mov	sp, r7
 80059d4:	bd80      	pop	{r7, pc}

080059d6 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80059d6:	b580      	push	{r7, lr}
 80059d8:	b082      	sub	sp, #8
 80059da:	af00      	add	r7, sp, #0
 80059dc:	6078      	str	r0, [r7, #4]
 80059de:	460b      	mov	r3, r1
 80059e0:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	32ae      	adds	r2, #174	@ 0xae
 80059ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d101      	bne.n	80059f8 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 80059f4:	2303      	movs	r3, #3
 80059f6:	e01c      	b.n	8005a32 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80059fe:	b2db      	uxtb	r3, r3
 8005a00:	2b03      	cmp	r3, #3
 8005a02:	d115      	bne.n	8005a30 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	32ae      	adds	r2, #174	@ 0xae
 8005a0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a12:	6a1b      	ldr	r3, [r3, #32]
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d00b      	beq.n	8005a30 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	32ae      	adds	r2, #174	@ 0xae
 8005a22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a26:	6a1b      	ldr	r3, [r3, #32]
 8005a28:	78fa      	ldrb	r2, [r7, #3]
 8005a2a:	4611      	mov	r1, r2
 8005a2c:	6878      	ldr	r0, [r7, #4]
 8005a2e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005a30:	2300      	movs	r3, #0
}
 8005a32:	4618      	mov	r0, r3
 8005a34:	3708      	adds	r7, #8
 8005a36:	46bd      	mov	sp, r7
 8005a38:	bd80      	pop	{r7, pc}

08005a3a <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8005a3a:	b580      	push	{r7, lr}
 8005a3c:	b082      	sub	sp, #8
 8005a3e:	af00      	add	r7, sp, #0
 8005a40:	6078      	str	r0, [r7, #4]
 8005a42:	460b      	mov	r3, r1
 8005a44:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	32ae      	adds	r2, #174	@ 0xae
 8005a50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d101      	bne.n	8005a5c <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8005a58:	2303      	movs	r3, #3
 8005a5a:	e01c      	b.n	8005a96 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005a62:	b2db      	uxtb	r3, r3
 8005a64:	2b03      	cmp	r3, #3
 8005a66:	d115      	bne.n	8005a94 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	32ae      	adds	r2, #174	@ 0xae
 8005a72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d00b      	beq.n	8005a94 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	32ae      	adds	r2, #174	@ 0xae
 8005a86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a8c:	78fa      	ldrb	r2, [r7, #3]
 8005a8e:	4611      	mov	r1, r2
 8005a90:	6878      	ldr	r0, [r7, #4]
 8005a92:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005a94:	2300      	movs	r3, #0
}
 8005a96:	4618      	mov	r0, r3
 8005a98:	3708      	adds	r7, #8
 8005a9a:	46bd      	mov	sp, r7
 8005a9c:	bd80      	pop	{r7, pc}

08005a9e <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8005a9e:	b480      	push	{r7}
 8005aa0:	b083      	sub	sp, #12
 8005aa2:	af00      	add	r7, sp, #0
 8005aa4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005aa6:	2300      	movs	r3, #0
}
 8005aa8:	4618      	mov	r0, r3
 8005aaa:	370c      	adds	r7, #12
 8005aac:	46bd      	mov	sp, r7
 8005aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab2:	4770      	bx	lr

08005ab4 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8005ab4:	b580      	push	{r7, lr}
 8005ab6:	b084      	sub	sp, #16
 8005ab8:	af00      	add	r7, sp, #0
 8005aba:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8005abc:	2300      	movs	r3, #0
 8005abe:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	2201      	movs	r2, #1
 8005ac4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d00e      	beq.n	8005af0 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005ad8:	685b      	ldr	r3, [r3, #4]
 8005ada:	687a      	ldr	r2, [r7, #4]
 8005adc:	6852      	ldr	r2, [r2, #4]
 8005ade:	b2d2      	uxtb	r2, r2
 8005ae0:	4611      	mov	r1, r2
 8005ae2:	6878      	ldr	r0, [r7, #4]
 8005ae4:	4798      	blx	r3
 8005ae6:	4603      	mov	r3, r0
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d001      	beq.n	8005af0 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8005aec:	2303      	movs	r3, #3
 8005aee:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005af0:	7bfb      	ldrb	r3, [r7, #15]
}
 8005af2:	4618      	mov	r0, r3
 8005af4:	3710      	adds	r7, #16
 8005af6:	46bd      	mov	sp, r7
 8005af8:	bd80      	pop	{r7, pc}

08005afa <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8005afa:	b480      	push	{r7}
 8005afc:	b083      	sub	sp, #12
 8005afe:	af00      	add	r7, sp, #0
 8005b00:	6078      	str	r0, [r7, #4]
 8005b02:	460b      	mov	r3, r1
 8005b04:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8005b06:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8005b08:	4618      	mov	r0, r3
 8005b0a:	370c      	adds	r7, #12
 8005b0c:	46bd      	mov	sp, r7
 8005b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b12:	4770      	bx	lr

08005b14 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8005b14:	b480      	push	{r7}
 8005b16:	b083      	sub	sp, #12
 8005b18:	af00      	add	r7, sp, #0
 8005b1a:	6078      	str	r0, [r7, #4]
 8005b1c:	460b      	mov	r3, r1
 8005b1e:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8005b20:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8005b22:	4618      	mov	r0, r3
 8005b24:	370c      	adds	r7, #12
 8005b26:	46bd      	mov	sp, r7
 8005b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b2c:	4770      	bx	lr

08005b2e <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8005b2e:	b580      	push	{r7, lr}
 8005b30:	b086      	sub	sp, #24
 8005b32:	af00      	add	r7, sp, #0
 8005b34:	6078      	str	r0, [r7, #4]
 8005b36:	460b      	mov	r3, r1
 8005b38:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8005b42:	2300      	movs	r3, #0
 8005b44:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	885b      	ldrh	r3, [r3, #2]
 8005b4a:	b29b      	uxth	r3, r3
 8005b4c:	68fa      	ldr	r2, [r7, #12]
 8005b4e:	7812      	ldrb	r2, [r2, #0]
 8005b50:	4293      	cmp	r3, r2
 8005b52:	d91f      	bls.n	8005b94 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	781b      	ldrb	r3, [r3, #0]
 8005b58:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8005b5a:	e013      	b.n	8005b84 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8005b5c:	f107 030a 	add.w	r3, r7, #10
 8005b60:	4619      	mov	r1, r3
 8005b62:	6978      	ldr	r0, [r7, #20]
 8005b64:	f000 f81b 	bl	8005b9e <USBD_GetNextDesc>
 8005b68:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8005b6a:	697b      	ldr	r3, [r7, #20]
 8005b6c:	785b      	ldrb	r3, [r3, #1]
 8005b6e:	2b05      	cmp	r3, #5
 8005b70:	d108      	bne.n	8005b84 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8005b72:	697b      	ldr	r3, [r7, #20]
 8005b74:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8005b76:	693b      	ldr	r3, [r7, #16]
 8005b78:	789b      	ldrb	r3, [r3, #2]
 8005b7a:	78fa      	ldrb	r2, [r7, #3]
 8005b7c:	429a      	cmp	r2, r3
 8005b7e:	d008      	beq.n	8005b92 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8005b80:	2300      	movs	r3, #0
 8005b82:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	885b      	ldrh	r3, [r3, #2]
 8005b88:	b29a      	uxth	r2, r3
 8005b8a:	897b      	ldrh	r3, [r7, #10]
 8005b8c:	429a      	cmp	r2, r3
 8005b8e:	d8e5      	bhi.n	8005b5c <USBD_GetEpDesc+0x2e>
 8005b90:	e000      	b.n	8005b94 <USBD_GetEpDesc+0x66>
          break;
 8005b92:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8005b94:	693b      	ldr	r3, [r7, #16]
}
 8005b96:	4618      	mov	r0, r3
 8005b98:	3718      	adds	r7, #24
 8005b9a:	46bd      	mov	sp, r7
 8005b9c:	bd80      	pop	{r7, pc}

08005b9e <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8005b9e:	b480      	push	{r7}
 8005ba0:	b085      	sub	sp, #20
 8005ba2:	af00      	add	r7, sp, #0
 8005ba4:	6078      	str	r0, [r7, #4]
 8005ba6:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8005bac:	683b      	ldr	r3, [r7, #0]
 8005bae:	881b      	ldrh	r3, [r3, #0]
 8005bb0:	68fa      	ldr	r2, [r7, #12]
 8005bb2:	7812      	ldrb	r2, [r2, #0]
 8005bb4:	4413      	add	r3, r2
 8005bb6:	b29a      	uxth	r2, r3
 8005bb8:	683b      	ldr	r3, [r7, #0]
 8005bba:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	781b      	ldrb	r3, [r3, #0]
 8005bc0:	461a      	mov	r2, r3
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	4413      	add	r3, r2
 8005bc6:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8005bc8:	68fb      	ldr	r3, [r7, #12]
}
 8005bca:	4618      	mov	r0, r3
 8005bcc:	3714      	adds	r7, #20
 8005bce:	46bd      	mov	sp, r7
 8005bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd4:	4770      	bx	lr

08005bd6 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8005bd6:	b480      	push	{r7}
 8005bd8:	b087      	sub	sp, #28
 8005bda:	af00      	add	r7, sp, #0
 8005bdc:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8005be2:	697b      	ldr	r3, [r7, #20]
 8005be4:	781b      	ldrb	r3, [r3, #0]
 8005be6:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8005be8:	697b      	ldr	r3, [r7, #20]
 8005bea:	3301      	adds	r3, #1
 8005bec:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8005bee:	697b      	ldr	r3, [r7, #20]
 8005bf0:	781b      	ldrb	r3, [r3, #0]
 8005bf2:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8005bf4:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8005bf8:	021b      	lsls	r3, r3, #8
 8005bfa:	b21a      	sxth	r2, r3
 8005bfc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8005c00:	4313      	orrs	r3, r2
 8005c02:	b21b      	sxth	r3, r3
 8005c04:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8005c06:	89fb      	ldrh	r3, [r7, #14]
}
 8005c08:	4618      	mov	r0, r3
 8005c0a:	371c      	adds	r7, #28
 8005c0c:	46bd      	mov	sp, r7
 8005c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c12:	4770      	bx	lr

08005c14 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005c14:	b580      	push	{r7, lr}
 8005c16:	b084      	sub	sp, #16
 8005c18:	af00      	add	r7, sp, #0
 8005c1a:	6078      	str	r0, [r7, #4]
 8005c1c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005c1e:	2300      	movs	r3, #0
 8005c20:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005c22:	683b      	ldr	r3, [r7, #0]
 8005c24:	781b      	ldrb	r3, [r3, #0]
 8005c26:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8005c2a:	2b40      	cmp	r3, #64	@ 0x40
 8005c2c:	d005      	beq.n	8005c3a <USBD_StdDevReq+0x26>
 8005c2e:	2b40      	cmp	r3, #64	@ 0x40
 8005c30:	d857      	bhi.n	8005ce2 <USBD_StdDevReq+0xce>
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d00f      	beq.n	8005c56 <USBD_StdDevReq+0x42>
 8005c36:	2b20      	cmp	r3, #32
 8005c38:	d153      	bne.n	8005ce2 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	32ae      	adds	r2, #174	@ 0xae
 8005c44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c48:	689b      	ldr	r3, [r3, #8]
 8005c4a:	6839      	ldr	r1, [r7, #0]
 8005c4c:	6878      	ldr	r0, [r7, #4]
 8005c4e:	4798      	blx	r3
 8005c50:	4603      	mov	r3, r0
 8005c52:	73fb      	strb	r3, [r7, #15]
      break;
 8005c54:	e04a      	b.n	8005cec <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005c56:	683b      	ldr	r3, [r7, #0]
 8005c58:	785b      	ldrb	r3, [r3, #1]
 8005c5a:	2b09      	cmp	r3, #9
 8005c5c:	d83b      	bhi.n	8005cd6 <USBD_StdDevReq+0xc2>
 8005c5e:	a201      	add	r2, pc, #4	@ (adr r2, 8005c64 <USBD_StdDevReq+0x50>)
 8005c60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c64:	08005cb9 	.word	0x08005cb9
 8005c68:	08005ccd 	.word	0x08005ccd
 8005c6c:	08005cd7 	.word	0x08005cd7
 8005c70:	08005cc3 	.word	0x08005cc3
 8005c74:	08005cd7 	.word	0x08005cd7
 8005c78:	08005c97 	.word	0x08005c97
 8005c7c:	08005c8d 	.word	0x08005c8d
 8005c80:	08005cd7 	.word	0x08005cd7
 8005c84:	08005caf 	.word	0x08005caf
 8005c88:	08005ca1 	.word	0x08005ca1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8005c8c:	6839      	ldr	r1, [r7, #0]
 8005c8e:	6878      	ldr	r0, [r7, #4]
 8005c90:	f000 fa3c 	bl	800610c <USBD_GetDescriptor>
          break;
 8005c94:	e024      	b.n	8005ce0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8005c96:	6839      	ldr	r1, [r7, #0]
 8005c98:	6878      	ldr	r0, [r7, #4]
 8005c9a:	f000 fba1 	bl	80063e0 <USBD_SetAddress>
          break;
 8005c9e:	e01f      	b.n	8005ce0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8005ca0:	6839      	ldr	r1, [r7, #0]
 8005ca2:	6878      	ldr	r0, [r7, #4]
 8005ca4:	f000 fbe0 	bl	8006468 <USBD_SetConfig>
 8005ca8:	4603      	mov	r3, r0
 8005caa:	73fb      	strb	r3, [r7, #15]
          break;
 8005cac:	e018      	b.n	8005ce0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8005cae:	6839      	ldr	r1, [r7, #0]
 8005cb0:	6878      	ldr	r0, [r7, #4]
 8005cb2:	f000 fc83 	bl	80065bc <USBD_GetConfig>
          break;
 8005cb6:	e013      	b.n	8005ce0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8005cb8:	6839      	ldr	r1, [r7, #0]
 8005cba:	6878      	ldr	r0, [r7, #4]
 8005cbc:	f000 fcb4 	bl	8006628 <USBD_GetStatus>
          break;
 8005cc0:	e00e      	b.n	8005ce0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8005cc2:	6839      	ldr	r1, [r7, #0]
 8005cc4:	6878      	ldr	r0, [r7, #4]
 8005cc6:	f000 fce3 	bl	8006690 <USBD_SetFeature>
          break;
 8005cca:	e009      	b.n	8005ce0 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8005ccc:	6839      	ldr	r1, [r7, #0]
 8005cce:	6878      	ldr	r0, [r7, #4]
 8005cd0:	f000 fd07 	bl	80066e2 <USBD_ClrFeature>
          break;
 8005cd4:	e004      	b.n	8005ce0 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8005cd6:	6839      	ldr	r1, [r7, #0]
 8005cd8:	6878      	ldr	r0, [r7, #4]
 8005cda:	f000 fd5e 	bl	800679a <USBD_CtlError>
          break;
 8005cde:	bf00      	nop
      }
      break;
 8005ce0:	e004      	b.n	8005cec <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8005ce2:	6839      	ldr	r1, [r7, #0]
 8005ce4:	6878      	ldr	r0, [r7, #4]
 8005ce6:	f000 fd58 	bl	800679a <USBD_CtlError>
      break;
 8005cea:	bf00      	nop
  }

  return ret;
 8005cec:	7bfb      	ldrb	r3, [r7, #15]
}
 8005cee:	4618      	mov	r0, r3
 8005cf0:	3710      	adds	r7, #16
 8005cf2:	46bd      	mov	sp, r7
 8005cf4:	bd80      	pop	{r7, pc}
 8005cf6:	bf00      	nop

08005cf8 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005cf8:	b580      	push	{r7, lr}
 8005cfa:	b084      	sub	sp, #16
 8005cfc:	af00      	add	r7, sp, #0
 8005cfe:	6078      	str	r0, [r7, #4]
 8005d00:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005d02:	2300      	movs	r3, #0
 8005d04:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005d06:	683b      	ldr	r3, [r7, #0]
 8005d08:	781b      	ldrb	r3, [r3, #0]
 8005d0a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8005d0e:	2b40      	cmp	r3, #64	@ 0x40
 8005d10:	d005      	beq.n	8005d1e <USBD_StdItfReq+0x26>
 8005d12:	2b40      	cmp	r3, #64	@ 0x40
 8005d14:	d852      	bhi.n	8005dbc <USBD_StdItfReq+0xc4>
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d001      	beq.n	8005d1e <USBD_StdItfReq+0x26>
 8005d1a:	2b20      	cmp	r3, #32
 8005d1c:	d14e      	bne.n	8005dbc <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005d24:	b2db      	uxtb	r3, r3
 8005d26:	3b01      	subs	r3, #1
 8005d28:	2b02      	cmp	r3, #2
 8005d2a:	d840      	bhi.n	8005dae <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8005d2c:	683b      	ldr	r3, [r7, #0]
 8005d2e:	889b      	ldrh	r3, [r3, #4]
 8005d30:	b2db      	uxtb	r3, r3
 8005d32:	2b01      	cmp	r3, #1
 8005d34:	d836      	bhi.n	8005da4 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8005d36:	683b      	ldr	r3, [r7, #0]
 8005d38:	889b      	ldrh	r3, [r3, #4]
 8005d3a:	b2db      	uxtb	r3, r3
 8005d3c:	4619      	mov	r1, r3
 8005d3e:	6878      	ldr	r0, [r7, #4]
 8005d40:	f7ff fedb 	bl	8005afa <USBD_CoreFindIF>
 8005d44:	4603      	mov	r3, r0
 8005d46:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005d48:	7bbb      	ldrb	r3, [r7, #14]
 8005d4a:	2bff      	cmp	r3, #255	@ 0xff
 8005d4c:	d01d      	beq.n	8005d8a <USBD_StdItfReq+0x92>
 8005d4e:	7bbb      	ldrb	r3, [r7, #14]
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d11a      	bne.n	8005d8a <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8005d54:	7bba      	ldrb	r2, [r7, #14]
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	32ae      	adds	r2, #174	@ 0xae
 8005d5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d5e:	689b      	ldr	r3, [r3, #8]
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d00f      	beq.n	8005d84 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8005d64:	7bba      	ldrb	r2, [r7, #14]
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8005d6c:	7bba      	ldrb	r2, [r7, #14]
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	32ae      	adds	r2, #174	@ 0xae
 8005d72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d76:	689b      	ldr	r3, [r3, #8]
 8005d78:	6839      	ldr	r1, [r7, #0]
 8005d7a:	6878      	ldr	r0, [r7, #4]
 8005d7c:	4798      	blx	r3
 8005d7e:	4603      	mov	r3, r0
 8005d80:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8005d82:	e004      	b.n	8005d8e <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8005d84:	2303      	movs	r3, #3
 8005d86:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8005d88:	e001      	b.n	8005d8e <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8005d8a:	2303      	movs	r3, #3
 8005d8c:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8005d8e:	683b      	ldr	r3, [r7, #0]
 8005d90:	88db      	ldrh	r3, [r3, #6]
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d110      	bne.n	8005db8 <USBD_StdItfReq+0xc0>
 8005d96:	7bfb      	ldrb	r3, [r7, #15]
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d10d      	bne.n	8005db8 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8005d9c:	6878      	ldr	r0, [r7, #4]
 8005d9e:	f000 fdd3 	bl	8006948 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8005da2:	e009      	b.n	8005db8 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8005da4:	6839      	ldr	r1, [r7, #0]
 8005da6:	6878      	ldr	r0, [r7, #4]
 8005da8:	f000 fcf7 	bl	800679a <USBD_CtlError>
          break;
 8005dac:	e004      	b.n	8005db8 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8005dae:	6839      	ldr	r1, [r7, #0]
 8005db0:	6878      	ldr	r0, [r7, #4]
 8005db2:	f000 fcf2 	bl	800679a <USBD_CtlError>
          break;
 8005db6:	e000      	b.n	8005dba <USBD_StdItfReq+0xc2>
          break;
 8005db8:	bf00      	nop
      }
      break;
 8005dba:	e004      	b.n	8005dc6 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8005dbc:	6839      	ldr	r1, [r7, #0]
 8005dbe:	6878      	ldr	r0, [r7, #4]
 8005dc0:	f000 fceb 	bl	800679a <USBD_CtlError>
      break;
 8005dc4:	bf00      	nop
  }

  return ret;
 8005dc6:	7bfb      	ldrb	r3, [r7, #15]
}
 8005dc8:	4618      	mov	r0, r3
 8005dca:	3710      	adds	r7, #16
 8005dcc:	46bd      	mov	sp, r7
 8005dce:	bd80      	pop	{r7, pc}

08005dd0 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005dd0:	b580      	push	{r7, lr}
 8005dd2:	b084      	sub	sp, #16
 8005dd4:	af00      	add	r7, sp, #0
 8005dd6:	6078      	str	r0, [r7, #4]
 8005dd8:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8005dda:	2300      	movs	r3, #0
 8005ddc:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8005dde:	683b      	ldr	r3, [r7, #0]
 8005de0:	889b      	ldrh	r3, [r3, #4]
 8005de2:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005de4:	683b      	ldr	r3, [r7, #0]
 8005de6:	781b      	ldrb	r3, [r3, #0]
 8005de8:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8005dec:	2b40      	cmp	r3, #64	@ 0x40
 8005dee:	d007      	beq.n	8005e00 <USBD_StdEPReq+0x30>
 8005df0:	2b40      	cmp	r3, #64	@ 0x40
 8005df2:	f200 817f 	bhi.w	80060f4 <USBD_StdEPReq+0x324>
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d02a      	beq.n	8005e50 <USBD_StdEPReq+0x80>
 8005dfa:	2b20      	cmp	r3, #32
 8005dfc:	f040 817a 	bne.w	80060f4 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8005e00:	7bbb      	ldrb	r3, [r7, #14]
 8005e02:	4619      	mov	r1, r3
 8005e04:	6878      	ldr	r0, [r7, #4]
 8005e06:	f7ff fe85 	bl	8005b14 <USBD_CoreFindEP>
 8005e0a:	4603      	mov	r3, r0
 8005e0c:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005e0e:	7b7b      	ldrb	r3, [r7, #13]
 8005e10:	2bff      	cmp	r3, #255	@ 0xff
 8005e12:	f000 8174 	beq.w	80060fe <USBD_StdEPReq+0x32e>
 8005e16:	7b7b      	ldrb	r3, [r7, #13]
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	f040 8170 	bne.w	80060fe <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8005e1e:	7b7a      	ldrb	r2, [r7, #13]
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8005e26:	7b7a      	ldrb	r2, [r7, #13]
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	32ae      	adds	r2, #174	@ 0xae
 8005e2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e30:	689b      	ldr	r3, [r3, #8]
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	f000 8163 	beq.w	80060fe <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8005e38:	7b7a      	ldrb	r2, [r7, #13]
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	32ae      	adds	r2, #174	@ 0xae
 8005e3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e42:	689b      	ldr	r3, [r3, #8]
 8005e44:	6839      	ldr	r1, [r7, #0]
 8005e46:	6878      	ldr	r0, [r7, #4]
 8005e48:	4798      	blx	r3
 8005e4a:	4603      	mov	r3, r0
 8005e4c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005e4e:	e156      	b.n	80060fe <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005e50:	683b      	ldr	r3, [r7, #0]
 8005e52:	785b      	ldrb	r3, [r3, #1]
 8005e54:	2b03      	cmp	r3, #3
 8005e56:	d008      	beq.n	8005e6a <USBD_StdEPReq+0x9a>
 8005e58:	2b03      	cmp	r3, #3
 8005e5a:	f300 8145 	bgt.w	80060e8 <USBD_StdEPReq+0x318>
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	f000 809b 	beq.w	8005f9a <USBD_StdEPReq+0x1ca>
 8005e64:	2b01      	cmp	r3, #1
 8005e66:	d03c      	beq.n	8005ee2 <USBD_StdEPReq+0x112>
 8005e68:	e13e      	b.n	80060e8 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005e70:	b2db      	uxtb	r3, r3
 8005e72:	2b02      	cmp	r3, #2
 8005e74:	d002      	beq.n	8005e7c <USBD_StdEPReq+0xac>
 8005e76:	2b03      	cmp	r3, #3
 8005e78:	d016      	beq.n	8005ea8 <USBD_StdEPReq+0xd8>
 8005e7a:	e02c      	b.n	8005ed6 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005e7c:	7bbb      	ldrb	r3, [r7, #14]
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d00d      	beq.n	8005e9e <USBD_StdEPReq+0xce>
 8005e82:	7bbb      	ldrb	r3, [r7, #14]
 8005e84:	2b80      	cmp	r3, #128	@ 0x80
 8005e86:	d00a      	beq.n	8005e9e <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8005e88:	7bbb      	ldrb	r3, [r7, #14]
 8005e8a:	4619      	mov	r1, r3
 8005e8c:	6878      	ldr	r0, [r7, #4]
 8005e8e:	f001 f8e7 	bl	8007060 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8005e92:	2180      	movs	r1, #128	@ 0x80
 8005e94:	6878      	ldr	r0, [r7, #4]
 8005e96:	f001 f8e3 	bl	8007060 <USBD_LL_StallEP>
 8005e9a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8005e9c:	e020      	b.n	8005ee0 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8005e9e:	6839      	ldr	r1, [r7, #0]
 8005ea0:	6878      	ldr	r0, [r7, #4]
 8005ea2:	f000 fc7a 	bl	800679a <USBD_CtlError>
              break;
 8005ea6:	e01b      	b.n	8005ee0 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8005ea8:	683b      	ldr	r3, [r7, #0]
 8005eaa:	885b      	ldrh	r3, [r3, #2]
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d10e      	bne.n	8005ece <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8005eb0:	7bbb      	ldrb	r3, [r7, #14]
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d00b      	beq.n	8005ece <USBD_StdEPReq+0xfe>
 8005eb6:	7bbb      	ldrb	r3, [r7, #14]
 8005eb8:	2b80      	cmp	r3, #128	@ 0x80
 8005eba:	d008      	beq.n	8005ece <USBD_StdEPReq+0xfe>
 8005ebc:	683b      	ldr	r3, [r7, #0]
 8005ebe:	88db      	ldrh	r3, [r3, #6]
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d104      	bne.n	8005ece <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8005ec4:	7bbb      	ldrb	r3, [r7, #14]
 8005ec6:	4619      	mov	r1, r3
 8005ec8:	6878      	ldr	r0, [r7, #4]
 8005eca:	f001 f8c9 	bl	8007060 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8005ece:	6878      	ldr	r0, [r7, #4]
 8005ed0:	f000 fd3a 	bl	8006948 <USBD_CtlSendStatus>

              break;
 8005ed4:	e004      	b.n	8005ee0 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8005ed6:	6839      	ldr	r1, [r7, #0]
 8005ed8:	6878      	ldr	r0, [r7, #4]
 8005eda:	f000 fc5e 	bl	800679a <USBD_CtlError>
              break;
 8005ede:	bf00      	nop
          }
          break;
 8005ee0:	e107      	b.n	80060f2 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005ee8:	b2db      	uxtb	r3, r3
 8005eea:	2b02      	cmp	r3, #2
 8005eec:	d002      	beq.n	8005ef4 <USBD_StdEPReq+0x124>
 8005eee:	2b03      	cmp	r3, #3
 8005ef0:	d016      	beq.n	8005f20 <USBD_StdEPReq+0x150>
 8005ef2:	e04b      	b.n	8005f8c <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005ef4:	7bbb      	ldrb	r3, [r7, #14]
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d00d      	beq.n	8005f16 <USBD_StdEPReq+0x146>
 8005efa:	7bbb      	ldrb	r3, [r7, #14]
 8005efc:	2b80      	cmp	r3, #128	@ 0x80
 8005efe:	d00a      	beq.n	8005f16 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8005f00:	7bbb      	ldrb	r3, [r7, #14]
 8005f02:	4619      	mov	r1, r3
 8005f04:	6878      	ldr	r0, [r7, #4]
 8005f06:	f001 f8ab 	bl	8007060 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8005f0a:	2180      	movs	r1, #128	@ 0x80
 8005f0c:	6878      	ldr	r0, [r7, #4]
 8005f0e:	f001 f8a7 	bl	8007060 <USBD_LL_StallEP>
 8005f12:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8005f14:	e040      	b.n	8005f98 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8005f16:	6839      	ldr	r1, [r7, #0]
 8005f18:	6878      	ldr	r0, [r7, #4]
 8005f1a:	f000 fc3e 	bl	800679a <USBD_CtlError>
              break;
 8005f1e:	e03b      	b.n	8005f98 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8005f20:	683b      	ldr	r3, [r7, #0]
 8005f22:	885b      	ldrh	r3, [r3, #2]
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d136      	bne.n	8005f96 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8005f28:	7bbb      	ldrb	r3, [r7, #14]
 8005f2a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d004      	beq.n	8005f3c <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8005f32:	7bbb      	ldrb	r3, [r7, #14]
 8005f34:	4619      	mov	r1, r3
 8005f36:	6878      	ldr	r0, [r7, #4]
 8005f38:	f001 f8b1 	bl	800709e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8005f3c:	6878      	ldr	r0, [r7, #4]
 8005f3e:	f000 fd03 	bl	8006948 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8005f42:	7bbb      	ldrb	r3, [r7, #14]
 8005f44:	4619      	mov	r1, r3
 8005f46:	6878      	ldr	r0, [r7, #4]
 8005f48:	f7ff fde4 	bl	8005b14 <USBD_CoreFindEP>
 8005f4c:	4603      	mov	r3, r0
 8005f4e:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005f50:	7b7b      	ldrb	r3, [r7, #13]
 8005f52:	2bff      	cmp	r3, #255	@ 0xff
 8005f54:	d01f      	beq.n	8005f96 <USBD_StdEPReq+0x1c6>
 8005f56:	7b7b      	ldrb	r3, [r7, #13]
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d11c      	bne.n	8005f96 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8005f5c:	7b7a      	ldrb	r2, [r7, #13]
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8005f64:	7b7a      	ldrb	r2, [r7, #13]
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	32ae      	adds	r2, #174	@ 0xae
 8005f6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f6e:	689b      	ldr	r3, [r3, #8]
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d010      	beq.n	8005f96 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8005f74:	7b7a      	ldrb	r2, [r7, #13]
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	32ae      	adds	r2, #174	@ 0xae
 8005f7a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f7e:	689b      	ldr	r3, [r3, #8]
 8005f80:	6839      	ldr	r1, [r7, #0]
 8005f82:	6878      	ldr	r0, [r7, #4]
 8005f84:	4798      	blx	r3
 8005f86:	4603      	mov	r3, r0
 8005f88:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8005f8a:	e004      	b.n	8005f96 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8005f8c:	6839      	ldr	r1, [r7, #0]
 8005f8e:	6878      	ldr	r0, [r7, #4]
 8005f90:	f000 fc03 	bl	800679a <USBD_CtlError>
              break;
 8005f94:	e000      	b.n	8005f98 <USBD_StdEPReq+0x1c8>
              break;
 8005f96:	bf00      	nop
          }
          break;
 8005f98:	e0ab      	b.n	80060f2 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005fa0:	b2db      	uxtb	r3, r3
 8005fa2:	2b02      	cmp	r3, #2
 8005fa4:	d002      	beq.n	8005fac <USBD_StdEPReq+0x1dc>
 8005fa6:	2b03      	cmp	r3, #3
 8005fa8:	d032      	beq.n	8006010 <USBD_StdEPReq+0x240>
 8005faa:	e097      	b.n	80060dc <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005fac:	7bbb      	ldrb	r3, [r7, #14]
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d007      	beq.n	8005fc2 <USBD_StdEPReq+0x1f2>
 8005fb2:	7bbb      	ldrb	r3, [r7, #14]
 8005fb4:	2b80      	cmp	r3, #128	@ 0x80
 8005fb6:	d004      	beq.n	8005fc2 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8005fb8:	6839      	ldr	r1, [r7, #0]
 8005fba:	6878      	ldr	r0, [r7, #4]
 8005fbc:	f000 fbed 	bl	800679a <USBD_CtlError>
                break;
 8005fc0:	e091      	b.n	80060e6 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005fc2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	da0b      	bge.n	8005fe2 <USBD_StdEPReq+0x212>
 8005fca:	7bbb      	ldrb	r3, [r7, #14]
 8005fcc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005fd0:	4613      	mov	r3, r2
 8005fd2:	009b      	lsls	r3, r3, #2
 8005fd4:	4413      	add	r3, r2
 8005fd6:	009b      	lsls	r3, r3, #2
 8005fd8:	3310      	adds	r3, #16
 8005fda:	687a      	ldr	r2, [r7, #4]
 8005fdc:	4413      	add	r3, r2
 8005fde:	3304      	adds	r3, #4
 8005fe0:	e00b      	b.n	8005ffa <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8005fe2:	7bbb      	ldrb	r3, [r7, #14]
 8005fe4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005fe8:	4613      	mov	r3, r2
 8005fea:	009b      	lsls	r3, r3, #2
 8005fec:	4413      	add	r3, r2
 8005fee:	009b      	lsls	r3, r3, #2
 8005ff0:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8005ff4:	687a      	ldr	r2, [r7, #4]
 8005ff6:	4413      	add	r3, r2
 8005ff8:	3304      	adds	r3, #4
 8005ffa:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8005ffc:	68bb      	ldr	r3, [r7, #8]
 8005ffe:	2200      	movs	r2, #0
 8006000:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006002:	68bb      	ldr	r3, [r7, #8]
 8006004:	2202      	movs	r2, #2
 8006006:	4619      	mov	r1, r3
 8006008:	6878      	ldr	r0, [r7, #4]
 800600a:	f000 fc43 	bl	8006894 <USBD_CtlSendData>
              break;
 800600e:	e06a      	b.n	80060e6 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8006010:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006014:	2b00      	cmp	r3, #0
 8006016:	da11      	bge.n	800603c <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006018:	7bbb      	ldrb	r3, [r7, #14]
 800601a:	f003 020f 	and.w	r2, r3, #15
 800601e:	6879      	ldr	r1, [r7, #4]
 8006020:	4613      	mov	r3, r2
 8006022:	009b      	lsls	r3, r3, #2
 8006024:	4413      	add	r3, r2
 8006026:	009b      	lsls	r3, r3, #2
 8006028:	440b      	add	r3, r1
 800602a:	3324      	adds	r3, #36	@ 0x24
 800602c:	881b      	ldrh	r3, [r3, #0]
 800602e:	2b00      	cmp	r3, #0
 8006030:	d117      	bne.n	8006062 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8006032:	6839      	ldr	r1, [r7, #0]
 8006034:	6878      	ldr	r0, [r7, #4]
 8006036:	f000 fbb0 	bl	800679a <USBD_CtlError>
                  break;
 800603a:	e054      	b.n	80060e6 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800603c:	7bbb      	ldrb	r3, [r7, #14]
 800603e:	f003 020f 	and.w	r2, r3, #15
 8006042:	6879      	ldr	r1, [r7, #4]
 8006044:	4613      	mov	r3, r2
 8006046:	009b      	lsls	r3, r3, #2
 8006048:	4413      	add	r3, r2
 800604a:	009b      	lsls	r3, r3, #2
 800604c:	440b      	add	r3, r1
 800604e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8006052:	881b      	ldrh	r3, [r3, #0]
 8006054:	2b00      	cmp	r3, #0
 8006056:	d104      	bne.n	8006062 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8006058:	6839      	ldr	r1, [r7, #0]
 800605a:	6878      	ldr	r0, [r7, #4]
 800605c:	f000 fb9d 	bl	800679a <USBD_CtlError>
                  break;
 8006060:	e041      	b.n	80060e6 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006062:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006066:	2b00      	cmp	r3, #0
 8006068:	da0b      	bge.n	8006082 <USBD_StdEPReq+0x2b2>
 800606a:	7bbb      	ldrb	r3, [r7, #14]
 800606c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006070:	4613      	mov	r3, r2
 8006072:	009b      	lsls	r3, r3, #2
 8006074:	4413      	add	r3, r2
 8006076:	009b      	lsls	r3, r3, #2
 8006078:	3310      	adds	r3, #16
 800607a:	687a      	ldr	r2, [r7, #4]
 800607c:	4413      	add	r3, r2
 800607e:	3304      	adds	r3, #4
 8006080:	e00b      	b.n	800609a <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006082:	7bbb      	ldrb	r3, [r7, #14]
 8006084:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006088:	4613      	mov	r3, r2
 800608a:	009b      	lsls	r3, r3, #2
 800608c:	4413      	add	r3, r2
 800608e:	009b      	lsls	r3, r3, #2
 8006090:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8006094:	687a      	ldr	r2, [r7, #4]
 8006096:	4413      	add	r3, r2
 8006098:	3304      	adds	r3, #4
 800609a:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800609c:	7bbb      	ldrb	r3, [r7, #14]
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d002      	beq.n	80060a8 <USBD_StdEPReq+0x2d8>
 80060a2:	7bbb      	ldrb	r3, [r7, #14]
 80060a4:	2b80      	cmp	r3, #128	@ 0x80
 80060a6:	d103      	bne.n	80060b0 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 80060a8:	68bb      	ldr	r3, [r7, #8]
 80060aa:	2200      	movs	r2, #0
 80060ac:	601a      	str	r2, [r3, #0]
 80060ae:	e00e      	b.n	80060ce <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80060b0:	7bbb      	ldrb	r3, [r7, #14]
 80060b2:	4619      	mov	r1, r3
 80060b4:	6878      	ldr	r0, [r7, #4]
 80060b6:	f001 f811 	bl	80070dc <USBD_LL_IsStallEP>
 80060ba:	4603      	mov	r3, r0
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d003      	beq.n	80060c8 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 80060c0:	68bb      	ldr	r3, [r7, #8]
 80060c2:	2201      	movs	r2, #1
 80060c4:	601a      	str	r2, [r3, #0]
 80060c6:	e002      	b.n	80060ce <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 80060c8:	68bb      	ldr	r3, [r7, #8]
 80060ca:	2200      	movs	r2, #0
 80060cc:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80060ce:	68bb      	ldr	r3, [r7, #8]
 80060d0:	2202      	movs	r2, #2
 80060d2:	4619      	mov	r1, r3
 80060d4:	6878      	ldr	r0, [r7, #4]
 80060d6:	f000 fbdd 	bl	8006894 <USBD_CtlSendData>
              break;
 80060da:	e004      	b.n	80060e6 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 80060dc:	6839      	ldr	r1, [r7, #0]
 80060de:	6878      	ldr	r0, [r7, #4]
 80060e0:	f000 fb5b 	bl	800679a <USBD_CtlError>
              break;
 80060e4:	bf00      	nop
          }
          break;
 80060e6:	e004      	b.n	80060f2 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 80060e8:	6839      	ldr	r1, [r7, #0]
 80060ea:	6878      	ldr	r0, [r7, #4]
 80060ec:	f000 fb55 	bl	800679a <USBD_CtlError>
          break;
 80060f0:	bf00      	nop
      }
      break;
 80060f2:	e005      	b.n	8006100 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 80060f4:	6839      	ldr	r1, [r7, #0]
 80060f6:	6878      	ldr	r0, [r7, #4]
 80060f8:	f000 fb4f 	bl	800679a <USBD_CtlError>
      break;
 80060fc:	e000      	b.n	8006100 <USBD_StdEPReq+0x330>
      break;
 80060fe:	bf00      	nop
  }

  return ret;
 8006100:	7bfb      	ldrb	r3, [r7, #15]
}
 8006102:	4618      	mov	r0, r3
 8006104:	3710      	adds	r7, #16
 8006106:	46bd      	mov	sp, r7
 8006108:	bd80      	pop	{r7, pc}
	...

0800610c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800610c:	b580      	push	{r7, lr}
 800610e:	b084      	sub	sp, #16
 8006110:	af00      	add	r7, sp, #0
 8006112:	6078      	str	r0, [r7, #4]
 8006114:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006116:	2300      	movs	r3, #0
 8006118:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800611a:	2300      	movs	r3, #0
 800611c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800611e:	2300      	movs	r3, #0
 8006120:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8006122:	683b      	ldr	r3, [r7, #0]
 8006124:	885b      	ldrh	r3, [r3, #2]
 8006126:	0a1b      	lsrs	r3, r3, #8
 8006128:	b29b      	uxth	r3, r3
 800612a:	3b01      	subs	r3, #1
 800612c:	2b06      	cmp	r3, #6
 800612e:	f200 8128 	bhi.w	8006382 <USBD_GetDescriptor+0x276>
 8006132:	a201      	add	r2, pc, #4	@ (adr r2, 8006138 <USBD_GetDescriptor+0x2c>)
 8006134:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006138:	08006155 	.word	0x08006155
 800613c:	0800616d 	.word	0x0800616d
 8006140:	080061ad 	.word	0x080061ad
 8006144:	08006383 	.word	0x08006383
 8006148:	08006383 	.word	0x08006383
 800614c:	08006323 	.word	0x08006323
 8006150:	0800634f 	.word	0x0800634f
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	687a      	ldr	r2, [r7, #4]
 800615e:	7c12      	ldrb	r2, [r2, #16]
 8006160:	f107 0108 	add.w	r1, r7, #8
 8006164:	4610      	mov	r0, r2
 8006166:	4798      	blx	r3
 8006168:	60f8      	str	r0, [r7, #12]
      break;
 800616a:	e112      	b.n	8006392 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	7c1b      	ldrb	r3, [r3, #16]
 8006170:	2b00      	cmp	r3, #0
 8006172:	d10d      	bne.n	8006190 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800617a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800617c:	f107 0208 	add.w	r2, r7, #8
 8006180:	4610      	mov	r0, r2
 8006182:	4798      	blx	r3
 8006184:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	3301      	adds	r3, #1
 800618a:	2202      	movs	r2, #2
 800618c:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800618e:	e100      	b.n	8006392 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006196:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006198:	f107 0208 	add.w	r2, r7, #8
 800619c:	4610      	mov	r0, r2
 800619e:	4798      	blx	r3
 80061a0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	3301      	adds	r3, #1
 80061a6:	2202      	movs	r2, #2
 80061a8:	701a      	strb	r2, [r3, #0]
      break;
 80061aa:	e0f2      	b.n	8006392 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80061ac:	683b      	ldr	r3, [r7, #0]
 80061ae:	885b      	ldrh	r3, [r3, #2]
 80061b0:	b2db      	uxtb	r3, r3
 80061b2:	2b05      	cmp	r3, #5
 80061b4:	f200 80ac 	bhi.w	8006310 <USBD_GetDescriptor+0x204>
 80061b8:	a201      	add	r2, pc, #4	@ (adr r2, 80061c0 <USBD_GetDescriptor+0xb4>)
 80061ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061be:	bf00      	nop
 80061c0:	080061d9 	.word	0x080061d9
 80061c4:	0800620d 	.word	0x0800620d
 80061c8:	08006241 	.word	0x08006241
 80061cc:	08006275 	.word	0x08006275
 80061d0:	080062a9 	.word	0x080062a9
 80061d4:	080062dd 	.word	0x080062dd
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80061de:	685b      	ldr	r3, [r3, #4]
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d00b      	beq.n	80061fc <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80061ea:	685b      	ldr	r3, [r3, #4]
 80061ec:	687a      	ldr	r2, [r7, #4]
 80061ee:	7c12      	ldrb	r2, [r2, #16]
 80061f0:	f107 0108 	add.w	r1, r7, #8
 80061f4:	4610      	mov	r0, r2
 80061f6:	4798      	blx	r3
 80061f8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80061fa:	e091      	b.n	8006320 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80061fc:	6839      	ldr	r1, [r7, #0]
 80061fe:	6878      	ldr	r0, [r7, #4]
 8006200:	f000 facb 	bl	800679a <USBD_CtlError>
            err++;
 8006204:	7afb      	ldrb	r3, [r7, #11]
 8006206:	3301      	adds	r3, #1
 8006208:	72fb      	strb	r3, [r7, #11]
          break;
 800620a:	e089      	b.n	8006320 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006212:	689b      	ldr	r3, [r3, #8]
 8006214:	2b00      	cmp	r3, #0
 8006216:	d00b      	beq.n	8006230 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800621e:	689b      	ldr	r3, [r3, #8]
 8006220:	687a      	ldr	r2, [r7, #4]
 8006222:	7c12      	ldrb	r2, [r2, #16]
 8006224:	f107 0108 	add.w	r1, r7, #8
 8006228:	4610      	mov	r0, r2
 800622a:	4798      	blx	r3
 800622c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800622e:	e077      	b.n	8006320 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006230:	6839      	ldr	r1, [r7, #0]
 8006232:	6878      	ldr	r0, [r7, #4]
 8006234:	f000 fab1 	bl	800679a <USBD_CtlError>
            err++;
 8006238:	7afb      	ldrb	r3, [r7, #11]
 800623a:	3301      	adds	r3, #1
 800623c:	72fb      	strb	r3, [r7, #11]
          break;
 800623e:	e06f      	b.n	8006320 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006246:	68db      	ldr	r3, [r3, #12]
 8006248:	2b00      	cmp	r3, #0
 800624a:	d00b      	beq.n	8006264 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006252:	68db      	ldr	r3, [r3, #12]
 8006254:	687a      	ldr	r2, [r7, #4]
 8006256:	7c12      	ldrb	r2, [r2, #16]
 8006258:	f107 0108 	add.w	r1, r7, #8
 800625c:	4610      	mov	r0, r2
 800625e:	4798      	blx	r3
 8006260:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006262:	e05d      	b.n	8006320 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006264:	6839      	ldr	r1, [r7, #0]
 8006266:	6878      	ldr	r0, [r7, #4]
 8006268:	f000 fa97 	bl	800679a <USBD_CtlError>
            err++;
 800626c:	7afb      	ldrb	r3, [r7, #11]
 800626e:	3301      	adds	r3, #1
 8006270:	72fb      	strb	r3, [r7, #11]
          break;
 8006272:	e055      	b.n	8006320 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800627a:	691b      	ldr	r3, [r3, #16]
 800627c:	2b00      	cmp	r3, #0
 800627e:	d00b      	beq.n	8006298 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006286:	691b      	ldr	r3, [r3, #16]
 8006288:	687a      	ldr	r2, [r7, #4]
 800628a:	7c12      	ldrb	r2, [r2, #16]
 800628c:	f107 0108 	add.w	r1, r7, #8
 8006290:	4610      	mov	r0, r2
 8006292:	4798      	blx	r3
 8006294:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006296:	e043      	b.n	8006320 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006298:	6839      	ldr	r1, [r7, #0]
 800629a:	6878      	ldr	r0, [r7, #4]
 800629c:	f000 fa7d 	bl	800679a <USBD_CtlError>
            err++;
 80062a0:	7afb      	ldrb	r3, [r7, #11]
 80062a2:	3301      	adds	r3, #1
 80062a4:	72fb      	strb	r3, [r7, #11]
          break;
 80062a6:	e03b      	b.n	8006320 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80062ae:	695b      	ldr	r3, [r3, #20]
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d00b      	beq.n	80062cc <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80062ba:	695b      	ldr	r3, [r3, #20]
 80062bc:	687a      	ldr	r2, [r7, #4]
 80062be:	7c12      	ldrb	r2, [r2, #16]
 80062c0:	f107 0108 	add.w	r1, r7, #8
 80062c4:	4610      	mov	r0, r2
 80062c6:	4798      	blx	r3
 80062c8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80062ca:	e029      	b.n	8006320 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80062cc:	6839      	ldr	r1, [r7, #0]
 80062ce:	6878      	ldr	r0, [r7, #4]
 80062d0:	f000 fa63 	bl	800679a <USBD_CtlError>
            err++;
 80062d4:	7afb      	ldrb	r3, [r7, #11]
 80062d6:	3301      	adds	r3, #1
 80062d8:	72fb      	strb	r3, [r7, #11]
          break;
 80062da:	e021      	b.n	8006320 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80062e2:	699b      	ldr	r3, [r3, #24]
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d00b      	beq.n	8006300 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80062ee:	699b      	ldr	r3, [r3, #24]
 80062f0:	687a      	ldr	r2, [r7, #4]
 80062f2:	7c12      	ldrb	r2, [r2, #16]
 80062f4:	f107 0108 	add.w	r1, r7, #8
 80062f8:	4610      	mov	r0, r2
 80062fa:	4798      	blx	r3
 80062fc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80062fe:	e00f      	b.n	8006320 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006300:	6839      	ldr	r1, [r7, #0]
 8006302:	6878      	ldr	r0, [r7, #4]
 8006304:	f000 fa49 	bl	800679a <USBD_CtlError>
            err++;
 8006308:	7afb      	ldrb	r3, [r7, #11]
 800630a:	3301      	adds	r3, #1
 800630c:	72fb      	strb	r3, [r7, #11]
          break;
 800630e:	e007      	b.n	8006320 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8006310:	6839      	ldr	r1, [r7, #0]
 8006312:	6878      	ldr	r0, [r7, #4]
 8006314:	f000 fa41 	bl	800679a <USBD_CtlError>
          err++;
 8006318:	7afb      	ldrb	r3, [r7, #11]
 800631a:	3301      	adds	r3, #1
 800631c:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800631e:	bf00      	nop
      }
      break;
 8006320:	e037      	b.n	8006392 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	7c1b      	ldrb	r3, [r3, #16]
 8006326:	2b00      	cmp	r3, #0
 8006328:	d109      	bne.n	800633e <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006330:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006332:	f107 0208 	add.w	r2, r7, #8
 8006336:	4610      	mov	r0, r2
 8006338:	4798      	blx	r3
 800633a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800633c:	e029      	b.n	8006392 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800633e:	6839      	ldr	r1, [r7, #0]
 8006340:	6878      	ldr	r0, [r7, #4]
 8006342:	f000 fa2a 	bl	800679a <USBD_CtlError>
        err++;
 8006346:	7afb      	ldrb	r3, [r7, #11]
 8006348:	3301      	adds	r3, #1
 800634a:	72fb      	strb	r3, [r7, #11]
      break;
 800634c:	e021      	b.n	8006392 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	7c1b      	ldrb	r3, [r3, #16]
 8006352:	2b00      	cmp	r3, #0
 8006354:	d10d      	bne.n	8006372 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800635c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800635e:	f107 0208 	add.w	r2, r7, #8
 8006362:	4610      	mov	r0, r2
 8006364:	4798      	blx	r3
 8006366:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	3301      	adds	r3, #1
 800636c:	2207      	movs	r2, #7
 800636e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006370:	e00f      	b.n	8006392 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006372:	6839      	ldr	r1, [r7, #0]
 8006374:	6878      	ldr	r0, [r7, #4]
 8006376:	f000 fa10 	bl	800679a <USBD_CtlError>
        err++;
 800637a:	7afb      	ldrb	r3, [r7, #11]
 800637c:	3301      	adds	r3, #1
 800637e:	72fb      	strb	r3, [r7, #11]
      break;
 8006380:	e007      	b.n	8006392 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8006382:	6839      	ldr	r1, [r7, #0]
 8006384:	6878      	ldr	r0, [r7, #4]
 8006386:	f000 fa08 	bl	800679a <USBD_CtlError>
      err++;
 800638a:	7afb      	ldrb	r3, [r7, #11]
 800638c:	3301      	adds	r3, #1
 800638e:	72fb      	strb	r3, [r7, #11]
      break;
 8006390:	bf00      	nop
  }

  if (err != 0U)
 8006392:	7afb      	ldrb	r3, [r7, #11]
 8006394:	2b00      	cmp	r3, #0
 8006396:	d11e      	bne.n	80063d6 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8006398:	683b      	ldr	r3, [r7, #0]
 800639a:	88db      	ldrh	r3, [r3, #6]
 800639c:	2b00      	cmp	r3, #0
 800639e:	d016      	beq.n	80063ce <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 80063a0:	893b      	ldrh	r3, [r7, #8]
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d00e      	beq.n	80063c4 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 80063a6:	683b      	ldr	r3, [r7, #0]
 80063a8:	88da      	ldrh	r2, [r3, #6]
 80063aa:	893b      	ldrh	r3, [r7, #8]
 80063ac:	4293      	cmp	r3, r2
 80063ae:	bf28      	it	cs
 80063b0:	4613      	movcs	r3, r2
 80063b2:	b29b      	uxth	r3, r3
 80063b4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80063b6:	893b      	ldrh	r3, [r7, #8]
 80063b8:	461a      	mov	r2, r3
 80063ba:	68f9      	ldr	r1, [r7, #12]
 80063bc:	6878      	ldr	r0, [r7, #4]
 80063be:	f000 fa69 	bl	8006894 <USBD_CtlSendData>
 80063c2:	e009      	b.n	80063d8 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80063c4:	6839      	ldr	r1, [r7, #0]
 80063c6:	6878      	ldr	r0, [r7, #4]
 80063c8:	f000 f9e7 	bl	800679a <USBD_CtlError>
 80063cc:	e004      	b.n	80063d8 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80063ce:	6878      	ldr	r0, [r7, #4]
 80063d0:	f000 faba 	bl	8006948 <USBD_CtlSendStatus>
 80063d4:	e000      	b.n	80063d8 <USBD_GetDescriptor+0x2cc>
    return;
 80063d6:	bf00      	nop
  }
}
 80063d8:	3710      	adds	r7, #16
 80063da:	46bd      	mov	sp, r7
 80063dc:	bd80      	pop	{r7, pc}
 80063de:	bf00      	nop

080063e0 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80063e0:	b580      	push	{r7, lr}
 80063e2:	b084      	sub	sp, #16
 80063e4:	af00      	add	r7, sp, #0
 80063e6:	6078      	str	r0, [r7, #4]
 80063e8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80063ea:	683b      	ldr	r3, [r7, #0]
 80063ec:	889b      	ldrh	r3, [r3, #4]
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d131      	bne.n	8006456 <USBD_SetAddress+0x76>
 80063f2:	683b      	ldr	r3, [r7, #0]
 80063f4:	88db      	ldrh	r3, [r3, #6]
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d12d      	bne.n	8006456 <USBD_SetAddress+0x76>
 80063fa:	683b      	ldr	r3, [r7, #0]
 80063fc:	885b      	ldrh	r3, [r3, #2]
 80063fe:	2b7f      	cmp	r3, #127	@ 0x7f
 8006400:	d829      	bhi.n	8006456 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8006402:	683b      	ldr	r3, [r7, #0]
 8006404:	885b      	ldrh	r3, [r3, #2]
 8006406:	b2db      	uxtb	r3, r3
 8006408:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800640c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006414:	b2db      	uxtb	r3, r3
 8006416:	2b03      	cmp	r3, #3
 8006418:	d104      	bne.n	8006424 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800641a:	6839      	ldr	r1, [r7, #0]
 800641c:	6878      	ldr	r0, [r7, #4]
 800641e:	f000 f9bc 	bl	800679a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006422:	e01d      	b.n	8006460 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	7bfa      	ldrb	r2, [r7, #15]
 8006428:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800642c:	7bfb      	ldrb	r3, [r7, #15]
 800642e:	4619      	mov	r1, r3
 8006430:	6878      	ldr	r0, [r7, #4]
 8006432:	f000 fe7f 	bl	8007134 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8006436:	6878      	ldr	r0, [r7, #4]
 8006438:	f000 fa86 	bl	8006948 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800643c:	7bfb      	ldrb	r3, [r7, #15]
 800643e:	2b00      	cmp	r3, #0
 8006440:	d004      	beq.n	800644c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	2202      	movs	r2, #2
 8006446:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800644a:	e009      	b.n	8006460 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	2201      	movs	r2, #1
 8006450:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006454:	e004      	b.n	8006460 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8006456:	6839      	ldr	r1, [r7, #0]
 8006458:	6878      	ldr	r0, [r7, #4]
 800645a:	f000 f99e 	bl	800679a <USBD_CtlError>
  }
}
 800645e:	bf00      	nop
 8006460:	bf00      	nop
 8006462:	3710      	adds	r7, #16
 8006464:	46bd      	mov	sp, r7
 8006466:	bd80      	pop	{r7, pc}

08006468 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006468:	b580      	push	{r7, lr}
 800646a:	b084      	sub	sp, #16
 800646c:	af00      	add	r7, sp, #0
 800646e:	6078      	str	r0, [r7, #4]
 8006470:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006472:	2300      	movs	r3, #0
 8006474:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8006476:	683b      	ldr	r3, [r7, #0]
 8006478:	885b      	ldrh	r3, [r3, #2]
 800647a:	b2da      	uxtb	r2, r3
 800647c:	4b4e      	ldr	r3, [pc, #312]	@ (80065b8 <USBD_SetConfig+0x150>)
 800647e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006480:	4b4d      	ldr	r3, [pc, #308]	@ (80065b8 <USBD_SetConfig+0x150>)
 8006482:	781b      	ldrb	r3, [r3, #0]
 8006484:	2b01      	cmp	r3, #1
 8006486:	d905      	bls.n	8006494 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8006488:	6839      	ldr	r1, [r7, #0]
 800648a:	6878      	ldr	r0, [r7, #4]
 800648c:	f000 f985 	bl	800679a <USBD_CtlError>
    return USBD_FAIL;
 8006490:	2303      	movs	r3, #3
 8006492:	e08c      	b.n	80065ae <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800649a:	b2db      	uxtb	r3, r3
 800649c:	2b02      	cmp	r3, #2
 800649e:	d002      	beq.n	80064a6 <USBD_SetConfig+0x3e>
 80064a0:	2b03      	cmp	r3, #3
 80064a2:	d029      	beq.n	80064f8 <USBD_SetConfig+0x90>
 80064a4:	e075      	b.n	8006592 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80064a6:	4b44      	ldr	r3, [pc, #272]	@ (80065b8 <USBD_SetConfig+0x150>)
 80064a8:	781b      	ldrb	r3, [r3, #0]
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d020      	beq.n	80064f0 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 80064ae:	4b42      	ldr	r3, [pc, #264]	@ (80065b8 <USBD_SetConfig+0x150>)
 80064b0:	781b      	ldrb	r3, [r3, #0]
 80064b2:	461a      	mov	r2, r3
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80064b8:	4b3f      	ldr	r3, [pc, #252]	@ (80065b8 <USBD_SetConfig+0x150>)
 80064ba:	781b      	ldrb	r3, [r3, #0]
 80064bc:	4619      	mov	r1, r3
 80064be:	6878      	ldr	r0, [r7, #4]
 80064c0:	f7fe ffe3 	bl	800548a <USBD_SetClassConfig>
 80064c4:	4603      	mov	r3, r0
 80064c6:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80064c8:	7bfb      	ldrb	r3, [r7, #15]
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d008      	beq.n	80064e0 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 80064ce:	6839      	ldr	r1, [r7, #0]
 80064d0:	6878      	ldr	r0, [r7, #4]
 80064d2:	f000 f962 	bl	800679a <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	2202      	movs	r2, #2
 80064da:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80064de:	e065      	b.n	80065ac <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80064e0:	6878      	ldr	r0, [r7, #4]
 80064e2:	f000 fa31 	bl	8006948 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	2203      	movs	r2, #3
 80064ea:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 80064ee:	e05d      	b.n	80065ac <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80064f0:	6878      	ldr	r0, [r7, #4]
 80064f2:	f000 fa29 	bl	8006948 <USBD_CtlSendStatus>
      break;
 80064f6:	e059      	b.n	80065ac <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80064f8:	4b2f      	ldr	r3, [pc, #188]	@ (80065b8 <USBD_SetConfig+0x150>)
 80064fa:	781b      	ldrb	r3, [r3, #0]
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d112      	bne.n	8006526 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	2202      	movs	r2, #2
 8006504:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8006508:	4b2b      	ldr	r3, [pc, #172]	@ (80065b8 <USBD_SetConfig+0x150>)
 800650a:	781b      	ldrb	r3, [r3, #0]
 800650c:	461a      	mov	r2, r3
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006512:	4b29      	ldr	r3, [pc, #164]	@ (80065b8 <USBD_SetConfig+0x150>)
 8006514:	781b      	ldrb	r3, [r3, #0]
 8006516:	4619      	mov	r1, r3
 8006518:	6878      	ldr	r0, [r7, #4]
 800651a:	f7fe ffd2 	bl	80054c2 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800651e:	6878      	ldr	r0, [r7, #4]
 8006520:	f000 fa12 	bl	8006948 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006524:	e042      	b.n	80065ac <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8006526:	4b24      	ldr	r3, [pc, #144]	@ (80065b8 <USBD_SetConfig+0x150>)
 8006528:	781b      	ldrb	r3, [r3, #0]
 800652a:	461a      	mov	r2, r3
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	685b      	ldr	r3, [r3, #4]
 8006530:	429a      	cmp	r2, r3
 8006532:	d02a      	beq.n	800658a <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	685b      	ldr	r3, [r3, #4]
 8006538:	b2db      	uxtb	r3, r3
 800653a:	4619      	mov	r1, r3
 800653c:	6878      	ldr	r0, [r7, #4]
 800653e:	f7fe ffc0 	bl	80054c2 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8006542:	4b1d      	ldr	r3, [pc, #116]	@ (80065b8 <USBD_SetConfig+0x150>)
 8006544:	781b      	ldrb	r3, [r3, #0]
 8006546:	461a      	mov	r2, r3
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800654c:	4b1a      	ldr	r3, [pc, #104]	@ (80065b8 <USBD_SetConfig+0x150>)
 800654e:	781b      	ldrb	r3, [r3, #0]
 8006550:	4619      	mov	r1, r3
 8006552:	6878      	ldr	r0, [r7, #4]
 8006554:	f7fe ff99 	bl	800548a <USBD_SetClassConfig>
 8006558:	4603      	mov	r3, r0
 800655a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800655c:	7bfb      	ldrb	r3, [r7, #15]
 800655e:	2b00      	cmp	r3, #0
 8006560:	d00f      	beq.n	8006582 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8006562:	6839      	ldr	r1, [r7, #0]
 8006564:	6878      	ldr	r0, [r7, #4]
 8006566:	f000 f918 	bl	800679a <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	685b      	ldr	r3, [r3, #4]
 800656e:	b2db      	uxtb	r3, r3
 8006570:	4619      	mov	r1, r3
 8006572:	6878      	ldr	r0, [r7, #4]
 8006574:	f7fe ffa5 	bl	80054c2 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	2202      	movs	r2, #2
 800657c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8006580:	e014      	b.n	80065ac <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8006582:	6878      	ldr	r0, [r7, #4]
 8006584:	f000 f9e0 	bl	8006948 <USBD_CtlSendStatus>
      break;
 8006588:	e010      	b.n	80065ac <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800658a:	6878      	ldr	r0, [r7, #4]
 800658c:	f000 f9dc 	bl	8006948 <USBD_CtlSendStatus>
      break;
 8006590:	e00c      	b.n	80065ac <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8006592:	6839      	ldr	r1, [r7, #0]
 8006594:	6878      	ldr	r0, [r7, #4]
 8006596:	f000 f900 	bl	800679a <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800659a:	4b07      	ldr	r3, [pc, #28]	@ (80065b8 <USBD_SetConfig+0x150>)
 800659c:	781b      	ldrb	r3, [r3, #0]
 800659e:	4619      	mov	r1, r3
 80065a0:	6878      	ldr	r0, [r7, #4]
 80065a2:	f7fe ff8e 	bl	80054c2 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80065a6:	2303      	movs	r3, #3
 80065a8:	73fb      	strb	r3, [r7, #15]
      break;
 80065aa:	bf00      	nop
  }

  return ret;
 80065ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80065ae:	4618      	mov	r0, r3
 80065b0:	3710      	adds	r7, #16
 80065b2:	46bd      	mov	sp, r7
 80065b4:	bd80      	pop	{r7, pc}
 80065b6:	bf00      	nop
 80065b8:	20000688 	.word	0x20000688

080065bc <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80065bc:	b580      	push	{r7, lr}
 80065be:	b082      	sub	sp, #8
 80065c0:	af00      	add	r7, sp, #0
 80065c2:	6078      	str	r0, [r7, #4]
 80065c4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80065c6:	683b      	ldr	r3, [r7, #0]
 80065c8:	88db      	ldrh	r3, [r3, #6]
 80065ca:	2b01      	cmp	r3, #1
 80065cc:	d004      	beq.n	80065d8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80065ce:	6839      	ldr	r1, [r7, #0]
 80065d0:	6878      	ldr	r0, [r7, #4]
 80065d2:	f000 f8e2 	bl	800679a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80065d6:	e023      	b.n	8006620 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80065de:	b2db      	uxtb	r3, r3
 80065e0:	2b02      	cmp	r3, #2
 80065e2:	dc02      	bgt.n	80065ea <USBD_GetConfig+0x2e>
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	dc03      	bgt.n	80065f0 <USBD_GetConfig+0x34>
 80065e8:	e015      	b.n	8006616 <USBD_GetConfig+0x5a>
 80065ea:	2b03      	cmp	r3, #3
 80065ec:	d00b      	beq.n	8006606 <USBD_GetConfig+0x4a>
 80065ee:	e012      	b.n	8006616 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	2200      	movs	r2, #0
 80065f4:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	3308      	adds	r3, #8
 80065fa:	2201      	movs	r2, #1
 80065fc:	4619      	mov	r1, r3
 80065fe:	6878      	ldr	r0, [r7, #4]
 8006600:	f000 f948 	bl	8006894 <USBD_CtlSendData>
        break;
 8006604:	e00c      	b.n	8006620 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	3304      	adds	r3, #4
 800660a:	2201      	movs	r2, #1
 800660c:	4619      	mov	r1, r3
 800660e:	6878      	ldr	r0, [r7, #4]
 8006610:	f000 f940 	bl	8006894 <USBD_CtlSendData>
        break;
 8006614:	e004      	b.n	8006620 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8006616:	6839      	ldr	r1, [r7, #0]
 8006618:	6878      	ldr	r0, [r7, #4]
 800661a:	f000 f8be 	bl	800679a <USBD_CtlError>
        break;
 800661e:	bf00      	nop
}
 8006620:	bf00      	nop
 8006622:	3708      	adds	r7, #8
 8006624:	46bd      	mov	sp, r7
 8006626:	bd80      	pop	{r7, pc}

08006628 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006628:	b580      	push	{r7, lr}
 800662a:	b082      	sub	sp, #8
 800662c:	af00      	add	r7, sp, #0
 800662e:	6078      	str	r0, [r7, #4]
 8006630:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006638:	b2db      	uxtb	r3, r3
 800663a:	3b01      	subs	r3, #1
 800663c:	2b02      	cmp	r3, #2
 800663e:	d81e      	bhi.n	800667e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8006640:	683b      	ldr	r3, [r7, #0]
 8006642:	88db      	ldrh	r3, [r3, #6]
 8006644:	2b02      	cmp	r3, #2
 8006646:	d004      	beq.n	8006652 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8006648:	6839      	ldr	r1, [r7, #0]
 800664a:	6878      	ldr	r0, [r7, #4]
 800664c:	f000 f8a5 	bl	800679a <USBD_CtlError>
        break;
 8006650:	e01a      	b.n	8006688 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
#else
      pdev->dev_config_status = 0U;
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	2200      	movs	r2, #0
 8006656:	60da      	str	r2, [r3, #12]
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800665e:	2b00      	cmp	r3, #0
 8006660:	d005      	beq.n	800666e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	68db      	ldr	r3, [r3, #12]
 8006666:	f043 0202 	orr.w	r2, r3, #2
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	330c      	adds	r3, #12
 8006672:	2202      	movs	r2, #2
 8006674:	4619      	mov	r1, r3
 8006676:	6878      	ldr	r0, [r7, #4]
 8006678:	f000 f90c 	bl	8006894 <USBD_CtlSendData>
      break;
 800667c:	e004      	b.n	8006688 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800667e:	6839      	ldr	r1, [r7, #0]
 8006680:	6878      	ldr	r0, [r7, #4]
 8006682:	f000 f88a 	bl	800679a <USBD_CtlError>
      break;
 8006686:	bf00      	nop
  }
}
 8006688:	bf00      	nop
 800668a:	3708      	adds	r7, #8
 800668c:	46bd      	mov	sp, r7
 800668e:	bd80      	pop	{r7, pc}

08006690 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006690:	b580      	push	{r7, lr}
 8006692:	b082      	sub	sp, #8
 8006694:	af00      	add	r7, sp, #0
 8006696:	6078      	str	r0, [r7, #4]
 8006698:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800669a:	683b      	ldr	r3, [r7, #0]
 800669c:	885b      	ldrh	r3, [r3, #2]
 800669e:	2b01      	cmp	r3, #1
 80066a0:	d107      	bne.n	80066b2 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	2201      	movs	r2, #1
 80066a6:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80066aa:	6878      	ldr	r0, [r7, #4]
 80066ac:	f000 f94c 	bl	8006948 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 80066b0:	e013      	b.n	80066da <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 80066b2:	683b      	ldr	r3, [r7, #0]
 80066b4:	885b      	ldrh	r3, [r3, #2]
 80066b6:	2b02      	cmp	r3, #2
 80066b8:	d10b      	bne.n	80066d2 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 80066ba:	683b      	ldr	r3, [r7, #0]
 80066bc:	889b      	ldrh	r3, [r3, #4]
 80066be:	0a1b      	lsrs	r3, r3, #8
 80066c0:	b29b      	uxth	r3, r3
 80066c2:	b2da      	uxtb	r2, r3
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 80066ca:	6878      	ldr	r0, [r7, #4]
 80066cc:	f000 f93c 	bl	8006948 <USBD_CtlSendStatus>
}
 80066d0:	e003      	b.n	80066da <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 80066d2:	6839      	ldr	r1, [r7, #0]
 80066d4:	6878      	ldr	r0, [r7, #4]
 80066d6:	f000 f860 	bl	800679a <USBD_CtlError>
}
 80066da:	bf00      	nop
 80066dc:	3708      	adds	r7, #8
 80066de:	46bd      	mov	sp, r7
 80066e0:	bd80      	pop	{r7, pc}

080066e2 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80066e2:	b580      	push	{r7, lr}
 80066e4:	b082      	sub	sp, #8
 80066e6:	af00      	add	r7, sp, #0
 80066e8:	6078      	str	r0, [r7, #4]
 80066ea:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80066f2:	b2db      	uxtb	r3, r3
 80066f4:	3b01      	subs	r3, #1
 80066f6:	2b02      	cmp	r3, #2
 80066f8:	d80b      	bhi.n	8006712 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80066fa:	683b      	ldr	r3, [r7, #0]
 80066fc:	885b      	ldrh	r3, [r3, #2]
 80066fe:	2b01      	cmp	r3, #1
 8006700:	d10c      	bne.n	800671c <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	2200      	movs	r2, #0
 8006706:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800670a:	6878      	ldr	r0, [r7, #4]
 800670c:	f000 f91c 	bl	8006948 <USBD_CtlSendStatus>
      }
      break;
 8006710:	e004      	b.n	800671c <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8006712:	6839      	ldr	r1, [r7, #0]
 8006714:	6878      	ldr	r0, [r7, #4]
 8006716:	f000 f840 	bl	800679a <USBD_CtlError>
      break;
 800671a:	e000      	b.n	800671e <USBD_ClrFeature+0x3c>
      break;
 800671c:	bf00      	nop
  }
}
 800671e:	bf00      	nop
 8006720:	3708      	adds	r7, #8
 8006722:	46bd      	mov	sp, r7
 8006724:	bd80      	pop	{r7, pc}

08006726 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8006726:	b580      	push	{r7, lr}
 8006728:	b084      	sub	sp, #16
 800672a:	af00      	add	r7, sp, #0
 800672c:	6078      	str	r0, [r7, #4]
 800672e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8006730:	683b      	ldr	r3, [r7, #0]
 8006732:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	781a      	ldrb	r2, [r3, #0]
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	3301      	adds	r3, #1
 8006740:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	781a      	ldrb	r2, [r3, #0]
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	3301      	adds	r3, #1
 800674e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8006750:	68f8      	ldr	r0, [r7, #12]
 8006752:	f7ff fa40 	bl	8005bd6 <SWAPBYTE>
 8006756:	4603      	mov	r3, r0
 8006758:	461a      	mov	r2, r3
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	3301      	adds	r3, #1
 8006762:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	3301      	adds	r3, #1
 8006768:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800676a:	68f8      	ldr	r0, [r7, #12]
 800676c:	f7ff fa33 	bl	8005bd6 <SWAPBYTE>
 8006770:	4603      	mov	r3, r0
 8006772:	461a      	mov	r2, r3
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	3301      	adds	r3, #1
 800677c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	3301      	adds	r3, #1
 8006782:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8006784:	68f8      	ldr	r0, [r7, #12]
 8006786:	f7ff fa26 	bl	8005bd6 <SWAPBYTE>
 800678a:	4603      	mov	r3, r0
 800678c:	461a      	mov	r2, r3
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	80da      	strh	r2, [r3, #6]
}
 8006792:	bf00      	nop
 8006794:	3710      	adds	r7, #16
 8006796:	46bd      	mov	sp, r7
 8006798:	bd80      	pop	{r7, pc}

0800679a <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800679a:	b580      	push	{r7, lr}
 800679c:	b082      	sub	sp, #8
 800679e:	af00      	add	r7, sp, #0
 80067a0:	6078      	str	r0, [r7, #4]
 80067a2:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80067a4:	2180      	movs	r1, #128	@ 0x80
 80067a6:	6878      	ldr	r0, [r7, #4]
 80067a8:	f000 fc5a 	bl	8007060 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80067ac:	2100      	movs	r1, #0
 80067ae:	6878      	ldr	r0, [r7, #4]
 80067b0:	f000 fc56 	bl	8007060 <USBD_LL_StallEP>
}
 80067b4:	bf00      	nop
 80067b6:	3708      	adds	r7, #8
 80067b8:	46bd      	mov	sp, r7
 80067ba:	bd80      	pop	{r7, pc}

080067bc <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80067bc:	b580      	push	{r7, lr}
 80067be:	b086      	sub	sp, #24
 80067c0:	af00      	add	r7, sp, #0
 80067c2:	60f8      	str	r0, [r7, #12]
 80067c4:	60b9      	str	r1, [r7, #8]
 80067c6:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80067c8:	2300      	movs	r3, #0
 80067ca:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d042      	beq.n	8006858 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 80067d6:	6938      	ldr	r0, [r7, #16]
 80067d8:	f000 f842 	bl	8006860 <USBD_GetLen>
 80067dc:	4603      	mov	r3, r0
 80067de:	3301      	adds	r3, #1
 80067e0:	005b      	lsls	r3, r3, #1
 80067e2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80067e6:	d808      	bhi.n	80067fa <USBD_GetString+0x3e>
 80067e8:	6938      	ldr	r0, [r7, #16]
 80067ea:	f000 f839 	bl	8006860 <USBD_GetLen>
 80067ee:	4603      	mov	r3, r0
 80067f0:	3301      	adds	r3, #1
 80067f2:	b29b      	uxth	r3, r3
 80067f4:	005b      	lsls	r3, r3, #1
 80067f6:	b29a      	uxth	r2, r3
 80067f8:	e001      	b.n	80067fe <USBD_GetString+0x42>
 80067fa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8006802:	7dfb      	ldrb	r3, [r7, #23]
 8006804:	68ba      	ldr	r2, [r7, #8]
 8006806:	4413      	add	r3, r2
 8006808:	687a      	ldr	r2, [r7, #4]
 800680a:	7812      	ldrb	r2, [r2, #0]
 800680c:	701a      	strb	r2, [r3, #0]
  idx++;
 800680e:	7dfb      	ldrb	r3, [r7, #23]
 8006810:	3301      	adds	r3, #1
 8006812:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8006814:	7dfb      	ldrb	r3, [r7, #23]
 8006816:	68ba      	ldr	r2, [r7, #8]
 8006818:	4413      	add	r3, r2
 800681a:	2203      	movs	r2, #3
 800681c:	701a      	strb	r2, [r3, #0]
  idx++;
 800681e:	7dfb      	ldrb	r3, [r7, #23]
 8006820:	3301      	adds	r3, #1
 8006822:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8006824:	e013      	b.n	800684e <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 8006826:	7dfb      	ldrb	r3, [r7, #23]
 8006828:	68ba      	ldr	r2, [r7, #8]
 800682a:	4413      	add	r3, r2
 800682c:	693a      	ldr	r2, [r7, #16]
 800682e:	7812      	ldrb	r2, [r2, #0]
 8006830:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8006832:	693b      	ldr	r3, [r7, #16]
 8006834:	3301      	adds	r3, #1
 8006836:	613b      	str	r3, [r7, #16]
    idx++;
 8006838:	7dfb      	ldrb	r3, [r7, #23]
 800683a:	3301      	adds	r3, #1
 800683c:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800683e:	7dfb      	ldrb	r3, [r7, #23]
 8006840:	68ba      	ldr	r2, [r7, #8]
 8006842:	4413      	add	r3, r2
 8006844:	2200      	movs	r2, #0
 8006846:	701a      	strb	r2, [r3, #0]
    idx++;
 8006848:	7dfb      	ldrb	r3, [r7, #23]
 800684a:	3301      	adds	r3, #1
 800684c:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800684e:	693b      	ldr	r3, [r7, #16]
 8006850:	781b      	ldrb	r3, [r3, #0]
 8006852:	2b00      	cmp	r3, #0
 8006854:	d1e7      	bne.n	8006826 <USBD_GetString+0x6a>
 8006856:	e000      	b.n	800685a <USBD_GetString+0x9e>
    return;
 8006858:	bf00      	nop
  }
}
 800685a:	3718      	adds	r7, #24
 800685c:	46bd      	mov	sp, r7
 800685e:	bd80      	pop	{r7, pc}

08006860 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8006860:	b480      	push	{r7}
 8006862:	b085      	sub	sp, #20
 8006864:	af00      	add	r7, sp, #0
 8006866:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8006868:	2300      	movs	r3, #0
 800686a:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8006870:	e005      	b.n	800687e <USBD_GetLen+0x1e>
  {
    len++;
 8006872:	7bfb      	ldrb	r3, [r7, #15]
 8006874:	3301      	adds	r3, #1
 8006876:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8006878:	68bb      	ldr	r3, [r7, #8]
 800687a:	3301      	adds	r3, #1
 800687c:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800687e:	68bb      	ldr	r3, [r7, #8]
 8006880:	781b      	ldrb	r3, [r3, #0]
 8006882:	2b00      	cmp	r3, #0
 8006884:	d1f5      	bne.n	8006872 <USBD_GetLen+0x12>
  }

  return len;
 8006886:	7bfb      	ldrb	r3, [r7, #15]
}
 8006888:	4618      	mov	r0, r3
 800688a:	3714      	adds	r7, #20
 800688c:	46bd      	mov	sp, r7
 800688e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006892:	4770      	bx	lr

08006894 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8006894:	b580      	push	{r7, lr}
 8006896:	b084      	sub	sp, #16
 8006898:	af00      	add	r7, sp, #0
 800689a:	60f8      	str	r0, [r7, #12]
 800689c:	60b9      	str	r1, [r7, #8]
 800689e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	2202      	movs	r2, #2
 80068a4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	687a      	ldr	r2, [r7, #4]
 80068ac:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	687a      	ldr	r2, [r7, #4]
 80068b2:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	68ba      	ldr	r2, [r7, #8]
 80068b8:	2100      	movs	r1, #0
 80068ba:	68f8      	ldr	r0, [r7, #12]
 80068bc:	f000 fc59 	bl	8007172 <USBD_LL_Transmit>

  return USBD_OK;
 80068c0:	2300      	movs	r3, #0
}
 80068c2:	4618      	mov	r0, r3
 80068c4:	3710      	adds	r7, #16
 80068c6:	46bd      	mov	sp, r7
 80068c8:	bd80      	pop	{r7, pc}

080068ca <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80068ca:	b580      	push	{r7, lr}
 80068cc:	b084      	sub	sp, #16
 80068ce:	af00      	add	r7, sp, #0
 80068d0:	60f8      	str	r0, [r7, #12]
 80068d2:	60b9      	str	r1, [r7, #8]
 80068d4:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	68ba      	ldr	r2, [r7, #8]
 80068da:	2100      	movs	r1, #0
 80068dc:	68f8      	ldr	r0, [r7, #12]
 80068de:	f000 fc48 	bl	8007172 <USBD_LL_Transmit>

  return USBD_OK;
 80068e2:	2300      	movs	r3, #0
}
 80068e4:	4618      	mov	r0, r3
 80068e6:	3710      	adds	r7, #16
 80068e8:	46bd      	mov	sp, r7
 80068ea:	bd80      	pop	{r7, pc}

080068ec <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80068ec:	b580      	push	{r7, lr}
 80068ee:	b084      	sub	sp, #16
 80068f0:	af00      	add	r7, sp, #0
 80068f2:	60f8      	str	r0, [r7, #12]
 80068f4:	60b9      	str	r1, [r7, #8]
 80068f6:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	2203      	movs	r2, #3
 80068fc:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	687a      	ldr	r2, [r7, #4]
 8006904:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	687a      	ldr	r2, [r7, #4]
 800690c:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	68ba      	ldr	r2, [r7, #8]
 8006914:	2100      	movs	r1, #0
 8006916:	68f8      	ldr	r0, [r7, #12]
 8006918:	f000 fc4c 	bl	80071b4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800691c:	2300      	movs	r3, #0
}
 800691e:	4618      	mov	r0, r3
 8006920:	3710      	adds	r7, #16
 8006922:	46bd      	mov	sp, r7
 8006924:	bd80      	pop	{r7, pc}

08006926 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8006926:	b580      	push	{r7, lr}
 8006928:	b084      	sub	sp, #16
 800692a:	af00      	add	r7, sp, #0
 800692c:	60f8      	str	r0, [r7, #12]
 800692e:	60b9      	str	r1, [r7, #8]
 8006930:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	68ba      	ldr	r2, [r7, #8]
 8006936:	2100      	movs	r1, #0
 8006938:	68f8      	ldr	r0, [r7, #12]
 800693a:	f000 fc3b 	bl	80071b4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800693e:	2300      	movs	r3, #0
}
 8006940:	4618      	mov	r0, r3
 8006942:	3710      	adds	r7, #16
 8006944:	46bd      	mov	sp, r7
 8006946:	bd80      	pop	{r7, pc}

08006948 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8006948:	b580      	push	{r7, lr}
 800694a:	b082      	sub	sp, #8
 800694c:	af00      	add	r7, sp, #0
 800694e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	2204      	movs	r2, #4
 8006954:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8006958:	2300      	movs	r3, #0
 800695a:	2200      	movs	r2, #0
 800695c:	2100      	movs	r1, #0
 800695e:	6878      	ldr	r0, [r7, #4]
 8006960:	f000 fc07 	bl	8007172 <USBD_LL_Transmit>

  return USBD_OK;
 8006964:	2300      	movs	r3, #0
}
 8006966:	4618      	mov	r0, r3
 8006968:	3708      	adds	r7, #8
 800696a:	46bd      	mov	sp, r7
 800696c:	bd80      	pop	{r7, pc}

0800696e <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800696e:	b580      	push	{r7, lr}
 8006970:	b082      	sub	sp, #8
 8006972:	af00      	add	r7, sp, #0
 8006974:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	2205      	movs	r2, #5
 800697a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800697e:	2300      	movs	r3, #0
 8006980:	2200      	movs	r2, #0
 8006982:	2100      	movs	r1, #0
 8006984:	6878      	ldr	r0, [r7, #4]
 8006986:	f000 fc15 	bl	80071b4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800698a:	2300      	movs	r3, #0
}
 800698c:	4618      	mov	r0, r3
 800698e:	3708      	adds	r7, #8
 8006990:	46bd      	mov	sp, r7
 8006992:	bd80      	pop	{r7, pc}

08006994 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8006994:	b580      	push	{r7, lr}
 8006996:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8006998:	2200      	movs	r2, #0
 800699a:	4912      	ldr	r1, [pc, #72]	@ (80069e4 <MX_USB_DEVICE_Init+0x50>)
 800699c:	4812      	ldr	r0, [pc, #72]	@ (80069e8 <MX_USB_DEVICE_Init+0x54>)
 800699e:	f7fe fcf7 	bl	8005390 <USBD_Init>
 80069a2:	4603      	mov	r3, r0
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d001      	beq.n	80069ac <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80069a8:	f7f9 fee0 	bl	800076c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CUSTOM_HID) != USBD_OK)
 80069ac:	490f      	ldr	r1, [pc, #60]	@ (80069ec <MX_USB_DEVICE_Init+0x58>)
 80069ae:	480e      	ldr	r0, [pc, #56]	@ (80069e8 <MX_USB_DEVICE_Init+0x54>)
 80069b0:	f7fe fd1e 	bl	80053f0 <USBD_RegisterClass>
 80069b4:	4603      	mov	r3, r0
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d001      	beq.n	80069be <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80069ba:	f7f9 fed7 	bl	800076c <Error_Handler>
  }
  if (USBD_CUSTOM_HID_RegisterInterface(&hUsbDeviceFS, &USBD_CustomHID_fops_FS) != USBD_OK)
 80069be:	490c      	ldr	r1, [pc, #48]	@ (80069f0 <MX_USB_DEVICE_Init+0x5c>)
 80069c0:	4809      	ldr	r0, [pc, #36]	@ (80069e8 <MX_USB_DEVICE_Init+0x54>)
 80069c2:	f7fe fccb 	bl	800535c <USBD_CUSTOM_HID_RegisterInterface>
 80069c6:	4603      	mov	r3, r0
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d001      	beq.n	80069d0 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80069cc:	f7f9 fece 	bl	800076c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80069d0:	4805      	ldr	r0, [pc, #20]	@ (80069e8 <MX_USB_DEVICE_Init+0x54>)
 80069d2:	f7fe fd43 	bl	800545c <USBD_Start>
 80069d6:	4603      	mov	r3, r0
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d001      	beq.n	80069e0 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80069dc:	f7f9 fec6 	bl	800076c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80069e0:	bf00      	nop
 80069e2:	bd80      	pop	{r7, pc}
 80069e4:	200005c4 	.word	0x200005c4
 80069e8:	2000068c 	.word	0x2000068c
 80069ec:	2000000c 	.word	0x2000000c
 80069f0:	200005b0 	.word	0x200005b0

080069f4 <CUSTOM_HID_Init_FS>:
/**
  * @brief  Initializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_Init_FS(void)
{
 80069f4:	b480      	push	{r7}
 80069f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80069f8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80069fa:	4618      	mov	r0, r3
 80069fc:	46bd      	mov	sp, r7
 80069fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a02:	4770      	bx	lr

08006a04 <CUSTOM_HID_DeInit_FS>:
/**
  * @brief  DeInitializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_DeInit_FS(void)
{
 8006a04:	b480      	push	{r7}
 8006a06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 8006a08:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8006a0a:	4618      	mov	r0, r3
 8006a0c:	46bd      	mov	sp, r7
 8006a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a12:	4770      	bx	lr

08006a14 <CUSTOM_HID_OutEvent_FS>:
  * @param  event_idx: Event index
  * @param  state: Event state
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_OutEvent_FS(uint8_t event_idx, uint8_t state)
{
 8006a14:	b580      	push	{r7, lr}
 8006a16:	b082      	sub	sp, #8
 8006a18:	af00      	add	r7, sp, #0
 8006a1a:	4603      	mov	r3, r0
 8006a1c:	460a      	mov	r2, r1
 8006a1e:	71fb      	strb	r3, [r7, #7]
 8006a20:	4613      	mov	r3, r2
 8006a22:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN 6 */
  UNUSED(event_idx);
  UNUSED(state);

  /* Start next USB packet transfer once data processing is completed */
  if (USBD_CUSTOM_HID_ReceivePacket(&hUsbDeviceFS) != (uint8_t)USBD_OK)
 8006a24:	4806      	ldr	r0, [pc, #24]	@ (8006a40 <CUSTOM_HID_OutEvent_FS+0x2c>)
 8006a26:	f7fe fc37 	bl	8005298 <USBD_CUSTOM_HID_ReceivePacket>
 8006a2a:	4603      	mov	r3, r0
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d002      	beq.n	8006a36 <CUSTOM_HID_OutEvent_FS+0x22>
  {
    return -1;
 8006a30:	f04f 33ff 	mov.w	r3, #4294967295
 8006a34:	e000      	b.n	8006a38 <CUSTOM_HID_OutEvent_FS+0x24>
  }

  return (USBD_OK);
 8006a36:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8006a38:	4618      	mov	r0, r3
 8006a3a:	3708      	adds	r7, #8
 8006a3c:	46bd      	mov	sp, r7
 8006a3e:	bd80      	pop	{r7, pc}
 8006a40:	2000068c 	.word	0x2000068c

08006a44 <CUSTOM_HID_GetReport>:
  * @param  event_idx: event index
  * @param  state: event state
  * @retval return pointer to HID report
  */
static uint8_t *CUSTOM_HID_GetReport(uint16_t *ReportLength)
{
 8006a44:	b480      	push	{r7}
 8006a46:	b085      	sub	sp, #20
 8006a48:	af00      	add	r7, sp, #0
 8006a4a:	6078      	str	r0, [r7, #4]
	UNUSED(ReportLength);
	uint8_t *pbuff;

	return (pbuff);
 8006a4c:	68fb      	ldr	r3, [r7, #12]
}
 8006a4e:	4618      	mov	r0, r3
 8006a50:	3714      	adds	r7, #20
 8006a52:	46bd      	mov	sp, r7
 8006a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a58:	4770      	bx	lr
	...

08006a5c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006a5c:	b480      	push	{r7}
 8006a5e:	b083      	sub	sp, #12
 8006a60:	af00      	add	r7, sp, #0
 8006a62:	4603      	mov	r3, r0
 8006a64:	6039      	str	r1, [r7, #0]
 8006a66:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8006a68:	683b      	ldr	r3, [r7, #0]
 8006a6a:	2212      	movs	r2, #18
 8006a6c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8006a6e:	4b03      	ldr	r3, [pc, #12]	@ (8006a7c <USBD_FS_DeviceDescriptor+0x20>)
}
 8006a70:	4618      	mov	r0, r3
 8006a72:	370c      	adds	r7, #12
 8006a74:	46bd      	mov	sp, r7
 8006a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a7a:	4770      	bx	lr
 8006a7c:	200005e0 	.word	0x200005e0

08006a80 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006a80:	b480      	push	{r7}
 8006a82:	b083      	sub	sp, #12
 8006a84:	af00      	add	r7, sp, #0
 8006a86:	4603      	mov	r3, r0
 8006a88:	6039      	str	r1, [r7, #0]
 8006a8a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8006a8c:	683b      	ldr	r3, [r7, #0]
 8006a8e:	2204      	movs	r2, #4
 8006a90:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8006a92:	4b03      	ldr	r3, [pc, #12]	@ (8006aa0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8006a94:	4618      	mov	r0, r3
 8006a96:	370c      	adds	r7, #12
 8006a98:	46bd      	mov	sp, r7
 8006a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a9e:	4770      	bx	lr
 8006aa0:	200005f4 	.word	0x200005f4

08006aa4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006aa4:	b580      	push	{r7, lr}
 8006aa6:	b082      	sub	sp, #8
 8006aa8:	af00      	add	r7, sp, #0
 8006aaa:	4603      	mov	r3, r0
 8006aac:	6039      	str	r1, [r7, #0]
 8006aae:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006ab0:	79fb      	ldrb	r3, [r7, #7]
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d105      	bne.n	8006ac2 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006ab6:	683a      	ldr	r2, [r7, #0]
 8006ab8:	4907      	ldr	r1, [pc, #28]	@ (8006ad8 <USBD_FS_ProductStrDescriptor+0x34>)
 8006aba:	4808      	ldr	r0, [pc, #32]	@ (8006adc <USBD_FS_ProductStrDescriptor+0x38>)
 8006abc:	f7ff fe7e 	bl	80067bc <USBD_GetString>
 8006ac0:	e004      	b.n	8006acc <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006ac2:	683a      	ldr	r2, [r7, #0]
 8006ac4:	4904      	ldr	r1, [pc, #16]	@ (8006ad8 <USBD_FS_ProductStrDescriptor+0x34>)
 8006ac6:	4805      	ldr	r0, [pc, #20]	@ (8006adc <USBD_FS_ProductStrDescriptor+0x38>)
 8006ac8:	f7ff fe78 	bl	80067bc <USBD_GetString>
  }
  return USBD_StrDesc;
 8006acc:	4b02      	ldr	r3, [pc, #8]	@ (8006ad8 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8006ace:	4618      	mov	r0, r3
 8006ad0:	3708      	adds	r7, #8
 8006ad2:	46bd      	mov	sp, r7
 8006ad4:	bd80      	pop	{r7, pc}
 8006ad6:	bf00      	nop
 8006ad8:	20000968 	.word	0x20000968
 8006adc:	080072f0 	.word	0x080072f0

08006ae0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006ae0:	b580      	push	{r7, lr}
 8006ae2:	b082      	sub	sp, #8
 8006ae4:	af00      	add	r7, sp, #0
 8006ae6:	4603      	mov	r3, r0
 8006ae8:	6039      	str	r1, [r7, #0]
 8006aea:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8006aec:	683a      	ldr	r2, [r7, #0]
 8006aee:	4904      	ldr	r1, [pc, #16]	@ (8006b00 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8006af0:	4804      	ldr	r0, [pc, #16]	@ (8006b04 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8006af2:	f7ff fe63 	bl	80067bc <USBD_GetString>
  return USBD_StrDesc;
 8006af6:	4b02      	ldr	r3, [pc, #8]	@ (8006b00 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8006af8:	4618      	mov	r0, r3
 8006afa:	3708      	adds	r7, #8
 8006afc:	46bd      	mov	sp, r7
 8006afe:	bd80      	pop	{r7, pc}
 8006b00:	20000968 	.word	0x20000968
 8006b04:	08007310 	.word	0x08007310

08006b08 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006b08:	b580      	push	{r7, lr}
 8006b0a:	b082      	sub	sp, #8
 8006b0c:	af00      	add	r7, sp, #0
 8006b0e:	4603      	mov	r3, r0
 8006b10:	6039      	str	r1, [r7, #0]
 8006b12:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8006b14:	683b      	ldr	r3, [r7, #0]
 8006b16:	221a      	movs	r2, #26
 8006b18:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8006b1a:	f000 f843 	bl	8006ba4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8006b1e:	4b02      	ldr	r3, [pc, #8]	@ (8006b28 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8006b20:	4618      	mov	r0, r3
 8006b22:	3708      	adds	r7, #8
 8006b24:	46bd      	mov	sp, r7
 8006b26:	bd80      	pop	{r7, pc}
 8006b28:	200005f8 	.word	0x200005f8

08006b2c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006b2c:	b580      	push	{r7, lr}
 8006b2e:	b082      	sub	sp, #8
 8006b30:	af00      	add	r7, sp, #0
 8006b32:	4603      	mov	r3, r0
 8006b34:	6039      	str	r1, [r7, #0]
 8006b36:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8006b38:	79fb      	ldrb	r3, [r7, #7]
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d105      	bne.n	8006b4a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006b3e:	683a      	ldr	r2, [r7, #0]
 8006b40:	4907      	ldr	r1, [pc, #28]	@ (8006b60 <USBD_FS_ConfigStrDescriptor+0x34>)
 8006b42:	4808      	ldr	r0, [pc, #32]	@ (8006b64 <USBD_FS_ConfigStrDescriptor+0x38>)
 8006b44:	f7ff fe3a 	bl	80067bc <USBD_GetString>
 8006b48:	e004      	b.n	8006b54 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006b4a:	683a      	ldr	r2, [r7, #0]
 8006b4c:	4904      	ldr	r1, [pc, #16]	@ (8006b60 <USBD_FS_ConfigStrDescriptor+0x34>)
 8006b4e:	4805      	ldr	r0, [pc, #20]	@ (8006b64 <USBD_FS_ConfigStrDescriptor+0x38>)
 8006b50:	f7ff fe34 	bl	80067bc <USBD_GetString>
  }
  return USBD_StrDesc;
 8006b54:	4b02      	ldr	r3, [pc, #8]	@ (8006b60 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8006b56:	4618      	mov	r0, r3
 8006b58:	3708      	adds	r7, #8
 8006b5a:	46bd      	mov	sp, r7
 8006b5c:	bd80      	pop	{r7, pc}
 8006b5e:	bf00      	nop
 8006b60:	20000968 	.word	0x20000968
 8006b64:	08007324 	.word	0x08007324

08006b68 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006b68:	b580      	push	{r7, lr}
 8006b6a:	b082      	sub	sp, #8
 8006b6c:	af00      	add	r7, sp, #0
 8006b6e:	4603      	mov	r3, r0
 8006b70:	6039      	str	r1, [r7, #0]
 8006b72:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006b74:	79fb      	ldrb	r3, [r7, #7]
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d105      	bne.n	8006b86 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006b7a:	683a      	ldr	r2, [r7, #0]
 8006b7c:	4907      	ldr	r1, [pc, #28]	@ (8006b9c <USBD_FS_InterfaceStrDescriptor+0x34>)
 8006b7e:	4808      	ldr	r0, [pc, #32]	@ (8006ba0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006b80:	f7ff fe1c 	bl	80067bc <USBD_GetString>
 8006b84:	e004      	b.n	8006b90 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006b86:	683a      	ldr	r2, [r7, #0]
 8006b88:	4904      	ldr	r1, [pc, #16]	@ (8006b9c <USBD_FS_InterfaceStrDescriptor+0x34>)
 8006b8a:	4805      	ldr	r0, [pc, #20]	@ (8006ba0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006b8c:	f7ff fe16 	bl	80067bc <USBD_GetString>
  }
  return USBD_StrDesc;
 8006b90:	4b02      	ldr	r3, [pc, #8]	@ (8006b9c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8006b92:	4618      	mov	r0, r3
 8006b94:	3708      	adds	r7, #8
 8006b96:	46bd      	mov	sp, r7
 8006b98:	bd80      	pop	{r7, pc}
 8006b9a:	bf00      	nop
 8006b9c:	20000968 	.word	0x20000968
 8006ba0:	08007338 	.word	0x08007338

08006ba4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8006ba4:	b580      	push	{r7, lr}
 8006ba6:	b084      	sub	sp, #16
 8006ba8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8006baa:	4b0f      	ldr	r3, [pc, #60]	@ (8006be8 <Get_SerialNum+0x44>)
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8006bb0:	4b0e      	ldr	r3, [pc, #56]	@ (8006bec <Get_SerialNum+0x48>)
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8006bb6:	4b0e      	ldr	r3, [pc, #56]	@ (8006bf0 <Get_SerialNum+0x4c>)
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8006bbc:	68fa      	ldr	r2, [r7, #12]
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	4413      	add	r3, r2
 8006bc2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d009      	beq.n	8006bde <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8006bca:	2208      	movs	r2, #8
 8006bcc:	4909      	ldr	r1, [pc, #36]	@ (8006bf4 <Get_SerialNum+0x50>)
 8006bce:	68f8      	ldr	r0, [r7, #12]
 8006bd0:	f000 f814 	bl	8006bfc <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8006bd4:	2204      	movs	r2, #4
 8006bd6:	4908      	ldr	r1, [pc, #32]	@ (8006bf8 <Get_SerialNum+0x54>)
 8006bd8:	68b8      	ldr	r0, [r7, #8]
 8006bda:	f000 f80f 	bl	8006bfc <IntToUnicode>
  }
}
 8006bde:	bf00      	nop
 8006be0:	3710      	adds	r7, #16
 8006be2:	46bd      	mov	sp, r7
 8006be4:	bd80      	pop	{r7, pc}
 8006be6:	bf00      	nop
 8006be8:	1fff7a10 	.word	0x1fff7a10
 8006bec:	1fff7a14 	.word	0x1fff7a14
 8006bf0:	1fff7a18 	.word	0x1fff7a18
 8006bf4:	200005fa 	.word	0x200005fa
 8006bf8:	2000060a 	.word	0x2000060a

08006bfc <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8006bfc:	b480      	push	{r7}
 8006bfe:	b087      	sub	sp, #28
 8006c00:	af00      	add	r7, sp, #0
 8006c02:	60f8      	str	r0, [r7, #12]
 8006c04:	60b9      	str	r1, [r7, #8]
 8006c06:	4613      	mov	r3, r2
 8006c08:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8006c0a:	2300      	movs	r3, #0
 8006c0c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8006c0e:	2300      	movs	r3, #0
 8006c10:	75fb      	strb	r3, [r7, #23]
 8006c12:	e027      	b.n	8006c64 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	0f1b      	lsrs	r3, r3, #28
 8006c18:	2b09      	cmp	r3, #9
 8006c1a:	d80b      	bhi.n	8006c34 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	0f1b      	lsrs	r3, r3, #28
 8006c20:	b2da      	uxtb	r2, r3
 8006c22:	7dfb      	ldrb	r3, [r7, #23]
 8006c24:	005b      	lsls	r3, r3, #1
 8006c26:	4619      	mov	r1, r3
 8006c28:	68bb      	ldr	r3, [r7, #8]
 8006c2a:	440b      	add	r3, r1
 8006c2c:	3230      	adds	r2, #48	@ 0x30
 8006c2e:	b2d2      	uxtb	r2, r2
 8006c30:	701a      	strb	r2, [r3, #0]
 8006c32:	e00a      	b.n	8006c4a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	0f1b      	lsrs	r3, r3, #28
 8006c38:	b2da      	uxtb	r2, r3
 8006c3a:	7dfb      	ldrb	r3, [r7, #23]
 8006c3c:	005b      	lsls	r3, r3, #1
 8006c3e:	4619      	mov	r1, r3
 8006c40:	68bb      	ldr	r3, [r7, #8]
 8006c42:	440b      	add	r3, r1
 8006c44:	3237      	adds	r2, #55	@ 0x37
 8006c46:	b2d2      	uxtb	r2, r2
 8006c48:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	011b      	lsls	r3, r3, #4
 8006c4e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8006c50:	7dfb      	ldrb	r3, [r7, #23]
 8006c52:	005b      	lsls	r3, r3, #1
 8006c54:	3301      	adds	r3, #1
 8006c56:	68ba      	ldr	r2, [r7, #8]
 8006c58:	4413      	add	r3, r2
 8006c5a:	2200      	movs	r2, #0
 8006c5c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8006c5e:	7dfb      	ldrb	r3, [r7, #23]
 8006c60:	3301      	adds	r3, #1
 8006c62:	75fb      	strb	r3, [r7, #23]
 8006c64:	7dfa      	ldrb	r2, [r7, #23]
 8006c66:	79fb      	ldrb	r3, [r7, #7]
 8006c68:	429a      	cmp	r2, r3
 8006c6a:	d3d3      	bcc.n	8006c14 <IntToUnicode+0x18>
  }
}
 8006c6c:	bf00      	nop
 8006c6e:	bf00      	nop
 8006c70:	371c      	adds	r7, #28
 8006c72:	46bd      	mov	sp, r7
 8006c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c78:	4770      	bx	lr
	...

08006c7c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8006c7c:	b580      	push	{r7, lr}
 8006c7e:	b08a      	sub	sp, #40	@ 0x28
 8006c80:	af00      	add	r7, sp, #0
 8006c82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006c84:	f107 0314 	add.w	r3, r7, #20
 8006c88:	2200      	movs	r2, #0
 8006c8a:	601a      	str	r2, [r3, #0]
 8006c8c:	605a      	str	r2, [r3, #4]
 8006c8e:	609a      	str	r2, [r3, #8]
 8006c90:	60da      	str	r2, [r3, #12]
 8006c92:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006c9c:	d13a      	bne.n	8006d14 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006c9e:	2300      	movs	r3, #0
 8006ca0:	613b      	str	r3, [r7, #16]
 8006ca2:	4b1e      	ldr	r3, [pc, #120]	@ (8006d1c <HAL_PCD_MspInit+0xa0>)
 8006ca4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ca6:	4a1d      	ldr	r2, [pc, #116]	@ (8006d1c <HAL_PCD_MspInit+0xa0>)
 8006ca8:	f043 0301 	orr.w	r3, r3, #1
 8006cac:	6313      	str	r3, [r2, #48]	@ 0x30
 8006cae:	4b1b      	ldr	r3, [pc, #108]	@ (8006d1c <HAL_PCD_MspInit+0xa0>)
 8006cb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006cb2:	f003 0301 	and.w	r3, r3, #1
 8006cb6:	613b      	str	r3, [r7, #16]
 8006cb8:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8006cba:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8006cbe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006cc0:	2302      	movs	r3, #2
 8006cc2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006cc4:	2300      	movs	r3, #0
 8006cc6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006cc8:	2303      	movs	r3, #3
 8006cca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8006ccc:	230a      	movs	r3, #10
 8006cce:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006cd0:	f107 0314 	add.w	r3, r7, #20
 8006cd4:	4619      	mov	r1, r3
 8006cd6:	4812      	ldr	r0, [pc, #72]	@ (8006d20 <HAL_PCD_MspInit+0xa4>)
 8006cd8:	f7f9 ffee 	bl	8000cb8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8006cdc:	4b0f      	ldr	r3, [pc, #60]	@ (8006d1c <HAL_PCD_MspInit+0xa0>)
 8006cde:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006ce0:	4a0e      	ldr	r2, [pc, #56]	@ (8006d1c <HAL_PCD_MspInit+0xa0>)
 8006ce2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006ce6:	6353      	str	r3, [r2, #52]	@ 0x34
 8006ce8:	2300      	movs	r3, #0
 8006cea:	60fb      	str	r3, [r7, #12]
 8006cec:	4b0b      	ldr	r3, [pc, #44]	@ (8006d1c <HAL_PCD_MspInit+0xa0>)
 8006cee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006cf0:	4a0a      	ldr	r2, [pc, #40]	@ (8006d1c <HAL_PCD_MspInit+0xa0>)
 8006cf2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006cf6:	6453      	str	r3, [r2, #68]	@ 0x44
 8006cf8:	4b08      	ldr	r3, [pc, #32]	@ (8006d1c <HAL_PCD_MspInit+0xa0>)
 8006cfa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006cfc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006d00:	60fb      	str	r3, [r7, #12]
 8006d02:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8006d04:	2200      	movs	r2, #0
 8006d06:	2100      	movs	r1, #0
 8006d08:	2043      	movs	r0, #67	@ 0x43
 8006d0a:	f7f9 ff9e 	bl	8000c4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8006d0e:	2043      	movs	r0, #67	@ 0x43
 8006d10:	f7f9 ffb7 	bl	8000c82 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8006d14:	bf00      	nop
 8006d16:	3728      	adds	r7, #40	@ 0x28
 8006d18:	46bd      	mov	sp, r7
 8006d1a:	bd80      	pop	{r7, pc}
 8006d1c:	40023800 	.word	0x40023800
 8006d20:	40020000 	.word	0x40020000

08006d24 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006d24:	b580      	push	{r7, lr}
 8006d26:	b082      	sub	sp, #8
 8006d28:	af00      	add	r7, sp, #0
 8006d2a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8006d38:	4619      	mov	r1, r3
 8006d3a:	4610      	mov	r0, r2
 8006d3c:	f7fe fbdb 	bl	80054f6 <USBD_LL_SetupStage>
}
 8006d40:	bf00      	nop
 8006d42:	3708      	adds	r7, #8
 8006d44:	46bd      	mov	sp, r7
 8006d46:	bd80      	pop	{r7, pc}

08006d48 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006d48:	b580      	push	{r7, lr}
 8006d4a:	b082      	sub	sp, #8
 8006d4c:	af00      	add	r7, sp, #0
 8006d4e:	6078      	str	r0, [r7, #4]
 8006d50:	460b      	mov	r3, r1
 8006d52:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8006d5a:	78fa      	ldrb	r2, [r7, #3]
 8006d5c:	6879      	ldr	r1, [r7, #4]
 8006d5e:	4613      	mov	r3, r2
 8006d60:	00db      	lsls	r3, r3, #3
 8006d62:	4413      	add	r3, r2
 8006d64:	009b      	lsls	r3, r3, #2
 8006d66:	440b      	add	r3, r1
 8006d68:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8006d6c:	681a      	ldr	r2, [r3, #0]
 8006d6e:	78fb      	ldrb	r3, [r7, #3]
 8006d70:	4619      	mov	r1, r3
 8006d72:	f7fe fc15 	bl	80055a0 <USBD_LL_DataOutStage>
}
 8006d76:	bf00      	nop
 8006d78:	3708      	adds	r7, #8
 8006d7a:	46bd      	mov	sp, r7
 8006d7c:	bd80      	pop	{r7, pc}

08006d7e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006d7e:	b580      	push	{r7, lr}
 8006d80:	b082      	sub	sp, #8
 8006d82:	af00      	add	r7, sp, #0
 8006d84:	6078      	str	r0, [r7, #4]
 8006d86:	460b      	mov	r3, r1
 8006d88:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8006d90:	78fa      	ldrb	r2, [r7, #3]
 8006d92:	6879      	ldr	r1, [r7, #4]
 8006d94:	4613      	mov	r3, r2
 8006d96:	00db      	lsls	r3, r3, #3
 8006d98:	4413      	add	r3, r2
 8006d9a:	009b      	lsls	r3, r3, #2
 8006d9c:	440b      	add	r3, r1
 8006d9e:	3320      	adds	r3, #32
 8006da0:	681a      	ldr	r2, [r3, #0]
 8006da2:	78fb      	ldrb	r3, [r7, #3]
 8006da4:	4619      	mov	r1, r3
 8006da6:	f7fe fcae 	bl	8005706 <USBD_LL_DataInStage>
}
 8006daa:	bf00      	nop
 8006dac:	3708      	adds	r7, #8
 8006dae:	46bd      	mov	sp, r7
 8006db0:	bd80      	pop	{r7, pc}

08006db2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006db2:	b580      	push	{r7, lr}
 8006db4:	b082      	sub	sp, #8
 8006db6:	af00      	add	r7, sp, #0
 8006db8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8006dc0:	4618      	mov	r0, r3
 8006dc2:	f7fe fde8 	bl	8005996 <USBD_LL_SOF>
}
 8006dc6:	bf00      	nop
 8006dc8:	3708      	adds	r7, #8
 8006dca:	46bd      	mov	sp, r7
 8006dcc:	bd80      	pop	{r7, pc}

08006dce <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006dce:	b580      	push	{r7, lr}
 8006dd0:	b084      	sub	sp, #16
 8006dd2:	af00      	add	r7, sp, #0
 8006dd4:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8006dd6:	2301      	movs	r3, #1
 8006dd8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	79db      	ldrb	r3, [r3, #7]
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d102      	bne.n	8006de8 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8006de2:	2300      	movs	r3, #0
 8006de4:	73fb      	strb	r3, [r7, #15]
 8006de6:	e008      	b.n	8006dfa <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	79db      	ldrb	r3, [r3, #7]
 8006dec:	2b02      	cmp	r3, #2
 8006dee:	d102      	bne.n	8006df6 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8006df0:	2301      	movs	r3, #1
 8006df2:	73fb      	strb	r3, [r7, #15]
 8006df4:	e001      	b.n	8006dfa <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8006df6:	f7f9 fcb9 	bl	800076c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8006e00:	7bfa      	ldrb	r2, [r7, #15]
 8006e02:	4611      	mov	r1, r2
 8006e04:	4618      	mov	r0, r3
 8006e06:	f7fe fd82 	bl	800590e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8006e10:	4618      	mov	r0, r3
 8006e12:	f7fe fd2a 	bl	800586a <USBD_LL_Reset>
}
 8006e16:	bf00      	nop
 8006e18:	3710      	adds	r7, #16
 8006e1a:	46bd      	mov	sp, r7
 8006e1c:	bd80      	pop	{r7, pc}
	...

08006e20 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006e20:	b580      	push	{r7, lr}
 8006e22:	b082      	sub	sp, #8
 8006e24:	af00      	add	r7, sp, #0
 8006e26:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8006e2e:	4618      	mov	r0, r3
 8006e30:	f7fe fd7d 	bl	800592e <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	687a      	ldr	r2, [r7, #4]
 8006e40:	6812      	ldr	r2, [r2, #0]
 8006e42:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8006e46:	f043 0301 	orr.w	r3, r3, #1
 8006e4a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	7adb      	ldrb	r3, [r3, #11]
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d005      	beq.n	8006e60 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8006e54:	4b04      	ldr	r3, [pc, #16]	@ (8006e68 <HAL_PCD_SuspendCallback+0x48>)
 8006e56:	691b      	ldr	r3, [r3, #16]
 8006e58:	4a03      	ldr	r2, [pc, #12]	@ (8006e68 <HAL_PCD_SuspendCallback+0x48>)
 8006e5a:	f043 0306 	orr.w	r3, r3, #6
 8006e5e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8006e60:	bf00      	nop
 8006e62:	3708      	adds	r7, #8
 8006e64:	46bd      	mov	sp, r7
 8006e66:	bd80      	pop	{r7, pc}
 8006e68:	e000ed00 	.word	0xe000ed00

08006e6c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006e6c:	b580      	push	{r7, lr}
 8006e6e:	b082      	sub	sp, #8
 8006e70:	af00      	add	r7, sp, #0
 8006e72:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8006e7a:	4618      	mov	r0, r3
 8006e7c:	f7fe fd73 	bl	8005966 <USBD_LL_Resume>
}
 8006e80:	bf00      	nop
 8006e82:	3708      	adds	r7, #8
 8006e84:	46bd      	mov	sp, r7
 8006e86:	bd80      	pop	{r7, pc}

08006e88 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006e88:	b580      	push	{r7, lr}
 8006e8a:	b082      	sub	sp, #8
 8006e8c:	af00      	add	r7, sp, #0
 8006e8e:	6078      	str	r0, [r7, #4]
 8006e90:	460b      	mov	r3, r1
 8006e92:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8006e9a:	78fa      	ldrb	r2, [r7, #3]
 8006e9c:	4611      	mov	r1, r2
 8006e9e:	4618      	mov	r0, r3
 8006ea0:	f7fe fdcb 	bl	8005a3a <USBD_LL_IsoOUTIncomplete>
}
 8006ea4:	bf00      	nop
 8006ea6:	3708      	adds	r7, #8
 8006ea8:	46bd      	mov	sp, r7
 8006eaa:	bd80      	pop	{r7, pc}

08006eac <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006eac:	b580      	push	{r7, lr}
 8006eae:	b082      	sub	sp, #8
 8006eb0:	af00      	add	r7, sp, #0
 8006eb2:	6078      	str	r0, [r7, #4]
 8006eb4:	460b      	mov	r3, r1
 8006eb6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8006ebe:	78fa      	ldrb	r2, [r7, #3]
 8006ec0:	4611      	mov	r1, r2
 8006ec2:	4618      	mov	r0, r3
 8006ec4:	f7fe fd87 	bl	80059d6 <USBD_LL_IsoINIncomplete>
}
 8006ec8:	bf00      	nop
 8006eca:	3708      	adds	r7, #8
 8006ecc:	46bd      	mov	sp, r7
 8006ece:	bd80      	pop	{r7, pc}

08006ed0 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006ed0:	b580      	push	{r7, lr}
 8006ed2:	b082      	sub	sp, #8
 8006ed4:	af00      	add	r7, sp, #0
 8006ed6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8006ede:	4618      	mov	r0, r3
 8006ee0:	f7fe fddd 	bl	8005a9e <USBD_LL_DevConnected>
}
 8006ee4:	bf00      	nop
 8006ee6:	3708      	adds	r7, #8
 8006ee8:	46bd      	mov	sp, r7
 8006eea:	bd80      	pop	{r7, pc}

08006eec <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006eec:	b580      	push	{r7, lr}
 8006eee:	b082      	sub	sp, #8
 8006ef0:	af00      	add	r7, sp, #0
 8006ef2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8006efa:	4618      	mov	r0, r3
 8006efc:	f7fe fdda 	bl	8005ab4 <USBD_LL_DevDisconnected>
}
 8006f00:	bf00      	nop
 8006f02:	3708      	adds	r7, #8
 8006f04:	46bd      	mov	sp, r7
 8006f06:	bd80      	pop	{r7, pc}

08006f08 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8006f08:	b580      	push	{r7, lr}
 8006f0a:	b082      	sub	sp, #8
 8006f0c:	af00      	add	r7, sp, #0
 8006f0e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	781b      	ldrb	r3, [r3, #0]
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d13c      	bne.n	8006f92 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8006f18:	4a20      	ldr	r2, [pc, #128]	@ (8006f9c <USBD_LL_Init+0x94>)
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	4a1e      	ldr	r2, [pc, #120]	@ (8006f9c <USBD_LL_Init+0x94>)
 8006f24:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8006f28:	4b1c      	ldr	r3, [pc, #112]	@ (8006f9c <USBD_LL_Init+0x94>)
 8006f2a:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8006f2e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8006f30:	4b1a      	ldr	r3, [pc, #104]	@ (8006f9c <USBD_LL_Init+0x94>)
 8006f32:	2204      	movs	r2, #4
 8006f34:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8006f36:	4b19      	ldr	r3, [pc, #100]	@ (8006f9c <USBD_LL_Init+0x94>)
 8006f38:	2202      	movs	r2, #2
 8006f3a:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8006f3c:	4b17      	ldr	r3, [pc, #92]	@ (8006f9c <USBD_LL_Init+0x94>)
 8006f3e:	2200      	movs	r2, #0
 8006f40:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8006f42:	4b16      	ldr	r3, [pc, #88]	@ (8006f9c <USBD_LL_Init+0x94>)
 8006f44:	2202      	movs	r2, #2
 8006f46:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8006f48:	4b14      	ldr	r3, [pc, #80]	@ (8006f9c <USBD_LL_Init+0x94>)
 8006f4a:	2200      	movs	r2, #0
 8006f4c:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8006f4e:	4b13      	ldr	r3, [pc, #76]	@ (8006f9c <USBD_LL_Init+0x94>)
 8006f50:	2200      	movs	r2, #0
 8006f52:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8006f54:	4b11      	ldr	r3, [pc, #68]	@ (8006f9c <USBD_LL_Init+0x94>)
 8006f56:	2200      	movs	r2, #0
 8006f58:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8006f5a:	4b10      	ldr	r3, [pc, #64]	@ (8006f9c <USBD_LL_Init+0x94>)
 8006f5c:	2200      	movs	r2, #0
 8006f5e:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8006f60:	4b0e      	ldr	r3, [pc, #56]	@ (8006f9c <USBD_LL_Init+0x94>)
 8006f62:	2200      	movs	r2, #0
 8006f64:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8006f66:	480d      	ldr	r0, [pc, #52]	@ (8006f9c <USBD_LL_Init+0x94>)
 8006f68:	f7fa f842 	bl	8000ff0 <HAL_PCD_Init>
 8006f6c:	4603      	mov	r3, r0
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d001      	beq.n	8006f76 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8006f72:	f7f9 fbfb 	bl	800076c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8006f76:	2180      	movs	r1, #128	@ 0x80
 8006f78:	4808      	ldr	r0, [pc, #32]	@ (8006f9c <USBD_LL_Init+0x94>)
 8006f7a:	f7fb fa56 	bl	800242a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8006f7e:	2240      	movs	r2, #64	@ 0x40
 8006f80:	2100      	movs	r1, #0
 8006f82:	4806      	ldr	r0, [pc, #24]	@ (8006f9c <USBD_LL_Init+0x94>)
 8006f84:	f7fb fa0a 	bl	800239c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8006f88:	2280      	movs	r2, #128	@ 0x80
 8006f8a:	2101      	movs	r1, #1
 8006f8c:	4803      	ldr	r0, [pc, #12]	@ (8006f9c <USBD_LL_Init+0x94>)
 8006f8e:	f7fb fa05 	bl	800239c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8006f92:	2300      	movs	r3, #0
}
 8006f94:	4618      	mov	r0, r3
 8006f96:	3708      	adds	r7, #8
 8006f98:	46bd      	mov	sp, r7
 8006f9a:	bd80      	pop	{r7, pc}
 8006f9c:	20000b68 	.word	0x20000b68

08006fa0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8006fa0:	b580      	push	{r7, lr}
 8006fa2:	b084      	sub	sp, #16
 8006fa4:	af00      	add	r7, sp, #0
 8006fa6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006fa8:	2300      	movs	r3, #0
 8006faa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006fac:	2300      	movs	r3, #0
 8006fae:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8006fb6:	4618      	mov	r0, r3
 8006fb8:	f7fa f929 	bl	800120e <HAL_PCD_Start>
 8006fbc:	4603      	mov	r3, r0
 8006fbe:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006fc0:	7bfb      	ldrb	r3, [r7, #15]
 8006fc2:	4618      	mov	r0, r3
 8006fc4:	f000 f930 	bl	8007228 <USBD_Get_USB_Status>
 8006fc8:	4603      	mov	r3, r0
 8006fca:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006fcc:	7bbb      	ldrb	r3, [r7, #14]
}
 8006fce:	4618      	mov	r0, r3
 8006fd0:	3710      	adds	r7, #16
 8006fd2:	46bd      	mov	sp, r7
 8006fd4:	bd80      	pop	{r7, pc}

08006fd6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8006fd6:	b580      	push	{r7, lr}
 8006fd8:	b084      	sub	sp, #16
 8006fda:	af00      	add	r7, sp, #0
 8006fdc:	6078      	str	r0, [r7, #4]
 8006fde:	4608      	mov	r0, r1
 8006fe0:	4611      	mov	r1, r2
 8006fe2:	461a      	mov	r2, r3
 8006fe4:	4603      	mov	r3, r0
 8006fe6:	70fb      	strb	r3, [r7, #3]
 8006fe8:	460b      	mov	r3, r1
 8006fea:	70bb      	strb	r3, [r7, #2]
 8006fec:	4613      	mov	r3, r2
 8006fee:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006ff0:	2300      	movs	r3, #0
 8006ff2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006ff4:	2300      	movs	r3, #0
 8006ff6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8006ffe:	78bb      	ldrb	r3, [r7, #2]
 8007000:	883a      	ldrh	r2, [r7, #0]
 8007002:	78f9      	ldrb	r1, [r7, #3]
 8007004:	f7fa fdfd 	bl	8001c02 <HAL_PCD_EP_Open>
 8007008:	4603      	mov	r3, r0
 800700a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800700c:	7bfb      	ldrb	r3, [r7, #15]
 800700e:	4618      	mov	r0, r3
 8007010:	f000 f90a 	bl	8007228 <USBD_Get_USB_Status>
 8007014:	4603      	mov	r3, r0
 8007016:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007018:	7bbb      	ldrb	r3, [r7, #14]
}
 800701a:	4618      	mov	r0, r3
 800701c:	3710      	adds	r7, #16
 800701e:	46bd      	mov	sp, r7
 8007020:	bd80      	pop	{r7, pc}

08007022 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007022:	b580      	push	{r7, lr}
 8007024:	b084      	sub	sp, #16
 8007026:	af00      	add	r7, sp, #0
 8007028:	6078      	str	r0, [r7, #4]
 800702a:	460b      	mov	r3, r1
 800702c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800702e:	2300      	movs	r3, #0
 8007030:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007032:	2300      	movs	r3, #0
 8007034:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800703c:	78fa      	ldrb	r2, [r7, #3]
 800703e:	4611      	mov	r1, r2
 8007040:	4618      	mov	r0, r3
 8007042:	f7fa fe48 	bl	8001cd6 <HAL_PCD_EP_Close>
 8007046:	4603      	mov	r3, r0
 8007048:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800704a:	7bfb      	ldrb	r3, [r7, #15]
 800704c:	4618      	mov	r0, r3
 800704e:	f000 f8eb 	bl	8007228 <USBD_Get_USB_Status>
 8007052:	4603      	mov	r3, r0
 8007054:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007056:	7bbb      	ldrb	r3, [r7, #14]
}
 8007058:	4618      	mov	r0, r3
 800705a:	3710      	adds	r7, #16
 800705c:	46bd      	mov	sp, r7
 800705e:	bd80      	pop	{r7, pc}

08007060 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007060:	b580      	push	{r7, lr}
 8007062:	b084      	sub	sp, #16
 8007064:	af00      	add	r7, sp, #0
 8007066:	6078      	str	r0, [r7, #4]
 8007068:	460b      	mov	r3, r1
 800706a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800706c:	2300      	movs	r3, #0
 800706e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007070:	2300      	movs	r3, #0
 8007072:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800707a:	78fa      	ldrb	r2, [r7, #3]
 800707c:	4611      	mov	r1, r2
 800707e:	4618      	mov	r0, r3
 8007080:	f7fa fee8 	bl	8001e54 <HAL_PCD_EP_SetStall>
 8007084:	4603      	mov	r3, r0
 8007086:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007088:	7bfb      	ldrb	r3, [r7, #15]
 800708a:	4618      	mov	r0, r3
 800708c:	f000 f8cc 	bl	8007228 <USBD_Get_USB_Status>
 8007090:	4603      	mov	r3, r0
 8007092:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007094:	7bbb      	ldrb	r3, [r7, #14]
}
 8007096:	4618      	mov	r0, r3
 8007098:	3710      	adds	r7, #16
 800709a:	46bd      	mov	sp, r7
 800709c:	bd80      	pop	{r7, pc}

0800709e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800709e:	b580      	push	{r7, lr}
 80070a0:	b084      	sub	sp, #16
 80070a2:	af00      	add	r7, sp, #0
 80070a4:	6078      	str	r0, [r7, #4]
 80070a6:	460b      	mov	r3, r1
 80070a8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80070aa:	2300      	movs	r3, #0
 80070ac:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80070ae:	2300      	movs	r3, #0
 80070b0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80070b8:	78fa      	ldrb	r2, [r7, #3]
 80070ba:	4611      	mov	r1, r2
 80070bc:	4618      	mov	r0, r3
 80070be:	f7fa ff2c 	bl	8001f1a <HAL_PCD_EP_ClrStall>
 80070c2:	4603      	mov	r3, r0
 80070c4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80070c6:	7bfb      	ldrb	r3, [r7, #15]
 80070c8:	4618      	mov	r0, r3
 80070ca:	f000 f8ad 	bl	8007228 <USBD_Get_USB_Status>
 80070ce:	4603      	mov	r3, r0
 80070d0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80070d2:	7bbb      	ldrb	r3, [r7, #14]
}
 80070d4:	4618      	mov	r0, r3
 80070d6:	3710      	adds	r7, #16
 80070d8:	46bd      	mov	sp, r7
 80070da:	bd80      	pop	{r7, pc}

080070dc <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80070dc:	b480      	push	{r7}
 80070de:	b085      	sub	sp, #20
 80070e0:	af00      	add	r7, sp, #0
 80070e2:	6078      	str	r0, [r7, #4]
 80070e4:	460b      	mov	r3, r1
 80070e6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80070ee:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80070f0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	da0b      	bge.n	8007110 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80070f8:	78fb      	ldrb	r3, [r7, #3]
 80070fa:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80070fe:	68f9      	ldr	r1, [r7, #12]
 8007100:	4613      	mov	r3, r2
 8007102:	00db      	lsls	r3, r3, #3
 8007104:	4413      	add	r3, r2
 8007106:	009b      	lsls	r3, r3, #2
 8007108:	440b      	add	r3, r1
 800710a:	3316      	adds	r3, #22
 800710c:	781b      	ldrb	r3, [r3, #0]
 800710e:	e00b      	b.n	8007128 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8007110:	78fb      	ldrb	r3, [r7, #3]
 8007112:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007116:	68f9      	ldr	r1, [r7, #12]
 8007118:	4613      	mov	r3, r2
 800711a:	00db      	lsls	r3, r3, #3
 800711c:	4413      	add	r3, r2
 800711e:	009b      	lsls	r3, r3, #2
 8007120:	440b      	add	r3, r1
 8007122:	f203 2356 	addw	r3, r3, #598	@ 0x256
 8007126:	781b      	ldrb	r3, [r3, #0]
  }
}
 8007128:	4618      	mov	r0, r3
 800712a:	3714      	adds	r7, #20
 800712c:	46bd      	mov	sp, r7
 800712e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007132:	4770      	bx	lr

08007134 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8007134:	b580      	push	{r7, lr}
 8007136:	b084      	sub	sp, #16
 8007138:	af00      	add	r7, sp, #0
 800713a:	6078      	str	r0, [r7, #4]
 800713c:	460b      	mov	r3, r1
 800713e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007140:	2300      	movs	r3, #0
 8007142:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007144:	2300      	movs	r3, #0
 8007146:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800714e:	78fa      	ldrb	r2, [r7, #3]
 8007150:	4611      	mov	r1, r2
 8007152:	4618      	mov	r0, r3
 8007154:	f7fa fd31 	bl	8001bba <HAL_PCD_SetAddress>
 8007158:	4603      	mov	r3, r0
 800715a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800715c:	7bfb      	ldrb	r3, [r7, #15]
 800715e:	4618      	mov	r0, r3
 8007160:	f000 f862 	bl	8007228 <USBD_Get_USB_Status>
 8007164:	4603      	mov	r3, r0
 8007166:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007168:	7bbb      	ldrb	r3, [r7, #14]
}
 800716a:	4618      	mov	r0, r3
 800716c:	3710      	adds	r7, #16
 800716e:	46bd      	mov	sp, r7
 8007170:	bd80      	pop	{r7, pc}

08007172 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007172:	b580      	push	{r7, lr}
 8007174:	b086      	sub	sp, #24
 8007176:	af00      	add	r7, sp, #0
 8007178:	60f8      	str	r0, [r7, #12]
 800717a:	607a      	str	r2, [r7, #4]
 800717c:	603b      	str	r3, [r7, #0]
 800717e:	460b      	mov	r3, r1
 8007180:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007182:	2300      	movs	r3, #0
 8007184:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007186:	2300      	movs	r3, #0
 8007188:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8007190:	7af9      	ldrb	r1, [r7, #11]
 8007192:	683b      	ldr	r3, [r7, #0]
 8007194:	687a      	ldr	r2, [r7, #4]
 8007196:	f7fa fe23 	bl	8001de0 <HAL_PCD_EP_Transmit>
 800719a:	4603      	mov	r3, r0
 800719c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800719e:	7dfb      	ldrb	r3, [r7, #23]
 80071a0:	4618      	mov	r0, r3
 80071a2:	f000 f841 	bl	8007228 <USBD_Get_USB_Status>
 80071a6:	4603      	mov	r3, r0
 80071a8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80071aa:	7dbb      	ldrb	r3, [r7, #22]
}
 80071ac:	4618      	mov	r0, r3
 80071ae:	3718      	adds	r7, #24
 80071b0:	46bd      	mov	sp, r7
 80071b2:	bd80      	pop	{r7, pc}

080071b4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80071b4:	b580      	push	{r7, lr}
 80071b6:	b086      	sub	sp, #24
 80071b8:	af00      	add	r7, sp, #0
 80071ba:	60f8      	str	r0, [r7, #12]
 80071bc:	607a      	str	r2, [r7, #4]
 80071be:	603b      	str	r3, [r7, #0]
 80071c0:	460b      	mov	r3, r1
 80071c2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80071c4:	2300      	movs	r3, #0
 80071c6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80071c8:	2300      	movs	r3, #0
 80071ca:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80071d2:	7af9      	ldrb	r1, [r7, #11]
 80071d4:	683b      	ldr	r3, [r7, #0]
 80071d6:	687a      	ldr	r2, [r7, #4]
 80071d8:	f7fa fdc7 	bl	8001d6a <HAL_PCD_EP_Receive>
 80071dc:	4603      	mov	r3, r0
 80071de:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80071e0:	7dfb      	ldrb	r3, [r7, #23]
 80071e2:	4618      	mov	r0, r3
 80071e4:	f000 f820 	bl	8007228 <USBD_Get_USB_Status>
 80071e8:	4603      	mov	r3, r0
 80071ea:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80071ec:	7dbb      	ldrb	r3, [r7, #22]
}
 80071ee:	4618      	mov	r0, r3
 80071f0:	3718      	adds	r7, #24
 80071f2:	46bd      	mov	sp, r7
 80071f4:	bd80      	pop	{r7, pc}
	...

080071f8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80071f8:	b480      	push	{r7}
 80071fa:	b083      	sub	sp, #12
 80071fc:	af00      	add	r7, sp, #0
 80071fe:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CUSTOM_HID_HandleTypeDef)/4+1)];/* On 32-bit boundary */
  return mem;
 8007200:	4b03      	ldr	r3, [pc, #12]	@ (8007210 <USBD_static_malloc+0x18>)
}
 8007202:	4618      	mov	r0, r3
 8007204:	370c      	adds	r7, #12
 8007206:	46bd      	mov	sp, r7
 8007208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800720c:	4770      	bx	lr
 800720e:	bf00      	nop
 8007210:	2000104c 	.word	0x2000104c

08007214 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8007214:	b480      	push	{r7}
 8007216:	b083      	sub	sp, #12
 8007218:	af00      	add	r7, sp, #0
 800721a:	6078      	str	r0, [r7, #4]

}
 800721c:	bf00      	nop
 800721e:	370c      	adds	r7, #12
 8007220:	46bd      	mov	sp, r7
 8007222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007226:	4770      	bx	lr

08007228 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007228:	b480      	push	{r7}
 800722a:	b085      	sub	sp, #20
 800722c:	af00      	add	r7, sp, #0
 800722e:	4603      	mov	r3, r0
 8007230:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007232:	2300      	movs	r3, #0
 8007234:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8007236:	79fb      	ldrb	r3, [r7, #7]
 8007238:	2b03      	cmp	r3, #3
 800723a:	d817      	bhi.n	800726c <USBD_Get_USB_Status+0x44>
 800723c:	a201      	add	r2, pc, #4	@ (adr r2, 8007244 <USBD_Get_USB_Status+0x1c>)
 800723e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007242:	bf00      	nop
 8007244:	08007255 	.word	0x08007255
 8007248:	0800725b 	.word	0x0800725b
 800724c:	08007261 	.word	0x08007261
 8007250:	08007267 	.word	0x08007267
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8007254:	2300      	movs	r3, #0
 8007256:	73fb      	strb	r3, [r7, #15]
    break;
 8007258:	e00b      	b.n	8007272 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800725a:	2303      	movs	r3, #3
 800725c:	73fb      	strb	r3, [r7, #15]
    break;
 800725e:	e008      	b.n	8007272 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007260:	2301      	movs	r3, #1
 8007262:	73fb      	strb	r3, [r7, #15]
    break;
 8007264:	e005      	b.n	8007272 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007266:	2303      	movs	r3, #3
 8007268:	73fb      	strb	r3, [r7, #15]
    break;
 800726a:	e002      	b.n	8007272 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800726c:	2303      	movs	r3, #3
 800726e:	73fb      	strb	r3, [r7, #15]
    break;
 8007270:	bf00      	nop
  }
  return usb_status;
 8007272:	7bfb      	ldrb	r3, [r7, #15]
}
 8007274:	4618      	mov	r0, r3
 8007276:	3714      	adds	r7, #20
 8007278:	46bd      	mov	sp, r7
 800727a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800727e:	4770      	bx	lr

08007280 <memset>:
 8007280:	4402      	add	r2, r0
 8007282:	4603      	mov	r3, r0
 8007284:	4293      	cmp	r3, r2
 8007286:	d100      	bne.n	800728a <memset+0xa>
 8007288:	4770      	bx	lr
 800728a:	f803 1b01 	strb.w	r1, [r3], #1
 800728e:	e7f9      	b.n	8007284 <memset+0x4>

08007290 <__libc_init_array>:
 8007290:	b570      	push	{r4, r5, r6, lr}
 8007292:	4d0d      	ldr	r5, [pc, #52]	@ (80072c8 <__libc_init_array+0x38>)
 8007294:	4c0d      	ldr	r4, [pc, #52]	@ (80072cc <__libc_init_array+0x3c>)
 8007296:	1b64      	subs	r4, r4, r5
 8007298:	10a4      	asrs	r4, r4, #2
 800729a:	2600      	movs	r6, #0
 800729c:	42a6      	cmp	r6, r4
 800729e:	d109      	bne.n	80072b4 <__libc_init_array+0x24>
 80072a0:	4d0b      	ldr	r5, [pc, #44]	@ (80072d0 <__libc_init_array+0x40>)
 80072a2:	4c0c      	ldr	r4, [pc, #48]	@ (80072d4 <__libc_init_array+0x44>)
 80072a4:	f000 f818 	bl	80072d8 <_init>
 80072a8:	1b64      	subs	r4, r4, r5
 80072aa:	10a4      	asrs	r4, r4, #2
 80072ac:	2600      	movs	r6, #0
 80072ae:	42a6      	cmp	r6, r4
 80072b0:	d105      	bne.n	80072be <__libc_init_array+0x2e>
 80072b2:	bd70      	pop	{r4, r5, r6, pc}
 80072b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80072b8:	4798      	blx	r3
 80072ba:	3601      	adds	r6, #1
 80072bc:	e7ee      	b.n	800729c <__libc_init_array+0xc>
 80072be:	f855 3b04 	ldr.w	r3, [r5], #4
 80072c2:	4798      	blx	r3
 80072c4:	3601      	adds	r6, #1
 80072c6:	e7f2      	b.n	80072ae <__libc_init_array+0x1e>
 80072c8:	08007368 	.word	0x08007368
 80072cc:	08007368 	.word	0x08007368
 80072d0:	08007368 	.word	0x08007368
 80072d4:	0800736c 	.word	0x0800736c

080072d8 <_init>:
 80072d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80072da:	bf00      	nop
 80072dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80072de:	bc08      	pop	{r3}
 80072e0:	469e      	mov	lr, r3
 80072e2:	4770      	bx	lr

080072e4 <_fini>:
 80072e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80072e6:	bf00      	nop
 80072e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80072ea:	bc08      	pop	{r3}
 80072ec:	469e      	mov	lr, r3
 80072ee:	4770      	bx	lr
