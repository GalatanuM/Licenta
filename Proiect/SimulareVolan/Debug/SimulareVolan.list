
SimulareVolan.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000070d4  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  0800725c  0800725c  0000825c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080072cc  080072cc  0000913c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080072cc  080072cc  000082cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080072d4  080072d4  0000913c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080072d4  080072d4  000082d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080072d8  080072d8  000082d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000013c  20000000  080072dc  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000913c  2**0
                  CONTENTS
 10 .bss          00000a58  2000013c  2000013c  0000913c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000b94  20000b94  0000913c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000913c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000124bb  00000000  00000000  0000916c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002fb0  00000000  00000000  0001b627  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001088  00000000  00000000  0001e5d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000c91  00000000  00000000  0001f660  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000217b9  00000000  00000000  000202f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000148a8  00000000  00000000  00041aaa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c1c19  00000000  00000000  00056352  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00117f6b  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000044c0  00000000  00000000  00117fb0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006c  00000000  00000000  0011c470  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000013c 	.word	0x2000013c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08007244 	.word	0x08007244

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000140 	.word	0x20000140
 80001c4:	08007244 	.word	0x08007244

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b988 	b.w	80004f0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	468e      	mov	lr, r1
 8000200:	4604      	mov	r4, r0
 8000202:	4688      	mov	r8, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d962      	bls.n	80002d4 <__udivmoddi4+0xdc>
 800020e:	fab2 f682 	clz	r6, r2
 8000212:	b14e      	cbz	r6, 8000228 <__udivmoddi4+0x30>
 8000214:	f1c6 0320 	rsb	r3, r6, #32
 8000218:	fa01 f806 	lsl.w	r8, r1, r6
 800021c:	fa20 f303 	lsr.w	r3, r0, r3
 8000220:	40b7      	lsls	r7, r6
 8000222:	ea43 0808 	orr.w	r8, r3, r8
 8000226:	40b4      	lsls	r4, r6
 8000228:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800022c:	fa1f fc87 	uxth.w	ip, r7
 8000230:	fbb8 f1fe 	udiv	r1, r8, lr
 8000234:	0c23      	lsrs	r3, r4, #16
 8000236:	fb0e 8811 	mls	r8, lr, r1, r8
 800023a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023e:	fb01 f20c 	mul.w	r2, r1, ip
 8000242:	429a      	cmp	r2, r3
 8000244:	d909      	bls.n	800025a <__udivmoddi4+0x62>
 8000246:	18fb      	adds	r3, r7, r3
 8000248:	f101 30ff 	add.w	r0, r1, #4294967295
 800024c:	f080 80ea 	bcs.w	8000424 <__udivmoddi4+0x22c>
 8000250:	429a      	cmp	r2, r3
 8000252:	f240 80e7 	bls.w	8000424 <__udivmoddi4+0x22c>
 8000256:	3902      	subs	r1, #2
 8000258:	443b      	add	r3, r7
 800025a:	1a9a      	subs	r2, r3, r2
 800025c:	b2a3      	uxth	r3, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800026a:	fb00 fc0c 	mul.w	ip, r0, ip
 800026e:	459c      	cmp	ip, r3
 8000270:	d909      	bls.n	8000286 <__udivmoddi4+0x8e>
 8000272:	18fb      	adds	r3, r7, r3
 8000274:	f100 32ff 	add.w	r2, r0, #4294967295
 8000278:	f080 80d6 	bcs.w	8000428 <__udivmoddi4+0x230>
 800027c:	459c      	cmp	ip, r3
 800027e:	f240 80d3 	bls.w	8000428 <__udivmoddi4+0x230>
 8000282:	443b      	add	r3, r7
 8000284:	3802      	subs	r0, #2
 8000286:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028a:	eba3 030c 	sub.w	r3, r3, ip
 800028e:	2100      	movs	r1, #0
 8000290:	b11d      	cbz	r5, 800029a <__udivmoddi4+0xa2>
 8000292:	40f3      	lsrs	r3, r6
 8000294:	2200      	movs	r2, #0
 8000296:	e9c5 3200 	strd	r3, r2, [r5]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d905      	bls.n	80002ae <__udivmoddi4+0xb6>
 80002a2:	b10d      	cbz	r5, 80002a8 <__udivmoddi4+0xb0>
 80002a4:	e9c5 0100 	strd	r0, r1, [r5]
 80002a8:	2100      	movs	r1, #0
 80002aa:	4608      	mov	r0, r1
 80002ac:	e7f5      	b.n	800029a <__udivmoddi4+0xa2>
 80002ae:	fab3 f183 	clz	r1, r3
 80002b2:	2900      	cmp	r1, #0
 80002b4:	d146      	bne.n	8000344 <__udivmoddi4+0x14c>
 80002b6:	4573      	cmp	r3, lr
 80002b8:	d302      	bcc.n	80002c0 <__udivmoddi4+0xc8>
 80002ba:	4282      	cmp	r2, r0
 80002bc:	f200 8105 	bhi.w	80004ca <__udivmoddi4+0x2d2>
 80002c0:	1a84      	subs	r4, r0, r2
 80002c2:	eb6e 0203 	sbc.w	r2, lr, r3
 80002c6:	2001      	movs	r0, #1
 80002c8:	4690      	mov	r8, r2
 80002ca:	2d00      	cmp	r5, #0
 80002cc:	d0e5      	beq.n	800029a <__udivmoddi4+0xa2>
 80002ce:	e9c5 4800 	strd	r4, r8, [r5]
 80002d2:	e7e2      	b.n	800029a <__udivmoddi4+0xa2>
 80002d4:	2a00      	cmp	r2, #0
 80002d6:	f000 8090 	beq.w	80003fa <__udivmoddi4+0x202>
 80002da:	fab2 f682 	clz	r6, r2
 80002de:	2e00      	cmp	r6, #0
 80002e0:	f040 80a4 	bne.w	800042c <__udivmoddi4+0x234>
 80002e4:	1a8a      	subs	r2, r1, r2
 80002e6:	0c03      	lsrs	r3, r0, #16
 80002e8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002ec:	b280      	uxth	r0, r0
 80002ee:	b2bc      	uxth	r4, r7
 80002f0:	2101      	movs	r1, #1
 80002f2:	fbb2 fcfe 	udiv	ip, r2, lr
 80002f6:	fb0e 221c 	mls	r2, lr, ip, r2
 80002fa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002fe:	fb04 f20c 	mul.w	r2, r4, ip
 8000302:	429a      	cmp	r2, r3
 8000304:	d907      	bls.n	8000316 <__udivmoddi4+0x11e>
 8000306:	18fb      	adds	r3, r7, r3
 8000308:	f10c 38ff 	add.w	r8, ip, #4294967295
 800030c:	d202      	bcs.n	8000314 <__udivmoddi4+0x11c>
 800030e:	429a      	cmp	r2, r3
 8000310:	f200 80e0 	bhi.w	80004d4 <__udivmoddi4+0x2dc>
 8000314:	46c4      	mov	ip, r8
 8000316:	1a9b      	subs	r3, r3, r2
 8000318:	fbb3 f2fe 	udiv	r2, r3, lr
 800031c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000320:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000324:	fb02 f404 	mul.w	r4, r2, r4
 8000328:	429c      	cmp	r4, r3
 800032a:	d907      	bls.n	800033c <__udivmoddi4+0x144>
 800032c:	18fb      	adds	r3, r7, r3
 800032e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x142>
 8000334:	429c      	cmp	r4, r3
 8000336:	f200 80ca 	bhi.w	80004ce <__udivmoddi4+0x2d6>
 800033a:	4602      	mov	r2, r0
 800033c:	1b1b      	subs	r3, r3, r4
 800033e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000342:	e7a5      	b.n	8000290 <__udivmoddi4+0x98>
 8000344:	f1c1 0620 	rsb	r6, r1, #32
 8000348:	408b      	lsls	r3, r1
 800034a:	fa22 f706 	lsr.w	r7, r2, r6
 800034e:	431f      	orrs	r7, r3
 8000350:	fa0e f401 	lsl.w	r4, lr, r1
 8000354:	fa20 f306 	lsr.w	r3, r0, r6
 8000358:	fa2e fe06 	lsr.w	lr, lr, r6
 800035c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000360:	4323      	orrs	r3, r4
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	fa1f fc87 	uxth.w	ip, r7
 800036a:	fbbe f0f9 	udiv	r0, lr, r9
 800036e:	0c1c      	lsrs	r4, r3, #16
 8000370:	fb09 ee10 	mls	lr, r9, r0, lr
 8000374:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000378:	fb00 fe0c 	mul.w	lr, r0, ip
 800037c:	45a6      	cmp	lr, r4
 800037e:	fa02 f201 	lsl.w	r2, r2, r1
 8000382:	d909      	bls.n	8000398 <__udivmoddi4+0x1a0>
 8000384:	193c      	adds	r4, r7, r4
 8000386:	f100 3aff 	add.w	sl, r0, #4294967295
 800038a:	f080 809c 	bcs.w	80004c6 <__udivmoddi4+0x2ce>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f240 8099 	bls.w	80004c6 <__udivmoddi4+0x2ce>
 8000394:	3802      	subs	r0, #2
 8000396:	443c      	add	r4, r7
 8000398:	eba4 040e 	sub.w	r4, r4, lr
 800039c:	fa1f fe83 	uxth.w	lr, r3
 80003a0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003a4:	fb09 4413 	mls	r4, r9, r3, r4
 80003a8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003ac:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b0:	45a4      	cmp	ip, r4
 80003b2:	d908      	bls.n	80003c6 <__udivmoddi4+0x1ce>
 80003b4:	193c      	adds	r4, r7, r4
 80003b6:	f103 3eff 	add.w	lr, r3, #4294967295
 80003ba:	f080 8082 	bcs.w	80004c2 <__udivmoddi4+0x2ca>
 80003be:	45a4      	cmp	ip, r4
 80003c0:	d97f      	bls.n	80004c2 <__udivmoddi4+0x2ca>
 80003c2:	3b02      	subs	r3, #2
 80003c4:	443c      	add	r4, r7
 80003c6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003ca:	eba4 040c 	sub.w	r4, r4, ip
 80003ce:	fba0 ec02 	umull	lr, ip, r0, r2
 80003d2:	4564      	cmp	r4, ip
 80003d4:	4673      	mov	r3, lr
 80003d6:	46e1      	mov	r9, ip
 80003d8:	d362      	bcc.n	80004a0 <__udivmoddi4+0x2a8>
 80003da:	d05f      	beq.n	800049c <__udivmoddi4+0x2a4>
 80003dc:	b15d      	cbz	r5, 80003f6 <__udivmoddi4+0x1fe>
 80003de:	ebb8 0203 	subs.w	r2, r8, r3
 80003e2:	eb64 0409 	sbc.w	r4, r4, r9
 80003e6:	fa04 f606 	lsl.w	r6, r4, r6
 80003ea:	fa22 f301 	lsr.w	r3, r2, r1
 80003ee:	431e      	orrs	r6, r3
 80003f0:	40cc      	lsrs	r4, r1
 80003f2:	e9c5 6400 	strd	r6, r4, [r5]
 80003f6:	2100      	movs	r1, #0
 80003f8:	e74f      	b.n	800029a <__udivmoddi4+0xa2>
 80003fa:	fbb1 fcf2 	udiv	ip, r1, r2
 80003fe:	0c01      	lsrs	r1, r0, #16
 8000400:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000404:	b280      	uxth	r0, r0
 8000406:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800040a:	463b      	mov	r3, r7
 800040c:	4638      	mov	r0, r7
 800040e:	463c      	mov	r4, r7
 8000410:	46b8      	mov	r8, r7
 8000412:	46be      	mov	lr, r7
 8000414:	2620      	movs	r6, #32
 8000416:	fbb1 f1f7 	udiv	r1, r1, r7
 800041a:	eba2 0208 	sub.w	r2, r2, r8
 800041e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000422:	e766      	b.n	80002f2 <__udivmoddi4+0xfa>
 8000424:	4601      	mov	r1, r0
 8000426:	e718      	b.n	800025a <__udivmoddi4+0x62>
 8000428:	4610      	mov	r0, r2
 800042a:	e72c      	b.n	8000286 <__udivmoddi4+0x8e>
 800042c:	f1c6 0220 	rsb	r2, r6, #32
 8000430:	fa2e f302 	lsr.w	r3, lr, r2
 8000434:	40b7      	lsls	r7, r6
 8000436:	40b1      	lsls	r1, r6
 8000438:	fa20 f202 	lsr.w	r2, r0, r2
 800043c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000440:	430a      	orrs	r2, r1
 8000442:	fbb3 f8fe 	udiv	r8, r3, lr
 8000446:	b2bc      	uxth	r4, r7
 8000448:	fb0e 3318 	mls	r3, lr, r8, r3
 800044c:	0c11      	lsrs	r1, r2, #16
 800044e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000452:	fb08 f904 	mul.w	r9, r8, r4
 8000456:	40b0      	lsls	r0, r6
 8000458:	4589      	cmp	r9, r1
 800045a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800045e:	b280      	uxth	r0, r0
 8000460:	d93e      	bls.n	80004e0 <__udivmoddi4+0x2e8>
 8000462:	1879      	adds	r1, r7, r1
 8000464:	f108 3cff 	add.w	ip, r8, #4294967295
 8000468:	d201      	bcs.n	800046e <__udivmoddi4+0x276>
 800046a:	4589      	cmp	r9, r1
 800046c:	d81f      	bhi.n	80004ae <__udivmoddi4+0x2b6>
 800046e:	eba1 0109 	sub.w	r1, r1, r9
 8000472:	fbb1 f9fe 	udiv	r9, r1, lr
 8000476:	fb09 f804 	mul.w	r8, r9, r4
 800047a:	fb0e 1119 	mls	r1, lr, r9, r1
 800047e:	b292      	uxth	r2, r2
 8000480:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000484:	4542      	cmp	r2, r8
 8000486:	d229      	bcs.n	80004dc <__udivmoddi4+0x2e4>
 8000488:	18ba      	adds	r2, r7, r2
 800048a:	f109 31ff 	add.w	r1, r9, #4294967295
 800048e:	d2c4      	bcs.n	800041a <__udivmoddi4+0x222>
 8000490:	4542      	cmp	r2, r8
 8000492:	d2c2      	bcs.n	800041a <__udivmoddi4+0x222>
 8000494:	f1a9 0102 	sub.w	r1, r9, #2
 8000498:	443a      	add	r2, r7
 800049a:	e7be      	b.n	800041a <__udivmoddi4+0x222>
 800049c:	45f0      	cmp	r8, lr
 800049e:	d29d      	bcs.n	80003dc <__udivmoddi4+0x1e4>
 80004a0:	ebbe 0302 	subs.w	r3, lr, r2
 80004a4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004a8:	3801      	subs	r0, #1
 80004aa:	46e1      	mov	r9, ip
 80004ac:	e796      	b.n	80003dc <__udivmoddi4+0x1e4>
 80004ae:	eba7 0909 	sub.w	r9, r7, r9
 80004b2:	4449      	add	r1, r9
 80004b4:	f1a8 0c02 	sub.w	ip, r8, #2
 80004b8:	fbb1 f9fe 	udiv	r9, r1, lr
 80004bc:	fb09 f804 	mul.w	r8, r9, r4
 80004c0:	e7db      	b.n	800047a <__udivmoddi4+0x282>
 80004c2:	4673      	mov	r3, lr
 80004c4:	e77f      	b.n	80003c6 <__udivmoddi4+0x1ce>
 80004c6:	4650      	mov	r0, sl
 80004c8:	e766      	b.n	8000398 <__udivmoddi4+0x1a0>
 80004ca:	4608      	mov	r0, r1
 80004cc:	e6fd      	b.n	80002ca <__udivmoddi4+0xd2>
 80004ce:	443b      	add	r3, r7
 80004d0:	3a02      	subs	r2, #2
 80004d2:	e733      	b.n	800033c <__udivmoddi4+0x144>
 80004d4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d8:	443b      	add	r3, r7
 80004da:	e71c      	b.n	8000316 <__udivmoddi4+0x11e>
 80004dc:	4649      	mov	r1, r9
 80004de:	e79c      	b.n	800041a <__udivmoddi4+0x222>
 80004e0:	eba1 0109 	sub.w	r1, r1, r9
 80004e4:	46c4      	mov	ip, r8
 80004e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004ea:	fb09 f804 	mul.w	r8, r9, r4
 80004ee:	e7c4      	b.n	800047a <__udivmoddi4+0x282>

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <HAL_TIM_IC_CaptureCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80004f4:	b480      	push	{r7}
 80004f6:	b083      	sub	sp, #12
 80004f8:	af00      	add	r7, sp, #0
 80004fa:	6078      	str	r0, [r7, #4]
	reportContainer.steering = __HAL_TIM_GET_COUNTER(htim);
 80004fc:	687b      	ldr	r3, [r7, #4]
 80004fe:	681b      	ldr	r3, [r3, #0]
 8000500:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000502:	b21a      	sxth	r2, r3
 8000504:	4b0c      	ldr	r3, [pc, #48]	@ (8000538 <HAL_TIM_IC_CaptureCallback+0x44>)
 8000506:	805a      	strh	r2, [r3, #2]
	reportContainer.throttle = __HAL_TIM_GET_COUNTER(htim);
 8000508:	687b      	ldr	r3, [r7, #4]
 800050a:	681b      	ldr	r3, [r3, #0]
 800050c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800050e:	b29a      	uxth	r2, r3
 8000510:	4b09      	ldr	r3, [pc, #36]	@ (8000538 <HAL_TIM_IC_CaptureCallback+0x44>)
 8000512:	809a      	strh	r2, [r3, #4]
	reportContainer.brake = __HAL_TIM_GET_COUNTER(htim);
 8000514:	687b      	ldr	r3, [r7, #4]
 8000516:	681b      	ldr	r3, [r3, #0]
 8000518:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800051a:	b29a      	uxth	r2, r3
 800051c:	4b06      	ldr	r3, [pc, #24]	@ (8000538 <HAL_TIM_IC_CaptureCallback+0x44>)
 800051e:	80da      	strh	r2, [r3, #6]
	reportContainer.clutch = __HAL_TIM_GET_COUNTER(htim);
 8000520:	687b      	ldr	r3, [r7, #4]
 8000522:	681b      	ldr	r3, [r3, #0]
 8000524:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000526:	b29a      	uxth	r2, r3
 8000528:	4b03      	ldr	r3, [pc, #12]	@ (8000538 <HAL_TIM_IC_CaptureCallback+0x44>)
 800052a:	811a      	strh	r2, [r3, #8]
}
 800052c:	bf00      	nop
 800052e:	370c      	adds	r7, #12
 8000530:	46bd      	mov	sp, r7
 8000532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000536:	4770      	bx	lr
 8000538:	200001a0 	.word	0x200001a0

0800053c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000540:	f000 fa14 	bl	800096c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000544:	f000 f820 	bl	8000588 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000548:	f000 f8dc 	bl	8000704 <MX_GPIO_Init>
  MX_TIM3_Init();
 800054c:	f000 f886 	bl	800065c <MX_TIM3_Init>
  MX_USB_DEVICE_Init();
 8000550:	f006 f9e2 	bl	8006918 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Encoder_Start_IT(&htim3, TIM_CHANNEL_ALL);
 8000554:	213c      	movs	r1, #60	@ 0x3c
 8000556:	4809      	ldr	r0, [pc, #36]	@ (800057c <main+0x40>)
 8000558:	f002 fc9c 	bl	8002e94 <HAL_TIM_Encoder_Start_IT>
  reportContainer.buttons = 0x55;
 800055c:	4b08      	ldr	r3, [pc, #32]	@ (8000580 <main+0x44>)
 800055e:	2255      	movs	r2, #85	@ 0x55
 8000560:	701a      	strb	r2, [r3, #0]
  reportContainer.padding = 0;
 8000562:	4b07      	ldr	r3, [pc, #28]	@ (8000580 <main+0x44>)
 8000564:	2200      	movs	r2, #0
 8000566:	705a      	strb	r2, [r3, #1]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, (uint8_t *)&reportContainer, 10);
 8000568:	220a      	movs	r2, #10
 800056a:	4905      	ldr	r1, [pc, #20]	@ (8000580 <main+0x44>)
 800056c:	4805      	ldr	r0, [pc, #20]	@ (8000584 <main+0x48>)
 800056e:	f004 fd49 	bl	8005004 <USBD_CUSTOM_HID_SendReport>
	  HAL_Delay(10);
 8000572:	200a      	movs	r0, #10
 8000574:	f000 fa6c 	bl	8000a50 <HAL_Delay>
  {
 8000578:	bf00      	nop
 800057a:	e7f5      	b.n	8000568 <main+0x2c>
 800057c:	20000158 	.word	0x20000158
 8000580:	200001a0 	.word	0x200001a0
 8000584:	200001b4 	.word	0x200001b4

08000588 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	b094      	sub	sp, #80	@ 0x50
 800058c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800058e:	f107 0320 	add.w	r3, r7, #32
 8000592:	2230      	movs	r2, #48	@ 0x30
 8000594:	2100      	movs	r1, #0
 8000596:	4618      	mov	r0, r3
 8000598:	f006 fe28 	bl	80071ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800059c:	f107 030c 	add.w	r3, r7, #12
 80005a0:	2200      	movs	r2, #0
 80005a2:	601a      	str	r2, [r3, #0]
 80005a4:	605a      	str	r2, [r3, #4]
 80005a6:	609a      	str	r2, [r3, #8]
 80005a8:	60da      	str	r2, [r3, #12]
 80005aa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005ac:	2300      	movs	r3, #0
 80005ae:	60bb      	str	r3, [r7, #8]
 80005b0:	4b28      	ldr	r3, [pc, #160]	@ (8000654 <SystemClock_Config+0xcc>)
 80005b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005b4:	4a27      	ldr	r2, [pc, #156]	@ (8000654 <SystemClock_Config+0xcc>)
 80005b6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80005ba:	6413      	str	r3, [r2, #64]	@ 0x40
 80005bc:	4b25      	ldr	r3, [pc, #148]	@ (8000654 <SystemClock_Config+0xcc>)
 80005be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005c0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80005c4:	60bb      	str	r3, [r7, #8]
 80005c6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005c8:	2300      	movs	r3, #0
 80005ca:	607b      	str	r3, [r7, #4]
 80005cc:	4b22      	ldr	r3, [pc, #136]	@ (8000658 <SystemClock_Config+0xd0>)
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	4a21      	ldr	r2, [pc, #132]	@ (8000658 <SystemClock_Config+0xd0>)
 80005d2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80005d6:	6013      	str	r3, [r2, #0]
 80005d8:	4b1f      	ldr	r3, [pc, #124]	@ (8000658 <SystemClock_Config+0xd0>)
 80005da:	681b      	ldr	r3, [r3, #0]
 80005dc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80005e0:	607b      	str	r3, [r7, #4]
 80005e2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005e4:	2301      	movs	r3, #1
 80005e6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005e8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80005ec:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005ee:	2302      	movs	r3, #2
 80005f0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005f2:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80005f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80005f8:	2304      	movs	r3, #4
 80005fa:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80005fc:	23a8      	movs	r3, #168	@ 0xa8
 80005fe:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000600:	2302      	movs	r3, #2
 8000602:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000604:	2307      	movs	r3, #7
 8000606:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000608:	f107 0320 	add.w	r3, r7, #32
 800060c:	4618      	mov	r0, r3
 800060e:	f001 ff2b 	bl	8002468 <HAL_RCC_OscConfig>
 8000612:	4603      	mov	r3, r0
 8000614:	2b00      	cmp	r3, #0
 8000616:	d001      	beq.n	800061c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000618:	f000 f8aa 	bl	8000770 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800061c:	230f      	movs	r3, #15
 800061e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000620:	2302      	movs	r3, #2
 8000622:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000624:	2300      	movs	r3, #0
 8000626:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000628:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800062c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800062e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000632:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000634:	f107 030c 	add.w	r3, r7, #12
 8000638:	2105      	movs	r1, #5
 800063a:	4618      	mov	r0, r3
 800063c:	f002 f98c 	bl	8002958 <HAL_RCC_ClockConfig>
 8000640:	4603      	mov	r3, r0
 8000642:	2b00      	cmp	r3, #0
 8000644:	d001      	beq.n	800064a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000646:	f000 f893 	bl	8000770 <Error_Handler>
  }
}
 800064a:	bf00      	nop
 800064c:	3750      	adds	r7, #80	@ 0x50
 800064e:	46bd      	mov	sp, r7
 8000650:	bd80      	pop	{r7, pc}
 8000652:	bf00      	nop
 8000654:	40023800 	.word	0x40023800
 8000658:	40007000 	.word	0x40007000

0800065c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	b08c      	sub	sp, #48	@ 0x30
 8000660:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000662:	f107 030c 	add.w	r3, r7, #12
 8000666:	2224      	movs	r2, #36	@ 0x24
 8000668:	2100      	movs	r1, #0
 800066a:	4618      	mov	r0, r3
 800066c:	f006 fdbe 	bl	80071ec <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000670:	1d3b      	adds	r3, r7, #4
 8000672:	2200      	movs	r2, #0
 8000674:	601a      	str	r2, [r3, #0]
 8000676:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000678:	4b20      	ldr	r3, [pc, #128]	@ (80006fc <MX_TIM3_Init+0xa0>)
 800067a:	4a21      	ldr	r2, [pc, #132]	@ (8000700 <MX_TIM3_Init+0xa4>)
 800067c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800067e:	4b1f      	ldr	r3, [pc, #124]	@ (80006fc <MX_TIM3_Init+0xa0>)
 8000680:	2200      	movs	r2, #0
 8000682:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000684:	4b1d      	ldr	r3, [pc, #116]	@ (80006fc <MX_TIM3_Init+0xa0>)
 8000686:	2200      	movs	r2, #0
 8000688:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800068a:	4b1c      	ldr	r3, [pc, #112]	@ (80006fc <MX_TIM3_Init+0xa0>)
 800068c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000690:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000692:	4b1a      	ldr	r3, [pc, #104]	@ (80006fc <MX_TIM3_Init+0xa0>)
 8000694:	2200      	movs	r2, #0
 8000696:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000698:	4b18      	ldr	r3, [pc, #96]	@ (80006fc <MX_TIM3_Init+0xa0>)
 800069a:	2200      	movs	r2, #0
 800069c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800069e:	2303      	movs	r3, #3
 80006a0:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 80006a2:	2302      	movs	r3, #2
 80006a4:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80006a6:	2301      	movs	r3, #1
 80006a8:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80006aa:	2300      	movs	r3, #0
 80006ac:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80006ae:	2300      	movs	r3, #0
 80006b0:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 80006b2:	2302      	movs	r3, #2
 80006b4:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80006b6:	2301      	movs	r3, #1
 80006b8:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80006ba:	2300      	movs	r3, #0
 80006bc:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 80006be:	2300      	movs	r3, #0
 80006c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80006c2:	f107 030c 	add.w	r3, r7, #12
 80006c6:	4619      	mov	r1, r3
 80006c8:	480c      	ldr	r0, [pc, #48]	@ (80006fc <MX_TIM3_Init+0xa0>)
 80006ca:	f002 fb3d 	bl	8002d48 <HAL_TIM_Encoder_Init>
 80006ce:	4603      	mov	r3, r0
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d001      	beq.n	80006d8 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 80006d4:	f000 f84c 	bl	8000770 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80006d8:	2300      	movs	r3, #0
 80006da:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006dc:	2300      	movs	r3, #0
 80006de:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80006e0:	1d3b      	adds	r3, r7, #4
 80006e2:	4619      	mov	r1, r3
 80006e4:	4805      	ldr	r0, [pc, #20]	@ (80006fc <MX_TIM3_Init+0xa0>)
 80006e6:	f002 fe6d 	bl	80033c4 <HAL_TIMEx_MasterConfigSynchronization>
 80006ea:	4603      	mov	r3, r0
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d001      	beq.n	80006f4 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 80006f0:	f000 f83e 	bl	8000770 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80006f4:	bf00      	nop
 80006f6:	3730      	adds	r7, #48	@ 0x30
 80006f8:	46bd      	mov	sp, r7
 80006fa:	bd80      	pop	{r7, pc}
 80006fc:	20000158 	.word	0x20000158
 8000700:	40000400 	.word	0x40000400

08000704 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000704:	b480      	push	{r7}
 8000706:	b085      	sub	sp, #20
 8000708:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800070a:	2300      	movs	r3, #0
 800070c:	60fb      	str	r3, [r7, #12]
 800070e:	4b17      	ldr	r3, [pc, #92]	@ (800076c <MX_GPIO_Init+0x68>)
 8000710:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000712:	4a16      	ldr	r2, [pc, #88]	@ (800076c <MX_GPIO_Init+0x68>)
 8000714:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000718:	6313      	str	r3, [r2, #48]	@ 0x30
 800071a:	4b14      	ldr	r3, [pc, #80]	@ (800076c <MX_GPIO_Init+0x68>)
 800071c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800071e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000722:	60fb      	str	r3, [r7, #12]
 8000724:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000726:	2300      	movs	r3, #0
 8000728:	60bb      	str	r3, [r7, #8]
 800072a:	4b10      	ldr	r3, [pc, #64]	@ (800076c <MX_GPIO_Init+0x68>)
 800072c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800072e:	4a0f      	ldr	r2, [pc, #60]	@ (800076c <MX_GPIO_Init+0x68>)
 8000730:	f043 0301 	orr.w	r3, r3, #1
 8000734:	6313      	str	r3, [r2, #48]	@ 0x30
 8000736:	4b0d      	ldr	r3, [pc, #52]	@ (800076c <MX_GPIO_Init+0x68>)
 8000738:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800073a:	f003 0301 	and.w	r3, r3, #1
 800073e:	60bb      	str	r3, [r7, #8]
 8000740:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000742:	2300      	movs	r3, #0
 8000744:	607b      	str	r3, [r7, #4]
 8000746:	4b09      	ldr	r3, [pc, #36]	@ (800076c <MX_GPIO_Init+0x68>)
 8000748:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800074a:	4a08      	ldr	r2, [pc, #32]	@ (800076c <MX_GPIO_Init+0x68>)
 800074c:	f043 0302 	orr.w	r3, r3, #2
 8000750:	6313      	str	r3, [r2, #48]	@ 0x30
 8000752:	4b06      	ldr	r3, [pc, #24]	@ (800076c <MX_GPIO_Init+0x68>)
 8000754:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000756:	f003 0302 	and.w	r3, r3, #2
 800075a:	607b      	str	r3, [r7, #4]
 800075c:	687b      	ldr	r3, [r7, #4]

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800075e:	bf00      	nop
 8000760:	3714      	adds	r7, #20
 8000762:	46bd      	mov	sp, r7
 8000764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000768:	4770      	bx	lr
 800076a:	bf00      	nop
 800076c:	40023800 	.word	0x40023800

08000770 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000770:	b480      	push	{r7}
 8000772:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000774:	b672      	cpsid	i
}
 8000776:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000778:	bf00      	nop
 800077a:	e7fd      	b.n	8000778 <Error_Handler+0x8>

0800077c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800077c:	b480      	push	{r7}
 800077e:	b083      	sub	sp, #12
 8000780:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000782:	2300      	movs	r3, #0
 8000784:	607b      	str	r3, [r7, #4]
 8000786:	4b10      	ldr	r3, [pc, #64]	@ (80007c8 <HAL_MspInit+0x4c>)
 8000788:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800078a:	4a0f      	ldr	r2, [pc, #60]	@ (80007c8 <HAL_MspInit+0x4c>)
 800078c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000790:	6453      	str	r3, [r2, #68]	@ 0x44
 8000792:	4b0d      	ldr	r3, [pc, #52]	@ (80007c8 <HAL_MspInit+0x4c>)
 8000794:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000796:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800079a:	607b      	str	r3, [r7, #4]
 800079c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800079e:	2300      	movs	r3, #0
 80007a0:	603b      	str	r3, [r7, #0]
 80007a2:	4b09      	ldr	r3, [pc, #36]	@ (80007c8 <HAL_MspInit+0x4c>)
 80007a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007a6:	4a08      	ldr	r2, [pc, #32]	@ (80007c8 <HAL_MspInit+0x4c>)
 80007a8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80007ac:	6413      	str	r3, [r2, #64]	@ 0x40
 80007ae:	4b06      	ldr	r3, [pc, #24]	@ (80007c8 <HAL_MspInit+0x4c>)
 80007b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80007b6:	603b      	str	r3, [r7, #0]
 80007b8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007ba:	bf00      	nop
 80007bc:	370c      	adds	r7, #12
 80007be:	46bd      	mov	sp, r7
 80007c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c4:	4770      	bx	lr
 80007c6:	bf00      	nop
 80007c8:	40023800 	.word	0x40023800

080007cc <HAL_TIM_Encoder_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_encoder: TIM_Encoder handle pointer
  * @retval None
  */
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b08a      	sub	sp, #40	@ 0x28
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007d4:	f107 0314 	add.w	r3, r7, #20
 80007d8:	2200      	movs	r2, #0
 80007da:	601a      	str	r2, [r3, #0]
 80007dc:	605a      	str	r2, [r3, #4]
 80007de:	609a      	str	r2, [r3, #8]
 80007e0:	60da      	str	r2, [r3, #12]
 80007e2:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	4a1d      	ldr	r2, [pc, #116]	@ (8000860 <HAL_TIM_Encoder_MspInit+0x94>)
 80007ea:	4293      	cmp	r3, r2
 80007ec:	d133      	bne.n	8000856 <HAL_TIM_Encoder_MspInit+0x8a>
  {
    /* USER CODE BEGIN TIM3_MspInit 0 */

    /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80007ee:	2300      	movs	r3, #0
 80007f0:	613b      	str	r3, [r7, #16]
 80007f2:	4b1c      	ldr	r3, [pc, #112]	@ (8000864 <HAL_TIM_Encoder_MspInit+0x98>)
 80007f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007f6:	4a1b      	ldr	r2, [pc, #108]	@ (8000864 <HAL_TIM_Encoder_MspInit+0x98>)
 80007f8:	f043 0302 	orr.w	r3, r3, #2
 80007fc:	6413      	str	r3, [r2, #64]	@ 0x40
 80007fe:	4b19      	ldr	r3, [pc, #100]	@ (8000864 <HAL_TIM_Encoder_MspInit+0x98>)
 8000800:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000802:	f003 0302 	and.w	r3, r3, #2
 8000806:	613b      	str	r3, [r7, #16]
 8000808:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800080a:	2300      	movs	r3, #0
 800080c:	60fb      	str	r3, [r7, #12]
 800080e:	4b15      	ldr	r3, [pc, #84]	@ (8000864 <HAL_TIM_Encoder_MspInit+0x98>)
 8000810:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000812:	4a14      	ldr	r2, [pc, #80]	@ (8000864 <HAL_TIM_Encoder_MspInit+0x98>)
 8000814:	f043 0302 	orr.w	r3, r3, #2
 8000818:	6313      	str	r3, [r2, #48]	@ 0x30
 800081a:	4b12      	ldr	r3, [pc, #72]	@ (8000864 <HAL_TIM_Encoder_MspInit+0x98>)
 800081c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800081e:	f003 0302 	and.w	r3, r3, #2
 8000822:	60fb      	str	r3, [r7, #12]
 8000824:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000826:	2330      	movs	r3, #48	@ 0x30
 8000828:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800082a:	2302      	movs	r3, #2
 800082c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800082e:	2300      	movs	r3, #0
 8000830:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000832:	2300      	movs	r3, #0
 8000834:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000836:	2302      	movs	r3, #2
 8000838:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800083a:	f107 0314 	add.w	r3, r7, #20
 800083e:	4619      	mov	r1, r3
 8000840:	4809      	ldr	r0, [pc, #36]	@ (8000868 <HAL_TIM_Encoder_MspInit+0x9c>)
 8000842:	f000 fa3b 	bl	8000cbc <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000846:	2200      	movs	r2, #0
 8000848:	2100      	movs	r1, #0
 800084a:	201d      	movs	r0, #29
 800084c:	f000 f9ff 	bl	8000c4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000850:	201d      	movs	r0, #29
 8000852:	f000 fa18 	bl	8000c86 <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM3_MspInit 1 */

  }

}
 8000856:	bf00      	nop
 8000858:	3728      	adds	r7, #40	@ 0x28
 800085a:	46bd      	mov	sp, r7
 800085c:	bd80      	pop	{r7, pc}
 800085e:	bf00      	nop
 8000860:	40000400 	.word	0x40000400
 8000864:	40023800 	.word	0x40023800
 8000868:	40020400 	.word	0x40020400

0800086c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800086c:	b480      	push	{r7}
 800086e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000870:	bf00      	nop
 8000872:	e7fd      	b.n	8000870 <NMI_Handler+0x4>

08000874 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000874:	b480      	push	{r7}
 8000876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000878:	bf00      	nop
 800087a:	e7fd      	b.n	8000878 <HardFault_Handler+0x4>

0800087c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800087c:	b480      	push	{r7}
 800087e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000880:	bf00      	nop
 8000882:	e7fd      	b.n	8000880 <MemManage_Handler+0x4>

08000884 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000884:	b480      	push	{r7}
 8000886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000888:	bf00      	nop
 800088a:	e7fd      	b.n	8000888 <BusFault_Handler+0x4>

0800088c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800088c:	b480      	push	{r7}
 800088e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000890:	bf00      	nop
 8000892:	e7fd      	b.n	8000890 <UsageFault_Handler+0x4>

08000894 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000894:	b480      	push	{r7}
 8000896:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000898:	bf00      	nop
 800089a:	46bd      	mov	sp, r7
 800089c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a0:	4770      	bx	lr

080008a2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008a2:	b480      	push	{r7}
 80008a4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008a6:	bf00      	nop
 80008a8:	46bd      	mov	sp, r7
 80008aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ae:	4770      	bx	lr

080008b0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008b0:	b480      	push	{r7}
 80008b2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008b4:	bf00      	nop
 80008b6:	46bd      	mov	sp, r7
 80008b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008bc:	4770      	bx	lr

080008be <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008be:	b580      	push	{r7, lr}
 80008c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008c2:	f000 f8a5 	bl	8000a10 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008c6:	bf00      	nop
 80008c8:	bd80      	pop	{r7, pc}
	...

080008cc <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80008d0:	4802      	ldr	r0, [pc, #8]	@ (80008dc <TIM3_IRQHandler+0x10>)
 80008d2:	f002 fb8d 	bl	8002ff0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80008d6:	bf00      	nop
 80008d8:	bd80      	pop	{r7, pc}
 80008da:	bf00      	nop
 80008dc:	20000158 	.word	0x20000158

080008e0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80008e4:	4802      	ldr	r0, [pc, #8]	@ (80008f0 <OTG_FS_IRQHandler+0x10>)
 80008e6:	f000 fcc9 	bl	800127c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80008ea:	bf00      	nop
 80008ec:	bd80      	pop	{r7, pc}
 80008ee:	bf00      	nop
 80008f0:	20000690 	.word	0x20000690

080008f4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80008f4:	b480      	push	{r7}
 80008f6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80008f8:	4b06      	ldr	r3, [pc, #24]	@ (8000914 <SystemInit+0x20>)
 80008fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80008fe:	4a05      	ldr	r2, [pc, #20]	@ (8000914 <SystemInit+0x20>)
 8000900:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000904:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000908:	bf00      	nop
 800090a:	46bd      	mov	sp, r7
 800090c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000910:	4770      	bx	lr
 8000912:	bf00      	nop
 8000914:	e000ed00 	.word	0xe000ed00

08000918 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000918:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000950 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 800091c:	f7ff ffea 	bl	80008f4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000920:	480c      	ldr	r0, [pc, #48]	@ (8000954 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000922:	490d      	ldr	r1, [pc, #52]	@ (8000958 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000924:	4a0d      	ldr	r2, [pc, #52]	@ (800095c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000926:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000928:	e002      	b.n	8000930 <LoopCopyDataInit>

0800092a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800092a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800092c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800092e:	3304      	adds	r3, #4

08000930 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000930:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000932:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000934:	d3f9      	bcc.n	800092a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000936:	4a0a      	ldr	r2, [pc, #40]	@ (8000960 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000938:	4c0a      	ldr	r4, [pc, #40]	@ (8000964 <LoopFillZerobss+0x22>)
  movs r3, #0
 800093a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800093c:	e001      	b.n	8000942 <LoopFillZerobss>

0800093e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800093e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000940:	3204      	adds	r2, #4

08000942 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000942:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000944:	d3fb      	bcc.n	800093e <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8000946:	f006 fc59 	bl	80071fc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800094a:	f7ff fdf7 	bl	800053c <main>
  bx  lr    
 800094e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000950:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000954:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000958:	2000013c 	.word	0x2000013c
  ldr r2, =_sidata
 800095c:	080072dc 	.word	0x080072dc
  ldr r2, =_sbss
 8000960:	2000013c 	.word	0x2000013c
  ldr r4, =_ebss
 8000964:	20000b94 	.word	0x20000b94

08000968 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000968:	e7fe      	b.n	8000968 <ADC_IRQHandler>
	...

0800096c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000970:	4b0e      	ldr	r3, [pc, #56]	@ (80009ac <HAL_Init+0x40>)
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	4a0d      	ldr	r2, [pc, #52]	@ (80009ac <HAL_Init+0x40>)
 8000976:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800097a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800097c:	4b0b      	ldr	r3, [pc, #44]	@ (80009ac <HAL_Init+0x40>)
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	4a0a      	ldr	r2, [pc, #40]	@ (80009ac <HAL_Init+0x40>)
 8000982:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000986:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000988:	4b08      	ldr	r3, [pc, #32]	@ (80009ac <HAL_Init+0x40>)
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	4a07      	ldr	r2, [pc, #28]	@ (80009ac <HAL_Init+0x40>)
 800098e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000992:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000994:	2003      	movs	r0, #3
 8000996:	f000 f94f 	bl	8000c38 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800099a:	200f      	movs	r0, #15
 800099c:	f000 f808 	bl	80009b0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80009a0:	f7ff feec 	bl	800077c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80009a4:	2300      	movs	r3, #0
}
 80009a6:	4618      	mov	r0, r3
 80009a8:	bd80      	pop	{r7, pc}
 80009aa:	bf00      	nop
 80009ac:	40023c00 	.word	0x40023c00

080009b0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b082      	sub	sp, #8
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80009b8:	4b12      	ldr	r3, [pc, #72]	@ (8000a04 <HAL_InitTick+0x54>)
 80009ba:	681a      	ldr	r2, [r3, #0]
 80009bc:	4b12      	ldr	r3, [pc, #72]	@ (8000a08 <HAL_InitTick+0x58>)
 80009be:	781b      	ldrb	r3, [r3, #0]
 80009c0:	4619      	mov	r1, r3
 80009c2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80009c6:	fbb3 f3f1 	udiv	r3, r3, r1
 80009ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80009ce:	4618      	mov	r0, r3
 80009d0:	f000 f967 	bl	8000ca2 <HAL_SYSTICK_Config>
 80009d4:	4603      	mov	r3, r0
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d001      	beq.n	80009de <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80009da:	2301      	movs	r3, #1
 80009dc:	e00e      	b.n	80009fc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	2b0f      	cmp	r3, #15
 80009e2:	d80a      	bhi.n	80009fa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009e4:	2200      	movs	r2, #0
 80009e6:	6879      	ldr	r1, [r7, #4]
 80009e8:	f04f 30ff 	mov.w	r0, #4294967295
 80009ec:	f000 f92f 	bl	8000c4e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80009f0:	4a06      	ldr	r2, [pc, #24]	@ (8000a0c <HAL_InitTick+0x5c>)
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80009f6:	2300      	movs	r3, #0
 80009f8:	e000      	b.n	80009fc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80009fa:	2301      	movs	r3, #1
}
 80009fc:	4618      	mov	r0, r3
 80009fe:	3708      	adds	r7, #8
 8000a00:	46bd      	mov	sp, r7
 8000a02:	bd80      	pop	{r7, pc}
 8000a04:	20000000 	.word	0x20000000
 8000a08:	20000008 	.word	0x20000008
 8000a0c:	20000004 	.word	0x20000004

08000a10 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a10:	b480      	push	{r7}
 8000a12:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a14:	4b06      	ldr	r3, [pc, #24]	@ (8000a30 <HAL_IncTick+0x20>)
 8000a16:	781b      	ldrb	r3, [r3, #0]
 8000a18:	461a      	mov	r2, r3
 8000a1a:	4b06      	ldr	r3, [pc, #24]	@ (8000a34 <HAL_IncTick+0x24>)
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	4413      	add	r3, r2
 8000a20:	4a04      	ldr	r2, [pc, #16]	@ (8000a34 <HAL_IncTick+0x24>)
 8000a22:	6013      	str	r3, [r2, #0]
}
 8000a24:	bf00      	nop
 8000a26:	46bd      	mov	sp, r7
 8000a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2c:	4770      	bx	lr
 8000a2e:	bf00      	nop
 8000a30:	20000008 	.word	0x20000008
 8000a34:	200001ac 	.word	0x200001ac

08000a38 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	af00      	add	r7, sp, #0
  return uwTick;
 8000a3c:	4b03      	ldr	r3, [pc, #12]	@ (8000a4c <HAL_GetTick+0x14>)
 8000a3e:	681b      	ldr	r3, [r3, #0]
}
 8000a40:	4618      	mov	r0, r3
 8000a42:	46bd      	mov	sp, r7
 8000a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a48:	4770      	bx	lr
 8000a4a:	bf00      	nop
 8000a4c:	200001ac 	.word	0x200001ac

08000a50 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b084      	sub	sp, #16
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a58:	f7ff ffee 	bl	8000a38 <HAL_GetTick>
 8000a5c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a62:	68fb      	ldr	r3, [r7, #12]
 8000a64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a68:	d005      	beq.n	8000a76 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000a6a:	4b0a      	ldr	r3, [pc, #40]	@ (8000a94 <HAL_Delay+0x44>)
 8000a6c:	781b      	ldrb	r3, [r3, #0]
 8000a6e:	461a      	mov	r2, r3
 8000a70:	68fb      	ldr	r3, [r7, #12]
 8000a72:	4413      	add	r3, r2
 8000a74:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000a76:	bf00      	nop
 8000a78:	f7ff ffde 	bl	8000a38 <HAL_GetTick>
 8000a7c:	4602      	mov	r2, r0
 8000a7e:	68bb      	ldr	r3, [r7, #8]
 8000a80:	1ad3      	subs	r3, r2, r3
 8000a82:	68fa      	ldr	r2, [r7, #12]
 8000a84:	429a      	cmp	r2, r3
 8000a86:	d8f7      	bhi.n	8000a78 <HAL_Delay+0x28>
  {
  }
}
 8000a88:	bf00      	nop
 8000a8a:	bf00      	nop
 8000a8c:	3710      	adds	r7, #16
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	bd80      	pop	{r7, pc}
 8000a92:	bf00      	nop
 8000a94:	20000008 	.word	0x20000008

08000a98 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a98:	b480      	push	{r7}
 8000a9a:	b085      	sub	sp, #20
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	f003 0307 	and.w	r3, r3, #7
 8000aa6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000aa8:	4b0c      	ldr	r3, [pc, #48]	@ (8000adc <__NVIC_SetPriorityGrouping+0x44>)
 8000aaa:	68db      	ldr	r3, [r3, #12]
 8000aac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000aae:	68ba      	ldr	r2, [r7, #8]
 8000ab0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000ab4:	4013      	ands	r3, r2
 8000ab6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ab8:	68fb      	ldr	r3, [r7, #12]
 8000aba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000abc:	68bb      	ldr	r3, [r7, #8]
 8000abe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ac0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000ac4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ac8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000aca:	4a04      	ldr	r2, [pc, #16]	@ (8000adc <__NVIC_SetPriorityGrouping+0x44>)
 8000acc:	68bb      	ldr	r3, [r7, #8]
 8000ace:	60d3      	str	r3, [r2, #12]
}
 8000ad0:	bf00      	nop
 8000ad2:	3714      	adds	r7, #20
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ada:	4770      	bx	lr
 8000adc:	e000ed00 	.word	0xe000ed00

08000ae0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ae4:	4b04      	ldr	r3, [pc, #16]	@ (8000af8 <__NVIC_GetPriorityGrouping+0x18>)
 8000ae6:	68db      	ldr	r3, [r3, #12]
 8000ae8:	0a1b      	lsrs	r3, r3, #8
 8000aea:	f003 0307 	and.w	r3, r3, #7
}
 8000aee:	4618      	mov	r0, r3
 8000af0:	46bd      	mov	sp, r7
 8000af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af6:	4770      	bx	lr
 8000af8:	e000ed00 	.word	0xe000ed00

08000afc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000afc:	b480      	push	{r7}
 8000afe:	b083      	sub	sp, #12
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	4603      	mov	r3, r0
 8000b04:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	db0b      	blt.n	8000b26 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b0e:	79fb      	ldrb	r3, [r7, #7]
 8000b10:	f003 021f 	and.w	r2, r3, #31
 8000b14:	4907      	ldr	r1, [pc, #28]	@ (8000b34 <__NVIC_EnableIRQ+0x38>)
 8000b16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b1a:	095b      	lsrs	r3, r3, #5
 8000b1c:	2001      	movs	r0, #1
 8000b1e:	fa00 f202 	lsl.w	r2, r0, r2
 8000b22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000b26:	bf00      	nop
 8000b28:	370c      	adds	r7, #12
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b30:	4770      	bx	lr
 8000b32:	bf00      	nop
 8000b34:	e000e100 	.word	0xe000e100

08000b38 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	b083      	sub	sp, #12
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	4603      	mov	r3, r0
 8000b40:	6039      	str	r1, [r7, #0]
 8000b42:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	db0a      	blt.n	8000b62 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b4c:	683b      	ldr	r3, [r7, #0]
 8000b4e:	b2da      	uxtb	r2, r3
 8000b50:	490c      	ldr	r1, [pc, #48]	@ (8000b84 <__NVIC_SetPriority+0x4c>)
 8000b52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b56:	0112      	lsls	r2, r2, #4
 8000b58:	b2d2      	uxtb	r2, r2
 8000b5a:	440b      	add	r3, r1
 8000b5c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b60:	e00a      	b.n	8000b78 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b62:	683b      	ldr	r3, [r7, #0]
 8000b64:	b2da      	uxtb	r2, r3
 8000b66:	4908      	ldr	r1, [pc, #32]	@ (8000b88 <__NVIC_SetPriority+0x50>)
 8000b68:	79fb      	ldrb	r3, [r7, #7]
 8000b6a:	f003 030f 	and.w	r3, r3, #15
 8000b6e:	3b04      	subs	r3, #4
 8000b70:	0112      	lsls	r2, r2, #4
 8000b72:	b2d2      	uxtb	r2, r2
 8000b74:	440b      	add	r3, r1
 8000b76:	761a      	strb	r2, [r3, #24]
}
 8000b78:	bf00      	nop
 8000b7a:	370c      	adds	r7, #12
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b82:	4770      	bx	lr
 8000b84:	e000e100 	.word	0xe000e100
 8000b88:	e000ed00 	.word	0xe000ed00

08000b8c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	b089      	sub	sp, #36	@ 0x24
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	60f8      	str	r0, [r7, #12]
 8000b94:	60b9      	str	r1, [r7, #8]
 8000b96:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b98:	68fb      	ldr	r3, [r7, #12]
 8000b9a:	f003 0307 	and.w	r3, r3, #7
 8000b9e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ba0:	69fb      	ldr	r3, [r7, #28]
 8000ba2:	f1c3 0307 	rsb	r3, r3, #7
 8000ba6:	2b04      	cmp	r3, #4
 8000ba8:	bf28      	it	cs
 8000baa:	2304      	movcs	r3, #4
 8000bac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000bae:	69fb      	ldr	r3, [r7, #28]
 8000bb0:	3304      	adds	r3, #4
 8000bb2:	2b06      	cmp	r3, #6
 8000bb4:	d902      	bls.n	8000bbc <NVIC_EncodePriority+0x30>
 8000bb6:	69fb      	ldr	r3, [r7, #28]
 8000bb8:	3b03      	subs	r3, #3
 8000bba:	e000      	b.n	8000bbe <NVIC_EncodePriority+0x32>
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bc0:	f04f 32ff 	mov.w	r2, #4294967295
 8000bc4:	69bb      	ldr	r3, [r7, #24]
 8000bc6:	fa02 f303 	lsl.w	r3, r2, r3
 8000bca:	43da      	mvns	r2, r3
 8000bcc:	68bb      	ldr	r3, [r7, #8]
 8000bce:	401a      	ands	r2, r3
 8000bd0:	697b      	ldr	r3, [r7, #20]
 8000bd2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000bd4:	f04f 31ff 	mov.w	r1, #4294967295
 8000bd8:	697b      	ldr	r3, [r7, #20]
 8000bda:	fa01 f303 	lsl.w	r3, r1, r3
 8000bde:	43d9      	mvns	r1, r3
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000be4:	4313      	orrs	r3, r2
         );
}
 8000be6:	4618      	mov	r0, r3
 8000be8:	3724      	adds	r7, #36	@ 0x24
 8000bea:	46bd      	mov	sp, r7
 8000bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf0:	4770      	bx	lr
	...

08000bf4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b082      	sub	sp, #8
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	3b01      	subs	r3, #1
 8000c00:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000c04:	d301      	bcc.n	8000c0a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c06:	2301      	movs	r3, #1
 8000c08:	e00f      	b.n	8000c2a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c0a:	4a0a      	ldr	r2, [pc, #40]	@ (8000c34 <SysTick_Config+0x40>)
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	3b01      	subs	r3, #1
 8000c10:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c12:	210f      	movs	r1, #15
 8000c14:	f04f 30ff 	mov.w	r0, #4294967295
 8000c18:	f7ff ff8e 	bl	8000b38 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c1c:	4b05      	ldr	r3, [pc, #20]	@ (8000c34 <SysTick_Config+0x40>)
 8000c1e:	2200      	movs	r2, #0
 8000c20:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c22:	4b04      	ldr	r3, [pc, #16]	@ (8000c34 <SysTick_Config+0x40>)
 8000c24:	2207      	movs	r2, #7
 8000c26:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c28:	2300      	movs	r3, #0
}
 8000c2a:	4618      	mov	r0, r3
 8000c2c:	3708      	adds	r7, #8
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bd80      	pop	{r7, pc}
 8000c32:	bf00      	nop
 8000c34:	e000e010 	.word	0xe000e010

08000c38 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b082      	sub	sp, #8
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c40:	6878      	ldr	r0, [r7, #4]
 8000c42:	f7ff ff29 	bl	8000a98 <__NVIC_SetPriorityGrouping>
}
 8000c46:	bf00      	nop
 8000c48:	3708      	adds	r7, #8
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	bd80      	pop	{r7, pc}

08000c4e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c4e:	b580      	push	{r7, lr}
 8000c50:	b086      	sub	sp, #24
 8000c52:	af00      	add	r7, sp, #0
 8000c54:	4603      	mov	r3, r0
 8000c56:	60b9      	str	r1, [r7, #8]
 8000c58:	607a      	str	r2, [r7, #4]
 8000c5a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c60:	f7ff ff3e 	bl	8000ae0 <__NVIC_GetPriorityGrouping>
 8000c64:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c66:	687a      	ldr	r2, [r7, #4]
 8000c68:	68b9      	ldr	r1, [r7, #8]
 8000c6a:	6978      	ldr	r0, [r7, #20]
 8000c6c:	f7ff ff8e 	bl	8000b8c <NVIC_EncodePriority>
 8000c70:	4602      	mov	r2, r0
 8000c72:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c76:	4611      	mov	r1, r2
 8000c78:	4618      	mov	r0, r3
 8000c7a:	f7ff ff5d 	bl	8000b38 <__NVIC_SetPriority>
}
 8000c7e:	bf00      	nop
 8000c80:	3718      	adds	r7, #24
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bd80      	pop	{r7, pc}

08000c86 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c86:	b580      	push	{r7, lr}
 8000c88:	b082      	sub	sp, #8
 8000c8a:	af00      	add	r7, sp, #0
 8000c8c:	4603      	mov	r3, r0
 8000c8e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c94:	4618      	mov	r0, r3
 8000c96:	f7ff ff31 	bl	8000afc <__NVIC_EnableIRQ>
}
 8000c9a:	bf00      	nop
 8000c9c:	3708      	adds	r7, #8
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	bd80      	pop	{r7, pc}

08000ca2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ca2:	b580      	push	{r7, lr}
 8000ca4:	b082      	sub	sp, #8
 8000ca6:	af00      	add	r7, sp, #0
 8000ca8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000caa:	6878      	ldr	r0, [r7, #4]
 8000cac:	f7ff ffa2 	bl	8000bf4 <SysTick_Config>
 8000cb0:	4603      	mov	r3, r0
}
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	3708      	adds	r7, #8
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	bd80      	pop	{r7, pc}
	...

08000cbc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	b089      	sub	sp, #36	@ 0x24
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	6078      	str	r0, [r7, #4]
 8000cc4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000cce:	2300      	movs	r3, #0
 8000cd0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	61fb      	str	r3, [r7, #28]
 8000cd6:	e16b      	b.n	8000fb0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000cd8:	2201      	movs	r2, #1
 8000cda:	69fb      	ldr	r3, [r7, #28]
 8000cdc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ce0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000ce2:	683b      	ldr	r3, [r7, #0]
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	697a      	ldr	r2, [r7, #20]
 8000ce8:	4013      	ands	r3, r2
 8000cea:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000cec:	693a      	ldr	r2, [r7, #16]
 8000cee:	697b      	ldr	r3, [r7, #20]
 8000cf0:	429a      	cmp	r2, r3
 8000cf2:	f040 815a 	bne.w	8000faa <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000cf6:	683b      	ldr	r3, [r7, #0]
 8000cf8:	685b      	ldr	r3, [r3, #4]
 8000cfa:	f003 0303 	and.w	r3, r3, #3
 8000cfe:	2b01      	cmp	r3, #1
 8000d00:	d005      	beq.n	8000d0e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d02:	683b      	ldr	r3, [r7, #0]
 8000d04:	685b      	ldr	r3, [r3, #4]
 8000d06:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000d0a:	2b02      	cmp	r3, #2
 8000d0c:	d130      	bne.n	8000d70 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	689b      	ldr	r3, [r3, #8]
 8000d12:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000d14:	69fb      	ldr	r3, [r7, #28]
 8000d16:	005b      	lsls	r3, r3, #1
 8000d18:	2203      	movs	r2, #3
 8000d1a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d1e:	43db      	mvns	r3, r3
 8000d20:	69ba      	ldr	r2, [r7, #24]
 8000d22:	4013      	ands	r3, r2
 8000d24:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000d26:	683b      	ldr	r3, [r7, #0]
 8000d28:	68da      	ldr	r2, [r3, #12]
 8000d2a:	69fb      	ldr	r3, [r7, #28]
 8000d2c:	005b      	lsls	r3, r3, #1
 8000d2e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d32:	69ba      	ldr	r2, [r7, #24]
 8000d34:	4313      	orrs	r3, r2
 8000d36:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	69ba      	ldr	r2, [r7, #24]
 8000d3c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	685b      	ldr	r3, [r3, #4]
 8000d42:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000d44:	2201      	movs	r2, #1
 8000d46:	69fb      	ldr	r3, [r7, #28]
 8000d48:	fa02 f303 	lsl.w	r3, r2, r3
 8000d4c:	43db      	mvns	r3, r3
 8000d4e:	69ba      	ldr	r2, [r7, #24]
 8000d50:	4013      	ands	r3, r2
 8000d52:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000d54:	683b      	ldr	r3, [r7, #0]
 8000d56:	685b      	ldr	r3, [r3, #4]
 8000d58:	091b      	lsrs	r3, r3, #4
 8000d5a:	f003 0201 	and.w	r2, r3, #1
 8000d5e:	69fb      	ldr	r3, [r7, #28]
 8000d60:	fa02 f303 	lsl.w	r3, r2, r3
 8000d64:	69ba      	ldr	r2, [r7, #24]
 8000d66:	4313      	orrs	r3, r2
 8000d68:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	69ba      	ldr	r2, [r7, #24]
 8000d6e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000d70:	683b      	ldr	r3, [r7, #0]
 8000d72:	685b      	ldr	r3, [r3, #4]
 8000d74:	f003 0303 	and.w	r3, r3, #3
 8000d78:	2b03      	cmp	r3, #3
 8000d7a:	d017      	beq.n	8000dac <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	68db      	ldr	r3, [r3, #12]
 8000d80:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000d82:	69fb      	ldr	r3, [r7, #28]
 8000d84:	005b      	lsls	r3, r3, #1
 8000d86:	2203      	movs	r2, #3
 8000d88:	fa02 f303 	lsl.w	r3, r2, r3
 8000d8c:	43db      	mvns	r3, r3
 8000d8e:	69ba      	ldr	r2, [r7, #24]
 8000d90:	4013      	ands	r3, r2
 8000d92:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000d94:	683b      	ldr	r3, [r7, #0]
 8000d96:	689a      	ldr	r2, [r3, #8]
 8000d98:	69fb      	ldr	r3, [r7, #28]
 8000d9a:	005b      	lsls	r3, r3, #1
 8000d9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000da0:	69ba      	ldr	r2, [r7, #24]
 8000da2:	4313      	orrs	r3, r2
 8000da4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	69ba      	ldr	r2, [r7, #24]
 8000daa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000dac:	683b      	ldr	r3, [r7, #0]
 8000dae:	685b      	ldr	r3, [r3, #4]
 8000db0:	f003 0303 	and.w	r3, r3, #3
 8000db4:	2b02      	cmp	r3, #2
 8000db6:	d123      	bne.n	8000e00 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000db8:	69fb      	ldr	r3, [r7, #28]
 8000dba:	08da      	lsrs	r2, r3, #3
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	3208      	adds	r2, #8
 8000dc0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000dc4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000dc6:	69fb      	ldr	r3, [r7, #28]
 8000dc8:	f003 0307 	and.w	r3, r3, #7
 8000dcc:	009b      	lsls	r3, r3, #2
 8000dce:	220f      	movs	r2, #15
 8000dd0:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd4:	43db      	mvns	r3, r3
 8000dd6:	69ba      	ldr	r2, [r7, #24]
 8000dd8:	4013      	ands	r3, r2
 8000dda:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000ddc:	683b      	ldr	r3, [r7, #0]
 8000dde:	691a      	ldr	r2, [r3, #16]
 8000de0:	69fb      	ldr	r3, [r7, #28]
 8000de2:	f003 0307 	and.w	r3, r3, #7
 8000de6:	009b      	lsls	r3, r3, #2
 8000de8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dec:	69ba      	ldr	r2, [r7, #24]
 8000dee:	4313      	orrs	r3, r2
 8000df0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000df2:	69fb      	ldr	r3, [r7, #28]
 8000df4:	08da      	lsrs	r2, r3, #3
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	3208      	adds	r2, #8
 8000dfa:	69b9      	ldr	r1, [r7, #24]
 8000dfc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000e06:	69fb      	ldr	r3, [r7, #28]
 8000e08:	005b      	lsls	r3, r3, #1
 8000e0a:	2203      	movs	r2, #3
 8000e0c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e10:	43db      	mvns	r3, r3
 8000e12:	69ba      	ldr	r2, [r7, #24]
 8000e14:	4013      	ands	r3, r2
 8000e16:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000e18:	683b      	ldr	r3, [r7, #0]
 8000e1a:	685b      	ldr	r3, [r3, #4]
 8000e1c:	f003 0203 	and.w	r2, r3, #3
 8000e20:	69fb      	ldr	r3, [r7, #28]
 8000e22:	005b      	lsls	r3, r3, #1
 8000e24:	fa02 f303 	lsl.w	r3, r2, r3
 8000e28:	69ba      	ldr	r2, [r7, #24]
 8000e2a:	4313      	orrs	r3, r2
 8000e2c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	69ba      	ldr	r2, [r7, #24]
 8000e32:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000e34:	683b      	ldr	r3, [r7, #0]
 8000e36:	685b      	ldr	r3, [r3, #4]
 8000e38:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	f000 80b4 	beq.w	8000faa <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e42:	2300      	movs	r3, #0
 8000e44:	60fb      	str	r3, [r7, #12]
 8000e46:	4b60      	ldr	r3, [pc, #384]	@ (8000fc8 <HAL_GPIO_Init+0x30c>)
 8000e48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e4a:	4a5f      	ldr	r2, [pc, #380]	@ (8000fc8 <HAL_GPIO_Init+0x30c>)
 8000e4c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000e50:	6453      	str	r3, [r2, #68]	@ 0x44
 8000e52:	4b5d      	ldr	r3, [pc, #372]	@ (8000fc8 <HAL_GPIO_Init+0x30c>)
 8000e54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e56:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000e5a:	60fb      	str	r3, [r7, #12]
 8000e5c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000e5e:	4a5b      	ldr	r2, [pc, #364]	@ (8000fcc <HAL_GPIO_Init+0x310>)
 8000e60:	69fb      	ldr	r3, [r7, #28]
 8000e62:	089b      	lsrs	r3, r3, #2
 8000e64:	3302      	adds	r3, #2
 8000e66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000e6c:	69fb      	ldr	r3, [r7, #28]
 8000e6e:	f003 0303 	and.w	r3, r3, #3
 8000e72:	009b      	lsls	r3, r3, #2
 8000e74:	220f      	movs	r2, #15
 8000e76:	fa02 f303 	lsl.w	r3, r2, r3
 8000e7a:	43db      	mvns	r3, r3
 8000e7c:	69ba      	ldr	r2, [r7, #24]
 8000e7e:	4013      	ands	r3, r2
 8000e80:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	4a52      	ldr	r2, [pc, #328]	@ (8000fd0 <HAL_GPIO_Init+0x314>)
 8000e86:	4293      	cmp	r3, r2
 8000e88:	d02b      	beq.n	8000ee2 <HAL_GPIO_Init+0x226>
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	4a51      	ldr	r2, [pc, #324]	@ (8000fd4 <HAL_GPIO_Init+0x318>)
 8000e8e:	4293      	cmp	r3, r2
 8000e90:	d025      	beq.n	8000ede <HAL_GPIO_Init+0x222>
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	4a50      	ldr	r2, [pc, #320]	@ (8000fd8 <HAL_GPIO_Init+0x31c>)
 8000e96:	4293      	cmp	r3, r2
 8000e98:	d01f      	beq.n	8000eda <HAL_GPIO_Init+0x21e>
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	4a4f      	ldr	r2, [pc, #316]	@ (8000fdc <HAL_GPIO_Init+0x320>)
 8000e9e:	4293      	cmp	r3, r2
 8000ea0:	d019      	beq.n	8000ed6 <HAL_GPIO_Init+0x21a>
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	4a4e      	ldr	r2, [pc, #312]	@ (8000fe0 <HAL_GPIO_Init+0x324>)
 8000ea6:	4293      	cmp	r3, r2
 8000ea8:	d013      	beq.n	8000ed2 <HAL_GPIO_Init+0x216>
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	4a4d      	ldr	r2, [pc, #308]	@ (8000fe4 <HAL_GPIO_Init+0x328>)
 8000eae:	4293      	cmp	r3, r2
 8000eb0:	d00d      	beq.n	8000ece <HAL_GPIO_Init+0x212>
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	4a4c      	ldr	r2, [pc, #304]	@ (8000fe8 <HAL_GPIO_Init+0x32c>)
 8000eb6:	4293      	cmp	r3, r2
 8000eb8:	d007      	beq.n	8000eca <HAL_GPIO_Init+0x20e>
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	4a4b      	ldr	r2, [pc, #300]	@ (8000fec <HAL_GPIO_Init+0x330>)
 8000ebe:	4293      	cmp	r3, r2
 8000ec0:	d101      	bne.n	8000ec6 <HAL_GPIO_Init+0x20a>
 8000ec2:	2307      	movs	r3, #7
 8000ec4:	e00e      	b.n	8000ee4 <HAL_GPIO_Init+0x228>
 8000ec6:	2308      	movs	r3, #8
 8000ec8:	e00c      	b.n	8000ee4 <HAL_GPIO_Init+0x228>
 8000eca:	2306      	movs	r3, #6
 8000ecc:	e00a      	b.n	8000ee4 <HAL_GPIO_Init+0x228>
 8000ece:	2305      	movs	r3, #5
 8000ed0:	e008      	b.n	8000ee4 <HAL_GPIO_Init+0x228>
 8000ed2:	2304      	movs	r3, #4
 8000ed4:	e006      	b.n	8000ee4 <HAL_GPIO_Init+0x228>
 8000ed6:	2303      	movs	r3, #3
 8000ed8:	e004      	b.n	8000ee4 <HAL_GPIO_Init+0x228>
 8000eda:	2302      	movs	r3, #2
 8000edc:	e002      	b.n	8000ee4 <HAL_GPIO_Init+0x228>
 8000ede:	2301      	movs	r3, #1
 8000ee0:	e000      	b.n	8000ee4 <HAL_GPIO_Init+0x228>
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	69fa      	ldr	r2, [r7, #28]
 8000ee6:	f002 0203 	and.w	r2, r2, #3
 8000eea:	0092      	lsls	r2, r2, #2
 8000eec:	4093      	lsls	r3, r2
 8000eee:	69ba      	ldr	r2, [r7, #24]
 8000ef0:	4313      	orrs	r3, r2
 8000ef2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000ef4:	4935      	ldr	r1, [pc, #212]	@ (8000fcc <HAL_GPIO_Init+0x310>)
 8000ef6:	69fb      	ldr	r3, [r7, #28]
 8000ef8:	089b      	lsrs	r3, r3, #2
 8000efa:	3302      	adds	r3, #2
 8000efc:	69ba      	ldr	r2, [r7, #24]
 8000efe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000f02:	4b3b      	ldr	r3, [pc, #236]	@ (8000ff0 <HAL_GPIO_Init+0x334>)
 8000f04:	689b      	ldr	r3, [r3, #8]
 8000f06:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f08:	693b      	ldr	r3, [r7, #16]
 8000f0a:	43db      	mvns	r3, r3
 8000f0c:	69ba      	ldr	r2, [r7, #24]
 8000f0e:	4013      	ands	r3, r2
 8000f10:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000f12:	683b      	ldr	r3, [r7, #0]
 8000f14:	685b      	ldr	r3, [r3, #4]
 8000f16:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d003      	beq.n	8000f26 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8000f1e:	69ba      	ldr	r2, [r7, #24]
 8000f20:	693b      	ldr	r3, [r7, #16]
 8000f22:	4313      	orrs	r3, r2
 8000f24:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000f26:	4a32      	ldr	r2, [pc, #200]	@ (8000ff0 <HAL_GPIO_Init+0x334>)
 8000f28:	69bb      	ldr	r3, [r7, #24]
 8000f2a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000f2c:	4b30      	ldr	r3, [pc, #192]	@ (8000ff0 <HAL_GPIO_Init+0x334>)
 8000f2e:	68db      	ldr	r3, [r3, #12]
 8000f30:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f32:	693b      	ldr	r3, [r7, #16]
 8000f34:	43db      	mvns	r3, r3
 8000f36:	69ba      	ldr	r2, [r7, #24]
 8000f38:	4013      	ands	r3, r2
 8000f3a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000f3c:	683b      	ldr	r3, [r7, #0]
 8000f3e:	685b      	ldr	r3, [r3, #4]
 8000f40:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d003      	beq.n	8000f50 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8000f48:	69ba      	ldr	r2, [r7, #24]
 8000f4a:	693b      	ldr	r3, [r7, #16]
 8000f4c:	4313      	orrs	r3, r2
 8000f4e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000f50:	4a27      	ldr	r2, [pc, #156]	@ (8000ff0 <HAL_GPIO_Init+0x334>)
 8000f52:	69bb      	ldr	r3, [r7, #24]
 8000f54:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000f56:	4b26      	ldr	r3, [pc, #152]	@ (8000ff0 <HAL_GPIO_Init+0x334>)
 8000f58:	685b      	ldr	r3, [r3, #4]
 8000f5a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f5c:	693b      	ldr	r3, [r7, #16]
 8000f5e:	43db      	mvns	r3, r3
 8000f60:	69ba      	ldr	r2, [r7, #24]
 8000f62:	4013      	ands	r3, r2
 8000f64:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000f66:	683b      	ldr	r3, [r7, #0]
 8000f68:	685b      	ldr	r3, [r3, #4]
 8000f6a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d003      	beq.n	8000f7a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8000f72:	69ba      	ldr	r2, [r7, #24]
 8000f74:	693b      	ldr	r3, [r7, #16]
 8000f76:	4313      	orrs	r3, r2
 8000f78:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000f7a:	4a1d      	ldr	r2, [pc, #116]	@ (8000ff0 <HAL_GPIO_Init+0x334>)
 8000f7c:	69bb      	ldr	r3, [r7, #24]
 8000f7e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000f80:	4b1b      	ldr	r3, [pc, #108]	@ (8000ff0 <HAL_GPIO_Init+0x334>)
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f86:	693b      	ldr	r3, [r7, #16]
 8000f88:	43db      	mvns	r3, r3
 8000f8a:	69ba      	ldr	r2, [r7, #24]
 8000f8c:	4013      	ands	r3, r2
 8000f8e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000f90:	683b      	ldr	r3, [r7, #0]
 8000f92:	685b      	ldr	r3, [r3, #4]
 8000f94:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d003      	beq.n	8000fa4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8000f9c:	69ba      	ldr	r2, [r7, #24]
 8000f9e:	693b      	ldr	r3, [r7, #16]
 8000fa0:	4313      	orrs	r3, r2
 8000fa2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000fa4:	4a12      	ldr	r2, [pc, #72]	@ (8000ff0 <HAL_GPIO_Init+0x334>)
 8000fa6:	69bb      	ldr	r3, [r7, #24]
 8000fa8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000faa:	69fb      	ldr	r3, [r7, #28]
 8000fac:	3301      	adds	r3, #1
 8000fae:	61fb      	str	r3, [r7, #28]
 8000fb0:	69fb      	ldr	r3, [r7, #28]
 8000fb2:	2b0f      	cmp	r3, #15
 8000fb4:	f67f ae90 	bls.w	8000cd8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000fb8:	bf00      	nop
 8000fba:	bf00      	nop
 8000fbc:	3724      	adds	r7, #36	@ 0x24
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc4:	4770      	bx	lr
 8000fc6:	bf00      	nop
 8000fc8:	40023800 	.word	0x40023800
 8000fcc:	40013800 	.word	0x40013800
 8000fd0:	40020000 	.word	0x40020000
 8000fd4:	40020400 	.word	0x40020400
 8000fd8:	40020800 	.word	0x40020800
 8000fdc:	40020c00 	.word	0x40020c00
 8000fe0:	40021000 	.word	0x40021000
 8000fe4:	40021400 	.word	0x40021400
 8000fe8:	40021800 	.word	0x40021800
 8000fec:	40021c00 	.word	0x40021c00
 8000ff0:	40013c00 	.word	0x40013c00

08000ff4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b086      	sub	sp, #24
 8000ff8:	af02      	add	r7, sp, #8
 8000ffa:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d101      	bne.n	8001006 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001002:	2301      	movs	r3, #1
 8001004:	e101      	b.n	800120a <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8001012:	b2db      	uxtb	r3, r3
 8001014:	2b00      	cmp	r3, #0
 8001016:	d106      	bne.n	8001026 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	2200      	movs	r2, #0
 800101c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001020:	6878      	ldr	r0, [r7, #4]
 8001022:	f005 fde1 	bl	8006be8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	2203      	movs	r2, #3
 800102a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 800102e:	68bb      	ldr	r3, [r7, #8]
 8001030:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001034:	d102      	bne.n	800103c <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	2200      	movs	r2, #0
 800103a:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	4618      	mov	r0, r3
 8001042:	f002 fb66 	bl	8003712 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	6818      	ldr	r0, [r3, #0]
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	7c1a      	ldrb	r2, [r3, #16]
 800104e:	f88d 2000 	strb.w	r2, [sp]
 8001052:	3304      	adds	r3, #4
 8001054:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001056:	f002 fa45 	bl	80034e4 <USB_CoreInit>
 800105a:	4603      	mov	r3, r0
 800105c:	2b00      	cmp	r3, #0
 800105e:	d005      	beq.n	800106c <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	2202      	movs	r2, #2
 8001064:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001068:	2301      	movs	r3, #1
 800106a:	e0ce      	b.n	800120a <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	2100      	movs	r1, #0
 8001072:	4618      	mov	r0, r3
 8001074:	f002 fb5e 	bl	8003734 <USB_SetCurrentMode>
 8001078:	4603      	mov	r3, r0
 800107a:	2b00      	cmp	r3, #0
 800107c:	d005      	beq.n	800108a <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	2202      	movs	r2, #2
 8001082:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001086:	2301      	movs	r3, #1
 8001088:	e0bf      	b.n	800120a <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800108a:	2300      	movs	r3, #0
 800108c:	73fb      	strb	r3, [r7, #15]
 800108e:	e04a      	b.n	8001126 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001090:	7bfa      	ldrb	r2, [r7, #15]
 8001092:	6879      	ldr	r1, [r7, #4]
 8001094:	4613      	mov	r3, r2
 8001096:	00db      	lsls	r3, r3, #3
 8001098:	4413      	add	r3, r2
 800109a:	009b      	lsls	r3, r3, #2
 800109c:	440b      	add	r3, r1
 800109e:	3315      	adds	r3, #21
 80010a0:	2201      	movs	r2, #1
 80010a2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80010a4:	7bfa      	ldrb	r2, [r7, #15]
 80010a6:	6879      	ldr	r1, [r7, #4]
 80010a8:	4613      	mov	r3, r2
 80010aa:	00db      	lsls	r3, r3, #3
 80010ac:	4413      	add	r3, r2
 80010ae:	009b      	lsls	r3, r3, #2
 80010b0:	440b      	add	r3, r1
 80010b2:	3314      	adds	r3, #20
 80010b4:	7bfa      	ldrb	r2, [r7, #15]
 80010b6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80010b8:	7bfa      	ldrb	r2, [r7, #15]
 80010ba:	7bfb      	ldrb	r3, [r7, #15]
 80010bc:	b298      	uxth	r0, r3
 80010be:	6879      	ldr	r1, [r7, #4]
 80010c0:	4613      	mov	r3, r2
 80010c2:	00db      	lsls	r3, r3, #3
 80010c4:	4413      	add	r3, r2
 80010c6:	009b      	lsls	r3, r3, #2
 80010c8:	440b      	add	r3, r1
 80010ca:	332e      	adds	r3, #46	@ 0x2e
 80010cc:	4602      	mov	r2, r0
 80010ce:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80010d0:	7bfa      	ldrb	r2, [r7, #15]
 80010d2:	6879      	ldr	r1, [r7, #4]
 80010d4:	4613      	mov	r3, r2
 80010d6:	00db      	lsls	r3, r3, #3
 80010d8:	4413      	add	r3, r2
 80010da:	009b      	lsls	r3, r3, #2
 80010dc:	440b      	add	r3, r1
 80010de:	3318      	adds	r3, #24
 80010e0:	2200      	movs	r2, #0
 80010e2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80010e4:	7bfa      	ldrb	r2, [r7, #15]
 80010e6:	6879      	ldr	r1, [r7, #4]
 80010e8:	4613      	mov	r3, r2
 80010ea:	00db      	lsls	r3, r3, #3
 80010ec:	4413      	add	r3, r2
 80010ee:	009b      	lsls	r3, r3, #2
 80010f0:	440b      	add	r3, r1
 80010f2:	331c      	adds	r3, #28
 80010f4:	2200      	movs	r2, #0
 80010f6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80010f8:	7bfa      	ldrb	r2, [r7, #15]
 80010fa:	6879      	ldr	r1, [r7, #4]
 80010fc:	4613      	mov	r3, r2
 80010fe:	00db      	lsls	r3, r3, #3
 8001100:	4413      	add	r3, r2
 8001102:	009b      	lsls	r3, r3, #2
 8001104:	440b      	add	r3, r1
 8001106:	3320      	adds	r3, #32
 8001108:	2200      	movs	r2, #0
 800110a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800110c:	7bfa      	ldrb	r2, [r7, #15]
 800110e:	6879      	ldr	r1, [r7, #4]
 8001110:	4613      	mov	r3, r2
 8001112:	00db      	lsls	r3, r3, #3
 8001114:	4413      	add	r3, r2
 8001116:	009b      	lsls	r3, r3, #2
 8001118:	440b      	add	r3, r1
 800111a:	3324      	adds	r3, #36	@ 0x24
 800111c:	2200      	movs	r2, #0
 800111e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001120:	7bfb      	ldrb	r3, [r7, #15]
 8001122:	3301      	adds	r3, #1
 8001124:	73fb      	strb	r3, [r7, #15]
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	791b      	ldrb	r3, [r3, #4]
 800112a:	7bfa      	ldrb	r2, [r7, #15]
 800112c:	429a      	cmp	r2, r3
 800112e:	d3af      	bcc.n	8001090 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001130:	2300      	movs	r3, #0
 8001132:	73fb      	strb	r3, [r7, #15]
 8001134:	e044      	b.n	80011c0 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001136:	7bfa      	ldrb	r2, [r7, #15]
 8001138:	6879      	ldr	r1, [r7, #4]
 800113a:	4613      	mov	r3, r2
 800113c:	00db      	lsls	r3, r3, #3
 800113e:	4413      	add	r3, r2
 8001140:	009b      	lsls	r3, r3, #2
 8001142:	440b      	add	r3, r1
 8001144:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8001148:	2200      	movs	r2, #0
 800114a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800114c:	7bfa      	ldrb	r2, [r7, #15]
 800114e:	6879      	ldr	r1, [r7, #4]
 8001150:	4613      	mov	r3, r2
 8001152:	00db      	lsls	r3, r3, #3
 8001154:	4413      	add	r3, r2
 8001156:	009b      	lsls	r3, r3, #2
 8001158:	440b      	add	r3, r1
 800115a:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 800115e:	7bfa      	ldrb	r2, [r7, #15]
 8001160:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001162:	7bfa      	ldrb	r2, [r7, #15]
 8001164:	6879      	ldr	r1, [r7, #4]
 8001166:	4613      	mov	r3, r2
 8001168:	00db      	lsls	r3, r3, #3
 800116a:	4413      	add	r3, r2
 800116c:	009b      	lsls	r3, r3, #2
 800116e:	440b      	add	r3, r1
 8001170:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8001174:	2200      	movs	r2, #0
 8001176:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001178:	7bfa      	ldrb	r2, [r7, #15]
 800117a:	6879      	ldr	r1, [r7, #4]
 800117c:	4613      	mov	r3, r2
 800117e:	00db      	lsls	r3, r3, #3
 8001180:	4413      	add	r3, r2
 8001182:	009b      	lsls	r3, r3, #2
 8001184:	440b      	add	r3, r1
 8001186:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 800118a:	2200      	movs	r2, #0
 800118c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800118e:	7bfa      	ldrb	r2, [r7, #15]
 8001190:	6879      	ldr	r1, [r7, #4]
 8001192:	4613      	mov	r3, r2
 8001194:	00db      	lsls	r3, r3, #3
 8001196:	4413      	add	r3, r2
 8001198:	009b      	lsls	r3, r3, #2
 800119a:	440b      	add	r3, r1
 800119c:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80011a0:	2200      	movs	r2, #0
 80011a2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80011a4:	7bfa      	ldrb	r2, [r7, #15]
 80011a6:	6879      	ldr	r1, [r7, #4]
 80011a8:	4613      	mov	r3, r2
 80011aa:	00db      	lsls	r3, r3, #3
 80011ac:	4413      	add	r3, r2
 80011ae:	009b      	lsls	r3, r3, #2
 80011b0:	440b      	add	r3, r1
 80011b2:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80011b6:	2200      	movs	r2, #0
 80011b8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80011ba:	7bfb      	ldrb	r3, [r7, #15]
 80011bc:	3301      	adds	r3, #1
 80011be:	73fb      	strb	r3, [r7, #15]
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	791b      	ldrb	r3, [r3, #4]
 80011c4:	7bfa      	ldrb	r2, [r7, #15]
 80011c6:	429a      	cmp	r2, r3
 80011c8:	d3b5      	bcc.n	8001136 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	6818      	ldr	r0, [r3, #0]
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	7c1a      	ldrb	r2, [r3, #16]
 80011d2:	f88d 2000 	strb.w	r2, [sp]
 80011d6:	3304      	adds	r3, #4
 80011d8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80011da:	f002 faf7 	bl	80037cc <USB_DevInit>
 80011de:	4603      	mov	r3, r0
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d005      	beq.n	80011f0 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	2202      	movs	r2, #2
 80011e8:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80011ec:	2301      	movs	r3, #1
 80011ee:	e00c      	b.n	800120a <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	2200      	movs	r2, #0
 80011f4:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	2201      	movs	r2, #1
 80011fa:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	4618      	mov	r0, r3
 8001204:	f003 fb41 	bl	800488a <USB_DevDisconnect>

  return HAL_OK;
 8001208:	2300      	movs	r3, #0
}
 800120a:	4618      	mov	r0, r3
 800120c:	3710      	adds	r7, #16
 800120e:	46bd      	mov	sp, r7
 8001210:	bd80      	pop	{r7, pc}

08001212 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001212:	b580      	push	{r7, lr}
 8001214:	b084      	sub	sp, #16
 8001216:	af00      	add	r7, sp, #0
 8001218:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001226:	2b01      	cmp	r3, #1
 8001228:	d101      	bne.n	800122e <HAL_PCD_Start+0x1c>
 800122a:	2302      	movs	r3, #2
 800122c:	e022      	b.n	8001274 <HAL_PCD_Start+0x62>
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	2201      	movs	r2, #1
 8001232:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	68db      	ldr	r3, [r3, #12]
 800123a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800123e:	2b00      	cmp	r3, #0
 8001240:	d009      	beq.n	8001256 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8001246:	2b01      	cmp	r3, #1
 8001248:	d105      	bne.n	8001256 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800124a:	68fb      	ldr	r3, [r7, #12]
 800124c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800124e:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8001252:	68fb      	ldr	r3, [r7, #12]
 8001254:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	4618      	mov	r0, r3
 800125c:	f002 fa48 	bl	80036f0 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	4618      	mov	r0, r3
 8001266:	f003 faef 	bl	8004848 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	2200      	movs	r2, #0
 800126e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8001272:	2300      	movs	r3, #0
}
 8001274:	4618      	mov	r0, r3
 8001276:	3710      	adds	r7, #16
 8001278:	46bd      	mov	sp, r7
 800127a:	bd80      	pop	{r7, pc}

0800127c <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800127c:	b590      	push	{r4, r7, lr}
 800127e:	b08d      	sub	sp, #52	@ 0x34
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800128a:	6a3b      	ldr	r3, [r7, #32]
 800128c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	4618      	mov	r0, r3
 8001294:	f003 fbad 	bl	80049f2 <USB_GetMode>
 8001298:	4603      	mov	r3, r0
 800129a:	2b00      	cmp	r3, #0
 800129c:	f040 848c 	bne.w	8001bb8 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	4618      	mov	r0, r3
 80012a6:	f003 fb11 	bl	80048cc <USB_ReadInterrupts>
 80012aa:	4603      	mov	r3, r0
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	f000 8482 	beq.w	8001bb6 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80012b2:	69fb      	ldr	r3, [r7, #28]
 80012b4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80012b8:	689b      	ldr	r3, [r3, #8]
 80012ba:	0a1b      	lsrs	r3, r3, #8
 80012bc:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	4618      	mov	r0, r3
 80012cc:	f003 fafe 	bl	80048cc <USB_ReadInterrupts>
 80012d0:	4603      	mov	r3, r0
 80012d2:	f003 0302 	and.w	r3, r3, #2
 80012d6:	2b02      	cmp	r3, #2
 80012d8:	d107      	bne.n	80012ea <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	695a      	ldr	r2, [r3, #20]
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	f002 0202 	and.w	r2, r2, #2
 80012e8:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	4618      	mov	r0, r3
 80012f0:	f003 faec 	bl	80048cc <USB_ReadInterrupts>
 80012f4:	4603      	mov	r3, r0
 80012f6:	f003 0310 	and.w	r3, r3, #16
 80012fa:	2b10      	cmp	r3, #16
 80012fc:	d161      	bne.n	80013c2 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	699a      	ldr	r2, [r3, #24]
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	f022 0210 	bic.w	r2, r2, #16
 800130c:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800130e:	6a3b      	ldr	r3, [r7, #32]
 8001310:	6a1b      	ldr	r3, [r3, #32]
 8001312:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8001314:	69bb      	ldr	r3, [r7, #24]
 8001316:	f003 020f 	and.w	r2, r3, #15
 800131a:	4613      	mov	r3, r2
 800131c:	00db      	lsls	r3, r3, #3
 800131e:	4413      	add	r3, r2
 8001320:	009b      	lsls	r3, r3, #2
 8001322:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001326:	687a      	ldr	r2, [r7, #4]
 8001328:	4413      	add	r3, r2
 800132a:	3304      	adds	r3, #4
 800132c:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800132e:	69bb      	ldr	r3, [r7, #24]
 8001330:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8001334:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8001338:	d124      	bne.n	8001384 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800133a:	69ba      	ldr	r2, [r7, #24]
 800133c:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8001340:	4013      	ands	r3, r2
 8001342:	2b00      	cmp	r3, #0
 8001344:	d035      	beq.n	80013b2 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001346:	697b      	ldr	r3, [r7, #20]
 8001348:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800134a:	69bb      	ldr	r3, [r7, #24]
 800134c:	091b      	lsrs	r3, r3, #4
 800134e:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001350:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001354:	b29b      	uxth	r3, r3
 8001356:	461a      	mov	r2, r3
 8001358:	6a38      	ldr	r0, [r7, #32]
 800135a:	f003 f923 	bl	80045a4 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800135e:	697b      	ldr	r3, [r7, #20]
 8001360:	68da      	ldr	r2, [r3, #12]
 8001362:	69bb      	ldr	r3, [r7, #24]
 8001364:	091b      	lsrs	r3, r3, #4
 8001366:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800136a:	441a      	add	r2, r3
 800136c:	697b      	ldr	r3, [r7, #20]
 800136e:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001370:	697b      	ldr	r3, [r7, #20]
 8001372:	695a      	ldr	r2, [r3, #20]
 8001374:	69bb      	ldr	r3, [r7, #24]
 8001376:	091b      	lsrs	r3, r3, #4
 8001378:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800137c:	441a      	add	r2, r3
 800137e:	697b      	ldr	r3, [r7, #20]
 8001380:	615a      	str	r2, [r3, #20]
 8001382:	e016      	b.n	80013b2 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8001384:	69bb      	ldr	r3, [r7, #24]
 8001386:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 800138a:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800138e:	d110      	bne.n	80013b2 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8001396:	2208      	movs	r2, #8
 8001398:	4619      	mov	r1, r3
 800139a:	6a38      	ldr	r0, [r7, #32]
 800139c:	f003 f902 	bl	80045a4 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80013a0:	697b      	ldr	r3, [r7, #20]
 80013a2:	695a      	ldr	r2, [r3, #20]
 80013a4:	69bb      	ldr	r3, [r7, #24]
 80013a6:	091b      	lsrs	r3, r3, #4
 80013a8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80013ac:	441a      	add	r2, r3
 80013ae:	697b      	ldr	r3, [r7, #20]
 80013b0:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	699a      	ldr	r2, [r3, #24]
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	f042 0210 	orr.w	r2, r2, #16
 80013c0:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	4618      	mov	r0, r3
 80013c8:	f003 fa80 	bl	80048cc <USB_ReadInterrupts>
 80013cc:	4603      	mov	r3, r0
 80013ce:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80013d2:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80013d6:	f040 80a7 	bne.w	8001528 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80013da:	2300      	movs	r3, #0
 80013dc:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	4618      	mov	r0, r3
 80013e4:	f003 fa85 	bl	80048f2 <USB_ReadDevAllOutEpInterrupt>
 80013e8:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 80013ea:	e099      	b.n	8001520 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80013ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80013ee:	f003 0301 	and.w	r3, r3, #1
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	f000 808e 	beq.w	8001514 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80013fe:	b2d2      	uxtb	r2, r2
 8001400:	4611      	mov	r1, r2
 8001402:	4618      	mov	r0, r3
 8001404:	f003 faa9 	bl	800495a <USB_ReadDevOutEPInterrupt>
 8001408:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800140a:	693b      	ldr	r3, [r7, #16]
 800140c:	f003 0301 	and.w	r3, r3, #1
 8001410:	2b00      	cmp	r3, #0
 8001412:	d00c      	beq.n	800142e <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001414:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001416:	015a      	lsls	r2, r3, #5
 8001418:	69fb      	ldr	r3, [r7, #28]
 800141a:	4413      	add	r3, r2
 800141c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001420:	461a      	mov	r2, r3
 8001422:	2301      	movs	r3, #1
 8001424:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001426:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001428:	6878      	ldr	r0, [r7, #4]
 800142a:	f000 fe8b 	bl	8002144 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800142e:	693b      	ldr	r3, [r7, #16]
 8001430:	f003 0308 	and.w	r3, r3, #8
 8001434:	2b00      	cmp	r3, #0
 8001436:	d00c      	beq.n	8001452 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001438:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800143a:	015a      	lsls	r2, r3, #5
 800143c:	69fb      	ldr	r3, [r7, #28]
 800143e:	4413      	add	r3, r2
 8001440:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001444:	461a      	mov	r2, r3
 8001446:	2308      	movs	r3, #8
 8001448:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800144a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800144c:	6878      	ldr	r0, [r7, #4]
 800144e:	f000 ff61 	bl	8002314 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001452:	693b      	ldr	r3, [r7, #16]
 8001454:	f003 0310 	and.w	r3, r3, #16
 8001458:	2b00      	cmp	r3, #0
 800145a:	d008      	beq.n	800146e <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800145c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800145e:	015a      	lsls	r2, r3, #5
 8001460:	69fb      	ldr	r3, [r7, #28]
 8001462:	4413      	add	r3, r2
 8001464:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001468:	461a      	mov	r2, r3
 800146a:	2310      	movs	r3, #16
 800146c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800146e:	693b      	ldr	r3, [r7, #16]
 8001470:	f003 0302 	and.w	r3, r3, #2
 8001474:	2b00      	cmp	r3, #0
 8001476:	d030      	beq.n	80014da <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8001478:	6a3b      	ldr	r3, [r7, #32]
 800147a:	695b      	ldr	r3, [r3, #20]
 800147c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001480:	2b80      	cmp	r3, #128	@ 0x80
 8001482:	d109      	bne.n	8001498 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8001484:	69fb      	ldr	r3, [r7, #28]
 8001486:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800148a:	685b      	ldr	r3, [r3, #4]
 800148c:	69fa      	ldr	r2, [r7, #28]
 800148e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001492:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001496:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8001498:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800149a:	4613      	mov	r3, r2
 800149c:	00db      	lsls	r3, r3, #3
 800149e:	4413      	add	r3, r2
 80014a0:	009b      	lsls	r3, r3, #2
 80014a2:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80014a6:	687a      	ldr	r2, [r7, #4]
 80014a8:	4413      	add	r3, r2
 80014aa:	3304      	adds	r3, #4
 80014ac:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80014ae:	697b      	ldr	r3, [r7, #20]
 80014b0:	78db      	ldrb	r3, [r3, #3]
 80014b2:	2b01      	cmp	r3, #1
 80014b4:	d108      	bne.n	80014c8 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80014b6:	697b      	ldr	r3, [r7, #20]
 80014b8:	2200      	movs	r2, #0
 80014ba:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80014bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014be:	b2db      	uxtb	r3, r3
 80014c0:	4619      	mov	r1, r3
 80014c2:	6878      	ldr	r0, [r7, #4]
 80014c4:	f005 fc96 	bl	8006df4 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80014c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014ca:	015a      	lsls	r2, r3, #5
 80014cc:	69fb      	ldr	r3, [r7, #28]
 80014ce:	4413      	add	r3, r2
 80014d0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80014d4:	461a      	mov	r2, r3
 80014d6:	2302      	movs	r3, #2
 80014d8:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80014da:	693b      	ldr	r3, [r7, #16]
 80014dc:	f003 0320 	and.w	r3, r3, #32
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d008      	beq.n	80014f6 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80014e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014e6:	015a      	lsls	r2, r3, #5
 80014e8:	69fb      	ldr	r3, [r7, #28]
 80014ea:	4413      	add	r3, r2
 80014ec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80014f0:	461a      	mov	r2, r3
 80014f2:	2320      	movs	r3, #32
 80014f4:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80014f6:	693b      	ldr	r3, [r7, #16]
 80014f8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d009      	beq.n	8001514 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8001500:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001502:	015a      	lsls	r2, r3, #5
 8001504:	69fb      	ldr	r3, [r7, #28]
 8001506:	4413      	add	r3, r2
 8001508:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800150c:	461a      	mov	r2, r3
 800150e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001512:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8001514:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001516:	3301      	adds	r3, #1
 8001518:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800151a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800151c:	085b      	lsrs	r3, r3, #1
 800151e:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8001520:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001522:	2b00      	cmp	r3, #0
 8001524:	f47f af62 	bne.w	80013ec <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	4618      	mov	r0, r3
 800152e:	f003 f9cd 	bl	80048cc <USB_ReadInterrupts>
 8001532:	4603      	mov	r3, r0
 8001534:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001538:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800153c:	f040 80db 	bne.w	80016f6 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	4618      	mov	r0, r3
 8001546:	f003 f9ee 	bl	8004926 <USB_ReadDevAllInEpInterrupt>
 800154a:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 800154c:	2300      	movs	r3, #0
 800154e:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8001550:	e0cd      	b.n	80016ee <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001552:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001554:	f003 0301 	and.w	r3, r3, #1
 8001558:	2b00      	cmp	r3, #0
 800155a:	f000 80c2 	beq.w	80016e2 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001564:	b2d2      	uxtb	r2, r2
 8001566:	4611      	mov	r1, r2
 8001568:	4618      	mov	r0, r3
 800156a:	f003 fa14 	bl	8004996 <USB_ReadDevInEPInterrupt>
 800156e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001570:	693b      	ldr	r3, [r7, #16]
 8001572:	f003 0301 	and.w	r3, r3, #1
 8001576:	2b00      	cmp	r3, #0
 8001578:	d057      	beq.n	800162a <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800157a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800157c:	f003 030f 	and.w	r3, r3, #15
 8001580:	2201      	movs	r2, #1
 8001582:	fa02 f303 	lsl.w	r3, r2, r3
 8001586:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001588:	69fb      	ldr	r3, [r7, #28]
 800158a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800158e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	43db      	mvns	r3, r3
 8001594:	69f9      	ldr	r1, [r7, #28]
 8001596:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800159a:	4013      	ands	r3, r2
 800159c:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800159e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015a0:	015a      	lsls	r2, r3, #5
 80015a2:	69fb      	ldr	r3, [r7, #28]
 80015a4:	4413      	add	r3, r2
 80015a6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80015aa:	461a      	mov	r2, r3
 80015ac:	2301      	movs	r3, #1
 80015ae:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	799b      	ldrb	r3, [r3, #6]
 80015b4:	2b01      	cmp	r3, #1
 80015b6:	d132      	bne.n	800161e <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80015b8:	6879      	ldr	r1, [r7, #4]
 80015ba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80015bc:	4613      	mov	r3, r2
 80015be:	00db      	lsls	r3, r3, #3
 80015c0:	4413      	add	r3, r2
 80015c2:	009b      	lsls	r3, r3, #2
 80015c4:	440b      	add	r3, r1
 80015c6:	3320      	adds	r3, #32
 80015c8:	6819      	ldr	r1, [r3, #0]
 80015ca:	6878      	ldr	r0, [r7, #4]
 80015cc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80015ce:	4613      	mov	r3, r2
 80015d0:	00db      	lsls	r3, r3, #3
 80015d2:	4413      	add	r3, r2
 80015d4:	009b      	lsls	r3, r3, #2
 80015d6:	4403      	add	r3, r0
 80015d8:	331c      	adds	r3, #28
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	4419      	add	r1, r3
 80015de:	6878      	ldr	r0, [r7, #4]
 80015e0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80015e2:	4613      	mov	r3, r2
 80015e4:	00db      	lsls	r3, r3, #3
 80015e6:	4413      	add	r3, r2
 80015e8:	009b      	lsls	r3, r3, #2
 80015ea:	4403      	add	r3, r0
 80015ec:	3320      	adds	r3, #32
 80015ee:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80015f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d113      	bne.n	800161e <HAL_PCD_IRQHandler+0x3a2>
 80015f6:	6879      	ldr	r1, [r7, #4]
 80015f8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80015fa:	4613      	mov	r3, r2
 80015fc:	00db      	lsls	r3, r3, #3
 80015fe:	4413      	add	r3, r2
 8001600:	009b      	lsls	r3, r3, #2
 8001602:	440b      	add	r3, r1
 8001604:	3324      	adds	r3, #36	@ 0x24
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	2b00      	cmp	r3, #0
 800160a:	d108      	bne.n	800161e <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	6818      	ldr	r0, [r3, #0]
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8001616:	461a      	mov	r2, r3
 8001618:	2101      	movs	r1, #1
 800161a:	f003 fa1b 	bl	8004a54 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800161e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001620:	b2db      	uxtb	r3, r3
 8001622:	4619      	mov	r1, r3
 8001624:	6878      	ldr	r0, [r7, #4]
 8001626:	f005 fb60 	bl	8006cea <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800162a:	693b      	ldr	r3, [r7, #16]
 800162c:	f003 0308 	and.w	r3, r3, #8
 8001630:	2b00      	cmp	r3, #0
 8001632:	d008      	beq.n	8001646 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001634:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001636:	015a      	lsls	r2, r3, #5
 8001638:	69fb      	ldr	r3, [r7, #28]
 800163a:	4413      	add	r3, r2
 800163c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001640:	461a      	mov	r2, r3
 8001642:	2308      	movs	r3, #8
 8001644:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8001646:	693b      	ldr	r3, [r7, #16]
 8001648:	f003 0310 	and.w	r3, r3, #16
 800164c:	2b00      	cmp	r3, #0
 800164e:	d008      	beq.n	8001662 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8001650:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001652:	015a      	lsls	r2, r3, #5
 8001654:	69fb      	ldr	r3, [r7, #28]
 8001656:	4413      	add	r3, r2
 8001658:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800165c:	461a      	mov	r2, r3
 800165e:	2310      	movs	r3, #16
 8001660:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8001662:	693b      	ldr	r3, [r7, #16]
 8001664:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001668:	2b00      	cmp	r3, #0
 800166a:	d008      	beq.n	800167e <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800166c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800166e:	015a      	lsls	r2, r3, #5
 8001670:	69fb      	ldr	r3, [r7, #28]
 8001672:	4413      	add	r3, r2
 8001674:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001678:	461a      	mov	r2, r3
 800167a:	2340      	movs	r3, #64	@ 0x40
 800167c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800167e:	693b      	ldr	r3, [r7, #16]
 8001680:	f003 0302 	and.w	r3, r3, #2
 8001684:	2b00      	cmp	r3, #0
 8001686:	d023      	beq.n	80016d0 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8001688:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800168a:	6a38      	ldr	r0, [r7, #32]
 800168c:	f002 fa02 	bl	8003a94 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8001690:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001692:	4613      	mov	r3, r2
 8001694:	00db      	lsls	r3, r3, #3
 8001696:	4413      	add	r3, r2
 8001698:	009b      	lsls	r3, r3, #2
 800169a:	3310      	adds	r3, #16
 800169c:	687a      	ldr	r2, [r7, #4]
 800169e:	4413      	add	r3, r2
 80016a0:	3304      	adds	r3, #4
 80016a2:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80016a4:	697b      	ldr	r3, [r7, #20]
 80016a6:	78db      	ldrb	r3, [r3, #3]
 80016a8:	2b01      	cmp	r3, #1
 80016aa:	d108      	bne.n	80016be <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80016ac:	697b      	ldr	r3, [r7, #20]
 80016ae:	2200      	movs	r2, #0
 80016b0:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80016b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016b4:	b2db      	uxtb	r3, r3
 80016b6:	4619      	mov	r1, r3
 80016b8:	6878      	ldr	r0, [r7, #4]
 80016ba:	f005 fbad 	bl	8006e18 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80016be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016c0:	015a      	lsls	r2, r3, #5
 80016c2:	69fb      	ldr	r3, [r7, #28]
 80016c4:	4413      	add	r3, r2
 80016c6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80016ca:	461a      	mov	r2, r3
 80016cc:	2302      	movs	r3, #2
 80016ce:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80016d0:	693b      	ldr	r3, [r7, #16]
 80016d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d003      	beq.n	80016e2 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80016da:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80016dc:	6878      	ldr	r0, [r7, #4]
 80016de:	f000 fca5 	bl	800202c <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80016e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016e4:	3301      	adds	r3, #1
 80016e6:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80016e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80016ea:	085b      	lsrs	r3, r3, #1
 80016ec:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80016ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	f47f af2e 	bne.w	8001552 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	4618      	mov	r0, r3
 80016fc:	f003 f8e6 	bl	80048cc <USB_ReadInterrupts>
 8001700:	4603      	mov	r3, r0
 8001702:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8001706:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800170a:	d122      	bne.n	8001752 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800170c:	69fb      	ldr	r3, [r7, #28]
 800170e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001712:	685b      	ldr	r3, [r3, #4]
 8001714:	69fa      	ldr	r2, [r7, #28]
 8001716:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800171a:	f023 0301 	bic.w	r3, r3, #1
 800171e:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8001726:	2b01      	cmp	r3, #1
 8001728:	d108      	bne.n	800173c <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	2200      	movs	r2, #0
 800172e:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001732:	2100      	movs	r1, #0
 8001734:	6878      	ldr	r0, [r7, #4]
 8001736:	f000 fe8b 	bl	8002450 <HAL_PCDEx_LPM_Callback>
 800173a:	e002      	b.n	8001742 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800173c:	6878      	ldr	r0, [r7, #4]
 800173e:	f005 fb4b 	bl	8006dd8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	695a      	ldr	r2, [r3, #20]
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8001750:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	4618      	mov	r0, r3
 8001758:	f003 f8b8 	bl	80048cc <USB_ReadInterrupts>
 800175c:	4603      	mov	r3, r0
 800175e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001762:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001766:	d112      	bne.n	800178e <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8001768:	69fb      	ldr	r3, [r7, #28]
 800176a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800176e:	689b      	ldr	r3, [r3, #8]
 8001770:	f003 0301 	and.w	r3, r3, #1
 8001774:	2b01      	cmp	r3, #1
 8001776:	d102      	bne.n	800177e <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001778:	6878      	ldr	r0, [r7, #4]
 800177a:	f005 fb07 	bl	8006d8c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	695a      	ldr	r2, [r3, #20]
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 800178c:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	4618      	mov	r0, r3
 8001794:	f003 f89a 	bl	80048cc <USB_ReadInterrupts>
 8001798:	4603      	mov	r3, r0
 800179a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800179e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80017a2:	f040 80b7 	bne.w	8001914 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80017a6:	69fb      	ldr	r3, [r7, #28]
 80017a8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80017ac:	685b      	ldr	r3, [r3, #4]
 80017ae:	69fa      	ldr	r2, [r7, #28]
 80017b0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80017b4:	f023 0301 	bic.w	r3, r3, #1
 80017b8:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	2110      	movs	r1, #16
 80017c0:	4618      	mov	r0, r3
 80017c2:	f002 f967 	bl	8003a94 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80017c6:	2300      	movs	r3, #0
 80017c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80017ca:	e046      	b.n	800185a <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80017cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80017ce:	015a      	lsls	r2, r3, #5
 80017d0:	69fb      	ldr	r3, [r7, #28]
 80017d2:	4413      	add	r3, r2
 80017d4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80017d8:	461a      	mov	r2, r3
 80017da:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80017de:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80017e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80017e2:	015a      	lsls	r2, r3, #5
 80017e4:	69fb      	ldr	r3, [r7, #28]
 80017e6:	4413      	add	r3, r2
 80017e8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80017f0:	0151      	lsls	r1, r2, #5
 80017f2:	69fa      	ldr	r2, [r7, #28]
 80017f4:	440a      	add	r2, r1
 80017f6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80017fa:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80017fe:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8001800:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001802:	015a      	lsls	r2, r3, #5
 8001804:	69fb      	ldr	r3, [r7, #28]
 8001806:	4413      	add	r3, r2
 8001808:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800180c:	461a      	mov	r2, r3
 800180e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8001812:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8001814:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001816:	015a      	lsls	r2, r3, #5
 8001818:	69fb      	ldr	r3, [r7, #28]
 800181a:	4413      	add	r3, r2
 800181c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001824:	0151      	lsls	r1, r2, #5
 8001826:	69fa      	ldr	r2, [r7, #28]
 8001828:	440a      	add	r2, r1
 800182a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800182e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8001832:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8001834:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001836:	015a      	lsls	r2, r3, #5
 8001838:	69fb      	ldr	r3, [r7, #28]
 800183a:	4413      	add	r3, r2
 800183c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001844:	0151      	lsls	r1, r2, #5
 8001846:	69fa      	ldr	r2, [r7, #28]
 8001848:	440a      	add	r2, r1
 800184a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800184e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8001852:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001854:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001856:	3301      	adds	r3, #1
 8001858:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	791b      	ldrb	r3, [r3, #4]
 800185e:	461a      	mov	r2, r3
 8001860:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001862:	4293      	cmp	r3, r2
 8001864:	d3b2      	bcc.n	80017cc <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8001866:	69fb      	ldr	r3, [r7, #28]
 8001868:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800186c:	69db      	ldr	r3, [r3, #28]
 800186e:	69fa      	ldr	r2, [r7, #28]
 8001870:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001874:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8001878:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	7bdb      	ldrb	r3, [r3, #15]
 800187e:	2b00      	cmp	r3, #0
 8001880:	d016      	beq.n	80018b0 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8001882:	69fb      	ldr	r3, [r7, #28]
 8001884:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001888:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800188c:	69fa      	ldr	r2, [r7, #28]
 800188e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001892:	f043 030b 	orr.w	r3, r3, #11
 8001896:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800189a:	69fb      	ldr	r3, [r7, #28]
 800189c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80018a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018a2:	69fa      	ldr	r2, [r7, #28]
 80018a4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80018a8:	f043 030b 	orr.w	r3, r3, #11
 80018ac:	6453      	str	r3, [r2, #68]	@ 0x44
 80018ae:	e015      	b.n	80018dc <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80018b0:	69fb      	ldr	r3, [r7, #28]
 80018b2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80018b6:	695b      	ldr	r3, [r3, #20]
 80018b8:	69fa      	ldr	r2, [r7, #28]
 80018ba:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80018be:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80018c2:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 80018c6:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80018c8:	69fb      	ldr	r3, [r7, #28]
 80018ca:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80018ce:	691b      	ldr	r3, [r3, #16]
 80018d0:	69fa      	ldr	r2, [r7, #28]
 80018d2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80018d6:	f043 030b 	orr.w	r3, r3, #11
 80018da:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80018dc:	69fb      	ldr	r3, [r7, #28]
 80018de:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	69fa      	ldr	r2, [r7, #28]
 80018e6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80018ea:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80018ee:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	6818      	ldr	r0, [r3, #0]
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80018fe:	461a      	mov	r2, r3
 8001900:	f003 f8a8 	bl	8004a54 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	695a      	ldr	r2, [r3, #20]
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8001912:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	4618      	mov	r0, r3
 800191a:	f002 ffd7 	bl	80048cc <USB_ReadInterrupts>
 800191e:	4603      	mov	r3, r0
 8001920:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001924:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001928:	d123      	bne.n	8001972 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	4618      	mov	r0, r3
 8001930:	f003 f86d 	bl	8004a0e <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	4618      	mov	r0, r3
 800193a:	f002 f924 	bl	8003b86 <USB_GetDevSpeed>
 800193e:	4603      	mov	r3, r0
 8001940:	461a      	mov	r2, r3
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681c      	ldr	r4, [r3, #0]
 800194a:	f001 f9f1 	bl	8002d30 <HAL_RCC_GetHCLKFreq>
 800194e:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001954:	461a      	mov	r2, r3
 8001956:	4620      	mov	r0, r4
 8001958:	f001 fe28 	bl	80035ac <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800195c:	6878      	ldr	r0, [r7, #4]
 800195e:	f005 f9ec 	bl	8006d3a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	695a      	ldr	r2, [r3, #20]
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8001970:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	4618      	mov	r0, r3
 8001978:	f002 ffa8 	bl	80048cc <USB_ReadInterrupts>
 800197c:	4603      	mov	r3, r0
 800197e:	f003 0308 	and.w	r3, r3, #8
 8001982:	2b08      	cmp	r3, #8
 8001984:	d10a      	bne.n	800199c <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8001986:	6878      	ldr	r0, [r7, #4]
 8001988:	f005 f9c9 	bl	8006d1e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	695a      	ldr	r2, [r3, #20]
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f002 0208 	and.w	r2, r2, #8
 800199a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	4618      	mov	r0, r3
 80019a2:	f002 ff93 	bl	80048cc <USB_ReadInterrupts>
 80019a6:	4603      	mov	r3, r0
 80019a8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80019ac:	2b80      	cmp	r3, #128	@ 0x80
 80019ae:	d123      	bne.n	80019f8 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80019b0:	6a3b      	ldr	r3, [r7, #32]
 80019b2:	699b      	ldr	r3, [r3, #24]
 80019b4:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80019b8:	6a3b      	ldr	r3, [r7, #32]
 80019ba:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80019bc:	2301      	movs	r3, #1
 80019be:	627b      	str	r3, [r7, #36]	@ 0x24
 80019c0:	e014      	b.n	80019ec <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80019c2:	6879      	ldr	r1, [r7, #4]
 80019c4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80019c6:	4613      	mov	r3, r2
 80019c8:	00db      	lsls	r3, r3, #3
 80019ca:	4413      	add	r3, r2
 80019cc:	009b      	lsls	r3, r3, #2
 80019ce:	440b      	add	r3, r1
 80019d0:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80019d4:	781b      	ldrb	r3, [r3, #0]
 80019d6:	2b01      	cmp	r3, #1
 80019d8:	d105      	bne.n	80019e6 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80019da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019dc:	b2db      	uxtb	r3, r3
 80019de:	4619      	mov	r1, r3
 80019e0:	6878      	ldr	r0, [r7, #4]
 80019e2:	f000 faf2 	bl	8001fca <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80019e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019e8:	3301      	adds	r3, #1
 80019ea:	627b      	str	r3, [r7, #36]	@ 0x24
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	791b      	ldrb	r3, [r3, #4]
 80019f0:	461a      	mov	r2, r3
 80019f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019f4:	4293      	cmp	r3, r2
 80019f6:	d3e4      	bcc.n	80019c2 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	4618      	mov	r0, r3
 80019fe:	f002 ff65 	bl	80048cc <USB_ReadInterrupts>
 8001a02:	4603      	mov	r3, r0
 8001a04:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001a08:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8001a0c:	d13c      	bne.n	8001a88 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001a0e:	2301      	movs	r3, #1
 8001a10:	627b      	str	r3, [r7, #36]	@ 0x24
 8001a12:	e02b      	b.n	8001a6c <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8001a14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a16:	015a      	lsls	r2, r3, #5
 8001a18:	69fb      	ldr	r3, [r7, #28]
 8001a1a:	4413      	add	r3, r2
 8001a1c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001a24:	6879      	ldr	r1, [r7, #4]
 8001a26:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001a28:	4613      	mov	r3, r2
 8001a2a:	00db      	lsls	r3, r3, #3
 8001a2c:	4413      	add	r3, r2
 8001a2e:	009b      	lsls	r3, r3, #2
 8001a30:	440b      	add	r3, r1
 8001a32:	3318      	adds	r3, #24
 8001a34:	781b      	ldrb	r3, [r3, #0]
 8001a36:	2b01      	cmp	r3, #1
 8001a38:	d115      	bne.n	8001a66 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8001a3a:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	da12      	bge.n	8001a66 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8001a40:	6879      	ldr	r1, [r7, #4]
 8001a42:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001a44:	4613      	mov	r3, r2
 8001a46:	00db      	lsls	r3, r3, #3
 8001a48:	4413      	add	r3, r2
 8001a4a:	009b      	lsls	r3, r3, #2
 8001a4c:	440b      	add	r3, r1
 8001a4e:	3317      	adds	r3, #23
 8001a50:	2201      	movs	r2, #1
 8001a52:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8001a54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a56:	b2db      	uxtb	r3, r3
 8001a58:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001a5c:	b2db      	uxtb	r3, r3
 8001a5e:	4619      	mov	r1, r3
 8001a60:	6878      	ldr	r0, [r7, #4]
 8001a62:	f000 fab2 	bl	8001fca <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001a66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a68:	3301      	adds	r3, #1
 8001a6a:	627b      	str	r3, [r7, #36]	@ 0x24
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	791b      	ldrb	r3, [r3, #4]
 8001a70:	461a      	mov	r2, r3
 8001a72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a74:	4293      	cmp	r3, r2
 8001a76:	d3cd      	bcc.n	8001a14 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	695a      	ldr	r2, [r3, #20]
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8001a86:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	f002 ff1d 	bl	80048cc <USB_ReadInterrupts>
 8001a92:	4603      	mov	r3, r0
 8001a94:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001a98:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8001a9c:	d156      	bne.n	8001b4c <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001a9e:	2301      	movs	r3, #1
 8001aa0:	627b      	str	r3, [r7, #36]	@ 0x24
 8001aa2:	e045      	b.n	8001b30 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8001aa4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001aa6:	015a      	lsls	r2, r3, #5
 8001aa8:	69fb      	ldr	r3, [r7, #28]
 8001aaa:	4413      	add	r3, r2
 8001aac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001ab4:	6879      	ldr	r1, [r7, #4]
 8001ab6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001ab8:	4613      	mov	r3, r2
 8001aba:	00db      	lsls	r3, r3, #3
 8001abc:	4413      	add	r3, r2
 8001abe:	009b      	lsls	r3, r3, #2
 8001ac0:	440b      	add	r3, r1
 8001ac2:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8001ac6:	781b      	ldrb	r3, [r3, #0]
 8001ac8:	2b01      	cmp	r3, #1
 8001aca:	d12e      	bne.n	8001b2a <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001acc:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	da2b      	bge.n	8001b2a <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8001ad2:	69bb      	ldr	r3, [r7, #24]
 8001ad4:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8001ade:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001ae2:	429a      	cmp	r2, r3
 8001ae4:	d121      	bne.n	8001b2a <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8001ae6:	6879      	ldr	r1, [r7, #4]
 8001ae8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001aea:	4613      	mov	r3, r2
 8001aec:	00db      	lsls	r3, r3, #3
 8001aee:	4413      	add	r3, r2
 8001af0:	009b      	lsls	r3, r3, #2
 8001af2:	440b      	add	r3, r1
 8001af4:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8001af8:	2201      	movs	r2, #1
 8001afa:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8001afc:	6a3b      	ldr	r3, [r7, #32]
 8001afe:	699b      	ldr	r3, [r3, #24]
 8001b00:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8001b04:	6a3b      	ldr	r3, [r7, #32]
 8001b06:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8001b08:	6a3b      	ldr	r3, [r7, #32]
 8001b0a:	695b      	ldr	r3, [r3, #20]
 8001b0c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d10a      	bne.n	8001b2a <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8001b14:	69fb      	ldr	r3, [r7, #28]
 8001b16:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001b1a:	685b      	ldr	r3, [r3, #4]
 8001b1c:	69fa      	ldr	r2, [r7, #28]
 8001b1e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001b22:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001b26:	6053      	str	r3, [r2, #4]
            break;
 8001b28:	e008      	b.n	8001b3c <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001b2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b2c:	3301      	adds	r3, #1
 8001b2e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	791b      	ldrb	r3, [r3, #4]
 8001b34:	461a      	mov	r2, r3
 8001b36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b38:	4293      	cmp	r3, r2
 8001b3a:	d3b3      	bcc.n	8001aa4 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	695a      	ldr	r2, [r3, #20]
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8001b4a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	4618      	mov	r0, r3
 8001b52:	f002 febb 	bl	80048cc <USB_ReadInterrupts>
 8001b56:	4603      	mov	r3, r0
 8001b58:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8001b5c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001b60:	d10a      	bne.n	8001b78 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8001b62:	6878      	ldr	r0, [r7, #4]
 8001b64:	f005 f96a 	bl	8006e3c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	695a      	ldr	r2, [r3, #20]
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8001b76:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	f002 fea5 	bl	80048cc <USB_ReadInterrupts>
 8001b82:	4603      	mov	r3, r0
 8001b84:	f003 0304 	and.w	r3, r3, #4
 8001b88:	2b04      	cmp	r3, #4
 8001b8a:	d115      	bne.n	8001bb8 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	685b      	ldr	r3, [r3, #4]
 8001b92:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8001b94:	69bb      	ldr	r3, [r7, #24]
 8001b96:	f003 0304 	and.w	r3, r3, #4
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d002      	beq.n	8001ba4 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8001b9e:	6878      	ldr	r0, [r7, #4]
 8001ba0:	f005 f95a 	bl	8006e58 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	6859      	ldr	r1, [r3, #4]
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	69ba      	ldr	r2, [r7, #24]
 8001bb0:	430a      	orrs	r2, r1
 8001bb2:	605a      	str	r2, [r3, #4]
 8001bb4:	e000      	b.n	8001bb8 <HAL_PCD_IRQHandler+0x93c>
      return;
 8001bb6:	bf00      	nop
    }
  }
}
 8001bb8:	3734      	adds	r7, #52	@ 0x34
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bd90      	pop	{r4, r7, pc}

08001bbe <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001bbe:	b580      	push	{r7, lr}
 8001bc0:	b082      	sub	sp, #8
 8001bc2:	af00      	add	r7, sp, #0
 8001bc4:	6078      	str	r0, [r7, #4]
 8001bc6:	460b      	mov	r3, r1
 8001bc8:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001bd0:	2b01      	cmp	r3, #1
 8001bd2:	d101      	bne.n	8001bd8 <HAL_PCD_SetAddress+0x1a>
 8001bd4:	2302      	movs	r3, #2
 8001bd6:	e012      	b.n	8001bfe <HAL_PCD_SetAddress+0x40>
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	2201      	movs	r2, #1
 8001bdc:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	78fa      	ldrb	r2, [r7, #3]
 8001be4:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	78fa      	ldrb	r2, [r7, #3]
 8001bec:	4611      	mov	r1, r2
 8001bee:	4618      	mov	r0, r3
 8001bf0:	f002 fe04 	bl	80047fc <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8001bfc:	2300      	movs	r3, #0
}
 8001bfe:	4618      	mov	r0, r3
 8001c00:	3708      	adds	r7, #8
 8001c02:	46bd      	mov	sp, r7
 8001c04:	bd80      	pop	{r7, pc}

08001c06 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001c06:	b580      	push	{r7, lr}
 8001c08:	b084      	sub	sp, #16
 8001c0a:	af00      	add	r7, sp, #0
 8001c0c:	6078      	str	r0, [r7, #4]
 8001c0e:	4608      	mov	r0, r1
 8001c10:	4611      	mov	r1, r2
 8001c12:	461a      	mov	r2, r3
 8001c14:	4603      	mov	r3, r0
 8001c16:	70fb      	strb	r3, [r7, #3]
 8001c18:	460b      	mov	r3, r1
 8001c1a:	803b      	strh	r3, [r7, #0]
 8001c1c:	4613      	mov	r3, r2
 8001c1e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8001c20:	2300      	movs	r3, #0
 8001c22:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001c24:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	da0f      	bge.n	8001c4c <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001c2c:	78fb      	ldrb	r3, [r7, #3]
 8001c2e:	f003 020f 	and.w	r2, r3, #15
 8001c32:	4613      	mov	r3, r2
 8001c34:	00db      	lsls	r3, r3, #3
 8001c36:	4413      	add	r3, r2
 8001c38:	009b      	lsls	r3, r3, #2
 8001c3a:	3310      	adds	r3, #16
 8001c3c:	687a      	ldr	r2, [r7, #4]
 8001c3e:	4413      	add	r3, r2
 8001c40:	3304      	adds	r3, #4
 8001c42:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	2201      	movs	r2, #1
 8001c48:	705a      	strb	r2, [r3, #1]
 8001c4a:	e00f      	b.n	8001c6c <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001c4c:	78fb      	ldrb	r3, [r7, #3]
 8001c4e:	f003 020f 	and.w	r2, r3, #15
 8001c52:	4613      	mov	r3, r2
 8001c54:	00db      	lsls	r3, r3, #3
 8001c56:	4413      	add	r3, r2
 8001c58:	009b      	lsls	r3, r3, #2
 8001c5a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001c5e:	687a      	ldr	r2, [r7, #4]
 8001c60:	4413      	add	r3, r2
 8001c62:	3304      	adds	r3, #4
 8001c64:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	2200      	movs	r2, #0
 8001c6a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001c6c:	78fb      	ldrb	r3, [r7, #3]
 8001c6e:	f003 030f 	and.w	r3, r3, #15
 8001c72:	b2da      	uxtb	r2, r3
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8001c78:	883b      	ldrh	r3, [r7, #0]
 8001c7a:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	78ba      	ldrb	r2, [r7, #2]
 8001c86:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	785b      	ldrb	r3, [r3, #1]
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d004      	beq.n	8001c9a <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	781b      	ldrb	r3, [r3, #0]
 8001c94:	461a      	mov	r2, r3
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001c9a:	78bb      	ldrb	r3, [r7, #2]
 8001c9c:	2b02      	cmp	r3, #2
 8001c9e:	d102      	bne.n	8001ca6 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001cac:	2b01      	cmp	r3, #1
 8001cae:	d101      	bne.n	8001cb4 <HAL_PCD_EP_Open+0xae>
 8001cb0:	2302      	movs	r3, #2
 8001cb2:	e00e      	b.n	8001cd2 <HAL_PCD_EP_Open+0xcc>
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	2201      	movs	r2, #1
 8001cb8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	68f9      	ldr	r1, [r7, #12]
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	f001 ff84 	bl	8003bd0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	2200      	movs	r2, #0
 8001ccc:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8001cd0:	7afb      	ldrb	r3, [r7, #11]
}
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	3710      	adds	r7, #16
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	bd80      	pop	{r7, pc}

08001cda <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001cda:	b580      	push	{r7, lr}
 8001cdc:	b084      	sub	sp, #16
 8001cde:	af00      	add	r7, sp, #0
 8001ce0:	6078      	str	r0, [r7, #4]
 8001ce2:	460b      	mov	r3, r1
 8001ce4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001ce6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	da0f      	bge.n	8001d0e <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001cee:	78fb      	ldrb	r3, [r7, #3]
 8001cf0:	f003 020f 	and.w	r2, r3, #15
 8001cf4:	4613      	mov	r3, r2
 8001cf6:	00db      	lsls	r3, r3, #3
 8001cf8:	4413      	add	r3, r2
 8001cfa:	009b      	lsls	r3, r3, #2
 8001cfc:	3310      	adds	r3, #16
 8001cfe:	687a      	ldr	r2, [r7, #4]
 8001d00:	4413      	add	r3, r2
 8001d02:	3304      	adds	r3, #4
 8001d04:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	2201      	movs	r2, #1
 8001d0a:	705a      	strb	r2, [r3, #1]
 8001d0c:	e00f      	b.n	8001d2e <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001d0e:	78fb      	ldrb	r3, [r7, #3]
 8001d10:	f003 020f 	and.w	r2, r3, #15
 8001d14:	4613      	mov	r3, r2
 8001d16:	00db      	lsls	r3, r3, #3
 8001d18:	4413      	add	r3, r2
 8001d1a:	009b      	lsls	r3, r3, #2
 8001d1c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001d20:	687a      	ldr	r2, [r7, #4]
 8001d22:	4413      	add	r3, r2
 8001d24:	3304      	adds	r3, #4
 8001d26:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8001d2e:	78fb      	ldrb	r3, [r7, #3]
 8001d30:	f003 030f 	and.w	r3, r3, #15
 8001d34:	b2da      	uxtb	r2, r3
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001d40:	2b01      	cmp	r3, #1
 8001d42:	d101      	bne.n	8001d48 <HAL_PCD_EP_Close+0x6e>
 8001d44:	2302      	movs	r3, #2
 8001d46:	e00e      	b.n	8001d66 <HAL_PCD_EP_Close+0x8c>
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	2201      	movs	r2, #1
 8001d4c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	68f9      	ldr	r1, [r7, #12]
 8001d56:	4618      	mov	r0, r3
 8001d58:	f001 ffc2 	bl	8003ce0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	2200      	movs	r2, #0
 8001d60:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8001d64:	2300      	movs	r3, #0
}
 8001d66:	4618      	mov	r0, r3
 8001d68:	3710      	adds	r7, #16
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	bd80      	pop	{r7, pc}

08001d6e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001d6e:	b580      	push	{r7, lr}
 8001d70:	b086      	sub	sp, #24
 8001d72:	af00      	add	r7, sp, #0
 8001d74:	60f8      	str	r0, [r7, #12]
 8001d76:	607a      	str	r2, [r7, #4]
 8001d78:	603b      	str	r3, [r7, #0]
 8001d7a:	460b      	mov	r3, r1
 8001d7c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001d7e:	7afb      	ldrb	r3, [r7, #11]
 8001d80:	f003 020f 	and.w	r2, r3, #15
 8001d84:	4613      	mov	r3, r2
 8001d86:	00db      	lsls	r3, r3, #3
 8001d88:	4413      	add	r3, r2
 8001d8a:	009b      	lsls	r3, r3, #2
 8001d8c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001d90:	68fa      	ldr	r2, [r7, #12]
 8001d92:	4413      	add	r3, r2
 8001d94:	3304      	adds	r3, #4
 8001d96:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001d98:	697b      	ldr	r3, [r7, #20]
 8001d9a:	687a      	ldr	r2, [r7, #4]
 8001d9c:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001d9e:	697b      	ldr	r3, [r7, #20]
 8001da0:	683a      	ldr	r2, [r7, #0]
 8001da2:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8001da4:	697b      	ldr	r3, [r7, #20]
 8001da6:	2200      	movs	r2, #0
 8001da8:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8001daa:	697b      	ldr	r3, [r7, #20]
 8001dac:	2200      	movs	r2, #0
 8001dae:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001db0:	7afb      	ldrb	r3, [r7, #11]
 8001db2:	f003 030f 	and.w	r3, r3, #15
 8001db6:	b2da      	uxtb	r2, r3
 8001db8:	697b      	ldr	r3, [r7, #20]
 8001dba:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	799b      	ldrb	r3, [r3, #6]
 8001dc0:	2b01      	cmp	r3, #1
 8001dc2:	d102      	bne.n	8001dca <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001dc4:	687a      	ldr	r2, [r7, #4]
 8001dc6:	697b      	ldr	r3, [r7, #20]
 8001dc8:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	6818      	ldr	r0, [r3, #0]
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	799b      	ldrb	r3, [r3, #6]
 8001dd2:	461a      	mov	r2, r3
 8001dd4:	6979      	ldr	r1, [r7, #20]
 8001dd6:	f002 f85f 	bl	8003e98 <USB_EPStartXfer>

  return HAL_OK;
 8001dda:	2300      	movs	r3, #0
}
 8001ddc:	4618      	mov	r0, r3
 8001dde:	3718      	adds	r7, #24
 8001de0:	46bd      	mov	sp, r7
 8001de2:	bd80      	pop	{r7, pc}

08001de4 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b086      	sub	sp, #24
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	60f8      	str	r0, [r7, #12]
 8001dec:	607a      	str	r2, [r7, #4]
 8001dee:	603b      	str	r3, [r7, #0]
 8001df0:	460b      	mov	r3, r1
 8001df2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001df4:	7afb      	ldrb	r3, [r7, #11]
 8001df6:	f003 020f 	and.w	r2, r3, #15
 8001dfa:	4613      	mov	r3, r2
 8001dfc:	00db      	lsls	r3, r3, #3
 8001dfe:	4413      	add	r3, r2
 8001e00:	009b      	lsls	r3, r3, #2
 8001e02:	3310      	adds	r3, #16
 8001e04:	68fa      	ldr	r2, [r7, #12]
 8001e06:	4413      	add	r3, r2
 8001e08:	3304      	adds	r3, #4
 8001e0a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001e0c:	697b      	ldr	r3, [r7, #20]
 8001e0e:	687a      	ldr	r2, [r7, #4]
 8001e10:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001e12:	697b      	ldr	r3, [r7, #20]
 8001e14:	683a      	ldr	r2, [r7, #0]
 8001e16:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8001e18:	697b      	ldr	r3, [r7, #20]
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8001e1e:	697b      	ldr	r3, [r7, #20]
 8001e20:	2201      	movs	r2, #1
 8001e22:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001e24:	7afb      	ldrb	r3, [r7, #11]
 8001e26:	f003 030f 	and.w	r3, r3, #15
 8001e2a:	b2da      	uxtb	r2, r3
 8001e2c:	697b      	ldr	r3, [r7, #20]
 8001e2e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	799b      	ldrb	r3, [r3, #6]
 8001e34:	2b01      	cmp	r3, #1
 8001e36:	d102      	bne.n	8001e3e <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001e38:	687a      	ldr	r2, [r7, #4]
 8001e3a:	697b      	ldr	r3, [r7, #20]
 8001e3c:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	6818      	ldr	r0, [r3, #0]
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	799b      	ldrb	r3, [r3, #6]
 8001e46:	461a      	mov	r2, r3
 8001e48:	6979      	ldr	r1, [r7, #20]
 8001e4a:	f002 f825 	bl	8003e98 <USB_EPStartXfer>

  return HAL_OK;
 8001e4e:	2300      	movs	r3, #0
}
 8001e50:	4618      	mov	r0, r3
 8001e52:	3718      	adds	r7, #24
 8001e54:	46bd      	mov	sp, r7
 8001e56:	bd80      	pop	{r7, pc}

08001e58 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b084      	sub	sp, #16
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
 8001e60:	460b      	mov	r3, r1
 8001e62:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001e64:	78fb      	ldrb	r3, [r7, #3]
 8001e66:	f003 030f 	and.w	r3, r3, #15
 8001e6a:	687a      	ldr	r2, [r7, #4]
 8001e6c:	7912      	ldrb	r2, [r2, #4]
 8001e6e:	4293      	cmp	r3, r2
 8001e70:	d901      	bls.n	8001e76 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001e72:	2301      	movs	r3, #1
 8001e74:	e04f      	b.n	8001f16 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001e76:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	da0f      	bge.n	8001e9e <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001e7e:	78fb      	ldrb	r3, [r7, #3]
 8001e80:	f003 020f 	and.w	r2, r3, #15
 8001e84:	4613      	mov	r3, r2
 8001e86:	00db      	lsls	r3, r3, #3
 8001e88:	4413      	add	r3, r2
 8001e8a:	009b      	lsls	r3, r3, #2
 8001e8c:	3310      	adds	r3, #16
 8001e8e:	687a      	ldr	r2, [r7, #4]
 8001e90:	4413      	add	r3, r2
 8001e92:	3304      	adds	r3, #4
 8001e94:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	2201      	movs	r2, #1
 8001e9a:	705a      	strb	r2, [r3, #1]
 8001e9c:	e00d      	b.n	8001eba <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001e9e:	78fa      	ldrb	r2, [r7, #3]
 8001ea0:	4613      	mov	r3, r2
 8001ea2:	00db      	lsls	r3, r3, #3
 8001ea4:	4413      	add	r3, r2
 8001ea6:	009b      	lsls	r3, r3, #2
 8001ea8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001eac:	687a      	ldr	r2, [r7, #4]
 8001eae:	4413      	add	r3, r2
 8001eb0:	3304      	adds	r3, #4
 8001eb2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	2201      	movs	r2, #1
 8001ebe:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001ec0:	78fb      	ldrb	r3, [r7, #3]
 8001ec2:	f003 030f 	and.w	r3, r3, #15
 8001ec6:	b2da      	uxtb	r2, r3
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001ed2:	2b01      	cmp	r3, #1
 8001ed4:	d101      	bne.n	8001eda <HAL_PCD_EP_SetStall+0x82>
 8001ed6:	2302      	movs	r3, #2
 8001ed8:	e01d      	b.n	8001f16 <HAL_PCD_EP_SetStall+0xbe>
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	2201      	movs	r2, #1
 8001ede:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	68f9      	ldr	r1, [r7, #12]
 8001ee8:	4618      	mov	r0, r3
 8001eea:	f002 fbb3 	bl	8004654 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001eee:	78fb      	ldrb	r3, [r7, #3]
 8001ef0:	f003 030f 	and.w	r3, r3, #15
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d109      	bne.n	8001f0c <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	6818      	ldr	r0, [r3, #0]
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	7999      	ldrb	r1, [r3, #6]
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8001f06:	461a      	mov	r2, r3
 8001f08:	f002 fda4 	bl	8004a54 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	2200      	movs	r2, #0
 8001f10:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8001f14:	2300      	movs	r3, #0
}
 8001f16:	4618      	mov	r0, r3
 8001f18:	3710      	adds	r7, #16
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	bd80      	pop	{r7, pc}

08001f1e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001f1e:	b580      	push	{r7, lr}
 8001f20:	b084      	sub	sp, #16
 8001f22:	af00      	add	r7, sp, #0
 8001f24:	6078      	str	r0, [r7, #4]
 8001f26:	460b      	mov	r3, r1
 8001f28:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001f2a:	78fb      	ldrb	r3, [r7, #3]
 8001f2c:	f003 030f 	and.w	r3, r3, #15
 8001f30:	687a      	ldr	r2, [r7, #4]
 8001f32:	7912      	ldrb	r2, [r2, #4]
 8001f34:	4293      	cmp	r3, r2
 8001f36:	d901      	bls.n	8001f3c <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001f38:	2301      	movs	r3, #1
 8001f3a:	e042      	b.n	8001fc2 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001f3c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	da0f      	bge.n	8001f64 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001f44:	78fb      	ldrb	r3, [r7, #3]
 8001f46:	f003 020f 	and.w	r2, r3, #15
 8001f4a:	4613      	mov	r3, r2
 8001f4c:	00db      	lsls	r3, r3, #3
 8001f4e:	4413      	add	r3, r2
 8001f50:	009b      	lsls	r3, r3, #2
 8001f52:	3310      	adds	r3, #16
 8001f54:	687a      	ldr	r2, [r7, #4]
 8001f56:	4413      	add	r3, r2
 8001f58:	3304      	adds	r3, #4
 8001f5a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	2201      	movs	r2, #1
 8001f60:	705a      	strb	r2, [r3, #1]
 8001f62:	e00f      	b.n	8001f84 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001f64:	78fb      	ldrb	r3, [r7, #3]
 8001f66:	f003 020f 	and.w	r2, r3, #15
 8001f6a:	4613      	mov	r3, r2
 8001f6c:	00db      	lsls	r3, r3, #3
 8001f6e:	4413      	add	r3, r2
 8001f70:	009b      	lsls	r3, r3, #2
 8001f72:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001f76:	687a      	ldr	r2, [r7, #4]
 8001f78:	4413      	add	r3, r2
 8001f7a:	3304      	adds	r3, #4
 8001f7c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	2200      	movs	r2, #0
 8001f82:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	2200      	movs	r2, #0
 8001f88:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001f8a:	78fb      	ldrb	r3, [r7, #3]
 8001f8c:	f003 030f 	and.w	r3, r3, #15
 8001f90:	b2da      	uxtb	r2, r3
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001f9c:	2b01      	cmp	r3, #1
 8001f9e:	d101      	bne.n	8001fa4 <HAL_PCD_EP_ClrStall+0x86>
 8001fa0:	2302      	movs	r3, #2
 8001fa2:	e00e      	b.n	8001fc2 <HAL_PCD_EP_ClrStall+0xa4>
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	2201      	movs	r2, #1
 8001fa8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	68f9      	ldr	r1, [r7, #12]
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	f002 fbbc 	bl	8004730 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	2200      	movs	r2, #0
 8001fbc:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8001fc0:	2300      	movs	r3, #0
}
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	3710      	adds	r7, #16
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	bd80      	pop	{r7, pc}

08001fca <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001fca:	b580      	push	{r7, lr}
 8001fcc:	b084      	sub	sp, #16
 8001fce:	af00      	add	r7, sp, #0
 8001fd0:	6078      	str	r0, [r7, #4]
 8001fd2:	460b      	mov	r3, r1
 8001fd4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8001fd6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	da0c      	bge.n	8001ff8 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001fde:	78fb      	ldrb	r3, [r7, #3]
 8001fe0:	f003 020f 	and.w	r2, r3, #15
 8001fe4:	4613      	mov	r3, r2
 8001fe6:	00db      	lsls	r3, r3, #3
 8001fe8:	4413      	add	r3, r2
 8001fea:	009b      	lsls	r3, r3, #2
 8001fec:	3310      	adds	r3, #16
 8001fee:	687a      	ldr	r2, [r7, #4]
 8001ff0:	4413      	add	r3, r2
 8001ff2:	3304      	adds	r3, #4
 8001ff4:	60fb      	str	r3, [r7, #12]
 8001ff6:	e00c      	b.n	8002012 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001ff8:	78fb      	ldrb	r3, [r7, #3]
 8001ffa:	f003 020f 	and.w	r2, r3, #15
 8001ffe:	4613      	mov	r3, r2
 8002000:	00db      	lsls	r3, r3, #3
 8002002:	4413      	add	r3, r2
 8002004:	009b      	lsls	r3, r3, #2
 8002006:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800200a:	687a      	ldr	r2, [r7, #4]
 800200c:	4413      	add	r3, r2
 800200e:	3304      	adds	r3, #4
 8002010:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	68f9      	ldr	r1, [r7, #12]
 8002018:	4618      	mov	r0, r3
 800201a:	f002 f9db 	bl	80043d4 <USB_EPStopXfer>
 800201e:	4603      	mov	r3, r0
 8002020:	72fb      	strb	r3, [r7, #11]

  return ret;
 8002022:	7afb      	ldrb	r3, [r7, #11]
}
 8002024:	4618      	mov	r0, r3
 8002026:	3710      	adds	r7, #16
 8002028:	46bd      	mov	sp, r7
 800202a:	bd80      	pop	{r7, pc}

0800202c <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	b08a      	sub	sp, #40	@ 0x28
 8002030:	af02      	add	r7, sp, #8
 8002032:	6078      	str	r0, [r7, #4]
 8002034:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800203c:	697b      	ldr	r3, [r7, #20]
 800203e:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002040:	683a      	ldr	r2, [r7, #0]
 8002042:	4613      	mov	r3, r2
 8002044:	00db      	lsls	r3, r3, #3
 8002046:	4413      	add	r3, r2
 8002048:	009b      	lsls	r3, r3, #2
 800204a:	3310      	adds	r3, #16
 800204c:	687a      	ldr	r2, [r7, #4]
 800204e:	4413      	add	r3, r2
 8002050:	3304      	adds	r3, #4
 8002052:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	695a      	ldr	r2, [r3, #20]
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	691b      	ldr	r3, [r3, #16]
 800205c:	429a      	cmp	r2, r3
 800205e:	d901      	bls.n	8002064 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002060:	2301      	movs	r3, #1
 8002062:	e06b      	b.n	800213c <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	691a      	ldr	r2, [r3, #16]
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	695b      	ldr	r3, [r3, #20]
 800206c:	1ad3      	subs	r3, r2, r3
 800206e:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	689b      	ldr	r3, [r3, #8]
 8002074:	69fa      	ldr	r2, [r7, #28]
 8002076:	429a      	cmp	r2, r3
 8002078:	d902      	bls.n	8002080 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	689b      	ldr	r3, [r3, #8]
 800207e:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002080:	69fb      	ldr	r3, [r7, #28]
 8002082:	3303      	adds	r3, #3
 8002084:	089b      	lsrs	r3, r3, #2
 8002086:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002088:	e02a      	b.n	80020e0 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	691a      	ldr	r2, [r3, #16]
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	695b      	ldr	r3, [r3, #20]
 8002092:	1ad3      	subs	r3, r2, r3
 8002094:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	689b      	ldr	r3, [r3, #8]
 800209a:	69fa      	ldr	r2, [r7, #28]
 800209c:	429a      	cmp	r2, r3
 800209e:	d902      	bls.n	80020a6 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	689b      	ldr	r3, [r3, #8]
 80020a4:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80020a6:	69fb      	ldr	r3, [r7, #28]
 80020a8:	3303      	adds	r3, #3
 80020aa:	089b      	lsrs	r3, r3, #2
 80020ac:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	68d9      	ldr	r1, [r3, #12]
 80020b2:	683b      	ldr	r3, [r7, #0]
 80020b4:	b2da      	uxtb	r2, r3
 80020b6:	69fb      	ldr	r3, [r7, #28]
 80020b8:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80020be:	9300      	str	r3, [sp, #0]
 80020c0:	4603      	mov	r3, r0
 80020c2:	6978      	ldr	r0, [r7, #20]
 80020c4:	f002 fa30 	bl	8004528 <USB_WritePacket>

    ep->xfer_buff  += len;
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	68da      	ldr	r2, [r3, #12]
 80020cc:	69fb      	ldr	r3, [r7, #28]
 80020ce:	441a      	add	r2, r3
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	695a      	ldr	r2, [r3, #20]
 80020d8:	69fb      	ldr	r3, [r7, #28]
 80020da:	441a      	add	r2, r3
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80020e0:	683b      	ldr	r3, [r7, #0]
 80020e2:	015a      	lsls	r2, r3, #5
 80020e4:	693b      	ldr	r3, [r7, #16]
 80020e6:	4413      	add	r3, r2
 80020e8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80020ec:	699b      	ldr	r3, [r3, #24]
 80020ee:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80020f0:	69ba      	ldr	r2, [r7, #24]
 80020f2:	429a      	cmp	r2, r3
 80020f4:	d809      	bhi.n	800210a <PCD_WriteEmptyTxFifo+0xde>
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	695a      	ldr	r2, [r3, #20]
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80020fe:	429a      	cmp	r2, r3
 8002100:	d203      	bcs.n	800210a <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	691b      	ldr	r3, [r3, #16]
 8002106:	2b00      	cmp	r3, #0
 8002108:	d1bf      	bne.n	800208a <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	691a      	ldr	r2, [r3, #16]
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	695b      	ldr	r3, [r3, #20]
 8002112:	429a      	cmp	r2, r3
 8002114:	d811      	bhi.n	800213a <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002116:	683b      	ldr	r3, [r7, #0]
 8002118:	f003 030f 	and.w	r3, r3, #15
 800211c:	2201      	movs	r2, #1
 800211e:	fa02 f303 	lsl.w	r3, r2, r3
 8002122:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002124:	693b      	ldr	r3, [r7, #16]
 8002126:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800212a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800212c:	68bb      	ldr	r3, [r7, #8]
 800212e:	43db      	mvns	r3, r3
 8002130:	6939      	ldr	r1, [r7, #16]
 8002132:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8002136:	4013      	ands	r3, r2
 8002138:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 800213a:	2300      	movs	r3, #0
}
 800213c:	4618      	mov	r0, r3
 800213e:	3720      	adds	r7, #32
 8002140:	46bd      	mov	sp, r7
 8002142:	bd80      	pop	{r7, pc}

08002144 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	b088      	sub	sp, #32
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
 800214c:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002154:	69fb      	ldr	r3, [r7, #28]
 8002156:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8002158:	69fb      	ldr	r3, [r7, #28]
 800215a:	333c      	adds	r3, #60	@ 0x3c
 800215c:	3304      	adds	r3, #4
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002162:	683b      	ldr	r3, [r7, #0]
 8002164:	015a      	lsls	r2, r3, #5
 8002166:	69bb      	ldr	r3, [r7, #24]
 8002168:	4413      	add	r3, r2
 800216a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800216e:	689b      	ldr	r3, [r3, #8]
 8002170:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	799b      	ldrb	r3, [r3, #6]
 8002176:	2b01      	cmp	r3, #1
 8002178:	d17b      	bne.n	8002272 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800217a:	693b      	ldr	r3, [r7, #16]
 800217c:	f003 0308 	and.w	r3, r3, #8
 8002180:	2b00      	cmp	r3, #0
 8002182:	d015      	beq.n	80021b0 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002184:	697b      	ldr	r3, [r7, #20]
 8002186:	4a61      	ldr	r2, [pc, #388]	@ (800230c <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002188:	4293      	cmp	r3, r2
 800218a:	f240 80b9 	bls.w	8002300 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800218e:	693b      	ldr	r3, [r7, #16]
 8002190:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002194:	2b00      	cmp	r3, #0
 8002196:	f000 80b3 	beq.w	8002300 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800219a:	683b      	ldr	r3, [r7, #0]
 800219c:	015a      	lsls	r2, r3, #5
 800219e:	69bb      	ldr	r3, [r7, #24]
 80021a0:	4413      	add	r3, r2
 80021a2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80021a6:	461a      	mov	r2, r3
 80021a8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80021ac:	6093      	str	r3, [r2, #8]
 80021ae:	e0a7      	b.n	8002300 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80021b0:	693b      	ldr	r3, [r7, #16]
 80021b2:	f003 0320 	and.w	r3, r3, #32
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d009      	beq.n	80021ce <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80021ba:	683b      	ldr	r3, [r7, #0]
 80021bc:	015a      	lsls	r2, r3, #5
 80021be:	69bb      	ldr	r3, [r7, #24]
 80021c0:	4413      	add	r3, r2
 80021c2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80021c6:	461a      	mov	r2, r3
 80021c8:	2320      	movs	r3, #32
 80021ca:	6093      	str	r3, [r2, #8]
 80021cc:	e098      	b.n	8002300 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80021ce:	693b      	ldr	r3, [r7, #16]
 80021d0:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	f040 8093 	bne.w	8002300 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80021da:	697b      	ldr	r3, [r7, #20]
 80021dc:	4a4b      	ldr	r2, [pc, #300]	@ (800230c <PCD_EP_OutXfrComplete_int+0x1c8>)
 80021de:	4293      	cmp	r3, r2
 80021e0:	d90f      	bls.n	8002202 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80021e2:	693b      	ldr	r3, [r7, #16]
 80021e4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d00a      	beq.n	8002202 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	015a      	lsls	r2, r3, #5
 80021f0:	69bb      	ldr	r3, [r7, #24]
 80021f2:	4413      	add	r3, r2
 80021f4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80021f8:	461a      	mov	r2, r3
 80021fa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80021fe:	6093      	str	r3, [r2, #8]
 8002200:	e07e      	b.n	8002300 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8002202:	683a      	ldr	r2, [r7, #0]
 8002204:	4613      	mov	r3, r2
 8002206:	00db      	lsls	r3, r3, #3
 8002208:	4413      	add	r3, r2
 800220a:	009b      	lsls	r3, r3, #2
 800220c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002210:	687a      	ldr	r2, [r7, #4]
 8002212:	4413      	add	r3, r2
 8002214:	3304      	adds	r3, #4
 8002216:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	6a1a      	ldr	r2, [r3, #32]
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	0159      	lsls	r1, r3, #5
 8002220:	69bb      	ldr	r3, [r7, #24]
 8002222:	440b      	add	r3, r1
 8002224:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002228:	691b      	ldr	r3, [r3, #16]
 800222a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800222e:	1ad2      	subs	r2, r2, r3
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	2b00      	cmp	r3, #0
 8002238:	d114      	bne.n	8002264 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	691b      	ldr	r3, [r3, #16]
 800223e:	2b00      	cmp	r3, #0
 8002240:	d109      	bne.n	8002256 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	6818      	ldr	r0, [r3, #0]
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800224c:	461a      	mov	r2, r3
 800224e:	2101      	movs	r1, #1
 8002250:	f002 fc00 	bl	8004a54 <USB_EP0_OutStart>
 8002254:	e006      	b.n	8002264 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	68da      	ldr	r2, [r3, #12]
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	695b      	ldr	r3, [r3, #20]
 800225e:	441a      	add	r2, r3
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	b2db      	uxtb	r3, r3
 8002268:	4619      	mov	r1, r3
 800226a:	6878      	ldr	r0, [r7, #4]
 800226c:	f004 fd22 	bl	8006cb4 <HAL_PCD_DataOutStageCallback>
 8002270:	e046      	b.n	8002300 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002272:	697b      	ldr	r3, [r7, #20]
 8002274:	4a26      	ldr	r2, [pc, #152]	@ (8002310 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8002276:	4293      	cmp	r3, r2
 8002278:	d124      	bne.n	80022c4 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800227a:	693b      	ldr	r3, [r7, #16]
 800227c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002280:	2b00      	cmp	r3, #0
 8002282:	d00a      	beq.n	800229a <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	015a      	lsls	r2, r3, #5
 8002288:	69bb      	ldr	r3, [r7, #24]
 800228a:	4413      	add	r3, r2
 800228c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002290:	461a      	mov	r2, r3
 8002292:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002296:	6093      	str	r3, [r2, #8]
 8002298:	e032      	b.n	8002300 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800229a:	693b      	ldr	r3, [r7, #16]
 800229c:	f003 0320 	and.w	r3, r3, #32
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d008      	beq.n	80022b6 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	015a      	lsls	r2, r3, #5
 80022a8:	69bb      	ldr	r3, [r7, #24]
 80022aa:	4413      	add	r3, r2
 80022ac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80022b0:	461a      	mov	r2, r3
 80022b2:	2320      	movs	r3, #32
 80022b4:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80022b6:	683b      	ldr	r3, [r7, #0]
 80022b8:	b2db      	uxtb	r3, r3
 80022ba:	4619      	mov	r1, r3
 80022bc:	6878      	ldr	r0, [r7, #4]
 80022be:	f004 fcf9 	bl	8006cb4 <HAL_PCD_DataOutStageCallback>
 80022c2:	e01d      	b.n	8002300 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d114      	bne.n	80022f4 <PCD_EP_OutXfrComplete_int+0x1b0>
 80022ca:	6879      	ldr	r1, [r7, #4]
 80022cc:	683a      	ldr	r2, [r7, #0]
 80022ce:	4613      	mov	r3, r2
 80022d0:	00db      	lsls	r3, r3, #3
 80022d2:	4413      	add	r3, r2
 80022d4:	009b      	lsls	r3, r3, #2
 80022d6:	440b      	add	r3, r1
 80022d8:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d108      	bne.n	80022f4 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	6818      	ldr	r0, [r3, #0]
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80022ec:	461a      	mov	r2, r3
 80022ee:	2100      	movs	r1, #0
 80022f0:	f002 fbb0 	bl	8004a54 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	b2db      	uxtb	r3, r3
 80022f8:	4619      	mov	r1, r3
 80022fa:	6878      	ldr	r0, [r7, #4]
 80022fc:	f004 fcda 	bl	8006cb4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8002300:	2300      	movs	r3, #0
}
 8002302:	4618      	mov	r0, r3
 8002304:	3720      	adds	r7, #32
 8002306:	46bd      	mov	sp, r7
 8002308:	bd80      	pop	{r7, pc}
 800230a:	bf00      	nop
 800230c:	4f54300a 	.word	0x4f54300a
 8002310:	4f54310a 	.word	0x4f54310a

08002314 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	b086      	sub	sp, #24
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
 800231c:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002324:	697b      	ldr	r3, [r7, #20]
 8002326:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8002328:	697b      	ldr	r3, [r7, #20]
 800232a:	333c      	adds	r3, #60	@ 0x3c
 800232c:	3304      	adds	r3, #4
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002332:	683b      	ldr	r3, [r7, #0]
 8002334:	015a      	lsls	r2, r3, #5
 8002336:	693b      	ldr	r3, [r7, #16]
 8002338:	4413      	add	r3, r2
 800233a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800233e:	689b      	ldr	r3, [r3, #8]
 8002340:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	4a15      	ldr	r2, [pc, #84]	@ (800239c <PCD_EP_OutSetupPacket_int+0x88>)
 8002346:	4293      	cmp	r3, r2
 8002348:	d90e      	bls.n	8002368 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800234a:	68bb      	ldr	r3, [r7, #8]
 800234c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002350:	2b00      	cmp	r3, #0
 8002352:	d009      	beq.n	8002368 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002354:	683b      	ldr	r3, [r7, #0]
 8002356:	015a      	lsls	r2, r3, #5
 8002358:	693b      	ldr	r3, [r7, #16]
 800235a:	4413      	add	r3, r2
 800235c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002360:	461a      	mov	r2, r3
 8002362:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002366:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002368:	6878      	ldr	r0, [r7, #4]
 800236a:	f004 fc91 	bl	8006c90 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	4a0a      	ldr	r2, [pc, #40]	@ (800239c <PCD_EP_OutSetupPacket_int+0x88>)
 8002372:	4293      	cmp	r3, r2
 8002374:	d90c      	bls.n	8002390 <PCD_EP_OutSetupPacket_int+0x7c>
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	799b      	ldrb	r3, [r3, #6]
 800237a:	2b01      	cmp	r3, #1
 800237c:	d108      	bne.n	8002390 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	6818      	ldr	r0, [r3, #0]
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002388:	461a      	mov	r2, r3
 800238a:	2101      	movs	r1, #1
 800238c:	f002 fb62 	bl	8004a54 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002390:	2300      	movs	r3, #0
}
 8002392:	4618      	mov	r0, r3
 8002394:	3718      	adds	r7, #24
 8002396:	46bd      	mov	sp, r7
 8002398:	bd80      	pop	{r7, pc}
 800239a:	bf00      	nop
 800239c:	4f54300a 	.word	0x4f54300a

080023a0 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80023a0:	b480      	push	{r7}
 80023a2:	b085      	sub	sp, #20
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
 80023a8:	460b      	mov	r3, r1
 80023aa:	70fb      	strb	r3, [r7, #3]
 80023ac:	4613      	mov	r3, r2
 80023ae:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023b6:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80023b8:	78fb      	ldrb	r3, [r7, #3]
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d107      	bne.n	80023ce <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80023be:	883b      	ldrh	r3, [r7, #0]
 80023c0:	0419      	lsls	r1, r3, #16
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	68ba      	ldr	r2, [r7, #8]
 80023c8:	430a      	orrs	r2, r1
 80023ca:	629a      	str	r2, [r3, #40]	@ 0x28
 80023cc:	e028      	b.n	8002420 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023d4:	0c1b      	lsrs	r3, r3, #16
 80023d6:	68ba      	ldr	r2, [r7, #8]
 80023d8:	4413      	add	r3, r2
 80023da:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80023dc:	2300      	movs	r3, #0
 80023de:	73fb      	strb	r3, [r7, #15]
 80023e0:	e00d      	b.n	80023fe <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681a      	ldr	r2, [r3, #0]
 80023e6:	7bfb      	ldrb	r3, [r7, #15]
 80023e8:	3340      	adds	r3, #64	@ 0x40
 80023ea:	009b      	lsls	r3, r3, #2
 80023ec:	4413      	add	r3, r2
 80023ee:	685b      	ldr	r3, [r3, #4]
 80023f0:	0c1b      	lsrs	r3, r3, #16
 80023f2:	68ba      	ldr	r2, [r7, #8]
 80023f4:	4413      	add	r3, r2
 80023f6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80023f8:	7bfb      	ldrb	r3, [r7, #15]
 80023fa:	3301      	adds	r3, #1
 80023fc:	73fb      	strb	r3, [r7, #15]
 80023fe:	7bfa      	ldrb	r2, [r7, #15]
 8002400:	78fb      	ldrb	r3, [r7, #3]
 8002402:	3b01      	subs	r3, #1
 8002404:	429a      	cmp	r2, r3
 8002406:	d3ec      	bcc.n	80023e2 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002408:	883b      	ldrh	r3, [r7, #0]
 800240a:	0418      	lsls	r0, r3, #16
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	6819      	ldr	r1, [r3, #0]
 8002410:	78fb      	ldrb	r3, [r7, #3]
 8002412:	3b01      	subs	r3, #1
 8002414:	68ba      	ldr	r2, [r7, #8]
 8002416:	4302      	orrs	r2, r0
 8002418:	3340      	adds	r3, #64	@ 0x40
 800241a:	009b      	lsls	r3, r3, #2
 800241c:	440b      	add	r3, r1
 800241e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002420:	2300      	movs	r3, #0
}
 8002422:	4618      	mov	r0, r3
 8002424:	3714      	adds	r7, #20
 8002426:	46bd      	mov	sp, r7
 8002428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242c:	4770      	bx	lr

0800242e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800242e:	b480      	push	{r7}
 8002430:	b083      	sub	sp, #12
 8002432:	af00      	add	r7, sp, #0
 8002434:	6078      	str	r0, [r7, #4]
 8002436:	460b      	mov	r3, r1
 8002438:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	887a      	ldrh	r2, [r7, #2]
 8002440:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8002442:	2300      	movs	r3, #0
}
 8002444:	4618      	mov	r0, r3
 8002446:	370c      	adds	r7, #12
 8002448:	46bd      	mov	sp, r7
 800244a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244e:	4770      	bx	lr

08002450 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8002450:	b480      	push	{r7}
 8002452:	b083      	sub	sp, #12
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
 8002458:	460b      	mov	r3, r1
 800245a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800245c:	bf00      	nop
 800245e:	370c      	adds	r7, #12
 8002460:	46bd      	mov	sp, r7
 8002462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002466:	4770      	bx	lr

08002468 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	b086      	sub	sp, #24
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	2b00      	cmp	r3, #0
 8002474:	d101      	bne.n	800247a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002476:	2301      	movs	r3, #1
 8002478:	e267      	b.n	800294a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f003 0301 	and.w	r3, r3, #1
 8002482:	2b00      	cmp	r3, #0
 8002484:	d075      	beq.n	8002572 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002486:	4b88      	ldr	r3, [pc, #544]	@ (80026a8 <HAL_RCC_OscConfig+0x240>)
 8002488:	689b      	ldr	r3, [r3, #8]
 800248a:	f003 030c 	and.w	r3, r3, #12
 800248e:	2b04      	cmp	r3, #4
 8002490:	d00c      	beq.n	80024ac <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002492:	4b85      	ldr	r3, [pc, #532]	@ (80026a8 <HAL_RCC_OscConfig+0x240>)
 8002494:	689b      	ldr	r3, [r3, #8]
 8002496:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800249a:	2b08      	cmp	r3, #8
 800249c:	d112      	bne.n	80024c4 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800249e:	4b82      	ldr	r3, [pc, #520]	@ (80026a8 <HAL_RCC_OscConfig+0x240>)
 80024a0:	685b      	ldr	r3, [r3, #4]
 80024a2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80024a6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80024aa:	d10b      	bne.n	80024c4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024ac:	4b7e      	ldr	r3, [pc, #504]	@ (80026a8 <HAL_RCC_OscConfig+0x240>)
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d05b      	beq.n	8002570 <HAL_RCC_OscConfig+0x108>
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	685b      	ldr	r3, [r3, #4]
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d157      	bne.n	8002570 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80024c0:	2301      	movs	r3, #1
 80024c2:	e242      	b.n	800294a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	685b      	ldr	r3, [r3, #4]
 80024c8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80024cc:	d106      	bne.n	80024dc <HAL_RCC_OscConfig+0x74>
 80024ce:	4b76      	ldr	r3, [pc, #472]	@ (80026a8 <HAL_RCC_OscConfig+0x240>)
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	4a75      	ldr	r2, [pc, #468]	@ (80026a8 <HAL_RCC_OscConfig+0x240>)
 80024d4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80024d8:	6013      	str	r3, [r2, #0]
 80024da:	e01d      	b.n	8002518 <HAL_RCC_OscConfig+0xb0>
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	685b      	ldr	r3, [r3, #4]
 80024e0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80024e4:	d10c      	bne.n	8002500 <HAL_RCC_OscConfig+0x98>
 80024e6:	4b70      	ldr	r3, [pc, #448]	@ (80026a8 <HAL_RCC_OscConfig+0x240>)
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	4a6f      	ldr	r2, [pc, #444]	@ (80026a8 <HAL_RCC_OscConfig+0x240>)
 80024ec:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80024f0:	6013      	str	r3, [r2, #0]
 80024f2:	4b6d      	ldr	r3, [pc, #436]	@ (80026a8 <HAL_RCC_OscConfig+0x240>)
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	4a6c      	ldr	r2, [pc, #432]	@ (80026a8 <HAL_RCC_OscConfig+0x240>)
 80024f8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80024fc:	6013      	str	r3, [r2, #0]
 80024fe:	e00b      	b.n	8002518 <HAL_RCC_OscConfig+0xb0>
 8002500:	4b69      	ldr	r3, [pc, #420]	@ (80026a8 <HAL_RCC_OscConfig+0x240>)
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	4a68      	ldr	r2, [pc, #416]	@ (80026a8 <HAL_RCC_OscConfig+0x240>)
 8002506:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800250a:	6013      	str	r3, [r2, #0]
 800250c:	4b66      	ldr	r3, [pc, #408]	@ (80026a8 <HAL_RCC_OscConfig+0x240>)
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	4a65      	ldr	r2, [pc, #404]	@ (80026a8 <HAL_RCC_OscConfig+0x240>)
 8002512:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002516:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	685b      	ldr	r3, [r3, #4]
 800251c:	2b00      	cmp	r3, #0
 800251e:	d013      	beq.n	8002548 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002520:	f7fe fa8a 	bl	8000a38 <HAL_GetTick>
 8002524:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002526:	e008      	b.n	800253a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002528:	f7fe fa86 	bl	8000a38 <HAL_GetTick>
 800252c:	4602      	mov	r2, r0
 800252e:	693b      	ldr	r3, [r7, #16]
 8002530:	1ad3      	subs	r3, r2, r3
 8002532:	2b64      	cmp	r3, #100	@ 0x64
 8002534:	d901      	bls.n	800253a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002536:	2303      	movs	r3, #3
 8002538:	e207      	b.n	800294a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800253a:	4b5b      	ldr	r3, [pc, #364]	@ (80026a8 <HAL_RCC_OscConfig+0x240>)
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002542:	2b00      	cmp	r3, #0
 8002544:	d0f0      	beq.n	8002528 <HAL_RCC_OscConfig+0xc0>
 8002546:	e014      	b.n	8002572 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002548:	f7fe fa76 	bl	8000a38 <HAL_GetTick>
 800254c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800254e:	e008      	b.n	8002562 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002550:	f7fe fa72 	bl	8000a38 <HAL_GetTick>
 8002554:	4602      	mov	r2, r0
 8002556:	693b      	ldr	r3, [r7, #16]
 8002558:	1ad3      	subs	r3, r2, r3
 800255a:	2b64      	cmp	r3, #100	@ 0x64
 800255c:	d901      	bls.n	8002562 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800255e:	2303      	movs	r3, #3
 8002560:	e1f3      	b.n	800294a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002562:	4b51      	ldr	r3, [pc, #324]	@ (80026a8 <HAL_RCC_OscConfig+0x240>)
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800256a:	2b00      	cmp	r3, #0
 800256c:	d1f0      	bne.n	8002550 <HAL_RCC_OscConfig+0xe8>
 800256e:	e000      	b.n	8002572 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002570:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f003 0302 	and.w	r3, r3, #2
 800257a:	2b00      	cmp	r3, #0
 800257c:	d063      	beq.n	8002646 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800257e:	4b4a      	ldr	r3, [pc, #296]	@ (80026a8 <HAL_RCC_OscConfig+0x240>)
 8002580:	689b      	ldr	r3, [r3, #8]
 8002582:	f003 030c 	and.w	r3, r3, #12
 8002586:	2b00      	cmp	r3, #0
 8002588:	d00b      	beq.n	80025a2 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800258a:	4b47      	ldr	r3, [pc, #284]	@ (80026a8 <HAL_RCC_OscConfig+0x240>)
 800258c:	689b      	ldr	r3, [r3, #8]
 800258e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002592:	2b08      	cmp	r3, #8
 8002594:	d11c      	bne.n	80025d0 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002596:	4b44      	ldr	r3, [pc, #272]	@ (80026a8 <HAL_RCC_OscConfig+0x240>)
 8002598:	685b      	ldr	r3, [r3, #4]
 800259a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d116      	bne.n	80025d0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025a2:	4b41      	ldr	r3, [pc, #260]	@ (80026a8 <HAL_RCC_OscConfig+0x240>)
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f003 0302 	and.w	r3, r3, #2
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d005      	beq.n	80025ba <HAL_RCC_OscConfig+0x152>
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	68db      	ldr	r3, [r3, #12]
 80025b2:	2b01      	cmp	r3, #1
 80025b4:	d001      	beq.n	80025ba <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80025b6:	2301      	movs	r3, #1
 80025b8:	e1c7      	b.n	800294a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025ba:	4b3b      	ldr	r3, [pc, #236]	@ (80026a8 <HAL_RCC_OscConfig+0x240>)
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	691b      	ldr	r3, [r3, #16]
 80025c6:	00db      	lsls	r3, r3, #3
 80025c8:	4937      	ldr	r1, [pc, #220]	@ (80026a8 <HAL_RCC_OscConfig+0x240>)
 80025ca:	4313      	orrs	r3, r2
 80025cc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025ce:	e03a      	b.n	8002646 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	68db      	ldr	r3, [r3, #12]
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d020      	beq.n	800261a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80025d8:	4b34      	ldr	r3, [pc, #208]	@ (80026ac <HAL_RCC_OscConfig+0x244>)
 80025da:	2201      	movs	r2, #1
 80025dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025de:	f7fe fa2b 	bl	8000a38 <HAL_GetTick>
 80025e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025e4:	e008      	b.n	80025f8 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80025e6:	f7fe fa27 	bl	8000a38 <HAL_GetTick>
 80025ea:	4602      	mov	r2, r0
 80025ec:	693b      	ldr	r3, [r7, #16]
 80025ee:	1ad3      	subs	r3, r2, r3
 80025f0:	2b02      	cmp	r3, #2
 80025f2:	d901      	bls.n	80025f8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80025f4:	2303      	movs	r3, #3
 80025f6:	e1a8      	b.n	800294a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025f8:	4b2b      	ldr	r3, [pc, #172]	@ (80026a8 <HAL_RCC_OscConfig+0x240>)
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f003 0302 	and.w	r3, r3, #2
 8002600:	2b00      	cmp	r3, #0
 8002602:	d0f0      	beq.n	80025e6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002604:	4b28      	ldr	r3, [pc, #160]	@ (80026a8 <HAL_RCC_OscConfig+0x240>)
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	691b      	ldr	r3, [r3, #16]
 8002610:	00db      	lsls	r3, r3, #3
 8002612:	4925      	ldr	r1, [pc, #148]	@ (80026a8 <HAL_RCC_OscConfig+0x240>)
 8002614:	4313      	orrs	r3, r2
 8002616:	600b      	str	r3, [r1, #0]
 8002618:	e015      	b.n	8002646 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800261a:	4b24      	ldr	r3, [pc, #144]	@ (80026ac <HAL_RCC_OscConfig+0x244>)
 800261c:	2200      	movs	r2, #0
 800261e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002620:	f7fe fa0a 	bl	8000a38 <HAL_GetTick>
 8002624:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002626:	e008      	b.n	800263a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002628:	f7fe fa06 	bl	8000a38 <HAL_GetTick>
 800262c:	4602      	mov	r2, r0
 800262e:	693b      	ldr	r3, [r7, #16]
 8002630:	1ad3      	subs	r3, r2, r3
 8002632:	2b02      	cmp	r3, #2
 8002634:	d901      	bls.n	800263a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002636:	2303      	movs	r3, #3
 8002638:	e187      	b.n	800294a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800263a:	4b1b      	ldr	r3, [pc, #108]	@ (80026a8 <HAL_RCC_OscConfig+0x240>)
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f003 0302 	and.w	r3, r3, #2
 8002642:	2b00      	cmp	r3, #0
 8002644:	d1f0      	bne.n	8002628 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f003 0308 	and.w	r3, r3, #8
 800264e:	2b00      	cmp	r3, #0
 8002650:	d036      	beq.n	80026c0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	695b      	ldr	r3, [r3, #20]
 8002656:	2b00      	cmp	r3, #0
 8002658:	d016      	beq.n	8002688 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800265a:	4b15      	ldr	r3, [pc, #84]	@ (80026b0 <HAL_RCC_OscConfig+0x248>)
 800265c:	2201      	movs	r2, #1
 800265e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002660:	f7fe f9ea 	bl	8000a38 <HAL_GetTick>
 8002664:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002666:	e008      	b.n	800267a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002668:	f7fe f9e6 	bl	8000a38 <HAL_GetTick>
 800266c:	4602      	mov	r2, r0
 800266e:	693b      	ldr	r3, [r7, #16]
 8002670:	1ad3      	subs	r3, r2, r3
 8002672:	2b02      	cmp	r3, #2
 8002674:	d901      	bls.n	800267a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002676:	2303      	movs	r3, #3
 8002678:	e167      	b.n	800294a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800267a:	4b0b      	ldr	r3, [pc, #44]	@ (80026a8 <HAL_RCC_OscConfig+0x240>)
 800267c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800267e:	f003 0302 	and.w	r3, r3, #2
 8002682:	2b00      	cmp	r3, #0
 8002684:	d0f0      	beq.n	8002668 <HAL_RCC_OscConfig+0x200>
 8002686:	e01b      	b.n	80026c0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002688:	4b09      	ldr	r3, [pc, #36]	@ (80026b0 <HAL_RCC_OscConfig+0x248>)
 800268a:	2200      	movs	r2, #0
 800268c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800268e:	f7fe f9d3 	bl	8000a38 <HAL_GetTick>
 8002692:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002694:	e00e      	b.n	80026b4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002696:	f7fe f9cf 	bl	8000a38 <HAL_GetTick>
 800269a:	4602      	mov	r2, r0
 800269c:	693b      	ldr	r3, [r7, #16]
 800269e:	1ad3      	subs	r3, r2, r3
 80026a0:	2b02      	cmp	r3, #2
 80026a2:	d907      	bls.n	80026b4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80026a4:	2303      	movs	r3, #3
 80026a6:	e150      	b.n	800294a <HAL_RCC_OscConfig+0x4e2>
 80026a8:	40023800 	.word	0x40023800
 80026ac:	42470000 	.word	0x42470000
 80026b0:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026b4:	4b88      	ldr	r3, [pc, #544]	@ (80028d8 <HAL_RCC_OscConfig+0x470>)
 80026b6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80026b8:	f003 0302 	and.w	r3, r3, #2
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d1ea      	bne.n	8002696 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f003 0304 	and.w	r3, r3, #4
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	f000 8097 	beq.w	80027fc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80026ce:	2300      	movs	r3, #0
 80026d0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80026d2:	4b81      	ldr	r3, [pc, #516]	@ (80028d8 <HAL_RCC_OscConfig+0x470>)
 80026d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d10f      	bne.n	80026fe <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80026de:	2300      	movs	r3, #0
 80026e0:	60bb      	str	r3, [r7, #8]
 80026e2:	4b7d      	ldr	r3, [pc, #500]	@ (80028d8 <HAL_RCC_OscConfig+0x470>)
 80026e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026e6:	4a7c      	ldr	r2, [pc, #496]	@ (80028d8 <HAL_RCC_OscConfig+0x470>)
 80026e8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80026ec:	6413      	str	r3, [r2, #64]	@ 0x40
 80026ee:	4b7a      	ldr	r3, [pc, #488]	@ (80028d8 <HAL_RCC_OscConfig+0x470>)
 80026f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80026f6:	60bb      	str	r3, [r7, #8]
 80026f8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80026fa:	2301      	movs	r3, #1
 80026fc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026fe:	4b77      	ldr	r3, [pc, #476]	@ (80028dc <HAL_RCC_OscConfig+0x474>)
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002706:	2b00      	cmp	r3, #0
 8002708:	d118      	bne.n	800273c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800270a:	4b74      	ldr	r3, [pc, #464]	@ (80028dc <HAL_RCC_OscConfig+0x474>)
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	4a73      	ldr	r2, [pc, #460]	@ (80028dc <HAL_RCC_OscConfig+0x474>)
 8002710:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002714:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002716:	f7fe f98f 	bl	8000a38 <HAL_GetTick>
 800271a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800271c:	e008      	b.n	8002730 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800271e:	f7fe f98b 	bl	8000a38 <HAL_GetTick>
 8002722:	4602      	mov	r2, r0
 8002724:	693b      	ldr	r3, [r7, #16]
 8002726:	1ad3      	subs	r3, r2, r3
 8002728:	2b02      	cmp	r3, #2
 800272a:	d901      	bls.n	8002730 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800272c:	2303      	movs	r3, #3
 800272e:	e10c      	b.n	800294a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002730:	4b6a      	ldr	r3, [pc, #424]	@ (80028dc <HAL_RCC_OscConfig+0x474>)
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002738:	2b00      	cmp	r3, #0
 800273a:	d0f0      	beq.n	800271e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	689b      	ldr	r3, [r3, #8]
 8002740:	2b01      	cmp	r3, #1
 8002742:	d106      	bne.n	8002752 <HAL_RCC_OscConfig+0x2ea>
 8002744:	4b64      	ldr	r3, [pc, #400]	@ (80028d8 <HAL_RCC_OscConfig+0x470>)
 8002746:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002748:	4a63      	ldr	r2, [pc, #396]	@ (80028d8 <HAL_RCC_OscConfig+0x470>)
 800274a:	f043 0301 	orr.w	r3, r3, #1
 800274e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002750:	e01c      	b.n	800278c <HAL_RCC_OscConfig+0x324>
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	689b      	ldr	r3, [r3, #8]
 8002756:	2b05      	cmp	r3, #5
 8002758:	d10c      	bne.n	8002774 <HAL_RCC_OscConfig+0x30c>
 800275a:	4b5f      	ldr	r3, [pc, #380]	@ (80028d8 <HAL_RCC_OscConfig+0x470>)
 800275c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800275e:	4a5e      	ldr	r2, [pc, #376]	@ (80028d8 <HAL_RCC_OscConfig+0x470>)
 8002760:	f043 0304 	orr.w	r3, r3, #4
 8002764:	6713      	str	r3, [r2, #112]	@ 0x70
 8002766:	4b5c      	ldr	r3, [pc, #368]	@ (80028d8 <HAL_RCC_OscConfig+0x470>)
 8002768:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800276a:	4a5b      	ldr	r2, [pc, #364]	@ (80028d8 <HAL_RCC_OscConfig+0x470>)
 800276c:	f043 0301 	orr.w	r3, r3, #1
 8002770:	6713      	str	r3, [r2, #112]	@ 0x70
 8002772:	e00b      	b.n	800278c <HAL_RCC_OscConfig+0x324>
 8002774:	4b58      	ldr	r3, [pc, #352]	@ (80028d8 <HAL_RCC_OscConfig+0x470>)
 8002776:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002778:	4a57      	ldr	r2, [pc, #348]	@ (80028d8 <HAL_RCC_OscConfig+0x470>)
 800277a:	f023 0301 	bic.w	r3, r3, #1
 800277e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002780:	4b55      	ldr	r3, [pc, #340]	@ (80028d8 <HAL_RCC_OscConfig+0x470>)
 8002782:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002784:	4a54      	ldr	r2, [pc, #336]	@ (80028d8 <HAL_RCC_OscConfig+0x470>)
 8002786:	f023 0304 	bic.w	r3, r3, #4
 800278a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	689b      	ldr	r3, [r3, #8]
 8002790:	2b00      	cmp	r3, #0
 8002792:	d015      	beq.n	80027c0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002794:	f7fe f950 	bl	8000a38 <HAL_GetTick>
 8002798:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800279a:	e00a      	b.n	80027b2 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800279c:	f7fe f94c 	bl	8000a38 <HAL_GetTick>
 80027a0:	4602      	mov	r2, r0
 80027a2:	693b      	ldr	r3, [r7, #16]
 80027a4:	1ad3      	subs	r3, r2, r3
 80027a6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80027aa:	4293      	cmp	r3, r2
 80027ac:	d901      	bls.n	80027b2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80027ae:	2303      	movs	r3, #3
 80027b0:	e0cb      	b.n	800294a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027b2:	4b49      	ldr	r3, [pc, #292]	@ (80028d8 <HAL_RCC_OscConfig+0x470>)
 80027b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027b6:	f003 0302 	and.w	r3, r3, #2
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d0ee      	beq.n	800279c <HAL_RCC_OscConfig+0x334>
 80027be:	e014      	b.n	80027ea <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027c0:	f7fe f93a 	bl	8000a38 <HAL_GetTick>
 80027c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027c6:	e00a      	b.n	80027de <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027c8:	f7fe f936 	bl	8000a38 <HAL_GetTick>
 80027cc:	4602      	mov	r2, r0
 80027ce:	693b      	ldr	r3, [r7, #16]
 80027d0:	1ad3      	subs	r3, r2, r3
 80027d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80027d6:	4293      	cmp	r3, r2
 80027d8:	d901      	bls.n	80027de <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80027da:	2303      	movs	r3, #3
 80027dc:	e0b5      	b.n	800294a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027de:	4b3e      	ldr	r3, [pc, #248]	@ (80028d8 <HAL_RCC_OscConfig+0x470>)
 80027e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027e2:	f003 0302 	and.w	r3, r3, #2
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d1ee      	bne.n	80027c8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80027ea:	7dfb      	ldrb	r3, [r7, #23]
 80027ec:	2b01      	cmp	r3, #1
 80027ee:	d105      	bne.n	80027fc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80027f0:	4b39      	ldr	r3, [pc, #228]	@ (80028d8 <HAL_RCC_OscConfig+0x470>)
 80027f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027f4:	4a38      	ldr	r2, [pc, #224]	@ (80028d8 <HAL_RCC_OscConfig+0x470>)
 80027f6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80027fa:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	699b      	ldr	r3, [r3, #24]
 8002800:	2b00      	cmp	r3, #0
 8002802:	f000 80a1 	beq.w	8002948 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002806:	4b34      	ldr	r3, [pc, #208]	@ (80028d8 <HAL_RCC_OscConfig+0x470>)
 8002808:	689b      	ldr	r3, [r3, #8]
 800280a:	f003 030c 	and.w	r3, r3, #12
 800280e:	2b08      	cmp	r3, #8
 8002810:	d05c      	beq.n	80028cc <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	699b      	ldr	r3, [r3, #24]
 8002816:	2b02      	cmp	r3, #2
 8002818:	d141      	bne.n	800289e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800281a:	4b31      	ldr	r3, [pc, #196]	@ (80028e0 <HAL_RCC_OscConfig+0x478>)
 800281c:	2200      	movs	r2, #0
 800281e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002820:	f7fe f90a 	bl	8000a38 <HAL_GetTick>
 8002824:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002826:	e008      	b.n	800283a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002828:	f7fe f906 	bl	8000a38 <HAL_GetTick>
 800282c:	4602      	mov	r2, r0
 800282e:	693b      	ldr	r3, [r7, #16]
 8002830:	1ad3      	subs	r3, r2, r3
 8002832:	2b02      	cmp	r3, #2
 8002834:	d901      	bls.n	800283a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002836:	2303      	movs	r3, #3
 8002838:	e087      	b.n	800294a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800283a:	4b27      	ldr	r3, [pc, #156]	@ (80028d8 <HAL_RCC_OscConfig+0x470>)
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002842:	2b00      	cmp	r3, #0
 8002844:	d1f0      	bne.n	8002828 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	69da      	ldr	r2, [r3, #28]
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	6a1b      	ldr	r3, [r3, #32]
 800284e:	431a      	orrs	r2, r3
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002854:	019b      	lsls	r3, r3, #6
 8002856:	431a      	orrs	r2, r3
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800285c:	085b      	lsrs	r3, r3, #1
 800285e:	3b01      	subs	r3, #1
 8002860:	041b      	lsls	r3, r3, #16
 8002862:	431a      	orrs	r2, r3
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002868:	061b      	lsls	r3, r3, #24
 800286a:	491b      	ldr	r1, [pc, #108]	@ (80028d8 <HAL_RCC_OscConfig+0x470>)
 800286c:	4313      	orrs	r3, r2
 800286e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002870:	4b1b      	ldr	r3, [pc, #108]	@ (80028e0 <HAL_RCC_OscConfig+0x478>)
 8002872:	2201      	movs	r2, #1
 8002874:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002876:	f7fe f8df 	bl	8000a38 <HAL_GetTick>
 800287a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800287c:	e008      	b.n	8002890 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800287e:	f7fe f8db 	bl	8000a38 <HAL_GetTick>
 8002882:	4602      	mov	r2, r0
 8002884:	693b      	ldr	r3, [r7, #16]
 8002886:	1ad3      	subs	r3, r2, r3
 8002888:	2b02      	cmp	r3, #2
 800288a:	d901      	bls.n	8002890 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800288c:	2303      	movs	r3, #3
 800288e:	e05c      	b.n	800294a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002890:	4b11      	ldr	r3, [pc, #68]	@ (80028d8 <HAL_RCC_OscConfig+0x470>)
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002898:	2b00      	cmp	r3, #0
 800289a:	d0f0      	beq.n	800287e <HAL_RCC_OscConfig+0x416>
 800289c:	e054      	b.n	8002948 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800289e:	4b10      	ldr	r3, [pc, #64]	@ (80028e0 <HAL_RCC_OscConfig+0x478>)
 80028a0:	2200      	movs	r2, #0
 80028a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028a4:	f7fe f8c8 	bl	8000a38 <HAL_GetTick>
 80028a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028aa:	e008      	b.n	80028be <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028ac:	f7fe f8c4 	bl	8000a38 <HAL_GetTick>
 80028b0:	4602      	mov	r2, r0
 80028b2:	693b      	ldr	r3, [r7, #16]
 80028b4:	1ad3      	subs	r3, r2, r3
 80028b6:	2b02      	cmp	r3, #2
 80028b8:	d901      	bls.n	80028be <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80028ba:	2303      	movs	r3, #3
 80028bc:	e045      	b.n	800294a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028be:	4b06      	ldr	r3, [pc, #24]	@ (80028d8 <HAL_RCC_OscConfig+0x470>)
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d1f0      	bne.n	80028ac <HAL_RCC_OscConfig+0x444>
 80028ca:	e03d      	b.n	8002948 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	699b      	ldr	r3, [r3, #24]
 80028d0:	2b01      	cmp	r3, #1
 80028d2:	d107      	bne.n	80028e4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80028d4:	2301      	movs	r3, #1
 80028d6:	e038      	b.n	800294a <HAL_RCC_OscConfig+0x4e2>
 80028d8:	40023800 	.word	0x40023800
 80028dc:	40007000 	.word	0x40007000
 80028e0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80028e4:	4b1b      	ldr	r3, [pc, #108]	@ (8002954 <HAL_RCC_OscConfig+0x4ec>)
 80028e6:	685b      	ldr	r3, [r3, #4]
 80028e8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	699b      	ldr	r3, [r3, #24]
 80028ee:	2b01      	cmp	r3, #1
 80028f0:	d028      	beq.n	8002944 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80028fc:	429a      	cmp	r2, r3
 80028fe:	d121      	bne.n	8002944 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800290a:	429a      	cmp	r2, r3
 800290c:	d11a      	bne.n	8002944 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800290e:	68fa      	ldr	r2, [r7, #12]
 8002910:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002914:	4013      	ands	r3, r2
 8002916:	687a      	ldr	r2, [r7, #4]
 8002918:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800291a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800291c:	4293      	cmp	r3, r2
 800291e:	d111      	bne.n	8002944 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800292a:	085b      	lsrs	r3, r3, #1
 800292c:	3b01      	subs	r3, #1
 800292e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002930:	429a      	cmp	r2, r3
 8002932:	d107      	bne.n	8002944 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800293e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002940:	429a      	cmp	r2, r3
 8002942:	d001      	beq.n	8002948 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002944:	2301      	movs	r3, #1
 8002946:	e000      	b.n	800294a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002948:	2300      	movs	r3, #0
}
 800294a:	4618      	mov	r0, r3
 800294c:	3718      	adds	r7, #24
 800294e:	46bd      	mov	sp, r7
 8002950:	bd80      	pop	{r7, pc}
 8002952:	bf00      	nop
 8002954:	40023800 	.word	0x40023800

08002958 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	b084      	sub	sp, #16
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
 8002960:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	2b00      	cmp	r3, #0
 8002966:	d101      	bne.n	800296c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002968:	2301      	movs	r3, #1
 800296a:	e0cc      	b.n	8002b06 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800296c:	4b68      	ldr	r3, [pc, #416]	@ (8002b10 <HAL_RCC_ClockConfig+0x1b8>)
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f003 0307 	and.w	r3, r3, #7
 8002974:	683a      	ldr	r2, [r7, #0]
 8002976:	429a      	cmp	r2, r3
 8002978:	d90c      	bls.n	8002994 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800297a:	4b65      	ldr	r3, [pc, #404]	@ (8002b10 <HAL_RCC_ClockConfig+0x1b8>)
 800297c:	683a      	ldr	r2, [r7, #0]
 800297e:	b2d2      	uxtb	r2, r2
 8002980:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002982:	4b63      	ldr	r3, [pc, #396]	@ (8002b10 <HAL_RCC_ClockConfig+0x1b8>)
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f003 0307 	and.w	r3, r3, #7
 800298a:	683a      	ldr	r2, [r7, #0]
 800298c:	429a      	cmp	r2, r3
 800298e:	d001      	beq.n	8002994 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002990:	2301      	movs	r3, #1
 8002992:	e0b8      	b.n	8002b06 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f003 0302 	and.w	r3, r3, #2
 800299c:	2b00      	cmp	r3, #0
 800299e:	d020      	beq.n	80029e2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f003 0304 	and.w	r3, r3, #4
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d005      	beq.n	80029b8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80029ac:	4b59      	ldr	r3, [pc, #356]	@ (8002b14 <HAL_RCC_ClockConfig+0x1bc>)
 80029ae:	689b      	ldr	r3, [r3, #8]
 80029b0:	4a58      	ldr	r2, [pc, #352]	@ (8002b14 <HAL_RCC_ClockConfig+0x1bc>)
 80029b2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80029b6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f003 0308 	and.w	r3, r3, #8
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d005      	beq.n	80029d0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80029c4:	4b53      	ldr	r3, [pc, #332]	@ (8002b14 <HAL_RCC_ClockConfig+0x1bc>)
 80029c6:	689b      	ldr	r3, [r3, #8]
 80029c8:	4a52      	ldr	r2, [pc, #328]	@ (8002b14 <HAL_RCC_ClockConfig+0x1bc>)
 80029ca:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80029ce:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80029d0:	4b50      	ldr	r3, [pc, #320]	@ (8002b14 <HAL_RCC_ClockConfig+0x1bc>)
 80029d2:	689b      	ldr	r3, [r3, #8]
 80029d4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	689b      	ldr	r3, [r3, #8]
 80029dc:	494d      	ldr	r1, [pc, #308]	@ (8002b14 <HAL_RCC_ClockConfig+0x1bc>)
 80029de:	4313      	orrs	r3, r2
 80029e0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f003 0301 	and.w	r3, r3, #1
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d044      	beq.n	8002a78 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	685b      	ldr	r3, [r3, #4]
 80029f2:	2b01      	cmp	r3, #1
 80029f4:	d107      	bne.n	8002a06 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029f6:	4b47      	ldr	r3, [pc, #284]	@ (8002b14 <HAL_RCC_ClockConfig+0x1bc>)
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d119      	bne.n	8002a36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a02:	2301      	movs	r3, #1
 8002a04:	e07f      	b.n	8002b06 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	685b      	ldr	r3, [r3, #4]
 8002a0a:	2b02      	cmp	r3, #2
 8002a0c:	d003      	beq.n	8002a16 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002a12:	2b03      	cmp	r3, #3
 8002a14:	d107      	bne.n	8002a26 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a16:	4b3f      	ldr	r3, [pc, #252]	@ (8002b14 <HAL_RCC_ClockConfig+0x1bc>)
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d109      	bne.n	8002a36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a22:	2301      	movs	r3, #1
 8002a24:	e06f      	b.n	8002b06 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a26:	4b3b      	ldr	r3, [pc, #236]	@ (8002b14 <HAL_RCC_ClockConfig+0x1bc>)
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f003 0302 	and.w	r3, r3, #2
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d101      	bne.n	8002a36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a32:	2301      	movs	r3, #1
 8002a34:	e067      	b.n	8002b06 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002a36:	4b37      	ldr	r3, [pc, #220]	@ (8002b14 <HAL_RCC_ClockConfig+0x1bc>)
 8002a38:	689b      	ldr	r3, [r3, #8]
 8002a3a:	f023 0203 	bic.w	r2, r3, #3
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	685b      	ldr	r3, [r3, #4]
 8002a42:	4934      	ldr	r1, [pc, #208]	@ (8002b14 <HAL_RCC_ClockConfig+0x1bc>)
 8002a44:	4313      	orrs	r3, r2
 8002a46:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002a48:	f7fd fff6 	bl	8000a38 <HAL_GetTick>
 8002a4c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a4e:	e00a      	b.n	8002a66 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a50:	f7fd fff2 	bl	8000a38 <HAL_GetTick>
 8002a54:	4602      	mov	r2, r0
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	1ad3      	subs	r3, r2, r3
 8002a5a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a5e:	4293      	cmp	r3, r2
 8002a60:	d901      	bls.n	8002a66 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002a62:	2303      	movs	r3, #3
 8002a64:	e04f      	b.n	8002b06 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a66:	4b2b      	ldr	r3, [pc, #172]	@ (8002b14 <HAL_RCC_ClockConfig+0x1bc>)
 8002a68:	689b      	ldr	r3, [r3, #8]
 8002a6a:	f003 020c 	and.w	r2, r3, #12
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	685b      	ldr	r3, [r3, #4]
 8002a72:	009b      	lsls	r3, r3, #2
 8002a74:	429a      	cmp	r2, r3
 8002a76:	d1eb      	bne.n	8002a50 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002a78:	4b25      	ldr	r3, [pc, #148]	@ (8002b10 <HAL_RCC_ClockConfig+0x1b8>)
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f003 0307 	and.w	r3, r3, #7
 8002a80:	683a      	ldr	r2, [r7, #0]
 8002a82:	429a      	cmp	r2, r3
 8002a84:	d20c      	bcs.n	8002aa0 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a86:	4b22      	ldr	r3, [pc, #136]	@ (8002b10 <HAL_RCC_ClockConfig+0x1b8>)
 8002a88:	683a      	ldr	r2, [r7, #0]
 8002a8a:	b2d2      	uxtb	r2, r2
 8002a8c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a8e:	4b20      	ldr	r3, [pc, #128]	@ (8002b10 <HAL_RCC_ClockConfig+0x1b8>)
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f003 0307 	and.w	r3, r3, #7
 8002a96:	683a      	ldr	r2, [r7, #0]
 8002a98:	429a      	cmp	r2, r3
 8002a9a:	d001      	beq.n	8002aa0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002a9c:	2301      	movs	r3, #1
 8002a9e:	e032      	b.n	8002b06 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f003 0304 	and.w	r3, r3, #4
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d008      	beq.n	8002abe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002aac:	4b19      	ldr	r3, [pc, #100]	@ (8002b14 <HAL_RCC_ClockConfig+0x1bc>)
 8002aae:	689b      	ldr	r3, [r3, #8]
 8002ab0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	68db      	ldr	r3, [r3, #12]
 8002ab8:	4916      	ldr	r1, [pc, #88]	@ (8002b14 <HAL_RCC_ClockConfig+0x1bc>)
 8002aba:	4313      	orrs	r3, r2
 8002abc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f003 0308 	and.w	r3, r3, #8
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d009      	beq.n	8002ade <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002aca:	4b12      	ldr	r3, [pc, #72]	@ (8002b14 <HAL_RCC_ClockConfig+0x1bc>)
 8002acc:	689b      	ldr	r3, [r3, #8]
 8002ace:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	691b      	ldr	r3, [r3, #16]
 8002ad6:	00db      	lsls	r3, r3, #3
 8002ad8:	490e      	ldr	r1, [pc, #56]	@ (8002b14 <HAL_RCC_ClockConfig+0x1bc>)
 8002ada:	4313      	orrs	r3, r2
 8002adc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002ade:	f000 f821 	bl	8002b24 <HAL_RCC_GetSysClockFreq>
 8002ae2:	4602      	mov	r2, r0
 8002ae4:	4b0b      	ldr	r3, [pc, #44]	@ (8002b14 <HAL_RCC_ClockConfig+0x1bc>)
 8002ae6:	689b      	ldr	r3, [r3, #8]
 8002ae8:	091b      	lsrs	r3, r3, #4
 8002aea:	f003 030f 	and.w	r3, r3, #15
 8002aee:	490a      	ldr	r1, [pc, #40]	@ (8002b18 <HAL_RCC_ClockConfig+0x1c0>)
 8002af0:	5ccb      	ldrb	r3, [r1, r3]
 8002af2:	fa22 f303 	lsr.w	r3, r2, r3
 8002af6:	4a09      	ldr	r2, [pc, #36]	@ (8002b1c <HAL_RCC_ClockConfig+0x1c4>)
 8002af8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002afa:	4b09      	ldr	r3, [pc, #36]	@ (8002b20 <HAL_RCC_ClockConfig+0x1c8>)
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	4618      	mov	r0, r3
 8002b00:	f7fd ff56 	bl	80009b0 <HAL_InitTick>

  return HAL_OK;
 8002b04:	2300      	movs	r3, #0
}
 8002b06:	4618      	mov	r0, r3
 8002b08:	3710      	adds	r7, #16
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	bd80      	pop	{r7, pc}
 8002b0e:	bf00      	nop
 8002b10:	40023c00 	.word	0x40023c00
 8002b14:	40023800 	.word	0x40023800
 8002b18:	080072bc 	.word	0x080072bc
 8002b1c:	20000000 	.word	0x20000000
 8002b20:	20000004 	.word	0x20000004

08002b24 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b24:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002b28:	b094      	sub	sp, #80	@ 0x50
 8002b2a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002b2c:	2300      	movs	r3, #0
 8002b2e:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8002b30:	2300      	movs	r3, #0
 8002b32:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8002b34:	2300      	movs	r3, #0
 8002b36:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8002b38:	2300      	movs	r3, #0
 8002b3a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002b3c:	4b79      	ldr	r3, [pc, #484]	@ (8002d24 <HAL_RCC_GetSysClockFreq+0x200>)
 8002b3e:	689b      	ldr	r3, [r3, #8]
 8002b40:	f003 030c 	and.w	r3, r3, #12
 8002b44:	2b08      	cmp	r3, #8
 8002b46:	d00d      	beq.n	8002b64 <HAL_RCC_GetSysClockFreq+0x40>
 8002b48:	2b08      	cmp	r3, #8
 8002b4a:	f200 80e1 	bhi.w	8002d10 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d002      	beq.n	8002b58 <HAL_RCC_GetSysClockFreq+0x34>
 8002b52:	2b04      	cmp	r3, #4
 8002b54:	d003      	beq.n	8002b5e <HAL_RCC_GetSysClockFreq+0x3a>
 8002b56:	e0db      	b.n	8002d10 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002b58:	4b73      	ldr	r3, [pc, #460]	@ (8002d28 <HAL_RCC_GetSysClockFreq+0x204>)
 8002b5a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002b5c:	e0db      	b.n	8002d16 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002b5e:	4b73      	ldr	r3, [pc, #460]	@ (8002d2c <HAL_RCC_GetSysClockFreq+0x208>)
 8002b60:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002b62:	e0d8      	b.n	8002d16 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002b64:	4b6f      	ldr	r3, [pc, #444]	@ (8002d24 <HAL_RCC_GetSysClockFreq+0x200>)
 8002b66:	685b      	ldr	r3, [r3, #4]
 8002b68:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002b6c:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002b6e:	4b6d      	ldr	r3, [pc, #436]	@ (8002d24 <HAL_RCC_GetSysClockFreq+0x200>)
 8002b70:	685b      	ldr	r3, [r3, #4]
 8002b72:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d063      	beq.n	8002c42 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b7a:	4b6a      	ldr	r3, [pc, #424]	@ (8002d24 <HAL_RCC_GetSysClockFreq+0x200>)
 8002b7c:	685b      	ldr	r3, [r3, #4]
 8002b7e:	099b      	lsrs	r3, r3, #6
 8002b80:	2200      	movs	r2, #0
 8002b82:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002b84:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002b86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002b88:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b8c:	633b      	str	r3, [r7, #48]	@ 0x30
 8002b8e:	2300      	movs	r3, #0
 8002b90:	637b      	str	r3, [r7, #52]	@ 0x34
 8002b92:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002b96:	4622      	mov	r2, r4
 8002b98:	462b      	mov	r3, r5
 8002b9a:	f04f 0000 	mov.w	r0, #0
 8002b9e:	f04f 0100 	mov.w	r1, #0
 8002ba2:	0159      	lsls	r1, r3, #5
 8002ba4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002ba8:	0150      	lsls	r0, r2, #5
 8002baa:	4602      	mov	r2, r0
 8002bac:	460b      	mov	r3, r1
 8002bae:	4621      	mov	r1, r4
 8002bb0:	1a51      	subs	r1, r2, r1
 8002bb2:	6139      	str	r1, [r7, #16]
 8002bb4:	4629      	mov	r1, r5
 8002bb6:	eb63 0301 	sbc.w	r3, r3, r1
 8002bba:	617b      	str	r3, [r7, #20]
 8002bbc:	f04f 0200 	mov.w	r2, #0
 8002bc0:	f04f 0300 	mov.w	r3, #0
 8002bc4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002bc8:	4659      	mov	r1, fp
 8002bca:	018b      	lsls	r3, r1, #6
 8002bcc:	4651      	mov	r1, sl
 8002bce:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002bd2:	4651      	mov	r1, sl
 8002bd4:	018a      	lsls	r2, r1, #6
 8002bd6:	4651      	mov	r1, sl
 8002bd8:	ebb2 0801 	subs.w	r8, r2, r1
 8002bdc:	4659      	mov	r1, fp
 8002bde:	eb63 0901 	sbc.w	r9, r3, r1
 8002be2:	f04f 0200 	mov.w	r2, #0
 8002be6:	f04f 0300 	mov.w	r3, #0
 8002bea:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002bee:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002bf2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002bf6:	4690      	mov	r8, r2
 8002bf8:	4699      	mov	r9, r3
 8002bfa:	4623      	mov	r3, r4
 8002bfc:	eb18 0303 	adds.w	r3, r8, r3
 8002c00:	60bb      	str	r3, [r7, #8]
 8002c02:	462b      	mov	r3, r5
 8002c04:	eb49 0303 	adc.w	r3, r9, r3
 8002c08:	60fb      	str	r3, [r7, #12]
 8002c0a:	f04f 0200 	mov.w	r2, #0
 8002c0e:	f04f 0300 	mov.w	r3, #0
 8002c12:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002c16:	4629      	mov	r1, r5
 8002c18:	024b      	lsls	r3, r1, #9
 8002c1a:	4621      	mov	r1, r4
 8002c1c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002c20:	4621      	mov	r1, r4
 8002c22:	024a      	lsls	r2, r1, #9
 8002c24:	4610      	mov	r0, r2
 8002c26:	4619      	mov	r1, r3
 8002c28:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002c2e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002c30:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002c34:	f7fd fac8 	bl	80001c8 <__aeabi_uldivmod>
 8002c38:	4602      	mov	r2, r0
 8002c3a:	460b      	mov	r3, r1
 8002c3c:	4613      	mov	r3, r2
 8002c3e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002c40:	e058      	b.n	8002cf4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c42:	4b38      	ldr	r3, [pc, #224]	@ (8002d24 <HAL_RCC_GetSysClockFreq+0x200>)
 8002c44:	685b      	ldr	r3, [r3, #4]
 8002c46:	099b      	lsrs	r3, r3, #6
 8002c48:	2200      	movs	r2, #0
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	4611      	mov	r1, r2
 8002c4e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002c52:	623b      	str	r3, [r7, #32]
 8002c54:	2300      	movs	r3, #0
 8002c56:	627b      	str	r3, [r7, #36]	@ 0x24
 8002c58:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002c5c:	4642      	mov	r2, r8
 8002c5e:	464b      	mov	r3, r9
 8002c60:	f04f 0000 	mov.w	r0, #0
 8002c64:	f04f 0100 	mov.w	r1, #0
 8002c68:	0159      	lsls	r1, r3, #5
 8002c6a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002c6e:	0150      	lsls	r0, r2, #5
 8002c70:	4602      	mov	r2, r0
 8002c72:	460b      	mov	r3, r1
 8002c74:	4641      	mov	r1, r8
 8002c76:	ebb2 0a01 	subs.w	sl, r2, r1
 8002c7a:	4649      	mov	r1, r9
 8002c7c:	eb63 0b01 	sbc.w	fp, r3, r1
 8002c80:	f04f 0200 	mov.w	r2, #0
 8002c84:	f04f 0300 	mov.w	r3, #0
 8002c88:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002c8c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002c90:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002c94:	ebb2 040a 	subs.w	r4, r2, sl
 8002c98:	eb63 050b 	sbc.w	r5, r3, fp
 8002c9c:	f04f 0200 	mov.w	r2, #0
 8002ca0:	f04f 0300 	mov.w	r3, #0
 8002ca4:	00eb      	lsls	r3, r5, #3
 8002ca6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002caa:	00e2      	lsls	r2, r4, #3
 8002cac:	4614      	mov	r4, r2
 8002cae:	461d      	mov	r5, r3
 8002cb0:	4643      	mov	r3, r8
 8002cb2:	18e3      	adds	r3, r4, r3
 8002cb4:	603b      	str	r3, [r7, #0]
 8002cb6:	464b      	mov	r3, r9
 8002cb8:	eb45 0303 	adc.w	r3, r5, r3
 8002cbc:	607b      	str	r3, [r7, #4]
 8002cbe:	f04f 0200 	mov.w	r2, #0
 8002cc2:	f04f 0300 	mov.w	r3, #0
 8002cc6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002cca:	4629      	mov	r1, r5
 8002ccc:	028b      	lsls	r3, r1, #10
 8002cce:	4621      	mov	r1, r4
 8002cd0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002cd4:	4621      	mov	r1, r4
 8002cd6:	028a      	lsls	r2, r1, #10
 8002cd8:	4610      	mov	r0, r2
 8002cda:	4619      	mov	r1, r3
 8002cdc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002cde:	2200      	movs	r2, #0
 8002ce0:	61bb      	str	r3, [r7, #24]
 8002ce2:	61fa      	str	r2, [r7, #28]
 8002ce4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002ce8:	f7fd fa6e 	bl	80001c8 <__aeabi_uldivmod>
 8002cec:	4602      	mov	r2, r0
 8002cee:	460b      	mov	r3, r1
 8002cf0:	4613      	mov	r3, r2
 8002cf2:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002cf4:	4b0b      	ldr	r3, [pc, #44]	@ (8002d24 <HAL_RCC_GetSysClockFreq+0x200>)
 8002cf6:	685b      	ldr	r3, [r3, #4]
 8002cf8:	0c1b      	lsrs	r3, r3, #16
 8002cfa:	f003 0303 	and.w	r3, r3, #3
 8002cfe:	3301      	adds	r3, #1
 8002d00:	005b      	lsls	r3, r3, #1
 8002d02:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8002d04:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002d06:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002d08:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d0c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002d0e:	e002      	b.n	8002d16 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002d10:	4b05      	ldr	r3, [pc, #20]	@ (8002d28 <HAL_RCC_GetSysClockFreq+0x204>)
 8002d12:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002d14:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002d16:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8002d18:	4618      	mov	r0, r3
 8002d1a:	3750      	adds	r7, #80	@ 0x50
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002d22:	bf00      	nop
 8002d24:	40023800 	.word	0x40023800
 8002d28:	00f42400 	.word	0x00f42400
 8002d2c:	007a1200 	.word	0x007a1200

08002d30 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d30:	b480      	push	{r7}
 8002d32:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002d34:	4b03      	ldr	r3, [pc, #12]	@ (8002d44 <HAL_RCC_GetHCLKFreq+0x14>)
 8002d36:	681b      	ldr	r3, [r3, #0]
}
 8002d38:	4618      	mov	r0, r3
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d40:	4770      	bx	lr
 8002d42:	bf00      	nop
 8002d44:	20000000 	.word	0x20000000

08002d48 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	b086      	sub	sp, #24
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]
 8002d50:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d101      	bne.n	8002d5c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8002d58:	2301      	movs	r3, #1
 8002d5a:	e097      	b.n	8002e8c <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002d62:	b2db      	uxtb	r3, r3
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d106      	bne.n	8002d76 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8002d70:	6878      	ldr	r0, [r7, #4]
 8002d72:	f7fd fd2b 	bl	80007cc <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	2202      	movs	r2, #2
 8002d7a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	689b      	ldr	r3, [r3, #8]
 8002d84:	687a      	ldr	r2, [r7, #4]
 8002d86:	6812      	ldr	r2, [r2, #0]
 8002d88:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002d8c:	f023 0307 	bic.w	r3, r3, #7
 8002d90:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681a      	ldr	r2, [r3, #0]
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	3304      	adds	r3, #4
 8002d9a:	4619      	mov	r1, r3
 8002d9c:	4610      	mov	r0, r2
 8002d9e:	f000 fa3f 	bl	8003220 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	689b      	ldr	r3, [r3, #8]
 8002da8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	699b      	ldr	r3, [r3, #24]
 8002db0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	6a1b      	ldr	r3, [r3, #32]
 8002db8:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8002dba:	683b      	ldr	r3, [r7, #0]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	697a      	ldr	r2, [r7, #20]
 8002dc0:	4313      	orrs	r3, r2
 8002dc2:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8002dc4:	693b      	ldr	r3, [r7, #16]
 8002dc6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002dca:	f023 0303 	bic.w	r3, r3, #3
 8002dce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8002dd0:	683b      	ldr	r3, [r7, #0]
 8002dd2:	689a      	ldr	r2, [r3, #8]
 8002dd4:	683b      	ldr	r3, [r7, #0]
 8002dd6:	699b      	ldr	r3, [r3, #24]
 8002dd8:	021b      	lsls	r3, r3, #8
 8002dda:	4313      	orrs	r3, r2
 8002ddc:	693a      	ldr	r2, [r7, #16]
 8002dde:	4313      	orrs	r3, r2
 8002de0:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8002de2:	693b      	ldr	r3, [r7, #16]
 8002de4:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8002de8:	f023 030c 	bic.w	r3, r3, #12
 8002dec:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8002dee:	693b      	ldr	r3, [r7, #16]
 8002df0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002df4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002df8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8002dfa:	683b      	ldr	r3, [r7, #0]
 8002dfc:	68da      	ldr	r2, [r3, #12]
 8002dfe:	683b      	ldr	r3, [r7, #0]
 8002e00:	69db      	ldr	r3, [r3, #28]
 8002e02:	021b      	lsls	r3, r3, #8
 8002e04:	4313      	orrs	r3, r2
 8002e06:	693a      	ldr	r2, [r7, #16]
 8002e08:	4313      	orrs	r3, r2
 8002e0a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8002e0c:	683b      	ldr	r3, [r7, #0]
 8002e0e:	691b      	ldr	r3, [r3, #16]
 8002e10:	011a      	lsls	r2, r3, #4
 8002e12:	683b      	ldr	r3, [r7, #0]
 8002e14:	6a1b      	ldr	r3, [r3, #32]
 8002e16:	031b      	lsls	r3, r3, #12
 8002e18:	4313      	orrs	r3, r2
 8002e1a:	693a      	ldr	r2, [r7, #16]
 8002e1c:	4313      	orrs	r3, r2
 8002e1e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8002e26:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8002e2e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8002e30:	683b      	ldr	r3, [r7, #0]
 8002e32:	685a      	ldr	r2, [r3, #4]
 8002e34:	683b      	ldr	r3, [r7, #0]
 8002e36:	695b      	ldr	r3, [r3, #20]
 8002e38:	011b      	lsls	r3, r3, #4
 8002e3a:	4313      	orrs	r3, r2
 8002e3c:	68fa      	ldr	r2, [r7, #12]
 8002e3e:	4313      	orrs	r3, r2
 8002e40:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	697a      	ldr	r2, [r7, #20]
 8002e48:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	693a      	ldr	r2, [r7, #16]
 8002e50:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	68fa      	ldr	r2, [r7, #12]
 8002e58:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	2201      	movs	r2, #1
 8002e5e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	2201      	movs	r2, #1
 8002e66:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	2201      	movs	r2, #1
 8002e6e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	2201      	movs	r2, #1
 8002e76:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	2201      	movs	r2, #1
 8002e7e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	2201      	movs	r2, #1
 8002e86:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002e8a:	2300      	movs	r3, #0
}
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	3718      	adds	r7, #24
 8002e90:	46bd      	mov	sp, r7
 8002e92:	bd80      	pop	{r7, pc}

08002e94 <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002e94:	b580      	push	{r7, lr}
 8002e96:	b084      	sub	sp, #16
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]
 8002e9c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002ea4:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002eac:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002eb4:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8002ebc:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8002ebe:	683b      	ldr	r3, [r7, #0]
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d110      	bne.n	8002ee6 <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8002ec4:	7bfb      	ldrb	r3, [r7, #15]
 8002ec6:	2b01      	cmp	r3, #1
 8002ec8:	d102      	bne.n	8002ed0 <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8002eca:	7b7b      	ldrb	r3, [r7, #13]
 8002ecc:	2b01      	cmp	r3, #1
 8002ece:	d001      	beq.n	8002ed4 <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 8002ed0:	2301      	movs	r3, #1
 8002ed2:	e089      	b.n	8002fe8 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	2202      	movs	r2, #2
 8002ed8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	2202      	movs	r2, #2
 8002ee0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002ee4:	e031      	b.n	8002f4a <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8002ee6:	683b      	ldr	r3, [r7, #0]
 8002ee8:	2b04      	cmp	r3, #4
 8002eea:	d110      	bne.n	8002f0e <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8002eec:	7bbb      	ldrb	r3, [r7, #14]
 8002eee:	2b01      	cmp	r3, #1
 8002ef0:	d102      	bne.n	8002ef8 <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8002ef2:	7b3b      	ldrb	r3, [r7, #12]
 8002ef4:	2b01      	cmp	r3, #1
 8002ef6:	d001      	beq.n	8002efc <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 8002ef8:	2301      	movs	r3, #1
 8002efa:	e075      	b.n	8002fe8 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	2202      	movs	r2, #2
 8002f00:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2202      	movs	r2, #2
 8002f08:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002f0c:	e01d      	b.n	8002f4a <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8002f0e:	7bfb      	ldrb	r3, [r7, #15]
 8002f10:	2b01      	cmp	r3, #1
 8002f12:	d108      	bne.n	8002f26 <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8002f14:	7bbb      	ldrb	r3, [r7, #14]
 8002f16:	2b01      	cmp	r3, #1
 8002f18:	d105      	bne.n	8002f26 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8002f1a:	7b7b      	ldrb	r3, [r7, #13]
 8002f1c:	2b01      	cmp	r3, #1
 8002f1e:	d102      	bne.n	8002f26 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8002f20:	7b3b      	ldrb	r3, [r7, #12]
 8002f22:	2b01      	cmp	r3, #1
 8002f24:	d001      	beq.n	8002f2a <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 8002f26:	2301      	movs	r3, #1
 8002f28:	e05e      	b.n	8002fe8 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	2202      	movs	r2, #2
 8002f2e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	2202      	movs	r2, #2
 8002f36:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	2202      	movs	r2, #2
 8002f3e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	2202      	movs	r2, #2
 8002f46:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 8002f4a:	683b      	ldr	r3, [r7, #0]
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d003      	beq.n	8002f58 <HAL_TIM_Encoder_Start_IT+0xc4>
 8002f50:	683b      	ldr	r3, [r7, #0]
 8002f52:	2b04      	cmp	r3, #4
 8002f54:	d010      	beq.n	8002f78 <HAL_TIM_Encoder_Start_IT+0xe4>
 8002f56:	e01f      	b.n	8002f98 <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	2201      	movs	r2, #1
 8002f5e:	2100      	movs	r1, #0
 8002f60:	4618      	mov	r0, r3
 8002f62:	f000 fa09 	bl	8003378 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	68da      	ldr	r2, [r3, #12]
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f042 0202 	orr.w	r2, r2, #2
 8002f74:	60da      	str	r2, [r3, #12]
      break;
 8002f76:	e02e      	b.n	8002fd6 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	2201      	movs	r2, #1
 8002f7e:	2104      	movs	r1, #4
 8002f80:	4618      	mov	r0, r3
 8002f82:	f000 f9f9 	bl	8003378 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	68da      	ldr	r2, [r3, #12]
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f042 0204 	orr.w	r2, r2, #4
 8002f94:	60da      	str	r2, [r3, #12]
      break;
 8002f96:	e01e      	b.n	8002fd6 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	2201      	movs	r2, #1
 8002f9e:	2100      	movs	r1, #0
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	f000 f9e9 	bl	8003378 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	2201      	movs	r2, #1
 8002fac:	2104      	movs	r1, #4
 8002fae:	4618      	mov	r0, r3
 8002fb0:	f000 f9e2 	bl	8003378 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	68da      	ldr	r2, [r3, #12]
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f042 0202 	orr.w	r2, r2, #2
 8002fc2:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	68da      	ldr	r2, [r3, #12]
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f042 0204 	orr.w	r2, r2, #4
 8002fd2:	60da      	str	r2, [r3, #12]
      break;
 8002fd4:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	681a      	ldr	r2, [r3, #0]
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f042 0201 	orr.w	r2, r2, #1
 8002fe4:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8002fe6:	2300      	movs	r3, #0
}
 8002fe8:	4618      	mov	r0, r3
 8002fea:	3710      	adds	r7, #16
 8002fec:	46bd      	mov	sp, r7
 8002fee:	bd80      	pop	{r7, pc}

08002ff0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	b084      	sub	sp, #16
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	68db      	ldr	r3, [r3, #12]
 8002ffe:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	691b      	ldr	r3, [r3, #16]
 8003006:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003008:	68bb      	ldr	r3, [r7, #8]
 800300a:	f003 0302 	and.w	r3, r3, #2
 800300e:	2b00      	cmp	r3, #0
 8003010:	d020      	beq.n	8003054 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	f003 0302 	and.w	r3, r3, #2
 8003018:	2b00      	cmp	r3, #0
 800301a:	d01b      	beq.n	8003054 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f06f 0202 	mvn.w	r2, #2
 8003024:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	2201      	movs	r2, #1
 800302a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	699b      	ldr	r3, [r3, #24]
 8003032:	f003 0303 	and.w	r3, r3, #3
 8003036:	2b00      	cmp	r3, #0
 8003038:	d003      	beq.n	8003042 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800303a:	6878      	ldr	r0, [r7, #4]
 800303c:	f7fd fa5a 	bl	80004f4 <HAL_TIM_IC_CaptureCallback>
 8003040:	e005      	b.n	800304e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003042:	6878      	ldr	r0, [r7, #4]
 8003044:	f000 f8ce 	bl	80031e4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003048:	6878      	ldr	r0, [r7, #4]
 800304a:	f000 f8d5 	bl	80031f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	2200      	movs	r2, #0
 8003052:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003054:	68bb      	ldr	r3, [r7, #8]
 8003056:	f003 0304 	and.w	r3, r3, #4
 800305a:	2b00      	cmp	r3, #0
 800305c:	d020      	beq.n	80030a0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	f003 0304 	and.w	r3, r3, #4
 8003064:	2b00      	cmp	r3, #0
 8003066:	d01b      	beq.n	80030a0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f06f 0204 	mvn.w	r2, #4
 8003070:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	2202      	movs	r2, #2
 8003076:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	699b      	ldr	r3, [r3, #24]
 800307e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003082:	2b00      	cmp	r3, #0
 8003084:	d003      	beq.n	800308e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003086:	6878      	ldr	r0, [r7, #4]
 8003088:	f7fd fa34 	bl	80004f4 <HAL_TIM_IC_CaptureCallback>
 800308c:	e005      	b.n	800309a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800308e:	6878      	ldr	r0, [r7, #4]
 8003090:	f000 f8a8 	bl	80031e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003094:	6878      	ldr	r0, [r7, #4]
 8003096:	f000 f8af 	bl	80031f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	2200      	movs	r2, #0
 800309e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80030a0:	68bb      	ldr	r3, [r7, #8]
 80030a2:	f003 0308 	and.w	r3, r3, #8
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d020      	beq.n	80030ec <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	f003 0308 	and.w	r3, r3, #8
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d01b      	beq.n	80030ec <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f06f 0208 	mvn.w	r2, #8
 80030bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	2204      	movs	r2, #4
 80030c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	69db      	ldr	r3, [r3, #28]
 80030ca:	f003 0303 	and.w	r3, r3, #3
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d003      	beq.n	80030da <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80030d2:	6878      	ldr	r0, [r7, #4]
 80030d4:	f7fd fa0e 	bl	80004f4 <HAL_TIM_IC_CaptureCallback>
 80030d8:	e005      	b.n	80030e6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80030da:	6878      	ldr	r0, [r7, #4]
 80030dc:	f000 f882 	bl	80031e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030e0:	6878      	ldr	r0, [r7, #4]
 80030e2:	f000 f889 	bl	80031f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	2200      	movs	r2, #0
 80030ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80030ec:	68bb      	ldr	r3, [r7, #8]
 80030ee:	f003 0310 	and.w	r3, r3, #16
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d020      	beq.n	8003138 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	f003 0310 	and.w	r3, r3, #16
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d01b      	beq.n	8003138 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f06f 0210 	mvn.w	r2, #16
 8003108:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	2208      	movs	r2, #8
 800310e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	69db      	ldr	r3, [r3, #28]
 8003116:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800311a:	2b00      	cmp	r3, #0
 800311c:	d003      	beq.n	8003126 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800311e:	6878      	ldr	r0, [r7, #4]
 8003120:	f7fd f9e8 	bl	80004f4 <HAL_TIM_IC_CaptureCallback>
 8003124:	e005      	b.n	8003132 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003126:	6878      	ldr	r0, [r7, #4]
 8003128:	f000 f85c 	bl	80031e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800312c:	6878      	ldr	r0, [r7, #4]
 800312e:	f000 f863 	bl	80031f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	2200      	movs	r2, #0
 8003136:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003138:	68bb      	ldr	r3, [r7, #8]
 800313a:	f003 0301 	and.w	r3, r3, #1
 800313e:	2b00      	cmp	r3, #0
 8003140:	d00c      	beq.n	800315c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	f003 0301 	and.w	r3, r3, #1
 8003148:	2b00      	cmp	r3, #0
 800314a:	d007      	beq.n	800315c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f06f 0201 	mvn.w	r2, #1
 8003154:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003156:	6878      	ldr	r0, [r7, #4]
 8003158:	f000 f83a 	bl	80031d0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800315c:	68bb      	ldr	r3, [r7, #8]
 800315e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003162:	2b00      	cmp	r3, #0
 8003164:	d00c      	beq.n	8003180 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800316c:	2b00      	cmp	r3, #0
 800316e:	d007      	beq.n	8003180 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003178:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800317a:	6878      	ldr	r0, [r7, #4]
 800317c:	f000 f9a8 	bl	80034d0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003180:	68bb      	ldr	r3, [r7, #8]
 8003182:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003186:	2b00      	cmp	r3, #0
 8003188:	d00c      	beq.n	80031a4 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003190:	2b00      	cmp	r3, #0
 8003192:	d007      	beq.n	80031a4 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800319c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800319e:	6878      	ldr	r0, [r7, #4]
 80031a0:	f000 f834 	bl	800320c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80031a4:	68bb      	ldr	r3, [r7, #8]
 80031a6:	f003 0320 	and.w	r3, r3, #32
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d00c      	beq.n	80031c8 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	f003 0320 	and.w	r3, r3, #32
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d007      	beq.n	80031c8 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f06f 0220 	mvn.w	r2, #32
 80031c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80031c2:	6878      	ldr	r0, [r7, #4]
 80031c4:	f000 f97a 	bl	80034bc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80031c8:	bf00      	nop
 80031ca:	3710      	adds	r7, #16
 80031cc:	46bd      	mov	sp, r7
 80031ce:	bd80      	pop	{r7, pc}

080031d0 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80031d0:	b480      	push	{r7}
 80031d2:	b083      	sub	sp, #12
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80031d8:	bf00      	nop
 80031da:	370c      	adds	r7, #12
 80031dc:	46bd      	mov	sp, r7
 80031de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e2:	4770      	bx	lr

080031e4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80031e4:	b480      	push	{r7}
 80031e6:	b083      	sub	sp, #12
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80031ec:	bf00      	nop
 80031ee:	370c      	adds	r7, #12
 80031f0:	46bd      	mov	sp, r7
 80031f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f6:	4770      	bx	lr

080031f8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80031f8:	b480      	push	{r7}
 80031fa:	b083      	sub	sp, #12
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003200:	bf00      	nop
 8003202:	370c      	adds	r7, #12
 8003204:	46bd      	mov	sp, r7
 8003206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320a:	4770      	bx	lr

0800320c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800320c:	b480      	push	{r7}
 800320e:	b083      	sub	sp, #12
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003214:	bf00      	nop
 8003216:	370c      	adds	r7, #12
 8003218:	46bd      	mov	sp, r7
 800321a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321e:	4770      	bx	lr

08003220 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003220:	b480      	push	{r7}
 8003222:	b085      	sub	sp, #20
 8003224:	af00      	add	r7, sp, #0
 8003226:	6078      	str	r0, [r7, #4]
 8003228:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	4a46      	ldr	r2, [pc, #280]	@ (800334c <TIM_Base_SetConfig+0x12c>)
 8003234:	4293      	cmp	r3, r2
 8003236:	d013      	beq.n	8003260 <TIM_Base_SetConfig+0x40>
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800323e:	d00f      	beq.n	8003260 <TIM_Base_SetConfig+0x40>
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	4a43      	ldr	r2, [pc, #268]	@ (8003350 <TIM_Base_SetConfig+0x130>)
 8003244:	4293      	cmp	r3, r2
 8003246:	d00b      	beq.n	8003260 <TIM_Base_SetConfig+0x40>
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	4a42      	ldr	r2, [pc, #264]	@ (8003354 <TIM_Base_SetConfig+0x134>)
 800324c:	4293      	cmp	r3, r2
 800324e:	d007      	beq.n	8003260 <TIM_Base_SetConfig+0x40>
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	4a41      	ldr	r2, [pc, #260]	@ (8003358 <TIM_Base_SetConfig+0x138>)
 8003254:	4293      	cmp	r3, r2
 8003256:	d003      	beq.n	8003260 <TIM_Base_SetConfig+0x40>
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	4a40      	ldr	r2, [pc, #256]	@ (800335c <TIM_Base_SetConfig+0x13c>)
 800325c:	4293      	cmp	r3, r2
 800325e:	d108      	bne.n	8003272 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003266:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003268:	683b      	ldr	r3, [r7, #0]
 800326a:	685b      	ldr	r3, [r3, #4]
 800326c:	68fa      	ldr	r2, [r7, #12]
 800326e:	4313      	orrs	r3, r2
 8003270:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	4a35      	ldr	r2, [pc, #212]	@ (800334c <TIM_Base_SetConfig+0x12c>)
 8003276:	4293      	cmp	r3, r2
 8003278:	d02b      	beq.n	80032d2 <TIM_Base_SetConfig+0xb2>
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003280:	d027      	beq.n	80032d2 <TIM_Base_SetConfig+0xb2>
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	4a32      	ldr	r2, [pc, #200]	@ (8003350 <TIM_Base_SetConfig+0x130>)
 8003286:	4293      	cmp	r3, r2
 8003288:	d023      	beq.n	80032d2 <TIM_Base_SetConfig+0xb2>
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	4a31      	ldr	r2, [pc, #196]	@ (8003354 <TIM_Base_SetConfig+0x134>)
 800328e:	4293      	cmp	r3, r2
 8003290:	d01f      	beq.n	80032d2 <TIM_Base_SetConfig+0xb2>
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	4a30      	ldr	r2, [pc, #192]	@ (8003358 <TIM_Base_SetConfig+0x138>)
 8003296:	4293      	cmp	r3, r2
 8003298:	d01b      	beq.n	80032d2 <TIM_Base_SetConfig+0xb2>
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	4a2f      	ldr	r2, [pc, #188]	@ (800335c <TIM_Base_SetConfig+0x13c>)
 800329e:	4293      	cmp	r3, r2
 80032a0:	d017      	beq.n	80032d2 <TIM_Base_SetConfig+0xb2>
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	4a2e      	ldr	r2, [pc, #184]	@ (8003360 <TIM_Base_SetConfig+0x140>)
 80032a6:	4293      	cmp	r3, r2
 80032a8:	d013      	beq.n	80032d2 <TIM_Base_SetConfig+0xb2>
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	4a2d      	ldr	r2, [pc, #180]	@ (8003364 <TIM_Base_SetConfig+0x144>)
 80032ae:	4293      	cmp	r3, r2
 80032b0:	d00f      	beq.n	80032d2 <TIM_Base_SetConfig+0xb2>
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	4a2c      	ldr	r2, [pc, #176]	@ (8003368 <TIM_Base_SetConfig+0x148>)
 80032b6:	4293      	cmp	r3, r2
 80032b8:	d00b      	beq.n	80032d2 <TIM_Base_SetConfig+0xb2>
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	4a2b      	ldr	r2, [pc, #172]	@ (800336c <TIM_Base_SetConfig+0x14c>)
 80032be:	4293      	cmp	r3, r2
 80032c0:	d007      	beq.n	80032d2 <TIM_Base_SetConfig+0xb2>
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	4a2a      	ldr	r2, [pc, #168]	@ (8003370 <TIM_Base_SetConfig+0x150>)
 80032c6:	4293      	cmp	r3, r2
 80032c8:	d003      	beq.n	80032d2 <TIM_Base_SetConfig+0xb2>
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	4a29      	ldr	r2, [pc, #164]	@ (8003374 <TIM_Base_SetConfig+0x154>)
 80032ce:	4293      	cmp	r3, r2
 80032d0:	d108      	bne.n	80032e4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80032d8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80032da:	683b      	ldr	r3, [r7, #0]
 80032dc:	68db      	ldr	r3, [r3, #12]
 80032de:	68fa      	ldr	r2, [r7, #12]
 80032e0:	4313      	orrs	r3, r2
 80032e2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80032ea:	683b      	ldr	r3, [r7, #0]
 80032ec:	695b      	ldr	r3, [r3, #20]
 80032ee:	4313      	orrs	r3, r2
 80032f0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	68fa      	ldr	r2, [r7, #12]
 80032f6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80032f8:	683b      	ldr	r3, [r7, #0]
 80032fa:	689a      	ldr	r2, [r3, #8]
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003300:	683b      	ldr	r3, [r7, #0]
 8003302:	681a      	ldr	r2, [r3, #0]
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	4a10      	ldr	r2, [pc, #64]	@ (800334c <TIM_Base_SetConfig+0x12c>)
 800330c:	4293      	cmp	r3, r2
 800330e:	d003      	beq.n	8003318 <TIM_Base_SetConfig+0xf8>
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	4a12      	ldr	r2, [pc, #72]	@ (800335c <TIM_Base_SetConfig+0x13c>)
 8003314:	4293      	cmp	r3, r2
 8003316:	d103      	bne.n	8003320 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003318:	683b      	ldr	r3, [r7, #0]
 800331a:	691a      	ldr	r2, [r3, #16]
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	2201      	movs	r2, #1
 8003324:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	691b      	ldr	r3, [r3, #16]
 800332a:	f003 0301 	and.w	r3, r3, #1
 800332e:	2b01      	cmp	r3, #1
 8003330:	d105      	bne.n	800333e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	691b      	ldr	r3, [r3, #16]
 8003336:	f023 0201 	bic.w	r2, r3, #1
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	611a      	str	r2, [r3, #16]
  }
}
 800333e:	bf00      	nop
 8003340:	3714      	adds	r7, #20
 8003342:	46bd      	mov	sp, r7
 8003344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003348:	4770      	bx	lr
 800334a:	bf00      	nop
 800334c:	40010000 	.word	0x40010000
 8003350:	40000400 	.word	0x40000400
 8003354:	40000800 	.word	0x40000800
 8003358:	40000c00 	.word	0x40000c00
 800335c:	40010400 	.word	0x40010400
 8003360:	40014000 	.word	0x40014000
 8003364:	40014400 	.word	0x40014400
 8003368:	40014800 	.word	0x40014800
 800336c:	40001800 	.word	0x40001800
 8003370:	40001c00 	.word	0x40001c00
 8003374:	40002000 	.word	0x40002000

08003378 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003378:	b480      	push	{r7}
 800337a:	b087      	sub	sp, #28
 800337c:	af00      	add	r7, sp, #0
 800337e:	60f8      	str	r0, [r7, #12]
 8003380:	60b9      	str	r1, [r7, #8]
 8003382:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003384:	68bb      	ldr	r3, [r7, #8]
 8003386:	f003 031f 	and.w	r3, r3, #31
 800338a:	2201      	movs	r2, #1
 800338c:	fa02 f303 	lsl.w	r3, r2, r3
 8003390:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	6a1a      	ldr	r2, [r3, #32]
 8003396:	697b      	ldr	r3, [r7, #20]
 8003398:	43db      	mvns	r3, r3
 800339a:	401a      	ands	r2, r3
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	6a1a      	ldr	r2, [r3, #32]
 80033a4:	68bb      	ldr	r3, [r7, #8]
 80033a6:	f003 031f 	and.w	r3, r3, #31
 80033aa:	6879      	ldr	r1, [r7, #4]
 80033ac:	fa01 f303 	lsl.w	r3, r1, r3
 80033b0:	431a      	orrs	r2, r3
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	621a      	str	r2, [r3, #32]
}
 80033b6:	bf00      	nop
 80033b8:	371c      	adds	r7, #28
 80033ba:	46bd      	mov	sp, r7
 80033bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c0:	4770      	bx	lr
	...

080033c4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80033c4:	b480      	push	{r7}
 80033c6:	b085      	sub	sp, #20
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	6078      	str	r0, [r7, #4]
 80033cc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80033d4:	2b01      	cmp	r3, #1
 80033d6:	d101      	bne.n	80033dc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80033d8:	2302      	movs	r3, #2
 80033da:	e05a      	b.n	8003492 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	2201      	movs	r2, #1
 80033e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	2202      	movs	r2, #2
 80033e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	685b      	ldr	r3, [r3, #4]
 80033f2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	689b      	ldr	r3, [r3, #8]
 80033fa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003402:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003404:	683b      	ldr	r3, [r7, #0]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	68fa      	ldr	r2, [r7, #12]
 800340a:	4313      	orrs	r3, r2
 800340c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	68fa      	ldr	r2, [r7, #12]
 8003414:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	4a21      	ldr	r2, [pc, #132]	@ (80034a0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800341c:	4293      	cmp	r3, r2
 800341e:	d022      	beq.n	8003466 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003428:	d01d      	beq.n	8003466 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	4a1d      	ldr	r2, [pc, #116]	@ (80034a4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003430:	4293      	cmp	r3, r2
 8003432:	d018      	beq.n	8003466 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	4a1b      	ldr	r2, [pc, #108]	@ (80034a8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800343a:	4293      	cmp	r3, r2
 800343c:	d013      	beq.n	8003466 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	4a1a      	ldr	r2, [pc, #104]	@ (80034ac <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003444:	4293      	cmp	r3, r2
 8003446:	d00e      	beq.n	8003466 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	4a18      	ldr	r2, [pc, #96]	@ (80034b0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800344e:	4293      	cmp	r3, r2
 8003450:	d009      	beq.n	8003466 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	4a17      	ldr	r2, [pc, #92]	@ (80034b4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003458:	4293      	cmp	r3, r2
 800345a:	d004      	beq.n	8003466 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	4a15      	ldr	r2, [pc, #84]	@ (80034b8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003462:	4293      	cmp	r3, r2
 8003464:	d10c      	bne.n	8003480 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003466:	68bb      	ldr	r3, [r7, #8]
 8003468:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800346c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800346e:	683b      	ldr	r3, [r7, #0]
 8003470:	685b      	ldr	r3, [r3, #4]
 8003472:	68ba      	ldr	r2, [r7, #8]
 8003474:	4313      	orrs	r3, r2
 8003476:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	68ba      	ldr	r2, [r7, #8]
 800347e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	2201      	movs	r2, #1
 8003484:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	2200      	movs	r2, #0
 800348c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003490:	2300      	movs	r3, #0
}
 8003492:	4618      	mov	r0, r3
 8003494:	3714      	adds	r7, #20
 8003496:	46bd      	mov	sp, r7
 8003498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349c:	4770      	bx	lr
 800349e:	bf00      	nop
 80034a0:	40010000 	.word	0x40010000
 80034a4:	40000400 	.word	0x40000400
 80034a8:	40000800 	.word	0x40000800
 80034ac:	40000c00 	.word	0x40000c00
 80034b0:	40010400 	.word	0x40010400
 80034b4:	40014000 	.word	0x40014000
 80034b8:	40001800 	.word	0x40001800

080034bc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80034bc:	b480      	push	{r7}
 80034be:	b083      	sub	sp, #12
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80034c4:	bf00      	nop
 80034c6:	370c      	adds	r7, #12
 80034c8:	46bd      	mov	sp, r7
 80034ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ce:	4770      	bx	lr

080034d0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80034d0:	b480      	push	{r7}
 80034d2:	b083      	sub	sp, #12
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80034d8:	bf00      	nop
 80034da:	370c      	adds	r7, #12
 80034dc:	46bd      	mov	sp, r7
 80034de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e2:	4770      	bx	lr

080034e4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80034e4:	b084      	sub	sp, #16
 80034e6:	b580      	push	{r7, lr}
 80034e8:	b084      	sub	sp, #16
 80034ea:	af00      	add	r7, sp, #0
 80034ec:	6078      	str	r0, [r7, #4]
 80034ee:	f107 001c 	add.w	r0, r7, #28
 80034f2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80034f6:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80034fa:	2b01      	cmp	r3, #1
 80034fc:	d123      	bne.n	8003546 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003502:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	68db      	ldr	r3, [r3, #12]
 800350e:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8003512:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003516:	687a      	ldr	r2, [r7, #4]
 8003518:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	68db      	ldr	r3, [r3, #12]
 800351e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003526:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800352a:	2b01      	cmp	r3, #1
 800352c:	d105      	bne.n	800353a <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	68db      	ldr	r3, [r3, #12]
 8003532:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800353a:	6878      	ldr	r0, [r7, #4]
 800353c:	f001 fae8 	bl	8004b10 <USB_CoreReset>
 8003540:	4603      	mov	r3, r0
 8003542:	73fb      	strb	r3, [r7, #15]
 8003544:	e01b      	b.n	800357e <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	68db      	ldr	r3, [r3, #12]
 800354a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003552:	6878      	ldr	r0, [r7, #4]
 8003554:	f001 fadc 	bl	8004b10 <USB_CoreReset>
 8003558:	4603      	mov	r3, r0
 800355a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800355c:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8003560:	2b00      	cmp	r3, #0
 8003562:	d106      	bne.n	8003572 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003568:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	639a      	str	r2, [r3, #56]	@ 0x38
 8003570:	e005      	b.n	800357e <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003576:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800357e:	7fbb      	ldrb	r3, [r7, #30]
 8003580:	2b01      	cmp	r3, #1
 8003582:	d10b      	bne.n	800359c <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	689b      	ldr	r3, [r3, #8]
 8003588:	f043 0206 	orr.w	r2, r3, #6
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	689b      	ldr	r3, [r3, #8]
 8003594:	f043 0220 	orr.w	r2, r3, #32
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800359c:	7bfb      	ldrb	r3, [r7, #15]
}
 800359e:	4618      	mov	r0, r3
 80035a0:	3710      	adds	r7, #16
 80035a2:	46bd      	mov	sp, r7
 80035a4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80035a8:	b004      	add	sp, #16
 80035aa:	4770      	bx	lr

080035ac <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80035ac:	b480      	push	{r7}
 80035ae:	b087      	sub	sp, #28
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	60f8      	str	r0, [r7, #12]
 80035b4:	60b9      	str	r1, [r7, #8]
 80035b6:	4613      	mov	r3, r2
 80035b8:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80035ba:	79fb      	ldrb	r3, [r7, #7]
 80035bc:	2b02      	cmp	r3, #2
 80035be:	d165      	bne.n	800368c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80035c0:	68bb      	ldr	r3, [r7, #8]
 80035c2:	4a41      	ldr	r2, [pc, #260]	@ (80036c8 <USB_SetTurnaroundTime+0x11c>)
 80035c4:	4293      	cmp	r3, r2
 80035c6:	d906      	bls.n	80035d6 <USB_SetTurnaroundTime+0x2a>
 80035c8:	68bb      	ldr	r3, [r7, #8]
 80035ca:	4a40      	ldr	r2, [pc, #256]	@ (80036cc <USB_SetTurnaroundTime+0x120>)
 80035cc:	4293      	cmp	r3, r2
 80035ce:	d202      	bcs.n	80035d6 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80035d0:	230f      	movs	r3, #15
 80035d2:	617b      	str	r3, [r7, #20]
 80035d4:	e062      	b.n	800369c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80035d6:	68bb      	ldr	r3, [r7, #8]
 80035d8:	4a3c      	ldr	r2, [pc, #240]	@ (80036cc <USB_SetTurnaroundTime+0x120>)
 80035da:	4293      	cmp	r3, r2
 80035dc:	d306      	bcc.n	80035ec <USB_SetTurnaroundTime+0x40>
 80035de:	68bb      	ldr	r3, [r7, #8]
 80035e0:	4a3b      	ldr	r2, [pc, #236]	@ (80036d0 <USB_SetTurnaroundTime+0x124>)
 80035e2:	4293      	cmp	r3, r2
 80035e4:	d202      	bcs.n	80035ec <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80035e6:	230e      	movs	r3, #14
 80035e8:	617b      	str	r3, [r7, #20]
 80035ea:	e057      	b.n	800369c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80035ec:	68bb      	ldr	r3, [r7, #8]
 80035ee:	4a38      	ldr	r2, [pc, #224]	@ (80036d0 <USB_SetTurnaroundTime+0x124>)
 80035f0:	4293      	cmp	r3, r2
 80035f2:	d306      	bcc.n	8003602 <USB_SetTurnaroundTime+0x56>
 80035f4:	68bb      	ldr	r3, [r7, #8]
 80035f6:	4a37      	ldr	r2, [pc, #220]	@ (80036d4 <USB_SetTurnaroundTime+0x128>)
 80035f8:	4293      	cmp	r3, r2
 80035fa:	d202      	bcs.n	8003602 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80035fc:	230d      	movs	r3, #13
 80035fe:	617b      	str	r3, [r7, #20]
 8003600:	e04c      	b.n	800369c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8003602:	68bb      	ldr	r3, [r7, #8]
 8003604:	4a33      	ldr	r2, [pc, #204]	@ (80036d4 <USB_SetTurnaroundTime+0x128>)
 8003606:	4293      	cmp	r3, r2
 8003608:	d306      	bcc.n	8003618 <USB_SetTurnaroundTime+0x6c>
 800360a:	68bb      	ldr	r3, [r7, #8]
 800360c:	4a32      	ldr	r2, [pc, #200]	@ (80036d8 <USB_SetTurnaroundTime+0x12c>)
 800360e:	4293      	cmp	r3, r2
 8003610:	d802      	bhi.n	8003618 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8003612:	230c      	movs	r3, #12
 8003614:	617b      	str	r3, [r7, #20]
 8003616:	e041      	b.n	800369c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8003618:	68bb      	ldr	r3, [r7, #8]
 800361a:	4a2f      	ldr	r2, [pc, #188]	@ (80036d8 <USB_SetTurnaroundTime+0x12c>)
 800361c:	4293      	cmp	r3, r2
 800361e:	d906      	bls.n	800362e <USB_SetTurnaroundTime+0x82>
 8003620:	68bb      	ldr	r3, [r7, #8]
 8003622:	4a2e      	ldr	r2, [pc, #184]	@ (80036dc <USB_SetTurnaroundTime+0x130>)
 8003624:	4293      	cmp	r3, r2
 8003626:	d802      	bhi.n	800362e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8003628:	230b      	movs	r3, #11
 800362a:	617b      	str	r3, [r7, #20]
 800362c:	e036      	b.n	800369c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800362e:	68bb      	ldr	r3, [r7, #8]
 8003630:	4a2a      	ldr	r2, [pc, #168]	@ (80036dc <USB_SetTurnaroundTime+0x130>)
 8003632:	4293      	cmp	r3, r2
 8003634:	d906      	bls.n	8003644 <USB_SetTurnaroundTime+0x98>
 8003636:	68bb      	ldr	r3, [r7, #8]
 8003638:	4a29      	ldr	r2, [pc, #164]	@ (80036e0 <USB_SetTurnaroundTime+0x134>)
 800363a:	4293      	cmp	r3, r2
 800363c:	d802      	bhi.n	8003644 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800363e:	230a      	movs	r3, #10
 8003640:	617b      	str	r3, [r7, #20]
 8003642:	e02b      	b.n	800369c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8003644:	68bb      	ldr	r3, [r7, #8]
 8003646:	4a26      	ldr	r2, [pc, #152]	@ (80036e0 <USB_SetTurnaroundTime+0x134>)
 8003648:	4293      	cmp	r3, r2
 800364a:	d906      	bls.n	800365a <USB_SetTurnaroundTime+0xae>
 800364c:	68bb      	ldr	r3, [r7, #8]
 800364e:	4a25      	ldr	r2, [pc, #148]	@ (80036e4 <USB_SetTurnaroundTime+0x138>)
 8003650:	4293      	cmp	r3, r2
 8003652:	d202      	bcs.n	800365a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8003654:	2309      	movs	r3, #9
 8003656:	617b      	str	r3, [r7, #20]
 8003658:	e020      	b.n	800369c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800365a:	68bb      	ldr	r3, [r7, #8]
 800365c:	4a21      	ldr	r2, [pc, #132]	@ (80036e4 <USB_SetTurnaroundTime+0x138>)
 800365e:	4293      	cmp	r3, r2
 8003660:	d306      	bcc.n	8003670 <USB_SetTurnaroundTime+0xc4>
 8003662:	68bb      	ldr	r3, [r7, #8]
 8003664:	4a20      	ldr	r2, [pc, #128]	@ (80036e8 <USB_SetTurnaroundTime+0x13c>)
 8003666:	4293      	cmp	r3, r2
 8003668:	d802      	bhi.n	8003670 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800366a:	2308      	movs	r3, #8
 800366c:	617b      	str	r3, [r7, #20]
 800366e:	e015      	b.n	800369c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8003670:	68bb      	ldr	r3, [r7, #8]
 8003672:	4a1d      	ldr	r2, [pc, #116]	@ (80036e8 <USB_SetTurnaroundTime+0x13c>)
 8003674:	4293      	cmp	r3, r2
 8003676:	d906      	bls.n	8003686 <USB_SetTurnaroundTime+0xda>
 8003678:	68bb      	ldr	r3, [r7, #8]
 800367a:	4a1c      	ldr	r2, [pc, #112]	@ (80036ec <USB_SetTurnaroundTime+0x140>)
 800367c:	4293      	cmp	r3, r2
 800367e:	d202      	bcs.n	8003686 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8003680:	2307      	movs	r3, #7
 8003682:	617b      	str	r3, [r7, #20]
 8003684:	e00a      	b.n	800369c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8003686:	2306      	movs	r3, #6
 8003688:	617b      	str	r3, [r7, #20]
 800368a:	e007      	b.n	800369c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800368c:	79fb      	ldrb	r3, [r7, #7]
 800368e:	2b00      	cmp	r3, #0
 8003690:	d102      	bne.n	8003698 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8003692:	2309      	movs	r3, #9
 8003694:	617b      	str	r3, [r7, #20]
 8003696:	e001      	b.n	800369c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8003698:	2309      	movs	r3, #9
 800369a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	68db      	ldr	r3, [r3, #12]
 80036a0:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	68da      	ldr	r2, [r3, #12]
 80036ac:	697b      	ldr	r3, [r7, #20]
 80036ae:	029b      	lsls	r3, r3, #10
 80036b0:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 80036b4:	431a      	orrs	r2, r3
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80036ba:	2300      	movs	r3, #0
}
 80036bc:	4618      	mov	r0, r3
 80036be:	371c      	adds	r7, #28
 80036c0:	46bd      	mov	sp, r7
 80036c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c6:	4770      	bx	lr
 80036c8:	00d8acbf 	.word	0x00d8acbf
 80036cc:	00e4e1c0 	.word	0x00e4e1c0
 80036d0:	00f42400 	.word	0x00f42400
 80036d4:	01067380 	.word	0x01067380
 80036d8:	011a499f 	.word	0x011a499f
 80036dc:	01312cff 	.word	0x01312cff
 80036e0:	014ca43f 	.word	0x014ca43f
 80036e4:	016e3600 	.word	0x016e3600
 80036e8:	01a6ab1f 	.word	0x01a6ab1f
 80036ec:	01e84800 	.word	0x01e84800

080036f0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80036f0:	b480      	push	{r7}
 80036f2:	b083      	sub	sp, #12
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	689b      	ldr	r3, [r3, #8]
 80036fc:	f043 0201 	orr.w	r2, r3, #1
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003704:	2300      	movs	r3, #0
}
 8003706:	4618      	mov	r0, r3
 8003708:	370c      	adds	r7, #12
 800370a:	46bd      	mov	sp, r7
 800370c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003710:	4770      	bx	lr

08003712 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003712:	b480      	push	{r7}
 8003714:	b083      	sub	sp, #12
 8003716:	af00      	add	r7, sp, #0
 8003718:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	689b      	ldr	r3, [r3, #8]
 800371e:	f023 0201 	bic.w	r2, r3, #1
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003726:	2300      	movs	r3, #0
}
 8003728:	4618      	mov	r0, r3
 800372a:	370c      	adds	r7, #12
 800372c:	46bd      	mov	sp, r7
 800372e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003732:	4770      	bx	lr

08003734 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8003734:	b580      	push	{r7, lr}
 8003736:	b084      	sub	sp, #16
 8003738:	af00      	add	r7, sp, #0
 800373a:	6078      	str	r0, [r7, #4]
 800373c:	460b      	mov	r3, r1
 800373e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8003740:	2300      	movs	r3, #0
 8003742:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	68db      	ldr	r3, [r3, #12]
 8003748:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003750:	78fb      	ldrb	r3, [r7, #3]
 8003752:	2b01      	cmp	r3, #1
 8003754:	d115      	bne.n	8003782 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	68db      	ldr	r3, [r3, #12]
 800375a:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8003762:	200a      	movs	r0, #10
 8003764:	f7fd f974 	bl	8000a50 <HAL_Delay>
      ms += 10U;
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	330a      	adds	r3, #10
 800376c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800376e:	6878      	ldr	r0, [r7, #4]
 8003770:	f001 f93f 	bl	80049f2 <USB_GetMode>
 8003774:	4603      	mov	r3, r0
 8003776:	2b01      	cmp	r3, #1
 8003778:	d01e      	beq.n	80037b8 <USB_SetCurrentMode+0x84>
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	2bc7      	cmp	r3, #199	@ 0xc7
 800377e:	d9f0      	bls.n	8003762 <USB_SetCurrentMode+0x2e>
 8003780:	e01a      	b.n	80037b8 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8003782:	78fb      	ldrb	r3, [r7, #3]
 8003784:	2b00      	cmp	r3, #0
 8003786:	d115      	bne.n	80037b4 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	68db      	ldr	r3, [r3, #12]
 800378c:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8003794:	200a      	movs	r0, #10
 8003796:	f7fd f95b 	bl	8000a50 <HAL_Delay>
      ms += 10U;
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	330a      	adds	r3, #10
 800379e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80037a0:	6878      	ldr	r0, [r7, #4]
 80037a2:	f001 f926 	bl	80049f2 <USB_GetMode>
 80037a6:	4603      	mov	r3, r0
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d005      	beq.n	80037b8 <USB_SetCurrentMode+0x84>
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	2bc7      	cmp	r3, #199	@ 0xc7
 80037b0:	d9f0      	bls.n	8003794 <USB_SetCurrentMode+0x60>
 80037b2:	e001      	b.n	80037b8 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80037b4:	2301      	movs	r3, #1
 80037b6:	e005      	b.n	80037c4 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	2bc8      	cmp	r3, #200	@ 0xc8
 80037bc:	d101      	bne.n	80037c2 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80037be:	2301      	movs	r3, #1
 80037c0:	e000      	b.n	80037c4 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80037c2:	2300      	movs	r3, #0
}
 80037c4:	4618      	mov	r0, r3
 80037c6:	3710      	adds	r7, #16
 80037c8:	46bd      	mov	sp, r7
 80037ca:	bd80      	pop	{r7, pc}

080037cc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80037cc:	b084      	sub	sp, #16
 80037ce:	b580      	push	{r7, lr}
 80037d0:	b086      	sub	sp, #24
 80037d2:	af00      	add	r7, sp, #0
 80037d4:	6078      	str	r0, [r7, #4]
 80037d6:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80037da:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80037de:	2300      	movs	r3, #0
 80037e0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80037e6:	2300      	movs	r3, #0
 80037e8:	613b      	str	r3, [r7, #16]
 80037ea:	e009      	b.n	8003800 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80037ec:	687a      	ldr	r2, [r7, #4]
 80037ee:	693b      	ldr	r3, [r7, #16]
 80037f0:	3340      	adds	r3, #64	@ 0x40
 80037f2:	009b      	lsls	r3, r3, #2
 80037f4:	4413      	add	r3, r2
 80037f6:	2200      	movs	r2, #0
 80037f8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80037fa:	693b      	ldr	r3, [r7, #16]
 80037fc:	3301      	adds	r3, #1
 80037fe:	613b      	str	r3, [r7, #16]
 8003800:	693b      	ldr	r3, [r7, #16]
 8003802:	2b0e      	cmp	r3, #14
 8003804:	d9f2      	bls.n	80037ec <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8003806:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800380a:	2b00      	cmp	r3, #0
 800380c:	d11c      	bne.n	8003848 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003814:	685b      	ldr	r3, [r3, #4]
 8003816:	68fa      	ldr	r2, [r7, #12]
 8003818:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800381c:	f043 0302 	orr.w	r3, r3, #2
 8003820:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003826:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003832:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800383e:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	639a      	str	r2, [r3, #56]	@ 0x38
 8003846:	e00b      	b.n	8003860 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800384c:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003858:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8003866:	461a      	mov	r2, r3
 8003868:	2300      	movs	r3, #0
 800386a:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800386c:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8003870:	2b01      	cmp	r3, #1
 8003872:	d10d      	bne.n	8003890 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8003874:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003878:	2b00      	cmp	r3, #0
 800387a:	d104      	bne.n	8003886 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800387c:	2100      	movs	r1, #0
 800387e:	6878      	ldr	r0, [r7, #4]
 8003880:	f000 f968 	bl	8003b54 <USB_SetDevSpeed>
 8003884:	e008      	b.n	8003898 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003886:	2101      	movs	r1, #1
 8003888:	6878      	ldr	r0, [r7, #4]
 800388a:	f000 f963 	bl	8003b54 <USB_SetDevSpeed>
 800388e:	e003      	b.n	8003898 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8003890:	2103      	movs	r1, #3
 8003892:	6878      	ldr	r0, [r7, #4]
 8003894:	f000 f95e 	bl	8003b54 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003898:	2110      	movs	r1, #16
 800389a:	6878      	ldr	r0, [r7, #4]
 800389c:	f000 f8fa 	bl	8003a94 <USB_FlushTxFifo>
 80038a0:	4603      	mov	r3, r0
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d001      	beq.n	80038aa <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 80038a6:	2301      	movs	r3, #1
 80038a8:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80038aa:	6878      	ldr	r0, [r7, #4]
 80038ac:	f000 f924 	bl	8003af8 <USB_FlushRxFifo>
 80038b0:	4603      	mov	r3, r0
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d001      	beq.n	80038ba <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 80038b6:	2301      	movs	r3, #1
 80038b8:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80038c0:	461a      	mov	r2, r3
 80038c2:	2300      	movs	r3, #0
 80038c4:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80038cc:	461a      	mov	r2, r3
 80038ce:	2300      	movs	r3, #0
 80038d0:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80038d8:	461a      	mov	r2, r3
 80038da:	2300      	movs	r3, #0
 80038dc:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80038de:	2300      	movs	r3, #0
 80038e0:	613b      	str	r3, [r7, #16]
 80038e2:	e043      	b.n	800396c <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80038e4:	693b      	ldr	r3, [r7, #16]
 80038e6:	015a      	lsls	r2, r3, #5
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	4413      	add	r3, r2
 80038ec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80038f6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80038fa:	d118      	bne.n	800392e <USB_DevInit+0x162>
    {
      if (i == 0U)
 80038fc:	693b      	ldr	r3, [r7, #16]
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d10a      	bne.n	8003918 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003902:	693b      	ldr	r3, [r7, #16]
 8003904:	015a      	lsls	r2, r3, #5
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	4413      	add	r3, r2
 800390a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800390e:	461a      	mov	r2, r3
 8003910:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8003914:	6013      	str	r3, [r2, #0]
 8003916:	e013      	b.n	8003940 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003918:	693b      	ldr	r3, [r7, #16]
 800391a:	015a      	lsls	r2, r3, #5
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	4413      	add	r3, r2
 8003920:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003924:	461a      	mov	r2, r3
 8003926:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800392a:	6013      	str	r3, [r2, #0]
 800392c:	e008      	b.n	8003940 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800392e:	693b      	ldr	r3, [r7, #16]
 8003930:	015a      	lsls	r2, r3, #5
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	4413      	add	r3, r2
 8003936:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800393a:	461a      	mov	r2, r3
 800393c:	2300      	movs	r3, #0
 800393e:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8003940:	693b      	ldr	r3, [r7, #16]
 8003942:	015a      	lsls	r2, r3, #5
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	4413      	add	r3, r2
 8003948:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800394c:	461a      	mov	r2, r3
 800394e:	2300      	movs	r3, #0
 8003950:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003952:	693b      	ldr	r3, [r7, #16]
 8003954:	015a      	lsls	r2, r3, #5
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	4413      	add	r3, r2
 800395a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800395e:	461a      	mov	r2, r3
 8003960:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003964:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003966:	693b      	ldr	r3, [r7, #16]
 8003968:	3301      	adds	r3, #1
 800396a:	613b      	str	r3, [r7, #16]
 800396c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8003970:	461a      	mov	r2, r3
 8003972:	693b      	ldr	r3, [r7, #16]
 8003974:	4293      	cmp	r3, r2
 8003976:	d3b5      	bcc.n	80038e4 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003978:	2300      	movs	r3, #0
 800397a:	613b      	str	r3, [r7, #16]
 800397c:	e043      	b.n	8003a06 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800397e:	693b      	ldr	r3, [r7, #16]
 8003980:	015a      	lsls	r2, r3, #5
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	4413      	add	r3, r2
 8003986:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003990:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003994:	d118      	bne.n	80039c8 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8003996:	693b      	ldr	r3, [r7, #16]
 8003998:	2b00      	cmp	r3, #0
 800399a:	d10a      	bne.n	80039b2 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800399c:	693b      	ldr	r3, [r7, #16]
 800399e:	015a      	lsls	r2, r3, #5
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	4413      	add	r3, r2
 80039a4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80039a8:	461a      	mov	r2, r3
 80039aa:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80039ae:	6013      	str	r3, [r2, #0]
 80039b0:	e013      	b.n	80039da <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80039b2:	693b      	ldr	r3, [r7, #16]
 80039b4:	015a      	lsls	r2, r3, #5
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	4413      	add	r3, r2
 80039ba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80039be:	461a      	mov	r2, r3
 80039c0:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80039c4:	6013      	str	r3, [r2, #0]
 80039c6:	e008      	b.n	80039da <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80039c8:	693b      	ldr	r3, [r7, #16]
 80039ca:	015a      	lsls	r2, r3, #5
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	4413      	add	r3, r2
 80039d0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80039d4:	461a      	mov	r2, r3
 80039d6:	2300      	movs	r3, #0
 80039d8:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80039da:	693b      	ldr	r3, [r7, #16]
 80039dc:	015a      	lsls	r2, r3, #5
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	4413      	add	r3, r2
 80039e2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80039e6:	461a      	mov	r2, r3
 80039e8:	2300      	movs	r3, #0
 80039ea:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80039ec:	693b      	ldr	r3, [r7, #16]
 80039ee:	015a      	lsls	r2, r3, #5
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	4413      	add	r3, r2
 80039f4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80039f8:	461a      	mov	r2, r3
 80039fa:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80039fe:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003a00:	693b      	ldr	r3, [r7, #16]
 8003a02:	3301      	adds	r3, #1
 8003a04:	613b      	str	r3, [r7, #16]
 8003a06:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8003a0a:	461a      	mov	r2, r3
 8003a0c:	693b      	ldr	r3, [r7, #16]
 8003a0e:	4293      	cmp	r3, r2
 8003a10:	d3b5      	bcc.n	800397e <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003a18:	691b      	ldr	r3, [r3, #16]
 8003a1a:	68fa      	ldr	r2, [r7, #12]
 8003a1c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003a20:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003a24:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	2200      	movs	r2, #0
 8003a2a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8003a32:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8003a34:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d105      	bne.n	8003a48 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	699b      	ldr	r3, [r3, #24]
 8003a40:	f043 0210 	orr.w	r2, r3, #16
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	699a      	ldr	r2, [r3, #24]
 8003a4c:	4b10      	ldr	r3, [pc, #64]	@ (8003a90 <USB_DevInit+0x2c4>)
 8003a4e:	4313      	orrs	r3, r2
 8003a50:	687a      	ldr	r2, [r7, #4]
 8003a52:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8003a54:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d005      	beq.n	8003a68 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	699b      	ldr	r3, [r3, #24]
 8003a60:	f043 0208 	orr.w	r2, r3, #8
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8003a68:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8003a6c:	2b01      	cmp	r3, #1
 8003a6e:	d107      	bne.n	8003a80 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	699b      	ldr	r3, [r3, #24]
 8003a74:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003a78:	f043 0304 	orr.w	r3, r3, #4
 8003a7c:	687a      	ldr	r2, [r7, #4]
 8003a7e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8003a80:	7dfb      	ldrb	r3, [r7, #23]
}
 8003a82:	4618      	mov	r0, r3
 8003a84:	3718      	adds	r7, #24
 8003a86:	46bd      	mov	sp, r7
 8003a88:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003a8c:	b004      	add	sp, #16
 8003a8e:	4770      	bx	lr
 8003a90:	803c3800 	.word	0x803c3800

08003a94 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003a94:	b480      	push	{r7}
 8003a96:	b085      	sub	sp, #20
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]
 8003a9c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8003a9e:	2300      	movs	r3, #0
 8003aa0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	3301      	adds	r3, #1
 8003aa6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003aae:	d901      	bls.n	8003ab4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8003ab0:	2303      	movs	r3, #3
 8003ab2:	e01b      	b.n	8003aec <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	691b      	ldr	r3, [r3, #16]
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	daf2      	bge.n	8003aa2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8003abc:	2300      	movs	r3, #0
 8003abe:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003ac0:	683b      	ldr	r3, [r7, #0]
 8003ac2:	019b      	lsls	r3, r3, #6
 8003ac4:	f043 0220 	orr.w	r2, r3, #32
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	3301      	adds	r3, #1
 8003ad0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003ad8:	d901      	bls.n	8003ade <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8003ada:	2303      	movs	r3, #3
 8003adc:	e006      	b.n	8003aec <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	691b      	ldr	r3, [r3, #16]
 8003ae2:	f003 0320 	and.w	r3, r3, #32
 8003ae6:	2b20      	cmp	r3, #32
 8003ae8:	d0f0      	beq.n	8003acc <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8003aea:	2300      	movs	r3, #0
}
 8003aec:	4618      	mov	r0, r3
 8003aee:	3714      	adds	r7, #20
 8003af0:	46bd      	mov	sp, r7
 8003af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af6:	4770      	bx	lr

08003af8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003af8:	b480      	push	{r7}
 8003afa:	b085      	sub	sp, #20
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003b00:	2300      	movs	r3, #0
 8003b02:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	3301      	adds	r3, #1
 8003b08:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003b10:	d901      	bls.n	8003b16 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8003b12:	2303      	movs	r3, #3
 8003b14:	e018      	b.n	8003b48 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	691b      	ldr	r3, [r3, #16]
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	daf2      	bge.n	8003b04 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8003b1e:	2300      	movs	r3, #0
 8003b20:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	2210      	movs	r2, #16
 8003b26:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	3301      	adds	r3, #1
 8003b2c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003b34:	d901      	bls.n	8003b3a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8003b36:	2303      	movs	r3, #3
 8003b38:	e006      	b.n	8003b48 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	691b      	ldr	r3, [r3, #16]
 8003b3e:	f003 0310 	and.w	r3, r3, #16
 8003b42:	2b10      	cmp	r3, #16
 8003b44:	d0f0      	beq.n	8003b28 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8003b46:	2300      	movs	r3, #0
}
 8003b48:	4618      	mov	r0, r3
 8003b4a:	3714      	adds	r7, #20
 8003b4c:	46bd      	mov	sp, r7
 8003b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b52:	4770      	bx	lr

08003b54 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8003b54:	b480      	push	{r7}
 8003b56:	b085      	sub	sp, #20
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	6078      	str	r0, [r7, #4]
 8003b5c:	460b      	mov	r3, r1
 8003b5e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003b6a:	681a      	ldr	r2, [r3, #0]
 8003b6c:	78fb      	ldrb	r3, [r7, #3]
 8003b6e:	68f9      	ldr	r1, [r7, #12]
 8003b70:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003b74:	4313      	orrs	r3, r2
 8003b76:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8003b78:	2300      	movs	r3, #0
}
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	3714      	adds	r7, #20
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b84:	4770      	bx	lr

08003b86 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8003b86:	b480      	push	{r7}
 8003b88:	b087      	sub	sp, #28
 8003b8a:	af00      	add	r7, sp, #0
 8003b8c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8003b92:	693b      	ldr	r3, [r7, #16]
 8003b94:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003b98:	689b      	ldr	r3, [r3, #8]
 8003b9a:	f003 0306 	and.w	r3, r3, #6
 8003b9e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d102      	bne.n	8003bac <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8003ba6:	2300      	movs	r3, #0
 8003ba8:	75fb      	strb	r3, [r7, #23]
 8003baa:	e00a      	b.n	8003bc2 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	2b02      	cmp	r3, #2
 8003bb0:	d002      	beq.n	8003bb8 <USB_GetDevSpeed+0x32>
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	2b06      	cmp	r3, #6
 8003bb6:	d102      	bne.n	8003bbe <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8003bb8:	2302      	movs	r3, #2
 8003bba:	75fb      	strb	r3, [r7, #23]
 8003bbc:	e001      	b.n	8003bc2 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8003bbe:	230f      	movs	r3, #15
 8003bc0:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8003bc2:	7dfb      	ldrb	r3, [r7, #23]
}
 8003bc4:	4618      	mov	r0, r3
 8003bc6:	371c      	adds	r7, #28
 8003bc8:	46bd      	mov	sp, r7
 8003bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bce:	4770      	bx	lr

08003bd0 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8003bd0:	b480      	push	{r7}
 8003bd2:	b085      	sub	sp, #20
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	6078      	str	r0, [r7, #4]
 8003bd8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003bde:	683b      	ldr	r3, [r7, #0]
 8003be0:	781b      	ldrb	r3, [r3, #0]
 8003be2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003be4:	683b      	ldr	r3, [r7, #0]
 8003be6:	785b      	ldrb	r3, [r3, #1]
 8003be8:	2b01      	cmp	r3, #1
 8003bea:	d13a      	bne.n	8003c62 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003bf2:	69da      	ldr	r2, [r3, #28]
 8003bf4:	683b      	ldr	r3, [r7, #0]
 8003bf6:	781b      	ldrb	r3, [r3, #0]
 8003bf8:	f003 030f 	and.w	r3, r3, #15
 8003bfc:	2101      	movs	r1, #1
 8003bfe:	fa01 f303 	lsl.w	r3, r1, r3
 8003c02:	b29b      	uxth	r3, r3
 8003c04:	68f9      	ldr	r1, [r7, #12]
 8003c06:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003c0a:	4313      	orrs	r3, r2
 8003c0c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8003c0e:	68bb      	ldr	r3, [r7, #8]
 8003c10:	015a      	lsls	r2, r3, #5
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	4413      	add	r3, r2
 8003c16:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d155      	bne.n	8003cd0 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003c24:	68bb      	ldr	r3, [r7, #8]
 8003c26:	015a      	lsls	r2, r3, #5
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	4413      	add	r3, r2
 8003c2c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003c30:	681a      	ldr	r2, [r3, #0]
 8003c32:	683b      	ldr	r3, [r7, #0]
 8003c34:	689b      	ldr	r3, [r3, #8]
 8003c36:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003c3a:	683b      	ldr	r3, [r7, #0]
 8003c3c:	791b      	ldrb	r3, [r3, #4]
 8003c3e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003c40:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003c42:	68bb      	ldr	r3, [r7, #8]
 8003c44:	059b      	lsls	r3, r3, #22
 8003c46:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003c48:	4313      	orrs	r3, r2
 8003c4a:	68ba      	ldr	r2, [r7, #8]
 8003c4c:	0151      	lsls	r1, r2, #5
 8003c4e:	68fa      	ldr	r2, [r7, #12]
 8003c50:	440a      	add	r2, r1
 8003c52:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003c56:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003c5a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003c5e:	6013      	str	r3, [r2, #0]
 8003c60:	e036      	b.n	8003cd0 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003c68:	69da      	ldr	r2, [r3, #28]
 8003c6a:	683b      	ldr	r3, [r7, #0]
 8003c6c:	781b      	ldrb	r3, [r3, #0]
 8003c6e:	f003 030f 	and.w	r3, r3, #15
 8003c72:	2101      	movs	r1, #1
 8003c74:	fa01 f303 	lsl.w	r3, r1, r3
 8003c78:	041b      	lsls	r3, r3, #16
 8003c7a:	68f9      	ldr	r1, [r7, #12]
 8003c7c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003c80:	4313      	orrs	r3, r2
 8003c82:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8003c84:	68bb      	ldr	r3, [r7, #8]
 8003c86:	015a      	lsls	r2, r3, #5
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	4413      	add	r3, r2
 8003c8c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d11a      	bne.n	8003cd0 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003c9a:	68bb      	ldr	r3, [r7, #8]
 8003c9c:	015a      	lsls	r2, r3, #5
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	4413      	add	r3, r2
 8003ca2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003ca6:	681a      	ldr	r2, [r3, #0]
 8003ca8:	683b      	ldr	r3, [r7, #0]
 8003caa:	689b      	ldr	r3, [r3, #8]
 8003cac:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8003cb0:	683b      	ldr	r3, [r7, #0]
 8003cb2:	791b      	ldrb	r3, [r3, #4]
 8003cb4:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003cb6:	430b      	orrs	r3, r1
 8003cb8:	4313      	orrs	r3, r2
 8003cba:	68ba      	ldr	r2, [r7, #8]
 8003cbc:	0151      	lsls	r1, r2, #5
 8003cbe:	68fa      	ldr	r2, [r7, #12]
 8003cc0:	440a      	add	r2, r1
 8003cc2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003cc6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003cca:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003cce:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8003cd0:	2300      	movs	r3, #0
}
 8003cd2:	4618      	mov	r0, r3
 8003cd4:	3714      	adds	r7, #20
 8003cd6:	46bd      	mov	sp, r7
 8003cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cdc:	4770      	bx	lr
	...

08003ce0 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8003ce0:	b480      	push	{r7}
 8003ce2:	b085      	sub	sp, #20
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	6078      	str	r0, [r7, #4]
 8003ce8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003cee:	683b      	ldr	r3, [r7, #0]
 8003cf0:	781b      	ldrb	r3, [r3, #0]
 8003cf2:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8003cf4:	683b      	ldr	r3, [r7, #0]
 8003cf6:	785b      	ldrb	r3, [r3, #1]
 8003cf8:	2b01      	cmp	r3, #1
 8003cfa:	d161      	bne.n	8003dc0 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003cfc:	68bb      	ldr	r3, [r7, #8]
 8003cfe:	015a      	lsls	r2, r3, #5
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	4413      	add	r3, r2
 8003d04:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003d0e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003d12:	d11f      	bne.n	8003d54 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8003d14:	68bb      	ldr	r3, [r7, #8]
 8003d16:	015a      	lsls	r2, r3, #5
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	4413      	add	r3, r2
 8003d1c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	68ba      	ldr	r2, [r7, #8]
 8003d24:	0151      	lsls	r1, r2, #5
 8003d26:	68fa      	ldr	r2, [r7, #12]
 8003d28:	440a      	add	r2, r1
 8003d2a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003d2e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8003d32:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8003d34:	68bb      	ldr	r3, [r7, #8]
 8003d36:	015a      	lsls	r2, r3, #5
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	4413      	add	r3, r2
 8003d3c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	68ba      	ldr	r2, [r7, #8]
 8003d44:	0151      	lsls	r1, r2, #5
 8003d46:	68fa      	ldr	r2, [r7, #12]
 8003d48:	440a      	add	r2, r1
 8003d4a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003d4e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003d52:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003d5a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003d5c:	683b      	ldr	r3, [r7, #0]
 8003d5e:	781b      	ldrb	r3, [r3, #0]
 8003d60:	f003 030f 	and.w	r3, r3, #15
 8003d64:	2101      	movs	r1, #1
 8003d66:	fa01 f303 	lsl.w	r3, r1, r3
 8003d6a:	b29b      	uxth	r3, r3
 8003d6c:	43db      	mvns	r3, r3
 8003d6e:	68f9      	ldr	r1, [r7, #12]
 8003d70:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003d74:	4013      	ands	r3, r2
 8003d76:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003d7e:	69da      	ldr	r2, [r3, #28]
 8003d80:	683b      	ldr	r3, [r7, #0]
 8003d82:	781b      	ldrb	r3, [r3, #0]
 8003d84:	f003 030f 	and.w	r3, r3, #15
 8003d88:	2101      	movs	r1, #1
 8003d8a:	fa01 f303 	lsl.w	r3, r1, r3
 8003d8e:	b29b      	uxth	r3, r3
 8003d90:	43db      	mvns	r3, r3
 8003d92:	68f9      	ldr	r1, [r7, #12]
 8003d94:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003d98:	4013      	ands	r3, r2
 8003d9a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8003d9c:	68bb      	ldr	r3, [r7, #8]
 8003d9e:	015a      	lsls	r2, r3, #5
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	4413      	add	r3, r2
 8003da4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003da8:	681a      	ldr	r2, [r3, #0]
 8003daa:	68bb      	ldr	r3, [r7, #8]
 8003dac:	0159      	lsls	r1, r3, #5
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	440b      	add	r3, r1
 8003db2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003db6:	4619      	mov	r1, r3
 8003db8:	4b35      	ldr	r3, [pc, #212]	@ (8003e90 <USB_DeactivateEndpoint+0x1b0>)
 8003dba:	4013      	ands	r3, r2
 8003dbc:	600b      	str	r3, [r1, #0]
 8003dbe:	e060      	b.n	8003e82 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003dc0:	68bb      	ldr	r3, [r7, #8]
 8003dc2:	015a      	lsls	r2, r3, #5
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	4413      	add	r3, r2
 8003dc8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003dd2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003dd6:	d11f      	bne.n	8003e18 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003dd8:	68bb      	ldr	r3, [r7, #8]
 8003dda:	015a      	lsls	r2, r3, #5
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	4413      	add	r3, r2
 8003de0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	68ba      	ldr	r2, [r7, #8]
 8003de8:	0151      	lsls	r1, r2, #5
 8003dea:	68fa      	ldr	r2, [r7, #12]
 8003dec:	440a      	add	r2, r1
 8003dee:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003df2:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8003df6:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8003df8:	68bb      	ldr	r3, [r7, #8]
 8003dfa:	015a      	lsls	r2, r3, #5
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	4413      	add	r3, r2
 8003e00:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	68ba      	ldr	r2, [r7, #8]
 8003e08:	0151      	lsls	r1, r2, #5
 8003e0a:	68fa      	ldr	r2, [r7, #12]
 8003e0c:	440a      	add	r2, r1
 8003e0e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003e12:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003e16:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003e1e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003e20:	683b      	ldr	r3, [r7, #0]
 8003e22:	781b      	ldrb	r3, [r3, #0]
 8003e24:	f003 030f 	and.w	r3, r3, #15
 8003e28:	2101      	movs	r1, #1
 8003e2a:	fa01 f303 	lsl.w	r3, r1, r3
 8003e2e:	041b      	lsls	r3, r3, #16
 8003e30:	43db      	mvns	r3, r3
 8003e32:	68f9      	ldr	r1, [r7, #12]
 8003e34:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003e38:	4013      	ands	r3, r2
 8003e3a:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003e42:	69da      	ldr	r2, [r3, #28]
 8003e44:	683b      	ldr	r3, [r7, #0]
 8003e46:	781b      	ldrb	r3, [r3, #0]
 8003e48:	f003 030f 	and.w	r3, r3, #15
 8003e4c:	2101      	movs	r1, #1
 8003e4e:	fa01 f303 	lsl.w	r3, r1, r3
 8003e52:	041b      	lsls	r3, r3, #16
 8003e54:	43db      	mvns	r3, r3
 8003e56:	68f9      	ldr	r1, [r7, #12]
 8003e58:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003e5c:	4013      	ands	r3, r2
 8003e5e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8003e60:	68bb      	ldr	r3, [r7, #8]
 8003e62:	015a      	lsls	r2, r3, #5
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	4413      	add	r3, r2
 8003e68:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003e6c:	681a      	ldr	r2, [r3, #0]
 8003e6e:	68bb      	ldr	r3, [r7, #8]
 8003e70:	0159      	lsls	r1, r3, #5
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	440b      	add	r3, r1
 8003e76:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003e7a:	4619      	mov	r1, r3
 8003e7c:	4b05      	ldr	r3, [pc, #20]	@ (8003e94 <USB_DeactivateEndpoint+0x1b4>)
 8003e7e:	4013      	ands	r3, r2
 8003e80:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8003e82:	2300      	movs	r3, #0
}
 8003e84:	4618      	mov	r0, r3
 8003e86:	3714      	adds	r7, #20
 8003e88:	46bd      	mov	sp, r7
 8003e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e8e:	4770      	bx	lr
 8003e90:	ec337800 	.word	0xec337800
 8003e94:	eff37800 	.word	0xeff37800

08003e98 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8003e98:	b580      	push	{r7, lr}
 8003e9a:	b08a      	sub	sp, #40	@ 0x28
 8003e9c:	af02      	add	r7, sp, #8
 8003e9e:	60f8      	str	r0, [r7, #12]
 8003ea0:	60b9      	str	r1, [r7, #8]
 8003ea2:	4613      	mov	r3, r2
 8003ea4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8003eaa:	68bb      	ldr	r3, [r7, #8]
 8003eac:	781b      	ldrb	r3, [r3, #0]
 8003eae:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003eb0:	68bb      	ldr	r3, [r7, #8]
 8003eb2:	785b      	ldrb	r3, [r3, #1]
 8003eb4:	2b01      	cmp	r3, #1
 8003eb6:	f040 817f 	bne.w	80041b8 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8003eba:	68bb      	ldr	r3, [r7, #8]
 8003ebc:	691b      	ldr	r3, [r3, #16]
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d132      	bne.n	8003f28 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003ec2:	69bb      	ldr	r3, [r7, #24]
 8003ec4:	015a      	lsls	r2, r3, #5
 8003ec6:	69fb      	ldr	r3, [r7, #28]
 8003ec8:	4413      	add	r3, r2
 8003eca:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003ece:	691b      	ldr	r3, [r3, #16]
 8003ed0:	69ba      	ldr	r2, [r7, #24]
 8003ed2:	0151      	lsls	r1, r2, #5
 8003ed4:	69fa      	ldr	r2, [r7, #28]
 8003ed6:	440a      	add	r2, r1
 8003ed8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003edc:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8003ee0:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8003ee4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003ee6:	69bb      	ldr	r3, [r7, #24]
 8003ee8:	015a      	lsls	r2, r3, #5
 8003eea:	69fb      	ldr	r3, [r7, #28]
 8003eec:	4413      	add	r3, r2
 8003eee:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003ef2:	691b      	ldr	r3, [r3, #16]
 8003ef4:	69ba      	ldr	r2, [r7, #24]
 8003ef6:	0151      	lsls	r1, r2, #5
 8003ef8:	69fa      	ldr	r2, [r7, #28]
 8003efa:	440a      	add	r2, r1
 8003efc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003f00:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8003f04:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003f06:	69bb      	ldr	r3, [r7, #24]
 8003f08:	015a      	lsls	r2, r3, #5
 8003f0a:	69fb      	ldr	r3, [r7, #28]
 8003f0c:	4413      	add	r3, r2
 8003f0e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003f12:	691b      	ldr	r3, [r3, #16]
 8003f14:	69ba      	ldr	r2, [r7, #24]
 8003f16:	0151      	lsls	r1, r2, #5
 8003f18:	69fa      	ldr	r2, [r7, #28]
 8003f1a:	440a      	add	r2, r1
 8003f1c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003f20:	0cdb      	lsrs	r3, r3, #19
 8003f22:	04db      	lsls	r3, r3, #19
 8003f24:	6113      	str	r3, [r2, #16]
 8003f26:	e097      	b.n	8004058 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003f28:	69bb      	ldr	r3, [r7, #24]
 8003f2a:	015a      	lsls	r2, r3, #5
 8003f2c:	69fb      	ldr	r3, [r7, #28]
 8003f2e:	4413      	add	r3, r2
 8003f30:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003f34:	691b      	ldr	r3, [r3, #16]
 8003f36:	69ba      	ldr	r2, [r7, #24]
 8003f38:	0151      	lsls	r1, r2, #5
 8003f3a:	69fa      	ldr	r2, [r7, #28]
 8003f3c:	440a      	add	r2, r1
 8003f3e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003f42:	0cdb      	lsrs	r3, r3, #19
 8003f44:	04db      	lsls	r3, r3, #19
 8003f46:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003f48:	69bb      	ldr	r3, [r7, #24]
 8003f4a:	015a      	lsls	r2, r3, #5
 8003f4c:	69fb      	ldr	r3, [r7, #28]
 8003f4e:	4413      	add	r3, r2
 8003f50:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003f54:	691b      	ldr	r3, [r3, #16]
 8003f56:	69ba      	ldr	r2, [r7, #24]
 8003f58:	0151      	lsls	r1, r2, #5
 8003f5a:	69fa      	ldr	r2, [r7, #28]
 8003f5c:	440a      	add	r2, r1
 8003f5e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003f62:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8003f66:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8003f6a:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8003f6c:	69bb      	ldr	r3, [r7, #24]
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d11a      	bne.n	8003fa8 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8003f72:	68bb      	ldr	r3, [r7, #8]
 8003f74:	691a      	ldr	r2, [r3, #16]
 8003f76:	68bb      	ldr	r3, [r7, #8]
 8003f78:	689b      	ldr	r3, [r3, #8]
 8003f7a:	429a      	cmp	r2, r3
 8003f7c:	d903      	bls.n	8003f86 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8003f7e:	68bb      	ldr	r3, [r7, #8]
 8003f80:	689a      	ldr	r2, [r3, #8]
 8003f82:	68bb      	ldr	r3, [r7, #8]
 8003f84:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003f86:	69bb      	ldr	r3, [r7, #24]
 8003f88:	015a      	lsls	r2, r3, #5
 8003f8a:	69fb      	ldr	r3, [r7, #28]
 8003f8c:	4413      	add	r3, r2
 8003f8e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003f92:	691b      	ldr	r3, [r3, #16]
 8003f94:	69ba      	ldr	r2, [r7, #24]
 8003f96:	0151      	lsls	r1, r2, #5
 8003f98:	69fa      	ldr	r2, [r7, #28]
 8003f9a:	440a      	add	r2, r1
 8003f9c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003fa0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8003fa4:	6113      	str	r3, [r2, #16]
 8003fa6:	e044      	b.n	8004032 <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8003fa8:	68bb      	ldr	r3, [r7, #8]
 8003faa:	691a      	ldr	r2, [r3, #16]
 8003fac:	68bb      	ldr	r3, [r7, #8]
 8003fae:	689b      	ldr	r3, [r3, #8]
 8003fb0:	4413      	add	r3, r2
 8003fb2:	1e5a      	subs	r2, r3, #1
 8003fb4:	68bb      	ldr	r3, [r7, #8]
 8003fb6:	689b      	ldr	r3, [r3, #8]
 8003fb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fbc:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 8003fbe:	69bb      	ldr	r3, [r7, #24]
 8003fc0:	015a      	lsls	r2, r3, #5
 8003fc2:	69fb      	ldr	r3, [r7, #28]
 8003fc4:	4413      	add	r3, r2
 8003fc6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003fca:	691a      	ldr	r2, [r3, #16]
 8003fcc:	8afb      	ldrh	r3, [r7, #22]
 8003fce:	04d9      	lsls	r1, r3, #19
 8003fd0:	4ba4      	ldr	r3, [pc, #656]	@ (8004264 <USB_EPStartXfer+0x3cc>)
 8003fd2:	400b      	ands	r3, r1
 8003fd4:	69b9      	ldr	r1, [r7, #24]
 8003fd6:	0148      	lsls	r0, r1, #5
 8003fd8:	69f9      	ldr	r1, [r7, #28]
 8003fda:	4401      	add	r1, r0
 8003fdc:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8003fe0:	4313      	orrs	r3, r2
 8003fe2:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 8003fe4:	68bb      	ldr	r3, [r7, #8]
 8003fe6:	791b      	ldrb	r3, [r3, #4]
 8003fe8:	2b01      	cmp	r3, #1
 8003fea:	d122      	bne.n	8004032 <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8003fec:	69bb      	ldr	r3, [r7, #24]
 8003fee:	015a      	lsls	r2, r3, #5
 8003ff0:	69fb      	ldr	r3, [r7, #28]
 8003ff2:	4413      	add	r3, r2
 8003ff4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003ff8:	691b      	ldr	r3, [r3, #16]
 8003ffa:	69ba      	ldr	r2, [r7, #24]
 8003ffc:	0151      	lsls	r1, r2, #5
 8003ffe:	69fa      	ldr	r2, [r7, #28]
 8004000:	440a      	add	r2, r1
 8004002:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004006:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 800400a:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 800400c:	69bb      	ldr	r3, [r7, #24]
 800400e:	015a      	lsls	r2, r3, #5
 8004010:	69fb      	ldr	r3, [r7, #28]
 8004012:	4413      	add	r3, r2
 8004014:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004018:	691a      	ldr	r2, [r3, #16]
 800401a:	8afb      	ldrh	r3, [r7, #22]
 800401c:	075b      	lsls	r3, r3, #29
 800401e:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 8004022:	69b9      	ldr	r1, [r7, #24]
 8004024:	0148      	lsls	r0, r1, #5
 8004026:	69f9      	ldr	r1, [r7, #28]
 8004028:	4401      	add	r1, r0
 800402a:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800402e:	4313      	orrs	r3, r2
 8004030:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004032:	69bb      	ldr	r3, [r7, #24]
 8004034:	015a      	lsls	r2, r3, #5
 8004036:	69fb      	ldr	r3, [r7, #28]
 8004038:	4413      	add	r3, r2
 800403a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800403e:	691a      	ldr	r2, [r3, #16]
 8004040:	68bb      	ldr	r3, [r7, #8]
 8004042:	691b      	ldr	r3, [r3, #16]
 8004044:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004048:	69b9      	ldr	r1, [r7, #24]
 800404a:	0148      	lsls	r0, r1, #5
 800404c:	69f9      	ldr	r1, [r7, #28]
 800404e:	4401      	add	r1, r0
 8004050:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8004054:	4313      	orrs	r3, r2
 8004056:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004058:	79fb      	ldrb	r3, [r7, #7]
 800405a:	2b01      	cmp	r3, #1
 800405c:	d14b      	bne.n	80040f6 <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800405e:	68bb      	ldr	r3, [r7, #8]
 8004060:	69db      	ldr	r3, [r3, #28]
 8004062:	2b00      	cmp	r3, #0
 8004064:	d009      	beq.n	800407a <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004066:	69bb      	ldr	r3, [r7, #24]
 8004068:	015a      	lsls	r2, r3, #5
 800406a:	69fb      	ldr	r3, [r7, #28]
 800406c:	4413      	add	r3, r2
 800406e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004072:	461a      	mov	r2, r3
 8004074:	68bb      	ldr	r3, [r7, #8]
 8004076:	69db      	ldr	r3, [r3, #28]
 8004078:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800407a:	68bb      	ldr	r3, [r7, #8]
 800407c:	791b      	ldrb	r3, [r3, #4]
 800407e:	2b01      	cmp	r3, #1
 8004080:	d128      	bne.n	80040d4 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004082:	69fb      	ldr	r3, [r7, #28]
 8004084:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004088:	689b      	ldr	r3, [r3, #8]
 800408a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800408e:	2b00      	cmp	r3, #0
 8004090:	d110      	bne.n	80040b4 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004092:	69bb      	ldr	r3, [r7, #24]
 8004094:	015a      	lsls	r2, r3, #5
 8004096:	69fb      	ldr	r3, [r7, #28]
 8004098:	4413      	add	r3, r2
 800409a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	69ba      	ldr	r2, [r7, #24]
 80040a2:	0151      	lsls	r1, r2, #5
 80040a4:	69fa      	ldr	r2, [r7, #28]
 80040a6:	440a      	add	r2, r1
 80040a8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80040ac:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80040b0:	6013      	str	r3, [r2, #0]
 80040b2:	e00f      	b.n	80040d4 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80040b4:	69bb      	ldr	r3, [r7, #24]
 80040b6:	015a      	lsls	r2, r3, #5
 80040b8:	69fb      	ldr	r3, [r7, #28]
 80040ba:	4413      	add	r3, r2
 80040bc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	69ba      	ldr	r2, [r7, #24]
 80040c4:	0151      	lsls	r1, r2, #5
 80040c6:	69fa      	ldr	r2, [r7, #28]
 80040c8:	440a      	add	r2, r1
 80040ca:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80040ce:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80040d2:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80040d4:	69bb      	ldr	r3, [r7, #24]
 80040d6:	015a      	lsls	r2, r3, #5
 80040d8:	69fb      	ldr	r3, [r7, #28]
 80040da:	4413      	add	r3, r2
 80040dc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	69ba      	ldr	r2, [r7, #24]
 80040e4:	0151      	lsls	r1, r2, #5
 80040e6:	69fa      	ldr	r2, [r7, #28]
 80040e8:	440a      	add	r2, r1
 80040ea:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80040ee:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80040f2:	6013      	str	r3, [r2, #0]
 80040f4:	e166      	b.n	80043c4 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80040f6:	69bb      	ldr	r3, [r7, #24]
 80040f8:	015a      	lsls	r2, r3, #5
 80040fa:	69fb      	ldr	r3, [r7, #28]
 80040fc:	4413      	add	r3, r2
 80040fe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	69ba      	ldr	r2, [r7, #24]
 8004106:	0151      	lsls	r1, r2, #5
 8004108:	69fa      	ldr	r2, [r7, #28]
 800410a:	440a      	add	r2, r1
 800410c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004110:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8004114:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004116:	68bb      	ldr	r3, [r7, #8]
 8004118:	791b      	ldrb	r3, [r3, #4]
 800411a:	2b01      	cmp	r3, #1
 800411c:	d015      	beq.n	800414a <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800411e:	68bb      	ldr	r3, [r7, #8]
 8004120:	691b      	ldr	r3, [r3, #16]
 8004122:	2b00      	cmp	r3, #0
 8004124:	f000 814e 	beq.w	80043c4 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004128:	69fb      	ldr	r3, [r7, #28]
 800412a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800412e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004130:	68bb      	ldr	r3, [r7, #8]
 8004132:	781b      	ldrb	r3, [r3, #0]
 8004134:	f003 030f 	and.w	r3, r3, #15
 8004138:	2101      	movs	r1, #1
 800413a:	fa01 f303 	lsl.w	r3, r1, r3
 800413e:	69f9      	ldr	r1, [r7, #28]
 8004140:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004144:	4313      	orrs	r3, r2
 8004146:	634b      	str	r3, [r1, #52]	@ 0x34
 8004148:	e13c      	b.n	80043c4 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800414a:	69fb      	ldr	r3, [r7, #28]
 800414c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004150:	689b      	ldr	r3, [r3, #8]
 8004152:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004156:	2b00      	cmp	r3, #0
 8004158:	d110      	bne.n	800417c <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800415a:	69bb      	ldr	r3, [r7, #24]
 800415c:	015a      	lsls	r2, r3, #5
 800415e:	69fb      	ldr	r3, [r7, #28]
 8004160:	4413      	add	r3, r2
 8004162:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	69ba      	ldr	r2, [r7, #24]
 800416a:	0151      	lsls	r1, r2, #5
 800416c:	69fa      	ldr	r2, [r7, #28]
 800416e:	440a      	add	r2, r1
 8004170:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004174:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8004178:	6013      	str	r3, [r2, #0]
 800417a:	e00f      	b.n	800419c <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800417c:	69bb      	ldr	r3, [r7, #24]
 800417e:	015a      	lsls	r2, r3, #5
 8004180:	69fb      	ldr	r3, [r7, #28]
 8004182:	4413      	add	r3, r2
 8004184:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	69ba      	ldr	r2, [r7, #24]
 800418c:	0151      	lsls	r1, r2, #5
 800418e:	69fa      	ldr	r2, [r7, #28]
 8004190:	440a      	add	r2, r1
 8004192:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004196:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800419a:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800419c:	68bb      	ldr	r3, [r7, #8]
 800419e:	68d9      	ldr	r1, [r3, #12]
 80041a0:	68bb      	ldr	r3, [r7, #8]
 80041a2:	781a      	ldrb	r2, [r3, #0]
 80041a4:	68bb      	ldr	r3, [r7, #8]
 80041a6:	691b      	ldr	r3, [r3, #16]
 80041a8:	b298      	uxth	r0, r3
 80041aa:	79fb      	ldrb	r3, [r7, #7]
 80041ac:	9300      	str	r3, [sp, #0]
 80041ae:	4603      	mov	r3, r0
 80041b0:	68f8      	ldr	r0, [r7, #12]
 80041b2:	f000 f9b9 	bl	8004528 <USB_WritePacket>
 80041b6:	e105      	b.n	80043c4 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80041b8:	69bb      	ldr	r3, [r7, #24]
 80041ba:	015a      	lsls	r2, r3, #5
 80041bc:	69fb      	ldr	r3, [r7, #28]
 80041be:	4413      	add	r3, r2
 80041c0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80041c4:	691b      	ldr	r3, [r3, #16]
 80041c6:	69ba      	ldr	r2, [r7, #24]
 80041c8:	0151      	lsls	r1, r2, #5
 80041ca:	69fa      	ldr	r2, [r7, #28]
 80041cc:	440a      	add	r2, r1
 80041ce:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80041d2:	0cdb      	lsrs	r3, r3, #19
 80041d4:	04db      	lsls	r3, r3, #19
 80041d6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80041d8:	69bb      	ldr	r3, [r7, #24]
 80041da:	015a      	lsls	r2, r3, #5
 80041dc:	69fb      	ldr	r3, [r7, #28]
 80041de:	4413      	add	r3, r2
 80041e0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80041e4:	691b      	ldr	r3, [r3, #16]
 80041e6:	69ba      	ldr	r2, [r7, #24]
 80041e8:	0151      	lsls	r1, r2, #5
 80041ea:	69fa      	ldr	r2, [r7, #28]
 80041ec:	440a      	add	r2, r1
 80041ee:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80041f2:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80041f6:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80041fa:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 80041fc:	69bb      	ldr	r3, [r7, #24]
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d132      	bne.n	8004268 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 8004202:	68bb      	ldr	r3, [r7, #8]
 8004204:	691b      	ldr	r3, [r3, #16]
 8004206:	2b00      	cmp	r3, #0
 8004208:	d003      	beq.n	8004212 <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 800420a:	68bb      	ldr	r3, [r7, #8]
 800420c:	689a      	ldr	r2, [r3, #8]
 800420e:	68bb      	ldr	r3, [r7, #8]
 8004210:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8004212:	68bb      	ldr	r3, [r7, #8]
 8004214:	689a      	ldr	r2, [r3, #8]
 8004216:	68bb      	ldr	r3, [r7, #8]
 8004218:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800421a:	69bb      	ldr	r3, [r7, #24]
 800421c:	015a      	lsls	r2, r3, #5
 800421e:	69fb      	ldr	r3, [r7, #28]
 8004220:	4413      	add	r3, r2
 8004222:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004226:	691a      	ldr	r2, [r3, #16]
 8004228:	68bb      	ldr	r3, [r7, #8]
 800422a:	6a1b      	ldr	r3, [r3, #32]
 800422c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004230:	69b9      	ldr	r1, [r7, #24]
 8004232:	0148      	lsls	r0, r1, #5
 8004234:	69f9      	ldr	r1, [r7, #28]
 8004236:	4401      	add	r1, r0
 8004238:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800423c:	4313      	orrs	r3, r2
 800423e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004240:	69bb      	ldr	r3, [r7, #24]
 8004242:	015a      	lsls	r2, r3, #5
 8004244:	69fb      	ldr	r3, [r7, #28]
 8004246:	4413      	add	r3, r2
 8004248:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800424c:	691b      	ldr	r3, [r3, #16]
 800424e:	69ba      	ldr	r2, [r7, #24]
 8004250:	0151      	lsls	r1, r2, #5
 8004252:	69fa      	ldr	r2, [r7, #28]
 8004254:	440a      	add	r2, r1
 8004256:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800425a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800425e:	6113      	str	r3, [r2, #16]
 8004260:	e062      	b.n	8004328 <USB_EPStartXfer+0x490>
 8004262:	bf00      	nop
 8004264:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8004268:	68bb      	ldr	r3, [r7, #8]
 800426a:	691b      	ldr	r3, [r3, #16]
 800426c:	2b00      	cmp	r3, #0
 800426e:	d123      	bne.n	80042b8 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8004270:	69bb      	ldr	r3, [r7, #24]
 8004272:	015a      	lsls	r2, r3, #5
 8004274:	69fb      	ldr	r3, [r7, #28]
 8004276:	4413      	add	r3, r2
 8004278:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800427c:	691a      	ldr	r2, [r3, #16]
 800427e:	68bb      	ldr	r3, [r7, #8]
 8004280:	689b      	ldr	r3, [r3, #8]
 8004282:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004286:	69b9      	ldr	r1, [r7, #24]
 8004288:	0148      	lsls	r0, r1, #5
 800428a:	69f9      	ldr	r1, [r7, #28]
 800428c:	4401      	add	r1, r0
 800428e:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8004292:	4313      	orrs	r3, r2
 8004294:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004296:	69bb      	ldr	r3, [r7, #24]
 8004298:	015a      	lsls	r2, r3, #5
 800429a:	69fb      	ldr	r3, [r7, #28]
 800429c:	4413      	add	r3, r2
 800429e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80042a2:	691b      	ldr	r3, [r3, #16]
 80042a4:	69ba      	ldr	r2, [r7, #24]
 80042a6:	0151      	lsls	r1, r2, #5
 80042a8:	69fa      	ldr	r2, [r7, #28]
 80042aa:	440a      	add	r2, r1
 80042ac:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80042b0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80042b4:	6113      	str	r3, [r2, #16]
 80042b6:	e037      	b.n	8004328 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80042b8:	68bb      	ldr	r3, [r7, #8]
 80042ba:	691a      	ldr	r2, [r3, #16]
 80042bc:	68bb      	ldr	r3, [r7, #8]
 80042be:	689b      	ldr	r3, [r3, #8]
 80042c0:	4413      	add	r3, r2
 80042c2:	1e5a      	subs	r2, r3, #1
 80042c4:	68bb      	ldr	r3, [r7, #8]
 80042c6:	689b      	ldr	r3, [r3, #8]
 80042c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80042cc:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 80042ce:	68bb      	ldr	r3, [r7, #8]
 80042d0:	689b      	ldr	r3, [r3, #8]
 80042d2:	8afa      	ldrh	r2, [r7, #22]
 80042d4:	fb03 f202 	mul.w	r2, r3, r2
 80042d8:	68bb      	ldr	r3, [r7, #8]
 80042da:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80042dc:	69bb      	ldr	r3, [r7, #24]
 80042de:	015a      	lsls	r2, r3, #5
 80042e0:	69fb      	ldr	r3, [r7, #28]
 80042e2:	4413      	add	r3, r2
 80042e4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80042e8:	691a      	ldr	r2, [r3, #16]
 80042ea:	8afb      	ldrh	r3, [r7, #22]
 80042ec:	04d9      	lsls	r1, r3, #19
 80042ee:	4b38      	ldr	r3, [pc, #224]	@ (80043d0 <USB_EPStartXfer+0x538>)
 80042f0:	400b      	ands	r3, r1
 80042f2:	69b9      	ldr	r1, [r7, #24]
 80042f4:	0148      	lsls	r0, r1, #5
 80042f6:	69f9      	ldr	r1, [r7, #28]
 80042f8:	4401      	add	r1, r0
 80042fa:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80042fe:	4313      	orrs	r3, r2
 8004300:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8004302:	69bb      	ldr	r3, [r7, #24]
 8004304:	015a      	lsls	r2, r3, #5
 8004306:	69fb      	ldr	r3, [r7, #28]
 8004308:	4413      	add	r3, r2
 800430a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800430e:	691a      	ldr	r2, [r3, #16]
 8004310:	68bb      	ldr	r3, [r7, #8]
 8004312:	6a1b      	ldr	r3, [r3, #32]
 8004314:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004318:	69b9      	ldr	r1, [r7, #24]
 800431a:	0148      	lsls	r0, r1, #5
 800431c:	69f9      	ldr	r1, [r7, #28]
 800431e:	4401      	add	r1, r0
 8004320:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8004324:	4313      	orrs	r3, r2
 8004326:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8004328:	79fb      	ldrb	r3, [r7, #7]
 800432a:	2b01      	cmp	r3, #1
 800432c:	d10d      	bne.n	800434a <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800432e:	68bb      	ldr	r3, [r7, #8]
 8004330:	68db      	ldr	r3, [r3, #12]
 8004332:	2b00      	cmp	r3, #0
 8004334:	d009      	beq.n	800434a <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004336:	68bb      	ldr	r3, [r7, #8]
 8004338:	68d9      	ldr	r1, [r3, #12]
 800433a:	69bb      	ldr	r3, [r7, #24]
 800433c:	015a      	lsls	r2, r3, #5
 800433e:	69fb      	ldr	r3, [r7, #28]
 8004340:	4413      	add	r3, r2
 8004342:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004346:	460a      	mov	r2, r1
 8004348:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800434a:	68bb      	ldr	r3, [r7, #8]
 800434c:	791b      	ldrb	r3, [r3, #4]
 800434e:	2b01      	cmp	r3, #1
 8004350:	d128      	bne.n	80043a4 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004352:	69fb      	ldr	r3, [r7, #28]
 8004354:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004358:	689b      	ldr	r3, [r3, #8]
 800435a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800435e:	2b00      	cmp	r3, #0
 8004360:	d110      	bne.n	8004384 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8004362:	69bb      	ldr	r3, [r7, #24]
 8004364:	015a      	lsls	r2, r3, #5
 8004366:	69fb      	ldr	r3, [r7, #28]
 8004368:	4413      	add	r3, r2
 800436a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	69ba      	ldr	r2, [r7, #24]
 8004372:	0151      	lsls	r1, r2, #5
 8004374:	69fa      	ldr	r2, [r7, #28]
 8004376:	440a      	add	r2, r1
 8004378:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800437c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8004380:	6013      	str	r3, [r2, #0]
 8004382:	e00f      	b.n	80043a4 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8004384:	69bb      	ldr	r3, [r7, #24]
 8004386:	015a      	lsls	r2, r3, #5
 8004388:	69fb      	ldr	r3, [r7, #28]
 800438a:	4413      	add	r3, r2
 800438c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	69ba      	ldr	r2, [r7, #24]
 8004394:	0151      	lsls	r1, r2, #5
 8004396:	69fa      	ldr	r2, [r7, #28]
 8004398:	440a      	add	r2, r1
 800439a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800439e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80043a2:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80043a4:	69bb      	ldr	r3, [r7, #24]
 80043a6:	015a      	lsls	r2, r3, #5
 80043a8:	69fb      	ldr	r3, [r7, #28]
 80043aa:	4413      	add	r3, r2
 80043ac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	69ba      	ldr	r2, [r7, #24]
 80043b4:	0151      	lsls	r1, r2, #5
 80043b6:	69fa      	ldr	r2, [r7, #28]
 80043b8:	440a      	add	r2, r1
 80043ba:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80043be:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80043c2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80043c4:	2300      	movs	r3, #0
}
 80043c6:	4618      	mov	r0, r3
 80043c8:	3720      	adds	r7, #32
 80043ca:	46bd      	mov	sp, r7
 80043cc:	bd80      	pop	{r7, pc}
 80043ce:	bf00      	nop
 80043d0:	1ff80000 	.word	0x1ff80000

080043d4 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80043d4:	b480      	push	{r7}
 80043d6:	b087      	sub	sp, #28
 80043d8:	af00      	add	r7, sp, #0
 80043da:	6078      	str	r0, [r7, #4]
 80043dc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80043de:	2300      	movs	r3, #0
 80043e0:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80043e2:	2300      	movs	r3, #0
 80043e4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80043ea:	683b      	ldr	r3, [r7, #0]
 80043ec:	785b      	ldrb	r3, [r3, #1]
 80043ee:	2b01      	cmp	r3, #1
 80043f0:	d14a      	bne.n	8004488 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80043f2:	683b      	ldr	r3, [r7, #0]
 80043f4:	781b      	ldrb	r3, [r3, #0]
 80043f6:	015a      	lsls	r2, r3, #5
 80043f8:	693b      	ldr	r3, [r7, #16]
 80043fa:	4413      	add	r3, r2
 80043fc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004406:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800440a:	f040 8086 	bne.w	800451a <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800440e:	683b      	ldr	r3, [r7, #0]
 8004410:	781b      	ldrb	r3, [r3, #0]
 8004412:	015a      	lsls	r2, r3, #5
 8004414:	693b      	ldr	r3, [r7, #16]
 8004416:	4413      	add	r3, r2
 8004418:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	683a      	ldr	r2, [r7, #0]
 8004420:	7812      	ldrb	r2, [r2, #0]
 8004422:	0151      	lsls	r1, r2, #5
 8004424:	693a      	ldr	r2, [r7, #16]
 8004426:	440a      	add	r2, r1
 8004428:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800442c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8004430:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8004432:	683b      	ldr	r3, [r7, #0]
 8004434:	781b      	ldrb	r3, [r3, #0]
 8004436:	015a      	lsls	r2, r3, #5
 8004438:	693b      	ldr	r3, [r7, #16]
 800443a:	4413      	add	r3, r2
 800443c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	683a      	ldr	r2, [r7, #0]
 8004444:	7812      	ldrb	r2, [r2, #0]
 8004446:	0151      	lsls	r1, r2, #5
 8004448:	693a      	ldr	r2, [r7, #16]
 800444a:	440a      	add	r2, r1
 800444c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004450:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004454:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	3301      	adds	r3, #1
 800445a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	f242 7210 	movw	r2, #10000	@ 0x2710
 8004462:	4293      	cmp	r3, r2
 8004464:	d902      	bls.n	800446c <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8004466:	2301      	movs	r3, #1
 8004468:	75fb      	strb	r3, [r7, #23]
          break;
 800446a:	e056      	b.n	800451a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800446c:	683b      	ldr	r3, [r7, #0]
 800446e:	781b      	ldrb	r3, [r3, #0]
 8004470:	015a      	lsls	r2, r3, #5
 8004472:	693b      	ldr	r3, [r7, #16]
 8004474:	4413      	add	r3, r2
 8004476:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004480:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004484:	d0e7      	beq.n	8004456 <USB_EPStopXfer+0x82>
 8004486:	e048      	b.n	800451a <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004488:	683b      	ldr	r3, [r7, #0]
 800448a:	781b      	ldrb	r3, [r3, #0]
 800448c:	015a      	lsls	r2, r3, #5
 800448e:	693b      	ldr	r3, [r7, #16]
 8004490:	4413      	add	r3, r2
 8004492:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800449c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80044a0:	d13b      	bne.n	800451a <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80044a2:	683b      	ldr	r3, [r7, #0]
 80044a4:	781b      	ldrb	r3, [r3, #0]
 80044a6:	015a      	lsls	r2, r3, #5
 80044a8:	693b      	ldr	r3, [r7, #16]
 80044aa:	4413      	add	r3, r2
 80044ac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	683a      	ldr	r2, [r7, #0]
 80044b4:	7812      	ldrb	r2, [r2, #0]
 80044b6:	0151      	lsls	r1, r2, #5
 80044b8:	693a      	ldr	r2, [r7, #16]
 80044ba:	440a      	add	r2, r1
 80044bc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80044c0:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80044c4:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80044c6:	683b      	ldr	r3, [r7, #0]
 80044c8:	781b      	ldrb	r3, [r3, #0]
 80044ca:	015a      	lsls	r2, r3, #5
 80044cc:	693b      	ldr	r3, [r7, #16]
 80044ce:	4413      	add	r3, r2
 80044d0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	683a      	ldr	r2, [r7, #0]
 80044d8:	7812      	ldrb	r2, [r2, #0]
 80044da:	0151      	lsls	r1, r2, #5
 80044dc:	693a      	ldr	r2, [r7, #16]
 80044de:	440a      	add	r2, r1
 80044e0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80044e4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80044e8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	3301      	adds	r3, #1
 80044ee:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	f242 7210 	movw	r2, #10000	@ 0x2710
 80044f6:	4293      	cmp	r3, r2
 80044f8:	d902      	bls.n	8004500 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80044fa:	2301      	movs	r3, #1
 80044fc:	75fb      	strb	r3, [r7, #23]
          break;
 80044fe:	e00c      	b.n	800451a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8004500:	683b      	ldr	r3, [r7, #0]
 8004502:	781b      	ldrb	r3, [r3, #0]
 8004504:	015a      	lsls	r2, r3, #5
 8004506:	693b      	ldr	r3, [r7, #16]
 8004508:	4413      	add	r3, r2
 800450a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004514:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004518:	d0e7      	beq.n	80044ea <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800451a:	7dfb      	ldrb	r3, [r7, #23]
}
 800451c:	4618      	mov	r0, r3
 800451e:	371c      	adds	r7, #28
 8004520:	46bd      	mov	sp, r7
 8004522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004526:	4770      	bx	lr

08004528 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8004528:	b480      	push	{r7}
 800452a:	b089      	sub	sp, #36	@ 0x24
 800452c:	af00      	add	r7, sp, #0
 800452e:	60f8      	str	r0, [r7, #12]
 8004530:	60b9      	str	r1, [r7, #8]
 8004532:	4611      	mov	r1, r2
 8004534:	461a      	mov	r2, r3
 8004536:	460b      	mov	r3, r1
 8004538:	71fb      	strb	r3, [r7, #7]
 800453a:	4613      	mov	r3, r2
 800453c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8004542:	68bb      	ldr	r3, [r7, #8]
 8004544:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8004546:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800454a:	2b00      	cmp	r3, #0
 800454c:	d123      	bne.n	8004596 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800454e:	88bb      	ldrh	r3, [r7, #4]
 8004550:	3303      	adds	r3, #3
 8004552:	089b      	lsrs	r3, r3, #2
 8004554:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8004556:	2300      	movs	r3, #0
 8004558:	61bb      	str	r3, [r7, #24]
 800455a:	e018      	b.n	800458e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800455c:	79fb      	ldrb	r3, [r7, #7]
 800455e:	031a      	lsls	r2, r3, #12
 8004560:	697b      	ldr	r3, [r7, #20]
 8004562:	4413      	add	r3, r2
 8004564:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004568:	461a      	mov	r2, r3
 800456a:	69fb      	ldr	r3, [r7, #28]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8004570:	69fb      	ldr	r3, [r7, #28]
 8004572:	3301      	adds	r3, #1
 8004574:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004576:	69fb      	ldr	r3, [r7, #28]
 8004578:	3301      	adds	r3, #1
 800457a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800457c:	69fb      	ldr	r3, [r7, #28]
 800457e:	3301      	adds	r3, #1
 8004580:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004582:	69fb      	ldr	r3, [r7, #28]
 8004584:	3301      	adds	r3, #1
 8004586:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8004588:	69bb      	ldr	r3, [r7, #24]
 800458a:	3301      	adds	r3, #1
 800458c:	61bb      	str	r3, [r7, #24]
 800458e:	69ba      	ldr	r2, [r7, #24]
 8004590:	693b      	ldr	r3, [r7, #16]
 8004592:	429a      	cmp	r2, r3
 8004594:	d3e2      	bcc.n	800455c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8004596:	2300      	movs	r3, #0
}
 8004598:	4618      	mov	r0, r3
 800459a:	3724      	adds	r7, #36	@ 0x24
 800459c:	46bd      	mov	sp, r7
 800459e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a2:	4770      	bx	lr

080045a4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80045a4:	b480      	push	{r7}
 80045a6:	b08b      	sub	sp, #44	@ 0x2c
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	60f8      	str	r0, [r7, #12]
 80045ac:	60b9      	str	r1, [r7, #8]
 80045ae:	4613      	mov	r3, r2
 80045b0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80045b6:	68bb      	ldr	r3, [r7, #8]
 80045b8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80045ba:	88fb      	ldrh	r3, [r7, #6]
 80045bc:	089b      	lsrs	r3, r3, #2
 80045be:	b29b      	uxth	r3, r3
 80045c0:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80045c2:	88fb      	ldrh	r3, [r7, #6]
 80045c4:	f003 0303 	and.w	r3, r3, #3
 80045c8:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80045ca:	2300      	movs	r3, #0
 80045cc:	623b      	str	r3, [r7, #32]
 80045ce:	e014      	b.n	80045fa <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80045d0:	69bb      	ldr	r3, [r7, #24]
 80045d2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80045d6:	681a      	ldr	r2, [r3, #0]
 80045d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045da:	601a      	str	r2, [r3, #0]
    pDest++;
 80045dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045de:	3301      	adds	r3, #1
 80045e0:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80045e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045e4:	3301      	adds	r3, #1
 80045e6:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80045e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045ea:	3301      	adds	r3, #1
 80045ec:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80045ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045f0:	3301      	adds	r3, #1
 80045f2:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 80045f4:	6a3b      	ldr	r3, [r7, #32]
 80045f6:	3301      	adds	r3, #1
 80045f8:	623b      	str	r3, [r7, #32]
 80045fa:	6a3a      	ldr	r2, [r7, #32]
 80045fc:	697b      	ldr	r3, [r7, #20]
 80045fe:	429a      	cmp	r2, r3
 8004600:	d3e6      	bcc.n	80045d0 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8004602:	8bfb      	ldrh	r3, [r7, #30]
 8004604:	2b00      	cmp	r3, #0
 8004606:	d01e      	beq.n	8004646 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8004608:	2300      	movs	r3, #0
 800460a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800460c:	69bb      	ldr	r3, [r7, #24]
 800460e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004612:	461a      	mov	r2, r3
 8004614:	f107 0310 	add.w	r3, r7, #16
 8004618:	6812      	ldr	r2, [r2, #0]
 800461a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800461c:	693a      	ldr	r2, [r7, #16]
 800461e:	6a3b      	ldr	r3, [r7, #32]
 8004620:	b2db      	uxtb	r3, r3
 8004622:	00db      	lsls	r3, r3, #3
 8004624:	fa22 f303 	lsr.w	r3, r2, r3
 8004628:	b2da      	uxtb	r2, r3
 800462a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800462c:	701a      	strb	r2, [r3, #0]
      i++;
 800462e:	6a3b      	ldr	r3, [r7, #32]
 8004630:	3301      	adds	r3, #1
 8004632:	623b      	str	r3, [r7, #32]
      pDest++;
 8004634:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004636:	3301      	adds	r3, #1
 8004638:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800463a:	8bfb      	ldrh	r3, [r7, #30]
 800463c:	3b01      	subs	r3, #1
 800463e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8004640:	8bfb      	ldrh	r3, [r7, #30]
 8004642:	2b00      	cmp	r3, #0
 8004644:	d1ea      	bne.n	800461c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8004646:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8004648:	4618      	mov	r0, r3
 800464a:	372c      	adds	r7, #44	@ 0x2c
 800464c:	46bd      	mov	sp, r7
 800464e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004652:	4770      	bx	lr

08004654 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8004654:	b480      	push	{r7}
 8004656:	b085      	sub	sp, #20
 8004658:	af00      	add	r7, sp, #0
 800465a:	6078      	str	r0, [r7, #4]
 800465c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004662:	683b      	ldr	r3, [r7, #0]
 8004664:	781b      	ldrb	r3, [r3, #0]
 8004666:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004668:	683b      	ldr	r3, [r7, #0]
 800466a:	785b      	ldrb	r3, [r3, #1]
 800466c:	2b01      	cmp	r3, #1
 800466e:	d12c      	bne.n	80046ca <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004670:	68bb      	ldr	r3, [r7, #8]
 8004672:	015a      	lsls	r2, r3, #5
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	4413      	add	r3, r2
 8004678:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	2b00      	cmp	r3, #0
 8004680:	db12      	blt.n	80046a8 <USB_EPSetStall+0x54>
 8004682:	68bb      	ldr	r3, [r7, #8]
 8004684:	2b00      	cmp	r3, #0
 8004686:	d00f      	beq.n	80046a8 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8004688:	68bb      	ldr	r3, [r7, #8]
 800468a:	015a      	lsls	r2, r3, #5
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	4413      	add	r3, r2
 8004690:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	68ba      	ldr	r2, [r7, #8]
 8004698:	0151      	lsls	r1, r2, #5
 800469a:	68fa      	ldr	r2, [r7, #12]
 800469c:	440a      	add	r2, r1
 800469e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80046a2:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80046a6:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80046a8:	68bb      	ldr	r3, [r7, #8]
 80046aa:	015a      	lsls	r2, r3, #5
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	4413      	add	r3, r2
 80046b0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	68ba      	ldr	r2, [r7, #8]
 80046b8:	0151      	lsls	r1, r2, #5
 80046ba:	68fa      	ldr	r2, [r7, #12]
 80046bc:	440a      	add	r2, r1
 80046be:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80046c2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80046c6:	6013      	str	r3, [r2, #0]
 80046c8:	e02b      	b.n	8004722 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80046ca:	68bb      	ldr	r3, [r7, #8]
 80046cc:	015a      	lsls	r2, r3, #5
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	4413      	add	r3, r2
 80046d2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	2b00      	cmp	r3, #0
 80046da:	db12      	blt.n	8004702 <USB_EPSetStall+0xae>
 80046dc:	68bb      	ldr	r3, [r7, #8]
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d00f      	beq.n	8004702 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80046e2:	68bb      	ldr	r3, [r7, #8]
 80046e4:	015a      	lsls	r2, r3, #5
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	4413      	add	r3, r2
 80046ea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	68ba      	ldr	r2, [r7, #8]
 80046f2:	0151      	lsls	r1, r2, #5
 80046f4:	68fa      	ldr	r2, [r7, #12]
 80046f6:	440a      	add	r2, r1
 80046f8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80046fc:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004700:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8004702:	68bb      	ldr	r3, [r7, #8]
 8004704:	015a      	lsls	r2, r3, #5
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	4413      	add	r3, r2
 800470a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	68ba      	ldr	r2, [r7, #8]
 8004712:	0151      	lsls	r1, r2, #5
 8004714:	68fa      	ldr	r2, [r7, #12]
 8004716:	440a      	add	r2, r1
 8004718:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800471c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004720:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004722:	2300      	movs	r3, #0
}
 8004724:	4618      	mov	r0, r3
 8004726:	3714      	adds	r7, #20
 8004728:	46bd      	mov	sp, r7
 800472a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800472e:	4770      	bx	lr

08004730 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8004730:	b480      	push	{r7}
 8004732:	b085      	sub	sp, #20
 8004734:	af00      	add	r7, sp, #0
 8004736:	6078      	str	r0, [r7, #4]
 8004738:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800473e:	683b      	ldr	r3, [r7, #0]
 8004740:	781b      	ldrb	r3, [r3, #0]
 8004742:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004744:	683b      	ldr	r3, [r7, #0]
 8004746:	785b      	ldrb	r3, [r3, #1]
 8004748:	2b01      	cmp	r3, #1
 800474a:	d128      	bne.n	800479e <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800474c:	68bb      	ldr	r3, [r7, #8]
 800474e:	015a      	lsls	r2, r3, #5
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	4413      	add	r3, r2
 8004754:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	68ba      	ldr	r2, [r7, #8]
 800475c:	0151      	lsls	r1, r2, #5
 800475e:	68fa      	ldr	r2, [r7, #12]
 8004760:	440a      	add	r2, r1
 8004762:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004766:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800476a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800476c:	683b      	ldr	r3, [r7, #0]
 800476e:	791b      	ldrb	r3, [r3, #4]
 8004770:	2b03      	cmp	r3, #3
 8004772:	d003      	beq.n	800477c <USB_EPClearStall+0x4c>
 8004774:	683b      	ldr	r3, [r7, #0]
 8004776:	791b      	ldrb	r3, [r3, #4]
 8004778:	2b02      	cmp	r3, #2
 800477a:	d138      	bne.n	80047ee <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800477c:	68bb      	ldr	r3, [r7, #8]
 800477e:	015a      	lsls	r2, r3, #5
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	4413      	add	r3, r2
 8004784:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	68ba      	ldr	r2, [r7, #8]
 800478c:	0151      	lsls	r1, r2, #5
 800478e:	68fa      	ldr	r2, [r7, #12]
 8004790:	440a      	add	r2, r1
 8004792:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004796:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800479a:	6013      	str	r3, [r2, #0]
 800479c:	e027      	b.n	80047ee <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800479e:	68bb      	ldr	r3, [r7, #8]
 80047a0:	015a      	lsls	r2, r3, #5
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	4413      	add	r3, r2
 80047a6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	68ba      	ldr	r2, [r7, #8]
 80047ae:	0151      	lsls	r1, r2, #5
 80047b0:	68fa      	ldr	r2, [r7, #12]
 80047b2:	440a      	add	r2, r1
 80047b4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80047b8:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80047bc:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80047be:	683b      	ldr	r3, [r7, #0]
 80047c0:	791b      	ldrb	r3, [r3, #4]
 80047c2:	2b03      	cmp	r3, #3
 80047c4:	d003      	beq.n	80047ce <USB_EPClearStall+0x9e>
 80047c6:	683b      	ldr	r3, [r7, #0]
 80047c8:	791b      	ldrb	r3, [r3, #4]
 80047ca:	2b02      	cmp	r3, #2
 80047cc:	d10f      	bne.n	80047ee <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80047ce:	68bb      	ldr	r3, [r7, #8]
 80047d0:	015a      	lsls	r2, r3, #5
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	4413      	add	r3, r2
 80047d6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	68ba      	ldr	r2, [r7, #8]
 80047de:	0151      	lsls	r1, r2, #5
 80047e0:	68fa      	ldr	r2, [r7, #12]
 80047e2:	440a      	add	r2, r1
 80047e4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80047e8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80047ec:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80047ee:	2300      	movs	r3, #0
}
 80047f0:	4618      	mov	r0, r3
 80047f2:	3714      	adds	r7, #20
 80047f4:	46bd      	mov	sp, r7
 80047f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fa:	4770      	bx	lr

080047fc <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80047fc:	b480      	push	{r7}
 80047fe:	b085      	sub	sp, #20
 8004800:	af00      	add	r7, sp, #0
 8004802:	6078      	str	r0, [r7, #4]
 8004804:	460b      	mov	r3, r1
 8004806:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	68fa      	ldr	r2, [r7, #12]
 8004816:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800481a:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800481e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004826:	681a      	ldr	r2, [r3, #0]
 8004828:	78fb      	ldrb	r3, [r7, #3]
 800482a:	011b      	lsls	r3, r3, #4
 800482c:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8004830:	68f9      	ldr	r1, [r7, #12]
 8004832:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004836:	4313      	orrs	r3, r2
 8004838:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800483a:	2300      	movs	r3, #0
}
 800483c:	4618      	mov	r0, r3
 800483e:	3714      	adds	r7, #20
 8004840:	46bd      	mov	sp, r7
 8004842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004846:	4770      	bx	lr

08004848 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8004848:	b480      	push	{r7}
 800484a:	b085      	sub	sp, #20
 800484c:	af00      	add	r7, sp, #0
 800484e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	68fa      	ldr	r2, [r7, #12]
 800485e:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8004862:	f023 0303 	bic.w	r3, r3, #3
 8004866:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800486e:	685b      	ldr	r3, [r3, #4]
 8004870:	68fa      	ldr	r2, [r7, #12]
 8004872:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004876:	f023 0302 	bic.w	r3, r3, #2
 800487a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800487c:	2300      	movs	r3, #0
}
 800487e:	4618      	mov	r0, r3
 8004880:	3714      	adds	r7, #20
 8004882:	46bd      	mov	sp, r7
 8004884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004888:	4770      	bx	lr

0800488a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800488a:	b480      	push	{r7}
 800488c:	b085      	sub	sp, #20
 800488e:	af00      	add	r7, sp, #0
 8004890:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	68fa      	ldr	r2, [r7, #12]
 80048a0:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80048a4:	f023 0303 	bic.w	r3, r3, #3
 80048a8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80048b0:	685b      	ldr	r3, [r3, #4]
 80048b2:	68fa      	ldr	r2, [r7, #12]
 80048b4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80048b8:	f043 0302 	orr.w	r3, r3, #2
 80048bc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80048be:	2300      	movs	r3, #0
}
 80048c0:	4618      	mov	r0, r3
 80048c2:	3714      	adds	r7, #20
 80048c4:	46bd      	mov	sp, r7
 80048c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ca:	4770      	bx	lr

080048cc <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 80048cc:	b480      	push	{r7}
 80048ce:	b085      	sub	sp, #20
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	695b      	ldr	r3, [r3, #20]
 80048d8:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	699b      	ldr	r3, [r3, #24]
 80048de:	68fa      	ldr	r2, [r7, #12]
 80048e0:	4013      	ands	r3, r2
 80048e2:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80048e4:	68fb      	ldr	r3, [r7, #12]
}
 80048e6:	4618      	mov	r0, r3
 80048e8:	3714      	adds	r7, #20
 80048ea:	46bd      	mov	sp, r7
 80048ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f0:	4770      	bx	lr

080048f2 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80048f2:	b480      	push	{r7}
 80048f4:	b085      	sub	sp, #20
 80048f6:	af00      	add	r7, sp, #0
 80048f8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004904:	699b      	ldr	r3, [r3, #24]
 8004906:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800490e:	69db      	ldr	r3, [r3, #28]
 8004910:	68ba      	ldr	r2, [r7, #8]
 8004912:	4013      	ands	r3, r2
 8004914:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8004916:	68bb      	ldr	r3, [r7, #8]
 8004918:	0c1b      	lsrs	r3, r3, #16
}
 800491a:	4618      	mov	r0, r3
 800491c:	3714      	adds	r7, #20
 800491e:	46bd      	mov	sp, r7
 8004920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004924:	4770      	bx	lr

08004926 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8004926:	b480      	push	{r7}
 8004928:	b085      	sub	sp, #20
 800492a:	af00      	add	r7, sp, #0
 800492c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004938:	699b      	ldr	r3, [r3, #24]
 800493a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004942:	69db      	ldr	r3, [r3, #28]
 8004944:	68ba      	ldr	r2, [r7, #8]
 8004946:	4013      	ands	r3, r2
 8004948:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800494a:	68bb      	ldr	r3, [r7, #8]
 800494c:	b29b      	uxth	r3, r3
}
 800494e:	4618      	mov	r0, r3
 8004950:	3714      	adds	r7, #20
 8004952:	46bd      	mov	sp, r7
 8004954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004958:	4770      	bx	lr

0800495a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800495a:	b480      	push	{r7}
 800495c:	b085      	sub	sp, #20
 800495e:	af00      	add	r7, sp, #0
 8004960:	6078      	str	r0, [r7, #4]
 8004962:	460b      	mov	r3, r1
 8004964:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800496a:	78fb      	ldrb	r3, [r7, #3]
 800496c:	015a      	lsls	r2, r3, #5
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	4413      	add	r3, r2
 8004972:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004976:	689b      	ldr	r3, [r3, #8]
 8004978:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004980:	695b      	ldr	r3, [r3, #20]
 8004982:	68ba      	ldr	r2, [r7, #8]
 8004984:	4013      	ands	r3, r2
 8004986:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004988:	68bb      	ldr	r3, [r7, #8]
}
 800498a:	4618      	mov	r0, r3
 800498c:	3714      	adds	r7, #20
 800498e:	46bd      	mov	sp, r7
 8004990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004994:	4770      	bx	lr

08004996 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004996:	b480      	push	{r7}
 8004998:	b087      	sub	sp, #28
 800499a:	af00      	add	r7, sp, #0
 800499c:	6078      	str	r0, [r7, #4]
 800499e:	460b      	mov	r3, r1
 80049a0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80049a6:	697b      	ldr	r3, [r7, #20]
 80049a8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80049ac:	691b      	ldr	r3, [r3, #16]
 80049ae:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80049b0:	697b      	ldr	r3, [r7, #20]
 80049b2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80049b6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80049b8:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80049ba:	78fb      	ldrb	r3, [r7, #3]
 80049bc:	f003 030f 	and.w	r3, r3, #15
 80049c0:	68fa      	ldr	r2, [r7, #12]
 80049c2:	fa22 f303 	lsr.w	r3, r2, r3
 80049c6:	01db      	lsls	r3, r3, #7
 80049c8:	b2db      	uxtb	r3, r3
 80049ca:	693a      	ldr	r2, [r7, #16]
 80049cc:	4313      	orrs	r3, r2
 80049ce:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80049d0:	78fb      	ldrb	r3, [r7, #3]
 80049d2:	015a      	lsls	r2, r3, #5
 80049d4:	697b      	ldr	r3, [r7, #20]
 80049d6:	4413      	add	r3, r2
 80049d8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80049dc:	689b      	ldr	r3, [r3, #8]
 80049de:	693a      	ldr	r2, [r7, #16]
 80049e0:	4013      	ands	r3, r2
 80049e2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80049e4:	68bb      	ldr	r3, [r7, #8]
}
 80049e6:	4618      	mov	r0, r3
 80049e8:	371c      	adds	r7, #28
 80049ea:	46bd      	mov	sp, r7
 80049ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f0:	4770      	bx	lr

080049f2 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80049f2:	b480      	push	{r7}
 80049f4:	b083      	sub	sp, #12
 80049f6:	af00      	add	r7, sp, #0
 80049f8:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	695b      	ldr	r3, [r3, #20]
 80049fe:	f003 0301 	and.w	r3, r3, #1
}
 8004a02:	4618      	mov	r0, r3
 8004a04:	370c      	adds	r7, #12
 8004a06:	46bd      	mov	sp, r7
 8004a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a0c:	4770      	bx	lr

08004a0e <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8004a0e:	b480      	push	{r7}
 8004a10:	b085      	sub	sp, #20
 8004a12:	af00      	add	r7, sp, #0
 8004a14:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	68fa      	ldr	r2, [r7, #12]
 8004a24:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004a28:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8004a2c:	f023 0307 	bic.w	r3, r3, #7
 8004a30:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004a38:	685b      	ldr	r3, [r3, #4]
 8004a3a:	68fa      	ldr	r2, [r7, #12]
 8004a3c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004a40:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004a44:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004a46:	2300      	movs	r3, #0
}
 8004a48:	4618      	mov	r0, r3
 8004a4a:	3714      	adds	r7, #20
 8004a4c:	46bd      	mov	sp, r7
 8004a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a52:	4770      	bx	lr

08004a54 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8004a54:	b480      	push	{r7}
 8004a56:	b087      	sub	sp, #28
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	60f8      	str	r0, [r7, #12]
 8004a5c:	460b      	mov	r3, r1
 8004a5e:	607a      	str	r2, [r7, #4]
 8004a60:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	333c      	adds	r3, #60	@ 0x3c
 8004a6a:	3304      	adds	r3, #4
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8004a70:	693b      	ldr	r3, [r7, #16]
 8004a72:	4a26      	ldr	r2, [pc, #152]	@ (8004b0c <USB_EP0_OutStart+0xb8>)
 8004a74:	4293      	cmp	r3, r2
 8004a76:	d90a      	bls.n	8004a8e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004a78:	697b      	ldr	r3, [r7, #20]
 8004a7a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004a84:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004a88:	d101      	bne.n	8004a8e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8004a8a:	2300      	movs	r3, #0
 8004a8c:	e037      	b.n	8004afe <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8004a8e:	697b      	ldr	r3, [r7, #20]
 8004a90:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004a94:	461a      	mov	r2, r3
 8004a96:	2300      	movs	r3, #0
 8004a98:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004a9a:	697b      	ldr	r3, [r7, #20]
 8004a9c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004aa0:	691b      	ldr	r3, [r3, #16]
 8004aa2:	697a      	ldr	r2, [r7, #20]
 8004aa4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004aa8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004aac:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8004aae:	697b      	ldr	r3, [r7, #20]
 8004ab0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004ab4:	691b      	ldr	r3, [r3, #16]
 8004ab6:	697a      	ldr	r2, [r7, #20]
 8004ab8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004abc:	f043 0318 	orr.w	r3, r3, #24
 8004ac0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8004ac2:	697b      	ldr	r3, [r7, #20]
 8004ac4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004ac8:	691b      	ldr	r3, [r3, #16]
 8004aca:	697a      	ldr	r2, [r7, #20]
 8004acc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004ad0:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8004ad4:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8004ad6:	7afb      	ldrb	r3, [r7, #11]
 8004ad8:	2b01      	cmp	r3, #1
 8004ada:	d10f      	bne.n	8004afc <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8004adc:	697b      	ldr	r3, [r7, #20]
 8004ade:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004ae2:	461a      	mov	r2, r3
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8004ae8:	697b      	ldr	r3, [r7, #20]
 8004aea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	697a      	ldr	r2, [r7, #20]
 8004af2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004af6:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8004afa:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004afc:	2300      	movs	r3, #0
}
 8004afe:	4618      	mov	r0, r3
 8004b00:	371c      	adds	r7, #28
 8004b02:	46bd      	mov	sp, r7
 8004b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b08:	4770      	bx	lr
 8004b0a:	bf00      	nop
 8004b0c:	4f54300a 	.word	0x4f54300a

08004b10 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004b10:	b480      	push	{r7}
 8004b12:	b085      	sub	sp, #20
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004b18:	2300      	movs	r3, #0
 8004b1a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	3301      	adds	r3, #1
 8004b20:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004b28:	d901      	bls.n	8004b2e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004b2a:	2303      	movs	r3, #3
 8004b2c:	e01b      	b.n	8004b66 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	691b      	ldr	r3, [r3, #16]
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	daf2      	bge.n	8004b1c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004b36:	2300      	movs	r3, #0
 8004b38:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	691b      	ldr	r3, [r3, #16]
 8004b3e:	f043 0201 	orr.w	r2, r3, #1
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	3301      	adds	r3, #1
 8004b4a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004b52:	d901      	bls.n	8004b58 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004b54:	2303      	movs	r3, #3
 8004b56:	e006      	b.n	8004b66 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	691b      	ldr	r3, [r3, #16]
 8004b5c:	f003 0301 	and.w	r3, r3, #1
 8004b60:	2b01      	cmp	r3, #1
 8004b62:	d0f0      	beq.n	8004b46 <USB_CoreReset+0x36>

  return HAL_OK;
 8004b64:	2300      	movs	r3, #0
}
 8004b66:	4618      	mov	r0, r3
 8004b68:	3714      	adds	r7, #20
 8004b6a:	46bd      	mov	sp, r7
 8004b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b70:	4770      	bx	lr
	...

08004b74 <USBD_CUSTOM_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004b74:	b580      	push	{r7, lr}
 8004b76:	b084      	sub	sp, #16
 8004b78:	af00      	add	r7, sp, #0
 8004b7a:	6078      	str	r0, [r7, #4]
 8004b7c:	460b      	mov	r3, r1
 8004b7e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)USBD_malloc(sizeof(USBD_CUSTOM_HID_HandleTypeDef));
 8004b80:	201c      	movs	r0, #28
 8004b82:	f002 faef 	bl	8007164 <USBD_static_malloc>
 8004b86:	60f8      	str	r0, [r7, #12]

  if (hhid == NULL)
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d109      	bne.n	8004ba2 <USBD_CUSTOM_HID_Init+0x2e>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	32b0      	adds	r2, #176	@ 0xb0
 8004b98:	2100      	movs	r1, #0
 8004b9a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8004b9e:	2302      	movs	r3, #2
 8004ba0:	e08a      	b.n	8004cb8 <USBD_CUSTOM_HID_Init+0x144>
  }

  pdev->pClassDataCmsit[pdev->classId] = (void *)hhid;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	32b0      	adds	r2, #176	@ 0xb0
 8004bac:	68f9      	ldr	r1, [r7, #12]
 8004bae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	32b0      	adds	r2, #176	@ 0xb0
 8004bbc:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  /* Get the Endpoints addresses allocated for this class instance */
  CUSTOMHIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
  CUSTOMHIDOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	7c1b      	ldrb	r3, [r3, #16]
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d11b      	bne.n	8004c06 <USBD_CUSTOM_HID_Init+0x92>
  {
    pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].bInterval = CUSTOM_HID_HS_BINTERVAL;
 8004bce:	4b3c      	ldr	r3, [pc, #240]	@ (8004cc0 <USBD_CUSTOM_HID_Init+0x14c>)
 8004bd0:	781b      	ldrb	r3, [r3, #0]
 8004bd2:	f003 020f 	and.w	r2, r3, #15
 8004bd6:	6879      	ldr	r1, [r7, #4]
 8004bd8:	4613      	mov	r3, r2
 8004bda:	009b      	lsls	r3, r3, #2
 8004bdc:	4413      	add	r3, r2
 8004bde:	009b      	lsls	r3, r3, #2
 8004be0:	440b      	add	r3, r1
 8004be2:	3326      	adds	r3, #38	@ 0x26
 8004be4:	2205      	movs	r2, #5
 8004be6:	801a      	strh	r2, [r3, #0]
    pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].bInterval = CUSTOM_HID_HS_BINTERVAL;
 8004be8:	4b36      	ldr	r3, [pc, #216]	@ (8004cc4 <USBD_CUSTOM_HID_Init+0x150>)
 8004bea:	781b      	ldrb	r3, [r3, #0]
 8004bec:	f003 020f 	and.w	r2, r3, #15
 8004bf0:	6879      	ldr	r1, [r7, #4]
 8004bf2:	4613      	mov	r3, r2
 8004bf4:	009b      	lsls	r3, r3, #2
 8004bf6:	4413      	add	r3, r2
 8004bf8:	009b      	lsls	r3, r3, #2
 8004bfa:	440b      	add	r3, r1
 8004bfc:	f503 73b3 	add.w	r3, r3, #358	@ 0x166
 8004c00:	2205      	movs	r2, #5
 8004c02:	801a      	strh	r2, [r3, #0]
 8004c04:	e01a      	b.n	8004c3c <USBD_CUSTOM_HID_Init+0xc8>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].bInterval = CUSTOM_HID_FS_BINTERVAL;
 8004c06:	4b2e      	ldr	r3, [pc, #184]	@ (8004cc0 <USBD_CUSTOM_HID_Init+0x14c>)
 8004c08:	781b      	ldrb	r3, [r3, #0]
 8004c0a:	f003 020f 	and.w	r2, r3, #15
 8004c0e:	6879      	ldr	r1, [r7, #4]
 8004c10:	4613      	mov	r3, r2
 8004c12:	009b      	lsls	r3, r3, #2
 8004c14:	4413      	add	r3, r2
 8004c16:	009b      	lsls	r3, r3, #2
 8004c18:	440b      	add	r3, r1
 8004c1a:	3326      	adds	r3, #38	@ 0x26
 8004c1c:	2205      	movs	r2, #5
 8004c1e:	801a      	strh	r2, [r3, #0]
    pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].bInterval = CUSTOM_HID_FS_BINTERVAL;
 8004c20:	4b28      	ldr	r3, [pc, #160]	@ (8004cc4 <USBD_CUSTOM_HID_Init+0x150>)
 8004c22:	781b      	ldrb	r3, [r3, #0]
 8004c24:	f003 020f 	and.w	r2, r3, #15
 8004c28:	6879      	ldr	r1, [r7, #4]
 8004c2a:	4613      	mov	r3, r2
 8004c2c:	009b      	lsls	r3, r3, #2
 8004c2e:	4413      	add	r3, r2
 8004c30:	009b      	lsls	r3, r3, #2
 8004c32:	440b      	add	r3, r1
 8004c34:	f503 73b3 	add.w	r3, r3, #358	@ 0x166
 8004c38:	2205      	movs	r2, #5
 8004c3a:	801a      	strh	r2, [r3, #0]
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, CUSTOMHIDInEpAdd, USBD_EP_TYPE_INTR,
 8004c3c:	4b20      	ldr	r3, [pc, #128]	@ (8004cc0 <USBD_CUSTOM_HID_Init+0x14c>)
 8004c3e:	7819      	ldrb	r1, [r3, #0]
 8004c40:	2302      	movs	r3, #2
 8004c42:	2203      	movs	r2, #3
 8004c44:	6878      	ldr	r0, [r7, #4]
 8004c46:	f002 f97c 	bl	8006f42 <USBD_LL_OpenEP>
                       CUSTOM_HID_EPIN_SIZE);

  pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].is_used = 1U;
 8004c4a:	4b1d      	ldr	r3, [pc, #116]	@ (8004cc0 <USBD_CUSTOM_HID_Init+0x14c>)
 8004c4c:	781b      	ldrb	r3, [r3, #0]
 8004c4e:	f003 020f 	and.w	r2, r3, #15
 8004c52:	6879      	ldr	r1, [r7, #4]
 8004c54:	4613      	mov	r3, r2
 8004c56:	009b      	lsls	r3, r3, #2
 8004c58:	4413      	add	r3, r2
 8004c5a:	009b      	lsls	r3, r3, #2
 8004c5c:	440b      	add	r3, r1
 8004c5e:	3324      	adds	r3, #36	@ 0x24
 8004c60:	2201      	movs	r2, #1
 8004c62:	801a      	strh	r2, [r3, #0]

  /* Open EP OUT */
  (void)USBD_LL_OpenEP(pdev, CUSTOMHIDOutEpAdd, USBD_EP_TYPE_INTR,
 8004c64:	4b17      	ldr	r3, [pc, #92]	@ (8004cc4 <USBD_CUSTOM_HID_Init+0x150>)
 8004c66:	7819      	ldrb	r1, [r3, #0]
 8004c68:	2302      	movs	r3, #2
 8004c6a:	2203      	movs	r2, #3
 8004c6c:	6878      	ldr	r0, [r7, #4]
 8004c6e:	f002 f968 	bl	8006f42 <USBD_LL_OpenEP>
                       CUSTOM_HID_EPOUT_SIZE);

  pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].is_used = 1U;
 8004c72:	4b14      	ldr	r3, [pc, #80]	@ (8004cc4 <USBD_CUSTOM_HID_Init+0x150>)
 8004c74:	781b      	ldrb	r3, [r3, #0]
 8004c76:	f003 020f 	and.w	r2, r3, #15
 8004c7a:	6879      	ldr	r1, [r7, #4]
 8004c7c:	4613      	mov	r3, r2
 8004c7e:	009b      	lsls	r3, r3, #2
 8004c80:	4413      	add	r3, r2
 8004c82:	009b      	lsls	r3, r3, #2
 8004c84:	440b      	add	r3, r1
 8004c86:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8004c8a:	2201      	movs	r2, #1
 8004c8c:	801a      	strh	r2, [r3, #0]

  hhid->state = CUSTOM_HID_IDLE;
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	2200      	movs	r2, #0
 8004c92:	761a      	strb	r2, [r3, #24]

  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8004c9a:	687a      	ldr	r2, [r7, #4]
 8004c9c:	33b0      	adds	r3, #176	@ 0xb0
 8004c9e:	009b      	lsls	r3, r3, #2
 8004ca0:	4413      	add	r3, r2
 8004ca2:	685b      	ldr	r3, [r3, #4]
 8004ca4:	685b      	ldr	r3, [r3, #4]
 8004ca6:	4798      	blx	r3

#ifndef USBD_CUSTOMHID_OUT_PREPARE_RECEIVE_DISABLED
  /* Prepare Out endpoint to receive 1st packet */
  (void)USBD_LL_PrepareReceive(pdev, CUSTOMHIDOutEpAdd, hhid->Report_buf,
 8004ca8:	4b06      	ldr	r3, [pc, #24]	@ (8004cc4 <USBD_CUSTOM_HID_Init+0x150>)
 8004caa:	7819      	ldrb	r1, [r3, #0]
 8004cac:	68fa      	ldr	r2, [r7, #12]
 8004cae:	2308      	movs	r3, #8
 8004cb0:	6878      	ldr	r0, [r7, #4]
 8004cb2:	f002 fa35 	bl	8007120 <USBD_LL_PrepareReceive>
                               USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);
#endif /* USBD_CUSTOMHID_OUT_PREPARE_RECEIVE_DISABLED */

  return (uint8_t)USBD_OK;
 8004cb6:	2300      	movs	r3, #0
}
 8004cb8:	4618      	mov	r0, r3
 8004cba:	3710      	adds	r7, #16
 8004cbc:	46bd      	mov	sp, r7
 8004cbe:	bd80      	pop	{r7, pc}
 8004cc0:	20000086 	.word	0x20000086
 8004cc4:	20000087 	.word	0x20000087

08004cc8 <USBD_CUSTOM_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004cc8:	b580      	push	{r7, lr}
 8004cca:	b082      	sub	sp, #8
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	6078      	str	r0, [r7, #4]
 8004cd0:	460b      	mov	r3, r1
 8004cd2:	70fb      	strb	r3, [r7, #3]
  CUSTOMHIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
  CUSTOMHIDOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close CUSTOM_HID EP IN */
  (void)USBD_LL_CloseEP(pdev, CUSTOMHIDInEpAdd);
 8004cd4:	4b37      	ldr	r3, [pc, #220]	@ (8004db4 <USBD_CUSTOM_HID_DeInit+0xec>)
 8004cd6:	781b      	ldrb	r3, [r3, #0]
 8004cd8:	4619      	mov	r1, r3
 8004cda:	6878      	ldr	r0, [r7, #4]
 8004cdc:	f002 f957 	bl	8006f8e <USBD_LL_CloseEP>
  pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].is_used = 0U;
 8004ce0:	4b34      	ldr	r3, [pc, #208]	@ (8004db4 <USBD_CUSTOM_HID_DeInit+0xec>)
 8004ce2:	781b      	ldrb	r3, [r3, #0]
 8004ce4:	f003 020f 	and.w	r2, r3, #15
 8004ce8:	6879      	ldr	r1, [r7, #4]
 8004cea:	4613      	mov	r3, r2
 8004cec:	009b      	lsls	r3, r3, #2
 8004cee:	4413      	add	r3, r2
 8004cf0:	009b      	lsls	r3, r3, #2
 8004cf2:	440b      	add	r3, r1
 8004cf4:	3324      	adds	r3, #36	@ 0x24
 8004cf6:	2200      	movs	r2, #0
 8004cf8:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].bInterval = 0U;
 8004cfa:	4b2e      	ldr	r3, [pc, #184]	@ (8004db4 <USBD_CUSTOM_HID_DeInit+0xec>)
 8004cfc:	781b      	ldrb	r3, [r3, #0]
 8004cfe:	f003 020f 	and.w	r2, r3, #15
 8004d02:	6879      	ldr	r1, [r7, #4]
 8004d04:	4613      	mov	r3, r2
 8004d06:	009b      	lsls	r3, r3, #2
 8004d08:	4413      	add	r3, r2
 8004d0a:	009b      	lsls	r3, r3, #2
 8004d0c:	440b      	add	r3, r1
 8004d0e:	3326      	adds	r3, #38	@ 0x26
 8004d10:	2200      	movs	r2, #0
 8004d12:	801a      	strh	r2, [r3, #0]

  /* Close CUSTOM_HID EP OUT */
  (void)USBD_LL_CloseEP(pdev, CUSTOMHIDOutEpAdd);
 8004d14:	4b28      	ldr	r3, [pc, #160]	@ (8004db8 <USBD_CUSTOM_HID_DeInit+0xf0>)
 8004d16:	781b      	ldrb	r3, [r3, #0]
 8004d18:	4619      	mov	r1, r3
 8004d1a:	6878      	ldr	r0, [r7, #4]
 8004d1c:	f002 f937 	bl	8006f8e <USBD_LL_CloseEP>
  pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].is_used = 0U;
 8004d20:	4b25      	ldr	r3, [pc, #148]	@ (8004db8 <USBD_CUSTOM_HID_DeInit+0xf0>)
 8004d22:	781b      	ldrb	r3, [r3, #0]
 8004d24:	f003 020f 	and.w	r2, r3, #15
 8004d28:	6879      	ldr	r1, [r7, #4]
 8004d2a:	4613      	mov	r3, r2
 8004d2c:	009b      	lsls	r3, r3, #2
 8004d2e:	4413      	add	r3, r2
 8004d30:	009b      	lsls	r3, r3, #2
 8004d32:	440b      	add	r3, r1
 8004d34:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8004d38:	2200      	movs	r2, #0
 8004d3a:	801a      	strh	r2, [r3, #0]
  pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].bInterval = 0U;
 8004d3c:	4b1e      	ldr	r3, [pc, #120]	@ (8004db8 <USBD_CUSTOM_HID_DeInit+0xf0>)
 8004d3e:	781b      	ldrb	r3, [r3, #0]
 8004d40:	f003 020f 	and.w	r2, r3, #15
 8004d44:	6879      	ldr	r1, [r7, #4]
 8004d46:	4613      	mov	r3, r2
 8004d48:	009b      	lsls	r3, r3, #2
 8004d4a:	4413      	add	r3, r2
 8004d4c:	009b      	lsls	r3, r3, #2
 8004d4e:	440b      	add	r3, r1
 8004d50:	f503 73b3 	add.w	r3, r3, #358	@ 0x166
 8004d54:	2200      	movs	r2, #0
 8004d56:	801a      	strh	r2, [r3, #0]

  /* Free allocated memory */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	32b0      	adds	r2, #176	@ 0xb0
 8004d62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d01f      	beq.n	8004daa <USBD_CUSTOM_HID_DeInit+0xe2>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8004d70:	687a      	ldr	r2, [r7, #4]
 8004d72:	33b0      	adds	r3, #176	@ 0xb0
 8004d74:	009b      	lsls	r3, r3, #2
 8004d76:	4413      	add	r3, r2
 8004d78:	685b      	ldr	r3, [r3, #4]
 8004d7a:	689b      	ldr	r3, [r3, #8]
 8004d7c:	4798      	blx	r3
    USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	32b0      	adds	r2, #176	@ 0xb0
 8004d88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004d8c:	4618      	mov	r0, r3
 8004d8e:	f002 f9f7 	bl	8007180 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	32b0      	adds	r2, #176	@ 0xb0
 8004d9c:	2100      	movs	r1, #0
 8004d9e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	2200      	movs	r2, #0
 8004da6:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8004daa:	2300      	movs	r3, #0
}
 8004dac:	4618      	mov	r0, r3
 8004dae:	3708      	adds	r7, #8
 8004db0:	46bd      	mov	sp, r7
 8004db2:	bd80      	pop	{r7, pc}
 8004db4:	20000086 	.word	0x20000086
 8004db8:	20000087 	.word	0x20000087

08004dbc <USBD_CUSTOM_HID_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_Setup(USBD_HandleTypeDef *pdev,
                                     USBD_SetupReqTypedef *req)
{
 8004dbc:	b580      	push	{r7, lr}
 8004dbe:	b088      	sub	sp, #32
 8004dc0:	af00      	add	r7, sp, #0
 8004dc2:	6078      	str	r0, [r7, #4]
 8004dc4:	6039      	str	r1, [r7, #0]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	32b0      	adds	r2, #176	@ 0xb0
 8004dd0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004dd4:	613b      	str	r3, [r7, #16]
  uint16_t len = 0U;
 8004dd6:	2300      	movs	r3, #0
 8004dd8:	83fb      	strh	r3, [r7, #30]
#ifdef USBD_CUSTOMHID_CTRL_REQ_GET_REPORT_ENABLED
  uint16_t ReportLength = 0U;
#endif /* USBD_CUSTOMHID_CTRL_REQ_GET_REPORT_ENABLED */
  uint8_t  *pbuf = NULL;
 8004dda:	2300      	movs	r3, #0
 8004ddc:	61bb      	str	r3, [r7, #24]
  uint16_t status_info = 0U;
 8004dde:	2300      	movs	r3, #0
 8004de0:	81fb      	strh	r3, [r7, #14]
  USBD_StatusTypeDef ret = USBD_OK;
 8004de2:	2300      	movs	r3, #0
 8004de4:	75fb      	strb	r3, [r7, #23]

  if (hhid == NULL)
 8004de6:	693b      	ldr	r3, [r7, #16]
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d101      	bne.n	8004df0 <USBD_CUSTOM_HID_Setup+0x34>
  {
    return (uint8_t)USBD_FAIL;
 8004dec:	2303      	movs	r3, #3
 8004dee:	e102      	b.n	8004ff6 <USBD_CUSTOM_HID_Setup+0x23a>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004df0:	683b      	ldr	r3, [r7, #0]
 8004df2:	781b      	ldrb	r3, [r3, #0]
 8004df4:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d056      	beq.n	8004eaa <USBD_CUSTOM_HID_Setup+0xee>
 8004dfc:	2b20      	cmp	r3, #32
 8004dfe:	f040 80f2 	bne.w	8004fe6 <USBD_CUSTOM_HID_Setup+0x22a>
  {
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
 8004e02:	683b      	ldr	r3, [r7, #0]
 8004e04:	785b      	ldrb	r3, [r3, #1]
 8004e06:	3b02      	subs	r3, #2
 8004e08:	2b09      	cmp	r3, #9
 8004e0a:	d846      	bhi.n	8004e9a <USBD_CUSTOM_HID_Setup+0xde>
 8004e0c:	a201      	add	r2, pc, #4	@ (adr r2, 8004e14 <USBD_CUSTOM_HID_Setup+0x58>)
 8004e0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e12:	bf00      	nop
 8004e14:	08004e6d 	.word	0x08004e6d
 8004e18:	08004e4b 	.word	0x08004e4b
 8004e1c:	08004e9b 	.word	0x08004e9b
 8004e20:	08004e9b 	.word	0x08004e9b
 8004e24:	08004e9b 	.word	0x08004e9b
 8004e28:	08004e9b 	.word	0x08004e9b
 8004e2c:	08004e9b 	.word	0x08004e9b
 8004e30:	08004e7d 	.word	0x08004e7d
 8004e34:	08004e5b 	.word	0x08004e5b
 8004e38:	08004e3d 	.word	0x08004e3d
      {
        case CUSTOM_HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 8004e3c:	683b      	ldr	r3, [r7, #0]
 8004e3e:	885b      	ldrh	r3, [r3, #2]
 8004e40:	b2db      	uxtb	r3, r3
 8004e42:	461a      	mov	r2, r3
 8004e44:	693b      	ldr	r3, [r7, #16]
 8004e46:	609a      	str	r2, [r3, #8]
          break;
 8004e48:	e02e      	b.n	8004ea8 <USBD_CUSTOM_HID_Setup+0xec>

        case CUSTOM_HID_REQ_GET_PROTOCOL:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 8004e4a:	693b      	ldr	r3, [r7, #16]
 8004e4c:	3308      	adds	r3, #8
 8004e4e:	2201      	movs	r2, #1
 8004e50:	4619      	mov	r1, r3
 8004e52:	6878      	ldr	r0, [r7, #4]
 8004e54:	f001 fce0 	bl	8006818 <USBD_CtlSendData>
          break;
 8004e58:	e026      	b.n	8004ea8 <USBD_CUSTOM_HID_Setup+0xec>

        case CUSTOM_HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8004e5a:	683b      	ldr	r3, [r7, #0]
 8004e5c:	885b      	ldrh	r3, [r3, #2]
 8004e5e:	0a1b      	lsrs	r3, r3, #8
 8004e60:	b29b      	uxth	r3, r3
 8004e62:	b2db      	uxtb	r3, r3
 8004e64:	461a      	mov	r2, r3
 8004e66:	693b      	ldr	r3, [r7, #16]
 8004e68:	60da      	str	r2, [r3, #12]
          break;
 8004e6a:	e01d      	b.n	8004ea8 <USBD_CUSTOM_HID_Setup+0xec>

        case CUSTOM_HID_REQ_GET_IDLE:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 8004e6c:	693b      	ldr	r3, [r7, #16]
 8004e6e:	330c      	adds	r3, #12
 8004e70:	2201      	movs	r2, #1
 8004e72:	4619      	mov	r1, r3
 8004e74:	6878      	ldr	r0, [r7, #4]
 8004e76:	f001 fccf 	bl	8006818 <USBD_CtlSendData>
          break;
 8004e7a:	e015      	b.n	8004ea8 <USBD_CUSTOM_HID_Setup+0xec>
            ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->CtrlReqComplete(req->bRequest,
                                                                                            req->wLength);
          }
#endif /* USBD_CUSTOMHID_CTRL_REQ_COMPLETE_CALLBACK_ENABLED */
#ifndef USBD_CUSTOMHID_EP0_OUT_PREPARE_RECEIVE_DISABLED
          hhid->IsReportAvailable = 1U;
 8004e7c:	693b      	ldr	r3, [r7, #16]
 8004e7e:	2201      	movs	r2, #1
 8004e80:	615a      	str	r2, [r3, #20]
          (void)USBD_CtlPrepareRx(pdev, hhid->Report_buf,
 8004e82:	6939      	ldr	r1, [r7, #16]
                                  MIN(req->wLength, USBD_CUSTOMHID_OUTREPORT_BUF_SIZE));
 8004e84:	683b      	ldr	r3, [r7, #0]
 8004e86:	88db      	ldrh	r3, [r3, #6]
 8004e88:	2b08      	cmp	r3, #8
 8004e8a:	bf28      	it	cs
 8004e8c:	2308      	movcs	r3, #8
 8004e8e:	b29b      	uxth	r3, r3
          (void)USBD_CtlPrepareRx(pdev, hhid->Report_buf,
 8004e90:	461a      	mov	r2, r3
 8004e92:	6878      	ldr	r0, [r7, #4]
 8004e94:	f001 fcec 	bl	8006870 <USBD_CtlPrepareRx>
#endif /* USBD_CUSTOMHID_EP0_OUT_PREPARE_RECEIVE_DISABLED */
          break;
 8004e98:	e006      	b.n	8004ea8 <USBD_CUSTOM_HID_Setup+0xec>
          }
          break;
#endif /* USBD_CUSTOMHID_CTRL_REQ_GET_REPORT_ENABLED */

        default:
          USBD_CtlError(pdev, req);
 8004e9a:	6839      	ldr	r1, [r7, #0]
 8004e9c:	6878      	ldr	r0, [r7, #4]
 8004e9e:	f001 fc3e 	bl	800671e <USBD_CtlError>
          ret = USBD_FAIL;
 8004ea2:	2303      	movs	r3, #3
 8004ea4:	75fb      	strb	r3, [r7, #23]
          break;
 8004ea6:	bf00      	nop
      }
      break;
 8004ea8:	e0a4      	b.n	8004ff4 <USBD_CUSTOM_HID_Setup+0x238>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8004eaa:	683b      	ldr	r3, [r7, #0]
 8004eac:	785b      	ldrb	r3, [r3, #1]
 8004eae:	2b0b      	cmp	r3, #11
 8004eb0:	f200 8090 	bhi.w	8004fd4 <USBD_CUSTOM_HID_Setup+0x218>
 8004eb4:	a201      	add	r2, pc, #4	@ (adr r2, 8004ebc <USBD_CUSTOM_HID_Setup+0x100>)
 8004eb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004eba:	bf00      	nop
 8004ebc:	08004eed 	.word	0x08004eed
 8004ec0:	08004fe3 	.word	0x08004fe3
 8004ec4:	08004fd5 	.word	0x08004fd5
 8004ec8:	08004fd5 	.word	0x08004fd5
 8004ecc:	08004fd5 	.word	0x08004fd5
 8004ed0:	08004fd5 	.word	0x08004fd5
 8004ed4:	08004f17 	.word	0x08004f17
 8004ed8:	08004fd5 	.word	0x08004fd5
 8004edc:	08004fd5 	.word	0x08004fd5
 8004ee0:	08004fd5 	.word	0x08004fd5
 8004ee4:	08004f83 	.word	0x08004f83
 8004ee8:	08004fad 	.word	0x08004fad
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8004ef2:	b2db      	uxtb	r3, r3
 8004ef4:	2b03      	cmp	r3, #3
 8004ef6:	d107      	bne.n	8004f08 <USBD_CUSTOM_HID_Setup+0x14c>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8004ef8:	f107 030e 	add.w	r3, r7, #14
 8004efc:	2202      	movs	r2, #2
 8004efe:	4619      	mov	r1, r3
 8004f00:	6878      	ldr	r0, [r7, #4]
 8004f02:	f001 fc89 	bl	8006818 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8004f06:	e06d      	b.n	8004fe4 <USBD_CUSTOM_HID_Setup+0x228>
            USBD_CtlError(pdev, req);
 8004f08:	6839      	ldr	r1, [r7, #0]
 8004f0a:	6878      	ldr	r0, [r7, #4]
 8004f0c:	f001 fc07 	bl	800671e <USBD_CtlError>
            ret = USBD_FAIL;
 8004f10:	2303      	movs	r3, #3
 8004f12:	75fb      	strb	r3, [r7, #23]
          break;
 8004f14:	e066      	b.n	8004fe4 <USBD_CUSTOM_HID_Setup+0x228>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == CUSTOM_HID_REPORT_DESC)
 8004f16:	683b      	ldr	r3, [r7, #0]
 8004f18:	885b      	ldrh	r3, [r3, #2]
 8004f1a:	0a1b      	lsrs	r3, r3, #8
 8004f1c:	b29b      	uxth	r3, r3
 8004f1e:	2b22      	cmp	r3, #34	@ 0x22
 8004f20:	d110      	bne.n	8004f44 <USBD_CUSTOM_HID_Setup+0x188>
          {
            len = MIN(USBD_CUSTOM_HID_REPORT_DESC_SIZE, req->wLength);
 8004f22:	683b      	ldr	r3, [r7, #0]
 8004f24:	88db      	ldrh	r3, [r3, #6]
 8004f26:	2b54      	cmp	r3, #84	@ 0x54
 8004f28:	bf28      	it	cs
 8004f2a:	2354      	movcs	r3, #84	@ 0x54
 8004f2c:	83fb      	strh	r3, [r7, #30]
            pbuf = ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->pReport;
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8004f34:	687a      	ldr	r2, [r7, #4]
 8004f36:	33b0      	adds	r3, #176	@ 0xb0
 8004f38:	009b      	lsls	r3, r3, #2
 8004f3a:	4413      	add	r3, r2
 8004f3c:	685b      	ldr	r3, [r3, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	61bb      	str	r3, [r7, #24]
 8004f42:	e00d      	b.n	8004f60 <USBD_CUSTOM_HID_Setup+0x1a4>
          }
          else
          {
            if ((req->wValue >> 8) == CUSTOM_HID_DESCRIPTOR_TYPE)
 8004f44:	683b      	ldr	r3, [r7, #0]
 8004f46:	885b      	ldrh	r3, [r3, #2]
 8004f48:	0a1b      	lsrs	r3, r3, #8
 8004f4a:	b29b      	uxth	r3, r3
 8004f4c:	2b21      	cmp	r3, #33	@ 0x21
 8004f4e:	d107      	bne.n	8004f60 <USBD_CUSTOM_HID_Setup+0x1a4>
            {
              pbuf = USBD_CUSTOM_HID_Desc;
 8004f50:	4b2b      	ldr	r3, [pc, #172]	@ (8005000 <USBD_CUSTOM_HID_Setup+0x244>)
 8004f52:	61bb      	str	r3, [r7, #24]
              len = MIN(USB_CUSTOM_HID_DESC_SIZ, req->wLength);
 8004f54:	683b      	ldr	r3, [r7, #0]
 8004f56:	88db      	ldrh	r3, [r3, #6]
 8004f58:	2b09      	cmp	r3, #9
 8004f5a:	bf28      	it	cs
 8004f5c:	2309      	movcs	r3, #9
 8004f5e:	83fb      	strh	r3, [r7, #30]
            }
          }

          if (pbuf != NULL)
 8004f60:	69bb      	ldr	r3, [r7, #24]
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d006      	beq.n	8004f74 <USBD_CUSTOM_HID_Setup+0x1b8>
          {
            (void)USBD_CtlSendData(pdev, pbuf, len);
 8004f66:	8bfb      	ldrh	r3, [r7, #30]
 8004f68:	461a      	mov	r2, r3
 8004f6a:	69b9      	ldr	r1, [r7, #24]
 8004f6c:	6878      	ldr	r0, [r7, #4]
 8004f6e:	f001 fc53 	bl	8006818 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8004f72:	e037      	b.n	8004fe4 <USBD_CUSTOM_HID_Setup+0x228>
            USBD_CtlError(pdev, req);
 8004f74:	6839      	ldr	r1, [r7, #0]
 8004f76:	6878      	ldr	r0, [r7, #4]
 8004f78:	f001 fbd1 	bl	800671e <USBD_CtlError>
            ret = USBD_FAIL;
 8004f7c:	2303      	movs	r3, #3
 8004f7e:	75fb      	strb	r3, [r7, #23]
          break;
 8004f80:	e030      	b.n	8004fe4 <USBD_CUSTOM_HID_Setup+0x228>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8004f88:	b2db      	uxtb	r3, r3
 8004f8a:	2b03      	cmp	r3, #3
 8004f8c:	d107      	bne.n	8004f9e <USBD_CUSTOM_HID_Setup+0x1e2>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 8004f8e:	693b      	ldr	r3, [r7, #16]
 8004f90:	3310      	adds	r3, #16
 8004f92:	2201      	movs	r2, #1
 8004f94:	4619      	mov	r1, r3
 8004f96:	6878      	ldr	r0, [r7, #4]
 8004f98:	f001 fc3e 	bl	8006818 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8004f9c:	e022      	b.n	8004fe4 <USBD_CUSTOM_HID_Setup+0x228>
            USBD_CtlError(pdev, req);
 8004f9e:	6839      	ldr	r1, [r7, #0]
 8004fa0:	6878      	ldr	r0, [r7, #4]
 8004fa2:	f001 fbbc 	bl	800671e <USBD_CtlError>
            ret = USBD_FAIL;
 8004fa6:	2303      	movs	r3, #3
 8004fa8:	75fb      	strb	r3, [r7, #23]
          break;
 8004faa:	e01b      	b.n	8004fe4 <USBD_CUSTOM_HID_Setup+0x228>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8004fb2:	b2db      	uxtb	r3, r3
 8004fb4:	2b03      	cmp	r3, #3
 8004fb6:	d106      	bne.n	8004fc6 <USBD_CUSTOM_HID_Setup+0x20a>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 8004fb8:	683b      	ldr	r3, [r7, #0]
 8004fba:	885b      	ldrh	r3, [r3, #2]
 8004fbc:	b2db      	uxtb	r3, r3
 8004fbe:	461a      	mov	r2, r3
 8004fc0:	693b      	ldr	r3, [r7, #16]
 8004fc2:	611a      	str	r2, [r3, #16]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8004fc4:	e00e      	b.n	8004fe4 <USBD_CUSTOM_HID_Setup+0x228>
            USBD_CtlError(pdev, req);
 8004fc6:	6839      	ldr	r1, [r7, #0]
 8004fc8:	6878      	ldr	r0, [r7, #4]
 8004fca:	f001 fba8 	bl	800671e <USBD_CtlError>
            ret = USBD_FAIL;
 8004fce:	2303      	movs	r3, #3
 8004fd0:	75fb      	strb	r3, [r7, #23]
          break;
 8004fd2:	e007      	b.n	8004fe4 <USBD_CUSTOM_HID_Setup+0x228>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8004fd4:	6839      	ldr	r1, [r7, #0]
 8004fd6:	6878      	ldr	r0, [r7, #4]
 8004fd8:	f001 fba1 	bl	800671e <USBD_CtlError>
          ret = USBD_FAIL;
 8004fdc:	2303      	movs	r3, #3
 8004fde:	75fb      	strb	r3, [r7, #23]
          break;
 8004fe0:	e000      	b.n	8004fe4 <USBD_CUSTOM_HID_Setup+0x228>
          break;
 8004fe2:	bf00      	nop
      }
      break;
 8004fe4:	e006      	b.n	8004ff4 <USBD_CUSTOM_HID_Setup+0x238>

    default:
      USBD_CtlError(pdev, req);
 8004fe6:	6839      	ldr	r1, [r7, #0]
 8004fe8:	6878      	ldr	r0, [r7, #4]
 8004fea:	f001 fb98 	bl	800671e <USBD_CtlError>
      ret = USBD_FAIL;
 8004fee:	2303      	movs	r3, #3
 8004ff0:	75fb      	strb	r3, [r7, #23]
      break;
 8004ff2:	bf00      	nop
  }
  return (uint8_t)ret;
 8004ff4:	7dfb      	ldrb	r3, [r7, #23]
}
 8004ff6:	4618      	mov	r0, r3
 8004ff8:	3720      	adds	r7, #32
 8004ffa:	46bd      	mov	sp, r7
 8004ffc:	bd80      	pop	{r7, pc}
 8004ffe:	bf00      	nop
 8005000:	20000070 	.word	0x20000070

08005004 <USBD_CUSTOM_HID_SendReport>:
{
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CUSTOM_HID_SendReport(USBD_HandleTypeDef *pdev,
                                   uint8_t *report, uint16_t len)
{
 8005004:	b580      	push	{r7, lr}
 8005006:	b086      	sub	sp, #24
 8005008:	af00      	add	r7, sp, #0
 800500a:	60f8      	str	r0, [r7, #12]
 800500c:	60b9      	str	r1, [r7, #8]
 800500e:	4613      	mov	r3, r2
 8005010:	80fb      	strh	r3, [r7, #6]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	32b0      	adds	r2, #176	@ 0xb0
 800501c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005020:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hhid == NULL)
 8005022:	697b      	ldr	r3, [r7, #20]
 8005024:	2b00      	cmp	r3, #0
 8005026:	d101      	bne.n	800502c <USBD_CUSTOM_HID_SendReport+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8005028:	2303      	movs	r3, #3
 800502a:	e017      	b.n	800505c <USBD_CUSTOM_HID_SendReport+0x58>
#ifdef USE_USBD_COMPOSITE
  /* Get Endpoint IN address allocated for this class instance */
  CUSTOMHIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, ClassId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005032:	b2db      	uxtb	r3, r3
 8005034:	2b03      	cmp	r3, #3
 8005036:	d110      	bne.n	800505a <USBD_CUSTOM_HID_SendReport+0x56>
  {
    if (hhid->state == CUSTOM_HID_IDLE)
 8005038:	697b      	ldr	r3, [r7, #20]
 800503a:	7e1b      	ldrb	r3, [r3, #24]
 800503c:	2b00      	cmp	r3, #0
 800503e:	d10a      	bne.n	8005056 <USBD_CUSTOM_HID_SendReport+0x52>
    {
      hhid->state = CUSTOM_HID_BUSY;
 8005040:	697b      	ldr	r3, [r7, #20]
 8005042:	2201      	movs	r2, #1
 8005044:	761a      	strb	r2, [r3, #24]
      (void)USBD_LL_Transmit(pdev, CUSTOMHIDInEpAdd, report, len);
 8005046:	4b07      	ldr	r3, [pc, #28]	@ (8005064 <USBD_CUSTOM_HID_SendReport+0x60>)
 8005048:	7819      	ldrb	r1, [r3, #0]
 800504a:	88fb      	ldrh	r3, [r7, #6]
 800504c:	68ba      	ldr	r2, [r7, #8]
 800504e:	68f8      	ldr	r0, [r7, #12]
 8005050:	f002 f845 	bl	80070de <USBD_LL_Transmit>
 8005054:	e001      	b.n	800505a <USBD_CUSTOM_HID_SendReport+0x56>
    }
    else
    {
      return (uint8_t)USBD_BUSY;
 8005056:	2301      	movs	r3, #1
 8005058:	e000      	b.n	800505c <USBD_CUSTOM_HID_SendReport+0x58>
    }
  }
  return (uint8_t)USBD_OK;
 800505a:	2300      	movs	r3, #0
}
 800505c:	4618      	mov	r0, r3
 800505e:	3718      	adds	r7, #24
 8005060:	46bd      	mov	sp, r7
 8005062:	bd80      	pop	{r7, pc}
 8005064:	20000086 	.word	0x20000086

08005068 <USBD_CUSTOM_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetFSCfgDesc(uint16_t *length)
{
 8005068:	b580      	push	{r7, lr}
 800506a:	b084      	sub	sp, #16
 800506c:	af00      	add	r7, sp, #0
 800506e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPIN_ADDR);
 8005070:	2181      	movs	r1, #129	@ 0x81
 8005072:	4815      	ldr	r0, [pc, #84]	@ (80050c8 <USBD_CUSTOM_HID_GetFSCfgDesc+0x60>)
 8005074:	f000 fd1d 	bl	8005ab2 <USBD_GetEpDesc>
 8005078:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPOUT_ADDR);
 800507a:	2101      	movs	r1, #1
 800507c:	4812      	ldr	r0, [pc, #72]	@ (80050c8 <USBD_CUSTOM_HID_GetFSCfgDesc+0x60>)
 800507e:	f000 fd18 	bl	8005ab2 <USBD_GetEpDesc>
 8005082:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	2b00      	cmp	r3, #0
 8005088:	d009      	beq.n	800509e <USBD_CUSTOM_HID_GetFSCfgDesc+0x36>
  {
    pEpInDesc->wMaxPacketSize = CUSTOM_HID_EPIN_SIZE;
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	2200      	movs	r2, #0
 800508e:	f042 0202 	orr.w	r2, r2, #2
 8005092:	711a      	strb	r2, [r3, #4]
 8005094:	2200      	movs	r2, #0
 8005096:	715a      	strb	r2, [r3, #5]
    pEpInDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	2205      	movs	r2, #5
 800509c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800509e:	68bb      	ldr	r3, [r7, #8]
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d009      	beq.n	80050b8 <USBD_CUSTOM_HID_GetFSCfgDesc+0x50>
  {
    pEpOutDesc->wMaxPacketSize = CUSTOM_HID_EPOUT_SIZE;
 80050a4:	68bb      	ldr	r3, [r7, #8]
 80050a6:	2200      	movs	r2, #0
 80050a8:	f042 0202 	orr.w	r2, r2, #2
 80050ac:	711a      	strb	r2, [r3, #4]
 80050ae:	2200      	movs	r2, #0
 80050b0:	715a      	strb	r2, [r3, #5]
    pEpOutDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
 80050b2:	68bb      	ldr	r3, [r7, #8]
 80050b4:	2205      	movs	r2, #5
 80050b6:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgDesc);
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	2229      	movs	r2, #41	@ 0x29
 80050bc:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgDesc;
 80050be:	4b02      	ldr	r3, [pc, #8]	@ (80050c8 <USBD_CUSTOM_HID_GetFSCfgDesc+0x60>)
}
 80050c0:	4618      	mov	r0, r3
 80050c2:	3710      	adds	r7, #16
 80050c4:	46bd      	mov	sp, r7
 80050c6:	bd80      	pop	{r7, pc}
 80050c8:	20000044 	.word	0x20000044

080050cc <USBD_CUSTOM_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetHSCfgDesc(uint16_t *length)
{
 80050cc:	b580      	push	{r7, lr}
 80050ce:	b084      	sub	sp, #16
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPIN_ADDR);
 80050d4:	2181      	movs	r1, #129	@ 0x81
 80050d6:	4815      	ldr	r0, [pc, #84]	@ (800512c <USBD_CUSTOM_HID_GetHSCfgDesc+0x60>)
 80050d8:	f000 fceb 	bl	8005ab2 <USBD_GetEpDesc>
 80050dc:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPOUT_ADDR);
 80050de:	2101      	movs	r1, #1
 80050e0:	4812      	ldr	r0, [pc, #72]	@ (800512c <USBD_CUSTOM_HID_GetHSCfgDesc+0x60>)
 80050e2:	f000 fce6 	bl	8005ab2 <USBD_GetEpDesc>
 80050e6:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d009      	beq.n	8005102 <USBD_CUSTOM_HID_GetHSCfgDesc+0x36>
  {
    pEpInDesc->wMaxPacketSize = CUSTOM_HID_EPIN_SIZE;
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	2200      	movs	r2, #0
 80050f2:	f042 0202 	orr.w	r2, r2, #2
 80050f6:	711a      	strb	r2, [r3, #4]
 80050f8:	2200      	movs	r2, #0
 80050fa:	715a      	strb	r2, [r3, #5]
    pEpInDesc->bInterval = CUSTOM_HID_HS_BINTERVAL;
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	2205      	movs	r2, #5
 8005100:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8005102:	68bb      	ldr	r3, [r7, #8]
 8005104:	2b00      	cmp	r3, #0
 8005106:	d009      	beq.n	800511c <USBD_CUSTOM_HID_GetHSCfgDesc+0x50>
  {
    pEpOutDesc->wMaxPacketSize = CUSTOM_HID_EPOUT_SIZE;
 8005108:	68bb      	ldr	r3, [r7, #8]
 800510a:	2200      	movs	r2, #0
 800510c:	f042 0202 	orr.w	r2, r2, #2
 8005110:	711a      	strb	r2, [r3, #4]
 8005112:	2200      	movs	r2, #0
 8005114:	715a      	strb	r2, [r3, #5]
    pEpOutDesc->bInterval = CUSTOM_HID_HS_BINTERVAL;
 8005116:	68bb      	ldr	r3, [r7, #8]
 8005118:	2205      	movs	r2, #5
 800511a:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgDesc);
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	2229      	movs	r2, #41	@ 0x29
 8005120:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgDesc;
 8005122:	4b02      	ldr	r3, [pc, #8]	@ (800512c <USBD_CUSTOM_HID_GetHSCfgDesc+0x60>)
}
 8005124:	4618      	mov	r0, r3
 8005126:	3710      	adds	r7, #16
 8005128:	46bd      	mov	sp, r7
 800512a:	bd80      	pop	{r7, pc}
 800512c:	20000044 	.word	0x20000044

08005130 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8005130:	b580      	push	{r7, lr}
 8005132:	b084      	sub	sp, #16
 8005134:	af00      	add	r7, sp, #0
 8005136:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPIN_ADDR);
 8005138:	2181      	movs	r1, #129	@ 0x81
 800513a:	4815      	ldr	r0, [pc, #84]	@ (8005190 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x60>)
 800513c:	f000 fcb9 	bl	8005ab2 <USBD_GetEpDesc>
 8005140:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPOUT_ADDR);
 8005142:	2101      	movs	r1, #1
 8005144:	4812      	ldr	r0, [pc, #72]	@ (8005190 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x60>)
 8005146:	f000 fcb4 	bl	8005ab2 <USBD_GetEpDesc>
 800514a:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	2b00      	cmp	r3, #0
 8005150:	d009      	beq.n	8005166 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x36>
  {
    pEpInDesc->wMaxPacketSize = CUSTOM_HID_EPIN_SIZE;
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	2200      	movs	r2, #0
 8005156:	f042 0202 	orr.w	r2, r2, #2
 800515a:	711a      	strb	r2, [r3, #4]
 800515c:	2200      	movs	r2, #0
 800515e:	715a      	strb	r2, [r3, #5]
    pEpInDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	2205      	movs	r2, #5
 8005164:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8005166:	68bb      	ldr	r3, [r7, #8]
 8005168:	2b00      	cmp	r3, #0
 800516a:	d009      	beq.n	8005180 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x50>
  {
    pEpOutDesc->wMaxPacketSize = CUSTOM_HID_EPOUT_SIZE;
 800516c:	68bb      	ldr	r3, [r7, #8]
 800516e:	2200      	movs	r2, #0
 8005170:	f042 0202 	orr.w	r2, r2, #2
 8005174:	711a      	strb	r2, [r3, #4]
 8005176:	2200      	movs	r2, #0
 8005178:	715a      	strb	r2, [r3, #5]
    pEpOutDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
 800517a:	68bb      	ldr	r3, [r7, #8]
 800517c:	2205      	movs	r2, #5
 800517e:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgDesc);
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	2229      	movs	r2, #41	@ 0x29
 8005184:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgDesc;
 8005186:	4b02      	ldr	r3, [pc, #8]	@ (8005190 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x60>)
}
 8005188:	4618      	mov	r0, r3
 800518a:	3710      	adds	r7, #16
 800518c:	46bd      	mov	sp, r7
 800518e:	bd80      	pop	{r7, pc}
 8005190:	20000044 	.word	0x20000044

08005194 <USBD_CUSTOM_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005194:	b480      	push	{r7}
 8005196:	b083      	sub	sp, #12
 8005198:	af00      	add	r7, sp, #0
 800519a:	6078      	str	r0, [r7, #4]
 800519c:	460b      	mov	r3, r1
 800519e:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId])->state = CUSTOM_HID_IDLE;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	32b0      	adds	r2, #176	@ 0xb0
 80051aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80051ae:	2200      	movs	r2, #0
 80051b0:	761a      	strb	r2, [r3, #24]

  return (uint8_t)USBD_OK;
 80051b2:	2300      	movs	r3, #0
}
 80051b4:	4618      	mov	r0, r3
 80051b6:	370c      	adds	r7, #12
 80051b8:	46bd      	mov	sp, r7
 80051ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051be:	4770      	bx	lr

080051c0 <USBD_CUSTOM_HID_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80051c0:	b580      	push	{r7, lr}
 80051c2:	b084      	sub	sp, #16
 80051c4:	af00      	add	r7, sp, #0
 80051c6:	6078      	str	r0, [r7, #4]
 80051c8:	460b      	mov	r3, r1
 80051ca:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	32b0      	adds	r2, #176	@ 0xb0
 80051d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d101      	bne.n	80051e2 <USBD_CUSTOM_HID_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80051de:	2303      	movs	r3, #3
 80051e0:	e017      	b.n	8005212 <USBD_CUSTOM_HID_DataOut+0x52>
  }

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	32b0      	adds	r2, #176	@ 0xb0
 80051ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80051f0:	60fb      	str	r3, [r7, #12]

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application processing */
  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->OutEvent(hhid->Report_buf[0],
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80051f8:	687a      	ldr	r2, [r7, #4]
 80051fa:	33b0      	adds	r3, #176	@ 0xb0
 80051fc:	009b      	lsls	r3, r3, #2
 80051fe:	4413      	add	r3, r2
 8005200:	685b      	ldr	r3, [r3, #4]
 8005202:	68db      	ldr	r3, [r3, #12]
 8005204:	68fa      	ldr	r2, [r7, #12]
 8005206:	7810      	ldrb	r0, [r2, #0]
 8005208:	68fa      	ldr	r2, [r7, #12]
 800520a:	7852      	ldrb	r2, [r2, #1]
 800520c:	4611      	mov	r1, r2
 800520e:	4798      	blx	r3
                                                                           hhid->Report_buf[1]);

  return (uint8_t)USBD_OK;
 8005210:	2300      	movs	r3, #0
}
 8005212:	4618      	mov	r0, r3
 8005214:	3710      	adds	r7, #16
 8005216:	46bd      	mov	sp, r7
 8005218:	bd80      	pop	{r7, pc}
	...

0800521c <USBD_CUSTOM_HID_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800521c:	b580      	push	{r7, lr}
 800521e:	b084      	sub	sp, #16
 8005220:	af00      	add	r7, sp, #0
 8005222:	6078      	str	r0, [r7, #4]
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	32b0      	adds	r2, #176	@ 0xb0
 800522e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005232:	2b00      	cmp	r3, #0
 8005234:	d101      	bne.n	800523a <USBD_CUSTOM_HID_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8005236:	2303      	movs	r3, #3
 8005238:	e00f      	b.n	800525a <USBD_CUSTOM_HID_ReceivePacket+0x3e>
#ifdef USE_USBD_COMPOSITE
  /* Get OUT Endpoint address allocated for this class instance */
  CUSTOMHIDOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	32b0      	adds	r2, #176	@ 0xb0
 8005244:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005248:	60fb      	str	r3, [r7, #12]

  /* Resume USB Out process */
  (void)USBD_LL_PrepareReceive(pdev, CUSTOMHIDOutEpAdd, hhid->Report_buf,
 800524a:	4b06      	ldr	r3, [pc, #24]	@ (8005264 <USBD_CUSTOM_HID_ReceivePacket+0x48>)
 800524c:	7819      	ldrb	r1, [r3, #0]
 800524e:	68fa      	ldr	r2, [r7, #12]
 8005250:	2308      	movs	r3, #8
 8005252:	6878      	ldr	r0, [r7, #4]
 8005254:	f001 ff64 	bl	8007120 <USBD_LL_PrepareReceive>
                               USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);

  return (uint8_t)USBD_OK;
 8005258:	2300      	movs	r3, #0
}
 800525a:	4618      	mov	r0, r3
 800525c:	3710      	adds	r7, #16
 800525e:	46bd      	mov	sp, r7
 8005260:	bd80      	pop	{r7, pc}
 8005262:	bf00      	nop
 8005264:	20000087 	.word	0x20000087

08005268 <USBD_CUSTOM_HID_EP0_RxReady>:
  *         Handles control request data.
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8005268:	b580      	push	{r7, lr}
 800526a:	b084      	sub	sp, #16
 800526c:	af00      	add	r7, sp, #0
 800526e:	6078      	str	r0, [r7, #4]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	32b0      	adds	r2, #176	@ 0xb0
 800527a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800527e:	60fb      	str	r3, [r7, #12]

  if (hhid == NULL)
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	2b00      	cmp	r3, #0
 8005284:	d101      	bne.n	800528a <USBD_CUSTOM_HID_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8005286:	2303      	movs	r3, #3
 8005288:	e016      	b.n	80052b8 <USBD_CUSTOM_HID_EP0_RxReady+0x50>
  }

  if (hhid->IsReportAvailable == 1U)
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	695b      	ldr	r3, [r3, #20]
 800528e:	2b01      	cmp	r3, #1
 8005290:	d111      	bne.n	80052b6 <USBD_CUSTOM_HID_EP0_RxReady+0x4e>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->OutEvent(hhid->Report_buf[0],
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005298:	687a      	ldr	r2, [r7, #4]
 800529a:	33b0      	adds	r3, #176	@ 0xb0
 800529c:	009b      	lsls	r3, r3, #2
 800529e:	4413      	add	r3, r2
 80052a0:	685b      	ldr	r3, [r3, #4]
 80052a2:	68db      	ldr	r3, [r3, #12]
 80052a4:	68fa      	ldr	r2, [r7, #12]
 80052a6:	7810      	ldrb	r0, [r2, #0]
 80052a8:	68fa      	ldr	r2, [r7, #12]
 80052aa:	7852      	ldrb	r2, [r2, #1]
 80052ac:	4611      	mov	r1, r2
 80052ae:	4798      	blx	r3
                                                                             hhid->Report_buf[1]);
    hhid->IsReportAvailable = 0U;
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	2200      	movs	r2, #0
 80052b4:	615a      	str	r2, [r3, #20]
  }

  return (uint8_t)USBD_OK;
 80052b6:	2300      	movs	r3, #0
}
 80052b8:	4618      	mov	r0, r3
 80052ba:	3710      	adds	r7, #16
 80052bc:	46bd      	mov	sp, r7
 80052be:	bd80      	pop	{r7, pc}

080052c0 <USBD_CUSTOM_HID_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 80052c0:	b480      	push	{r7}
 80052c2:	b083      	sub	sp, #12
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_DeviceQualifierDesc);
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	220a      	movs	r2, #10
 80052cc:	801a      	strh	r2, [r3, #0]

  return USBD_CUSTOM_HID_DeviceQualifierDesc;
 80052ce:	4b03      	ldr	r3, [pc, #12]	@ (80052dc <USBD_CUSTOM_HID_GetDeviceQualifierDesc+0x1c>)
}
 80052d0:	4618      	mov	r0, r3
 80052d2:	370c      	adds	r7, #12
 80052d4:	46bd      	mov	sp, r7
 80052d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052da:	4770      	bx	lr
 80052dc:	2000007c 	.word	0x2000007c

080052e0 <USBD_CUSTOM_HID_RegisterInterface>:
  * @param  fops: CUSTOMHID Interface callback
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_RegisterInterface(USBD_HandleTypeDef *pdev,
                                          USBD_CUSTOM_HID_ItfTypeDef *fops)
{
 80052e0:	b480      	push	{r7}
 80052e2:	b083      	sub	sp, #12
 80052e4:	af00      	add	r7, sp, #0
 80052e6:	6078      	str	r0, [r7, #4]
 80052e8:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80052ea:	683b      	ldr	r3, [r7, #0]
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d101      	bne.n	80052f4 <USBD_CUSTOM_HID_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80052f0:	2303      	movs	r3, #3
 80052f2:	e009      	b.n	8005308 <USBD_CUSTOM_HID_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80052fa:	687a      	ldr	r2, [r7, #4]
 80052fc:	33b0      	adds	r3, #176	@ 0xb0
 80052fe:	009b      	lsls	r3, r3, #2
 8005300:	4413      	add	r3, r2
 8005302:	683a      	ldr	r2, [r7, #0]
 8005304:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8005306:	2300      	movs	r3, #0
}
 8005308:	4618      	mov	r0, r3
 800530a:	370c      	adds	r7, #12
 800530c:	46bd      	mov	sp, r7
 800530e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005312:	4770      	bx	lr

08005314 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8005314:	b580      	push	{r7, lr}
 8005316:	b086      	sub	sp, #24
 8005318:	af00      	add	r7, sp, #0
 800531a:	60f8      	str	r0, [r7, #12]
 800531c:	60b9      	str	r1, [r7, #8]
 800531e:	4613      	mov	r3, r2
 8005320:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	2b00      	cmp	r3, #0
 8005326:	d101      	bne.n	800532c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8005328:	2303      	movs	r3, #3
 800532a:	e01f      	b.n	800536c <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	2200      	movs	r2, #0
 8005330:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	2200      	movs	r2, #0
 8005338:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	2200      	movs	r2, #0
 8005340:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8005344:	68bb      	ldr	r3, [r7, #8]
 8005346:	2b00      	cmp	r3, #0
 8005348:	d003      	beq.n	8005352 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	68ba      	ldr	r2, [r7, #8]
 800534e:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	2201      	movs	r2, #1
 8005356:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	79fa      	ldrb	r2, [r7, #7]
 800535e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8005360:	68f8      	ldr	r0, [r7, #12]
 8005362:	f001 fd87 	bl	8006e74 <USBD_LL_Init>
 8005366:	4603      	mov	r3, r0
 8005368:	75fb      	strb	r3, [r7, #23]

  return ret;
 800536a:	7dfb      	ldrb	r3, [r7, #23]
}
 800536c:	4618      	mov	r0, r3
 800536e:	3718      	adds	r7, #24
 8005370:	46bd      	mov	sp, r7
 8005372:	bd80      	pop	{r7, pc}

08005374 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8005374:	b580      	push	{r7, lr}
 8005376:	b084      	sub	sp, #16
 8005378:	af00      	add	r7, sp, #0
 800537a:	6078      	str	r0, [r7, #4]
 800537c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800537e:	2300      	movs	r3, #0
 8005380:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8005382:	683b      	ldr	r3, [r7, #0]
 8005384:	2b00      	cmp	r3, #0
 8005386:	d101      	bne.n	800538c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8005388:	2303      	movs	r3, #3
 800538a:	e025      	b.n	80053d8 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	683a      	ldr	r2, [r7, #0]
 8005390:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	32ae      	adds	r2, #174	@ 0xae
 800539e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80053a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d00f      	beq.n	80053c8 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	32ae      	adds	r2, #174	@ 0xae
 80053b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80053b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053b8:	f107 020e 	add.w	r2, r7, #14
 80053bc:	4610      	mov	r0, r2
 80053be:	4798      	blx	r3
 80053c0:	4602      	mov	r2, r0
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 80053ce:	1c5a      	adds	r2, r3, #1
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 80053d6:	2300      	movs	r3, #0
}
 80053d8:	4618      	mov	r0, r3
 80053da:	3710      	adds	r7, #16
 80053dc:	46bd      	mov	sp, r7
 80053de:	bd80      	pop	{r7, pc}

080053e0 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80053e0:	b580      	push	{r7, lr}
 80053e2:	b082      	sub	sp, #8
 80053e4:	af00      	add	r7, sp, #0
 80053e6:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80053e8:	6878      	ldr	r0, [r7, #4]
 80053ea:	f001 fd8f 	bl	8006f0c <USBD_LL_Start>
 80053ee:	4603      	mov	r3, r0
}
 80053f0:	4618      	mov	r0, r3
 80053f2:	3708      	adds	r7, #8
 80053f4:	46bd      	mov	sp, r7
 80053f6:	bd80      	pop	{r7, pc}

080053f8 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 80053f8:	b480      	push	{r7}
 80053fa:	b083      	sub	sp, #12
 80053fc:	af00      	add	r7, sp, #0
 80053fe:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005400:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8005402:	4618      	mov	r0, r3
 8005404:	370c      	adds	r7, #12
 8005406:	46bd      	mov	sp, r7
 8005408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800540c:	4770      	bx	lr

0800540e <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800540e:	b580      	push	{r7, lr}
 8005410:	b084      	sub	sp, #16
 8005412:	af00      	add	r7, sp, #0
 8005414:	6078      	str	r0, [r7, #4]
 8005416:	460b      	mov	r3, r1
 8005418:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800541a:	2300      	movs	r3, #0
 800541c:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005424:	2b00      	cmp	r3, #0
 8005426:	d009      	beq.n	800543c <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	78fa      	ldrb	r2, [r7, #3]
 8005432:	4611      	mov	r1, r2
 8005434:	6878      	ldr	r0, [r7, #4]
 8005436:	4798      	blx	r3
 8005438:	4603      	mov	r3, r0
 800543a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800543c:	7bfb      	ldrb	r3, [r7, #15]
}
 800543e:	4618      	mov	r0, r3
 8005440:	3710      	adds	r7, #16
 8005442:	46bd      	mov	sp, r7
 8005444:	bd80      	pop	{r7, pc}

08005446 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005446:	b580      	push	{r7, lr}
 8005448:	b084      	sub	sp, #16
 800544a:	af00      	add	r7, sp, #0
 800544c:	6078      	str	r0, [r7, #4]
 800544e:	460b      	mov	r3, r1
 8005450:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8005452:	2300      	movs	r3, #0
 8005454:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800545c:	685b      	ldr	r3, [r3, #4]
 800545e:	78fa      	ldrb	r2, [r7, #3]
 8005460:	4611      	mov	r1, r2
 8005462:	6878      	ldr	r0, [r7, #4]
 8005464:	4798      	blx	r3
 8005466:	4603      	mov	r3, r0
 8005468:	2b00      	cmp	r3, #0
 800546a:	d001      	beq.n	8005470 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800546c:	2303      	movs	r3, #3
 800546e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005470:	7bfb      	ldrb	r3, [r7, #15]
}
 8005472:	4618      	mov	r0, r3
 8005474:	3710      	adds	r7, #16
 8005476:	46bd      	mov	sp, r7
 8005478:	bd80      	pop	{r7, pc}

0800547a <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800547a:	b580      	push	{r7, lr}
 800547c:	b084      	sub	sp, #16
 800547e:	af00      	add	r7, sp, #0
 8005480:	6078      	str	r0, [r7, #4]
 8005482:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800548a:	6839      	ldr	r1, [r7, #0]
 800548c:	4618      	mov	r0, r3
 800548e:	f001 f90c 	bl	80066aa <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	2201      	movs	r2, #1
 8005496:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 80054a0:	461a      	mov	r2, r3
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80054ae:	f003 031f 	and.w	r3, r3, #31
 80054b2:	2b02      	cmp	r3, #2
 80054b4:	d01a      	beq.n	80054ec <USBD_LL_SetupStage+0x72>
 80054b6:	2b02      	cmp	r3, #2
 80054b8:	d822      	bhi.n	8005500 <USBD_LL_SetupStage+0x86>
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d002      	beq.n	80054c4 <USBD_LL_SetupStage+0x4a>
 80054be:	2b01      	cmp	r3, #1
 80054c0:	d00a      	beq.n	80054d8 <USBD_LL_SetupStage+0x5e>
 80054c2:	e01d      	b.n	8005500 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80054ca:	4619      	mov	r1, r3
 80054cc:	6878      	ldr	r0, [r7, #4]
 80054ce:	f000 fb63 	bl	8005b98 <USBD_StdDevReq>
 80054d2:	4603      	mov	r3, r0
 80054d4:	73fb      	strb	r3, [r7, #15]
      break;
 80054d6:	e020      	b.n	800551a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80054de:	4619      	mov	r1, r3
 80054e0:	6878      	ldr	r0, [r7, #4]
 80054e2:	f000 fbcb 	bl	8005c7c <USBD_StdItfReq>
 80054e6:	4603      	mov	r3, r0
 80054e8:	73fb      	strb	r3, [r7, #15]
      break;
 80054ea:	e016      	b.n	800551a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80054f2:	4619      	mov	r1, r3
 80054f4:	6878      	ldr	r0, [r7, #4]
 80054f6:	f000 fc2d 	bl	8005d54 <USBD_StdEPReq>
 80054fa:	4603      	mov	r3, r0
 80054fc:	73fb      	strb	r3, [r7, #15]
      break;
 80054fe:	e00c      	b.n	800551a <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8005506:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800550a:	b2db      	uxtb	r3, r3
 800550c:	4619      	mov	r1, r3
 800550e:	6878      	ldr	r0, [r7, #4]
 8005510:	f001 fd5c 	bl	8006fcc <USBD_LL_StallEP>
 8005514:	4603      	mov	r3, r0
 8005516:	73fb      	strb	r3, [r7, #15]
      break;
 8005518:	bf00      	nop
  }

  return ret;
 800551a:	7bfb      	ldrb	r3, [r7, #15]
}
 800551c:	4618      	mov	r0, r3
 800551e:	3710      	adds	r7, #16
 8005520:	46bd      	mov	sp, r7
 8005522:	bd80      	pop	{r7, pc}

08005524 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8005524:	b580      	push	{r7, lr}
 8005526:	b086      	sub	sp, #24
 8005528:	af00      	add	r7, sp, #0
 800552a:	60f8      	str	r0, [r7, #12]
 800552c:	460b      	mov	r3, r1
 800552e:	607a      	str	r2, [r7, #4]
 8005530:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8005532:	2300      	movs	r3, #0
 8005534:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8005536:	7afb      	ldrb	r3, [r7, #11]
 8005538:	2b00      	cmp	r3, #0
 800553a:	d16e      	bne.n	800561a <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8005542:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800554a:	2b03      	cmp	r3, #3
 800554c:	f040 8098 	bne.w	8005680 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8005550:	693b      	ldr	r3, [r7, #16]
 8005552:	689a      	ldr	r2, [r3, #8]
 8005554:	693b      	ldr	r3, [r7, #16]
 8005556:	68db      	ldr	r3, [r3, #12]
 8005558:	429a      	cmp	r2, r3
 800555a:	d913      	bls.n	8005584 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800555c:	693b      	ldr	r3, [r7, #16]
 800555e:	689a      	ldr	r2, [r3, #8]
 8005560:	693b      	ldr	r3, [r7, #16]
 8005562:	68db      	ldr	r3, [r3, #12]
 8005564:	1ad2      	subs	r2, r2, r3
 8005566:	693b      	ldr	r3, [r7, #16]
 8005568:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800556a:	693b      	ldr	r3, [r7, #16]
 800556c:	68da      	ldr	r2, [r3, #12]
 800556e:	693b      	ldr	r3, [r7, #16]
 8005570:	689b      	ldr	r3, [r3, #8]
 8005572:	4293      	cmp	r3, r2
 8005574:	bf28      	it	cs
 8005576:	4613      	movcs	r3, r2
 8005578:	461a      	mov	r2, r3
 800557a:	6879      	ldr	r1, [r7, #4]
 800557c:	68f8      	ldr	r0, [r7, #12]
 800557e:	f001 f994 	bl	80068aa <USBD_CtlContinueRx>
 8005582:	e07d      	b.n	8005680 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800558a:	f003 031f 	and.w	r3, r3, #31
 800558e:	2b02      	cmp	r3, #2
 8005590:	d014      	beq.n	80055bc <USBD_LL_DataOutStage+0x98>
 8005592:	2b02      	cmp	r3, #2
 8005594:	d81d      	bhi.n	80055d2 <USBD_LL_DataOutStage+0xae>
 8005596:	2b00      	cmp	r3, #0
 8005598:	d002      	beq.n	80055a0 <USBD_LL_DataOutStage+0x7c>
 800559a:	2b01      	cmp	r3, #1
 800559c:	d003      	beq.n	80055a6 <USBD_LL_DataOutStage+0x82>
 800559e:	e018      	b.n	80055d2 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 80055a0:	2300      	movs	r3, #0
 80055a2:	75bb      	strb	r3, [r7, #22]
            break;
 80055a4:	e018      	b.n	80055d8 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 80055ac:	b2db      	uxtb	r3, r3
 80055ae:	4619      	mov	r1, r3
 80055b0:	68f8      	ldr	r0, [r7, #12]
 80055b2:	f000 fa64 	bl	8005a7e <USBD_CoreFindIF>
 80055b6:	4603      	mov	r3, r0
 80055b8:	75bb      	strb	r3, [r7, #22]
            break;
 80055ba:	e00d      	b.n	80055d8 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 80055c2:	b2db      	uxtb	r3, r3
 80055c4:	4619      	mov	r1, r3
 80055c6:	68f8      	ldr	r0, [r7, #12]
 80055c8:	f000 fa66 	bl	8005a98 <USBD_CoreFindEP>
 80055cc:	4603      	mov	r3, r0
 80055ce:	75bb      	strb	r3, [r7, #22]
            break;
 80055d0:	e002      	b.n	80055d8 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 80055d2:	2300      	movs	r3, #0
 80055d4:	75bb      	strb	r3, [r7, #22]
            break;
 80055d6:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 80055d8:	7dbb      	ldrb	r3, [r7, #22]
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d119      	bne.n	8005612 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80055e4:	b2db      	uxtb	r3, r3
 80055e6:	2b03      	cmp	r3, #3
 80055e8:	d113      	bne.n	8005612 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 80055ea:	7dba      	ldrb	r2, [r7, #22]
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	32ae      	adds	r2, #174	@ 0xae
 80055f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80055f4:	691b      	ldr	r3, [r3, #16]
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d00b      	beq.n	8005612 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 80055fa:	7dba      	ldrb	r2, [r7, #22]
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8005602:	7dba      	ldrb	r2, [r7, #22]
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	32ae      	adds	r2, #174	@ 0xae
 8005608:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800560c:	691b      	ldr	r3, [r3, #16]
 800560e:	68f8      	ldr	r0, [r7, #12]
 8005610:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8005612:	68f8      	ldr	r0, [r7, #12]
 8005614:	f001 f95a 	bl	80068cc <USBD_CtlSendStatus>
 8005618:	e032      	b.n	8005680 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800561a:	7afb      	ldrb	r3, [r7, #11]
 800561c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005620:	b2db      	uxtb	r3, r3
 8005622:	4619      	mov	r1, r3
 8005624:	68f8      	ldr	r0, [r7, #12]
 8005626:	f000 fa37 	bl	8005a98 <USBD_CoreFindEP>
 800562a:	4603      	mov	r3, r0
 800562c:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800562e:	7dbb      	ldrb	r3, [r7, #22]
 8005630:	2bff      	cmp	r3, #255	@ 0xff
 8005632:	d025      	beq.n	8005680 <USBD_LL_DataOutStage+0x15c>
 8005634:	7dbb      	ldrb	r3, [r7, #22]
 8005636:	2b00      	cmp	r3, #0
 8005638:	d122      	bne.n	8005680 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005640:	b2db      	uxtb	r3, r3
 8005642:	2b03      	cmp	r3, #3
 8005644:	d117      	bne.n	8005676 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8005646:	7dba      	ldrb	r2, [r7, #22]
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	32ae      	adds	r2, #174	@ 0xae
 800564c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005650:	699b      	ldr	r3, [r3, #24]
 8005652:	2b00      	cmp	r3, #0
 8005654:	d00f      	beq.n	8005676 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8005656:	7dba      	ldrb	r2, [r7, #22]
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800565e:	7dba      	ldrb	r2, [r7, #22]
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	32ae      	adds	r2, #174	@ 0xae
 8005664:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005668:	699b      	ldr	r3, [r3, #24]
 800566a:	7afa      	ldrb	r2, [r7, #11]
 800566c:	4611      	mov	r1, r2
 800566e:	68f8      	ldr	r0, [r7, #12]
 8005670:	4798      	blx	r3
 8005672:	4603      	mov	r3, r0
 8005674:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8005676:	7dfb      	ldrb	r3, [r7, #23]
 8005678:	2b00      	cmp	r3, #0
 800567a:	d001      	beq.n	8005680 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800567c:	7dfb      	ldrb	r3, [r7, #23]
 800567e:	e000      	b.n	8005682 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8005680:	2300      	movs	r3, #0
}
 8005682:	4618      	mov	r0, r3
 8005684:	3718      	adds	r7, #24
 8005686:	46bd      	mov	sp, r7
 8005688:	bd80      	pop	{r7, pc}

0800568a <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800568a:	b580      	push	{r7, lr}
 800568c:	b086      	sub	sp, #24
 800568e:	af00      	add	r7, sp, #0
 8005690:	60f8      	str	r0, [r7, #12]
 8005692:	460b      	mov	r3, r1
 8005694:	607a      	str	r2, [r7, #4]
 8005696:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8005698:	7afb      	ldrb	r3, [r7, #11]
 800569a:	2b00      	cmp	r3, #0
 800569c:	d16f      	bne.n	800577e <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	3314      	adds	r3, #20
 80056a2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80056aa:	2b02      	cmp	r3, #2
 80056ac:	d15a      	bne.n	8005764 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 80056ae:	693b      	ldr	r3, [r7, #16]
 80056b0:	689a      	ldr	r2, [r3, #8]
 80056b2:	693b      	ldr	r3, [r7, #16]
 80056b4:	68db      	ldr	r3, [r3, #12]
 80056b6:	429a      	cmp	r2, r3
 80056b8:	d914      	bls.n	80056e4 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80056ba:	693b      	ldr	r3, [r7, #16]
 80056bc:	689a      	ldr	r2, [r3, #8]
 80056be:	693b      	ldr	r3, [r7, #16]
 80056c0:	68db      	ldr	r3, [r3, #12]
 80056c2:	1ad2      	subs	r2, r2, r3
 80056c4:	693b      	ldr	r3, [r7, #16]
 80056c6:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80056c8:	693b      	ldr	r3, [r7, #16]
 80056ca:	689b      	ldr	r3, [r3, #8]
 80056cc:	461a      	mov	r2, r3
 80056ce:	6879      	ldr	r1, [r7, #4]
 80056d0:	68f8      	ldr	r0, [r7, #12]
 80056d2:	f001 f8bc 	bl	800684e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80056d6:	2300      	movs	r3, #0
 80056d8:	2200      	movs	r2, #0
 80056da:	2100      	movs	r1, #0
 80056dc:	68f8      	ldr	r0, [r7, #12]
 80056de:	f001 fd1f 	bl	8007120 <USBD_LL_PrepareReceive>
 80056e2:	e03f      	b.n	8005764 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80056e4:	693b      	ldr	r3, [r7, #16]
 80056e6:	68da      	ldr	r2, [r3, #12]
 80056e8:	693b      	ldr	r3, [r7, #16]
 80056ea:	689b      	ldr	r3, [r3, #8]
 80056ec:	429a      	cmp	r2, r3
 80056ee:	d11c      	bne.n	800572a <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80056f0:	693b      	ldr	r3, [r7, #16]
 80056f2:	685a      	ldr	r2, [r3, #4]
 80056f4:	693b      	ldr	r3, [r7, #16]
 80056f6:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80056f8:	429a      	cmp	r2, r3
 80056fa:	d316      	bcc.n	800572a <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80056fc:	693b      	ldr	r3, [r7, #16]
 80056fe:	685a      	ldr	r2, [r3, #4]
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8005706:	429a      	cmp	r2, r3
 8005708:	d20f      	bcs.n	800572a <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800570a:	2200      	movs	r2, #0
 800570c:	2100      	movs	r1, #0
 800570e:	68f8      	ldr	r0, [r7, #12]
 8005710:	f001 f89d 	bl	800684e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	2200      	movs	r2, #0
 8005718:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800571c:	2300      	movs	r3, #0
 800571e:	2200      	movs	r2, #0
 8005720:	2100      	movs	r1, #0
 8005722:	68f8      	ldr	r0, [r7, #12]
 8005724:	f001 fcfc 	bl	8007120 <USBD_LL_PrepareReceive>
 8005728:	e01c      	b.n	8005764 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005730:	b2db      	uxtb	r3, r3
 8005732:	2b03      	cmp	r3, #3
 8005734:	d10f      	bne.n	8005756 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800573c:	68db      	ldr	r3, [r3, #12]
 800573e:	2b00      	cmp	r3, #0
 8005740:	d009      	beq.n	8005756 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	2200      	movs	r2, #0
 8005746:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005750:	68db      	ldr	r3, [r3, #12]
 8005752:	68f8      	ldr	r0, [r7, #12]
 8005754:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8005756:	2180      	movs	r1, #128	@ 0x80
 8005758:	68f8      	ldr	r0, [r7, #12]
 800575a:	f001 fc37 	bl	8006fcc <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800575e:	68f8      	ldr	r0, [r7, #12]
 8005760:	f001 f8c7 	bl	80068f2 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800576a:	2b00      	cmp	r3, #0
 800576c:	d03a      	beq.n	80057e4 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800576e:	68f8      	ldr	r0, [r7, #12]
 8005770:	f7ff fe42 	bl	80053f8 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	2200      	movs	r2, #0
 8005778:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800577c:	e032      	b.n	80057e4 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800577e:	7afb      	ldrb	r3, [r7, #11]
 8005780:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005784:	b2db      	uxtb	r3, r3
 8005786:	4619      	mov	r1, r3
 8005788:	68f8      	ldr	r0, [r7, #12]
 800578a:	f000 f985 	bl	8005a98 <USBD_CoreFindEP>
 800578e:	4603      	mov	r3, r0
 8005790:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005792:	7dfb      	ldrb	r3, [r7, #23]
 8005794:	2bff      	cmp	r3, #255	@ 0xff
 8005796:	d025      	beq.n	80057e4 <USBD_LL_DataInStage+0x15a>
 8005798:	7dfb      	ldrb	r3, [r7, #23]
 800579a:	2b00      	cmp	r3, #0
 800579c:	d122      	bne.n	80057e4 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80057a4:	b2db      	uxtb	r3, r3
 80057a6:	2b03      	cmp	r3, #3
 80057a8:	d11c      	bne.n	80057e4 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 80057aa:	7dfa      	ldrb	r2, [r7, #23]
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	32ae      	adds	r2, #174	@ 0xae
 80057b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80057b4:	695b      	ldr	r3, [r3, #20]
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d014      	beq.n	80057e4 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 80057ba:	7dfa      	ldrb	r2, [r7, #23]
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 80057c2:	7dfa      	ldrb	r2, [r7, #23]
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	32ae      	adds	r2, #174	@ 0xae
 80057c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80057cc:	695b      	ldr	r3, [r3, #20]
 80057ce:	7afa      	ldrb	r2, [r7, #11]
 80057d0:	4611      	mov	r1, r2
 80057d2:	68f8      	ldr	r0, [r7, #12]
 80057d4:	4798      	blx	r3
 80057d6:	4603      	mov	r3, r0
 80057d8:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 80057da:	7dbb      	ldrb	r3, [r7, #22]
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d001      	beq.n	80057e4 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 80057e0:	7dbb      	ldrb	r3, [r7, #22]
 80057e2:	e000      	b.n	80057e6 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 80057e4:	2300      	movs	r3, #0
}
 80057e6:	4618      	mov	r0, r3
 80057e8:	3718      	adds	r7, #24
 80057ea:	46bd      	mov	sp, r7
 80057ec:	bd80      	pop	{r7, pc}

080057ee <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80057ee:	b580      	push	{r7, lr}
 80057f0:	b084      	sub	sp, #16
 80057f2:	af00      	add	r7, sp, #0
 80057f4:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 80057f6:	2300      	movs	r3, #0
 80057f8:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	2201      	movs	r2, #1
 80057fe:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	2200      	movs	r2, #0
 8005806:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	2200      	movs	r2, #0
 800580e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	2200      	movs	r2, #0
 8005814:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	2200      	movs	r2, #0
 800581c:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005826:	2b00      	cmp	r3, #0
 8005828:	d014      	beq.n	8005854 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005830:	685b      	ldr	r3, [r3, #4]
 8005832:	2b00      	cmp	r3, #0
 8005834:	d00e      	beq.n	8005854 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800583c:	685b      	ldr	r3, [r3, #4]
 800583e:	687a      	ldr	r2, [r7, #4]
 8005840:	6852      	ldr	r2, [r2, #4]
 8005842:	b2d2      	uxtb	r2, r2
 8005844:	4611      	mov	r1, r2
 8005846:	6878      	ldr	r0, [r7, #4]
 8005848:	4798      	blx	r3
 800584a:	4603      	mov	r3, r0
 800584c:	2b00      	cmp	r3, #0
 800584e:	d001      	beq.n	8005854 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8005850:	2303      	movs	r3, #3
 8005852:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005854:	2340      	movs	r3, #64	@ 0x40
 8005856:	2200      	movs	r2, #0
 8005858:	2100      	movs	r1, #0
 800585a:	6878      	ldr	r0, [r7, #4]
 800585c:	f001 fb71 	bl	8006f42 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	2201      	movs	r2, #1
 8005864:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	2240      	movs	r2, #64	@ 0x40
 800586c:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005870:	2340      	movs	r3, #64	@ 0x40
 8005872:	2200      	movs	r2, #0
 8005874:	2180      	movs	r1, #128	@ 0x80
 8005876:	6878      	ldr	r0, [r7, #4]
 8005878:	f001 fb63 	bl	8006f42 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	2201      	movs	r2, #1
 8005880:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	2240      	movs	r2, #64	@ 0x40
 8005886:	621a      	str	r2, [r3, #32]

  return ret;
 8005888:	7bfb      	ldrb	r3, [r7, #15]
}
 800588a:	4618      	mov	r0, r3
 800588c:	3710      	adds	r7, #16
 800588e:	46bd      	mov	sp, r7
 8005890:	bd80      	pop	{r7, pc}

08005892 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8005892:	b480      	push	{r7}
 8005894:	b083      	sub	sp, #12
 8005896:	af00      	add	r7, sp, #0
 8005898:	6078      	str	r0, [r7, #4]
 800589a:	460b      	mov	r3, r1
 800589c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	78fa      	ldrb	r2, [r7, #3]
 80058a2:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80058a4:	2300      	movs	r3, #0
}
 80058a6:	4618      	mov	r0, r3
 80058a8:	370c      	adds	r7, #12
 80058aa:	46bd      	mov	sp, r7
 80058ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b0:	4770      	bx	lr

080058b2 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80058b2:	b480      	push	{r7}
 80058b4:	b083      	sub	sp, #12
 80058b6:	af00      	add	r7, sp, #0
 80058b8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80058c0:	b2db      	uxtb	r3, r3
 80058c2:	2b04      	cmp	r3, #4
 80058c4:	d006      	beq.n	80058d4 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80058cc:	b2da      	uxtb	r2, r3
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	2204      	movs	r2, #4
 80058d8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 80058dc:	2300      	movs	r3, #0
}
 80058de:	4618      	mov	r0, r3
 80058e0:	370c      	adds	r7, #12
 80058e2:	46bd      	mov	sp, r7
 80058e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e8:	4770      	bx	lr

080058ea <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80058ea:	b480      	push	{r7}
 80058ec:	b083      	sub	sp, #12
 80058ee:	af00      	add	r7, sp, #0
 80058f0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80058f8:	b2db      	uxtb	r3, r3
 80058fa:	2b04      	cmp	r3, #4
 80058fc:	d106      	bne.n	800590c <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8005904:	b2da      	uxtb	r2, r3
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800590c:	2300      	movs	r3, #0
}
 800590e:	4618      	mov	r0, r3
 8005910:	370c      	adds	r7, #12
 8005912:	46bd      	mov	sp, r7
 8005914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005918:	4770      	bx	lr

0800591a <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800591a:	b580      	push	{r7, lr}
 800591c:	b082      	sub	sp, #8
 800591e:	af00      	add	r7, sp, #0
 8005920:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005928:	b2db      	uxtb	r3, r3
 800592a:	2b03      	cmp	r3, #3
 800592c:	d110      	bne.n	8005950 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005934:	2b00      	cmp	r3, #0
 8005936:	d00b      	beq.n	8005950 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800593e:	69db      	ldr	r3, [r3, #28]
 8005940:	2b00      	cmp	r3, #0
 8005942:	d005      	beq.n	8005950 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800594a:	69db      	ldr	r3, [r3, #28]
 800594c:	6878      	ldr	r0, [r7, #4]
 800594e:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8005950:	2300      	movs	r3, #0
}
 8005952:	4618      	mov	r0, r3
 8005954:	3708      	adds	r7, #8
 8005956:	46bd      	mov	sp, r7
 8005958:	bd80      	pop	{r7, pc}

0800595a <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800595a:	b580      	push	{r7, lr}
 800595c:	b082      	sub	sp, #8
 800595e:	af00      	add	r7, sp, #0
 8005960:	6078      	str	r0, [r7, #4]
 8005962:	460b      	mov	r3, r1
 8005964:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	32ae      	adds	r2, #174	@ 0xae
 8005970:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005974:	2b00      	cmp	r3, #0
 8005976:	d101      	bne.n	800597c <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8005978:	2303      	movs	r3, #3
 800597a:	e01c      	b.n	80059b6 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005982:	b2db      	uxtb	r3, r3
 8005984:	2b03      	cmp	r3, #3
 8005986:	d115      	bne.n	80059b4 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	32ae      	adds	r2, #174	@ 0xae
 8005992:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005996:	6a1b      	ldr	r3, [r3, #32]
 8005998:	2b00      	cmp	r3, #0
 800599a:	d00b      	beq.n	80059b4 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	32ae      	adds	r2, #174	@ 0xae
 80059a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80059aa:	6a1b      	ldr	r3, [r3, #32]
 80059ac:	78fa      	ldrb	r2, [r7, #3]
 80059ae:	4611      	mov	r1, r2
 80059b0:	6878      	ldr	r0, [r7, #4]
 80059b2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80059b4:	2300      	movs	r3, #0
}
 80059b6:	4618      	mov	r0, r3
 80059b8:	3708      	adds	r7, #8
 80059ba:	46bd      	mov	sp, r7
 80059bc:	bd80      	pop	{r7, pc}

080059be <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80059be:	b580      	push	{r7, lr}
 80059c0:	b082      	sub	sp, #8
 80059c2:	af00      	add	r7, sp, #0
 80059c4:	6078      	str	r0, [r7, #4]
 80059c6:	460b      	mov	r3, r1
 80059c8:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	32ae      	adds	r2, #174	@ 0xae
 80059d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d101      	bne.n	80059e0 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 80059dc:	2303      	movs	r3, #3
 80059de:	e01c      	b.n	8005a1a <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80059e6:	b2db      	uxtb	r3, r3
 80059e8:	2b03      	cmp	r3, #3
 80059ea:	d115      	bne.n	8005a18 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	32ae      	adds	r2, #174	@ 0xae
 80059f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80059fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d00b      	beq.n	8005a18 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	32ae      	adds	r2, #174	@ 0xae
 8005a0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a10:	78fa      	ldrb	r2, [r7, #3]
 8005a12:	4611      	mov	r1, r2
 8005a14:	6878      	ldr	r0, [r7, #4]
 8005a16:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005a18:	2300      	movs	r3, #0
}
 8005a1a:	4618      	mov	r0, r3
 8005a1c:	3708      	adds	r7, #8
 8005a1e:	46bd      	mov	sp, r7
 8005a20:	bd80      	pop	{r7, pc}

08005a22 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8005a22:	b480      	push	{r7}
 8005a24:	b083      	sub	sp, #12
 8005a26:	af00      	add	r7, sp, #0
 8005a28:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005a2a:	2300      	movs	r3, #0
}
 8005a2c:	4618      	mov	r0, r3
 8005a2e:	370c      	adds	r7, #12
 8005a30:	46bd      	mov	sp, r7
 8005a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a36:	4770      	bx	lr

08005a38 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8005a38:	b580      	push	{r7, lr}
 8005a3a:	b084      	sub	sp, #16
 8005a3c:	af00      	add	r7, sp, #0
 8005a3e:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8005a40:	2300      	movs	r3, #0
 8005a42:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	2201      	movs	r2, #1
 8005a48:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d00e      	beq.n	8005a74 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005a5c:	685b      	ldr	r3, [r3, #4]
 8005a5e:	687a      	ldr	r2, [r7, #4]
 8005a60:	6852      	ldr	r2, [r2, #4]
 8005a62:	b2d2      	uxtb	r2, r2
 8005a64:	4611      	mov	r1, r2
 8005a66:	6878      	ldr	r0, [r7, #4]
 8005a68:	4798      	blx	r3
 8005a6a:	4603      	mov	r3, r0
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d001      	beq.n	8005a74 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8005a70:	2303      	movs	r3, #3
 8005a72:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005a74:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a76:	4618      	mov	r0, r3
 8005a78:	3710      	adds	r7, #16
 8005a7a:	46bd      	mov	sp, r7
 8005a7c:	bd80      	pop	{r7, pc}

08005a7e <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8005a7e:	b480      	push	{r7}
 8005a80:	b083      	sub	sp, #12
 8005a82:	af00      	add	r7, sp, #0
 8005a84:	6078      	str	r0, [r7, #4]
 8005a86:	460b      	mov	r3, r1
 8005a88:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8005a8a:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8005a8c:	4618      	mov	r0, r3
 8005a8e:	370c      	adds	r7, #12
 8005a90:	46bd      	mov	sp, r7
 8005a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a96:	4770      	bx	lr

08005a98 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8005a98:	b480      	push	{r7}
 8005a9a:	b083      	sub	sp, #12
 8005a9c:	af00      	add	r7, sp, #0
 8005a9e:	6078      	str	r0, [r7, #4]
 8005aa0:	460b      	mov	r3, r1
 8005aa2:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8005aa4:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8005aa6:	4618      	mov	r0, r3
 8005aa8:	370c      	adds	r7, #12
 8005aaa:	46bd      	mov	sp, r7
 8005aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab0:	4770      	bx	lr

08005ab2 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8005ab2:	b580      	push	{r7, lr}
 8005ab4:	b086      	sub	sp, #24
 8005ab6:	af00      	add	r7, sp, #0
 8005ab8:	6078      	str	r0, [r7, #4]
 8005aba:	460b      	mov	r3, r1
 8005abc:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8005ac6:	2300      	movs	r3, #0
 8005ac8:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	885b      	ldrh	r3, [r3, #2]
 8005ace:	b29b      	uxth	r3, r3
 8005ad0:	68fa      	ldr	r2, [r7, #12]
 8005ad2:	7812      	ldrb	r2, [r2, #0]
 8005ad4:	4293      	cmp	r3, r2
 8005ad6:	d91f      	bls.n	8005b18 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	781b      	ldrb	r3, [r3, #0]
 8005adc:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8005ade:	e013      	b.n	8005b08 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8005ae0:	f107 030a 	add.w	r3, r7, #10
 8005ae4:	4619      	mov	r1, r3
 8005ae6:	6978      	ldr	r0, [r7, #20]
 8005ae8:	f000 f81b 	bl	8005b22 <USBD_GetNextDesc>
 8005aec:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8005aee:	697b      	ldr	r3, [r7, #20]
 8005af0:	785b      	ldrb	r3, [r3, #1]
 8005af2:	2b05      	cmp	r3, #5
 8005af4:	d108      	bne.n	8005b08 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8005af6:	697b      	ldr	r3, [r7, #20]
 8005af8:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8005afa:	693b      	ldr	r3, [r7, #16]
 8005afc:	789b      	ldrb	r3, [r3, #2]
 8005afe:	78fa      	ldrb	r2, [r7, #3]
 8005b00:	429a      	cmp	r2, r3
 8005b02:	d008      	beq.n	8005b16 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8005b04:	2300      	movs	r3, #0
 8005b06:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	885b      	ldrh	r3, [r3, #2]
 8005b0c:	b29a      	uxth	r2, r3
 8005b0e:	897b      	ldrh	r3, [r7, #10]
 8005b10:	429a      	cmp	r2, r3
 8005b12:	d8e5      	bhi.n	8005ae0 <USBD_GetEpDesc+0x2e>
 8005b14:	e000      	b.n	8005b18 <USBD_GetEpDesc+0x66>
          break;
 8005b16:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8005b18:	693b      	ldr	r3, [r7, #16]
}
 8005b1a:	4618      	mov	r0, r3
 8005b1c:	3718      	adds	r7, #24
 8005b1e:	46bd      	mov	sp, r7
 8005b20:	bd80      	pop	{r7, pc}

08005b22 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8005b22:	b480      	push	{r7}
 8005b24:	b085      	sub	sp, #20
 8005b26:	af00      	add	r7, sp, #0
 8005b28:	6078      	str	r0, [r7, #4]
 8005b2a:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8005b30:	683b      	ldr	r3, [r7, #0]
 8005b32:	881b      	ldrh	r3, [r3, #0]
 8005b34:	68fa      	ldr	r2, [r7, #12]
 8005b36:	7812      	ldrb	r2, [r2, #0]
 8005b38:	4413      	add	r3, r2
 8005b3a:	b29a      	uxth	r2, r3
 8005b3c:	683b      	ldr	r3, [r7, #0]
 8005b3e:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	781b      	ldrb	r3, [r3, #0]
 8005b44:	461a      	mov	r2, r3
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	4413      	add	r3, r2
 8005b4a:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8005b4c:	68fb      	ldr	r3, [r7, #12]
}
 8005b4e:	4618      	mov	r0, r3
 8005b50:	3714      	adds	r7, #20
 8005b52:	46bd      	mov	sp, r7
 8005b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b58:	4770      	bx	lr

08005b5a <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8005b5a:	b480      	push	{r7}
 8005b5c:	b087      	sub	sp, #28
 8005b5e:	af00      	add	r7, sp, #0
 8005b60:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8005b66:	697b      	ldr	r3, [r7, #20]
 8005b68:	781b      	ldrb	r3, [r3, #0]
 8005b6a:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8005b6c:	697b      	ldr	r3, [r7, #20]
 8005b6e:	3301      	adds	r3, #1
 8005b70:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8005b72:	697b      	ldr	r3, [r7, #20]
 8005b74:	781b      	ldrb	r3, [r3, #0]
 8005b76:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8005b78:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8005b7c:	021b      	lsls	r3, r3, #8
 8005b7e:	b21a      	sxth	r2, r3
 8005b80:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8005b84:	4313      	orrs	r3, r2
 8005b86:	b21b      	sxth	r3, r3
 8005b88:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8005b8a:	89fb      	ldrh	r3, [r7, #14]
}
 8005b8c:	4618      	mov	r0, r3
 8005b8e:	371c      	adds	r7, #28
 8005b90:	46bd      	mov	sp, r7
 8005b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b96:	4770      	bx	lr

08005b98 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005b98:	b580      	push	{r7, lr}
 8005b9a:	b084      	sub	sp, #16
 8005b9c:	af00      	add	r7, sp, #0
 8005b9e:	6078      	str	r0, [r7, #4]
 8005ba0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005ba2:	2300      	movs	r3, #0
 8005ba4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005ba6:	683b      	ldr	r3, [r7, #0]
 8005ba8:	781b      	ldrb	r3, [r3, #0]
 8005baa:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8005bae:	2b40      	cmp	r3, #64	@ 0x40
 8005bb0:	d005      	beq.n	8005bbe <USBD_StdDevReq+0x26>
 8005bb2:	2b40      	cmp	r3, #64	@ 0x40
 8005bb4:	d857      	bhi.n	8005c66 <USBD_StdDevReq+0xce>
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d00f      	beq.n	8005bda <USBD_StdDevReq+0x42>
 8005bba:	2b20      	cmp	r3, #32
 8005bbc:	d153      	bne.n	8005c66 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	32ae      	adds	r2, #174	@ 0xae
 8005bc8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005bcc:	689b      	ldr	r3, [r3, #8]
 8005bce:	6839      	ldr	r1, [r7, #0]
 8005bd0:	6878      	ldr	r0, [r7, #4]
 8005bd2:	4798      	blx	r3
 8005bd4:	4603      	mov	r3, r0
 8005bd6:	73fb      	strb	r3, [r7, #15]
      break;
 8005bd8:	e04a      	b.n	8005c70 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005bda:	683b      	ldr	r3, [r7, #0]
 8005bdc:	785b      	ldrb	r3, [r3, #1]
 8005bde:	2b09      	cmp	r3, #9
 8005be0:	d83b      	bhi.n	8005c5a <USBD_StdDevReq+0xc2>
 8005be2:	a201      	add	r2, pc, #4	@ (adr r2, 8005be8 <USBD_StdDevReq+0x50>)
 8005be4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005be8:	08005c3d 	.word	0x08005c3d
 8005bec:	08005c51 	.word	0x08005c51
 8005bf0:	08005c5b 	.word	0x08005c5b
 8005bf4:	08005c47 	.word	0x08005c47
 8005bf8:	08005c5b 	.word	0x08005c5b
 8005bfc:	08005c1b 	.word	0x08005c1b
 8005c00:	08005c11 	.word	0x08005c11
 8005c04:	08005c5b 	.word	0x08005c5b
 8005c08:	08005c33 	.word	0x08005c33
 8005c0c:	08005c25 	.word	0x08005c25
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8005c10:	6839      	ldr	r1, [r7, #0]
 8005c12:	6878      	ldr	r0, [r7, #4]
 8005c14:	f000 fa3c 	bl	8006090 <USBD_GetDescriptor>
          break;
 8005c18:	e024      	b.n	8005c64 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8005c1a:	6839      	ldr	r1, [r7, #0]
 8005c1c:	6878      	ldr	r0, [r7, #4]
 8005c1e:	f000 fba1 	bl	8006364 <USBD_SetAddress>
          break;
 8005c22:	e01f      	b.n	8005c64 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8005c24:	6839      	ldr	r1, [r7, #0]
 8005c26:	6878      	ldr	r0, [r7, #4]
 8005c28:	f000 fbe0 	bl	80063ec <USBD_SetConfig>
 8005c2c:	4603      	mov	r3, r0
 8005c2e:	73fb      	strb	r3, [r7, #15]
          break;
 8005c30:	e018      	b.n	8005c64 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8005c32:	6839      	ldr	r1, [r7, #0]
 8005c34:	6878      	ldr	r0, [r7, #4]
 8005c36:	f000 fc83 	bl	8006540 <USBD_GetConfig>
          break;
 8005c3a:	e013      	b.n	8005c64 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8005c3c:	6839      	ldr	r1, [r7, #0]
 8005c3e:	6878      	ldr	r0, [r7, #4]
 8005c40:	f000 fcb4 	bl	80065ac <USBD_GetStatus>
          break;
 8005c44:	e00e      	b.n	8005c64 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8005c46:	6839      	ldr	r1, [r7, #0]
 8005c48:	6878      	ldr	r0, [r7, #4]
 8005c4a:	f000 fce3 	bl	8006614 <USBD_SetFeature>
          break;
 8005c4e:	e009      	b.n	8005c64 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8005c50:	6839      	ldr	r1, [r7, #0]
 8005c52:	6878      	ldr	r0, [r7, #4]
 8005c54:	f000 fd07 	bl	8006666 <USBD_ClrFeature>
          break;
 8005c58:	e004      	b.n	8005c64 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8005c5a:	6839      	ldr	r1, [r7, #0]
 8005c5c:	6878      	ldr	r0, [r7, #4]
 8005c5e:	f000 fd5e 	bl	800671e <USBD_CtlError>
          break;
 8005c62:	bf00      	nop
      }
      break;
 8005c64:	e004      	b.n	8005c70 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8005c66:	6839      	ldr	r1, [r7, #0]
 8005c68:	6878      	ldr	r0, [r7, #4]
 8005c6a:	f000 fd58 	bl	800671e <USBD_CtlError>
      break;
 8005c6e:	bf00      	nop
  }

  return ret;
 8005c70:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c72:	4618      	mov	r0, r3
 8005c74:	3710      	adds	r7, #16
 8005c76:	46bd      	mov	sp, r7
 8005c78:	bd80      	pop	{r7, pc}
 8005c7a:	bf00      	nop

08005c7c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005c7c:	b580      	push	{r7, lr}
 8005c7e:	b084      	sub	sp, #16
 8005c80:	af00      	add	r7, sp, #0
 8005c82:	6078      	str	r0, [r7, #4]
 8005c84:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005c86:	2300      	movs	r3, #0
 8005c88:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005c8a:	683b      	ldr	r3, [r7, #0]
 8005c8c:	781b      	ldrb	r3, [r3, #0]
 8005c8e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8005c92:	2b40      	cmp	r3, #64	@ 0x40
 8005c94:	d005      	beq.n	8005ca2 <USBD_StdItfReq+0x26>
 8005c96:	2b40      	cmp	r3, #64	@ 0x40
 8005c98:	d852      	bhi.n	8005d40 <USBD_StdItfReq+0xc4>
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d001      	beq.n	8005ca2 <USBD_StdItfReq+0x26>
 8005c9e:	2b20      	cmp	r3, #32
 8005ca0:	d14e      	bne.n	8005d40 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005ca8:	b2db      	uxtb	r3, r3
 8005caa:	3b01      	subs	r3, #1
 8005cac:	2b02      	cmp	r3, #2
 8005cae:	d840      	bhi.n	8005d32 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8005cb0:	683b      	ldr	r3, [r7, #0]
 8005cb2:	889b      	ldrh	r3, [r3, #4]
 8005cb4:	b2db      	uxtb	r3, r3
 8005cb6:	2b01      	cmp	r3, #1
 8005cb8:	d836      	bhi.n	8005d28 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8005cba:	683b      	ldr	r3, [r7, #0]
 8005cbc:	889b      	ldrh	r3, [r3, #4]
 8005cbe:	b2db      	uxtb	r3, r3
 8005cc0:	4619      	mov	r1, r3
 8005cc2:	6878      	ldr	r0, [r7, #4]
 8005cc4:	f7ff fedb 	bl	8005a7e <USBD_CoreFindIF>
 8005cc8:	4603      	mov	r3, r0
 8005cca:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005ccc:	7bbb      	ldrb	r3, [r7, #14]
 8005cce:	2bff      	cmp	r3, #255	@ 0xff
 8005cd0:	d01d      	beq.n	8005d0e <USBD_StdItfReq+0x92>
 8005cd2:	7bbb      	ldrb	r3, [r7, #14]
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d11a      	bne.n	8005d0e <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8005cd8:	7bba      	ldrb	r2, [r7, #14]
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	32ae      	adds	r2, #174	@ 0xae
 8005cde:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ce2:	689b      	ldr	r3, [r3, #8]
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d00f      	beq.n	8005d08 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8005ce8:	7bba      	ldrb	r2, [r7, #14]
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8005cf0:	7bba      	ldrb	r2, [r7, #14]
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	32ae      	adds	r2, #174	@ 0xae
 8005cf6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005cfa:	689b      	ldr	r3, [r3, #8]
 8005cfc:	6839      	ldr	r1, [r7, #0]
 8005cfe:	6878      	ldr	r0, [r7, #4]
 8005d00:	4798      	blx	r3
 8005d02:	4603      	mov	r3, r0
 8005d04:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8005d06:	e004      	b.n	8005d12 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8005d08:	2303      	movs	r3, #3
 8005d0a:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8005d0c:	e001      	b.n	8005d12 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8005d0e:	2303      	movs	r3, #3
 8005d10:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8005d12:	683b      	ldr	r3, [r7, #0]
 8005d14:	88db      	ldrh	r3, [r3, #6]
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d110      	bne.n	8005d3c <USBD_StdItfReq+0xc0>
 8005d1a:	7bfb      	ldrb	r3, [r7, #15]
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d10d      	bne.n	8005d3c <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8005d20:	6878      	ldr	r0, [r7, #4]
 8005d22:	f000 fdd3 	bl	80068cc <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8005d26:	e009      	b.n	8005d3c <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8005d28:	6839      	ldr	r1, [r7, #0]
 8005d2a:	6878      	ldr	r0, [r7, #4]
 8005d2c:	f000 fcf7 	bl	800671e <USBD_CtlError>
          break;
 8005d30:	e004      	b.n	8005d3c <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8005d32:	6839      	ldr	r1, [r7, #0]
 8005d34:	6878      	ldr	r0, [r7, #4]
 8005d36:	f000 fcf2 	bl	800671e <USBD_CtlError>
          break;
 8005d3a:	e000      	b.n	8005d3e <USBD_StdItfReq+0xc2>
          break;
 8005d3c:	bf00      	nop
      }
      break;
 8005d3e:	e004      	b.n	8005d4a <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8005d40:	6839      	ldr	r1, [r7, #0]
 8005d42:	6878      	ldr	r0, [r7, #4]
 8005d44:	f000 fceb 	bl	800671e <USBD_CtlError>
      break;
 8005d48:	bf00      	nop
  }

  return ret;
 8005d4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d4c:	4618      	mov	r0, r3
 8005d4e:	3710      	adds	r7, #16
 8005d50:	46bd      	mov	sp, r7
 8005d52:	bd80      	pop	{r7, pc}

08005d54 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005d54:	b580      	push	{r7, lr}
 8005d56:	b084      	sub	sp, #16
 8005d58:	af00      	add	r7, sp, #0
 8005d5a:	6078      	str	r0, [r7, #4]
 8005d5c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8005d5e:	2300      	movs	r3, #0
 8005d60:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8005d62:	683b      	ldr	r3, [r7, #0]
 8005d64:	889b      	ldrh	r3, [r3, #4]
 8005d66:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005d68:	683b      	ldr	r3, [r7, #0]
 8005d6a:	781b      	ldrb	r3, [r3, #0]
 8005d6c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8005d70:	2b40      	cmp	r3, #64	@ 0x40
 8005d72:	d007      	beq.n	8005d84 <USBD_StdEPReq+0x30>
 8005d74:	2b40      	cmp	r3, #64	@ 0x40
 8005d76:	f200 817f 	bhi.w	8006078 <USBD_StdEPReq+0x324>
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d02a      	beq.n	8005dd4 <USBD_StdEPReq+0x80>
 8005d7e:	2b20      	cmp	r3, #32
 8005d80:	f040 817a 	bne.w	8006078 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8005d84:	7bbb      	ldrb	r3, [r7, #14]
 8005d86:	4619      	mov	r1, r3
 8005d88:	6878      	ldr	r0, [r7, #4]
 8005d8a:	f7ff fe85 	bl	8005a98 <USBD_CoreFindEP>
 8005d8e:	4603      	mov	r3, r0
 8005d90:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005d92:	7b7b      	ldrb	r3, [r7, #13]
 8005d94:	2bff      	cmp	r3, #255	@ 0xff
 8005d96:	f000 8174 	beq.w	8006082 <USBD_StdEPReq+0x32e>
 8005d9a:	7b7b      	ldrb	r3, [r7, #13]
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	f040 8170 	bne.w	8006082 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8005da2:	7b7a      	ldrb	r2, [r7, #13]
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8005daa:	7b7a      	ldrb	r2, [r7, #13]
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	32ae      	adds	r2, #174	@ 0xae
 8005db0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005db4:	689b      	ldr	r3, [r3, #8]
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	f000 8163 	beq.w	8006082 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8005dbc:	7b7a      	ldrb	r2, [r7, #13]
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	32ae      	adds	r2, #174	@ 0xae
 8005dc2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005dc6:	689b      	ldr	r3, [r3, #8]
 8005dc8:	6839      	ldr	r1, [r7, #0]
 8005dca:	6878      	ldr	r0, [r7, #4]
 8005dcc:	4798      	blx	r3
 8005dce:	4603      	mov	r3, r0
 8005dd0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005dd2:	e156      	b.n	8006082 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005dd4:	683b      	ldr	r3, [r7, #0]
 8005dd6:	785b      	ldrb	r3, [r3, #1]
 8005dd8:	2b03      	cmp	r3, #3
 8005dda:	d008      	beq.n	8005dee <USBD_StdEPReq+0x9a>
 8005ddc:	2b03      	cmp	r3, #3
 8005dde:	f300 8145 	bgt.w	800606c <USBD_StdEPReq+0x318>
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	f000 809b 	beq.w	8005f1e <USBD_StdEPReq+0x1ca>
 8005de8:	2b01      	cmp	r3, #1
 8005dea:	d03c      	beq.n	8005e66 <USBD_StdEPReq+0x112>
 8005dec:	e13e      	b.n	800606c <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005df4:	b2db      	uxtb	r3, r3
 8005df6:	2b02      	cmp	r3, #2
 8005df8:	d002      	beq.n	8005e00 <USBD_StdEPReq+0xac>
 8005dfa:	2b03      	cmp	r3, #3
 8005dfc:	d016      	beq.n	8005e2c <USBD_StdEPReq+0xd8>
 8005dfe:	e02c      	b.n	8005e5a <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005e00:	7bbb      	ldrb	r3, [r7, #14]
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d00d      	beq.n	8005e22 <USBD_StdEPReq+0xce>
 8005e06:	7bbb      	ldrb	r3, [r7, #14]
 8005e08:	2b80      	cmp	r3, #128	@ 0x80
 8005e0a:	d00a      	beq.n	8005e22 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8005e0c:	7bbb      	ldrb	r3, [r7, #14]
 8005e0e:	4619      	mov	r1, r3
 8005e10:	6878      	ldr	r0, [r7, #4]
 8005e12:	f001 f8db 	bl	8006fcc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8005e16:	2180      	movs	r1, #128	@ 0x80
 8005e18:	6878      	ldr	r0, [r7, #4]
 8005e1a:	f001 f8d7 	bl	8006fcc <USBD_LL_StallEP>
 8005e1e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8005e20:	e020      	b.n	8005e64 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8005e22:	6839      	ldr	r1, [r7, #0]
 8005e24:	6878      	ldr	r0, [r7, #4]
 8005e26:	f000 fc7a 	bl	800671e <USBD_CtlError>
              break;
 8005e2a:	e01b      	b.n	8005e64 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8005e2c:	683b      	ldr	r3, [r7, #0]
 8005e2e:	885b      	ldrh	r3, [r3, #2]
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d10e      	bne.n	8005e52 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8005e34:	7bbb      	ldrb	r3, [r7, #14]
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d00b      	beq.n	8005e52 <USBD_StdEPReq+0xfe>
 8005e3a:	7bbb      	ldrb	r3, [r7, #14]
 8005e3c:	2b80      	cmp	r3, #128	@ 0x80
 8005e3e:	d008      	beq.n	8005e52 <USBD_StdEPReq+0xfe>
 8005e40:	683b      	ldr	r3, [r7, #0]
 8005e42:	88db      	ldrh	r3, [r3, #6]
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d104      	bne.n	8005e52 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8005e48:	7bbb      	ldrb	r3, [r7, #14]
 8005e4a:	4619      	mov	r1, r3
 8005e4c:	6878      	ldr	r0, [r7, #4]
 8005e4e:	f001 f8bd 	bl	8006fcc <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8005e52:	6878      	ldr	r0, [r7, #4]
 8005e54:	f000 fd3a 	bl	80068cc <USBD_CtlSendStatus>

              break;
 8005e58:	e004      	b.n	8005e64 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8005e5a:	6839      	ldr	r1, [r7, #0]
 8005e5c:	6878      	ldr	r0, [r7, #4]
 8005e5e:	f000 fc5e 	bl	800671e <USBD_CtlError>
              break;
 8005e62:	bf00      	nop
          }
          break;
 8005e64:	e107      	b.n	8006076 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005e6c:	b2db      	uxtb	r3, r3
 8005e6e:	2b02      	cmp	r3, #2
 8005e70:	d002      	beq.n	8005e78 <USBD_StdEPReq+0x124>
 8005e72:	2b03      	cmp	r3, #3
 8005e74:	d016      	beq.n	8005ea4 <USBD_StdEPReq+0x150>
 8005e76:	e04b      	b.n	8005f10 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005e78:	7bbb      	ldrb	r3, [r7, #14]
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d00d      	beq.n	8005e9a <USBD_StdEPReq+0x146>
 8005e7e:	7bbb      	ldrb	r3, [r7, #14]
 8005e80:	2b80      	cmp	r3, #128	@ 0x80
 8005e82:	d00a      	beq.n	8005e9a <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8005e84:	7bbb      	ldrb	r3, [r7, #14]
 8005e86:	4619      	mov	r1, r3
 8005e88:	6878      	ldr	r0, [r7, #4]
 8005e8a:	f001 f89f 	bl	8006fcc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8005e8e:	2180      	movs	r1, #128	@ 0x80
 8005e90:	6878      	ldr	r0, [r7, #4]
 8005e92:	f001 f89b 	bl	8006fcc <USBD_LL_StallEP>
 8005e96:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8005e98:	e040      	b.n	8005f1c <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8005e9a:	6839      	ldr	r1, [r7, #0]
 8005e9c:	6878      	ldr	r0, [r7, #4]
 8005e9e:	f000 fc3e 	bl	800671e <USBD_CtlError>
              break;
 8005ea2:	e03b      	b.n	8005f1c <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8005ea4:	683b      	ldr	r3, [r7, #0]
 8005ea6:	885b      	ldrh	r3, [r3, #2]
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d136      	bne.n	8005f1a <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8005eac:	7bbb      	ldrb	r3, [r7, #14]
 8005eae:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d004      	beq.n	8005ec0 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8005eb6:	7bbb      	ldrb	r3, [r7, #14]
 8005eb8:	4619      	mov	r1, r3
 8005eba:	6878      	ldr	r0, [r7, #4]
 8005ebc:	f001 f8a5 	bl	800700a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8005ec0:	6878      	ldr	r0, [r7, #4]
 8005ec2:	f000 fd03 	bl	80068cc <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8005ec6:	7bbb      	ldrb	r3, [r7, #14]
 8005ec8:	4619      	mov	r1, r3
 8005eca:	6878      	ldr	r0, [r7, #4]
 8005ecc:	f7ff fde4 	bl	8005a98 <USBD_CoreFindEP>
 8005ed0:	4603      	mov	r3, r0
 8005ed2:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005ed4:	7b7b      	ldrb	r3, [r7, #13]
 8005ed6:	2bff      	cmp	r3, #255	@ 0xff
 8005ed8:	d01f      	beq.n	8005f1a <USBD_StdEPReq+0x1c6>
 8005eda:	7b7b      	ldrb	r3, [r7, #13]
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d11c      	bne.n	8005f1a <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8005ee0:	7b7a      	ldrb	r2, [r7, #13]
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8005ee8:	7b7a      	ldrb	r2, [r7, #13]
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	32ae      	adds	r2, #174	@ 0xae
 8005eee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ef2:	689b      	ldr	r3, [r3, #8]
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d010      	beq.n	8005f1a <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8005ef8:	7b7a      	ldrb	r2, [r7, #13]
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	32ae      	adds	r2, #174	@ 0xae
 8005efe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f02:	689b      	ldr	r3, [r3, #8]
 8005f04:	6839      	ldr	r1, [r7, #0]
 8005f06:	6878      	ldr	r0, [r7, #4]
 8005f08:	4798      	blx	r3
 8005f0a:	4603      	mov	r3, r0
 8005f0c:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8005f0e:	e004      	b.n	8005f1a <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8005f10:	6839      	ldr	r1, [r7, #0]
 8005f12:	6878      	ldr	r0, [r7, #4]
 8005f14:	f000 fc03 	bl	800671e <USBD_CtlError>
              break;
 8005f18:	e000      	b.n	8005f1c <USBD_StdEPReq+0x1c8>
              break;
 8005f1a:	bf00      	nop
          }
          break;
 8005f1c:	e0ab      	b.n	8006076 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005f24:	b2db      	uxtb	r3, r3
 8005f26:	2b02      	cmp	r3, #2
 8005f28:	d002      	beq.n	8005f30 <USBD_StdEPReq+0x1dc>
 8005f2a:	2b03      	cmp	r3, #3
 8005f2c:	d032      	beq.n	8005f94 <USBD_StdEPReq+0x240>
 8005f2e:	e097      	b.n	8006060 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005f30:	7bbb      	ldrb	r3, [r7, #14]
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d007      	beq.n	8005f46 <USBD_StdEPReq+0x1f2>
 8005f36:	7bbb      	ldrb	r3, [r7, #14]
 8005f38:	2b80      	cmp	r3, #128	@ 0x80
 8005f3a:	d004      	beq.n	8005f46 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8005f3c:	6839      	ldr	r1, [r7, #0]
 8005f3e:	6878      	ldr	r0, [r7, #4]
 8005f40:	f000 fbed 	bl	800671e <USBD_CtlError>
                break;
 8005f44:	e091      	b.n	800606a <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005f46:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	da0b      	bge.n	8005f66 <USBD_StdEPReq+0x212>
 8005f4e:	7bbb      	ldrb	r3, [r7, #14]
 8005f50:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005f54:	4613      	mov	r3, r2
 8005f56:	009b      	lsls	r3, r3, #2
 8005f58:	4413      	add	r3, r2
 8005f5a:	009b      	lsls	r3, r3, #2
 8005f5c:	3310      	adds	r3, #16
 8005f5e:	687a      	ldr	r2, [r7, #4]
 8005f60:	4413      	add	r3, r2
 8005f62:	3304      	adds	r3, #4
 8005f64:	e00b      	b.n	8005f7e <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8005f66:	7bbb      	ldrb	r3, [r7, #14]
 8005f68:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005f6c:	4613      	mov	r3, r2
 8005f6e:	009b      	lsls	r3, r3, #2
 8005f70:	4413      	add	r3, r2
 8005f72:	009b      	lsls	r3, r3, #2
 8005f74:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8005f78:	687a      	ldr	r2, [r7, #4]
 8005f7a:	4413      	add	r3, r2
 8005f7c:	3304      	adds	r3, #4
 8005f7e:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8005f80:	68bb      	ldr	r3, [r7, #8]
 8005f82:	2200      	movs	r2, #0
 8005f84:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8005f86:	68bb      	ldr	r3, [r7, #8]
 8005f88:	2202      	movs	r2, #2
 8005f8a:	4619      	mov	r1, r3
 8005f8c:	6878      	ldr	r0, [r7, #4]
 8005f8e:	f000 fc43 	bl	8006818 <USBD_CtlSendData>
              break;
 8005f92:	e06a      	b.n	800606a <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8005f94:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	da11      	bge.n	8005fc0 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8005f9c:	7bbb      	ldrb	r3, [r7, #14]
 8005f9e:	f003 020f 	and.w	r2, r3, #15
 8005fa2:	6879      	ldr	r1, [r7, #4]
 8005fa4:	4613      	mov	r3, r2
 8005fa6:	009b      	lsls	r3, r3, #2
 8005fa8:	4413      	add	r3, r2
 8005faa:	009b      	lsls	r3, r3, #2
 8005fac:	440b      	add	r3, r1
 8005fae:	3324      	adds	r3, #36	@ 0x24
 8005fb0:	881b      	ldrh	r3, [r3, #0]
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d117      	bne.n	8005fe6 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8005fb6:	6839      	ldr	r1, [r7, #0]
 8005fb8:	6878      	ldr	r0, [r7, #4]
 8005fba:	f000 fbb0 	bl	800671e <USBD_CtlError>
                  break;
 8005fbe:	e054      	b.n	800606a <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8005fc0:	7bbb      	ldrb	r3, [r7, #14]
 8005fc2:	f003 020f 	and.w	r2, r3, #15
 8005fc6:	6879      	ldr	r1, [r7, #4]
 8005fc8:	4613      	mov	r3, r2
 8005fca:	009b      	lsls	r3, r3, #2
 8005fcc:	4413      	add	r3, r2
 8005fce:	009b      	lsls	r3, r3, #2
 8005fd0:	440b      	add	r3, r1
 8005fd2:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8005fd6:	881b      	ldrh	r3, [r3, #0]
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d104      	bne.n	8005fe6 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8005fdc:	6839      	ldr	r1, [r7, #0]
 8005fde:	6878      	ldr	r0, [r7, #4]
 8005fe0:	f000 fb9d 	bl	800671e <USBD_CtlError>
                  break;
 8005fe4:	e041      	b.n	800606a <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005fe6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	da0b      	bge.n	8006006 <USBD_StdEPReq+0x2b2>
 8005fee:	7bbb      	ldrb	r3, [r7, #14]
 8005ff0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005ff4:	4613      	mov	r3, r2
 8005ff6:	009b      	lsls	r3, r3, #2
 8005ff8:	4413      	add	r3, r2
 8005ffa:	009b      	lsls	r3, r3, #2
 8005ffc:	3310      	adds	r3, #16
 8005ffe:	687a      	ldr	r2, [r7, #4]
 8006000:	4413      	add	r3, r2
 8006002:	3304      	adds	r3, #4
 8006004:	e00b      	b.n	800601e <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006006:	7bbb      	ldrb	r3, [r7, #14]
 8006008:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800600c:	4613      	mov	r3, r2
 800600e:	009b      	lsls	r3, r3, #2
 8006010:	4413      	add	r3, r2
 8006012:	009b      	lsls	r3, r3, #2
 8006014:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8006018:	687a      	ldr	r2, [r7, #4]
 800601a:	4413      	add	r3, r2
 800601c:	3304      	adds	r3, #4
 800601e:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006020:	7bbb      	ldrb	r3, [r7, #14]
 8006022:	2b00      	cmp	r3, #0
 8006024:	d002      	beq.n	800602c <USBD_StdEPReq+0x2d8>
 8006026:	7bbb      	ldrb	r3, [r7, #14]
 8006028:	2b80      	cmp	r3, #128	@ 0x80
 800602a:	d103      	bne.n	8006034 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800602c:	68bb      	ldr	r3, [r7, #8]
 800602e:	2200      	movs	r2, #0
 8006030:	601a      	str	r2, [r3, #0]
 8006032:	e00e      	b.n	8006052 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8006034:	7bbb      	ldrb	r3, [r7, #14]
 8006036:	4619      	mov	r1, r3
 8006038:	6878      	ldr	r0, [r7, #4]
 800603a:	f001 f805 	bl	8007048 <USBD_LL_IsStallEP>
 800603e:	4603      	mov	r3, r0
 8006040:	2b00      	cmp	r3, #0
 8006042:	d003      	beq.n	800604c <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8006044:	68bb      	ldr	r3, [r7, #8]
 8006046:	2201      	movs	r2, #1
 8006048:	601a      	str	r2, [r3, #0]
 800604a:	e002      	b.n	8006052 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800604c:	68bb      	ldr	r3, [r7, #8]
 800604e:	2200      	movs	r2, #0
 8006050:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006052:	68bb      	ldr	r3, [r7, #8]
 8006054:	2202      	movs	r2, #2
 8006056:	4619      	mov	r1, r3
 8006058:	6878      	ldr	r0, [r7, #4]
 800605a:	f000 fbdd 	bl	8006818 <USBD_CtlSendData>
              break;
 800605e:	e004      	b.n	800606a <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8006060:	6839      	ldr	r1, [r7, #0]
 8006062:	6878      	ldr	r0, [r7, #4]
 8006064:	f000 fb5b 	bl	800671e <USBD_CtlError>
              break;
 8006068:	bf00      	nop
          }
          break;
 800606a:	e004      	b.n	8006076 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800606c:	6839      	ldr	r1, [r7, #0]
 800606e:	6878      	ldr	r0, [r7, #4]
 8006070:	f000 fb55 	bl	800671e <USBD_CtlError>
          break;
 8006074:	bf00      	nop
      }
      break;
 8006076:	e005      	b.n	8006084 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8006078:	6839      	ldr	r1, [r7, #0]
 800607a:	6878      	ldr	r0, [r7, #4]
 800607c:	f000 fb4f 	bl	800671e <USBD_CtlError>
      break;
 8006080:	e000      	b.n	8006084 <USBD_StdEPReq+0x330>
      break;
 8006082:	bf00      	nop
  }

  return ret;
 8006084:	7bfb      	ldrb	r3, [r7, #15]
}
 8006086:	4618      	mov	r0, r3
 8006088:	3710      	adds	r7, #16
 800608a:	46bd      	mov	sp, r7
 800608c:	bd80      	pop	{r7, pc}
	...

08006090 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006090:	b580      	push	{r7, lr}
 8006092:	b084      	sub	sp, #16
 8006094:	af00      	add	r7, sp, #0
 8006096:	6078      	str	r0, [r7, #4]
 8006098:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800609a:	2300      	movs	r3, #0
 800609c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800609e:	2300      	movs	r3, #0
 80060a0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80060a2:	2300      	movs	r3, #0
 80060a4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80060a6:	683b      	ldr	r3, [r7, #0]
 80060a8:	885b      	ldrh	r3, [r3, #2]
 80060aa:	0a1b      	lsrs	r3, r3, #8
 80060ac:	b29b      	uxth	r3, r3
 80060ae:	3b01      	subs	r3, #1
 80060b0:	2b06      	cmp	r3, #6
 80060b2:	f200 8128 	bhi.w	8006306 <USBD_GetDescriptor+0x276>
 80060b6:	a201      	add	r2, pc, #4	@ (adr r2, 80060bc <USBD_GetDescriptor+0x2c>)
 80060b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060bc:	080060d9 	.word	0x080060d9
 80060c0:	080060f1 	.word	0x080060f1
 80060c4:	08006131 	.word	0x08006131
 80060c8:	08006307 	.word	0x08006307
 80060cc:	08006307 	.word	0x08006307
 80060d0:	080062a7 	.word	0x080062a7
 80060d4:	080062d3 	.word	0x080062d3
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	687a      	ldr	r2, [r7, #4]
 80060e2:	7c12      	ldrb	r2, [r2, #16]
 80060e4:	f107 0108 	add.w	r1, r7, #8
 80060e8:	4610      	mov	r0, r2
 80060ea:	4798      	blx	r3
 80060ec:	60f8      	str	r0, [r7, #12]
      break;
 80060ee:	e112      	b.n	8006316 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	7c1b      	ldrb	r3, [r3, #16]
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d10d      	bne.n	8006114 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80060fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006100:	f107 0208 	add.w	r2, r7, #8
 8006104:	4610      	mov	r0, r2
 8006106:	4798      	blx	r3
 8006108:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	3301      	adds	r3, #1
 800610e:	2202      	movs	r2, #2
 8006110:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8006112:	e100      	b.n	8006316 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800611a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800611c:	f107 0208 	add.w	r2, r7, #8
 8006120:	4610      	mov	r0, r2
 8006122:	4798      	blx	r3
 8006124:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	3301      	adds	r3, #1
 800612a:	2202      	movs	r2, #2
 800612c:	701a      	strb	r2, [r3, #0]
      break;
 800612e:	e0f2      	b.n	8006316 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8006130:	683b      	ldr	r3, [r7, #0]
 8006132:	885b      	ldrh	r3, [r3, #2]
 8006134:	b2db      	uxtb	r3, r3
 8006136:	2b05      	cmp	r3, #5
 8006138:	f200 80ac 	bhi.w	8006294 <USBD_GetDescriptor+0x204>
 800613c:	a201      	add	r2, pc, #4	@ (adr r2, 8006144 <USBD_GetDescriptor+0xb4>)
 800613e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006142:	bf00      	nop
 8006144:	0800615d 	.word	0x0800615d
 8006148:	08006191 	.word	0x08006191
 800614c:	080061c5 	.word	0x080061c5
 8006150:	080061f9 	.word	0x080061f9
 8006154:	0800622d 	.word	0x0800622d
 8006158:	08006261 	.word	0x08006261
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006162:	685b      	ldr	r3, [r3, #4]
 8006164:	2b00      	cmp	r3, #0
 8006166:	d00b      	beq.n	8006180 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800616e:	685b      	ldr	r3, [r3, #4]
 8006170:	687a      	ldr	r2, [r7, #4]
 8006172:	7c12      	ldrb	r2, [r2, #16]
 8006174:	f107 0108 	add.w	r1, r7, #8
 8006178:	4610      	mov	r0, r2
 800617a:	4798      	blx	r3
 800617c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800617e:	e091      	b.n	80062a4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006180:	6839      	ldr	r1, [r7, #0]
 8006182:	6878      	ldr	r0, [r7, #4]
 8006184:	f000 facb 	bl	800671e <USBD_CtlError>
            err++;
 8006188:	7afb      	ldrb	r3, [r7, #11]
 800618a:	3301      	adds	r3, #1
 800618c:	72fb      	strb	r3, [r7, #11]
          break;
 800618e:	e089      	b.n	80062a4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006196:	689b      	ldr	r3, [r3, #8]
 8006198:	2b00      	cmp	r3, #0
 800619a:	d00b      	beq.n	80061b4 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80061a2:	689b      	ldr	r3, [r3, #8]
 80061a4:	687a      	ldr	r2, [r7, #4]
 80061a6:	7c12      	ldrb	r2, [r2, #16]
 80061a8:	f107 0108 	add.w	r1, r7, #8
 80061ac:	4610      	mov	r0, r2
 80061ae:	4798      	blx	r3
 80061b0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80061b2:	e077      	b.n	80062a4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80061b4:	6839      	ldr	r1, [r7, #0]
 80061b6:	6878      	ldr	r0, [r7, #4]
 80061b8:	f000 fab1 	bl	800671e <USBD_CtlError>
            err++;
 80061bc:	7afb      	ldrb	r3, [r7, #11]
 80061be:	3301      	adds	r3, #1
 80061c0:	72fb      	strb	r3, [r7, #11]
          break;
 80061c2:	e06f      	b.n	80062a4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80061ca:	68db      	ldr	r3, [r3, #12]
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d00b      	beq.n	80061e8 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80061d6:	68db      	ldr	r3, [r3, #12]
 80061d8:	687a      	ldr	r2, [r7, #4]
 80061da:	7c12      	ldrb	r2, [r2, #16]
 80061dc:	f107 0108 	add.w	r1, r7, #8
 80061e0:	4610      	mov	r0, r2
 80061e2:	4798      	blx	r3
 80061e4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80061e6:	e05d      	b.n	80062a4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80061e8:	6839      	ldr	r1, [r7, #0]
 80061ea:	6878      	ldr	r0, [r7, #4]
 80061ec:	f000 fa97 	bl	800671e <USBD_CtlError>
            err++;
 80061f0:	7afb      	ldrb	r3, [r7, #11]
 80061f2:	3301      	adds	r3, #1
 80061f4:	72fb      	strb	r3, [r7, #11]
          break;
 80061f6:	e055      	b.n	80062a4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80061fe:	691b      	ldr	r3, [r3, #16]
 8006200:	2b00      	cmp	r3, #0
 8006202:	d00b      	beq.n	800621c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800620a:	691b      	ldr	r3, [r3, #16]
 800620c:	687a      	ldr	r2, [r7, #4]
 800620e:	7c12      	ldrb	r2, [r2, #16]
 8006210:	f107 0108 	add.w	r1, r7, #8
 8006214:	4610      	mov	r0, r2
 8006216:	4798      	blx	r3
 8006218:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800621a:	e043      	b.n	80062a4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800621c:	6839      	ldr	r1, [r7, #0]
 800621e:	6878      	ldr	r0, [r7, #4]
 8006220:	f000 fa7d 	bl	800671e <USBD_CtlError>
            err++;
 8006224:	7afb      	ldrb	r3, [r7, #11]
 8006226:	3301      	adds	r3, #1
 8006228:	72fb      	strb	r3, [r7, #11]
          break;
 800622a:	e03b      	b.n	80062a4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006232:	695b      	ldr	r3, [r3, #20]
 8006234:	2b00      	cmp	r3, #0
 8006236:	d00b      	beq.n	8006250 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800623e:	695b      	ldr	r3, [r3, #20]
 8006240:	687a      	ldr	r2, [r7, #4]
 8006242:	7c12      	ldrb	r2, [r2, #16]
 8006244:	f107 0108 	add.w	r1, r7, #8
 8006248:	4610      	mov	r0, r2
 800624a:	4798      	blx	r3
 800624c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800624e:	e029      	b.n	80062a4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006250:	6839      	ldr	r1, [r7, #0]
 8006252:	6878      	ldr	r0, [r7, #4]
 8006254:	f000 fa63 	bl	800671e <USBD_CtlError>
            err++;
 8006258:	7afb      	ldrb	r3, [r7, #11]
 800625a:	3301      	adds	r3, #1
 800625c:	72fb      	strb	r3, [r7, #11]
          break;
 800625e:	e021      	b.n	80062a4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006266:	699b      	ldr	r3, [r3, #24]
 8006268:	2b00      	cmp	r3, #0
 800626a:	d00b      	beq.n	8006284 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006272:	699b      	ldr	r3, [r3, #24]
 8006274:	687a      	ldr	r2, [r7, #4]
 8006276:	7c12      	ldrb	r2, [r2, #16]
 8006278:	f107 0108 	add.w	r1, r7, #8
 800627c:	4610      	mov	r0, r2
 800627e:	4798      	blx	r3
 8006280:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006282:	e00f      	b.n	80062a4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006284:	6839      	ldr	r1, [r7, #0]
 8006286:	6878      	ldr	r0, [r7, #4]
 8006288:	f000 fa49 	bl	800671e <USBD_CtlError>
            err++;
 800628c:	7afb      	ldrb	r3, [r7, #11]
 800628e:	3301      	adds	r3, #1
 8006290:	72fb      	strb	r3, [r7, #11]
          break;
 8006292:	e007      	b.n	80062a4 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8006294:	6839      	ldr	r1, [r7, #0]
 8006296:	6878      	ldr	r0, [r7, #4]
 8006298:	f000 fa41 	bl	800671e <USBD_CtlError>
          err++;
 800629c:	7afb      	ldrb	r3, [r7, #11]
 800629e:	3301      	adds	r3, #1
 80062a0:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 80062a2:	bf00      	nop
      }
      break;
 80062a4:	e037      	b.n	8006316 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	7c1b      	ldrb	r3, [r3, #16]
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d109      	bne.n	80062c2 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80062b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80062b6:	f107 0208 	add.w	r2, r7, #8
 80062ba:	4610      	mov	r0, r2
 80062bc:	4798      	blx	r3
 80062be:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80062c0:	e029      	b.n	8006316 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80062c2:	6839      	ldr	r1, [r7, #0]
 80062c4:	6878      	ldr	r0, [r7, #4]
 80062c6:	f000 fa2a 	bl	800671e <USBD_CtlError>
        err++;
 80062ca:	7afb      	ldrb	r3, [r7, #11]
 80062cc:	3301      	adds	r3, #1
 80062ce:	72fb      	strb	r3, [r7, #11]
      break;
 80062d0:	e021      	b.n	8006316 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	7c1b      	ldrb	r3, [r3, #16]
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d10d      	bne.n	80062f6 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80062e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80062e2:	f107 0208 	add.w	r2, r7, #8
 80062e6:	4610      	mov	r0, r2
 80062e8:	4798      	blx	r3
 80062ea:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	3301      	adds	r3, #1
 80062f0:	2207      	movs	r2, #7
 80062f2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80062f4:	e00f      	b.n	8006316 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80062f6:	6839      	ldr	r1, [r7, #0]
 80062f8:	6878      	ldr	r0, [r7, #4]
 80062fa:	f000 fa10 	bl	800671e <USBD_CtlError>
        err++;
 80062fe:	7afb      	ldrb	r3, [r7, #11]
 8006300:	3301      	adds	r3, #1
 8006302:	72fb      	strb	r3, [r7, #11]
      break;
 8006304:	e007      	b.n	8006316 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8006306:	6839      	ldr	r1, [r7, #0]
 8006308:	6878      	ldr	r0, [r7, #4]
 800630a:	f000 fa08 	bl	800671e <USBD_CtlError>
      err++;
 800630e:	7afb      	ldrb	r3, [r7, #11]
 8006310:	3301      	adds	r3, #1
 8006312:	72fb      	strb	r3, [r7, #11]
      break;
 8006314:	bf00      	nop
  }

  if (err != 0U)
 8006316:	7afb      	ldrb	r3, [r7, #11]
 8006318:	2b00      	cmp	r3, #0
 800631a:	d11e      	bne.n	800635a <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800631c:	683b      	ldr	r3, [r7, #0]
 800631e:	88db      	ldrh	r3, [r3, #6]
 8006320:	2b00      	cmp	r3, #0
 8006322:	d016      	beq.n	8006352 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8006324:	893b      	ldrh	r3, [r7, #8]
 8006326:	2b00      	cmp	r3, #0
 8006328:	d00e      	beq.n	8006348 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800632a:	683b      	ldr	r3, [r7, #0]
 800632c:	88da      	ldrh	r2, [r3, #6]
 800632e:	893b      	ldrh	r3, [r7, #8]
 8006330:	4293      	cmp	r3, r2
 8006332:	bf28      	it	cs
 8006334:	4613      	movcs	r3, r2
 8006336:	b29b      	uxth	r3, r3
 8006338:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800633a:	893b      	ldrh	r3, [r7, #8]
 800633c:	461a      	mov	r2, r3
 800633e:	68f9      	ldr	r1, [r7, #12]
 8006340:	6878      	ldr	r0, [r7, #4]
 8006342:	f000 fa69 	bl	8006818 <USBD_CtlSendData>
 8006346:	e009      	b.n	800635c <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8006348:	6839      	ldr	r1, [r7, #0]
 800634a:	6878      	ldr	r0, [r7, #4]
 800634c:	f000 f9e7 	bl	800671e <USBD_CtlError>
 8006350:	e004      	b.n	800635c <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8006352:	6878      	ldr	r0, [r7, #4]
 8006354:	f000 faba 	bl	80068cc <USBD_CtlSendStatus>
 8006358:	e000      	b.n	800635c <USBD_GetDescriptor+0x2cc>
    return;
 800635a:	bf00      	nop
  }
}
 800635c:	3710      	adds	r7, #16
 800635e:	46bd      	mov	sp, r7
 8006360:	bd80      	pop	{r7, pc}
 8006362:	bf00      	nop

08006364 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006364:	b580      	push	{r7, lr}
 8006366:	b084      	sub	sp, #16
 8006368:	af00      	add	r7, sp, #0
 800636a:	6078      	str	r0, [r7, #4]
 800636c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800636e:	683b      	ldr	r3, [r7, #0]
 8006370:	889b      	ldrh	r3, [r3, #4]
 8006372:	2b00      	cmp	r3, #0
 8006374:	d131      	bne.n	80063da <USBD_SetAddress+0x76>
 8006376:	683b      	ldr	r3, [r7, #0]
 8006378:	88db      	ldrh	r3, [r3, #6]
 800637a:	2b00      	cmp	r3, #0
 800637c:	d12d      	bne.n	80063da <USBD_SetAddress+0x76>
 800637e:	683b      	ldr	r3, [r7, #0]
 8006380:	885b      	ldrh	r3, [r3, #2]
 8006382:	2b7f      	cmp	r3, #127	@ 0x7f
 8006384:	d829      	bhi.n	80063da <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8006386:	683b      	ldr	r3, [r7, #0]
 8006388:	885b      	ldrh	r3, [r3, #2]
 800638a:	b2db      	uxtb	r3, r3
 800638c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006390:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006398:	b2db      	uxtb	r3, r3
 800639a:	2b03      	cmp	r3, #3
 800639c:	d104      	bne.n	80063a8 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800639e:	6839      	ldr	r1, [r7, #0]
 80063a0:	6878      	ldr	r0, [r7, #4]
 80063a2:	f000 f9bc 	bl	800671e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80063a6:	e01d      	b.n	80063e4 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	7bfa      	ldrb	r2, [r7, #15]
 80063ac:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80063b0:	7bfb      	ldrb	r3, [r7, #15]
 80063b2:	4619      	mov	r1, r3
 80063b4:	6878      	ldr	r0, [r7, #4]
 80063b6:	f000 fe73 	bl	80070a0 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80063ba:	6878      	ldr	r0, [r7, #4]
 80063bc:	f000 fa86 	bl	80068cc <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80063c0:	7bfb      	ldrb	r3, [r7, #15]
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d004      	beq.n	80063d0 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	2202      	movs	r2, #2
 80063ca:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80063ce:	e009      	b.n	80063e4 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	2201      	movs	r2, #1
 80063d4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80063d8:	e004      	b.n	80063e4 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80063da:	6839      	ldr	r1, [r7, #0]
 80063dc:	6878      	ldr	r0, [r7, #4]
 80063de:	f000 f99e 	bl	800671e <USBD_CtlError>
  }
}
 80063e2:	bf00      	nop
 80063e4:	bf00      	nop
 80063e6:	3710      	adds	r7, #16
 80063e8:	46bd      	mov	sp, r7
 80063ea:	bd80      	pop	{r7, pc}

080063ec <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80063ec:	b580      	push	{r7, lr}
 80063ee:	b084      	sub	sp, #16
 80063f0:	af00      	add	r7, sp, #0
 80063f2:	6078      	str	r0, [r7, #4]
 80063f4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80063f6:	2300      	movs	r3, #0
 80063f8:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80063fa:	683b      	ldr	r3, [r7, #0]
 80063fc:	885b      	ldrh	r3, [r3, #2]
 80063fe:	b2da      	uxtb	r2, r3
 8006400:	4b4e      	ldr	r3, [pc, #312]	@ (800653c <USBD_SetConfig+0x150>)
 8006402:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006404:	4b4d      	ldr	r3, [pc, #308]	@ (800653c <USBD_SetConfig+0x150>)
 8006406:	781b      	ldrb	r3, [r3, #0]
 8006408:	2b01      	cmp	r3, #1
 800640a:	d905      	bls.n	8006418 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800640c:	6839      	ldr	r1, [r7, #0]
 800640e:	6878      	ldr	r0, [r7, #4]
 8006410:	f000 f985 	bl	800671e <USBD_CtlError>
    return USBD_FAIL;
 8006414:	2303      	movs	r3, #3
 8006416:	e08c      	b.n	8006532 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800641e:	b2db      	uxtb	r3, r3
 8006420:	2b02      	cmp	r3, #2
 8006422:	d002      	beq.n	800642a <USBD_SetConfig+0x3e>
 8006424:	2b03      	cmp	r3, #3
 8006426:	d029      	beq.n	800647c <USBD_SetConfig+0x90>
 8006428:	e075      	b.n	8006516 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800642a:	4b44      	ldr	r3, [pc, #272]	@ (800653c <USBD_SetConfig+0x150>)
 800642c:	781b      	ldrb	r3, [r3, #0]
 800642e:	2b00      	cmp	r3, #0
 8006430:	d020      	beq.n	8006474 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8006432:	4b42      	ldr	r3, [pc, #264]	@ (800653c <USBD_SetConfig+0x150>)
 8006434:	781b      	ldrb	r3, [r3, #0]
 8006436:	461a      	mov	r2, r3
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800643c:	4b3f      	ldr	r3, [pc, #252]	@ (800653c <USBD_SetConfig+0x150>)
 800643e:	781b      	ldrb	r3, [r3, #0]
 8006440:	4619      	mov	r1, r3
 8006442:	6878      	ldr	r0, [r7, #4]
 8006444:	f7fe ffe3 	bl	800540e <USBD_SetClassConfig>
 8006448:	4603      	mov	r3, r0
 800644a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800644c:	7bfb      	ldrb	r3, [r7, #15]
 800644e:	2b00      	cmp	r3, #0
 8006450:	d008      	beq.n	8006464 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8006452:	6839      	ldr	r1, [r7, #0]
 8006454:	6878      	ldr	r0, [r7, #4]
 8006456:	f000 f962 	bl	800671e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	2202      	movs	r2, #2
 800645e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006462:	e065      	b.n	8006530 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8006464:	6878      	ldr	r0, [r7, #4]
 8006466:	f000 fa31 	bl	80068cc <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	2203      	movs	r2, #3
 800646e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8006472:	e05d      	b.n	8006530 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8006474:	6878      	ldr	r0, [r7, #4]
 8006476:	f000 fa29 	bl	80068cc <USBD_CtlSendStatus>
      break;
 800647a:	e059      	b.n	8006530 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800647c:	4b2f      	ldr	r3, [pc, #188]	@ (800653c <USBD_SetConfig+0x150>)
 800647e:	781b      	ldrb	r3, [r3, #0]
 8006480:	2b00      	cmp	r3, #0
 8006482:	d112      	bne.n	80064aa <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	2202      	movs	r2, #2
 8006488:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800648c:	4b2b      	ldr	r3, [pc, #172]	@ (800653c <USBD_SetConfig+0x150>)
 800648e:	781b      	ldrb	r3, [r3, #0]
 8006490:	461a      	mov	r2, r3
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006496:	4b29      	ldr	r3, [pc, #164]	@ (800653c <USBD_SetConfig+0x150>)
 8006498:	781b      	ldrb	r3, [r3, #0]
 800649a:	4619      	mov	r1, r3
 800649c:	6878      	ldr	r0, [r7, #4]
 800649e:	f7fe ffd2 	bl	8005446 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80064a2:	6878      	ldr	r0, [r7, #4]
 80064a4:	f000 fa12 	bl	80068cc <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80064a8:	e042      	b.n	8006530 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 80064aa:	4b24      	ldr	r3, [pc, #144]	@ (800653c <USBD_SetConfig+0x150>)
 80064ac:	781b      	ldrb	r3, [r3, #0]
 80064ae:	461a      	mov	r2, r3
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	685b      	ldr	r3, [r3, #4]
 80064b4:	429a      	cmp	r2, r3
 80064b6:	d02a      	beq.n	800650e <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	685b      	ldr	r3, [r3, #4]
 80064bc:	b2db      	uxtb	r3, r3
 80064be:	4619      	mov	r1, r3
 80064c0:	6878      	ldr	r0, [r7, #4]
 80064c2:	f7fe ffc0 	bl	8005446 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80064c6:	4b1d      	ldr	r3, [pc, #116]	@ (800653c <USBD_SetConfig+0x150>)
 80064c8:	781b      	ldrb	r3, [r3, #0]
 80064ca:	461a      	mov	r2, r3
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80064d0:	4b1a      	ldr	r3, [pc, #104]	@ (800653c <USBD_SetConfig+0x150>)
 80064d2:	781b      	ldrb	r3, [r3, #0]
 80064d4:	4619      	mov	r1, r3
 80064d6:	6878      	ldr	r0, [r7, #4]
 80064d8:	f7fe ff99 	bl	800540e <USBD_SetClassConfig>
 80064dc:	4603      	mov	r3, r0
 80064de:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80064e0:	7bfb      	ldrb	r3, [r7, #15]
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d00f      	beq.n	8006506 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 80064e6:	6839      	ldr	r1, [r7, #0]
 80064e8:	6878      	ldr	r0, [r7, #4]
 80064ea:	f000 f918 	bl	800671e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	685b      	ldr	r3, [r3, #4]
 80064f2:	b2db      	uxtb	r3, r3
 80064f4:	4619      	mov	r1, r3
 80064f6:	6878      	ldr	r0, [r7, #4]
 80064f8:	f7fe ffa5 	bl	8005446 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	2202      	movs	r2, #2
 8006500:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8006504:	e014      	b.n	8006530 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8006506:	6878      	ldr	r0, [r7, #4]
 8006508:	f000 f9e0 	bl	80068cc <USBD_CtlSendStatus>
      break;
 800650c:	e010      	b.n	8006530 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800650e:	6878      	ldr	r0, [r7, #4]
 8006510:	f000 f9dc 	bl	80068cc <USBD_CtlSendStatus>
      break;
 8006514:	e00c      	b.n	8006530 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8006516:	6839      	ldr	r1, [r7, #0]
 8006518:	6878      	ldr	r0, [r7, #4]
 800651a:	f000 f900 	bl	800671e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800651e:	4b07      	ldr	r3, [pc, #28]	@ (800653c <USBD_SetConfig+0x150>)
 8006520:	781b      	ldrb	r3, [r3, #0]
 8006522:	4619      	mov	r1, r3
 8006524:	6878      	ldr	r0, [r7, #4]
 8006526:	f7fe ff8e 	bl	8005446 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800652a:	2303      	movs	r3, #3
 800652c:	73fb      	strb	r3, [r7, #15]
      break;
 800652e:	bf00      	nop
  }

  return ret;
 8006530:	7bfb      	ldrb	r3, [r7, #15]
}
 8006532:	4618      	mov	r0, r3
 8006534:	3710      	adds	r7, #16
 8006536:	46bd      	mov	sp, r7
 8006538:	bd80      	pop	{r7, pc}
 800653a:	bf00      	nop
 800653c:	200001b0 	.word	0x200001b0

08006540 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006540:	b580      	push	{r7, lr}
 8006542:	b082      	sub	sp, #8
 8006544:	af00      	add	r7, sp, #0
 8006546:	6078      	str	r0, [r7, #4]
 8006548:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800654a:	683b      	ldr	r3, [r7, #0]
 800654c:	88db      	ldrh	r3, [r3, #6]
 800654e:	2b01      	cmp	r3, #1
 8006550:	d004      	beq.n	800655c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8006552:	6839      	ldr	r1, [r7, #0]
 8006554:	6878      	ldr	r0, [r7, #4]
 8006556:	f000 f8e2 	bl	800671e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800655a:	e023      	b.n	80065a4 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006562:	b2db      	uxtb	r3, r3
 8006564:	2b02      	cmp	r3, #2
 8006566:	dc02      	bgt.n	800656e <USBD_GetConfig+0x2e>
 8006568:	2b00      	cmp	r3, #0
 800656a:	dc03      	bgt.n	8006574 <USBD_GetConfig+0x34>
 800656c:	e015      	b.n	800659a <USBD_GetConfig+0x5a>
 800656e:	2b03      	cmp	r3, #3
 8006570:	d00b      	beq.n	800658a <USBD_GetConfig+0x4a>
 8006572:	e012      	b.n	800659a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	2200      	movs	r2, #0
 8006578:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	3308      	adds	r3, #8
 800657e:	2201      	movs	r2, #1
 8006580:	4619      	mov	r1, r3
 8006582:	6878      	ldr	r0, [r7, #4]
 8006584:	f000 f948 	bl	8006818 <USBD_CtlSendData>
        break;
 8006588:	e00c      	b.n	80065a4 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	3304      	adds	r3, #4
 800658e:	2201      	movs	r2, #1
 8006590:	4619      	mov	r1, r3
 8006592:	6878      	ldr	r0, [r7, #4]
 8006594:	f000 f940 	bl	8006818 <USBD_CtlSendData>
        break;
 8006598:	e004      	b.n	80065a4 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800659a:	6839      	ldr	r1, [r7, #0]
 800659c:	6878      	ldr	r0, [r7, #4]
 800659e:	f000 f8be 	bl	800671e <USBD_CtlError>
        break;
 80065a2:	bf00      	nop
}
 80065a4:	bf00      	nop
 80065a6:	3708      	adds	r7, #8
 80065a8:	46bd      	mov	sp, r7
 80065aa:	bd80      	pop	{r7, pc}

080065ac <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80065ac:	b580      	push	{r7, lr}
 80065ae:	b082      	sub	sp, #8
 80065b0:	af00      	add	r7, sp, #0
 80065b2:	6078      	str	r0, [r7, #4]
 80065b4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80065bc:	b2db      	uxtb	r3, r3
 80065be:	3b01      	subs	r3, #1
 80065c0:	2b02      	cmp	r3, #2
 80065c2:	d81e      	bhi.n	8006602 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80065c4:	683b      	ldr	r3, [r7, #0]
 80065c6:	88db      	ldrh	r3, [r3, #6]
 80065c8:	2b02      	cmp	r3, #2
 80065ca:	d004      	beq.n	80065d6 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80065cc:	6839      	ldr	r1, [r7, #0]
 80065ce:	6878      	ldr	r0, [r7, #4]
 80065d0:	f000 f8a5 	bl	800671e <USBD_CtlError>
        break;
 80065d4:	e01a      	b.n	800660c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
#else
      pdev->dev_config_status = 0U;
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	2200      	movs	r2, #0
 80065da:	60da      	str	r2, [r3, #12]
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d005      	beq.n	80065f2 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	68db      	ldr	r3, [r3, #12]
 80065ea:	f043 0202 	orr.w	r2, r3, #2
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	330c      	adds	r3, #12
 80065f6:	2202      	movs	r2, #2
 80065f8:	4619      	mov	r1, r3
 80065fa:	6878      	ldr	r0, [r7, #4]
 80065fc:	f000 f90c 	bl	8006818 <USBD_CtlSendData>
      break;
 8006600:	e004      	b.n	800660c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8006602:	6839      	ldr	r1, [r7, #0]
 8006604:	6878      	ldr	r0, [r7, #4]
 8006606:	f000 f88a 	bl	800671e <USBD_CtlError>
      break;
 800660a:	bf00      	nop
  }
}
 800660c:	bf00      	nop
 800660e:	3708      	adds	r7, #8
 8006610:	46bd      	mov	sp, r7
 8006612:	bd80      	pop	{r7, pc}

08006614 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006614:	b580      	push	{r7, lr}
 8006616:	b082      	sub	sp, #8
 8006618:	af00      	add	r7, sp, #0
 800661a:	6078      	str	r0, [r7, #4]
 800661c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800661e:	683b      	ldr	r3, [r7, #0]
 8006620:	885b      	ldrh	r3, [r3, #2]
 8006622:	2b01      	cmp	r3, #1
 8006624:	d107      	bne.n	8006636 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	2201      	movs	r2, #1
 800662a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800662e:	6878      	ldr	r0, [r7, #4]
 8006630:	f000 f94c 	bl	80068cc <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8006634:	e013      	b.n	800665e <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8006636:	683b      	ldr	r3, [r7, #0]
 8006638:	885b      	ldrh	r3, [r3, #2]
 800663a:	2b02      	cmp	r3, #2
 800663c:	d10b      	bne.n	8006656 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800663e:	683b      	ldr	r3, [r7, #0]
 8006640:	889b      	ldrh	r3, [r3, #4]
 8006642:	0a1b      	lsrs	r3, r3, #8
 8006644:	b29b      	uxth	r3, r3
 8006646:	b2da      	uxtb	r2, r3
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800664e:	6878      	ldr	r0, [r7, #4]
 8006650:	f000 f93c 	bl	80068cc <USBD_CtlSendStatus>
}
 8006654:	e003      	b.n	800665e <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8006656:	6839      	ldr	r1, [r7, #0]
 8006658:	6878      	ldr	r0, [r7, #4]
 800665a:	f000 f860 	bl	800671e <USBD_CtlError>
}
 800665e:	bf00      	nop
 8006660:	3708      	adds	r7, #8
 8006662:	46bd      	mov	sp, r7
 8006664:	bd80      	pop	{r7, pc}

08006666 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006666:	b580      	push	{r7, lr}
 8006668:	b082      	sub	sp, #8
 800666a:	af00      	add	r7, sp, #0
 800666c:	6078      	str	r0, [r7, #4]
 800666e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006676:	b2db      	uxtb	r3, r3
 8006678:	3b01      	subs	r3, #1
 800667a:	2b02      	cmp	r3, #2
 800667c:	d80b      	bhi.n	8006696 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800667e:	683b      	ldr	r3, [r7, #0]
 8006680:	885b      	ldrh	r3, [r3, #2]
 8006682:	2b01      	cmp	r3, #1
 8006684:	d10c      	bne.n	80066a0 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	2200      	movs	r2, #0
 800668a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800668e:	6878      	ldr	r0, [r7, #4]
 8006690:	f000 f91c 	bl	80068cc <USBD_CtlSendStatus>
      }
      break;
 8006694:	e004      	b.n	80066a0 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8006696:	6839      	ldr	r1, [r7, #0]
 8006698:	6878      	ldr	r0, [r7, #4]
 800669a:	f000 f840 	bl	800671e <USBD_CtlError>
      break;
 800669e:	e000      	b.n	80066a2 <USBD_ClrFeature+0x3c>
      break;
 80066a0:	bf00      	nop
  }
}
 80066a2:	bf00      	nop
 80066a4:	3708      	adds	r7, #8
 80066a6:	46bd      	mov	sp, r7
 80066a8:	bd80      	pop	{r7, pc}

080066aa <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80066aa:	b580      	push	{r7, lr}
 80066ac:	b084      	sub	sp, #16
 80066ae:	af00      	add	r7, sp, #0
 80066b0:	6078      	str	r0, [r7, #4]
 80066b2:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80066b4:	683b      	ldr	r3, [r7, #0]
 80066b6:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	781a      	ldrb	r2, [r3, #0]
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	3301      	adds	r3, #1
 80066c4:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	781a      	ldrb	r2, [r3, #0]
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	3301      	adds	r3, #1
 80066d2:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80066d4:	68f8      	ldr	r0, [r7, #12]
 80066d6:	f7ff fa40 	bl	8005b5a <SWAPBYTE>
 80066da:	4603      	mov	r3, r0
 80066dc:	461a      	mov	r2, r3
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	3301      	adds	r3, #1
 80066e6:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	3301      	adds	r3, #1
 80066ec:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80066ee:	68f8      	ldr	r0, [r7, #12]
 80066f0:	f7ff fa33 	bl	8005b5a <SWAPBYTE>
 80066f4:	4603      	mov	r3, r0
 80066f6:	461a      	mov	r2, r3
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	3301      	adds	r3, #1
 8006700:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	3301      	adds	r3, #1
 8006706:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8006708:	68f8      	ldr	r0, [r7, #12]
 800670a:	f7ff fa26 	bl	8005b5a <SWAPBYTE>
 800670e:	4603      	mov	r3, r0
 8006710:	461a      	mov	r2, r3
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	80da      	strh	r2, [r3, #6]
}
 8006716:	bf00      	nop
 8006718:	3710      	adds	r7, #16
 800671a:	46bd      	mov	sp, r7
 800671c:	bd80      	pop	{r7, pc}

0800671e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800671e:	b580      	push	{r7, lr}
 8006720:	b082      	sub	sp, #8
 8006722:	af00      	add	r7, sp, #0
 8006724:	6078      	str	r0, [r7, #4]
 8006726:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8006728:	2180      	movs	r1, #128	@ 0x80
 800672a:	6878      	ldr	r0, [r7, #4]
 800672c:	f000 fc4e 	bl	8006fcc <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8006730:	2100      	movs	r1, #0
 8006732:	6878      	ldr	r0, [r7, #4]
 8006734:	f000 fc4a 	bl	8006fcc <USBD_LL_StallEP>
}
 8006738:	bf00      	nop
 800673a:	3708      	adds	r7, #8
 800673c:	46bd      	mov	sp, r7
 800673e:	bd80      	pop	{r7, pc}

08006740 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8006740:	b580      	push	{r7, lr}
 8006742:	b086      	sub	sp, #24
 8006744:	af00      	add	r7, sp, #0
 8006746:	60f8      	str	r0, [r7, #12]
 8006748:	60b9      	str	r1, [r7, #8]
 800674a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800674c:	2300      	movs	r3, #0
 800674e:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	2b00      	cmp	r3, #0
 8006754:	d042      	beq.n	80067dc <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800675a:	6938      	ldr	r0, [r7, #16]
 800675c:	f000 f842 	bl	80067e4 <USBD_GetLen>
 8006760:	4603      	mov	r3, r0
 8006762:	3301      	adds	r3, #1
 8006764:	005b      	lsls	r3, r3, #1
 8006766:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800676a:	d808      	bhi.n	800677e <USBD_GetString+0x3e>
 800676c:	6938      	ldr	r0, [r7, #16]
 800676e:	f000 f839 	bl	80067e4 <USBD_GetLen>
 8006772:	4603      	mov	r3, r0
 8006774:	3301      	adds	r3, #1
 8006776:	b29b      	uxth	r3, r3
 8006778:	005b      	lsls	r3, r3, #1
 800677a:	b29a      	uxth	r2, r3
 800677c:	e001      	b.n	8006782 <USBD_GetString+0x42>
 800677e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8006786:	7dfb      	ldrb	r3, [r7, #23]
 8006788:	68ba      	ldr	r2, [r7, #8]
 800678a:	4413      	add	r3, r2
 800678c:	687a      	ldr	r2, [r7, #4]
 800678e:	7812      	ldrb	r2, [r2, #0]
 8006790:	701a      	strb	r2, [r3, #0]
  idx++;
 8006792:	7dfb      	ldrb	r3, [r7, #23]
 8006794:	3301      	adds	r3, #1
 8006796:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8006798:	7dfb      	ldrb	r3, [r7, #23]
 800679a:	68ba      	ldr	r2, [r7, #8]
 800679c:	4413      	add	r3, r2
 800679e:	2203      	movs	r2, #3
 80067a0:	701a      	strb	r2, [r3, #0]
  idx++;
 80067a2:	7dfb      	ldrb	r3, [r7, #23]
 80067a4:	3301      	adds	r3, #1
 80067a6:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80067a8:	e013      	b.n	80067d2 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 80067aa:	7dfb      	ldrb	r3, [r7, #23]
 80067ac:	68ba      	ldr	r2, [r7, #8]
 80067ae:	4413      	add	r3, r2
 80067b0:	693a      	ldr	r2, [r7, #16]
 80067b2:	7812      	ldrb	r2, [r2, #0]
 80067b4:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80067b6:	693b      	ldr	r3, [r7, #16]
 80067b8:	3301      	adds	r3, #1
 80067ba:	613b      	str	r3, [r7, #16]
    idx++;
 80067bc:	7dfb      	ldrb	r3, [r7, #23]
 80067be:	3301      	adds	r3, #1
 80067c0:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80067c2:	7dfb      	ldrb	r3, [r7, #23]
 80067c4:	68ba      	ldr	r2, [r7, #8]
 80067c6:	4413      	add	r3, r2
 80067c8:	2200      	movs	r2, #0
 80067ca:	701a      	strb	r2, [r3, #0]
    idx++;
 80067cc:	7dfb      	ldrb	r3, [r7, #23]
 80067ce:	3301      	adds	r3, #1
 80067d0:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80067d2:	693b      	ldr	r3, [r7, #16]
 80067d4:	781b      	ldrb	r3, [r3, #0]
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d1e7      	bne.n	80067aa <USBD_GetString+0x6a>
 80067da:	e000      	b.n	80067de <USBD_GetString+0x9e>
    return;
 80067dc:	bf00      	nop
  }
}
 80067de:	3718      	adds	r7, #24
 80067e0:	46bd      	mov	sp, r7
 80067e2:	bd80      	pop	{r7, pc}

080067e4 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80067e4:	b480      	push	{r7}
 80067e6:	b085      	sub	sp, #20
 80067e8:	af00      	add	r7, sp, #0
 80067ea:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80067ec:	2300      	movs	r3, #0
 80067ee:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80067f4:	e005      	b.n	8006802 <USBD_GetLen+0x1e>
  {
    len++;
 80067f6:	7bfb      	ldrb	r3, [r7, #15]
 80067f8:	3301      	adds	r3, #1
 80067fa:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80067fc:	68bb      	ldr	r3, [r7, #8]
 80067fe:	3301      	adds	r3, #1
 8006800:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8006802:	68bb      	ldr	r3, [r7, #8]
 8006804:	781b      	ldrb	r3, [r3, #0]
 8006806:	2b00      	cmp	r3, #0
 8006808:	d1f5      	bne.n	80067f6 <USBD_GetLen+0x12>
  }

  return len;
 800680a:	7bfb      	ldrb	r3, [r7, #15]
}
 800680c:	4618      	mov	r0, r3
 800680e:	3714      	adds	r7, #20
 8006810:	46bd      	mov	sp, r7
 8006812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006816:	4770      	bx	lr

08006818 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8006818:	b580      	push	{r7, lr}
 800681a:	b084      	sub	sp, #16
 800681c:	af00      	add	r7, sp, #0
 800681e:	60f8      	str	r0, [r7, #12]
 8006820:	60b9      	str	r1, [r7, #8]
 8006822:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	2202      	movs	r2, #2
 8006828:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	687a      	ldr	r2, [r7, #4]
 8006830:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	687a      	ldr	r2, [r7, #4]
 8006836:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	68ba      	ldr	r2, [r7, #8]
 800683c:	2100      	movs	r1, #0
 800683e:	68f8      	ldr	r0, [r7, #12]
 8006840:	f000 fc4d 	bl	80070de <USBD_LL_Transmit>

  return USBD_OK;
 8006844:	2300      	movs	r3, #0
}
 8006846:	4618      	mov	r0, r3
 8006848:	3710      	adds	r7, #16
 800684a:	46bd      	mov	sp, r7
 800684c:	bd80      	pop	{r7, pc}

0800684e <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800684e:	b580      	push	{r7, lr}
 8006850:	b084      	sub	sp, #16
 8006852:	af00      	add	r7, sp, #0
 8006854:	60f8      	str	r0, [r7, #12]
 8006856:	60b9      	str	r1, [r7, #8]
 8006858:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	68ba      	ldr	r2, [r7, #8]
 800685e:	2100      	movs	r1, #0
 8006860:	68f8      	ldr	r0, [r7, #12]
 8006862:	f000 fc3c 	bl	80070de <USBD_LL_Transmit>

  return USBD_OK;
 8006866:	2300      	movs	r3, #0
}
 8006868:	4618      	mov	r0, r3
 800686a:	3710      	adds	r7, #16
 800686c:	46bd      	mov	sp, r7
 800686e:	bd80      	pop	{r7, pc}

08006870 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8006870:	b580      	push	{r7, lr}
 8006872:	b084      	sub	sp, #16
 8006874:	af00      	add	r7, sp, #0
 8006876:	60f8      	str	r0, [r7, #12]
 8006878:	60b9      	str	r1, [r7, #8]
 800687a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	2203      	movs	r2, #3
 8006880:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	687a      	ldr	r2, [r7, #4]
 8006888:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	687a      	ldr	r2, [r7, #4]
 8006890:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	68ba      	ldr	r2, [r7, #8]
 8006898:	2100      	movs	r1, #0
 800689a:	68f8      	ldr	r0, [r7, #12]
 800689c:	f000 fc40 	bl	8007120 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80068a0:	2300      	movs	r3, #0
}
 80068a2:	4618      	mov	r0, r3
 80068a4:	3710      	adds	r7, #16
 80068a6:	46bd      	mov	sp, r7
 80068a8:	bd80      	pop	{r7, pc}

080068aa <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80068aa:	b580      	push	{r7, lr}
 80068ac:	b084      	sub	sp, #16
 80068ae:	af00      	add	r7, sp, #0
 80068b0:	60f8      	str	r0, [r7, #12]
 80068b2:	60b9      	str	r1, [r7, #8]
 80068b4:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	68ba      	ldr	r2, [r7, #8]
 80068ba:	2100      	movs	r1, #0
 80068bc:	68f8      	ldr	r0, [r7, #12]
 80068be:	f000 fc2f 	bl	8007120 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80068c2:	2300      	movs	r3, #0
}
 80068c4:	4618      	mov	r0, r3
 80068c6:	3710      	adds	r7, #16
 80068c8:	46bd      	mov	sp, r7
 80068ca:	bd80      	pop	{r7, pc}

080068cc <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80068cc:	b580      	push	{r7, lr}
 80068ce:	b082      	sub	sp, #8
 80068d0:	af00      	add	r7, sp, #0
 80068d2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	2204      	movs	r2, #4
 80068d8:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80068dc:	2300      	movs	r3, #0
 80068de:	2200      	movs	r2, #0
 80068e0:	2100      	movs	r1, #0
 80068e2:	6878      	ldr	r0, [r7, #4]
 80068e4:	f000 fbfb 	bl	80070de <USBD_LL_Transmit>

  return USBD_OK;
 80068e8:	2300      	movs	r3, #0
}
 80068ea:	4618      	mov	r0, r3
 80068ec:	3708      	adds	r7, #8
 80068ee:	46bd      	mov	sp, r7
 80068f0:	bd80      	pop	{r7, pc}

080068f2 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80068f2:	b580      	push	{r7, lr}
 80068f4:	b082      	sub	sp, #8
 80068f6:	af00      	add	r7, sp, #0
 80068f8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	2205      	movs	r2, #5
 80068fe:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006902:	2300      	movs	r3, #0
 8006904:	2200      	movs	r2, #0
 8006906:	2100      	movs	r1, #0
 8006908:	6878      	ldr	r0, [r7, #4]
 800690a:	f000 fc09 	bl	8007120 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800690e:	2300      	movs	r3, #0
}
 8006910:	4618      	mov	r0, r3
 8006912:	3708      	adds	r7, #8
 8006914:	46bd      	mov	sp, r7
 8006916:	bd80      	pop	{r7, pc}

08006918 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8006918:	b580      	push	{r7, lr}
 800691a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800691c:	2200      	movs	r2, #0
 800691e:	4912      	ldr	r1, [pc, #72]	@ (8006968 <MX_USB_DEVICE_Init+0x50>)
 8006920:	4812      	ldr	r0, [pc, #72]	@ (800696c <MX_USB_DEVICE_Init+0x54>)
 8006922:	f7fe fcf7 	bl	8005314 <USBD_Init>
 8006926:	4603      	mov	r3, r0
 8006928:	2b00      	cmp	r3, #0
 800692a:	d001      	beq.n	8006930 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800692c:	f7f9 ff20 	bl	8000770 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CUSTOM_HID) != USBD_OK)
 8006930:	490f      	ldr	r1, [pc, #60]	@ (8006970 <MX_USB_DEVICE_Init+0x58>)
 8006932:	480e      	ldr	r0, [pc, #56]	@ (800696c <MX_USB_DEVICE_Init+0x54>)
 8006934:	f7fe fd1e 	bl	8005374 <USBD_RegisterClass>
 8006938:	4603      	mov	r3, r0
 800693a:	2b00      	cmp	r3, #0
 800693c:	d001      	beq.n	8006942 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800693e:	f7f9 ff17 	bl	8000770 <Error_Handler>
  }
  if (USBD_CUSTOM_HID_RegisterInterface(&hUsbDeviceFS, &USBD_CustomHID_fops_FS) != USBD_OK)
 8006942:	490c      	ldr	r1, [pc, #48]	@ (8006974 <MX_USB_DEVICE_Init+0x5c>)
 8006944:	4809      	ldr	r0, [pc, #36]	@ (800696c <MX_USB_DEVICE_Init+0x54>)
 8006946:	f7fe fccb 	bl	80052e0 <USBD_CUSTOM_HID_RegisterInterface>
 800694a:	4603      	mov	r3, r0
 800694c:	2b00      	cmp	r3, #0
 800694e:	d001      	beq.n	8006954 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8006950:	f7f9 ff0e 	bl	8000770 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8006954:	4805      	ldr	r0, [pc, #20]	@ (800696c <MX_USB_DEVICE_Init+0x54>)
 8006956:	f7fe fd43 	bl	80053e0 <USBD_Start>
 800695a:	4603      	mov	r3, r0
 800695c:	2b00      	cmp	r3, #0
 800695e:	d001      	beq.n	8006964 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8006960:	f7f9 ff06 	bl	8000770 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8006964:	bf00      	nop
 8006966:	bd80      	pop	{r7, pc}
 8006968:	200000ec 	.word	0x200000ec
 800696c:	200001b4 	.word	0x200001b4
 8006970:	2000000c 	.word	0x2000000c
 8006974:	200000dc 	.word	0x200000dc

08006978 <CUSTOM_HID_Init_FS>:
/**
  * @brief  Initializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_Init_FS(void)
{
 8006978:	b480      	push	{r7}
 800697a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800697c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800697e:	4618      	mov	r0, r3
 8006980:	46bd      	mov	sp, r7
 8006982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006986:	4770      	bx	lr

08006988 <CUSTOM_HID_DeInit_FS>:
/**
  * @brief  DeInitializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_DeInit_FS(void)
{
 8006988:	b480      	push	{r7}
 800698a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 800698c:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800698e:	4618      	mov	r0, r3
 8006990:	46bd      	mov	sp, r7
 8006992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006996:	4770      	bx	lr

08006998 <CUSTOM_HID_OutEvent_FS>:
  * @param  event_idx: Event index
  * @param  state: Event state
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_OutEvent_FS(uint8_t event_idx, uint8_t state)
{
 8006998:	b580      	push	{r7, lr}
 800699a:	b082      	sub	sp, #8
 800699c:	af00      	add	r7, sp, #0
 800699e:	4603      	mov	r3, r0
 80069a0:	460a      	mov	r2, r1
 80069a2:	71fb      	strb	r3, [r7, #7]
 80069a4:	4613      	mov	r3, r2
 80069a6:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN 6 */
  UNUSED(event_idx);
  UNUSED(state);

  /* Start next USB packet transfer once data processing is completed */
  if (USBD_CUSTOM_HID_ReceivePacket(&hUsbDeviceFS) != (uint8_t)USBD_OK)
 80069a8:	4806      	ldr	r0, [pc, #24]	@ (80069c4 <CUSTOM_HID_OutEvent_FS+0x2c>)
 80069aa:	f7fe fc37 	bl	800521c <USBD_CUSTOM_HID_ReceivePacket>
 80069ae:	4603      	mov	r3, r0
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d002      	beq.n	80069ba <CUSTOM_HID_OutEvent_FS+0x22>
  {
    return -1;
 80069b4:	f04f 33ff 	mov.w	r3, #4294967295
 80069b8:	e000      	b.n	80069bc <CUSTOM_HID_OutEvent_FS+0x24>
  }

  return (USBD_OK);
 80069ba:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80069bc:	4618      	mov	r0, r3
 80069be:	3708      	adds	r7, #8
 80069c0:	46bd      	mov	sp, r7
 80069c2:	bd80      	pop	{r7, pc}
 80069c4:	200001b4 	.word	0x200001b4

080069c8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80069c8:	b480      	push	{r7}
 80069ca:	b083      	sub	sp, #12
 80069cc:	af00      	add	r7, sp, #0
 80069ce:	4603      	mov	r3, r0
 80069d0:	6039      	str	r1, [r7, #0]
 80069d2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80069d4:	683b      	ldr	r3, [r7, #0]
 80069d6:	2212      	movs	r2, #18
 80069d8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80069da:	4b03      	ldr	r3, [pc, #12]	@ (80069e8 <USBD_FS_DeviceDescriptor+0x20>)
}
 80069dc:	4618      	mov	r0, r3
 80069de:	370c      	adds	r7, #12
 80069e0:	46bd      	mov	sp, r7
 80069e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e6:	4770      	bx	lr
 80069e8:	20000108 	.word	0x20000108

080069ec <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80069ec:	b480      	push	{r7}
 80069ee:	b083      	sub	sp, #12
 80069f0:	af00      	add	r7, sp, #0
 80069f2:	4603      	mov	r3, r0
 80069f4:	6039      	str	r1, [r7, #0]
 80069f6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80069f8:	683b      	ldr	r3, [r7, #0]
 80069fa:	2204      	movs	r2, #4
 80069fc:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80069fe:	4b03      	ldr	r3, [pc, #12]	@ (8006a0c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8006a00:	4618      	mov	r0, r3
 8006a02:	370c      	adds	r7, #12
 8006a04:	46bd      	mov	sp, r7
 8006a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a0a:	4770      	bx	lr
 8006a0c:	2000011c 	.word	0x2000011c

08006a10 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006a10:	b580      	push	{r7, lr}
 8006a12:	b082      	sub	sp, #8
 8006a14:	af00      	add	r7, sp, #0
 8006a16:	4603      	mov	r3, r0
 8006a18:	6039      	str	r1, [r7, #0]
 8006a1a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006a1c:	79fb      	ldrb	r3, [r7, #7]
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d105      	bne.n	8006a2e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006a22:	683a      	ldr	r2, [r7, #0]
 8006a24:	4907      	ldr	r1, [pc, #28]	@ (8006a44 <USBD_FS_ProductStrDescriptor+0x34>)
 8006a26:	4808      	ldr	r0, [pc, #32]	@ (8006a48 <USBD_FS_ProductStrDescriptor+0x38>)
 8006a28:	f7ff fe8a 	bl	8006740 <USBD_GetString>
 8006a2c:	e004      	b.n	8006a38 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006a2e:	683a      	ldr	r2, [r7, #0]
 8006a30:	4904      	ldr	r1, [pc, #16]	@ (8006a44 <USBD_FS_ProductStrDescriptor+0x34>)
 8006a32:	4805      	ldr	r0, [pc, #20]	@ (8006a48 <USBD_FS_ProductStrDescriptor+0x38>)
 8006a34:	f7ff fe84 	bl	8006740 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006a38:	4b02      	ldr	r3, [pc, #8]	@ (8006a44 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8006a3a:	4618      	mov	r0, r3
 8006a3c:	3708      	adds	r7, #8
 8006a3e:	46bd      	mov	sp, r7
 8006a40:	bd80      	pop	{r7, pc}
 8006a42:	bf00      	nop
 8006a44:	20000490 	.word	0x20000490
 8006a48:	0800725c 	.word	0x0800725c

08006a4c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006a4c:	b580      	push	{r7, lr}
 8006a4e:	b082      	sub	sp, #8
 8006a50:	af00      	add	r7, sp, #0
 8006a52:	4603      	mov	r3, r0
 8006a54:	6039      	str	r1, [r7, #0]
 8006a56:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8006a58:	683a      	ldr	r2, [r7, #0]
 8006a5a:	4904      	ldr	r1, [pc, #16]	@ (8006a6c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8006a5c:	4804      	ldr	r0, [pc, #16]	@ (8006a70 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8006a5e:	f7ff fe6f 	bl	8006740 <USBD_GetString>
  return USBD_StrDesc;
 8006a62:	4b02      	ldr	r3, [pc, #8]	@ (8006a6c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8006a64:	4618      	mov	r0, r3
 8006a66:	3708      	adds	r7, #8
 8006a68:	46bd      	mov	sp, r7
 8006a6a:	bd80      	pop	{r7, pc}
 8006a6c:	20000490 	.word	0x20000490
 8006a70:	0800727c 	.word	0x0800727c

08006a74 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006a74:	b580      	push	{r7, lr}
 8006a76:	b082      	sub	sp, #8
 8006a78:	af00      	add	r7, sp, #0
 8006a7a:	4603      	mov	r3, r0
 8006a7c:	6039      	str	r1, [r7, #0]
 8006a7e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8006a80:	683b      	ldr	r3, [r7, #0]
 8006a82:	221a      	movs	r2, #26
 8006a84:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8006a86:	f000 f843 	bl	8006b10 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8006a8a:	4b02      	ldr	r3, [pc, #8]	@ (8006a94 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8006a8c:	4618      	mov	r0, r3
 8006a8e:	3708      	adds	r7, #8
 8006a90:	46bd      	mov	sp, r7
 8006a92:	bd80      	pop	{r7, pc}
 8006a94:	20000120 	.word	0x20000120

08006a98 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006a98:	b580      	push	{r7, lr}
 8006a9a:	b082      	sub	sp, #8
 8006a9c:	af00      	add	r7, sp, #0
 8006a9e:	4603      	mov	r3, r0
 8006aa0:	6039      	str	r1, [r7, #0]
 8006aa2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8006aa4:	79fb      	ldrb	r3, [r7, #7]
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d105      	bne.n	8006ab6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006aaa:	683a      	ldr	r2, [r7, #0]
 8006aac:	4907      	ldr	r1, [pc, #28]	@ (8006acc <USBD_FS_ConfigStrDescriptor+0x34>)
 8006aae:	4808      	ldr	r0, [pc, #32]	@ (8006ad0 <USBD_FS_ConfigStrDescriptor+0x38>)
 8006ab0:	f7ff fe46 	bl	8006740 <USBD_GetString>
 8006ab4:	e004      	b.n	8006ac0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006ab6:	683a      	ldr	r2, [r7, #0]
 8006ab8:	4904      	ldr	r1, [pc, #16]	@ (8006acc <USBD_FS_ConfigStrDescriptor+0x34>)
 8006aba:	4805      	ldr	r0, [pc, #20]	@ (8006ad0 <USBD_FS_ConfigStrDescriptor+0x38>)
 8006abc:	f7ff fe40 	bl	8006740 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006ac0:	4b02      	ldr	r3, [pc, #8]	@ (8006acc <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8006ac2:	4618      	mov	r0, r3
 8006ac4:	3708      	adds	r7, #8
 8006ac6:	46bd      	mov	sp, r7
 8006ac8:	bd80      	pop	{r7, pc}
 8006aca:	bf00      	nop
 8006acc:	20000490 	.word	0x20000490
 8006ad0:	08007290 	.word	0x08007290

08006ad4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006ad4:	b580      	push	{r7, lr}
 8006ad6:	b082      	sub	sp, #8
 8006ad8:	af00      	add	r7, sp, #0
 8006ada:	4603      	mov	r3, r0
 8006adc:	6039      	str	r1, [r7, #0]
 8006ade:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006ae0:	79fb      	ldrb	r3, [r7, #7]
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d105      	bne.n	8006af2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006ae6:	683a      	ldr	r2, [r7, #0]
 8006ae8:	4907      	ldr	r1, [pc, #28]	@ (8006b08 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8006aea:	4808      	ldr	r0, [pc, #32]	@ (8006b0c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006aec:	f7ff fe28 	bl	8006740 <USBD_GetString>
 8006af0:	e004      	b.n	8006afc <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006af2:	683a      	ldr	r2, [r7, #0]
 8006af4:	4904      	ldr	r1, [pc, #16]	@ (8006b08 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8006af6:	4805      	ldr	r0, [pc, #20]	@ (8006b0c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006af8:	f7ff fe22 	bl	8006740 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006afc:	4b02      	ldr	r3, [pc, #8]	@ (8006b08 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8006afe:	4618      	mov	r0, r3
 8006b00:	3708      	adds	r7, #8
 8006b02:	46bd      	mov	sp, r7
 8006b04:	bd80      	pop	{r7, pc}
 8006b06:	bf00      	nop
 8006b08:	20000490 	.word	0x20000490
 8006b0c:	080072a4 	.word	0x080072a4

08006b10 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8006b10:	b580      	push	{r7, lr}
 8006b12:	b084      	sub	sp, #16
 8006b14:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8006b16:	4b0f      	ldr	r3, [pc, #60]	@ (8006b54 <Get_SerialNum+0x44>)
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8006b1c:	4b0e      	ldr	r3, [pc, #56]	@ (8006b58 <Get_SerialNum+0x48>)
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8006b22:	4b0e      	ldr	r3, [pc, #56]	@ (8006b5c <Get_SerialNum+0x4c>)
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8006b28:	68fa      	ldr	r2, [r7, #12]
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	4413      	add	r3, r2
 8006b2e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d009      	beq.n	8006b4a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8006b36:	2208      	movs	r2, #8
 8006b38:	4909      	ldr	r1, [pc, #36]	@ (8006b60 <Get_SerialNum+0x50>)
 8006b3a:	68f8      	ldr	r0, [r7, #12]
 8006b3c:	f000 f814 	bl	8006b68 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8006b40:	2204      	movs	r2, #4
 8006b42:	4908      	ldr	r1, [pc, #32]	@ (8006b64 <Get_SerialNum+0x54>)
 8006b44:	68b8      	ldr	r0, [r7, #8]
 8006b46:	f000 f80f 	bl	8006b68 <IntToUnicode>
  }
}
 8006b4a:	bf00      	nop
 8006b4c:	3710      	adds	r7, #16
 8006b4e:	46bd      	mov	sp, r7
 8006b50:	bd80      	pop	{r7, pc}
 8006b52:	bf00      	nop
 8006b54:	1fff7a10 	.word	0x1fff7a10
 8006b58:	1fff7a14 	.word	0x1fff7a14
 8006b5c:	1fff7a18 	.word	0x1fff7a18
 8006b60:	20000122 	.word	0x20000122
 8006b64:	20000132 	.word	0x20000132

08006b68 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8006b68:	b480      	push	{r7}
 8006b6a:	b087      	sub	sp, #28
 8006b6c:	af00      	add	r7, sp, #0
 8006b6e:	60f8      	str	r0, [r7, #12]
 8006b70:	60b9      	str	r1, [r7, #8]
 8006b72:	4613      	mov	r3, r2
 8006b74:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8006b76:	2300      	movs	r3, #0
 8006b78:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8006b7a:	2300      	movs	r3, #0
 8006b7c:	75fb      	strb	r3, [r7, #23]
 8006b7e:	e027      	b.n	8006bd0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	0f1b      	lsrs	r3, r3, #28
 8006b84:	2b09      	cmp	r3, #9
 8006b86:	d80b      	bhi.n	8006ba0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	0f1b      	lsrs	r3, r3, #28
 8006b8c:	b2da      	uxtb	r2, r3
 8006b8e:	7dfb      	ldrb	r3, [r7, #23]
 8006b90:	005b      	lsls	r3, r3, #1
 8006b92:	4619      	mov	r1, r3
 8006b94:	68bb      	ldr	r3, [r7, #8]
 8006b96:	440b      	add	r3, r1
 8006b98:	3230      	adds	r2, #48	@ 0x30
 8006b9a:	b2d2      	uxtb	r2, r2
 8006b9c:	701a      	strb	r2, [r3, #0]
 8006b9e:	e00a      	b.n	8006bb6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	0f1b      	lsrs	r3, r3, #28
 8006ba4:	b2da      	uxtb	r2, r3
 8006ba6:	7dfb      	ldrb	r3, [r7, #23]
 8006ba8:	005b      	lsls	r3, r3, #1
 8006baa:	4619      	mov	r1, r3
 8006bac:	68bb      	ldr	r3, [r7, #8]
 8006bae:	440b      	add	r3, r1
 8006bb0:	3237      	adds	r2, #55	@ 0x37
 8006bb2:	b2d2      	uxtb	r2, r2
 8006bb4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	011b      	lsls	r3, r3, #4
 8006bba:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8006bbc:	7dfb      	ldrb	r3, [r7, #23]
 8006bbe:	005b      	lsls	r3, r3, #1
 8006bc0:	3301      	adds	r3, #1
 8006bc2:	68ba      	ldr	r2, [r7, #8]
 8006bc4:	4413      	add	r3, r2
 8006bc6:	2200      	movs	r2, #0
 8006bc8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8006bca:	7dfb      	ldrb	r3, [r7, #23]
 8006bcc:	3301      	adds	r3, #1
 8006bce:	75fb      	strb	r3, [r7, #23]
 8006bd0:	7dfa      	ldrb	r2, [r7, #23]
 8006bd2:	79fb      	ldrb	r3, [r7, #7]
 8006bd4:	429a      	cmp	r2, r3
 8006bd6:	d3d3      	bcc.n	8006b80 <IntToUnicode+0x18>
  }
}
 8006bd8:	bf00      	nop
 8006bda:	bf00      	nop
 8006bdc:	371c      	adds	r7, #28
 8006bde:	46bd      	mov	sp, r7
 8006be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be4:	4770      	bx	lr
	...

08006be8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8006be8:	b580      	push	{r7, lr}
 8006bea:	b08a      	sub	sp, #40	@ 0x28
 8006bec:	af00      	add	r7, sp, #0
 8006bee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006bf0:	f107 0314 	add.w	r3, r7, #20
 8006bf4:	2200      	movs	r2, #0
 8006bf6:	601a      	str	r2, [r3, #0]
 8006bf8:	605a      	str	r2, [r3, #4]
 8006bfa:	609a      	str	r2, [r3, #8]
 8006bfc:	60da      	str	r2, [r3, #12]
 8006bfe:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006c08:	d13a      	bne.n	8006c80 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006c0a:	2300      	movs	r3, #0
 8006c0c:	613b      	str	r3, [r7, #16]
 8006c0e:	4b1e      	ldr	r3, [pc, #120]	@ (8006c88 <HAL_PCD_MspInit+0xa0>)
 8006c10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006c12:	4a1d      	ldr	r2, [pc, #116]	@ (8006c88 <HAL_PCD_MspInit+0xa0>)
 8006c14:	f043 0301 	orr.w	r3, r3, #1
 8006c18:	6313      	str	r3, [r2, #48]	@ 0x30
 8006c1a:	4b1b      	ldr	r3, [pc, #108]	@ (8006c88 <HAL_PCD_MspInit+0xa0>)
 8006c1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006c1e:	f003 0301 	and.w	r3, r3, #1
 8006c22:	613b      	str	r3, [r7, #16]
 8006c24:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8006c26:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8006c2a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006c2c:	2302      	movs	r3, #2
 8006c2e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006c30:	2300      	movs	r3, #0
 8006c32:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006c34:	2303      	movs	r3, #3
 8006c36:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8006c38:	230a      	movs	r3, #10
 8006c3a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006c3c:	f107 0314 	add.w	r3, r7, #20
 8006c40:	4619      	mov	r1, r3
 8006c42:	4812      	ldr	r0, [pc, #72]	@ (8006c8c <HAL_PCD_MspInit+0xa4>)
 8006c44:	f7fa f83a 	bl	8000cbc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8006c48:	4b0f      	ldr	r3, [pc, #60]	@ (8006c88 <HAL_PCD_MspInit+0xa0>)
 8006c4a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006c4c:	4a0e      	ldr	r2, [pc, #56]	@ (8006c88 <HAL_PCD_MspInit+0xa0>)
 8006c4e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006c52:	6353      	str	r3, [r2, #52]	@ 0x34
 8006c54:	2300      	movs	r3, #0
 8006c56:	60fb      	str	r3, [r7, #12]
 8006c58:	4b0b      	ldr	r3, [pc, #44]	@ (8006c88 <HAL_PCD_MspInit+0xa0>)
 8006c5a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006c5c:	4a0a      	ldr	r2, [pc, #40]	@ (8006c88 <HAL_PCD_MspInit+0xa0>)
 8006c5e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006c62:	6453      	str	r3, [r2, #68]	@ 0x44
 8006c64:	4b08      	ldr	r3, [pc, #32]	@ (8006c88 <HAL_PCD_MspInit+0xa0>)
 8006c66:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006c68:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006c6c:	60fb      	str	r3, [r7, #12]
 8006c6e:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8006c70:	2200      	movs	r2, #0
 8006c72:	2100      	movs	r1, #0
 8006c74:	2043      	movs	r0, #67	@ 0x43
 8006c76:	f7f9 ffea 	bl	8000c4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8006c7a:	2043      	movs	r0, #67	@ 0x43
 8006c7c:	f7fa f803 	bl	8000c86 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8006c80:	bf00      	nop
 8006c82:	3728      	adds	r7, #40	@ 0x28
 8006c84:	46bd      	mov	sp, r7
 8006c86:	bd80      	pop	{r7, pc}
 8006c88:	40023800 	.word	0x40023800
 8006c8c:	40020000 	.word	0x40020000

08006c90 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006c90:	b580      	push	{r7, lr}
 8006c92:	b082      	sub	sp, #8
 8006c94:	af00      	add	r7, sp, #0
 8006c96:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8006ca4:	4619      	mov	r1, r3
 8006ca6:	4610      	mov	r0, r2
 8006ca8:	f7fe fbe7 	bl	800547a <USBD_LL_SetupStage>
}
 8006cac:	bf00      	nop
 8006cae:	3708      	adds	r7, #8
 8006cb0:	46bd      	mov	sp, r7
 8006cb2:	bd80      	pop	{r7, pc}

08006cb4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006cb4:	b580      	push	{r7, lr}
 8006cb6:	b082      	sub	sp, #8
 8006cb8:	af00      	add	r7, sp, #0
 8006cba:	6078      	str	r0, [r7, #4]
 8006cbc:	460b      	mov	r3, r1
 8006cbe:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8006cc6:	78fa      	ldrb	r2, [r7, #3]
 8006cc8:	6879      	ldr	r1, [r7, #4]
 8006cca:	4613      	mov	r3, r2
 8006ccc:	00db      	lsls	r3, r3, #3
 8006cce:	4413      	add	r3, r2
 8006cd0:	009b      	lsls	r3, r3, #2
 8006cd2:	440b      	add	r3, r1
 8006cd4:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8006cd8:	681a      	ldr	r2, [r3, #0]
 8006cda:	78fb      	ldrb	r3, [r7, #3]
 8006cdc:	4619      	mov	r1, r3
 8006cde:	f7fe fc21 	bl	8005524 <USBD_LL_DataOutStage>
}
 8006ce2:	bf00      	nop
 8006ce4:	3708      	adds	r7, #8
 8006ce6:	46bd      	mov	sp, r7
 8006ce8:	bd80      	pop	{r7, pc}

08006cea <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006cea:	b580      	push	{r7, lr}
 8006cec:	b082      	sub	sp, #8
 8006cee:	af00      	add	r7, sp, #0
 8006cf0:	6078      	str	r0, [r7, #4]
 8006cf2:	460b      	mov	r3, r1
 8006cf4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8006cfc:	78fa      	ldrb	r2, [r7, #3]
 8006cfe:	6879      	ldr	r1, [r7, #4]
 8006d00:	4613      	mov	r3, r2
 8006d02:	00db      	lsls	r3, r3, #3
 8006d04:	4413      	add	r3, r2
 8006d06:	009b      	lsls	r3, r3, #2
 8006d08:	440b      	add	r3, r1
 8006d0a:	3320      	adds	r3, #32
 8006d0c:	681a      	ldr	r2, [r3, #0]
 8006d0e:	78fb      	ldrb	r3, [r7, #3]
 8006d10:	4619      	mov	r1, r3
 8006d12:	f7fe fcba 	bl	800568a <USBD_LL_DataInStage>
}
 8006d16:	bf00      	nop
 8006d18:	3708      	adds	r7, #8
 8006d1a:	46bd      	mov	sp, r7
 8006d1c:	bd80      	pop	{r7, pc}

08006d1e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006d1e:	b580      	push	{r7, lr}
 8006d20:	b082      	sub	sp, #8
 8006d22:	af00      	add	r7, sp, #0
 8006d24:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8006d2c:	4618      	mov	r0, r3
 8006d2e:	f7fe fdf4 	bl	800591a <USBD_LL_SOF>
}
 8006d32:	bf00      	nop
 8006d34:	3708      	adds	r7, #8
 8006d36:	46bd      	mov	sp, r7
 8006d38:	bd80      	pop	{r7, pc}

08006d3a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006d3a:	b580      	push	{r7, lr}
 8006d3c:	b084      	sub	sp, #16
 8006d3e:	af00      	add	r7, sp, #0
 8006d40:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8006d42:	2301      	movs	r3, #1
 8006d44:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	79db      	ldrb	r3, [r3, #7]
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d102      	bne.n	8006d54 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8006d4e:	2300      	movs	r3, #0
 8006d50:	73fb      	strb	r3, [r7, #15]
 8006d52:	e008      	b.n	8006d66 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	79db      	ldrb	r3, [r3, #7]
 8006d58:	2b02      	cmp	r3, #2
 8006d5a:	d102      	bne.n	8006d62 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8006d5c:	2301      	movs	r3, #1
 8006d5e:	73fb      	strb	r3, [r7, #15]
 8006d60:	e001      	b.n	8006d66 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8006d62:	f7f9 fd05 	bl	8000770 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8006d6c:	7bfa      	ldrb	r2, [r7, #15]
 8006d6e:	4611      	mov	r1, r2
 8006d70:	4618      	mov	r0, r3
 8006d72:	f7fe fd8e 	bl	8005892 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8006d7c:	4618      	mov	r0, r3
 8006d7e:	f7fe fd36 	bl	80057ee <USBD_LL_Reset>
}
 8006d82:	bf00      	nop
 8006d84:	3710      	adds	r7, #16
 8006d86:	46bd      	mov	sp, r7
 8006d88:	bd80      	pop	{r7, pc}
	...

08006d8c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006d8c:	b580      	push	{r7, lr}
 8006d8e:	b082      	sub	sp, #8
 8006d90:	af00      	add	r7, sp, #0
 8006d92:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8006d9a:	4618      	mov	r0, r3
 8006d9c:	f7fe fd89 	bl	80058b2 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	687a      	ldr	r2, [r7, #4]
 8006dac:	6812      	ldr	r2, [r2, #0]
 8006dae:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8006db2:	f043 0301 	orr.w	r3, r3, #1
 8006db6:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	7adb      	ldrb	r3, [r3, #11]
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d005      	beq.n	8006dcc <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8006dc0:	4b04      	ldr	r3, [pc, #16]	@ (8006dd4 <HAL_PCD_SuspendCallback+0x48>)
 8006dc2:	691b      	ldr	r3, [r3, #16]
 8006dc4:	4a03      	ldr	r2, [pc, #12]	@ (8006dd4 <HAL_PCD_SuspendCallback+0x48>)
 8006dc6:	f043 0306 	orr.w	r3, r3, #6
 8006dca:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8006dcc:	bf00      	nop
 8006dce:	3708      	adds	r7, #8
 8006dd0:	46bd      	mov	sp, r7
 8006dd2:	bd80      	pop	{r7, pc}
 8006dd4:	e000ed00 	.word	0xe000ed00

08006dd8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006dd8:	b580      	push	{r7, lr}
 8006dda:	b082      	sub	sp, #8
 8006ddc:	af00      	add	r7, sp, #0
 8006dde:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8006de6:	4618      	mov	r0, r3
 8006de8:	f7fe fd7f 	bl	80058ea <USBD_LL_Resume>
}
 8006dec:	bf00      	nop
 8006dee:	3708      	adds	r7, #8
 8006df0:	46bd      	mov	sp, r7
 8006df2:	bd80      	pop	{r7, pc}

08006df4 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006df4:	b580      	push	{r7, lr}
 8006df6:	b082      	sub	sp, #8
 8006df8:	af00      	add	r7, sp, #0
 8006dfa:	6078      	str	r0, [r7, #4]
 8006dfc:	460b      	mov	r3, r1
 8006dfe:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8006e06:	78fa      	ldrb	r2, [r7, #3]
 8006e08:	4611      	mov	r1, r2
 8006e0a:	4618      	mov	r0, r3
 8006e0c:	f7fe fdd7 	bl	80059be <USBD_LL_IsoOUTIncomplete>
}
 8006e10:	bf00      	nop
 8006e12:	3708      	adds	r7, #8
 8006e14:	46bd      	mov	sp, r7
 8006e16:	bd80      	pop	{r7, pc}

08006e18 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006e18:	b580      	push	{r7, lr}
 8006e1a:	b082      	sub	sp, #8
 8006e1c:	af00      	add	r7, sp, #0
 8006e1e:	6078      	str	r0, [r7, #4]
 8006e20:	460b      	mov	r3, r1
 8006e22:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8006e2a:	78fa      	ldrb	r2, [r7, #3]
 8006e2c:	4611      	mov	r1, r2
 8006e2e:	4618      	mov	r0, r3
 8006e30:	f7fe fd93 	bl	800595a <USBD_LL_IsoINIncomplete>
}
 8006e34:	bf00      	nop
 8006e36:	3708      	adds	r7, #8
 8006e38:	46bd      	mov	sp, r7
 8006e3a:	bd80      	pop	{r7, pc}

08006e3c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006e3c:	b580      	push	{r7, lr}
 8006e3e:	b082      	sub	sp, #8
 8006e40:	af00      	add	r7, sp, #0
 8006e42:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8006e4a:	4618      	mov	r0, r3
 8006e4c:	f7fe fde9 	bl	8005a22 <USBD_LL_DevConnected>
}
 8006e50:	bf00      	nop
 8006e52:	3708      	adds	r7, #8
 8006e54:	46bd      	mov	sp, r7
 8006e56:	bd80      	pop	{r7, pc}

08006e58 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006e58:	b580      	push	{r7, lr}
 8006e5a:	b082      	sub	sp, #8
 8006e5c:	af00      	add	r7, sp, #0
 8006e5e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8006e66:	4618      	mov	r0, r3
 8006e68:	f7fe fde6 	bl	8005a38 <USBD_LL_DevDisconnected>
}
 8006e6c:	bf00      	nop
 8006e6e:	3708      	adds	r7, #8
 8006e70:	46bd      	mov	sp, r7
 8006e72:	bd80      	pop	{r7, pc}

08006e74 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8006e74:	b580      	push	{r7, lr}
 8006e76:	b082      	sub	sp, #8
 8006e78:	af00      	add	r7, sp, #0
 8006e7a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	781b      	ldrb	r3, [r3, #0]
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d13c      	bne.n	8006efe <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8006e84:	4a20      	ldr	r2, [pc, #128]	@ (8006f08 <USBD_LL_Init+0x94>)
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	4a1e      	ldr	r2, [pc, #120]	@ (8006f08 <USBD_LL_Init+0x94>)
 8006e90:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8006e94:	4b1c      	ldr	r3, [pc, #112]	@ (8006f08 <USBD_LL_Init+0x94>)
 8006e96:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8006e9a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8006e9c:	4b1a      	ldr	r3, [pc, #104]	@ (8006f08 <USBD_LL_Init+0x94>)
 8006e9e:	2204      	movs	r2, #4
 8006ea0:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8006ea2:	4b19      	ldr	r3, [pc, #100]	@ (8006f08 <USBD_LL_Init+0x94>)
 8006ea4:	2202      	movs	r2, #2
 8006ea6:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8006ea8:	4b17      	ldr	r3, [pc, #92]	@ (8006f08 <USBD_LL_Init+0x94>)
 8006eaa:	2200      	movs	r2, #0
 8006eac:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8006eae:	4b16      	ldr	r3, [pc, #88]	@ (8006f08 <USBD_LL_Init+0x94>)
 8006eb0:	2202      	movs	r2, #2
 8006eb2:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8006eb4:	4b14      	ldr	r3, [pc, #80]	@ (8006f08 <USBD_LL_Init+0x94>)
 8006eb6:	2200      	movs	r2, #0
 8006eb8:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8006eba:	4b13      	ldr	r3, [pc, #76]	@ (8006f08 <USBD_LL_Init+0x94>)
 8006ebc:	2200      	movs	r2, #0
 8006ebe:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8006ec0:	4b11      	ldr	r3, [pc, #68]	@ (8006f08 <USBD_LL_Init+0x94>)
 8006ec2:	2200      	movs	r2, #0
 8006ec4:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8006ec6:	4b10      	ldr	r3, [pc, #64]	@ (8006f08 <USBD_LL_Init+0x94>)
 8006ec8:	2200      	movs	r2, #0
 8006eca:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8006ecc:	4b0e      	ldr	r3, [pc, #56]	@ (8006f08 <USBD_LL_Init+0x94>)
 8006ece:	2200      	movs	r2, #0
 8006ed0:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8006ed2:	480d      	ldr	r0, [pc, #52]	@ (8006f08 <USBD_LL_Init+0x94>)
 8006ed4:	f7fa f88e 	bl	8000ff4 <HAL_PCD_Init>
 8006ed8:	4603      	mov	r3, r0
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d001      	beq.n	8006ee2 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8006ede:	f7f9 fc47 	bl	8000770 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8006ee2:	2180      	movs	r1, #128	@ 0x80
 8006ee4:	4808      	ldr	r0, [pc, #32]	@ (8006f08 <USBD_LL_Init+0x94>)
 8006ee6:	f7fb faa2 	bl	800242e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8006eea:	2240      	movs	r2, #64	@ 0x40
 8006eec:	2100      	movs	r1, #0
 8006eee:	4806      	ldr	r0, [pc, #24]	@ (8006f08 <USBD_LL_Init+0x94>)
 8006ef0:	f7fb fa56 	bl	80023a0 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8006ef4:	2280      	movs	r2, #128	@ 0x80
 8006ef6:	2101      	movs	r1, #1
 8006ef8:	4803      	ldr	r0, [pc, #12]	@ (8006f08 <USBD_LL_Init+0x94>)
 8006efa:	f7fb fa51 	bl	80023a0 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8006efe:	2300      	movs	r3, #0
}
 8006f00:	4618      	mov	r0, r3
 8006f02:	3708      	adds	r7, #8
 8006f04:	46bd      	mov	sp, r7
 8006f06:	bd80      	pop	{r7, pc}
 8006f08:	20000690 	.word	0x20000690

08006f0c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8006f0c:	b580      	push	{r7, lr}
 8006f0e:	b084      	sub	sp, #16
 8006f10:	af00      	add	r7, sp, #0
 8006f12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006f14:	2300      	movs	r3, #0
 8006f16:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006f18:	2300      	movs	r3, #0
 8006f1a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8006f22:	4618      	mov	r0, r3
 8006f24:	f7fa f975 	bl	8001212 <HAL_PCD_Start>
 8006f28:	4603      	mov	r3, r0
 8006f2a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006f2c:	7bfb      	ldrb	r3, [r7, #15]
 8006f2e:	4618      	mov	r0, r3
 8006f30:	f000 f930 	bl	8007194 <USBD_Get_USB_Status>
 8006f34:	4603      	mov	r3, r0
 8006f36:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006f38:	7bbb      	ldrb	r3, [r7, #14]
}
 8006f3a:	4618      	mov	r0, r3
 8006f3c:	3710      	adds	r7, #16
 8006f3e:	46bd      	mov	sp, r7
 8006f40:	bd80      	pop	{r7, pc}

08006f42 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8006f42:	b580      	push	{r7, lr}
 8006f44:	b084      	sub	sp, #16
 8006f46:	af00      	add	r7, sp, #0
 8006f48:	6078      	str	r0, [r7, #4]
 8006f4a:	4608      	mov	r0, r1
 8006f4c:	4611      	mov	r1, r2
 8006f4e:	461a      	mov	r2, r3
 8006f50:	4603      	mov	r3, r0
 8006f52:	70fb      	strb	r3, [r7, #3]
 8006f54:	460b      	mov	r3, r1
 8006f56:	70bb      	strb	r3, [r7, #2]
 8006f58:	4613      	mov	r3, r2
 8006f5a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006f5c:	2300      	movs	r3, #0
 8006f5e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006f60:	2300      	movs	r3, #0
 8006f62:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8006f6a:	78bb      	ldrb	r3, [r7, #2]
 8006f6c:	883a      	ldrh	r2, [r7, #0]
 8006f6e:	78f9      	ldrb	r1, [r7, #3]
 8006f70:	f7fa fe49 	bl	8001c06 <HAL_PCD_EP_Open>
 8006f74:	4603      	mov	r3, r0
 8006f76:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006f78:	7bfb      	ldrb	r3, [r7, #15]
 8006f7a:	4618      	mov	r0, r3
 8006f7c:	f000 f90a 	bl	8007194 <USBD_Get_USB_Status>
 8006f80:	4603      	mov	r3, r0
 8006f82:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006f84:	7bbb      	ldrb	r3, [r7, #14]
}
 8006f86:	4618      	mov	r0, r3
 8006f88:	3710      	adds	r7, #16
 8006f8a:	46bd      	mov	sp, r7
 8006f8c:	bd80      	pop	{r7, pc}

08006f8e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006f8e:	b580      	push	{r7, lr}
 8006f90:	b084      	sub	sp, #16
 8006f92:	af00      	add	r7, sp, #0
 8006f94:	6078      	str	r0, [r7, #4]
 8006f96:	460b      	mov	r3, r1
 8006f98:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006f9a:	2300      	movs	r3, #0
 8006f9c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006f9e:	2300      	movs	r3, #0
 8006fa0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8006fa8:	78fa      	ldrb	r2, [r7, #3]
 8006faa:	4611      	mov	r1, r2
 8006fac:	4618      	mov	r0, r3
 8006fae:	f7fa fe94 	bl	8001cda <HAL_PCD_EP_Close>
 8006fb2:	4603      	mov	r3, r0
 8006fb4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006fb6:	7bfb      	ldrb	r3, [r7, #15]
 8006fb8:	4618      	mov	r0, r3
 8006fba:	f000 f8eb 	bl	8007194 <USBD_Get_USB_Status>
 8006fbe:	4603      	mov	r3, r0
 8006fc0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006fc2:	7bbb      	ldrb	r3, [r7, #14]
}
 8006fc4:	4618      	mov	r0, r3
 8006fc6:	3710      	adds	r7, #16
 8006fc8:	46bd      	mov	sp, r7
 8006fca:	bd80      	pop	{r7, pc}

08006fcc <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006fcc:	b580      	push	{r7, lr}
 8006fce:	b084      	sub	sp, #16
 8006fd0:	af00      	add	r7, sp, #0
 8006fd2:	6078      	str	r0, [r7, #4]
 8006fd4:	460b      	mov	r3, r1
 8006fd6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006fd8:	2300      	movs	r3, #0
 8006fda:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006fdc:	2300      	movs	r3, #0
 8006fde:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8006fe6:	78fa      	ldrb	r2, [r7, #3]
 8006fe8:	4611      	mov	r1, r2
 8006fea:	4618      	mov	r0, r3
 8006fec:	f7fa ff34 	bl	8001e58 <HAL_PCD_EP_SetStall>
 8006ff0:	4603      	mov	r3, r0
 8006ff2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006ff4:	7bfb      	ldrb	r3, [r7, #15]
 8006ff6:	4618      	mov	r0, r3
 8006ff8:	f000 f8cc 	bl	8007194 <USBD_Get_USB_Status>
 8006ffc:	4603      	mov	r3, r0
 8006ffe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007000:	7bbb      	ldrb	r3, [r7, #14]
}
 8007002:	4618      	mov	r0, r3
 8007004:	3710      	adds	r7, #16
 8007006:	46bd      	mov	sp, r7
 8007008:	bd80      	pop	{r7, pc}

0800700a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800700a:	b580      	push	{r7, lr}
 800700c:	b084      	sub	sp, #16
 800700e:	af00      	add	r7, sp, #0
 8007010:	6078      	str	r0, [r7, #4]
 8007012:	460b      	mov	r3, r1
 8007014:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007016:	2300      	movs	r3, #0
 8007018:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800701a:	2300      	movs	r3, #0
 800701c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007024:	78fa      	ldrb	r2, [r7, #3]
 8007026:	4611      	mov	r1, r2
 8007028:	4618      	mov	r0, r3
 800702a:	f7fa ff78 	bl	8001f1e <HAL_PCD_EP_ClrStall>
 800702e:	4603      	mov	r3, r0
 8007030:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007032:	7bfb      	ldrb	r3, [r7, #15]
 8007034:	4618      	mov	r0, r3
 8007036:	f000 f8ad 	bl	8007194 <USBD_Get_USB_Status>
 800703a:	4603      	mov	r3, r0
 800703c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800703e:	7bbb      	ldrb	r3, [r7, #14]
}
 8007040:	4618      	mov	r0, r3
 8007042:	3710      	adds	r7, #16
 8007044:	46bd      	mov	sp, r7
 8007046:	bd80      	pop	{r7, pc}

08007048 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007048:	b480      	push	{r7}
 800704a:	b085      	sub	sp, #20
 800704c:	af00      	add	r7, sp, #0
 800704e:	6078      	str	r0, [r7, #4]
 8007050:	460b      	mov	r3, r1
 8007052:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800705a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800705c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007060:	2b00      	cmp	r3, #0
 8007062:	da0b      	bge.n	800707c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8007064:	78fb      	ldrb	r3, [r7, #3]
 8007066:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800706a:	68f9      	ldr	r1, [r7, #12]
 800706c:	4613      	mov	r3, r2
 800706e:	00db      	lsls	r3, r3, #3
 8007070:	4413      	add	r3, r2
 8007072:	009b      	lsls	r3, r3, #2
 8007074:	440b      	add	r3, r1
 8007076:	3316      	adds	r3, #22
 8007078:	781b      	ldrb	r3, [r3, #0]
 800707a:	e00b      	b.n	8007094 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800707c:	78fb      	ldrb	r3, [r7, #3]
 800707e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007082:	68f9      	ldr	r1, [r7, #12]
 8007084:	4613      	mov	r3, r2
 8007086:	00db      	lsls	r3, r3, #3
 8007088:	4413      	add	r3, r2
 800708a:	009b      	lsls	r3, r3, #2
 800708c:	440b      	add	r3, r1
 800708e:	f203 2356 	addw	r3, r3, #598	@ 0x256
 8007092:	781b      	ldrb	r3, [r3, #0]
  }
}
 8007094:	4618      	mov	r0, r3
 8007096:	3714      	adds	r7, #20
 8007098:	46bd      	mov	sp, r7
 800709a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800709e:	4770      	bx	lr

080070a0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80070a0:	b580      	push	{r7, lr}
 80070a2:	b084      	sub	sp, #16
 80070a4:	af00      	add	r7, sp, #0
 80070a6:	6078      	str	r0, [r7, #4]
 80070a8:	460b      	mov	r3, r1
 80070aa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80070ac:	2300      	movs	r3, #0
 80070ae:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80070b0:	2300      	movs	r3, #0
 80070b2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80070ba:	78fa      	ldrb	r2, [r7, #3]
 80070bc:	4611      	mov	r1, r2
 80070be:	4618      	mov	r0, r3
 80070c0:	f7fa fd7d 	bl	8001bbe <HAL_PCD_SetAddress>
 80070c4:	4603      	mov	r3, r0
 80070c6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80070c8:	7bfb      	ldrb	r3, [r7, #15]
 80070ca:	4618      	mov	r0, r3
 80070cc:	f000 f862 	bl	8007194 <USBD_Get_USB_Status>
 80070d0:	4603      	mov	r3, r0
 80070d2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80070d4:	7bbb      	ldrb	r3, [r7, #14]
}
 80070d6:	4618      	mov	r0, r3
 80070d8:	3710      	adds	r7, #16
 80070da:	46bd      	mov	sp, r7
 80070dc:	bd80      	pop	{r7, pc}

080070de <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80070de:	b580      	push	{r7, lr}
 80070e0:	b086      	sub	sp, #24
 80070e2:	af00      	add	r7, sp, #0
 80070e4:	60f8      	str	r0, [r7, #12]
 80070e6:	607a      	str	r2, [r7, #4]
 80070e8:	603b      	str	r3, [r7, #0]
 80070ea:	460b      	mov	r3, r1
 80070ec:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80070ee:	2300      	movs	r3, #0
 80070f0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80070f2:	2300      	movs	r3, #0
 80070f4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80070fc:	7af9      	ldrb	r1, [r7, #11]
 80070fe:	683b      	ldr	r3, [r7, #0]
 8007100:	687a      	ldr	r2, [r7, #4]
 8007102:	f7fa fe6f 	bl	8001de4 <HAL_PCD_EP_Transmit>
 8007106:	4603      	mov	r3, r0
 8007108:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800710a:	7dfb      	ldrb	r3, [r7, #23]
 800710c:	4618      	mov	r0, r3
 800710e:	f000 f841 	bl	8007194 <USBD_Get_USB_Status>
 8007112:	4603      	mov	r3, r0
 8007114:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007116:	7dbb      	ldrb	r3, [r7, #22]
}
 8007118:	4618      	mov	r0, r3
 800711a:	3718      	adds	r7, #24
 800711c:	46bd      	mov	sp, r7
 800711e:	bd80      	pop	{r7, pc}

08007120 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007120:	b580      	push	{r7, lr}
 8007122:	b086      	sub	sp, #24
 8007124:	af00      	add	r7, sp, #0
 8007126:	60f8      	str	r0, [r7, #12]
 8007128:	607a      	str	r2, [r7, #4]
 800712a:	603b      	str	r3, [r7, #0]
 800712c:	460b      	mov	r3, r1
 800712e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007130:	2300      	movs	r3, #0
 8007132:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007134:	2300      	movs	r3, #0
 8007136:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800713e:	7af9      	ldrb	r1, [r7, #11]
 8007140:	683b      	ldr	r3, [r7, #0]
 8007142:	687a      	ldr	r2, [r7, #4]
 8007144:	f7fa fe13 	bl	8001d6e <HAL_PCD_EP_Receive>
 8007148:	4603      	mov	r3, r0
 800714a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800714c:	7dfb      	ldrb	r3, [r7, #23]
 800714e:	4618      	mov	r0, r3
 8007150:	f000 f820 	bl	8007194 <USBD_Get_USB_Status>
 8007154:	4603      	mov	r3, r0
 8007156:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007158:	7dbb      	ldrb	r3, [r7, #22]
}
 800715a:	4618      	mov	r0, r3
 800715c:	3718      	adds	r7, #24
 800715e:	46bd      	mov	sp, r7
 8007160:	bd80      	pop	{r7, pc}
	...

08007164 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8007164:	b480      	push	{r7}
 8007166:	b083      	sub	sp, #12
 8007168:	af00      	add	r7, sp, #0
 800716a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CUSTOM_HID_HandleTypeDef)/4+1)];/* On 32-bit boundary */
  return mem;
 800716c:	4b03      	ldr	r3, [pc, #12]	@ (800717c <USBD_static_malloc+0x18>)
}
 800716e:	4618      	mov	r0, r3
 8007170:	370c      	adds	r7, #12
 8007172:	46bd      	mov	sp, r7
 8007174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007178:	4770      	bx	lr
 800717a:	bf00      	nop
 800717c:	20000b74 	.word	0x20000b74

08007180 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8007180:	b480      	push	{r7}
 8007182:	b083      	sub	sp, #12
 8007184:	af00      	add	r7, sp, #0
 8007186:	6078      	str	r0, [r7, #4]

}
 8007188:	bf00      	nop
 800718a:	370c      	adds	r7, #12
 800718c:	46bd      	mov	sp, r7
 800718e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007192:	4770      	bx	lr

08007194 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007194:	b480      	push	{r7}
 8007196:	b085      	sub	sp, #20
 8007198:	af00      	add	r7, sp, #0
 800719a:	4603      	mov	r3, r0
 800719c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800719e:	2300      	movs	r3, #0
 80071a0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80071a2:	79fb      	ldrb	r3, [r7, #7]
 80071a4:	2b03      	cmp	r3, #3
 80071a6:	d817      	bhi.n	80071d8 <USBD_Get_USB_Status+0x44>
 80071a8:	a201      	add	r2, pc, #4	@ (adr r2, 80071b0 <USBD_Get_USB_Status+0x1c>)
 80071aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071ae:	bf00      	nop
 80071b0:	080071c1 	.word	0x080071c1
 80071b4:	080071c7 	.word	0x080071c7
 80071b8:	080071cd 	.word	0x080071cd
 80071bc:	080071d3 	.word	0x080071d3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80071c0:	2300      	movs	r3, #0
 80071c2:	73fb      	strb	r3, [r7, #15]
    break;
 80071c4:	e00b      	b.n	80071de <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80071c6:	2303      	movs	r3, #3
 80071c8:	73fb      	strb	r3, [r7, #15]
    break;
 80071ca:	e008      	b.n	80071de <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80071cc:	2301      	movs	r3, #1
 80071ce:	73fb      	strb	r3, [r7, #15]
    break;
 80071d0:	e005      	b.n	80071de <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80071d2:	2303      	movs	r3, #3
 80071d4:	73fb      	strb	r3, [r7, #15]
    break;
 80071d6:	e002      	b.n	80071de <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80071d8:	2303      	movs	r3, #3
 80071da:	73fb      	strb	r3, [r7, #15]
    break;
 80071dc:	bf00      	nop
  }
  return usb_status;
 80071de:	7bfb      	ldrb	r3, [r7, #15]
}
 80071e0:	4618      	mov	r0, r3
 80071e2:	3714      	adds	r7, #20
 80071e4:	46bd      	mov	sp, r7
 80071e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ea:	4770      	bx	lr

080071ec <memset>:
 80071ec:	4402      	add	r2, r0
 80071ee:	4603      	mov	r3, r0
 80071f0:	4293      	cmp	r3, r2
 80071f2:	d100      	bne.n	80071f6 <memset+0xa>
 80071f4:	4770      	bx	lr
 80071f6:	f803 1b01 	strb.w	r1, [r3], #1
 80071fa:	e7f9      	b.n	80071f0 <memset+0x4>

080071fc <__libc_init_array>:
 80071fc:	b570      	push	{r4, r5, r6, lr}
 80071fe:	4d0d      	ldr	r5, [pc, #52]	@ (8007234 <__libc_init_array+0x38>)
 8007200:	4c0d      	ldr	r4, [pc, #52]	@ (8007238 <__libc_init_array+0x3c>)
 8007202:	1b64      	subs	r4, r4, r5
 8007204:	10a4      	asrs	r4, r4, #2
 8007206:	2600      	movs	r6, #0
 8007208:	42a6      	cmp	r6, r4
 800720a:	d109      	bne.n	8007220 <__libc_init_array+0x24>
 800720c:	4d0b      	ldr	r5, [pc, #44]	@ (800723c <__libc_init_array+0x40>)
 800720e:	4c0c      	ldr	r4, [pc, #48]	@ (8007240 <__libc_init_array+0x44>)
 8007210:	f000 f818 	bl	8007244 <_init>
 8007214:	1b64      	subs	r4, r4, r5
 8007216:	10a4      	asrs	r4, r4, #2
 8007218:	2600      	movs	r6, #0
 800721a:	42a6      	cmp	r6, r4
 800721c:	d105      	bne.n	800722a <__libc_init_array+0x2e>
 800721e:	bd70      	pop	{r4, r5, r6, pc}
 8007220:	f855 3b04 	ldr.w	r3, [r5], #4
 8007224:	4798      	blx	r3
 8007226:	3601      	adds	r6, #1
 8007228:	e7ee      	b.n	8007208 <__libc_init_array+0xc>
 800722a:	f855 3b04 	ldr.w	r3, [r5], #4
 800722e:	4798      	blx	r3
 8007230:	3601      	adds	r6, #1
 8007232:	e7f2      	b.n	800721a <__libc_init_array+0x1e>
 8007234:	080072d4 	.word	0x080072d4
 8007238:	080072d4 	.word	0x080072d4
 800723c:	080072d4 	.word	0x080072d4
 8007240:	080072d8 	.word	0x080072d8

08007244 <_init>:
 8007244:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007246:	bf00      	nop
 8007248:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800724a:	bc08      	pop	{r3}
 800724c:	469e      	mov	lr, r3
 800724e:	4770      	bx	lr

08007250 <_fini>:
 8007250:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007252:	bf00      	nop
 8007254:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007256:	bc08      	pop	{r3}
 8007258:	469e      	mov	lr, r3
 800725a:	4770      	bx	lr
